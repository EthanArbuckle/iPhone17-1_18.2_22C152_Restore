void sub_198F0E0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _DWORD *v10;

  if (v10[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[2];
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::GraphicsLayerCARemote::layerMode(WebKit::GraphicsLayerCARemote *this)
{
  uint64_t v1 = *((void *)this + 113);
  BOOL result = 1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(*(void *)(v2 + 24) + 64)) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::copy@<X0>(WebKit::PlatformCAAnimationRemote *this@<X0>, uint64_t *a2@<X8>)
{
  char v4 = *((unsigned char *)this + 24);
  v5 = (WTF::StringImpl *)*((void *)this + 2);
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  v12 = v5;
  WebKit::PlatformCAAnimationRemote::create(a2, v4, &v12);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  v8 = (unsigned char *)*a2;
  (*(void (**)(uint64_t, double))(*(void *)*a2 + 64))(*a2, *((double *)this + 4));
  (*(void (**)(unsigned char *, double))(*(void *)v8 + 80))(v8, *((double *)this + 5));
  (*(void (**)(unsigned char *, float))(*(void *)v8 + 96))(v8, *((float *)this + 15));
  (*(void (**)(unsigned char *, double))(*(void *)v8 + 112))(v8, *((double *)this + 6));
  (*(void (**)(unsigned char *, float))(*(void *)v8 + 128))(v8, *((float *)this + 14));
  (*(void (**)(unsigned char *, void))(*(void *)v8 + 144))(v8, *((unsigned __int8 *)this + 80));
  (*(void (**)(unsigned char *, void))(*(void *)v8 + 160))(v8, *((unsigned __int8 *)this + 64));
  (*(void (**)(unsigned char *, void))(*(void *)v8 + 192))(v8, *((unsigned __int8 *)this + 81));
  (*(void (**)(unsigned char *, void))(*(void *)v8 + 208))(v8, *((unsigned __int8 *)this + 82));
  (*(void (**)(unsigned char *, WebKit::PlatformCAAnimationRemote *))(*(void *)v8 + 176))(v8, this);
  (*(void (**)(unsigned char *, void))(*(void *)v8 + 224))(v8, *((unsigned __int8 *)this + 65));
  if ((*(uint64_t (**)(unsigned char *))(*(void *)v8 + 32))(v8))
  {
    v8[84] = *((unsigned char *)this + 84);
    uint64_t v9 = *(void *)v8;
    if (*((unsigned char *)this + 24) == 2)
    {
      (*(void (**)(unsigned char *, WebKit::PlatformCAAnimationRemote *))(v9 + 368))(v8, this);
      (*(void (**)(unsigned char *, WebKit::PlatformCAAnimationRemote *))(*(void *)v8 + 384))(v8, this);
      v10 = (void (**)(unsigned char *, WebKit::PlatformCAAnimationRemote *))(*(void *)v8 + 400);
    }
    else
    {
      (*(void (**)(unsigned char *, WebKit::PlatformCAAnimationRemote *))(v9 + 272))(v8, this);
      v10 = (void (**)(unsigned char *, WebKit::PlatformCAAnimationRemote *))(*(void *)v8 + 320);
    }
    (*v10)(v8, this);
    return (*(uint64_t (**)(unsigned char *, WebKit::PlatformCAAnimationRemote *))(*(void *)v8 + 416))(v8, this);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

void sub_198F0E740(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::keyPath@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 16);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

double WebKit::PlatformCAAnimationRemote::beginTime(WebKit::PlatformCAAnimationRemote *this)
{
  return *((double *)this + 4);
}

double WebKit::PlatformCAAnimationRemote::duration(WebKit::PlatformCAAnimationRemote *this)
{
  return *((double *)this + 5);
}

float WebKit::PlatformCAAnimationRemote::speed(WebKit::PlatformCAAnimationRemote *this)
{
  return *((float *)this + 15);
}

double WebKit::PlatformCAAnimationRemote::timeOffset(WebKit::PlatformCAAnimationRemote *this)
{
  return *((double *)this + 6);
}

float WebKit::PlatformCAAnimationRemote::repeatCount(WebKit::PlatformCAAnimationRemote *this)
{
  return *((float *)this + 14);
}

uint64_t WebKit::PlatformCAAnimationRemote::autoreverses(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t WebKit::PlatformCAAnimationRemote::fillMode(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t WebKit::PlatformCAAnimationRemote::isRemovedOnCompletion(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t WebKit::PlatformCAAnimationRemote::isAdditive(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t WebKit::PlatformCAAnimationRemote::valueFunction(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 65);
}

void WebKit::PlatformCAAnimationRemoteProperties::~PlatformCAAnimationRemoteProperties(WebKit::PlatformCAAnimationRemoteProperties *this, WTF::StringImpl *a2)
{
  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, v3);
  v5 = (WTF *)*((void *)this + 11);
  if (v5)
  {
    *((void *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v5, v4);
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v4);
  v7 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 16))(v7);
    }
    else {
      --v7[2];
    }
  }
  v8 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t WebKit::PlatformCAAnimationRemote::setBeginTime(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  if (a2 != 0.0) {
    *(unsigned char *)(this + 84) = 1;
  }
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setDuration(uint64_t this, double a2)
{
  *(double *)(this + 40) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setSpeed(uint64_t this, float a2)
{
  *(float *)(this + 60) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setTimeOffset(uint64_t this, double a2)
{
  *(double *)(this + 48) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setRepeatCount(uint64_t this, float a2)
{
  *(float *)(this + 56) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setAutoreverses(uint64_t this, char a2)
{
  *(unsigned char *)(this + 80) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setFillMode(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

_DWORD *WebKit::PlatformCAAnimationRemote::setTimingFunction(uint64_t a1, void (***a2)(uint64_t *__return_ptr, void))
{
  (**a2)(&v4, a2);
  uint64_t result = *(_DWORD **)(a1 + 72);
  *(void *)(a1 + 72) = v4;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::copyTimingFunctionFrom(uint64_t a1, void *a2)
{
  if ((*(uint64_t (**)(void *))(*a2 + 32))(a2))
  {
    uint64_t v4 = a2[9];
    if (v4) {
      ++*(_DWORD *)(v4 + 8);
    }
    uint64_t result = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v4;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
      {
        v6 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v6();
      }
      else
      {
        --*(_DWORD *)(result + 8);
      }
    }
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setRemovedOnCompletion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 81) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setAdditive(uint64_t this, char a2)
{
  *(unsigned char *)(this + 82) = a2;
  return this;
}

uint64_t WebKit::PlatformCAAnimationRemote::setValueFunction(uint64_t result, char a2)
{
  *(unsigned char *)(result + 65) = a2;
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t this, float a2)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = (uint64_t *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    *(float *)v5 = a2;
    int v6 = 0;
    if (*(_DWORD *)(v3 + 100))
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v5);
      if (v6 != -1) {
        return ((uint64_t (*)(char *, _DWORD *))off_1EE9DF170[v6])(&v7, v5);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_198F0EB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)(result + 12);
  if (v2 >= 2)
  {
    if (v2 != 2)
    {
      uint64_t v7 = *(void *)result + 272;
      uint64_t v8 = 136 * v2 - 272;
      do
      {
        uint64_t v9 = *(unsigned int *)(v7 + 128);
        if (v9 != -1) {
          uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF170[v9])(&v10, v7);
        }
        *(_DWORD *)(v7 + 128) = -1;
        v7 += 136;
        v8 -= 136;
      }
      while (v8);
    }
  }
  else
  {
    if (*(_DWORD *)(result + 8) <= 1u) {
      uint64_t result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, 0x10uLL);
    }
    uint64_t v3 = *(void *)v1;
    if (*(void *)v1)
    {
      uint64_t v4 = *(unsigned int *)(v1 + 12);
      if (v4 != 2)
      {
        uint64_t v5 = 136 * v4;
        do
        {
          int v6 = (_DWORD *)(v3 + v5);
          _DWORD *v6 = 0;
          v6[32] = 0;
          v5 += 136;
        }
        while (v5 != 272);
      }
    }
  }
  *(_DWORD *)(v1 + 12) = 2;
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t this, const WebCore::TransformationMatrix *a2)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = (uint64_t *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    long long v5 = *((_OWORD *)a2 + 5);
    v9[4] = *((_OWORD *)a2 + 4);
    v9[5] = v5;
    long long v6 = *((_OWORD *)a2 + 7);
    v9[6] = *((_OWORD *)a2 + 6);
    v9[7] = v6;
    long long v7 = *((_OWORD *)a2 + 1);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    long long v8 = *((_OWORD *)a2 + 3);
    v9[2] = *((_OWORD *)a2 + 2);
    v9[3] = v8;
    int v10 = 3;
    if (*(_DWORD *)(v3 + 100))
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v9);
      if (v10 != -1) {
        return ((uint64_t (*)(char *, _OWORD *))off_1EE9DF170[v10])(&v11, v9);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_198F0ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t result, uint64_t *a2)
{
  if (!*(unsigned char *)(result + 24))
  {
    uint64_t v3 = result;
    uint64_t v4 = (uint64_t *)(result + 88);
    uint64_t result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(result + 88);
    uint64_t v5 = *a2;
    int v6 = *((_DWORD *)a2 + 2);
    int v7 = 2;
    if (*(_DWORD *)(v3 + 100))
    {
      uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)&v5);
      if (v7 != -1) {
        return ((uint64_t (*)(char *, uint64_t *))off_1EE9DF170[v7])(&v8, &v5);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void sub_198F0EDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t this, const Color *a2)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = (uint64_t *)(this + 88);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    this = WebCore::Color::Color((WebCore::Color *)v5, a2);
    int v6 = 1;
    if (*(_DWORD *)(v3 + 100))
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v5);
      if (v6 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9DF170[v6])(&v7, v5);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_198F0EEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlatformCAAnimationRemote::setFromValue(void *this, const WebCore::FilterOperation *a2)
{
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = this + 11;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)(this + 11));
    this = (*(void *(**)(void **__return_ptr, const WebCore::FilterOperation *))(*(void *)a2 + 16))(&v6, a2);
    uint64_t v5 = v6;
    int v6 = 0;
    v7[0] = v5;
    int v8 = 4;
    if (*((_DWORD *)v3 + 25))
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v7);
      if (v8 != -1) {
        ((void (*)(char *, void *))off_1EE9DF170[v8])(&v9, v7);
      }
      int v8 = -1;
      this = v6;
      int v6 = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this + 2);
          return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_198F0EFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  if (a27 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9DF170[a27])(v27 - 33, &a11);
  }
  a27 = -1;
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::copyFromValueFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  uint64_t result = (*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(void *)a2 + 32))(a2);
  if ((result & 1) == 0) {
    goto LABEL_11;
  }
  if (!*((_DWORD *)a2 + 25)) {
    return result;
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 88);
  if (!*((_DWORD *)a2 + 25))
  {
    __break(0xC471u);
    JUMPOUT(0x198F0F140);
  }
  if (!*((_DWORD *)this + 25))
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x198F0F138);
  }
  uint64_t v5 = *((void *)a2 + 11);
  uint64_t v6 = *((void *)this + 11);

  return std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(v6, v5);
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t this, float a2)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = (void *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    *(float *)uint64_t v5 = a2;
    int v6 = 0;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v5);
      if (v6 != -1) {
        return ((uint64_t (*)(char *, _DWORD *))off_1EE9DF170[v6])(&v7, v5);
      }
    }
  }
  return this;
}

void sub_198F0F1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t this, const WebCore::TransformationMatrix *a2)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = (void *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    long long v5 = *((_OWORD *)a2 + 5);
    v9[4] = *((_OWORD *)a2 + 4);
    v9[5] = v5;
    long long v6 = *((_OWORD *)a2 + 7);
    v9[6] = *((_OWORD *)a2 + 6);
    v9[7] = v6;
    long long v7 = *((_OWORD *)a2 + 1);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    long long v8 = *((_OWORD *)a2 + 3);
    v9[2] = *((_OWORD *)a2 + 2);
    v9[3] = v8;
    int v10 = 3;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v9);
      if (v10 != -1) {
        return ((uint64_t (*)(char *, _OWORD *))off_1EE9DF170[v10])(&v11, v9);
      }
    }
  }
  return this;
}

void sub_198F0F2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t result, uint64_t *a2)
{
  if (!*(unsigned char *)(result + 24))
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)(result + 88);
    uint64_t result = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(result + 88);
    uint64_t v5 = *a2;
    int v6 = *((_DWORD *)a2 + 2);
    int v7 = 2;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)&v5);
      if (v7 != -1) {
        return ((uint64_t (*)(char *, uint64_t *))off_1EE9DF170[v7])(&v8, &v5);
      }
    }
  }
  return result;
}

void sub_198F0F3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t this, const Color *a2)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = (void *)(this + 88);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    this = WebCore::Color::Color((WebCore::Color *)v5, a2);
    int v6 = 1;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v5);
      if (v6 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9DF170[v6])(&v7, v5);
      }
    }
  }
  return this;
}

void sub_198F0F478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9DF170[a25])(v25 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::PlatformCAAnimationRemote::setToValue(void *this, const WebCore::FilterOperation *a2)
{
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v3 = this;
    uint64_t v4 = this + 11;
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)(this + 11));
    this = (*(void *(**)(void **__return_ptr, const WebCore::FilterOperation *))(*(void *)a2 + 16))(&v6, a2);
    uint64_t v5 = v6;
    int v6 = 0;
    v7[0] = v5;
    int v8 = 4;
    if (*((_DWORD *)v3 + 25) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v7);
      if (v8 != -1) {
        ((void (*)(char *, void *))off_1EE9DF170[v8])(&v9, v7);
      }
      int v8 = -1;
      this = v6;
      int v6 = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this + 2);
          return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        }
      }
    }
  }
  return this;
}

void sub_198F0F5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  if (a27 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9DF170[a27])(v27 - 33, &a11);
  }
  a27 = -1;
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::copyToValueFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  uint64_t result = (*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(void *)a2 + 32))(a2);
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
  if (*((_DWORD *)a2 + 25) < 2u) {
    return result;
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)this + 88);
  if (*((_DWORD *)a2 + 25) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x198F0F720);
  }
  if (*((_DWORD *)this + 25) <= 1u)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198F0F718);
  }
  uint64_t v5 = *((void *)a2 + 11) + 136;
  uint64_t v6 = *((void *)this + 11) + 136;

  return std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(v6, v5);
}

uint64_t WebKit::PlatformCAAnimationRemote::setValues(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 24) == 2)
  {
    uint64_t v2 = result;
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<float>(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(float&)#1}>(v4, a2);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v2 + 88, v4);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  void v4[2];

  if (*(unsigned char *)(result + 24) == 2)
  {
    uint64_t v2 = result;
    WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::TransformationMatrix>(WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::TransformationMatrix&)#1}>(v4, a2);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v2 + 88, v4);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  void v4[2];

  if (*(unsigned char *)(result + 24) == 2)
  {
    uint64_t v2 = result;
    WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::FloatPoint3D>(WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::FloatPoint3D&)#1}>(v4, a2);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v2 + 88, v4);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char v12[128];
  int v13;
  char v14;

  if (*(unsigned char *)(result + 24) == 2)
  {
    uint64_t v3 = result;
    int v10 = 0;
    char v11 = 0;
    uint64_t v4 = *(unsigned int *)(a2 + 12);
    if (v4)
    {
      if (v4 >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = 136 * v4;
      uint64_t v6 = WTF::fastMalloc((WTF *)(136 * v4));
      LODWORD(v11) = v5 / 0x88;
      int v10 = v6;
      if (*(_DWORD *)(a2 + 12))
      {
        char v7 = 0;
        int v8 = 0;
        do
        {
          WebCore::Color::Color((WebCore::Color *)v12, (const Color *)(*(void *)a2 + v7));
          v13 = 1;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)v12);
          if (v13 != -1) {
            ((void (*)(char *, unsigned char *))off_1EE9DF170[v13])(&v14, v12);
          }
          ++v8;
          v6 += 136;
          v7 += 8;
        }
        while (v8 < *(unsigned int *)(a2 + 12));
        HIDWORD(v11) = v8;
      }
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 88, &v10);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void v10[16];
  int v11;
  char v12;

  if (*(unsigned char *)(result + 24) == 2)
  {
    uint64_t v3 = result;
    int v8 = 0;
    char v9 = 0;
    uint64_t v4 = *(unsigned int *)(a2 + 12);
    if (v4)
    {
      if (v4 >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v9) = 136 * (int)v4 / 0x88u;
      int v8 = WTF::fastMalloc((WTF *)(136 * v4));
      if (*(_DWORD *)(a2 + 12))
      {
        uint64_t v5 = 0;
        do
        {
          uint64_t v6 = *(void *)(*(void *)a2 + 8 * v5);
          atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
          v10[0] = v6;
          char v11 = 4;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v8 + 136 * HIDWORD(v9), (uint64_t)v10);
          ++HIDWORD(v9);
          if (v11 != -1) {
            ((void (*)(char *, void *))off_1EE9DF170[v11])(&v12, v10);
          }
          ++v5;
        }
        while (v5 < *(unsigned int *)(a2 + 12));
      }
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 88, &v8);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v7);
  }
  return result;
}

void sub_198F0F77C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4)
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = 136 * v4;
    do
    {
      uint64_t v8 = *(unsigned int *)(v6 + 128);
      if (v8 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9DF170[v8])(&v9, v6);
      }
      *(_DWORD *)(v6 + 128) = -1;
      v6 += 136;
      v7 -= 136;
    }
    while (v7);
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

void sub_198F0F87C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198F0F8E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198F0FA20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198F0FBA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::PlatformCAAnimationRemote::copyValuesFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  if ((*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(void *)a2 + 32))(a2))
  {
    return (uint64_t)WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 22, (uint64_t)a2 + 88);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  if ((unsigned int *)a2 != a1)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 12);
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
      }
    }
    else
    {
      WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)a1, v4);
    }
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = a1[3];
    if (v6)
    {
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = 136 * v6;
      do
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(v7, v5);
        v5 += 136;
        v7 += 136;
        v8 -= 136;
      }
      while (v8);
      uint64_t v5 = *(void *)a2;
      LODWORD(v6) = a1[3];
    }
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    if (v6 != v9)
    {
      uint64_t v10 = *(void *)a1 + 136 * v6;
      uint64_t v11 = v5 + 136 * v6;
      uint64_t v12 = 136 * v9 - 136 * v6;
      do
      {
        uint64_t v10 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(v10, v11)+ 136;
        v11 += 136;
        v12 -= 136;
      }
      while (v12);
      LODWORD(v6) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v6;
  }
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::setKeyTimes(uint64_t a1, const void **a2)
{
  return WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 104, a2);
}

uint64_t WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  if (a2 != (const void **)a1)
  {
    unsigned int v4 = *((_DWORD *)a2 + 3);
    if (*(_DWORD *)(a1 + 12) > v4)
    {
      *(_DWORD *)(a1 + 12) = v4;
    }
    else
    {
      if (v4 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, a2);
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, *((unsigned int *)a2 + 3));
      }
      unsigned int v4 = *(_DWORD *)(a1 + 12);
    }
    if (v4)
    {
      memmove(*(void **)a1, *a2, 4 * v4);
      uint64_t v5 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      uint64_t v5 = 0;
    }
    memcpy((void *)(*(void *)a1 + 4 * v5), (char *)*a2 + 4 * v5, (unsigned char *)*a2 + 4 * *((unsigned int *)a2 + 3) - ((unsigned char *)*a2 + 4 * v5));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::copyKeyTimesFrom(WebKit::PlatformCAAnimationRemote *this, const void **a2)
{
  if ((*((uint64_t (**)(const void **))*a2 + 4))(a2))
  {
    return WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 104, a2 + 13);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setTimingFunctions(uint64_t a1, uint64_t a2, char a3)
{
  WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::PlatformCAAnimationRemote::setTimingFunctions(WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL)::$_0>(v7, a2);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 120, v7);
  uint64_t result = WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  *(unsigned char *)(a1 + 83) = a3;
  return result;
}

void sub_198F0FEFC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(void *)a1 + 8 * v4));
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::copyTimingFunctionsFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  if ((*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(void *)a2 + 32))(a2))
  {
    uint64_t result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 30, (unsigned int *)a2 + 30);
    *((unsigned char *)this + 83) = *((unsigned char *)a2 + 83);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        LODWORD(v4) = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>::destruct((_DWORD *)(*(void *)a1 + 8 * v5), (_DWORD **)(*(void *)a1 + 8 * v4));
      a1[3] = v5;
      LODWORD(v4) = v5;
    }
    uint64_t v6 = *(void *)a2;
    if (v4)
    {
      uint64_t v7 = *(_DWORD ***)a1;
      uint64_t v8 = 8 * v4;
      do
      {
        unsigned int v9 = *(_DWORD **)v6;
        v9[2] = *(_DWORD *)(*(void *)v6 + 8) + 1;
        uint64_t v10 = *v7;
        _DWORD *v7 = v9;
        if (v10)
        {
          if (v10[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
          }
          else {
            --v10[2];
          }
        }
        v6 += 8;
        ++v7;
        v8 -= 8;
      }
      while (v8);
      uint64_t v6 = *(void *)a2;
      unsigned int v11 = a1[3];
    }
    else
    {
      unsigned int v11 = 0;
    }
    uint64_t v12 = a2[3];
    if (v11 != v12)
    {
      v13 = (void *)(*(void *)a1 + 8 * v11);
      v14 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v15 = 8 * v12 - 8 * v11;
      do
      {
        uint64_t v16 = *v14++;
        ++*(_DWORD *)(v16 + 8);
        *v13++ = v16;
        v15 -= 8;
      }
      while (v15);
    }
    a1[3] = v12;
  }
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::setAnimations(uint64_t a1, uint64_t a2)
{
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::PlatformCAAnimationRemote::setAnimations(WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>((uint64_t)v5, a2);
  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 136, (WTF::StringImpl *)v5);
  return WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void sub_198F10180(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4)
  {
    uint64_t v6 = *(WebKit::PlatformCAAnimationRemoteProperties **)a1;
    uint64_t v7 = 136 * v4;
    do
    {
      WebKit::PlatformCAAnimationRemoteProperties::~PlatformCAAnimationRemoteProperties(v6, a2);
      uint64_t v6 = (WebKit::PlatformCAAnimationRemoteProperties *)(v8 + 136);
      v7 -= 136;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::copyAnimationsFrom(WebKit::PlatformCAAnimationRemote *this, const WebCore::PlatformCAAnimation *a2)
{
  if ((*(uint64_t (**)(const WebCore::PlatformCAAnimation *))(*(void *)a2 + 32))(a2))
  {
    return (uint64_t)WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 34, (unsigned int *)a2 + 34);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = (WTF::StringImpl *)a2[3];
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
      }
    }
    else
    {
      WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    uint64_t v5 = *(void *)a2;
    unsigned int v6 = a1[3];
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v5 + 136 * v6;
      uint64_t v9 = *(void *)a1;
      do
      {
        uint64_t v10 = v9 + v7;
        uint64_t v11 = v5 + v7;
        WTF::String::operator=((uint64_t *)(v9 + v7), (WTF::StringImpl **)(v5 + v7));
        long long v12 = *(_OWORD *)(v5 + v7 + 8);
        long long v13 = *(_OWORD *)(v5 + v7 + 24);
        *(_OWORD *)(v10 + 34) = *(_OWORD *)(v5 + v7 + 34);
        *(_OWORD *)(v10 + 24) = v13;
        *(_OWORD *)(v10 + 8) = v12;
        uint64_t v14 = *(void *)(v5 + v7 + 56);
        if (v14) {
          ++*(_DWORD *)(v14 + 8);
        }
        uint64_t v15 = *(_DWORD **)(v10 + 56);
        *(void *)(v10 + 56) = v14;
        if (v15)
        {
          if (v15[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v15 + 16))(v15);
          }
          else {
            --v15[2];
          }
        }
        int v16 = *(_DWORD *)(v11 + 64);
        *(unsigned char *)(v10 + 68) = *(unsigned char *)(v11 + 68);
        *(_DWORD *)(v10 + 64) = v16;
        WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v9 + v7 + 72), v5 + v7 + 72);
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9 + v7 + 88, (const void **)(v5 + v7 + 88));
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v9 + v7 + 104), (unsigned int *)(v5 + v7 + 104));
        WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9 + v7 + 120, v5 + v7 + 120);
        v7 += 136;
      }
      while (v11 + 136 != v8);
      uint64_t v5 = *(void *)a2;
      unsigned int v6 = a1[3];
    }
    unsigned int v17 = a2[3];
    if (v6 != v17)
    {
      uint64_t v18 = *(void *)a1 + 136 * v6;
      uint64_t v19 = v5 + 136 * v6;
      uint64_t v20 = 136 * v17 - 136 * v6;
      do
      {
        uint64_t v18 = WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties(v18, v19) + 136;
        v19 += 136;
        v20 -= 136;
      }
      while (v20);
      unsigned int v6 = a2[3];
    }
    a1[3] = v6;
  }
  return a1;
}

uint64_t WebKit::PlatformCAAnimationRemote::updateLayerAnimations(CALayer *a1, WebKit::RemoteLayerTreeHost *a2, unsigned int *a3, void **a4)
{
  uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a4);
  uint64_t v9 = (void *)result;
  uint64_t v11 = v10;
  if (*a4) {
    uint64_t v12 = (uint64_t)&(*a4)[*((unsigned int *)*a4 - 1)];
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12 != result)
  {
    do
    {
      if (*v9) {
        long long v13 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        long long v13 = &stru_1EEA10550;
      }
      uint64_t result = [(CALayer *)a1 removeAnimationForKey:v13];
      while (++v9 != v11)
      {
        if ((unint64_t)(*v9 + 1) > 1) {
          goto LABEL_11;
        }
      }
      uint64_t v9 = v11;
LABEL_11:
      ;
    }
    while (v9 != (void *)v12);
  }
  uint64_t v14 = a3[3];
  if (v14)
  {
    uint64_t v15 = 144 * v14;
    int v16 = (const WebKit::PlatformCAAnimationRemoteProperties *)(*(void *)a3 + 8);
    do
    {
      uint64_t result = WebCore::PlatformCAAnimation::isValidKeyPath();
      if (result)
      {
        WebKit::createAnimation((WebKit *)&v19, a1, a2, v16);
        unsigned int v17 = v19;
        if (*((void *)v16 - 1)) {
          uint64_t v18 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          uint64_t v18 = &stru_1EEA10550;
        }
        [(CALayer *)a1 addAnimation:v17 forKey:v18];
        if (v17) {
          CFRelease(v17);
        }
        uint64_t result = [(CALayer *)a1 setInheritsTiming:0];
      }
      int v16 = (const WebKit::PlatformCAAnimationRemoteProperties *)((char *)v16 + 144);
      v15 -= 144;
    }
    while (v15);
  }
  return result;
}

void sub_198F105BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v20 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v20);
  objc_end_catch();
}

uint64_t WebKit::PlatformCALayerRemote::clone@<X0>(WebKit::PlatformCALayerRemote *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 104);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)0x348);
    WebCore::PlatformCALayer::PlatformCALayer();
    *(void *)(v6 + 56) = 0;
    *(void *)uint64_t v6 = &unk_1EE9DE2D8;
    WebKit::LayerProperties::LayerProperties((WebKit::LayerProperties *)(v6 + 64));
    *(_OWORD *)(v6 + 792) = 0u;
    *(_OWORD *)(v6 + 808) = 0u;
    *(unsigned char *)(v6 + 824) = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)a1 + 448))(a1);
    *(unsigned char *)(v6 + 825) = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 16), v4);
    uint64_t v7 = *(atomic_uint **)(v4 + 16);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    *(void *)(v6 + 832) = v7;
    WebKit::RemoteLayerTreeContext::layerDidEnterContext(v4, (_OWORD *)v6, *((unsigned __int8 *)a1 + 12));
    WebKit::PlatformCALayerRemote::updateClonedLayerProperties(a1, (int8x16_t *)v6, 1);
    uint64_t result = (uint64_t)WebKit::PlatformCALayerRemote::setClonedLayer((int8x16_t *)v6, (uint64_t)a1);
    *a2 = v6;
  }
  else
  {
    uint64_t result = 121;
    __break(0xC471u);
  }
  return result;
}

void sub_198F10784(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::updateClonedLayerProperties(WebKit::PlatformCALayerRemote *this, int8x16_t *a2, int a3)
{
  LODWORD(v22) = (*(float (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 264))(this);
  HIDWORD(v22) = v6;
  int v23 = v7;
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 272))(a2, &v22);
  LODWORD(v22) = (*(float (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 248))(this);
  HIDWORD(v22) = v8;
  int v23 = v9;
  int v24 = v10;
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 256))(a2, &v22);
  LODWORD(v22) = (*(float (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 280))(this);
  HIDWORD(v22) = v11;
  int v23 = v12;
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 288))(a2, &v22);
  if (*((void *)this + 11)) {
    (*(void (**)(int8x16_t *))(a2->i64[0] + 304))(a2);
  }
  if (*((void *)this + 12)) {
    (*(void (**)(int8x16_t *))(a2->i64[0] + 320))(a2);
  }
  if (a3)
  {
    uint64_t v13 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 488))(this);
    (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 496))(a2, v13);
  }
  uint64_t v14 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 432))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 440))(a2, v14);
  uint64_t v15 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 416))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 424))(a2, v15);
  uint64_t v16 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 232))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 240))(a2, v16);
  (*(void (**)(uint64_t *__return_ptr, WebKit::PlatformCALayerRemote *))(*(void *)this + 568))(&v22, this);
  (*(void (**)(int8x16_t *, uint64_t *))(a2->i64[0] + 576))(a2, &v22);
  if ((v22 & 0x8000000000000) != 0)
  {
    uint64_t v21 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v17);
    }
  }
  (*(void (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 664))(this);
  (*(void (**)(int8x16_t *))(a2->i64[0] + 672))(a2);
  (*(void (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 680))(this);
  (*(void (**)(int8x16_t *))(a2->i64[0] + 688))(a2);
  uint64_t v18 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 704))(this);
  (*(void (**)(int8x16_t *, uint64_t))(a2->i64[0] + 712))(a2, v18);
  a2[41].i8[8] = *((unsigned char *)this + 664);
  a2[4] = vorrq_s8(a2[4], (int8x16_t)vdupq_n_s64(0x8000000000uLL));
  if ((WebCore::Path::isEmpty((WebKit::PlatformCALayerRemote *)((char *)this + 496)) & 1) == 0) {
    (*(void (**)(int8x16_t *, char *))(a2->i64[0] + 744))(a2, (char *)this + 496);
  }
  if (*((void *)this + 13)) {
    (*(void (**)(int8x16_t *))(a2->i64[0] + 728))(a2);
  }
  if (*((void *)this + 61)) {
    (*(void (**)(int8x16_t *, WebKit::PlatformCALayerRemote *))(a2->i64[0] + 624))(a2, this);
  }
  uint64_t v19 = (*(uint64_t (**)(WebKit::PlatformCALayerRemote *))(*(void *)this + 784))(this);
  return (*(uint64_t (**)(int8x16_t *, uint64_t))(a2->i64[0] + 792))(a2, v19);
}

void sub_198F10F00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    int v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

int8x16_t *WebKit::PlatformCALayerRemote::setClonedLayer(int8x16_t *result, uint64_t a2)
{
  uint64_t v2 = result[36].i64[1];
  if (!v2)
  {
    if (!a2) {
      return result;
    }
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v3 = *(void *)(a2 + 24);
    goto LABEL_6;
  }
  if (!a2)
  {
    result[36].i64[1] = 0;
    result[37].i64[0] = 0;
LABEL_7:
    result[4] = vorrq_s8(result[4], (int8x16_t)vdupq_n_s64(0x4000uLL));
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v2 != v4 || result[37].i64[0] != v3)
  {
LABEL_6:
    result[36].i64[1] = v4;
    result[37].i64[0] = v3;
    goto LABEL_7;
  }
  return result;
}

void WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(WebKit::PlatformCALayerRemote *this, void *a2)
{
  *(void *)this = &unk_1EE9DE2D8;
  uint64_t v3 = (char *)this + 792;
  uint64_t v4 = *((unsigned int *)this + 201);
  if (v4)
  {
    int v11 = (void *)*((void *)this + 99);
    uint64_t v12 = 8 * v4;
    do
    {
      uint64_t v13 = *v11;
      if (((*(uint64_t (**)(void))(*(void *)*v11 + 32))(*v11) - 1) >= 4u)
      {
        __break(0xC471u);
        JUMPOUT(0x198F11160);
      }
      uint64_t v14 = *(unsigned int **)(v13 + 808);
      *(void *)(v13 + 808) = 0;
      if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v5 = *((void *)this + 104);
  if (v5)
  {
    int v6 = *(WebKit::RemoteLayerTreeContext **)(v5 + 8);
    if (v6)
    {
      ++*((_DWORD *)v6 + 2);
      WebKit::RemoteLayerTreeContext::layerWillLeaveContext(v6, *((WebKit::PlatformCALayerRemote **)this + 2), *((void *)this + 3));
      if (*((_DWORD *)v6 + 2) == 1) {
        (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(void *)v6 + 8))(v6);
      }
      else {
        --*((_DWORD *)v6 + 2);
      }
    }
    int v7 = (unsigned int *)*((void *)this + 104);
    *((void *)this + 104) = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  else
  {
    *((void *)this + 104) = 0;
  }
  uint64_t v8 = *((void *)this + 102);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  }
  int v9 = (unsigned int *)*((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
  WebKit::LayerProperties::~LayerProperties((WebKit::PlatformCALayerRemote *)((char *)this + 64));
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v10);

  WebCore::PlatformCALayer::~PlatformCALayer(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198F11178(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(unsigned int **)(v2 + 832);
  *(void *)(v2 + 832) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v6 = *(void *)(v2 + 816);
  if (v6) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, (WTF::StringImpl *)a2);
  }
  int v7 = *(unsigned int **)(v2 + 808);
  *(void *)(v2 + 808) = 0;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
  WebKit::LayerProperties::~LayerProperties((WebKit::LayerProperties *)(v2 + 64));
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 56), v8);
  WebCore::PlatformCALayer::~PlatformCALayer((WebCore::PlatformCALayer *)v2);
  _Unwind_Resume(a1);
}

void sub_198F11204()
{
  if (v0[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v0 + 8))(v0);
  }
  else {
    --v0[2];
  }
  JUMPOUT(0x198F1117CLL);
}

uint64_t *WebKit::RemoteLayerTreeContext::layerWillLeaveContext(WebKit::RemoteLayerTreeContext *this, WebKit::PlatformCALayerRemote *a2, uint64_t a3)
{
  *(void *)&long long v38 = a2;
  *((void *)&v38 + 1) = a3;
  uint64_t v4 = (uint64_t *)((char *)this + 72);
  uint64_t v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 9, &v38);
  uint64_t v6 = (uint64_t *)*((void *)this + 9);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != v5)
  {
    v36 = v5;
    v37 = WebKit::WebPage::videoPresentationManager(*((WebKit::WebPage **)this + 3));
    WebKit::VideoPresentationManager::willRemoveLayerForID(v37, v36[2]);
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::remove(v4, v36);
  }
  int v7 = (uint64_t **)((char *)this + 32);
  uint64_t v8 = *((void *)this + 4);
  if (!v8) {
    goto LABEL_6;
  }
  int v19 = *(_DWORD *)(v8 - 8);
  unsigned int v39 = -1640531527;
  __int16 v40 = 0;
  char v41 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v39, &v38);
  unsigned int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v39) & v19;
  uint64_t v21 = (uint64_t *)(v8 + 96 * v20);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  if (*v21 == (void)v38 && v23 == *((void *)&v38 + 1))
  {
LABEL_34:
    uint64_t v27 = *v7;
    if (!*v7)
    {
LABEL_39:
      if (v27 != v21)
      {
        *uint64_t v21 = -1;
        v21[1] = -1;
        uint64_t v28 = *((unsigned int *)v21 + 22);
        if (v28 != -1) {
          ((void (*)(unsigned int *, uint64_t *))off_1EE9DF240[v28])(&v39, v21 + 9);
        }
        int v29 = -1;
        *((_DWORD *)v21 + 22) = -1;
        ++*((_DWORD *)*v7 - 4);
        v30 = *v7;
        if (*v7) {
          int v29 = *((_DWORD *)v30 - 3) - 1;
        }
        *((_DWORD *)v30 - 3) = v29;
        v31 = *v7;
        if (*v7)
        {
          unsigned int v32 = 6 * *((_DWORD *)v31 - 3);
          unsigned int v33 = *((_DWORD *)v31 - 1);
          if (v32 < v33 && v33 >= 9) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash((uint64_t *)this + 4, v33 >> 1, 0);
          }
        }
      }
      goto LABEL_6;
    }
LABEL_38:
    v27 += 12 * *((unsigned int *)v27 - 1);
    if (v27 == v21) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
  int v25 = 1;
  while (v22 | v23)
  {
    unsigned int v20 = (v20 + v25) & v19;
    uint64_t v21 = (uint64_t *)(v8 + 96 * v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    ++v25;
    if (*v21 == (void)v38 && v23 == *((void *)&v38 + 1)) {
      goto LABEL_34;
    }
  }
  uint64_t v27 = *v7;
  if (*v7)
  {
    uint64_t v21 = &v27[12 * *((unsigned int *)v27 - 1)];
    goto LABEL_38;
  }
LABEL_6:
  int v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 7, &v38);
  uint64_t v10 = *((void *)this + 7);
  if (v10)
  {
    int v11 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4));
    if (v11 == v9) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!v9) {
      goto LABEL_13;
    }
    int v11 = 0;
  }
  if (v11 != v9) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove((uint64_t *)this + 7, v9);
  }
LABEL_13:
  uint64_t v12 = (uint64_t *)((char *)this + 40);
  uint64_t v13 = *((unsigned int *)this + 13);
  if (v13 == *((_DWORD *)this + 12))
  {
    v35 = (long long *)WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v38);
    uint64_t v13 = *((unsigned int *)this + 13);
    uint64_t v14 = *((void *)this + 5);
    long long v15 = *v35;
  }
  else
  {
    uint64_t v14 = *v12;
    long long v15 = v38;
  }
  *(_OWORD *)(v14 + 16 * v13) = v15;
  ++*((_DWORD *)this + 13);
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)this + 8, &v38);
  uint64_t v17 = *((void *)this + 8);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
    if (v18 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v18 = 0;
  }
  if (v18 != result) {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove((uint64_t *)this + 8, result);
  }
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setBackdropRootIsOpaque(int8x16_t *this, __int8 a2)
{
  this[41].i8[8] = a2;
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x8000000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::backdropRootIsOpaque(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 664);
}

uint64_t WebKit::PlatformCALayerRemote::recursiveMarkWillBeDisplayedWithRenderingSuppresion(WebKit::PlatformCALayerRemote *this)
{
  uint64_t result = *((void *)this + 59);
  if (result)
  {
    if (*((unsigned char *)this + 656)) {
      uint64_t result = WebKit::RemoteLayerBackingStore::layerWillBeDisplayedWithRenderingSuppression((WebKit::RemoteLayerBackingStore *)result);
    }
  }
  if (*((_DWORD *)this + 201))
  {
    uint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *(WebKit::PlatformCALayerRemote **)(*((void *)this + 99) + 8 * v3);
      if ((*(unsigned int (**)(WebKit::PlatformCALayerRemote *))(*(void *)v4 + 32))(v4) - 1 >= 4) {
        break;
      }
      uint64_t result = WebKit::PlatformCALayerRemote::recursiveMarkWillBeDisplayedWithRenderingSuppresion(v4);
      if (++v3 >= (unint64_t)*((unsigned int *)this + 201)) {
        return result;
      }
    }
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::downcast<WebKit::PlatformCALayerRemoteCustom,WebKit::PlatformCALayerRemote>(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 2) {
    return a1;
  }
  uint64_t result = 96;
  __break(0xC471u);
  return result;
}

void WebKit::PlatformCALayerRemote::setNeedsDisplayInRect(WebKit::RemoteLayerBackingStore **this, const WebCore::FloatRect *a2)
{
  if (*((unsigned char *)this + 656))
  {
    WebKit::PlatformCALayerRemote::ensureBackingStore((WebKit::PlatformCALayerRemote *)this, a2);
    uint64_t v4 = this[59];
    IntPoint v6 = (IntPoint)WebCore::enclosingIntRect(a2, v5);
    IntSize v8 = v7;
    IntPoint v9 = v6;
    IntSize v10 = v8;
    WebKit::RemoteLayerBackingStore::setNeedsDisplay(v4, v9, v10);
  }
}

int8x16_t WebKit::PlatformCALayerRemote::copyContentsFromLayer(int8x16_t *this, WebCore::PlatformCALayer *a2)
{
  uint64_t v3 = this[52].i64[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 8);
      *(_DWORD *)(v4 + 8) = v5 + 1;
      if (!this[4].i64[0])
      {
        IntPoint v6 = *(WebKit::RemoteLayerTreeTransaction **)(v4 + 200);
        if (v6)
        {
          WebKit::RemoteLayerTreeTransaction::layerPropertiesChanged(v6, this->i32);
          int v5 = *(_DWORD *)(v4 + 8) - 1;
        }
      }
      if (v5) {
        *(_DWORD *)(v4 + 8) = v5;
      }
      else {
        (*(void (**)(uint64_t, WebCore::PlatformCALayer *))(*(void *)v4 + 8))(v4, a2);
      }
    }
  }
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x4000uLL));
  this[4] = result;
  return result;
}

void sub_198F117A0(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::PlatformCALayerRemote::insertSublayer(int8x16_t *this, atomic_uint *a2, uint64_t a3)
{
  IntPoint v6 = (unsigned int *)(a2 + 2);
  atomic_fetch_add(a2 + 2, 1u);
  (*(void (**)(atomic_uint *))(*(void *)a2 + 112))(a2);
  int v11 = a2;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::PlatformCALayer*>((uint64_t)&this[49].i64[1], a3, (uint64_t *)&v11);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(&this[3].u32[2], (uint64_t)this);
  IntSize v7 = (atomic_uint *)this[3].i64[1];
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  if (((*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 32))(a2) - 1) >= 4u)
  {
    __break(0xC471u);
    JUMPOUT(0x198F11920);
  }
  IntPoint v9 = (unsigned int *)*((void *)a2 + 101);
  *((void *)a2 + 101) = v7;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10uLL));

  return WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v6);
}

void sub_198F11930(_Unwind_Exception *a1, void *a2)
{
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v2);
  _Unwind_Resume(a1);
}

void *WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::PlatformCALayer*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6 == *(_DWORD *)(a1 + 8))
  {
    unint64_t v10 = v6 + (v6 >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 <= v6 + 1) {
      unint64_t v12 = v6 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v12);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  IntSize v7 = (void *)(*(void *)a1 + 8 * a2);
  int8x16_t result = memmove(v7 + 1, v7, *(void *)a1 + 8 * v6 - (void)v7);
  uint64_t v9 = *a3;
  if (*a3) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  void *v7 = v9;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WebKit::PlatformCALayerRemote::replaceSublayer(WebKit::PlatformCALayerRemote *this, WebCore::PlatformCALayer *a2, atomic_uint *a3)
{
  unint64_t v6 = (unsigned int *)(a3 + 2);
  atomic_fetch_add(a3 + 2, 1u);
  (*(void (**)(atomic_uint *))(*(void *)a3 + 112))(a3);
  unint64_t v7 = *((unsigned int *)this + 201);
  if (v7)
  {
    unint64_t v8 = 0;
    while (*(WebCore::PlatformCALayer **)(*((void *)this + 99) + 8 * v8) != a2)
    {
      if (++v8 == v7) {
        goto LABEL_14;
      }
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    (*(void (**)(WebCore::PlatformCALayer *))(*(void *)a2 + 112))(a2);
    unint64_t v9 = *((unsigned int *)this + 201);
    if (v9 == *((_DWORD *)this + 200))
    {
      unint64_t v15 = v9 + (v9 >> 2);
      if (v15 >= 0x10) {
        unint64_t v16 = v15 + 1;
      }
      else {
        unint64_t v16 = 16;
      }
      if (v16 <= v9 + 1) {
        unint64_t v17 = v9 + 1;
      }
      else {
        unint64_t v17 = v16;
      }
      WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)this + 99, v17);
      LODWORD(v9) = *((_DWORD *)this + 201);
    }
    unint64_t v10 = (atomic_uint **)(*((void *)this + 99) + 8 * v8);
    memmove(v10 + 1, v10, 8 * v9 - 8 * v8);
    atomic_fetch_add(a3 + 2, 1u);
    *unint64_t v10 = a3;
    ++*((_DWORD *)this + 201);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 14, (uint64_t)this);
    unint64_t v11 = (atomic_uint *)*((void *)this + 7);
    if (v11) {
      atomic_fetch_add(v11, 1u);
    }
    if (((*(uint64_t (**)(atomic_uint *))(*(void *)a3 + 32))(a3) - 1) >= 4u)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x198F11C14);
    }
    uint64_t v13 = (unsigned int *)*((void *)a3 + 101);
    *((void *)a3 + 101) = v11;
    if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
LABEL_14:
  *((int8x16_t *)this + 4) = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x10uLL));

  return WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v6);
}

void sub_198F11C2C(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::adoptSublayers(WebKit::PlatformCALayerRemote *this, WebCore::PlatformCALayer *a2)
{
  if ((*(unsigned int (**)(WebCore::PlatformCALayer *))(*(void *)a2 + 32))(a2) - 1 >= 4)
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&__dst, (uint64_t)a2 + 792);
    uint64_t v4 = (*(uint64_t (**)(WebCore::PlatformCALayer *))(*(void *)a2 + 168))(a2);
    if (v4)
    {
      uint64_t v7 = *(unsigned int *)(v4 + 12);
      if (v7)
      {
        unint64_t v8 = *(uint64_t **)v4;
        uint64_t v9 = *(void *)v4 + 8 * v7;
        unsigned int v10 = v17;
        unsigned int v11 = v17;
        do
        {
          if (v11)
          {
            uint64_t v12 = v11;
            uint64_t v13 = __dst;
            uint64_t v14 = *v8;
            unint64_t v15 = (char *)__dst + 8;
            while (*v13 != v14)
            {
              ++v13;
              v15 += 8;
              if (!--v12) {
                goto LABEL_12;
              }
            }
            void *v13 = 0;
            if (v14)
            {
              WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
              unsigned int v10 = v17;
            }
            memmove(v13, v13 + 1, (unsigned char *)__dst + 8 * v10 - v15);
            unsigned int v10 = --v17;
            unsigned int v11 = v17;
          }
LABEL_12:
          ++v8;
        }
        while (v8 != (uint64_t *)v9);
      }
    }
    (*(void (**)(WebKit::PlatformCALayerRemote *, void **))(*(void *)this + 120))(this, &__dst);
    return WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&__dst, v5);
  }
  return result;
}

void sub_198F11E08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::PlatformCALayerRemote::addAnimationForKey(int8x16_t *this, WTF::StringImpl **a2, WebCore::PlatformCAAnimation *a3)
{
  v15[0] = (uint64_t)a3;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::PlatformCAAnimation*>((uint64_t)v16, this[51].i64, a2, v15);
  if (v16[16] || (uint64_t v12 = this[8].u32[3], !v12))
  {
LABEL_2:
    if ((*(uint64_t (**)(WebCore::PlatformCAAnimation *))(*(void *)a3 + 32))(a3))
    {
      std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]<true,0>(v15, *a2, (uint64_t)a3 + 16);
      unsigned __int32 v7 = this[8].u32[3];
      if (v7 == this[8].i32[2])
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)this[8].i64, (unint64_t)v15);
      }
      else
      {
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]((void *)(this[8].i64[0] + 144 * v7), v15);
        ++this[8].i32[3];
      }
      uint64_t result = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)v15, v8);
      goto LABEL_6;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198F1200CLL);
  }
  uint64_t v13 = this[8].i64[0] + 8;
  uint64_t v14 = 144 * v12;
  while (!WTF::equal(*(WTF **)(v13 - 8), *a2, v6))
  {
    v13 += 144;
    v14 -= 144;
    if (!v14) {
      goto LABEL_2;
    }
  }
  if (((*(uint64_t (**)(WebCore::PlatformCAAnimation *))(*(void *)a3 + 32))(a3) & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t result = WebKit::PlatformCAAnimationRemoteProperties::operator=(v13, (uint64_t)a3 + 16);
LABEL_6:
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20uLL));
  uint64_t v10 = this[52].i64[0];
  if (v10)
  {
    unsigned int v11 = *(WebKit::RemoteLayerTreeContext **)(v10 + 8);
    if (v11)
    {
      ++*((_DWORD *)v11 + 2);
      uint64_t result = WebKit::RemoteLayerTreeContext::willStartAnimationOnLayer(v11, (WebKit::PlatformCALayerRemote *)this);
      if (*((_DWORD *)v11 + 2) == 1) {
        return (*(uint64_t (**)(WebKit::RemoteLayerTreeContext *))(*(void *)v11 + 8))(v11);
      }
      else {
        --*((_DWORD *)v11 + 2);
      }
    }
  }
  return result;
}

void sub_198F12030(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_198F12044()
{
  if (v0[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v0 + 8))(v0);
  }
  else {
    --v0[2];
  }
  JUMPOUT(0x198F1203CLL);
}

uint64_t WebKit::PlatformCAAnimationRemoteProperties::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a2 + 56);
  if (v6) {
    ++*(_DWORD *)(v6 + 8);
  }
  unsigned __int32 v7 = *(_DWORD **)(a1 + 56);
  *(void *)(a1 + 56) = v6;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 16))(v7);
    }
    else {
      --v7[2];
    }
  }
  int v8 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v8;
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 72), a2 + 72);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 88, (const void **)(a2 + 88));
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 104), (unsigned int *)(a2 + 104));
  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 120), (unsigned int *)(a2 + 120));
  return a1;
}

uint64_t WebKit::RemoteLayerTreeContext::willStartAnimationOnLayer(WebKit::RemoteLayerTreeContext *this, WebKit::PlatformCALayerRemote *a2)
{
  long long v5 = *((_OWORD *)a2 + 1);
  long long v4 = a2;
  return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::PlatformCALayerRemote*>((uint64_t)&v3, (uint64_t *)this + 8, &v5, (uint64_t *)&v4);
}

int8x16_t WebKit::PlatformCALayerRemote::removeAnimationForKey(int8x16_t *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  i64 = this[51].i64;
  uint64_t v6 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(this[51].i64, a2, a3);
  uint64_t v8 = this[51].i64[0];
  if (v8)
  {
    uint64_t v9 = (WTF::StringImpl *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    if (v9 == v6) {
      goto LABEL_3;
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_3;
    }
    uint64_t v9 = 0;
  }
  if (v9 != v6) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(i64, v6);
  }
  v11[0] = a2;
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<WebKit::PlatformCALayerRemote::removeAnimationForKey(WTF::String const&)::$_0>((uint64_t)this[8].i64, v11, v7);
LABEL_3:
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(this[9].i64, a2, v7, (uint64_t)v11);
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x20uLL));
  this[4] = result;
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<WebKit::PlatformCALayerRemote::removeAnimationForKey(WTF::String const&)::$_0>(uint64_t result, const WTF::StringImpl ***a2, const WTF::StringImpl *a3)
{
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      int8x16_t result = WTF::equal(*(WTF **)(*(void *)v4 + v5), **a2, a3);
      if (result) {
        break;
      }
      uint64_t v6 = (WTF::StringImpl *)((char *)v6 + 1);
      v5 += 144;
      if ((unint64_t)v6 >= *(unsigned int *)(v4 + 12)) {
        return result;
      }
    }
    return WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v4, v6);
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::animationForKey@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(this + 816);
  if (v5)
  {
    int v8 = *(_DWORD *)(v5 - 8);
    unsigned int v9 = *((_DWORD *)*a2 + 4);
    if (v9 >= 0x100) {
      unsigned int v10 = v9 >> 8;
    }
    else {
      unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v10 = i + v12)
    {
      uint64_t v12 = v10 & v8;
      this = *(void *)(v5 + 16 * v12);
      if (!this) {
        break;
      }
      if (this != -1)
      {
        this = WTF::equal((WTF *)this, *a2, a3);
        if (this)
        {
          uint64_t v6 = *(void *)(v5 + 16 * v12 + 8);
          if (v6) {
            ++*(_DWORD *)(v6 + 8);
          }
          goto LABEL_3;
        }
      }
      ++i;
    }
  }
  uint64_t v6 = 0;
LABEL_3:
  *a4 = v6;
  return this;
}

uint64_t WebKit::PlatformCALayerRemote::animationStarted(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, double a4)
{
  uint64_t v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 816), a2, a3);
  uint64_t v8 = *(void *)(a1 + 816);
  if (v8) {
    v8 += 16 * *(unsigned int *)(v8 - 4);
  }
  if (v8 != v6)
  {
    unsigned int v9 = *(void **)(v6 + 8);
    if (((*(uint64_t (**)(void *))(*v9 + 32))(v9) & 1) == 0)
    {
      uint64_t result = 96;
      __break(0xC471u);
      return result;
    }
    WebCore::PlatformCALayer::currentTimeToMediaTime();
    v9[4] = v7.n128_u64[0];
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    unsigned int v11 = *(uint64_t (**)(__n128))(*(void *)result + 32);
    v7.n128_f64[0] = a4;
    return v11(v7);
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::animationEnded(WebKit::PlatformCALayerRemote *this, const WTF::String *a2)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const WTF::String *))(*(void *)result + 40))(result, a2);
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::setMaskLayer(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = (int8x16_t *)result;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 568);
  if (!v4)
  {
    if (!v3) {
      return result;
    }
    goto LABEL_3;
  }
  if (!v3 || (v4 == *(void *)(v3 + 16) ? (BOOL v6 = *(void *)(result + 576) == *(void *)(v3 + 24)) : (BOOL v6 = 0), !v6))
  {
LABEL_3:
    uint64_t v5 = (_OWORD *)(result + 568);
    WebCore::PlatformCALayer::setMaskLayer();
    uint64_t result = WebCore::PlatformCALayer::maskLayer((WebCore::PlatformCALayer *)v2);
    if (result)
    {
      _OWORD *v5 = *(_OWORD *)(result + 16);
    }
    else
    {
      *(void *)uint64_t v5 = 0;
      v2[36].i64[0] = 0;
    }
    v2[4] = vorrq_s8(v2[4], (int8x16_t)vdupq_n_s64(0x2000uLL));
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::isOpaque(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 660);
}

float WebKit::PlatformCALayerRemote::anchorPoint(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 107);
}

__n128 WebKit::PlatformCALayerRemote::transform@<Q0>(WebKit::PlatformCALayerRemote *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (long long *)*((void *)this + 11);
  if (!v2) {
    uint64_t v2 = &xmmword_1994F7330;
  }
  long long v3 = v2[5];
  *(_OWORD *)(a2 + 64) = v2[4];
  *(_OWORD *)(a2 + 80) = v3;
  long long v4 = v2[7];
  *(_OWORD *)(a2 + 96) = v2[6];
  *(_OWORD *)(a2 + 112) = v4;
  long long v5 = v2[1];
  *(_OWORD *)a2 = *v2;
  *(_OWORD *)(a2 + 16) = v5;
  __n128 result = (__n128)v2[2];
  long long v7 = v2[3];
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

__n128 WebKit::PlatformCALayerRemote::sublayerTransform@<Q0>(WebKit::PlatformCALayerRemote *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (long long *)*((void *)this + 12);
  if (!v2) {
    uint64_t v2 = &xmmword_1994F7330;
  }
  long long v3 = v2[5];
  *(_OWORD *)(a2 + 64) = v2[4];
  *(_OWORD *)(a2 + 80) = v3;
  long long v4 = v2[7];
  *(_OWORD *)(a2 + 96) = v2[6];
  *(_OWORD *)(a2 + 112) = v4;
  long long v5 = v2[1];
  *(_OWORD *)a2 = *v2;
  *(_OWORD *)(a2 + 16) = v5;
  __n128 result = (__n128)v2[2];
  long long v7 = v2[3];
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setSublayerTransform(int8x16_t *this, const WebCore::TransformationMatrix *a2)
{
  long long v5 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
  long long v6 = *((_OWORD *)a2 + 3);
  long long v8 = *(_OWORD *)a2;
  long long v7 = *((_OWORD *)a2 + 1);
  v5[2] = *((_OWORD *)a2 + 2);
  v5[3] = v6;
  _OWORD *v5 = v8;
  v5[1] = v7;
  long long v9 = *((_OWORD *)a2 + 7);
  long long v11 = *((_OWORD *)a2 + 4);
  long long v10 = *((_OWORD *)a2 + 5);
  v5[6] = *((_OWORD *)a2 + 6);
  v5[7] = v9;
  v5[4] = v11;
  v5[5] = v10;
  uint64_t v12 = (WTF *)this[6].i64[0];
  this[6].i64[0] = (uint64_t)v5;
  if (v12) {
    WTF::fastFree(v12, v4);
  }
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(4uLL));
  this[4] = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setIsBackdropRoot(int8x16_t *this, __int8 a2)
{
  this[41].i8[7] = a2;
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x4000000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::isHidden(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 655);
}

int8x16_t WebKit::PlatformCALayerRemote::setHidden(int8x16_t *this, int a2)
{
  if (this[40].u8[15] != a2)
  {
    this[40].i8[15] = a2;
    int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x40000000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::contentsHidden(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 661);
}

int8x16_t WebKit::PlatformCALayerRemote::setContentsHidden(int8x16_t *this, int a2)
{
  if (this[41].u8[5] != a2)
  {
    this[41].i8[5] = a2;
    int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x1000000000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::userInteractionEnabled(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 662);
}

int8x16_t WebKit::PlatformCALayerRemote::setUserInteractionEnabled(int8x16_t *this, int a2)
{
  if (this[41].u8[6] != a2)
  {
    this[41].i8[6] = a2;
    int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x2000000000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::backingStoreAttached(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 656);
}

int8x16_t WebKit::PlatformCALayerRemote::setGeometryFlipped(int8x16_t *this, __int8 a2)
{
  this[41].i8[1] = a2;
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x100000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::geometryFlipped(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 657);
}

uint64_t WebKit::PlatformCALayerRemote::isDoubleSided(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 658);
}

int8x16_t WebKit::PlatformCALayerRemote::setDoubleSided(int8x16_t *this, __int8 a2)
{
  this[41].i8[2] = a2;
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x200000000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::masksToBounds(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 659);
}

uint64_t WebKit::PlatformCALayerRemote::acceleratesDrawing(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 824);
}

uint64_t WebKit::PlatformCALayerRemote::wantsDeepColorBackingStore(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 825);
}

BOOL WebKit::PlatformCALayerRemote::hasContents(WebKit::PlatformCALayerRemote *this)
{
  return *((void *)this + 59) != 0;
}

uint64_t WebKit::PlatformCALayerRemote::contents(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

void *WebKit::PlatformCALayerRemote::setContents(void *this, const void *a2)
{
  if (!a2)
  {
    this = (void *)this[59];
    if (this) {
      return (void *)(*(uint64_t (**)(void))(*this + 96))();
    }
  }
  return this;
}

void WebKit::PlatformCALayerRemote::setDelegatedContents(uint64_t *a1, uint64_t a2)
{
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v8, (const WTF::MachSendRight *)a2);
  WTF::MachSendRight::MachSendRight();
  int v10 = 1;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  long long v11 = (unsigned int *)v5;
  uint64_t v12 = v6;
  char v13 = *(unsigned char *)(a2 + 24);
  WebKit::PlatformCALayerRemote::ensureBackingStore((WebKit::PlatformCALayerRemote *)a1, v4);
  WebKit::RemoteLayerBackingStore::setDelegatedContents(a1[59], (uint64_t)v9);
  long long v7 = v11;
  long long v11 = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  if (v10 != -1) {
    off_1EE9DF160[v10]((int)&v14, (WTF::MachSendRight *)v9);
  }
  int v10 = -1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v8);
}

void sub_198F128B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
}

int8x16_t WebKit::PlatformCALayerRemote::setContentsRect(WebKit::PlatformCALayerRemote *this, const FloatRect *a2)
{
  *(FloatRect *)((char *)this + 456) = *a2;
  int8x16_t result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x200uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setMinificationFilter(int8x16_t *a1, __int8 a2)
{
  a1[40].i8[9] = a2;
  int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x1000000uLL));
  a1[4] = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setMagnificationFilter(int8x16_t *a1, __int8 a2)
{
  a1[40].i8[10] = a2;
  int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x2000000uLL));
  a1[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::backgroundColor@<X0>(const Color *this@<X0>, WebCore::Color *a2@<X8>)
{
  return WebCore::Color::Color(a2, this + 79);
}

float WebKit::PlatformCALayerRemote::opacity(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 156);
}

int8x16_t WebKit::PlatformCALayerRemote::setOpacity(WebKit::PlatformCALayerRemote *this, float a2)
{
  *((float *)this + 156) = a2;
  int8x16_t result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x100000uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setFilters(int8x16_t *a1, uint64_t a2)
{
  long long v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a2);
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](&a1[30].i64[1], v4);
  int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x800uLL));
  a1[4] = result;
  return result;
}

void sub_198F12A34(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemote::copyFiltersFrom(int8x16_t *this, const WebCore::PlatformCALayer *a2)
{
  uint64_t result = (*(uint64_t (**)(const WebCore::PlatformCALayer *))(*(void *)a2 + 32))(a2);
  if ((result - 1) >= 4)
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    if (*((void *)a2 + 61))
    {
      uint64_t result = (*(uint64_t (**)(int8x16_t *))(this->i64[0] + 616))(this);
    }
    else if (this[30].i64[1])
    {
      uint64_t result = std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](&this[30].i64[1], 0);
    }
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x800uLL));
  }
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setBlendMode(int8x16_t *a1, __int8 a2)
{
  a1[40].i8[11] = a2;
  int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x4000000uLL));
  a1[4] = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setSpeed(WebKit::PlatformCALayerRemote *this, float a2)
{
  *((float *)this + 152) = a2;
  int8x16_t result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x10000uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

int8x16_t WebKit::PlatformCALayerRemote::setTimeOffset(WebKit::PlatformCALayerRemote *this, double a2)
{
  *((double *)this + 75) = a2;
  int8x16_t result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x8000uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

float WebKit::PlatformCALayerRemote::cornerRadius(WebKit::PlatformCALayerRemote *this)
{
  return *((float *)this + 154);
}

int8x16_t WebKit::PlatformCALayerRemote::setCornerRadius(int8x16_t *this, int8x16_t result)
{
  if (*(float *)&this[38].i32[2] != *(float *)result.i32)
  {
    this[38].i32[2] = result.i32[0];
    int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x40000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::videoGravity(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 653);
}

int8x16_t WebKit::PlatformCALayerRemote::setVideoGravity(int8x16_t *a1, int a2)
{
  if (a1[40].u8[13] != a2)
  {
    a1[40].i8[13] = a2;
    int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x10000000uLL));
    a1[4] = result;
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::shapeRoundedRect@<X0>(uint64_t this@<X0>, WebCore::FloatRoundedRect *a2@<X8>)
{
  uint64_t v2 = *(long long **)(this + 104);
  if (v2)
  {
    long long v3 = *v2;
    long long v4 = v2[2];
    *((_OWORD *)a2 + 1) = v2[1];
    *((_OWORD *)a2 + 2) = v4;
    *(_OWORD *)a2 = v3;
  }
  else
  {
    v6.m_location = 0;
    v6.m_size = 0;
    memset(&v5, 0, sizeof(v5));
    return WebCore::FloatRoundedRect::FloatRoundedRect(a2, &v6, &v5);
  }
  return this;
}

float WebKit::PlatformCALayerRemote::setShapeRoundedRect(int8x16_t *this, const WebCore::FloatRoundedRect *a2)
{
  uint64_t v4 = this[6].i64[1];
  if (!v4
    || (*(float *)v4 == *(float *)a2 ? (BOOL v5 = *(float *)(v4 + 4) == *((float *)a2 + 1)) : (BOOL v5 = 0),
        !v5
     || (*(float *)(v4 + 8) == *((float *)a2 + 2) ? (BOOL v6 = *(float *)(v4 + 12) == *((float *)a2 + 3)) : (BOOL v6 = 0),
         !v6
      || (*(float *)(v4 + 16) == *((float *)a2 + 4) ? (BOOL v7 = *(float *)(v4 + 20) == *((float *)a2 + 5)) : (BOOL v7 = 0),
          !v7
       || (*(float *)(v4 + 24) == *((float *)a2 + 6) ? (BOOL v8 = *(float *)(v4 + 28) == *((float *)a2 + 7)) : (BOOL v8 = 0),
           !v8
        || (*(float *)(v4 + 32) == *((float *)a2 + 8) ? (BOOL v9 = *(float *)(v4 + 36) == *((float *)a2 + 9)) : (BOOL v9 = 0),
            !v9
         || *(float *)(v4 + 40) != *((float *)a2 + 10)
         || (v15.i32[0] = *(_DWORD *)(v4 + 44), *(float *)v15.i32 != *((float *)a2 + 11))))))))
  {
    long long v11 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
    long long v13 = *((_OWORD *)a2 + 1);
    long long v12 = *((_OWORD *)a2 + 2);
    *long long v11 = *(_OWORD *)a2;
    v11[1] = v13;
    v11[2] = v12;
    char v14 = (WTF *)this[6].i64[1];
    this[6].i64[1] = (uint64_t)v11;
    if (v14) {
      WTF::fastFree(v14, v10);
    }
    int8x16_t v15 = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(8uLL));
    this[4] = v15;
  }
  return *(float *)v15.i32;
}

uint64_t WebKit::PlatformCALayerRemote::shapePath@<X0>(WebKit::PlatformCALayerRemote *this@<X0>, WebCore::Path *a2@<X8>)
{
  return WebCore::Path::Path(a2, (WebKit::PlatformCALayerRemote *)((char *)this + 496));
}

int8x16_t WebKit::PlatformCALayerRemote::setShapePath(int8x16_t *this, const Path *a2)
{
  uint64_t v3 = this[35].u32[0];
  uint64_t m_x_low = LODWORD(a2[1].m_data.__impl_.__data.__tail.__head.__value.m_data.__impl_.__data.__head.__value.point.m_x);
  if (v3 == -1)
  {
    if (m_x_low == -1) {
      goto LABEL_4;
    }
  }
  else if (m_x_low == -1)
  {
    ((void (*)(char *, unint64_t *))off_1EE9DF1E8[v3])(&v7, &this[31].u64[1]);
    this[35].i32[0] = -1;
    goto LABEL_4;
  }
  BOOL v6 = &this[31].i8[8];
  ((void (*)(char **))off_1EE9DF228[m_x_low])(&v6);
LABEL_4:
  int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x1000uLL));
  this[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::shapeWindRule(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 652);
}

int8x16_t WebKit::PlatformCALayerRemote::setShapeWindRule(int8x16_t *a1, __int8 a2)
{
  a1[40].i8[12] = a2;
  int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x8000000uLL));
  a1[4] = result;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::customAppearance(WebKit::PlatformCALayerRemote *this)
{
  return *((unsigned __int8 *)this + 648);
}

int8x16_t WebKit::PlatformCALayerRemote::updateCustomAppearance(int8x16_t *a1, int a2)
{
  if ((((a1[40].i8[8] == 0) ^ a2) & 1) == 0)
  {
    a1[40].i8[8] = a2;
    int8x16_t result = vorrq_s8(a1[4], (int8x16_t)vdupq_n_s64(0x800000uLL));
    a1[4] = result;
  }
  return result;
}

void WebKit::PlatformCALayerRemote::setEventRegion(int8x16_t *this, const WebCore::EventRegion *a2)
{
  if (this[42].i32[0] != *(_DWORD *)a2 || this[42].i32[1] != *((_DWORD *)a2 + 1)) {
    goto LABEL_10;
  }
  if (this[42].i32[2] != *((_DWORD *)a2 + 2) || this[42].i32[3] != *((_DWORD *)a2 + 3)) {
    goto LABEL_10;
  }
  uint64_t v6 = this[43].i64[0];
  uint64_t v7 = *((void *)a2 + 2);
  if (v6 != v7 && (!v6 || !v7 || !WebCore::operator==(v6, v7))) {
    goto LABEL_10;
  }
  unint64_t v8 = this[44].u32[1];
  if (v8 != *((_DWORD *)a2 + 9)) {
    goto LABEL_10;
  }
  if (v8)
  {
    BOOL v9 = (_DWORD *)this[43].i64[1];
    int v10 = (_DWORD *)*((void *)a2 + 3);
    BOOL v11 = *v9 == *v10 && v9[1] == v10[1];
    if (!v11 || v9[2] != v10[2] || v9[3] != v10[3]) {
      goto LABEL_10;
    }
    BOOL v12 = 0;
    long long v13 = v9 + 9;
    char v14 = v10 + 9;
    unint64_t v15 = 1;
    do
    {
      uint64_t v16 = *(void *)(v13 - 5);
      uint64_t v17 = *(void *)(v14 - 5);
      if (v16 != v17)
      {
        BOOL v22 = !v16 || v17 == 0;
        if (v22 || !WebCore::operator==(v16, v17)) {
          break;
        }
      }
      BOOL v12 = v15 >= v8;
      if (v8 == v15) {
        break;
      }
      if (*(v13 - 3) != *(v14 - 3) || *(v13 - 2) != *(v14 - 2)) {
        break;
      }
      if (*(v13 - 1) != *(v14 - 1)) {
        break;
      }
      int v20 = *v13;
      v13 += 6;
      int v19 = v20;
      int v21 = *v14;
      v14 += 6;
      ++v15;
    }
    while (v19 == v21);
    if (!v12) {
      goto LABEL_10;
    }
  }
  if (!WebCore::operator==((uint64_t)&this[44].i64[1], (uint64_t)a2 + 40)
    || !WebCore::operator==((uint64_t)this[46].i64, (uint64_t)a2 + 64))
  {
    goto LABEL_10;
  }
  if (!this[49].i8[0] || !*((unsigned char *)a2 + 112))
  {
    if ((this[49].i8[0] != 0) == (*((unsigned char *)a2 + 112) != 0)) {
      return;
    }
    goto LABEL_10;
  }
  if (this[47].i32[2] != *((_DWORD *)a2 + 22)
    || this[47].i32[3] != *((_DWORD *)a2 + 23)
    || this[48].i32[0] != *((_DWORD *)a2 + 24)
    || this[48].i32[1] != *((_DWORD *)a2 + 25)
    || (uint64_t v23 = this[48].i64[1], v24 = *((void *)a2 + 13), v23 != v24)
    && (!v23 || !v24 || (WebCore::operator==(v23, v24) & 1) == 0))
  {
LABEL_10:
    WebCore::Region::operator=();
    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&this[43].i64[1], (uint64_t)a2 + 24);
    WebCore::Region::operator=();
    WebCore::Region::operator=();
    std::__optional_storage_base<WebCore::Region,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Region,false> const&>((WebCore::Region *)&this[47].u64[1], (unsigned __int8 *)a2 + 88);
    this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x10000000000uLL));
  }
}

uint64_t WebKit::PlatformCALayerRemote::hostingContextID(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemote::backingStoreBytesPerPixel(WebKit::PlatformCALayerRemote *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 59);
  if (!v1) {
    return 4;
  }
  if (v1[24] || !v1[52])
  {
    unsigned __int8 v2 = v1[53] ^ 1;
  }
  else if (v1[53])
  {
    unsigned __int8 v2 = 2;
  }
  else
  {
    unsigned __int8 v2 = 3;
  }
  if (v2 < 3u) {
    return 4;
  }
  else {
    return 5;
  }
}

int8x16_t WebKit::PlatformCALayerRemote::clearAcceleratedEffectsAndBaseValues(WebKit::PlatformCALayerRemote *this, void *a2)
{
  v9[0] = 0uLL;
  uint64_t v3 = *((unsigned int *)this + 41);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>::destruct(*((_DWORD **)this + 19), (_DWORD **)(*((void *)this + 19) + 8 * v3));
  }
  uint64_t v4 = (WTF *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v4, a2);
    uint64_t v6 = *((void *)&v9[0] + 1);
    uint64_t v5 = *(void *)&v9[0];
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v9[0] = 0uLL;
  *((void *)this + 19) = v5;
  *((void *)this + 20) = v6;
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, a2);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v11 = 1;
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  LODWORD(v9[0]) = 1065353216;
  LODWORD(v10) = 0;
  *(_DWORD *)((char *)&v10 + 3) = 0;
  DWORD2(v10) = 0;
  *(_DWORD *)((char *)&v10 + 11) = 0;
  LODWORD(v15) = 0;
  *(_DWORD *)((char *)&v15 + 3) = 0;
  DWORD2(v15) = 0;
  *(_DWORD *)((char *)&v15 + 11) = 0;
  LODWORD(v16) = 0;
  *(_DWORD *)((char *)&v16 + 3) = 0;
  DWORD2(v16) = 0;
  *(_DWORD *)((char *)&v16 + 11) = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  long long v18 = 0u;
  long long v19 = 0u;
  WebCore::AcceleratedEffectValues::operator=((uint64_t)this + 168, (uint64_t)v9);
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v9, v7);
  int8x16_t result = vorrq_s8(*((int8x16_t *)this + 4), (int8x16_t)vdupq_n_s64(0x20uLL));
  *((int8x16_t *)this + 4) = result;
  return result;
}

void sub_198F13218(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int8x16_t WebKit::PlatformCALayerRemote::setAcceleratedEffectsAndBaseValues(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = (void *)(a1 + 152);
  if ((uint64_t *)(a1 + 152) != a2)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 164);
    uint64_t v8 = *((unsigned int *)a2 + 3);
    if (v7 <= v8)
    {
      if (v8 > *(_DWORD *)(a1 + 160))
      {
        WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 152), 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v5, *((unsigned int *)a2 + 3));
        LODWORD(v7) = *(_DWORD *)(a1 + 164);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>::destruct((_DWORD *)(*(void *)(a1 + 152) + 8 * v8), (_DWORD **)(*(void *)(a1 + 152) + 8 * v7));
      *(_DWORD *)(a1 + 164) = v8;
      LODWORD(v7) = v8;
    }
    uint64_t v9 = *a2;
    if (v7)
    {
      long long v10 = (_DWORD **)*v5;
      uint64_t v11 = 8 * v7;
      do
      {
        long long v12 = *(_DWORD **)v9;
        v12[2] = *(_DWORD *)(*(void *)v9 + 8) + 1;
        long long v13 = *v10;
        *long long v10 = v12;
        if (v13)
        {
          if (v13[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v13 + 56))(v13);
          }
          else {
            --v13[2];
          }
        }
        v9 += 8;
        ++v10;
        v11 -= 8;
      }
      while (v11);
      uint64_t v9 = *a2;
      unsigned int v14 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      unsigned int v14 = 0;
    }
    uint64_t v15 = *((unsigned int *)a2 + 3);
    if (v14 != v15)
    {
      long long v16 = (void *)(*v5 + 8 * v14);
      uint64_t v17 = (uint64_t *)(v9 + 8 * v14);
      uint64_t v18 = 8 * v15 - 8 * v14;
      do
      {
        uint64_t v19 = *v17++;
        ++*(_DWORD *)(v19 + 8);
        *v16++ = v19;
        v18 -= 8;
      }
      while (v18);
    }
    *(_DWORD *)(a1 + 164) = v15;
  }
  long long v20 = *a3;
  *(_OWORD *)(a1 + 184) = a3[1];
  *(_OWORD *)(a1 + 168) = v20;
  long long v21 = a3[2];
  long long v22 = a3[3];
  long long v23 = a3[4];
  *(_OWORD *)(a1 + 245) = *(long long *)((char *)a3 + 77);
  *(_OWORD *)(a1 + 232) = v23;
  *(_OWORD *)(a1 + 216) = v22;
  *(_OWORD *)(a1 + 200) = v21;
  if ((long long *)(a1 + 168) == a3)
  {
    *(unsigned char *)(a1 + 280) = *((unsigned char *)a3 + 112);
  }
  else
  {
    uint64_t v24 = (_DWORD *)(a1 + 264);
    if (*(unsigned char *)(a1 + 268) == 11) {
      WebCore::Length::deref((WebCore::Length *)(a1 + 264));
    }
    unsigned int v25 = *((unsigned __int8 *)a3 + 100);
    *(unsigned char *)(a1 + 268) = v25;
    *(unsigned char *)(a1 + 269) = *((unsigned char *)a3 + 101);
    if (v25 <= 0xD)
    {
      int v26 = 1 << v25;
      if ((v26 & 0x7FC) != 0)
      {
        *(unsigned char *)(a1 + 270) = *((unsigned char *)a3 + 102);
        *uint64_t v24 = *((_DWORD *)a3 + 24);
      }
      else if ((v26 & 0x3003) != 0)
      {
        *uint64_t v24 = 0;
      }
      else
      {
        *uint64_t v24 = *((_DWORD *)a3 + 24);
        WebCore::Length::ref((WebCore::Length *)(a1 + 264));
      }
    }
    uint64_t v27 = (_DWORD *)(a1 + 272);
    if (*(unsigned char *)(a1 + 276) == 11) {
      WebCore::Length::deref((WebCore::Length *)(a1 + 272));
    }
    unsigned int v28 = *((unsigned __int8 *)a3 + 108);
    *(unsigned char *)(a1 + 276) = v28;
    *(unsigned char *)(a1 + 277) = *((unsigned char *)a3 + 109);
    if (v28 <= 0xD)
    {
      int v29 = 1 << v28;
      if ((v29 & 0x7FC) != 0)
      {
        *(unsigned char *)(a1 + 278) = *((unsigned char *)a3 + 110);
        *uint64_t v27 = *((_DWORD *)a3 + 26);
      }
      else if ((v29 & 0x3003) != 0)
      {
        *uint64_t v27 = 0;
      }
      else
      {
        *uint64_t v27 = *((_DWORD *)a3 + 26);
        WebCore::Length::ref((WebCore::Length *)(a1 + 272));
      }
    }
    *(unsigned char *)(a1 + 280) = *((unsigned char *)a3 + 112);
    v30 = (_DWORD ***)(a1 + 288);
    uint64_t v31 = *(unsigned int *)(a1 + 300);
    uint64_t v32 = *((unsigned int *)a3 + 33);
    if (v31 <= v32)
    {
      if (v32 > *(_DWORD *)(a1 + 296))
      {
        WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)(a1 + 288), 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 288, *((unsigned int *)a3 + 33));
        LODWORD(v31) = *(_DWORD *)(a1 + 300);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>::destruct((_DWORD *)(*(void *)(a1 + 288) + 8 * v32), (_DWORD **)(*(void *)(a1 + 288) + 8 * v31));
      *(_DWORD *)(a1 + 300) = v32;
      LODWORD(v31) = v32;
    }
    uint64_t v33 = *((void *)a3 + 15);
    if (v31)
    {
      v34 = *v30;
      uint64_t v35 = 8 * v31;
      do
      {
        v36 = *(_DWORD **)v33;
        v36[2] = *(_DWORD *)(*(void *)v33 + 8) + 1;
        v37 = *v34;
        *v34 = v36;
        if (v37)
        {
          if (v37[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v37 + 8))(v37);
          }
          else {
            --v37[2];
          }
        }
        v33 += 8;
        ++v34;
        v35 -= 8;
      }
      while (v35);
      uint64_t v33 = *((void *)a3 + 15);
      unsigned int v38 = *(_DWORD *)(a1 + 300);
    }
    else
    {
      unsigned int v38 = 0;
    }
    uint64_t v39 = *((unsigned int *)a3 + 33);
    if (v38 != v39)
    {
      __int16 v40 = &(*v30)[v38];
      char v41 = (uint64_t *)(v33 + 8 * v38);
      uint64_t v42 = 8 * v39 - 8 * v38;
      do
      {
        uint64_t v43 = *v41++;
        ++*(_DWORD *)(v43 + 8);
        *v40++ = v43;
        v42 -= 8;
      }
      while (v42);
    }
    *(_DWORD *)(a1 + 300) = v39;
  }
  uint64_t v44 = *((void *)a3 + 17);
  if (v44) {
    ++*(_DWORD *)(v44 + 8);
  }
  v45 = *(_DWORD **)(a1 + 304);
  *(void *)(a1 + 304) = v44;
  if (v45)
  {
    if (v45[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
    }
    else {
      --v45[2];
    }
  }
  uint64_t v46 = *((void *)a3 + 18);
  if (v46) {
    ++*(_DWORD *)(v46 + 8);
  }
  v47 = *(_DWORD **)(a1 + 312);
  *(void *)(a1 + 312) = v46;
  if (v47)
  {
    if (v47[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v47 + 8))(v47);
    }
    else {
      --v47[2];
    }
  }
  uint64_t v48 = *((void *)a3 + 19);
  if (v48) {
    ++*(_DWORD *)(v48 + 8);
  }
  v49 = *(_DWORD **)(a1 + 320);
  *(void *)(a1 + 320) = v48;
  if (v49)
  {
    if (v49[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v49 + 8))(v49);
    }
    else {
      --v49[2];
    }
  }
  uint64_t v50 = *((void *)a3 + 20);
  if (v50) {
    ++*(_DWORD *)(v50 + 8);
  }
  v51 = *(_DWORD **)(a1 + 328);
  *(void *)(a1 + 328) = v50;
  if (v51)
  {
    if (v51[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v51 + 8))(v51);
    }
    else {
      --v51[2];
    }
  }
  if ((long long *)(a1 + 168) != a3)
  {
    v52 = (_DWORD *)(a1 + 336);
    if (*(unsigned char *)(a1 + 340) == 11) {
      WebCore::Length::deref((WebCore::Length *)(a1 + 336));
    }
    unsigned int v53 = *((unsigned __int8 *)a3 + 172);
    *(unsigned char *)(a1 + 340) = v53;
    *(unsigned char *)(a1 + 341) = *((unsigned char *)a3 + 173);
    if (v53 <= 0xD)
    {
      int v54 = 1 << v53;
      if ((v54 & 0x7FC) != 0)
      {
        *(unsigned char *)(a1 + 342) = *((unsigned char *)a3 + 174);
        _DWORD *v52 = *((_DWORD *)a3 + 42);
      }
      else if ((v54 & 0x3003) != 0)
      {
        _DWORD *v52 = 0;
      }
      else
      {
        _DWORD *v52 = *((_DWORD *)a3 + 42);
        WebCore::Length::ref((WebCore::Length *)(a1 + 336));
      }
    }
    v55 = (_DWORD *)(a1 + 344);
    if (*(unsigned char *)(a1 + 348) == 11) {
      WebCore::Length::deref((WebCore::Length *)(a1 + 344));
    }
    unsigned int v56 = *((unsigned __int8 *)a3 + 180);
    *(unsigned char *)(a1 + 348) = v56;
    *(unsigned char *)(a1 + 349) = *((unsigned char *)a3 + 181);
    if (v56 <= 0xD)
    {
      int v57 = 1 << v56;
      if ((v57 & 0x7FC) != 0)
      {
        *(unsigned char *)(a1 + 350) = *((unsigned char *)a3 + 182);
        _DWORD *v55 = *((_DWORD *)a3 + 44);
      }
      else if ((v57 & 0x3003) != 0)
      {
        _DWORD *v55 = 0;
      }
      else
      {
        _DWORD *v55 = *((_DWORD *)a3 + 44);
        WebCore::Length::ref((WebCore::Length *)(a1 + 344));
      }
    }
    v58 = (_DWORD *)(a1 + 352);
    if (*(unsigned char *)(a1 + 356) == 11) {
      WebCore::Length::deref((WebCore::Length *)(a1 + 352));
    }
    unsigned int v59 = *((unsigned __int8 *)a3 + 188);
    *(unsigned char *)(a1 + 356) = v59;
    *(unsigned char *)(a1 + 357) = *((unsigned char *)a3 + 189);
    if (v59 <= 0xD)
    {
      int v60 = 1 << v59;
      if ((v60 & 0x7FC) != 0)
      {
        *(unsigned char *)(a1 + 358) = *((unsigned char *)a3 + 190);
        _DWORD *v58 = *((_DWORD *)a3 + 46);
      }
      else if ((v60 & 0x3003) != 0)
      {
        _DWORD *v58 = 0;
      }
      else
      {
        _DWORD *v58 = *((_DWORD *)a3 + 46);
        WebCore::Length::ref((WebCore::Length *)(a1 + 352));
      }
    }
    v61 = (_DWORD *)(a1 + 360);
    if (*(unsigned char *)(a1 + 364) == 11) {
      WebCore::Length::deref((WebCore::Length *)(a1 + 360));
    }
    unsigned int v62 = *((unsigned __int8 *)a3 + 196);
    *(unsigned char *)(a1 + 364) = v62;
    *(unsigned char *)(a1 + 365) = *((unsigned char *)a3 + 197);
    if (v62 <= 0xD)
    {
      int v63 = 1 << v62;
      if ((v63 & 0x7FC) != 0)
      {
        *(unsigned char *)(a1 + 366) = *((unsigned char *)a3 + 198);
        _DWORD *v61 = *((_DWORD *)a3 + 48);
      }
      else if ((v63 & 0x3003) != 0)
      {
        _DWORD *v61 = 0;
      }
      else
      {
        _DWORD *v61 = *((_DWORD *)a3 + 48);
        WebCore::Length::ref((WebCore::Length *)(a1 + 360));
      }
    }
    v64 = (_DWORD *)(a1 + 368);
    if (*(unsigned char *)(a1 + 372) == 11) {
      WebCore::Length::deref((WebCore::Length *)(a1 + 368));
    }
    unsigned int v65 = *((unsigned __int8 *)a3 + 204);
    *(unsigned char *)(a1 + 372) = v65;
    *(unsigned char *)(a1 + 373) = *((unsigned char *)a3 + 205);
    if (v65 <= 0xD)
    {
      int v66 = 1 << v65;
      if ((v66 & 0x7FC) != 0)
      {
        *(unsigned char *)(a1 + 374) = *((unsigned char *)a3 + 206);
        _DWORD *v64 = *((_DWORD *)a3 + 50);
      }
      else if ((v66 & 0x3003) != 0)
      {
        _DWORD *v64 = 0;
      }
      else
      {
        _DWORD *v64 = *((_DWORD *)a3 + 50);
        WebCore::Length::ref((WebCore::Length *)(a1 + 368));
      }
    }
  }
  int v67 = *((_DWORD *)a3 + 52);
  *(unsigned char *)(a1 + 380) = *((unsigned char *)a3 + 212);
  *(_DWORD *)(a1 + 376) = v67;
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 384), (unsigned int *)a3 + 54);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 400), (unsigned int *)a3 + 58);
  int8x16_t result = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x20uLL));
  *(int8x16_t *)(a1 + 64) = result;
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::purgeFrontBufferForTesting(WebKit::PlatformCALayerRemote *this)
{
  int8x16_t result = (WebKit::RemoteLayerBackingStore *)*((void *)this + 59);
  if (result) {
    return WebKit::RemoteLayerBackingStore::purgeFrontBufferForTesting(result);
  }
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::purgeBackBufferForTesting(WebKit::PlatformCALayerRemote *this)
{
  int8x16_t result = (WebKit::RemoteLayerBackingStore *)*((void *)this + 59);
  if (result) {
    return WebKit::RemoteLayerBackingStore::purgeBackBufferForTesting(result);
  }
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::PlatformCALayerRemote::markFrontBufferVolatileForTesting(WebKit::PlatformCALayerRemote *this)
{
  int8x16_t result = (WebKit::RemoteLayerBackingStore *)*((void *)this + 59);
  if (result) {
    return WebKit::RemoteLayerBackingStore::markFrontBufferVolatileForTesting(result);
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = WebKit::PlatformCALayerRemote::PlatformCALayerRemote(a1, a2, a4, a5);
  *(void *)uint64_t v7 = &unk_1EE9DE660;
  *(unsigned char *)(v7 + 840) = 0;
  uint64_t v8 = (id **)(v7 + 848);
  *(_OWORD *)(v7 + 848) = 0u;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(unsigned char *)uint64_t v9 = 1;
  *(_DWORD *)(v9 + 4) = a3;
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v8, (id *)v9);
  return a1;
}

void sub_198F13B24(_Unwind_Exception *a1)
{
  uint64_t v4 = (const void *)*((void *)v1 + 107);
  *((void *)v1 + 107) = 0;
  if (v4) {
    CFRelease(v4);
  }
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v2, 0);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(v1, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = WebKit::PlatformCALayerRemote::PlatformCALayerRemote(a1, a2, a4, a5);
  *(void *)uint64_t v8 = &unk_1EE9DE660;
  *(unsigned char *)(v8 + 840) = 0;
  uint64_t v9 = (id **)(v8 + 848);
  *(_OWORD *)(v8 + 848) = 0u;
  uint64_t v10 = *(void *)(a5 + 24);
  if (*(unsigned char *)(v10 + 64) == 1)
  {
    uint64_t v12 = *(void *)(v10 + 48);
    if (v12) {
      LOBYTE(v12) = *(unsigned char *)(v12 + 449) != 0;
    }
    LOWORD(v43) = v12;
    WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)&v43, (uint64_t *)&v42);
    CGFloat x = v42.origin.x;
    v42.origin.CGFloat x = 0.0;
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v9, *(id **)&x);
    CGFloat v14 = v42.origin.x;
    v42.origin.CGFloat x = 0.0;
    if (v14 != 0.0)
    {
      WebKit::LayerHostingContext::~LayerHostingContext(*(id **)&v14);
      WTF::fastFree(v15, v16);
    }
    uint64_t v11 = *v9;
  }
  else
  {
    if (!*(unsigned char *)(v10 + 64))
    {
      uint64_t result = 91;
      __break(0xC471u);
      return result;
    }
    uint64_t v11 = 0;
  }
  id v17 = v11[2];
  if (v17) {
    [v17 setLayer:a3];
  }
  else {
    [v11[1] setLayer:a3];
  }
  objc_msgSend(a3, "setValue:forKey:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithPointer:", a1, *(void *)&v42.origin.x), @"WKPlatformCALayer");
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v18 = *(const void **)(a1 + 856);
  *(void *)(a1 + 856) = a3;
  if (v18) {
    CFRelease(v18);
  }
  objc_msgSend(a3, "web_disableAllActions");
  [a3 position];
  double v20 = v19;
  [a3 position];
  double v22 = v21;
  [a3 zPosition];
  float v23 = v20;
  float v24 = v22;
  *(float *)(a1 + 416) = v23;
  *(float *)&double v25 = v25;
  *(float *)(a1 + 420) = v24;
  *(_DWORD *)(a1 + 424) = LODWORD(v25);
  [a3 anchorPoint];
  double v27 = v26;
  [a3 anchorPoint];
  double v29 = v28;
  [a3 anchorPointZ];
  float v30 = v27;
  float v31 = v29;
  *(float *)(a1 + 428) = v30;
  *(float *)&double v32 = v32;
  *(float *)(a1 + 432) = v31;
  *(_DWORD *)(a1 + 436) = LODWORD(v32);
  [a3 bounds];
  v42.origin.CGFloat x = v33;
  v42.origin.y = v34;
  v42.size.width = v35;
  v42.size.height = v36;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v43, &v42);
  *(_OWORD *)(a1 + 440) = v43;
  [a3 contentsRect];
  v42.origin.CGFloat x = v37;
  v42.origin.y = v38;
  v42.size.width = v39;
  v42.size.height = v40;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v43, &v42);
  *(_OWORD *)(a1 + 456) = v43;
  return a1;
}

void sub_198F13D84(_Unwind_Exception *a1)
{
  uint64_t v4 = (const void *)*((void *)v1 + 107);
  *((void *)v1 + 107) = 0;
  if (v4) {
    CFRelease(v4);
  }
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v2, 0);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(v1, v5);
  _Unwind_Resume(a1);
}

void WebKit::PlatformCALayerRemoteCustom::~PlatformCALayerRemoteCustom(WebKit::PlatformCALayerRemoteCustom *this)
{
  [*((id *)this + 107) setValue:0 forKey:@"WKPlatformCALayer"];
  unsigned __int8 v2 = (const void *)*((void *)this + 107);
  *((void *)this + 107) = 0;
  if (v2) {
    CFRelease(v2);
  }
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 106, 0);

  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, v3);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PlatformCALayerRemoteCustom::~PlatformCALayerRemoteCustom(this);

  WTF::fastFree(v1, v2);
}

void sub_198F13E34(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 856);
  *(void *)(v1 + 856) = 0;
  if (v3) {
    CFRelease(v3);
  }
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v1 + 848), 0);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote((WebKit::PlatformCALayerRemote *)v1, v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::hostingContextID(WebKit::PlatformCALayerRemoteCustom *this)
{
  return *(unsigned int *)(*((void *)this + 106) + 4);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::populateCreationProperties(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)a2 = *(_OWORD *)(result + 16);
  *(unsigned char *)(a2 + 16) = a4;
  int v5 = *(_DWORD *)(*(void *)(result + 848) + 4);
  int v6 = *(_DWORD *)(*(void *)(*(void *)(a3 + 24) + 48) + 364);
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 == 1)
  {
    *(_DWORD *)(a2 + 56) = v5;
    *(_DWORD *)(a2 + 60) = v6;
    *(unsigned char *)(a2 + 64) = 1;
  }
  else
  {
    if (v7 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF240[v7])(&v8, a2 + 56);
    }
    *(_DWORD *)(a2 + 56) = v5;
    *(_DWORD *)(a2 + 60) = v6;
    *(unsigned char *)(a2 + 64) = 1;
    *(_DWORD *)(a2 + 72) = 1;
  }
  return result;
}

void WebKit::PlatformCALayerRemoteCustom::clone(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = *(unsigned __int8 *)(a1 + 12);
  if (v6 == 8)
  {
    if (PAL::AVFoundationLibrary((PAL *)1)
      && (char v8 = (uint64_t (**)(void))MEMORY[0x1E4FB62A0],
          ((void (*)(void))*MEMORY[0x1E4FB62A0])(),
          (objc_opt_isKindOfClass() & 1) != 0))
    {
      uint64_t v7 = (WTF::RunLoop *)[objc_alloc((Class)(*v8)()) init];
      uint64_t v9 = *(void *)(a1 + 856);
      WTF::RunLoop::main(v7);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EE9DF270;
      v10[1] = v7;
      v10[2] = v9;
      CGFloat v14 = v10;
      WTF::RunLoop::dispatch();
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
    }
    else
    {
      uint64_t v7 = (WTF::RunLoop *)objc_alloc_init(MEMORY[0x1E4F39BE8]);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v11 = WTF::fastMalloc((WTF *)0x360);
  WebKit::PlatformCALayerRemoteCustom::PlatformCALayerRemoteCustom(v11, *(unsigned __int8 *)(a1 + 12), v7, a2, *(void *)(*(void *)(a1 + 832) + 8));
  uint64_t v12 = *(void *)(a1 + 832);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  WebKit::RemoteLayerTreeContext::layerDidEnterContext(v13, (_OWORD *)v11, *(unsigned __int8 *)(v11 + 12));
  WebKit::PlatformCALayerRemote::updateClonedLayerProperties((WebKit::PlatformCALayerRemote *)a1, (int8x16_t *)v11, v6 != 8);
  WebKit::PlatformCALayerRemote::setClonedLayer((int8x16_t *)v11, a1);
  *a3 = v11;
  if (v7) {
    CFRelease(v7);
  }
}

void sub_198F140D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::platformLayer(WebKit::PlatformCALayerRemoteCustom *this)
{
  return *((void *)this + 107);
}

uint64_t WebKit::PlatformCALayerRemoteCustom::contents(id *this)
{
  return [this[107] contents];
}

uint64_t WebKit::PlatformCALayerRemoteCustom::setContents(id *this, const void *a2)
{
  return [this[107] setContents:a2];
}

uint64_t WebKit::PlatformCALayerRemoteHost::populateCreationProperties(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = result;
  *(_OWORD *)a2 = *(_OWORD *)(result + 16);
  *(unsigned char *)(a2 + 16) = a4;
  int v6 = (void *)(a2 + 56);
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 == 3)
  {
    void *v6 = *(void *)(result + 840);
  }
  else
  {
    if (v7 != -1) {
      uint64_t result = ((uint64_t (*)(char *, void *))off_1EE9DF240[v7])(&v8, v6);
    }
    *(_DWORD *)(a2 + 72) = -1;
    *(void *)(a2 + 56) = *(void *)(v5 + 840);
    *(_DWORD *)(a2 + 72) = 3;
  }
  return result;
}

void WebKit::PlatformCALayerRemoteModelHosting::~PlatformCALayerRemoteModelHosting(WebKit::PlatformCALayerRemoteModelHosting *this, void *a2)
{
  uint64_t v3 = (WebCore::Model *)*((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::Model>::deref(v3);
  }

  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::PlatformCALayerRemoteModelHosting::~PlatformCALayerRemoteModelHosting(this, a2);

  WTF::fastFree(v2, v3);
}

int8x16_t *WebKit::PlatformCALayerRemoteModelHosting::clone@<X0>(WebKit::PlatformCALayerRemote *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x350);
  uint64_t v7 = (WebCore::Model *)*((void *)a1 + 105);
  ++*(_DWORD *)v7;
  WebKit::PlatformCALayerRemote::PlatformCALayerRemote(v6, 13, a2, *(void *)(*((void *)a1 + 104) + 8));
  *(void *)uint64_t v6 = &unk_1EE9DED70;
  ++*(_DWORD *)v7;
  *(void *)(v6 + 840) = v7;
  WTF::RefCounted<WebCore::Model>::deref(v7);
  uint64_t v8 = *((void *)a1 + 104);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  WebKit::RemoteLayerTreeContext::layerDidEnterContext(v9, (_OWORD *)v6, *(unsigned __int8 *)(v6 + 12));
  WebKit::PlatformCALayerRemote::updateClonedLayerProperties(a1, (int8x16_t *)v6, 0);
  uint64_t result = WebKit::PlatformCALayerRemote::setClonedLayer((int8x16_t *)v6, (uint64_t)a1);
  *a3 = v6;
  return result;
}

void sub_198F14348(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebCore::Model>::deref(v2);
  WTF::fastFree(v1, v4);
  _Unwind_Resume(a1);
}

WebCore::Model *WebKit::PlatformCALayerRemoteModelHosting::populateCreationProperties(WebCore::Model *result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = result;
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(unsigned char *)(a2 + 16) = a4;
  uint64_t v6 = (WebCore::Model **)(a2 + 56);
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7 == 2)
  {
    uint64_t v8 = (WebCore::Model *)*((void *)result + 105);
    ++*(_DWORD *)v8;
    uint64_t result = *v6;
    void *v6 = v8;
    if (result)
    {
      return WTF::RefCounted<WebCore::Model>::deref(result);
    }
  }
  else
  {
    if (v7 != -1) {
      uint64_t result = (WebCore::Model *)((uint64_t (*)(char *, WebCore::Model **))off_1EE9DF240[v7])(&v10, v6);
    }
    uint64_t v9 = (_DWORD *)*((void *)v5 + 105);
    ++*v9;
    *(void *)(a2 + 56) = v9;
    *(_DWORD *)(a2 + 72) = 2;
  }
  return result;
}

unsigned int *WebKit::PlatformCALayerRemoteModelHosting::dumpAdditionalProperties(unsigned int *result, WTF::TextStream *this, char a3)
{
  if ((a3 & 4) != 0)
  {
    uint64_t v3 = (uint64_t)result;
    WTF::TextStream::writeIndent(this);
    WTF::TextStream::operator<<();
    uint64_t v4 = *(atomic_uint **)(*(void *)(v3 + 840) + 8);
    atomic_fetch_add(v4, 1u);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v4, v5);
  }
  return result;
}

void sub_198F144B4(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeContext::~RemoteLayerTreeContext(WebKit::RemoteLayerTreeContext *this, void *a2)
{
  *(void *)this = &unk_1EE9DF0F8;
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    *((void *)this + 7) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int **)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 10) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 8);
  if (v5)
  {
    *((void *)this + 8) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 25);
  if (v6)
  {
    if (!*v6)
    {
      __break(0xC471u);
      return;
    }
    --*v6;
  }
  MEMORY[0x19973C080]((char *)this + 96);
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (unsigned int **)*((void *)this + 10);
  if (v9) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v9, v7);
  }
  uint64_t v10 = *((void *)this + 9);
  if (v10) {
    WTF::fastFree((WTF *)(v10 - 16), v7);
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v11, v7);
  }
  uint64_t v12 = *((void *)this + 7);
  if (v12) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v12, v7);
  }
  uint64_t v13 = (WTF *)*((void *)this + 5);
  if (v13)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v13, v7);
  }
  uint64_t v14 = *((void *)this + 4);
  if (v14) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v14, v7);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v7);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteLayerTreeContext::~RemoteLayerTreeContext(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198F14610(_Unwind_Exception *a1)
{
  uint64_t v3 = *(_DWORD **)(v1 + 200);
  if (!v3)
  {
LABEL_4:
    MEMORY[0x19973C080](v1 + 96);
    uint64_t v5 = *(void *)(v1 + 88);
    *(void *)(v1 + 88) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *(unsigned int ***)(v1 + 80);
    if (v6) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, v4);
    }
    uint64_t v7 = *(void *)(v1 + 72);
    if (v7) {
      WTF::fastFree((WTF *)(v7 - 16), v4);
    }
    uint64_t v8 = *(void *)(v1 + 64);
    if (v8) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v8, v4);
    }
    uint64_t v9 = *(void *)(v1 + 56);
    if (v9) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v9, v4);
    }
    uint64_t v10 = *(WTF **)(v1 + 40);
    if (v10)
    {
      *(void *)(v1 + 40) = 0;
      *(_DWORD *)(v1 + 48) = 0;
      WTF::fastFree(v10, v4);
    }
    uint64_t v11 = *(void *)(v1 + 32);
    if (v11) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v11, v4);
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 16), v4);
    _Unwind_Resume(a1);
  }
  if (*v3)
  {
    --*v3;
    goto LABEL_4;
  }
  __break(0xC471u);
}

uint64_t WebKit::RemoteLayerTreeContext::adoptLayersFromContext(uint64_t this, WebKit::RemoteLayerTreeContext *a2)
{
  uint64_t v3 = (unsigned int *)this;
  uint64_t v4 = *((void *)a2 + 7);
  if (v4)
  {
    uint64_t v5 = (atomic_uint **)(this + 16);
    do
    {
      if (!*(_DWORD *)(v4 - 12)) {
        break;
      }
      uint64_t v6 = *(unsigned int *)(v4 - 4);
      if (v6)
      {
        uint64_t v7 = v4 + 24 * v6;
        uint64_t v8 = 24 * v6;
        while (*(_OWORD *)v4 == 0 || *(void *)(v4 + 8) == -1)
        {
          v4 += 24;
          v8 -= 24;
          if (!v8)
          {
            uint64_t v4 = v7;
            break;
          }
        }
      }
      uint64_t v10 = *(void *)(v4 + 16);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 8);
        if (v11)
        {
          char v12 = 0;
          atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      char v12 = 1;
LABEL_16:
      uint64_t v13 = *(void *)(v11 + 832);
      if (v13)
      {
        uint64_t v14 = *(WebKit::RemoteLayerTreeContext **)(v13 + 8);
        if (v14)
        {
          ++*((_DWORD *)v14 + 2);
          WebKit::RemoteLayerTreeContext::layerWillLeaveContext(v14, *(WebKit::PlatformCALayerRemote **)(v11 + 16), *(void *)(v11 + 24));
          if (*((_DWORD *)v14 + 2) == 1) {
            (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(void *)v14 + 8))(v14);
          }
          else {
            --*((_DWORD *)v14 + 2);
          }
        }
      }
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v3 + 4, (uint64_t)v3);
      long long v16 = *v5;
      if (*v5) {
        atomic_fetch_add(v16, 1u);
      }
      id v17 = *(unsigned int **)(v11 + 832);
      *(void *)(v11 + 832) = v16;
      if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v15);
      }
      this = WebKit::RemoteLayerTreeContext::layerDidEnterContext((uint64_t)v3, (_OWORD *)v11, *(unsigned __int8 *)(v11 + 12));
      *(void *)(v11 + 64) |= *(void *)(v11 + 72);
      if ((v12 & 1) == 0) {
        this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
      }
      uint64_t v4 = *((void *)a2 + 7);
    }
    while (v4);
  }
  uint64_t v18 = *((void *)a2 + 10);
  if (v18)
  {
    double v19 = (atomic_uint **)(v3 + 4);
    do
    {
      if (!*(_DWORD *)(v18 - 12)) {
        break;
      }
      uint64_t v20 = *(unsigned int *)(v18 - 4);
      if (v20)
      {
        uint64_t v21 = 8 * v20;
        uint64_t v22 = v18 + 8 * v20;
        while ((unint64_t)(*(void *)v18 + 1) <= 1)
        {
          v18 += 8;
          v21 -= 8;
          if (!v21)
          {
            uint64_t v18 = v22;
            break;
          }
        }
      }
      uint64_t v23 = *(void *)(*(void *)v18 + 8);
      ++*(_DWORD *)(v23 + 8);
      uint64_t v24 = *(void *)(v23 + 904);
      if (v24)
      {
        double v25 = *(WebKit::RemoteLayerTreeContext **)(v24 + 8);
        if (v25)
        {
          ++*((_DWORD *)v25 + 2);
          WebKit::RemoteLayerTreeContext::graphicsLayerWillLeaveContext(v25, (WebKit::GraphicsLayerCARemote *)v23);
          if (*((_DWORD *)v25 + 2) == 1) {
            (*(void (**)(WebKit::RemoteLayerTreeContext *))(*(void *)v25 + 8))(v25);
          }
          else {
            --*((_DWORD *)v25 + 2);
          }
        }
      }
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v3 + 4, (uint64_t)v3);
      double v27 = *v19;
      if (*v19) {
        atomic_fetch_add(v27, 1u);
      }
      double v28 = *(unsigned int **)(v23 + 904);
      *(void *)(v23 + 904) = v27;
      if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v26);
      }
      this = WebKit::RemoteLayerTreeContext::graphicsLayerDidEnterContext((WebKit::RemoteLayerTreeContext *)v3, (WebKit::GraphicsLayerCARemote *)v23);
      if (*(_DWORD *)(v23 + 8) == 1) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
      }
      else {
        --*(_DWORD *)(v23 + 8);
      }
      uint64_t v18 = *((void *)a2 + 10);
    }
    while (v18);
  }
  return this;
}

void sub_198F14A0C(_Unwind_Exception *exception_object)
{
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::remove(uint64_t *result, void *a2)
{
  if (*result)
  {
    unsigned __int8 v2 = (void *)(*result + 24 * *(unsigned int *)(*result - 4));
    if (v2 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned __int8 v2 = 0;
  }
  if (v2 != a2) {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(result, a2);
  }
  return result;
}

uint64_t *WebKit::RemoteLayerTreeContext::animationDidStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)(a1 + 64), v12);
  uint64_t v9 = *(uint64_t **)(a1 + 64);
  if (v9) {
    v9 += 3 * *((unsigned int *)v9 - 1);
  }
  if (v9 != result)
  {
    uint64_t v10 = result[2];
    if (v10)
    {
      uint64_t v11 = *(atomic_uint **)(v10 + 8);
      if (v11) {
        atomic_fetch_add(v11 + 2, 1u);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    (*(void (**)(atomic_uint *, uint64_t, double))(*(void *)v11 + 56))(v11, a4, a5);
    return (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)v11 + 2);
  }
  return result;
}

void sub_198F14D98(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteLayerTreeContext::animationDidEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)(a1 + 64), v10);
  uint64_t v7 = *(uint64_t **)(a1 + 64);
  if (v7) {
    v7 += 3 * *((unsigned int *)v7 - 1);
  }
  if (v7 != result)
  {
    uint64_t v8 = result[2];
    if (v8)
    {
      uint64_t v9 = *(atomic_uint **)(v8 + 8);
      if (v9) {
        atomic_fetch_add(v9 + 2, 1u);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    (*(void (**)(atomic_uint *, uint64_t))(*(void *)v9 + 64))(v9, a4);
    return (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)v9 + 2);
  }
  return result;
}

void sub_198F14E60(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::PlatformCAAnimationRemote::~PlatformCAAnimationRemote(WebKit::PlatformCAAnimationRemote *this, WTF::StringImpl *a2)
{
  WebKit::PlatformCAAnimationRemote::~PlatformCAAnimationRemote(this, a2);

  WTF::fastFree(v2, v3);
}

{
  void *v3;
  void *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;

  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, a2);
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v3);
  uint64_t v5 = (WTF *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v5, v4);
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v4);
  uint64_t v7 = (_DWORD *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 16))(v7);
    }
    else {
      --v7[2];
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t WebCore::PlatformCAAnimation::isPlatformCAAnimationCocoa(WebCore::PlatformCAAnimation *this)
{
  return 0;
}

uint64_t WebCore::PlatformCAAnimation::isPlatformCAAnimationWin(WebCore::PlatformCAAnimation *this)
{
  return 0;
}

uint64_t WebKit::PlatformCAAnimationRemote::isPlatformCAAnimationRemote(WebKit::PlatformCAAnimationRemote *this)
{
  return 1;
}

uint64_t WebCore::GraphicsLayer::setContentsTilePhase(uint64_t this, const WebCore::FloatSize *a2)
{
  *(void *)(this + 304) = *(void *)a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::setContentsTileSize(uint64_t this, const WebCore::FloatSize *a2)
{
  *(void *)(this + 312) = *(void *)a2;
  return this;
}

uint64_t WebKit::GraphicsLayerCARemote::shouldDirectlyCompositeImage(WebKit::GraphicsLayerCARemote *this, Image *a2)
{
  return 0;
}

BOOL WebCore::GraphicsLayerCA::usesContentsLayer(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned char *)this + 888) != 0;
}

uint64_t WebCore::GraphicsLayer::setContentsOrientation(uint64_t result, char a2)
{
  *(unsigned char *)(result + 176) = a2;
  return result;
}

float WebCore::GraphicsLayer::zPosition(WebCore::GraphicsLayer *this)
{
  return *((float *)this + 33);
}

float WebCore::GraphicsLayerCA::pixelAlignmentOffset(WebCore::GraphicsLayerCA *this)
{
  return *((float *)this + 188);
}

uint64_t WebCore::GraphicsLayer::setAllowsTiling(WebCore::GraphicsLayer *this, int a2)
{
  int v3 = *(unsigned __int16 *)((char *)this + 177);
  uint64_t result = (uint64_t)this + 177;
  int v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2) {
    __int16 v5 = 1024;
  }
  else {
    __int16 v5 = 0;
  }
  unsigned int v6 = v4 & 0xFFFFFBFF;
  *(_WORD *)uint64_t result = v6 | v5;
  *(unsigned char *)(result + 2) = BYTE2(v6);
  return result;
}

uint64_t WebCore::GraphicsLayer::allowsTiling(WebCore::GraphicsLayer *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 10) & 1;
}

uint64_t WebCore::GraphicsLayerCA::setShouldUpdateRootRelativeScaleFactor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 890) = *(unsigned char *)(this + 890) & 0xFE | a2;
  return this;
}

uint64_t WebCore::GraphicsLayer::isTrackingDisplayListReplay(WebCore::GraphicsLayer *this)
{
  return (*((unsigned __int8 *)this + 179) >> 1) & 1;
}

uint64_t WebCore::GraphicsLayer::isGraphicsLayerTextureMapper(WebCore::GraphicsLayer *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayer::isCoordinatedGraphicsLayer(WebCore::GraphicsLayer *this)
{
  return 0;
}

void *WebCore::GraphicsLayerCA::platformCALayerIdentifier(WebCore::GraphicsLayerCA *this)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)this + 32))(&v2);
  if (v3) {
    return (void *)v2;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerRespondsToLayoutChanges(WebCore::GraphicsLayerCA *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerContentsOrientation(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this + 176);
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerShowDebugBorders(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 13) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerRepaintCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerIncrementRepaintCount(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(a1 + 180) + 1);
  *(_DWORD *)(a1 + 180) = v1;
  return v1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerContentsOpaque(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 1) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerDrawsContent(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this + 177) >> 5) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerRenderingIsSuppressedIncludingDescendants(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this + 179) >> 5) & 1;
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerLayerDidDisplay()
{
  return MEMORY[0x1F416E140]();
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerContainsBitmapOnly(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 224))(*(void *)(a1 + 24), a1);
}

uint64_t WebCore::GraphicsLayerCA::platformCALayerShouldPaintUsingCompositeCopy(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this + 179) >> 4) & 1;
}

uint64_t WebCore::GraphicsLayerCA::isCommittingChanges(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this + 889);
}

uint64_t WebCore::GraphicsLayerCA::isUsingDisplayListDrawing(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 177) >> 9) & 1;
}

void *non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerIdentifier(WebCore::GraphicsLayerCA *this)
{
  return WebCore::GraphicsLayerCA::platformCALayerIdentifier((WebCore::GraphicsLayerCA *)((char *)this - 608));
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerRespondsToLayoutChanges(WebCore::GraphicsLayerCA *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerContentsOrientation(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this - 432);
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerShowDebugBorders(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this - 431) >> 13) & 1;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerContentsOpaque(WebCore::GraphicsLayerCA *this)
{
  return (*(unsigned __int16 *)((char *)this - 431) >> 1) & 1;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerLayerDidDisplay(uint64_t a1)
{
  return MEMORY[0x1F416E140](a1 - 608);
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::isCommittingChanges(WebCore::GraphicsLayerCA *this)
{
  return *((unsigned __int8 *)this + 281);
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::isUsingDisplayListDrawing(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 - 431) >> 9) & 1;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerShouldPaintUsingCompositeCopy(WebCore::GraphicsLayerCA *this)
{
  return (*((unsigned __int8 *)this - 429) >> 4) & 1;
}

uint64_t WebCore::PlatformCALayer::hostingContextIdentifier(WebCore::PlatformCALayer *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemote::platformLayer(WebKit::PlatformCALayerRemote *this)
{
  return 0;
}

uint64_t WebCore::PlatformCALayer::setOwner(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::sublayersForLogging@<X0>(WebKit::PlatformCALayerRemote *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 792);
}

uint64_t WebCore::PlatformCALayer::eventRegion(WebCore::PlatformCALayer *this)
{
  return 0;
}

uint64_t WebKit::PlatformCALayerRemoteCustom::type(WebKit::PlatformCALayerRemoteCustom *this)
{
  return 2;
}

void WebKit::PlatformCALayerRemoteHost::~PlatformCALayerRemoteHost(WebKit::PlatformCALayerRemoteHost *this, void *a2)
{
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::PlatformCALayerRemoteHost::hostingContextIdentifier(WebKit::PlatformCALayerRemoteHost *this)
{
  return *((void *)this + 105);
}

uint64_t WebKit::PlatformCALayerRemoteHost::type(WebKit::PlatformCALayerRemoteHost *this)
{
  return 3;
}

uint64_t WebKit::PlatformCALayerRemoteModelHosting::type(WebKit::PlatformCALayerRemoteModelHosting *this)
{
  return 4;
}

void WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::~GraphicsLayerCARemoteAsyncContentsDisplayDelegate(WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *this)
{
  *(void *)this = &unk_1EE9DF120;
  if (*((unsigned char *)this + 128))
  {
    uint64_t v2 = *((unsigned int *)this + 30);
    if (v2 != -1) {
      off_1EE9DF160[v2]((int)&v4, (WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *)((char *)this + 56));
    }
    *((_DWORD *)this + 30) = -1;
  }
  char v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }
  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);
}

{
  uint64_t v2;
  atomic_uchar **v3;
  WTF *v4;
  void *v5;
  char v6;

  *(void *)this = &unk_1EE9DF120;
  if (*((unsigned char *)this + 128))
  {
    uint64_t v2 = *((unsigned int *)this + 30);
    if (v2 != -1) {
      off_1EE9DF160[v2]((int)&v6, (WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *)((char *)this + 56));
    }
    *((_DWORD *)this + 30) = -1;
  }
  char v3 = (atomic_uchar **)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }
  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);
  WTF::fastFree(v4, v5);
}

uint64_t WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::display(uint64_t this, WebCore::PlatformCALayer *a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  __int16 v5 = (atomic_uchar *)(this + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = MEMORY[0x19972E8D0](this + 48);
  }
  if (*(unsigned char *)(v3 + 128))
  {
    this = (*(uint64_t (**)(WebCore::PlatformCALayer *))(*(void *)a2 + 32))(a2);
    unint64_t v10 = (this - 1);
    if (v10 >= 4)
    {
      unsigned int v6 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develo"
           "per/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
      uint64_t v7 = "match_constness_t<Source, Target> &WTF::downcast(Source &) [Target = WebKit::PlatformCALayerRemote, Source = "
           "WebCore::PlatformCALayer]";
      this = 96;
      uint64_t v8 = 1;
      __break(0xC471u);
    }
    else
    {
      unint64_t v10 = *(unsigned __int8 *)(v3 + 128);
      if (*(unsigned char *)(v3 + 128))
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor(v14, (unsigned int *)(v3 + 56));
        uint64_t v11 = *(void *)(v3 + 136);
        uint64_t v16 = 0;
        uint64_t v17 = v11;
        char v18 = 1;
        WebKit::PlatformCALayerRemote::ensureBackingStore(a2, v12);
        WebKit::RemoteLayerBackingStore::setDelegatedContents(*((void *)a2 + 59), (uint64_t)v14);
        this = v16;
        uint64_t v16 = 0;
        if (!this || (unint64_t v10 = this + 8, add = atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF), add != 1))
        {
LABEL_8:
          if (v15 != -1) {
            this = off_1EE9DF160[v15]((int)&v19, (WTF::MachSendRight *)v14);
          }
          goto LABEL_10;
        }
LABEL_14:
        atomic_store(add, (unsigned int *)v10);
        this = (*(uint64_t (**)(uint64_t, const char *, const char *, uint64_t))(*(void *)this + 8))(this, v6, v7, v8);
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_10:
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

void sub_198F15410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::tryCopyToLayer(atomic_uchar *this, WebCore::ImageBuffer *a2)
{
  WebCore::ImageBuffer::clone((uint64_t *)&v35, a2);
  if (!v35) {
    return 0;
  }
  (*(void (**)(void *))(*v35 + 24))(v35);
  uint64_t v3 = (*(uint64_t (**)(void *))(*v35 + 128))(v35);
  uint64_t v5 = v3;
  if (v3 && ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3) & 1) != 0)
  {
    (*(void (**)(unsigned int *__return_ptr, uint64_t, void))(*(void *)v5 + 24))(v32, v5, 0);
    char v6 = 0;
    atomic_compare_exchange_strong_explicit(this + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      goto LABEL_37;
    }
    while (1)
    {
      if (v34)
      {
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v30, v32);
        std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>((uint64_t)(this + 56), (uint64_t)v30);
        if (v31 != -1) {
          off_1EE9DF160[v31]((int)&v29, (WTF::MachSendRight *)v30);
        }
        *((void *)this + 17) = v35[15];
        int v7 = 1;
        atomic_compare_exchange_strong_explicit(this + 48, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
        if (v7 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)(this + 48));
        }
        uint64_t v8 = (uint64_t *)(this + 32);
        if (!*((void *)this + 4)) {
          goto LABEL_38;
        }
        if (v34) {
          break;
        }
      }
      __break(1u);
LABEL_37:
      MEMORY[0x19972E8D0](this + 48);
    }
    uint64_t v9 = *((void *)this + 2);
    uint64_t v29 = v35[15];
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1129;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    v30[0] = v11;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, v8);
    uint64_t v12 = v33;
    int v13 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
    if (!v14)
    {
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x198F15834);
    }
    unsigned char *v13 = v12;
    IPC::ArgumentCoder<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>(v11, (unint64_t)v32, v12);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v29);
    IPC::Connection::sendMessageImpl(v9, (uint64_t *)v30, 0, 0);
    int v15 = v30[0];
    v30[0] = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v4);
      WTF::fastFree(v26, v27);
    }
    if (v34 && v33 != -1) {
      off_1EE9DF160[v33]((int)v30, (WTF::MachSendRight *)v32);
    }
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v35;
  CGFloat v35 = 0;
  if (v17)
  {
    char v18 = 0;
    uint64_t v19 = v17[1];
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
    if (v18) {
      MEMORY[0x19972E8D0](v19);
    }
    uint64_t v20 = *(void *)(v19 + 8);
    int v21 = 1;
    uint64_t v22 = v20 - 1;
    *(void *)(v19 + 8) = v20 - 1;
    if (v20 == 1)
    {
      uint64_t v28 = *(void *)(v19 + 16);
      uint64_t v23 = *(void *)(v19 + 24);
      *(void *)(v19 + 24) = 0;
      BOOL v24 = v28 != 0;
    }
    else
    {
      uint64_t v23 = 0;
      BOOL v24 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
    if (v21 == 1)
    {
      if (v22) {
        return v16;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v22) {
        return v16;
      }
    }
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    if (!v24) {
      WTF::fastFree((WTF *)v19, v4);
    }
  }
  return v16;
}

void sub_198F15858(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,char a34)
{
  if (a34 && a32 != -1) {
    off_1EE9DF160[a32]((int)&a10, (WTF::MachSendRight *)&a24);
  }
  uint64_t v36 = *(void *)(v34 - 56);
  *(void *)(v34 - 56) = 0;
  if (v36)
  {
    char v37 = 0;
    uint64_t v38 = *(void *)(v36 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v38, (unsigned __int8 *)&v37, 1u, memory_order_acquire, memory_order_acquire);
    if (v37) {
      MEMORY[0x19972E8D0](v38);
    }
    uint64_t v39 = *(void *)(v38 + 8);
    int v40 = 1;
    uint64_t v41 = v39 - 1;
    *(void *)(v38 + 8) = v39 - 1;
    if (v39 == 1)
    {
      uint64_t v44 = *(void *)(v38 + 16);
      uint64_t v42 = *(void *)(v38 + 24);
      *(void *)(v38 + 24) = 0;
      BOOL v43 = v44 != 0;
    }
    else
    {
      uint64_t v42 = 0;
      BOOL v43 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v38, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
    if (v40 == 1)
    {
      if (v41) {
        goto LABEL_15;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v38);
      if (v41) {
        goto LABEL_15;
      }
    }
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
    if (!v43) {
      WTF::fastFree((WTF *)v38, a2);
    }
  }
LABEL_15:
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsLayerAsyncContentsDisplayDelegate::isGraphicsLayerAsyncContentsDisplayDelegateCocoa(WebCore::GraphicsLayerAsyncContentsDisplayDelegate *this)
{
  return 0;
}

uint64_t WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate::isGraphicsLayerCARemoteAsyncContentsDisplayDelegate(WebKit::GraphicsLayerCARemoteAsyncContentsDisplayDelegate *this)
{
  return 1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 128);
  uint64_t v4 = *(unsigned int *)(a2 + 128);
  if (v3 == -1)
  {
    if (v4 != -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (v4 != -1)
    {
LABEL_3:
      uint64_t v5 = result;
      return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9DF198[v4])(&v5, result, a2);
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9DF170[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 128) = -1;
  }
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 128);
  if (v5)
  {
    if (v5 != -1) {
      ((void (*)(char *, _DWORD *))off_1EE9DF170[v5])(&v7, v4);
    }
    float result = *a3;
    *uint64_t v4 = *(_DWORD *)a3;
    v4[32] = 0;
  }
  else
  {
    float result = *a3;
    *a2 = *(_DWORD *)a3;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(unsigned int *)(*a1 + 128);
  if (v2 == 1)
  {
    return WebCore::Color::operator=();
  }
  else
  {
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9DF170[v2])(&v4, v1);
    }
    *(_DWORD *)(v1 + 128) = -1;
    uint64_t result = WebCore::Color::Color();
    *(_DWORD *)(v1 + 128) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 128);
  if (v5 == 2)
  {
    uint64_t v6 = *a3;
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
    *(void *)a2 = v6;
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF170[v5])(&v8, v4);
    }
    *(_DWORD *)(v4 + 128) = -1;
    uint64_t v7 = *a3;
    *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
    *(void *)uint64_t v4 = v7;
    *(_DWORD *)(v4 + 128) = 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 128);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      long long v12 = *a3;
      long long v13 = a3[1];
      long long v14 = a3[3];
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_OWORD *)(a2 + 48) = v14;
      *(_OWORD *)a2 = v12;
      *(_OWORD *)(a2 + 16) = v13;
      __n128 result = (__n128)a3[4];
      long long v15 = a3[5];
      long long v16 = a3[7];
      *(_OWORD *)(a2 + 96) = a3[6];
      *(_OWORD *)(a2 + 112) = v16;
      *(__n128 *)(a2 + 64) = result;
      *(_OWORD *)(a2 + 80) = v15;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EE9DF170[v5])(&v17, v4);
  }
  *(_DWORD *)(v4 + 128) = -1;
  long long v6 = *a3;
  long long v7 = a3[1];
  long long v8 = a3[3];
  *(_OWORD *)(v4 + 32) = a3[2];
  *(_OWORD *)(v4 + 48) = v8;
  *(_OWORD *)uint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  __n128 result = (__n128)a3[4];
  long long v10 = a3[5];
  long long v11 = a3[7];
  *(_OWORD *)(v4 + 96) = a3[6];
  *(_OWORD *)(v4 + 112) = v11;
  *(__n128 *)(v4 + 64) = result;
  *(_OWORD *)(v4 + 80) = v10;
  *(_DWORD *)(v4 + 128) = 3;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEEOSY_EEEDcSQ_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 128);
  if (v5 == 4)
  {
    long long v6 = *a3;
    *a3 = 0;
    __n128 result = *a2;
    *a2 = v6;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v7();
    }
  }
  else
  {
    if (v5 != -1) {
      __n128 result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1EE9DF170[v5])(&v9, v4);
    }
    long long v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 128) = 4;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 128);
  uint64_t v4 = *(unsigned int *)(a2 + 128);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9DF170[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 128) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1EE9DF1C0 + v4))(&v5, result, a2);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 128);
  if (v5)
  {
    if (v5 != -1) {
      ((void (*)(char *, _DWORD *))off_1EE9DF170[v5])(&v7, v4);
    }
    float result = *a3;
    *uint64_t v4 = *(_DWORD *)a3;
    v4[32] = 0;
  }
  else
  {
    float result = *a3;
    *a2 = *(_DWORD *)a3;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(WebCore::Color **a1, int a2, Color *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)*a1 + 32);
  if (v5 == 1)
  {
    return WebCore::Color::operator=();
  }
  else
  {
    if (v5 != -1) {
      ((void (*)(char *, WebCore::Color *))off_1EE9DF170[v5])(&v7, v4);
    }
    *((_DWORD *)v4 + 32) = -1;
    uint64_t result = WebCore::Color::Color(v4, a3);
    *((_DWORD *)v4 + 32) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 128);
  if (v5 == 2)
  {
    uint64_t v6 = *a3;
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
    *(void *)a2 = v6;
  }
  else
  {
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF170[v5])(&v8, v4);
    }
    *(_DWORD *)(v4 + 128) = -1;
    uint64_t v7 = *a3;
    *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
    *(void *)uint64_t v4 = v7;
    *(_DWORD *)(v4 + 128) = 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 128);
  if (v5 == 3)
  {
    long long v6 = *a3;
    long long v7 = a3[1];
    long long v8 = a3[3];
    *(_OWORD *)(a2 + 32) = a3[2];
    *(_OWORD *)(a2 + 48) = v8;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v7;
    __n128 result = (__n128)a3[4];
    long long v10 = a3[5];
    long long v11 = a3[7];
    *(_OWORD *)(a2 + 96) = a3[6];
    *(_OWORD *)(a2 + 112) = v11;
    *(__n128 *)(a2 + 64) = result;
    *(_OWORD *)(a2 + 80) = v10;
  }
  else
  {
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9DF170[v5])(&v17, v4);
    }
    *(_DWORD *)(v4 + 128) = -1;
    long long v12 = *a3;
    long long v13 = a3[1];
    long long v14 = a3[3];
    *(_OWORD *)(v4 + 32) = a3[2];
    *(_OWORD *)(v4 + 48) = v14;
    *(_OWORD *)uint64_t v4 = v12;
    *(_OWORD *)(v4 + 16) = v13;
    __n128 result = (__n128)a3[4];
    long long v15 = a3[5];
    long long v16 = a3[7];
    *(_OWORD *)(v4 + 96) = a3[6];
    *(_OWORD *)(v4 + 112) = v16;
    *(__n128 *)(v4 + 64) = result;
    *(_OWORD *)(v4 + 80) = v15;
    *(_DWORD *)(v4 + 128) = 3;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS10_EEEDcSS_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 128);
  if (v5 == 4)
  {
    long long v6 = *a3;
    atomic_fetch_add((atomic_uint *volatile)*a3 + 2, 1u);
    __n128 result = *a2;
    *a2 = v6;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v7();
    }
  }
  else
  {
    if (v5 != -1) {
      __n128 result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1EE9DF170[v5])(&v9, v4);
    }
    *(_DWORD *)(v4 + 128) = -1;
    long long v8 = *a3;
    atomic_fetch_add((atomic_uint *volatile)*a3 + 2, 1u);
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 128) = 4;
  }
  return result;
}

uint64_t WebKit::createAnimation(WebKit *this, CALayer *a2, WebKit::RemoteLayerTreeHost *a3, const WebKit::PlatformCAAnimationRemoteProperties *a4)
{
  uint64_t v4 = a4;
  *(void *)this = 0;
  switch(*((unsigned char *)a4 + 8))
  {
    case 0:
      long long v8 = (void *)MEMORY[0x1E4F39B48];
      if (!*(void *)a4) {
        goto LABEL_114;
      }
      char v9 = (__CFString *)WTF::StringImpl::operator NSString *();
      goto LABEL_4;
    case 1:
      long long v8 = (void *)[MEMORY[0x1E4F39B38] animation];
      if (*((_DWORD *)v4 + 33))
      {
        uint64_t v41 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)v4 + 33)];
        uint64_t v42 = *((unsigned int *)v4 + 33);
        if (v42)
        {
          BOOL v43 = (const WebKit::PlatformCAAnimationRemoteProperties *)*((void *)v4 + 15);
          uint64_t v44 = 136 * v42;
          do
          {
            if (WebCore::PlatformCAAnimation::isValidKeyPath())
            {
              WebKit::createAnimation((WebKit *)cf, a2, a3, v43);
              CFTypeRef v45 = cf[0];
              if (cf[0])
              {
                CFRelease(cf[0]);
                [v41 addObject:v45];
              }
            }
            BOOL v43 = (const WebKit::PlatformCAAnimationRemoteProperties *)((char *)v43 + 136);
            v44 -= 136;
          }
          while (v44);
        }
        [v8 setAnimations:v41];
        if (v41) {
          CFRelease(v41);
        }
      }
      if (v8) {
        goto LABEL_67;
      }
      break;
    case 2:
      long long v14 = (void *)MEMORY[0x1E4F39BD8];
      if (*(void *)a4) {
        long long v15 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        long long v15 = &stru_1EEA10550;
      }
      long long v8 = (void *)[v14 animationWithKeyPath:v15];
      if (*((_DWORD *)v4 + 21))
      {
        long long v16 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)v4 + 21)];
        uint64_t v18 = *((unsigned int *)v4 + 21);
        if (v18)
        {
          uint64_t v19 = *((void *)v4 + 9);
          uint64_t v20 = 136 * v18;
          do
          {
            WebKit::animationValueFromKeyframeValue((uint64_t **)cf, v19, v17);
            CFTypeRef v21 = cf[0];
            if (cf[0])
            {
              [v16 addObject:cf[0]];
              CFRelease(v21);
            }
            v19 += 136;
            v20 -= 136;
          }
          while (v20);
        }
        [v8 setValues:v16];
        if (v16) {
          CFRelease(v16);
        }
      }
      if (*((_DWORD *)v4 + 25))
      {
        uint64_t v22 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)v4 + 25)];
        uint64_t v24 = *((unsigned int *)v4 + 25);
        if (v24)
        {
          double v25 = (_DWORD *)*((void *)v4 + 11);
          uint64_t v26 = 4 * v24;
          do
          {
            LODWORD(v23) = *v25;
            uint64_t v27 = [NSNumber numberWithFloat:v23];
            if (v27) {
              [v22 addObject:v27];
            }
            ++v25;
            v26 -= 4;
          }
          while (v26);
        }
        [v8 setKeyTimes:v22];
        if (v22) {
          CFRelease(v22);
        }
      }
      if (*((void *)v4 + 7)) {
        [v8 setTimingFunction:WebCore::toCAMediaTimingFunction()];
      }
      if (*((_DWORD *)v4 + 29))
      {
        uint64_t v28 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)v4 + 29)];
        uint64_t v29 = *((unsigned int *)v4 + 29);
        if (v29)
        {
          uint64_t v30 = *((void *)v4 + 13);
          uint64_t v31 = 8 * v29;
          do
          {
            uint64_t v32 = WebCore::toCAMediaTimingFunction();
            if (v32) {
              [v28 addObject:v32];
            }
            v30 += 8;
            v31 -= 8;
          }
          while (v31);
        }
        [v8 setTimingFunctions:v28];
        if (v28) {
          CFRelease(v28);
        }
      }
      if (v8) {
        goto LABEL_67;
      }
      break;
    case 3:
      int v33 = (void *)MEMORY[0x1E4F39C90];
      if (*(void *)a4) {
        uint64_t v34 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v34 = &stru_1EEA10550;
      }
      long long v8 = (void *)[v33 animationWithKeyPath:v34];
      if (*((_DWORD *)v4 + 21) < 2u) {
        goto LABEL_52;
      }
      WebKit::animationValueFromKeyframeValue((uint64_t **)cf, *((void *)v4 + 9), v35);
      CFTypeRef v36 = cf[0];
      [v8 setFromValue:cf[0]];
      if (v36) {
        CFRelease(v36);
      }
      if (*((_DWORD *)v4 + 21) <= 1u) {
        goto LABEL_118;
      }
      WebKit::animationValueFromKeyframeValue((uint64_t **)cf, *((void *)v4 + 9) + 136, v37);
      CFTypeRef v38 = cf[0];
      [v8 setToValue:cf[0]];
      if (v38) {
        CFRelease(v38);
      }
LABEL_52:
      if (*((_DWORD *)v4 + 29))
      {
        uint64_t v39 = (double **)*((void *)v4 + 13);
        if ((*(unsigned int (**)(void))(*(void *)*v39 + 24))() == 3)
        {
          int v40 = *v39;
          [v8 setMass:v40[2]];
          [v8 setStiffness:v40[3]];
          [v8 setDamping:v40[4]];
          [v8 setInitialVelocity:v40[5]];
        }
      }
      if (v8) {
        goto LABEL_67;
      }
      break;
    default:
      long long v8 = 0;
      goto LABEL_70;
  }
  while (1)
  {
    *(void *)this = v8;
LABEL_70:
    [v8 setBeginTime:*((double *)v4 + 2)];
    [v8 setDuration:*((double *)v4 + 3)];
    [v8 setTimeOffset:*((double *)v4 + 4)];
    LODWORD(v46) = *((_DWORD *)v4 + 10);
    [v8 setRepeatCount:v46];
    LODWORD(v47) = *((_DWORD *)v4 + 11);
    [v8 setSpeed:v47];
    [v8 setAutoreverses:*((unsigned __int8 *)v4 + 64)];
    [v8 setRemovedOnCompletion:*((unsigned __int8 *)v4 + 65)];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v8 setAdditive:*((unsigned __int8 *)v4 + 66)];
      if (*((unsigned char *)v4 + 49)) {
        objc_msgSend(v8, "setValueFunction:", objc_msgSend(MEMORY[0x1E4F39D20], "functionWithName:", WebCore::toCAValueFunctionType()));
      }
    }
    if (*((unsigned char *)v4 + 48)) {
      [v8 setFillMode:WebCore::toCAFillModeType()];
    }
    if (*((unsigned char *)v4 + 68)) {
      [v8 setValue:MEMORY[0x1E4F1CC38] forKey:@"WKPlatformCAAnimationExplicitBeginTimeFlag"];
    }
    if (!a3) {
      break;
    }
    WebKit::RemoteLayerTreeNode::layerID((WebKit::RemoteLayerTreeNode *)a2, (uint64_t)cf);
    if (!v70) {
      goto LABEL_113;
    }
    uint64_t v4 = (WebKit::RemoteLayerTreeHost *)((char *)a3 + 48);
    uint64_t v51 = *((void *)a3 + 6);
    if (v51
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)a3 + 6, 0), (uint64_t v51 = *(void *)v4) != 0))
    {
      int v52 = *(_DWORD *)(v51 - 8);
    }
    else
    {
      int v52 = 0;
    }
    unsigned int v53 = WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::hash(cf) & v52;
    a2 = (CALayer *)(v51 + 24 * v53);
    Class isa = a2->super.isa;
    CFTypeRef v54 = *(CFTypeRef *)&a2->_attr.refcount;
    if (*(_OWORD *)&a2->super.isa == 0)
    {
LABEL_91:
      *(_OWORD *)&a2->super.Class isa = *(_OWORD *)cf;
      layer = a2->_attr.layer;
      a2->_attr.layer = 0;
      if (layer) {
        CFRelease(layer);
      }
      uint64_t v59 = *(void *)v4;
      if (*(void *)v4) {
        int v60 = *(_DWORD *)(v59 - 12) + 1;
      }
      else {
        int v60 = 1;
      }
      *(_DWORD *)(v59 - 12) = v60;
      uint64_t v61 = *(void *)v4;
      if (*(void *)v4) {
        int v62 = *(_DWORD *)(v61 - 12);
      }
      else {
        int v62 = 0;
      }
      uint64_t v63 = (*(_DWORD *)(v61 - 16) + v62);
      unint64_t v64 = *(unsigned int *)(v61 - 4);
      if (v64 <= 0x400)
      {
        if (3 * v64 > 4 * v63) {
          goto LABEL_102;
        }
LABEL_101:
        a2 = (CALayer *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)a3 + 6, a2);
        goto LABEL_102;
      }
      if (v64 <= 2 * v63) {
        goto LABEL_101;
      }
    }
    else
    {
      unsigned int v56 = 0;
      int v57 = 1;
      while (isa != cf[0] || v54 != cf[1])
      {
        if (v54 == (CFTypeRef)-1) {
          unsigned int v56 = a2;
        }
        unsigned int v53 = (v53 + v57) & v52;
        a2 = (CALayer *)(v51 + 24 * v53);
        Class isa = a2->super.isa;
        CFTypeRef v54 = *(CFTypeRef *)&a2->_attr.refcount;
        ++v57;
        if (*(_OWORD *)&a2->super.isa == 0)
        {
          if (v56)
          {
            v56->super.Class isa = 0;
            *(void *)&v56->_attr.refcount = 0;
            v56->_attr.layer = 0;
            --*(_DWORD *)(*(void *)v4 - 16);
            a2 = v56;
          }
          goto LABEL_91;
        }
      }
    }
LABEL_102:
    unsigned int v65 = (WKAnimationDelegate *)a2->_attr.layer;
    if (v65) {
      goto LABEL_106;
    }
    int v66 = [WKAnimationDelegate alloc];
    if (v70)
    {
      unsigned int v65 = -[WKAnimationDelegate initWithLayerID:layerTreeHost:](v66, "initWithLayerID:layerTreeHost:", cf[0], cf[1], a3);
      int v67 = a2->_attr.layer;
      a2->_attr.layer = v65;
      if (v67)
      {
        CFRelease(v67);
        unsigned int v65 = (WKAnimationDelegate *)a2->_attr.layer;
      }
LABEL_106:
      [v8 setDelegate:v65];
      break;
    }
LABEL_113:
    __break(1u);
LABEL_114:
    char v9 = &stru_1EEA10550;
LABEL_4:
    long long v8 = (void *)[v8 animationWithKeyPath:v9];
    if (*((_DWORD *)v4 + 21) >= 2u)
    {
      WebKit::animationValueFromKeyframeValue((uint64_t **)cf, *((void *)v4 + 9), v10);
      CFTypeRef v11 = cf[0];
      [v8 setFromValue:cf[0]];
      if (v11) {
        CFRelease(v11);
      }
      if (*((_DWORD *)v4 + 21) <= 1u)
      {
LABEL_118:
        __break(0xC471u);
        JUMPOUT(0x198F16910);
      }
      WebKit::animationValueFromKeyframeValue((uint64_t **)cf, *((void *)v4 + 9) + 136, v12);
      CFTypeRef v13 = cf[0];
      [v8 setToValue:cf[0]];
      if (v13) {
        CFRelease(v13);
      }
    }
    if (*((_DWORD *)v4 + 29)) {
      [v8 setTimingFunction:WebCore::toCAMediaTimingFunction()];
    }
    if (v8) {
LABEL_67:
    }
      CFRetain(v8);
  }
  if (_MergedGlobals_98 == 1)
  {
    LODWORD(v48) = dword_1EB359D3C;
    LODWORD(v49) = unk_1EB359D40;
    LODWORD(v50) = dword_1EB359D44;
  }
  else
  {
    *(CAFrameRateRange *)&double v48 = CAFrameRateRangeMake(80.0, 120.0, 120.0);
    dword_1EB359D3C = LODWORD(v48);
    unk_1EB359D40 = LODWORD(v49);
    dword_1EB359D44 = LODWORD(v50);
    _MergedGlobals_98 = 1;
  }
  objc_msgSend(v8, "setPreferredFrameRateRange:", v48, v49, v50);
  return [v8 setHighFrameRateReason:2883585];
}

void sub_198F1691C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    CFRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::animationValueFromKeyframeValue(uint64_t **a1, uint64_t a2, double a3)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 128);
  if (v3 == -1) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = *(unsigned int *)(a2 + 128);
  }
  switch(v4)
  {
    case 1:
      if (v3 != 1) {
        goto LABEL_24;
      }
      WebCore::Color::Color((WebCore::Color *)&v101, (const Color *)a2);
      if ((v101 & 0x8000000000000) == 0)
      {
        unsigned int v19 = bswap32(v101);
        goto LABEL_45;
      }
      v18.i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
      float v20 = *(float *)((v101 & 0xFFFFFFFFFFFFLL) + 8);
      float v21 = *(float *)((v101 & 0xFFFFFFFFFFFFLL) + 0xC);
      float v22 = *(float *)((v101 & 0xFFFFFFFFFFFFLL) + 0x10);
      switch(HIBYTE(v101))
      {
        case 0u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v23.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(v102);
          v103 = (uint64_t *)__PAIR64__(v24, v23.u32[0]);
          uint64_t v104 = __PAIR64__(v26, v25);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v23);
          break;
        case 1u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v68.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(v102);
          v103 = (uint64_t *)__PAIR64__(v69, v68.u32[0]);
          uint64_t v104 = __PAIR64__(v71, v70);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v68);
          break;
        case 2u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v52.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(v102);
          v103 = (uint64_t *)__PAIR64__(v53, v52.u32[0]);
          uint64_t v104 = __PAIR64__(v55, v54);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v52);
          break;
        case 3u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v60.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(v102);
          v103 = (uint64_t *)__PAIR64__(v61, v60.u32[0]);
          uint64_t v104 = __PAIR64__(v63, v62);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v60);
          break;
        case 4u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v40.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(v102);
          v103 = (uint64_t *)__PAIR64__(v41, v40.u32[0]);
          uint64_t v104 = __PAIR64__(v43, v42);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v40);
          break;
        case 5u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v72.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(v102);
          v103 = (uint64_t *)__PAIR64__(v73, v72.u32[0]);
          uint64_t v104 = __PAIR64__(v75, v74);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v72);
          break;
        case 6u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v80.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(v102);
          v103 = (uint64_t *)__PAIR64__(v81, v80.u32[0]);
          uint64_t v104 = __PAIR64__(v83, v82);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v80);
          break;
        case 7u:
          *(float *)v64.i32 = WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v18, v20, v21, v22);
          v103 = (uint64_t *)__PAIR64__(v65, v64.u32[0]);
          uint64_t v104 = __PAIR64__(v67, v66);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v64);
          break;
        case 8u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v92.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert();
          v103 = (uint64_t *)__PAIR64__(v93, v92.u32[0]);
          uint64_t v104 = __PAIR64__(v95, v94);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v92);
          break;
        case 9u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v48.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert();
          v103 = (uint64_t *)__PAIR64__(v49, v48.u32[0]);
          uint64_t v104 = __PAIR64__(v51, v50);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v48);
          break;
        case 0xAu:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v88.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert();
          v103 = (uint64_t *)__PAIR64__(v89, v88.u32[0]);
          uint64_t v104 = __PAIR64__(v91, v90);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v88);
          break;
        case 0xBu:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v36.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert();
          v103 = (uint64_t *)__PAIR64__(v37, v36.u32[0]);
          uint64_t v104 = __PAIR64__(v39, v38);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v36);
          break;
        case 0xCu:
          LODWORD(v103) = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *((float *)&v103 + 1) = v20;
          uint64_t v104 = __PAIR64__(LODWORD(v22), LODWORD(v21));
          *(float *)v44.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)&v103, v18);
          v103 = (uint64_t *)__PAIR64__(v45, v44.u32[0]);
          uint64_t v104 = __PAIR64__(v47, v46);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v44);
          break;
        case 0xDu:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v76.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLCHA<float>,void>::convert();
          v103 = (uint64_t *)__PAIR64__(v77, v76.u32[0]);
          uint64_t v104 = __PAIR64__(v79, v78);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v76);
          break;
        case 0xEu:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v32.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert();
          v103 = (uint64_t *)__PAIR64__(v33, v32.u32[0]);
          uint64_t v104 = __PAIR64__(v35, v34);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v32);
          break;
        case 0xFu:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v56.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(v102);
          v103 = (uint64_t *)__PAIR64__(v57, v56.u32[0]);
          uint64_t v104 = __PAIR64__(v59, v58);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v56);
          break;
        case 0x10u:
          goto LABEL_25;
        case 0x12u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v84.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v102, v18);
          v103 = (uint64_t *)__PAIR64__(v85, v84.u32[0]);
          uint64_t v104 = __PAIR64__(v87, v86);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v84);
          break;
        case 0x13u:
          v102[0].i32[0] = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *(uint64_t *)((char *)v102[0].i64 + 4) = __PAIR64__(LODWORD(v21), LODWORD(v20));
          *(float *)&v102[0].i32[3] = v22;
          *(float *)v96.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((uint64_t)v102, v18);
          v103 = (uint64_t *)__PAIR64__(v97, v96.u32[0]);
          uint64_t v104 = __PAIR64__(v99, v98);
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v96);
          break;
        default:
          LODWORD(v103) = *(_DWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          *((float *)&v103 + 1) = v20;
          uint64_t v104 = __PAIR64__(LODWORD(v22), LODWORD(v21));
          unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v18);
          break;
      }
      goto LABEL_44;
    case 2:
      if (v3 != 2) {
        goto LABEL_24;
      }
      LODWORD(a3) = *(_DWORD *)a2;
      int v9 = *(_DWORD *)(a2 + 4);
      int v10 = *(_DWORD *)(a2 + 8);
      v103 = (uint64_t *)[NSNumber numberWithFloat:a3];
      LODWORD(v11) = v9;
      uint64_t v104 = [NSNumber numberWithFloat:v11];
      LODWORD(v12) = v10;
      uint64_t v105 = [NSNumber numberWithFloat:v12];
      __n128 result = (uint64_t *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v103 count:3];
      *a1 = result;
      if (result) {
        goto LABEL_15;
      }
      return result;
    case 3:
      if (v3 != 3) {
        goto LABEL_24;
      }
      int8x16_t v13 = *(int8x16_t *)(a2 + 80);
      v102[4] = *(int8x16_t *)(a2 + 64);
      v102[5] = v13;
      int8x16_t v14 = *(int8x16_t *)(a2 + 112);
      v102[6] = *(int8x16_t *)(a2 + 96);
      v102[7] = v14;
      int8x16_t v15 = *(int8x16_t *)(a2 + 16);
      v102[0] = *(int8x16_t *)a2;
      v102[1] = v15;
      int8x16_t v16 = *(int8x16_t *)(a2 + 48);
      v102[2] = *(int8x16_t *)(a2 + 32);
      v102[3] = v16;
      double v17 = (void *)MEMORY[0x1E4F29238];
      WebCore::TransformationMatrix::operator CATransform3D();
      __n128 result = (uint64_t *)[v17 valueWithCATransform3D:&v103];
      *a1 = result;
      if (result) {
LABEL_15:
      }
        __n128 result = (uint64_t *)CFRetain(result);
      break;
    case 4:
      if (v3 != 4) {
        goto LABEL_24;
      }
      long long v7 = *(unsigned int **)a2;
      long long v8 = (atomic_uint *)(*(void *)a2 + 8);
      atomic_fetch_add(v8, 1u);
      __n128 result = WebCore::PlatformCAFilters::filterValueForOperation((uint64_t *)&v103, (WebCore::PlatformCAFilters *)v7, (const WebCore::FilterOperation *)a2);
      *a1 = v103;
      if (atomic_fetch_add(v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7 + 2);
        __n128 result = (uint64_t *)(*(uint64_t (**)(unsigned int *))(*(void *)v7 + 8))(v7);
      }
      break;
    default:
      if (v3)
      {
LABEL_24:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
        v102[0].i64[0] = __PAIR64__(LODWORD(v20), v18.u32[0]);
        v102[0].i64[1] = __PAIR64__(LODWORD(v22), LODWORD(v21));
        *(float *)v28.i32 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(v102);
        v103 = (uint64_t *)__PAIR64__(v29, v28.u32[0]);
        uint64_t v104 = __PAIR64__(v31, v30);
        unsigned int v27 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion((uint64_t)&v103, v28);
LABEL_44:
        unsigned int v19 = v27;
LABEL_45:
        v103 = (uint64_t *)[NSNumber numberWithUnsignedChar:v19];
        uint64_t v104 = [NSNumber numberWithUnsignedChar:BYTE1(v19)];
        uint64_t v105 = [NSNumber numberWithUnsignedChar:BYTE2(v19)];
        uint64_t v106 = [NSNumber numberWithUnsignedChar:HIBYTE(v19)];
        __n128 result = (uint64_t *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v103 count:4];
        *a1 = result;
        if (result) {
          __n128 result = (uint64_t *)CFRetain(result);
        }
        if ((v101 & 0x8000000000000) != 0)
        {
          __n128 result = (uint64_t *)(v101 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            __n128 result = (uint64_t *)WTF::fastFree((WTF *)result, v100);
          }
        }
      }
      else
      {
        LODWORD(a3) = *(_DWORD *)a2;
        __n128 result = (uint64_t *)[NSNumber numberWithFloat:a3];
        *a1 = result;
        if (result)
        {
          __n128 result = (uint64_t *)CFRetain(result);
        }
      }
      break;
  }
  return result;
}

void sub_198F16FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ColorConversion<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleToByteConversion(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  uint64_t v3 = 0;
  v9[0] = LODWORD(v2);
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  unsigned int v10 = 0;
  do
  {
    uint64_t v7 = llroundf(*(float *)&v9[v3] * 255.0);
    if (v7 >= 255) {
      uint64_t v7 = 255;
    }
    *((unsigned char *)&v10 + v3++) = v7 & ~(v7 >> 63);
  }
  while (v3 != 4);
  return v10;
}

double WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(int8x16_t a1, float a2, float a3, float a4)
{
  *(float *)&a1.i32[1] = a2;
  a1.i64[1] = __PAIR64__(LODWORD(a4), LODWORD(a3));
  a1.i64[0] = vandq_s8(a1, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1), (int8x16_t)vcgezq_f32((float32x4_t)a1))).u64[0];
  return *(double *)a1.i64;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  if (*(float *)&v2 >= 0.0031308)
  {
    float v9 = (float)(powf(*(float *)&v2, 0.41667) * 1.055) + -0.055;
    float v10 = 0.0;
    if (v9 > 0.0) {
      float v10 = v9;
    }
    if (v9 >= 1.0) {
      float v8 = 1.0;
    }
    else {
      float v8 = v10;
    }
  }
  else
  {
    float v7 = *(float *)&v2 * 12.92;
    if (v7 >= 0.0) {
      float v8 = v7;
    }
    else {
      float v8 = 0.0;
    }
  }
  if (v4 >= 0.0031308) {
    powf(v4, 0.41667);
  }
  if (v6 >= 0.0031308) {
    powf(v6, 0.41667);
  }
  return v8;
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::handleMatrixConversion(a1, a2);

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(int8x16_t a1, float a2, float a3, float a4)
{
  double v4 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a1, a2, a3, a4);
  if (*(float *)&v4 <= 1.0) {
    float v5 = *(float *)&v4;
  }
  else {
    float v5 = 1.0;
  }
  if (*(float *)&v4 >= 0.0) {
    return v5;
  }
  else {
    return 0.0;
  }
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  void v12[2] = v4;
  v12[3] = v5;
  int v11 = 1065207884;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
  v10[1] = unk_1994F7268;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  int v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1994F728C;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v3 = 0;
    float v4 = *((float *)&v6 + i);
    do
    {
      float v4 = v4 + (float)(*(float *)(a1 + v3) * *(float *)(a2 + v3));
      v3 += 4;
    }
    while (v3 != 12);
    *((float *)&v6 + i) = v4;
    a1 += 12;
  }
  return *(float *)&v6;
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  int v7 = LODWORD(v2);
  float v8 = powf(fabsf(*(float *)&v2), 2.1992);
  if (v7 < 0) {
    float v8 = -v8;
  }
  if (v8 > 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = 0.0;
  }
  if (v8 >= 1.0) {
    float v10 = 1.0;
  }
  else {
    float v10 = v9;
  }
  powf(fabsf(v4), 2.1992);
  powf(fabsf(v6), 2.1992);
  return v10;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::handleMatrixConversion(a1, a2);

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  void v12[2] = v4;
  v12[3] = v5;
  int v11 = 1065721848;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v10[1] = unk_1994F72B0;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  int v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1994F728C;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  if (*(float *)&v2 <= 0.04045)
  {
    float v10 = *(float *)&v2 / 12.92;
    if (v10 >= 0.0) {
      float v9 = v10;
    }
    else {
      float v9 = 0.0;
    }
  }
  else
  {
    float v7 = powf((float)(*(float *)&v2 + 0.055) / 1.055, 2.4);
    float v8 = 0.0;
    if (v7 > 0.0) {
      float v8 = v7;
    }
    if (v7 >= 1.0) {
      float v9 = 1.0;
    }
    else {
      float v9 = v8;
    }
  }
  if (v4 > 0.04045) {
    powf((float)(v4 + 0.055) / 1.055, 2.4);
  }
  if (v6 > 0.04045) {
    powf((float)(v6 + 0.055) / 1.055, 2.4);
  }
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  int v7 = LODWORD(v2);
  float v8 = powf(fabsf(*(float *)&v2), 2.1992);
  if (v7 >= 0) {
    float v9 = v8;
  }
  else {
    float v9 = -v8;
  }
  powf(fabsf(v4), 2.1992);
  powf(fabsf(v6), 2.1992);
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  int v3 = LODWORD(v2);
  float v5 = v4;
  float v7 = v6;
  float v8 = fabsf(*(float *)&v2);
  if (v8 <= 0.04045) {
    float v9 = v8 / 12.92;
  }
  else {
    float v9 = powf((float)(v8 + 0.055) / 1.055, 2.4);
  }
  float v10 = fabsf(v5);
  if (v10 > 0.04045) {
    powf((float)(v10 + 0.055) / 1.055, 2.4);
  }
  float v11 = fabsf(v7);
  if (v11 > 0.04045) {
    powf((float)(v11 + 0.055) / 1.055, 2.4);
  }
  if (v3 >= 0) {
    return v9;
  }
  else {
    return -v9;
  }
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(int8x16_t *a1)
{
  int8x16_t v6 = *a1;
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)&v6, v6);
  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v1, v2, v3, v4);
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  float v7 = fabsf(*(float *)&v2);
  if (v7 >= 0.0031308) {
    powf(v7, 0.41667);
  }
  float v8 = fabsf(v4);
  if (v8 >= 0.0031308) {
    powf(v8, 0.41667);
  }
  float v9 = fabsf(v6);
  if (v9 >= 0.0031308) {
    powf(v9, 0.41667);
  }
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleMatrixConversion(a1, a2);

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v15[0] = LODWORD(v2);
  v15[1] = v3;
  v15[2] = v4;
  v15[3] = v5;
  int v14 = 1062418958;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>::linearToXYZ;
  v13[1] = unk_1994F72D4;
  v18[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
  v18[1] = v6;
  v18[2] = v7;
  v18[3] = v8;
  int v17 = 1068124526;
  v16[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v16[1] = unk_1994F72F8;
  v21[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v16, (uint64_t)v18);
  v21[1] = v9;
  v21[2] = v10;
  v21[3] = v11;
  int v20 = 1065831128;
  v19[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v19[1] = unk_1994F728C;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v19, (uint64_t)v21);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  if (fabsf(*(float *)&v2) <= 0.03125)
  {
    float v9 = *(float *)&v2 * 0.0625;
  }
  else
  {
    int v7 = LODWORD(v2);
    float v8 = powf(*(float *)&v2, 1.8);
    if (v7 >= 0) {
      float v9 = v8;
    }
    else {
      float v9 = -v8;
    }
  }
  if (fabsf(v4) > 0.03125) {
    powf(v4, 1.8);
  }
  if (fabsf(v6) > 0.03125) {
    powf(v6, 1.8);
  }
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::handleMatrixConversion(a1, a2);

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  void v12[2] = v4;
  v12[3] = v5;
  int v11 = 1065864796;
  v10[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v10[1] = unk_1994F731C;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  int v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1994F728C;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  if (fabsf(*(float *)&v2) >= 0.081243)
  {
    int v8 = LODWORD(v2);
    double v9 = pow(((float)(*(float *)&v2 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 < 0) {
      double v9 = -v9;
    }
    float v7 = v9;
  }
  else
  {
    float v7 = *(float *)&v2 / 4.5;
  }
  if (fabsf(v4) >= 0.081243) {
    pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  }
  if (fabsf(v6) >= 0.081243) {
    pow(((float)(v6 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  }
  return v7;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert()
{
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert();

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v0, v1, v2, v3);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert()
{
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert();

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v0, v1, v2, v3);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert()
{
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert();
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert()
{
  WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert();
  v5[0] = v0.i32[0];
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)v5, v0);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::handleMatrixConversion(a1, a2);

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v12[0] = LODWORD(v2);
  v12[1] = v3;
  void v12[2] = v4;
  v12[3] = v5;
  int v11 = 1068124526;
  v10[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v10[1] = unk_1994F72F8;
  v15[0] = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v10, (uint64_t)v12);
  v15[1] = v6;
  v15[2] = v7;
  v15[3] = v8;
  int v14 = 1065831128;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1994F728C;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v13, (uint64_t)v15);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLCHA<float>,void>::convert()
{
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert();
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert()
{
  WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert();
  v5[0] = v0.i32[0];
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((uint64_t)v5, v0);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  void v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::handleMatrixConversion(a1, a2);

  return WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(v2, v3, v4, v5);
}

float WebCore::ColorConversion<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::handleMatrixConversion(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v9[0] = LODWORD(v2);
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  int v8 = 1065831128;
  v7[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v7[1] = unk_1994F728C;
  return WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>((uint64_t)v7, (uint64_t)v9);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  _OWORD v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  _OWORD v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  if (*(float *)&v2 <= 0.03125)
  {
    float v9 = *(float *)&v2 * 0.0625;
  }
  else
  {
    float v7 = powf(*(float *)&v2, 1.8);
    float v8 = 0.0;
    if (v7 > 0.0) {
      float v8 = v7;
    }
    if (v7 >= 1.0) {
      float v9 = 1.0;
    }
    else {
      float v9 = v8;
    }
  }
  if (v4 > 0.03125) {
    powf(v4, 1.8);
  }
  if (v6 > 0.03125) {
    powf(v6, 1.8);
  }
  return v9;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  *(float *)v1.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>>((uint64_t)v6, *a1);
  v6[0] = v1.i32[0];
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v6, v1);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  *(float *)v2.i32 = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(a1, a2);
  v7[0] = v2.i32[0];
  v7[1] = v3;
  _OWORD v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  *(double *)v2.i64 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  v7[0] = v2.i32[0];
  v7[1] = v3;
  _OWORD v7[2] = v4;
  v7[3] = v5;
  return WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)v7, v2);
}

float WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::Rec2020Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::toLinearEncoded<WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>>(uint64_t a1, int8x16_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  double v2 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(a2, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  float v4 = v3;
  float v6 = v5;
  if (*(float *)&v2 >= 0.081243)
  {
    double v8 = pow(((float)(*(float *)&v2 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    float v7 = 1.0;
    if (v8 < 1.0)
    {
      float v7 = 0.0;
      if (v8 > 0.0) {
        float v7 = v8;
      }
    }
  }
  else
  {
    float v7 = *(float *)&v2 / 4.5;
  }
  if (v4 >= 0.081243) {
    pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  }
  if (v6 >= 0.081243) {
    pow(((float)(v6 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
  }
  return v7;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::hash(void *a1)
{
  unsigned int v2 = -1640531527;
  __int16 v3 = 0;
  char v4 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v2, a1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      unsigned int v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        float v6 = *(_DWORD **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
            unsigned int v5 = *(WTF::StringImpl **)v4;
          }
          else
          {
            --v6[2];
          }
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

void *std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]<true,0>(void *a1, _DWORD *a2, uint64_t a3)
{
  if (a2) {
    *a2 += 2;
  }
  *a1 = a2;
  WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties((uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_198F18AA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *unsigned int v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7) {
    ++*(_DWORD *)(v7 + 8);
  }
  *(void *)(a1 + 56) = v7;
  int v8 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v8;
  uint64_t v9 = *(unsigned int *)(a2 + 84);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = v9;
  if (v9)
  {
    if (v9 >= 0x1E1E1E2) {
      goto LABEL_24;
    }
    unsigned int v10 = 136 * v9;
    uint64_t v11 = WTF::fastMalloc((WTF *)(136 * v9));
    *(_DWORD *)(a1 + 80) = v10 / 0x88;
    *(void *)(a1 + 72) = v11;
    uint64_t v12 = *(unsigned int *)(a2 + 84);
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 72);
      uint64_t v14 = 136 * v12;
      do
      {
        uint64_t v11 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(v11, v13)+ 136;
        v13 += 136;
        v14 -= 136;
      }
      while (v14);
    }
  }
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 88, a2 + 88);
  uint64_t v15 = *(unsigned int *)(a2 + 116);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = v15;
  if (v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198F18CD8);
    }
    int8x16_t v16 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 112) = v15;
    *(void *)(a1 + 104) = v16;
    uint64_t v17 = *(unsigned int *)(a2 + 116);
    if (v17)
    {
      int8x16_t v18 = *(uint64_t **)(a2 + 104);
      uint64_t v19 = 8 * v17;
      do
      {
        uint64_t v20 = *v18++;
        ++*(_DWORD *)(v20 + 8);
        *v16++ = v20;
        v19 -= 8;
      }
      while (v19);
    }
  }
  uint64_t v21 = *(unsigned int *)(a2 + 132);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = v21;
  if (v21)
  {
    if (v21 < 0x1E1E1E2)
    {
      unsigned int v23 = 136 * v21;
      unsigned int v24 = (WebKit::PlatformCAAnimationRemoteProperties *)WTF::fastMalloc((WTF *)(136 * v21));
      *(_DWORD *)(a1 + 128) = v23 / 0x88;
      *(void *)(a1 + 120) = v24;
      uint64_t v25 = *(unsigned int *)(a2 + 132);
      if (v25)
      {
        unsigned int v26 = *(const WebKit::PlatformCAAnimationRemoteProperties **)(a2 + 120);
        uint64_t v27 = 136 * v25;
        do
        {
          unsigned int v24 = (WebKit::PlatformCAAnimationRemoteProperties *)(WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties(v24, v26)+ 136);
          unsigned int v26 = (const WebKit::PlatformCAAnimationRemoteProperties *)((char *)v26 + 136);
          v27 -= 136;
        }
        while (v27);
      }
      return a1;
    }
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x198F18CD0);
  }
  return a1;
}

void sub_198F18CE4(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
  int v8 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 96) = 0;
    WTF::fastFree(v8, v7);
  }
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v7);
  unsigned int v10 = *(_DWORD **)(v2 + 56);
  *(void *)(v2 + 56) = 0;
  if (v10)
  {
    if (v10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
    }
    else {
      --v10[2];
    }
  }
  uint64_t v11 = *(WTF::StringImpl **)v2;
  *(void *)uint64_t v2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 128) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 128);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))*(&off_1EE9DF200 + v3))(&v5, a1, a2);
    *(_DWORD *)(a1 + 128) = v3;
  }
  return a1;
}

void sub_198F18E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = *(unsigned int *)(v12 + 128);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9DF170[v14])(&a12, v12);
  }
  *(_DWORD *)(v12 + 128) = -1;
  _Unwind_Resume(exception_object);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(int a1, WebCore::Color *this, Color *a3)
{
  return WebCore::Color::Color(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)a3[4];
  long long v7 = a3[5];
  long long v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfN7WebCore5ColorENS8_12FloatPoint3DENS8_20TransformationMatrixEN3WTF3RefINS8_15FilterOperationENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJfS9_SA_SB_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  atomic_fetch_add((atomic_uint *volatile)(*a3 + 8), 1u);
  *a2 = v3;
}

BOOL WebCore::outOfLineComponentsEqual(unint64_t this, unint64_t a2, const Color *a3)
{
  uint64_t v3 = 0;
  if ((this & 0x8000000000000) != 0 && (a2 & 0x8000000000000) != 0)
  {
    BOOL v4 = 0;
    for (unint64_t i = 0; i != 4; ++i)
    {
      if (*((float *)&v8[1] + i) != *((float *)v8 + i)) {
        break;
      }
      BOOL v4 = i > 2;
    }
    BOOL v6 = HIBYTE(this) == HIBYTE(a2) && BYTE6(this) == BYTE6(a2);
    return v4 && v6;
  }
  return v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 56);
  if (v2)
  {
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF1E8[v2])(&v3, v1);
    }
    *(_DWORD *)(v1 + 56) = 0;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 56);
  if (v5 == 1)
  {
    __n128 result = *(__n128 *)a3;
    long long v7 = *(_OWORD *)(a3 + 16);
    long long v8 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 32) = v8;
    *(__n128 *)a2 = result;
  }
  else
  {
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9DF1E8[v5])(&v11, v4);
    }
    *(_DWORD *)(v4 + 56) = -1;
    __n128 result = *(__n128 *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    long long v10 = *(_OWORD *)(a3 + 32);
    *(void *)(v4 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)(v4 + 16) = v9;
    *(_OWORD *)(v4 + 32) = v10;
    *(__n128 *)uint64_t v4 = result;
    *(_DWORD *)(v4 + 56) = 1;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 56);
  if (v5 == 2)
  {
    BOOL v6 = *a3;
    atomic_fetch_add((atomic_uint *volatile)*a3 + 2, 1u);
    __n128 result = *a2;
    *a2 = v6;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v7();
    }
  }
  else
  {
    if (v5 != -1) {
      __n128 result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1EE9DF1E8[v5])(&v9, v4);
    }
    *(_DWORD *)(v4 + 56) = -1;
    long long v8 = *a3;
    atomic_fetch_add((atomic_uint *volatile)*a3 + 2, 1u);
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 56) = 2;
  }
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = a2[3];
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
        LODWORD(v4) = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>::destruct((unsigned int *)(*(void *)a1 + 8 * v5), (unsigned int **)(*(void *)a1 + 8 * v4));
      a1[3] = v5;
      LODWORD(v4) = v5;
    }
    BOOL v6 = *(unsigned int ***)a2;
    if (v4)
    {
      long long v7 = *(unsigned int ***)a1;
      uint64_t v8 = 8 * v4;
      do
      {
        char v9 = *v6;
        atomic_fetch_add((atomic_uint *volatile)*v6 + 2, 1u);
        long long v10 = *v7;
        void *v7 = v9;
        if (v10 && atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v10 + 2);
          (*(void (**)(unsigned int *))(*(void *)v10 + 8))(v10);
        }
        ++v6;
        ++v7;
        v8 -= 8;
      }
      while (v8);
      BOOL v6 = *(unsigned int ***)a2;
      LODWORD(v4) = a1[3];
    }
    uint64_t v11 = a2[3];
    if (v4 != v11)
    {
      uint64_t v12 = (void *)(*(void *)a1 + 8 * v4);
      uint64_t v13 = &v6[v4];
      uint64_t v14 = 8 * v11 - 8 * v4;
      do
      {
        uint64_t v15 = (uint64_t)*v13++;
        atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
        *v12++ = v15;
        v14 -= 8;
      }
      while (v14);
      LODWORD(v4) = a2[3];
    }
    a1[3] = v4;
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<float>(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(float&)#1}>(void *result, uint64_t a2)
{
  *__n128 result = 0;
  result[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = result;
      unsigned int v5 = 136 * v2;
      __n128 result = (void *)WTF::fastMalloc((WTF *)(136 * v2));
      uint64_t v6 = (uint64_t)result;
      *((_DWORD *)v4 + 2) = v5 / 0x88;
      *uint64_t v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        unint64_t v7 = 0;
        do
        {
          v8[0] = *(_DWORD *)(*(void *)a2 + 4 * v7);
          int v9 = 0;
          __n128 result = (void *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)v8);
          *((_DWORD *)v4 + 3) = v7 + 1;
          if (v9 != -1) {
            __n128 result = (void *)((uint64_t (*)(char *, _DWORD *))off_1EE9DF170[v9])(&v10, v8);
          }
          ++v7;
          v6 += 136;
        }
        while (v7 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_198F19640(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void *WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::TransformationMatrix>(WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::TransformationMatrix&)#1}>(void *result, uint64_t a2)
{
  *__n128 result = 0;
  result[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = result;
      unsigned int v5 = 136 * v2;
      __n128 result = (void *)WTF::fastMalloc((WTF *)(136 * v2));
      uint64_t v6 = (uint64_t)result;
      *((_DWORD *)v4 + 2) = v5 / 0x88;
      *uint64_t v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        do
        {
          int v9 = (long long *)(*(void *)a2 + v7);
          long long v10 = *v9;
          long long v11 = v9[1];
          long long v12 = v9[3];
          _OWORD v16[2] = v9[2];
          v16[3] = v12;
          v16[0] = v10;
          v16[1] = v11;
          long long v13 = v9[4];
          long long v14 = v9[5];
          long long v15 = v9[7];
          v16[6] = v9[6];
          v16[7] = v15;
          v16[4] = v13;
          v16[5] = v14;
          int v17 = 3;
          __n128 result = (void *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)v16);
          *((_DWORD *)v4 + 3) = v8 + 1;
          if (v17 != -1) {
            __n128 result = (void *)((uint64_t (*)(char *, _OWORD *))off_1EE9DF170[v17])(&v18, v16);
          }
          ++v8;
          v6 += 136;
          v7 += 128;
        }
        while (v8 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_198F197A0(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void *WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::FloatPoint3D>(WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::FloatPoint3D&)#1}>(void *result, uint64_t a2)
{
  *__n128 result = 0;
  result[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = result;
      unsigned int v5 = 136 * v2;
      __n128 result = (void *)WTF::fastMalloc((WTF *)(136 * v2));
      uint64_t v6 = (uint64_t)result;
      *((_DWORD *)v4 + 2) = v5 / 0x88;
      *uint64_t v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        do
        {
          int v9 = (uint64_t *)(*(void *)a2 + v7);
          int v10 = *((_DWORD *)v9 + 2);
          uint64_t v11 = *v9;
          int v12 = v10;
          int v13 = 2;
          __n128 result = (void *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)&v11);
          *((_DWORD *)v4 + 3) = v8 + 1;
          if (v13 != -1) {
            __n128 result = (void *)((uint64_t (*)(char *, uint64_t *))off_1EE9DF170[v13])(&v14, &v11);
          }
          ++v8;
          v6 += 136;
          v7 += 12;
        }
        while (v8 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_198F198F0(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void **WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *result;
      uint64_t v5 = *((unsigned int *)result + 3);
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
      *((_DWORD *)v3 + 2) = v2;
      _DWORD *v3 = v6;
      __n128 result = (void **)memcpy(v6, v4, 4 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          _DWORD *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

void *WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::PlatformCAAnimationRemote::setTimingFunctions(WTF::Vector<WTF::Ref<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL)::$_0>(void *result, uint64_t a2)
{
  *__n128 result = 0;
  result[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = result;
      __n128 result = (void *)WTF::fastMalloc((WTF *)(8 * v2));
      uint64_t v5 = result;
      *((_DWORD *)v4 + 2) = v2;
      *uint64_t v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        unint64_t v6 = 0;
        do
        {
          __n128 result = (***(void *(****)(uint64_t *__return_ptr))(*(void *)a2 + 8 * v6))(&v7);
          v5[v6] = v7;
          *((_DWORD *)v4 + 3) = ++v6;
        }
        while (v6 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

void sub_198F19A90(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::PlatformCAAnimationRemote::setAnimations(WTF::Vector<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      unsigned int v5 = 136 * v2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(136 * v2));
      *(_DWORD *)(a1 + 8) = v5 / 0x88;
      *(void *)a1 = v6;
      if (*(_DWORD *)(a2 + 12))
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v8 = WTF::downcast<WebKit::PlatformCAAnimationRemote,WebCore::PlatformCAAnimation>(*(void *)(*(void *)a2 + 8 * v7));
          WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties((uint64_t)v10, v8 + 16);
          WebKit::PlatformCAAnimationRemoteProperties::PlatformCAAnimationRemoteProperties(v6, v10);
          *(_DWORD *)(a1 + 12) = ++v7;
          WebKit::PlatformCAAnimationRemoteProperties::~PlatformCAAnimationRemoteProperties((WebKit::PlatformCAAnimationRemoteProperties *)v10, v9);
          v6 += 136;
        }
        while (v7 < *(unsigned int *)(a2 + 12));
      }
    }
  }
}

void sub_198F19B80(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF::Vector<WebKit::PlatformCAAnimationRemoteProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::downcast<WebKit::PlatformCAAnimationRemote,WebCore::PlatformCAAnimation>(uint64_t a1)
{
  if (!a1 || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) != 0) {
    return a1;
  }
  uint64_t result = 105;
  __break(0xC471u);
  return result;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result[3];
  if (v4 != a2)
  {
    unsigned int v5 = (uint64_t *)(*(void *)result + 8 * a2);
    uint64_t v6 = 8 * v4 - 8 * a2;
    do
    {
      uint64_t v7 = *v5;
      uint64_t *v5 = 0;
      if (v7) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WebCore::PlatformCAAnimation*>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v27 = a4;
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a3);
  }
  int v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    long long v15 = (uint64_t *)(v8 + 16 * v14);
    int8x16_t v16 = (WTF *)*v15;
    if (!*v15)
    {
      if (v12)
      {
        uint64_t *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        long long v15 = v12;
      }
      uint64_t result = (uint64_t *)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WebCore::PlatformCAAnimation*>(WTF::String const&,WebCore::PlatformCAAnimation* &&)::{lambda(void)#1}>(v15, a3, &v27);
      uint64_t v18 = *a2;
      if (*a2) {
        int v19 = *(_DWORD *)(v18 - 12) + 1;
      }
      else {
        int v19 = 1;
      }
      *(_DWORD *)(v18 - 12) = v19;
      uint64_t v20 = *a2;
      if (*a2) {
        int v21 = *(_DWORD *)(v20 - 12);
      }
      else {
        int v21 = 0;
      }
      uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
      unint64_t v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22) {
          goto LABEL_19;
        }
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_19:
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v20 + 16 * v23;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
      long long v15 = result;
      uint64_t v20 = *a2;
      if (*a2) {
        unint64_t v23 = *(unsigned int *)(v20 - 4);
      }
      else {
        unint64_t v23 = 0;
      }
      goto LABEL_19;
    }
    if (v16 != (WTF *)-1) {
      break;
    }
    int v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_10:
    unsigned int v11 = i + v14;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3)) {
    goto LABEL_10;
  }
  uint64_t v24 = *a2;
  if (*a2) {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
  }
  else {
    uint64_t v25 = 0;
  }
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v24 + 16 * v25;
  *(unsigned char *)(a1 + 16) = 0;
  unsigned int v26 = (_DWORD *)*a4;

  return (uint64_t *)WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>::operator=((_DWORD **)(v8 + 16 * v14 + 8), v26);
}

_DWORD **WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>::operator=(_DWORD **a1, _DWORD *a2)
{
  if (a2) {
    ++a2[2];
  }
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

_DWORD *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WebCore::PlatformCAAnimation*>(WTF::String const&,WebCore::PlatformCAAnimation* &&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v5 = **a3;
  if (v5) {
    ++*(_DWORD *)(v5 + 8);
  }
  uint64_t result = (_DWORD *)a1[1];
  a1[1] = v5;
  if (result)
  {
    if (result[2] == 1)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (_DWORD *)v7();
    }
    else
    {
      --result[2];
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unsigned int v11 = 0;
  if (v7)
  {
    uint64_t v13 = v7;
    uint64_t v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          long long v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v14);
          WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a3) {
            unsigned int v11 = v15;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>::~KeyValuePair((uint64_t)v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  int v4 = *a2;
  if (a1) {
    int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(v4);
  }
  int v8 = 0;
  do
  {
    uint64_t v9 = v7 & v5;
    unsigned int v7 = ++v8 + v9;
  }
  while (*(void *)(a1 + 16 * v9));
  unsigned int v10 = (WTF::StringImpl **)(a1 + 16 * v9);
  unsigned int v11 = v10[1];
  v10[1] = 0;
  if (!v11) {
    goto LABEL_11;
  }
  if (*((_DWORD *)v11 + 2) != 1)
  {
    --*((_DWORD *)v11 + 2);
LABEL_11:
    *unsigned int v10 = 0;
    goto LABEL_16;
  }
  (*(void (**)(WTF::StringImpl *))(*(void *)v11 + 8))(v11);
  uint64_t v13 = *v10;
  *unsigned int v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
LABEL_16:
  uint64_t v14 = *a2;
  *a2 = 0;
  *unsigned int v10 = v14;
  long long v15 = a2[1];
  a2[1] = 0;
  v10[1] = v15;
  return v10;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  uint64_t result = *(_DWORD **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (result)
  {
    if (result[2] == 1)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (_DWORD *)v4();
    }
    else
    {
      --result[2];
    }
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (void *)(*(void *)a1 + 144 * (void)a2);
  std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)v3, a2);
  uint64_t result = WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move((uint64_t)(v3 + 18), (uint64_t *)(*(void *)a1 + 144 * *(unsigned int *)(a1 + 12)), v3);
  --*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCAAnimation,WTF::RawPtrTraits<WebCore::PlatformCAAnimation>,WTF::DefaultRefDerefTraits<WebCore::PlatformCAAnimation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  int v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; int v8 = ++i + v10)
  {
    uint64_t v10 = v8 & v6;
    unsigned int v11 = *(WTF **)(v3 + 16 * v10);
    if (!v11) {
      break;
    }
    if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0) {
      return v3 + 16 * v10;
    }
  }
  if (*a1) {
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PlatformCALayerRemoteCustom::clone(WebCore::PlatformCALayerClient *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = [*(id *)(a1 + 16) player];

  return [v1 setPlayer:v2];
}

unsigned int *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  uint64_t result = (unsigned int *)a2[2];
  a2[2] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::translate<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>> WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineAdd<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::PlatformCALayerRemote*>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> &&,WebKit::PlatformCALayerRemote* &&)::{lambda(void)#1}>(uint64_t result, _OWORD *a2, uint64_t **a3)
{
  *(_OWORD *)uint64_t result = *a2;
  uint64_t v3 = **a3;
  if (v3)
  {
    uint64_t v6 = result;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 56), v3);
    uint64_t v4 = *(atomic_uint **)(v3 + 56);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
    uint64_t result = v6;
  }
  else
  {
    uint64_t v4 = 0;
  }
  int v5 = *(unsigned int **)(result + 16);
  *(void *)(result + 16) = v4;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    return WTF::fastFree((WTF *)v5, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v15 = -1640531527;
  __int16 v16 = 0;
  char v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  uint64_t v7 = a2[1];
  unsigned int v8 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 24 * (v6 & v5));
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      unsigned int v8 = (v8 + v13) & v5;
      uint64_t result = (uint64_t *)(v2 + 24 * v8);
      uint64_t v10 = *result;
      uint64_t v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    }
    return 0;
  }
  return result;
}

void API::ContentRuleList::~ContentRuleList(API::ContentRuleList *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2) {
    os_release(v2);
  }
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
}

{
  uint64_t vars8;

  API::ContentRuleList::~ContentRuleList(this);

  JUMPOUT(0x199740C10);
}

BOOL API::ContentRuleList::supportsRegularExpression(API::ContentRuleList *this, const WTF::String *a2)
{
  WebCore::ContentExtensions::CombinedURLFilters::CombinedURLFilters((WebCore::ContentExtensions::CombinedURLFilters *)v5);
  WebCore::ContentExtensions::URLFilterParser::URLFilterParser();
  BOOL v2 = WebCore::ContentExtensions::URLFilterParser::addPattern() < 2;
  WebCore::ContentExtensions::URLFilterParser::~URLFilterParser((WebCore::ContentExtensions::URLFilterParser *)&v4);
  MEMORY[0x1997339B0](v5);
  return v2;
}

unint64_t API::ContentRuleList::parseRuleList(API::ContentRuleList *this, const WTF::String *a2)
{
  WebCore::ContentExtensions::parseRuleList(&v7, this, a2);
  if (v8)
  {
    if (v8 != 1)
    {
      uint64_t v6 = std::__throw_bad_variant_access[abi:sn180100]();
      return API::ContentRuleListAction::create(v6);
    }
    unint64_t v2 = v7 & 0xFFFFFFFF00000000;
    uint64_t v3 = v7;
    int v4 = 1;
  }
  else
  {
    std::system_category();
    uint64_t v3 = 0;
    unint64_t v2 = 0;
    unint64_t result = 0;
    int v4 = v8;
    if (v8 == -1) {
      return result;
    }
  }
  ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions20ContentExtensionRuleELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v4])(&v9, &v7);
  return v2 | v3;
}

void API::ContentRuleListAction::create(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = API::Object::newObject(0x28uLL, 48);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(void *)uint64_t v4 = &unk_1EE9DF2C0;
  int v5 = *a1;
  *(unsigned char *)(v4 + 20) = *((unsigned char *)a1 + 4);
  *(_DWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  uint64_t v6 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  *(void *)(v4 + 24) = v6;
  LODWORD(v6) = a1[4];
  a1[4] = 0;
  *(_DWORD *)(v4 + 32) = v6;
  LODWORD(v6) = a1[5];
  a1[5] = 0;
  *(_DWORD *)(v4 + 36) = v6;
  *a2 = v4;
}

void API::ContentRuleListAction::~ContentRuleListAction(API::ContentRuleListAction *this, void *a2)
{
}

{
  uint64_t vars8;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);

  JUMPOUT(0x199740C10);
}

API::ContentRuleListStore *API::ContentRuleListStore::defaultStore(API::ContentRuleListStore *this)
{
    return (API::ContentRuleListStore *)API::ContentRuleListStore::defaultStore(void)::defaultStore;
  unint64_t v2 = (API::ContentRuleListStore *)API::Object::newObject(0x30uLL, 49);
  unint64_t result = API::ContentRuleListStore::ContentRuleListStore(v2);
  API::ContentRuleListStore::defaultStore(void)::defaultStore = (uint64_t)result;
  return result;
}

API::ContentRuleListStore *API::ContentRuleListStore::ContentRuleListStore(API::ContentRuleListStore *this)
{
  API::ContentRuleListStore::defaultStorePath(this);
  API::ContentRuleListStore::ContentRuleListStore(this, (const WTF::String *)&v5);
  uint64_t v3 = v5;
  int v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return this;
}

void API::ContentRuleListStore::~ContentRuleListStore(API::ContentRuleListStore *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  int v5 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

{
  uint64_t vars8;

  API::ContentRuleListStore::~ContentRuleListStore(this, a2);

  JUMPOUT(0x199740C10);
}

void API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::String::isolatedCopy();
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v9 = v5;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1EE9DF620;
  v6[1] = a1;
  v6[2] = v8;
  uint64_t v10 = v6;
  v6[3] = v9;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v10);
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
}

WTF::StringImpl *API::ContentRuleListStore::compileContentRuleList(uint64_t a1, const WTF::String *a2, const WTF::String *a3, uint64_t *a4)
{
  API::constructedPath((API *)(a1 + 16), a2, a3);
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v11 = v8;
  API::ContentRuleListStore::compileContentRuleListFile(a1, (uint64_t)&v12, (uint64_t)a2, a3, &v11);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  unint64_t result = v12;
  int v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void API::ContentRuleListStore::compileContentRuleListFile(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ContentExtensions *a4, uint64_t *a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (WebCore::QualifiedName *)WebCore::initializeCommonAtomStrings((WebCore *)a1);
  WebCore::QualifiedName::init(v8);
  WebCore::ContentExtensions::parseRuleList((uint64_t *)&v40, a4, v9);
  if (v42)
  {
    uint64_t v39 = 0;
    if (v42 == 1)
    {
      WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(a5, &v39);
      if (v39) {
        CFRelease(*(CFTypeRef *)(v39 + 8));
      }
      goto LABEL_38;
    }
LABEL_41:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  uint64_t v10 = *(void *)(a1 + 24);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  *(void *)&long long v34 = a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  if (v42) {
    goto LABEL_41;
  }
  unint64_t v11 = v40;
  unsigned int v12 = HIDWORD(v41);
  if (!HIDWORD(v41)) {
    goto LABEL_35;
  }
  unint64_t v13 = v40 + 152 * HIDWORD(v41);
  do
  {
    WebCore::ContentExtensions::Trigger::isolatedCopy();
    WebCore::ContentExtensions::Action::isolatedCopy();
    WebCore::ContentExtensions::ContentExtensionRule::ContentExtensionRule();
    if (v53 != -1) {
      ((void (*)(char *, void *))off_1EE9DF3D8[v53])(&v45, v52);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v14);
    __int16 v16 = v43;
    unsigned int v43 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    char v17 = v46[0];
    v46[0] = 0;
    uint64_t v18 = *(WTF::StringImpl **)v11;
    *(void *)unint64_t v11 = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    *(WTF::StringImpl **)(v11 + 8) = v46[1];
    uint64_t v19 = *(unsigned int *)(v11 + 28);
    if (v19) {
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(void *)(v11 + 16) + 8 * v19));
    }
    uint64_t v20 = *(WTF **)(v11 + 16);
    if (v20)
    {
      *(void *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 24) = 0;
      WTF::fastFree(v20, v15);
    }
    uint64_t v21 = v47;
    uint64_t v47 = 0;
    *(void *)(v11 + 16) = v21;
    LODWORD(v21) = v48;
    int v48 = 0;
    *(_DWORD *)(v11 + 24) = v21;
    LODWORD(v21) = v49;
    int v49 = 0;
    *(_DWORD *)(v11 + 28) = v21;
    uint64_t v22 = *(unsigned int *)(v11 + 144);
    if (v22 == -1)
    {
      if (v51 == -1) {
        goto LABEL_29;
      }
    }
    else if (v51 == -1)
    {
      ((void (*)(void *, unint64_t))off_1EE9DF3D8[v22])(v52, v11 + 32);
      *(_DWORD *)(v11 + 144) = -1;
      goto LABEL_27;
    }
    v52[0] = v11 + 32;
    ((void (*)(void *, unint64_t, unsigned char *))off_1EE9DF460[v51])(v52, v11 + 32, v50);
LABEL_27:
    if (v51 != -1) {
      ((void (*)(void *, unsigned char *))off_1EE9DF3D8[v51])(v52, v50);
    }
LABEL_29:
    int v51 = -1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v15);
    uint64_t v24 = v46[0];
    v46[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    v11 += 152;
  }
  while (v11 < v13);
  unint64_t v11 = v40;
  unsigned int v12 = HIDWORD(v41);
LABEL_35:
  unint64_t v40 = 0;
  unint64_t v36 = v11;
  unsigned int v25 = v41;
  uint64_t v41 = 0;
  unint64_t v37 = __PAIR64__(v12, v25);
  WTF::String::isolatedCopy();
  uint64_t v26 = *a5;
  *a5 = 0;
  *((void *)&v38 + 1) = v26;
  uint64_t v27 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v27 = &unk_1EE9DF670;
  *(_OWORD *)(v27 + 8) = v34;
  *(void *)(v27 + 24) = v35;
  uint64_t v28 = *((void *)&v35 + 1);
  long long v34 = 0u;
  long long v35 = 0u;
  *(void *)(v27 + 32) = v28;
  unint64_t v29 = v36;
  unint64_t v36 = 0;
  *(void *)(v27 + 40) = v29;
  unint64_t v30 = v37;
  unint64_t v37 = 0;
  *(void *)(v27 + 48) = v30;
  *(void *)(v27 + 56) = v38;
  uint64_t v31 = *((void *)&v38 + 1);
  long long v38 = 0u;
  *(void *)(v27 + 64) = v31;
  v46[0] = (WTF::StringImpl *)v27;
  MEMORY[0x19972E4D0](v10, v46);
  unsigned int v33 = v46[0];
  v46[0] = 0;
  if (v33) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v33 + 8))(v33);
  }
  API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0((uint64_t *)&v34, v32);
LABEL_38:
  if (v42 != -1) {
    ((void (*)(WTF::StringImpl **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions20ContentExtensionRuleELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v42])(v46, &v40);
  }
}

uint64_t *API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  uint64_t v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *a1;
  *a1 = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  return a1;
}

WTF::StringImpl *API::ContentRuleListStore::removeContentRuleList(uint64_t a1, const WTF::String *a2, const WTF::String *a3)
{
  API::constructedPath((API *)(a1 + 16), a2, a3);
  uint64_t v5 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v8 = v5;
  API::ContentRuleListStore::removeContentRuleListFile(a1, (uint64_t)&v9, &v8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  unint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void API::ContentRuleListStore::removeContentRuleListFile(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::String::isolatedCopy();
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v10 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v7 = &unk_1EE9DF770;
  v7[1] = a1;
  _OWORD v7[2] = v9;
  unint64_t v11 = v7;
  v7[3] = v10;
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &v11);
  uint64_t v8 = v11;
  unint64_t v11 = 0;
  if (v8) {
    (*(void (**)(void *))(*v8 + 8))(v8);
  }
}

uint64_t API::ContentRuleListStore::synchronousRemoveAllContentRuleLists(API::ContentRuleListStore *this, const WTF::String *a2)
{
  WTF::FileSystemImpl::listDirectory(&v9, (API::ContentRuleListStore *)((char *)this + 16), a2);
  if (v10)
  {
    uint64_t v3 = v9;
    uint64_t v4 = 8 * v10;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v8, v5);
      uint64_t v6 = v8;
      uint64_t v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v2);
}

WTF::StringImpl *API::ContentRuleListStore::invalidateContentRuleListVersion(API::ContentRuleListStore *this, const WTF::String *a2, const WTF::String *a3)
{
  API::constructedPath((API::ContentRuleListStore *)((char *)this + 16), a2, a3);
  int v4 = WTF::FileSystemImpl::openFile();
  unint64_t result = v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v4;
  if (v4 != -1)
  {
    WTF::FileSystemImpl::writeToFile();
    return (WTF::StringImpl *)WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v8, v6);
  }
  return result;
}

uint64_t API::ContentRuleListStore::getContentRuleListSource(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  API::constructedPath((API *)(a1 + 16), a2, v7);
  WTF::String::isolatedCopy();
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v15 = v8;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v9 = &unk_1EE9DF7C0;
  v9[1] = a1;
  v9[2] = v14;
  __int16 v16 = v9;
  v9[3] = v15;
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, &v16);
  unint64_t v11 = v16;
  __int16 v16 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t result = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      return WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

API::ContentWorld *API::ContentWorld::ContentWorld(API::ContentWorld *this, const WTF::String *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EE9DF310;
  int v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = v4;
  if (atomic_load_explicit((atomic_ullong *volatile)&API::ContentWorld::ContentWorld(WTF::String const&)::once, memory_order_acquire) != -1)
  {
    uint64_t v26 = &v24;
    unsigned int v25 = &v26;
    std::__call_once(&API::ContentWorld::ContentWorld(WTF::String const&)::once, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<API::ContentWorld::ContentWorld(WTF::String const&)::$_0 &&>>);
  }
  *((void *)this + 3) = WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  {
    uint64_t v5 = API::sharedWorldIdentifierMap(void)::sharedMap;
    if (API::sharedWorldIdentifierMap(void)::sharedMap)
    {
LABEL_8:
      int v6 = *(_DWORD *)(v5 - 8);
      goto LABEL_9;
    }
  }
  else
  {
    API::sharedWorldIdentifierMap(void)::sharedMap = 0;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v5 = API::sharedWorldIdentifierMap(void)::sharedMap;
  if (API::sharedWorldIdentifierMap(void)::sharedMap) {
    goto LABEL_8;
  }
  int v6 = 0;
LABEL_9:
  uint64_t v7 = *((void *)this + 3);
  unint64_t v8 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v6 & ((v10 >> 31) ^ v10);
  unsigned int v12 = (void *)(v5 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_17:
    void *v12 = v7;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 4, (uint64_t)this);
    char v17 = (atomic_uint *)*((void *)this + 2);
    atomic_fetch_add(v17, 1u);
    uint64_t v18 = (unsigned int *)v12[1];
    v12[1] = v17;
    if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v16);
    }
    if (API::sharedWorldIdentifierMap(void)::sharedMap) {
      int v19 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) = v19;
    if (API::sharedWorldIdentifierMap(void)::sharedMap) {
      int v20 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 16) + v20);
    unint64_t v22 = *(unsigned int *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21) {
        return this;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      return this;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
    return this;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != v7)
  {
    if (v13 == -1) {
      uint64_t v14 = v12;
    }
    unsigned int v11 = (v11 + v15) & v6;
    unsigned int v12 = (void *)(v5 + 16 * v11);
    uint64_t v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        void *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(v5 - 16);
        uint64_t v7 = *((void *)this + 3);
        unsigned int v12 = v14;
      }
      goto LABEL_17;
    }
  }
  return this;
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

unsigned int *API::ContentWorld::sharedWorldWithName@<X0>(WTF::StringImpl **this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t *a3@<X8>)
{
  if (byte_1EB359D51)
  {
    uint64_t v6 = qword_1EB359D60;
    if (qword_1EB359D60) {
      goto LABEL_4;
    }
  }
  else
  {
    qword_1EB359D60 = 0;
    byte_1EB359D51 = 1;
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
  uint64_t v6 = qword_1EB359D60;
  if (!qword_1EB359D60)
  {
    int v7 = 0;
    goto LABEL_5;
  }
LABEL_4:
  int v7 = *(_DWORD *)(v6 - 8);
LABEL_5:
  unsigned int v8 = *((_DWORD *)*this + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*this);
  }
  unint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v12 = v9 & v7;
    uint64_t v13 = (uint64_t *)(v6 + 16 * v12);
    uint64_t v14 = (WTF *)*v13;
    if (*v13 == -1)
    {
      unint64_t v10 = (uint64_t *)(v6 + 16 * v12);
      goto LABEL_14;
    }
    if (!v14) {
      break;
    }
    if (WTF::equal(v14, *this, a2))
    {
      uint64_t v19 = *(void *)(*(void *)(v6 + 16 * v12 + 8) + 8);
      uint64_t result = (unsigned int *)CFRetain(*(CFTypeRef *)(v19 + 8));
      goto LABEL_27;
    }
LABEL_14:
    unsigned int v9 = i + v12;
  }
  if (v10)
  {
    *unint64_t v10 = 0;
    v10[1] = 0;
    --*(_DWORD *)(qword_1EB359D60 - 16);
    uint64_t v13 = v10;
  }
  WTF::String::operator=(v13, this);
  uint64_t v19 = API::Object::newObject(0x38uLL, 50);
  int v15 = API::ContentWorld::ContentWorld((API::ContentWorld *)v19, (const WTF::String *)this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v15 + 4, v19);
  char v17 = *(atomic_uint **)(v19 + 16);
  atomic_fetch_add(v17, 1u);
  uint64_t result = (unsigned int *)v13[1];
  v13[1] = (uint64_t)v17;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v16);
  }
  if (qword_1EB359D60) {
    int v18 = *(_DWORD *)(qword_1EB359D60 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(qword_1EB359D60 - 12) = v18;
  if (qword_1EB359D60) {
    int v21 = *(_DWORD *)(qword_1EB359D60 - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(qword_1EB359D60 - 16) + v21);
  unint64_t v23 = *(unsigned int *)(qword_1EB359D60 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22) {
LABEL_26:
    }
      uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand();
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_26;
  }
LABEL_27:
  *a3 = v19;
  return result;
}

WebKit *API::ContentWorld::pageContentWorld(API::ContentWorld *this)
{
    return (WebKit *)API::ContentWorld::pageContentWorld(void)::world;
  unint64_t v2 = (WebKit *)API::Object::newObject(0x38uLL, 50);
  {
    uint64_t v3 = WebKit::pageContentWorldIdentifier(void)::identifier;
  }
  else
  {
    uint64_t v3 = 1;
    WebKit::pageContentWorldIdentifier(void)::identifier = 1;
  }
  int v4 = v2;
  *(void *)unint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  uint64_t result = v4;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = v3;
  *(void *)int v4 = &unk_1EE9DF310;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  API::ContentWorld::pageContentWorld(void)::world = (uint64_t)v4;
  return result;
}

API::ContentWorld *API::ContentWorld::defaultClientWorld(API::ContentWorld *this)
{
    return (API::ContentWorld *)API::ContentWorld::defaultClientWorld(void)::world;
  unint64_t v2 = (API::ContentWorld *)API::Object::newObject(0x38uLL, 50);
  uint64_t v3 = 0;
  uint64_t result = API::ContentWorld::ContentWorld(v2, (const WTF::String *)&v3);
  API::ContentWorld::defaultClientWorld(void)::world = (uint64_t)result;
  return result;
}

void API::ContentWorld::~ContentWorld(API::ContentWorld *this, void *a2, const WTF::StringImpl *a3)
{
  {
    if (!API::sharedWorldIdentifierMap(void)::sharedMap) {
      goto LABEL_10;
    }
    uint64_t v4 = *((void *)this + 3);
    unsigned int v5 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 8);
    unint64_t v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
    uint64_t v10 = *(void *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v9);
    if (v10 != v4)
    {
      int v11 = 1;
      while (v10)
      {
        uint64_t v9 = (v9 + v11) & v5;
        uint64_t v10 = *(void *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v9);
        ++v11;
        if (v10 == v4) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = *(unsigned int *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4);
    }
LABEL_9:
    if (v9 != *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4))
    {
      int v18 = (void *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v9);
      uint64_t v12 = (unsigned int *)v18[1];
      *int v18 = -1;
      v18[1] = 0;
      ++*(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 16);
      if (API::sharedWorldIdentifierMap(void)::sharedMap) {
        int v19 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) = v19;
      if (API::sharedWorldIdentifierMap(void)::sharedMap)
      {
        unsigned int v27 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4);
        if (6 * *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) < v27 && v27 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v27 >> 1);
        }
      }
    }
    else
    {
LABEL_10:
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    API::sharedWorldIdentifierMap(void)::sharedMap = 0;
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 4);
  if (v13)
  {
    if ((byte_1EB359D51 & 1) == 0)
    {
      qword_1EB359D60 = 0;
      byte_1EB359D51 = 1;
      goto LABEL_55;
    }
    uint64_t v14 = qword_1EB359D60;
    if (qword_1EB359D60)
    {
      unsigned int v15 = *(_DWORD *)(qword_1EB359D60 - 8);
      unsigned int v16 = *((_DWORD *)v13 + 4);
      int v17 = v16 >= 0x100 ? v16 >> 8 : WTF::StringImpl::hashSlowCase(v13);
      for (i = 0; ; int v17 = i + v21)
      {
        uint64_t v21 = v17 & v15;
        uint64_t v22 = *(WTF **)(v14 + 16 * v21);
        if (v22 != (WTF *)-1)
        {
          if (!v22)
          {
            uint64_t v23 = qword_1EB359D60;
            if (!qword_1EB359D60) {
              goto LABEL_55;
            }
            uint64_t v24 = qword_1EB359D60 + 16 * *(unsigned int *)(qword_1EB359D60 - 4);
            goto LABEL_27;
          }
          if (WTF::equal(v22, *((const WTF::StringImpl **)this + 4), a3)) {
            break;
          }
        }
        ++i;
      }
      uint64_t v24 = v14 + 16 * v21;
      uint64_t v23 = qword_1EB359D60;
      if (qword_1EB359D60)
      {
LABEL_27:
        char v25 = 0;
        uint64_t v26 = v23 + 16 * *(unsigned int *)(v23 - 4);
        goto LABEL_37;
      }
      uint64_t v26 = 0;
      char v25 = 1;
LABEL_37:
      if (v26 != v24)
      {
        unint64_t v29 = *(unsigned int **)(v24 + 8);
        if (v29) {
          *(void *)(v24 + 8) = 0;
        }
        if (v25)
        {
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v30 = v23 + 16 * *(unsigned int *)(v23 - 4);
          if (v30 == v24)
          {
LABEL_52:
            if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, a2);
            }
            goto LABEL_55;
          }
        }
        if (v30 != v24)
        {
          WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v24, (WTF::StringImpl *)a2);
          uint64_t v31 = *(unsigned int **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, a2);
          }
          uint64_t v32 = qword_1EB359D60;
          ++*(_DWORD *)(qword_1EB359D60 - 16);
          if (v32) {
            int v33 = *(_DWORD *)(v32 - 12) - 1;
          }
          else {
            int v33 = -1;
          }
          *(_DWORD *)(v32 - 12) = v33;
          if (qword_1EB359D60)
          {
            unsigned int v34 = *(_DWORD *)(qword_1EB359D60 - 4);
            if (6 * *(_DWORD *)(qword_1EB359D60 - 12) < v34 && v34 >= 9) {
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v34 >> 1);
            }
          }
        }
        goto LABEL_52;
      }
    }
  }
LABEL_55:
  long long v35 = (unsigned int ***)((char *)this + 40);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 5, &v50);
  uint64_t v36 = *((void *)this + 5);
  if (v36)
  {
    uint64_t v37 = *(unsigned int *)(v36 - 4);
    uint64_t v38 = v36 + 8 * v37;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v37 = 0;
  }
  char v45 = (char *)this + 40;
  uint64_t v46 = v38;
  uint64_t v47 = v38;
  uint64_t v48 = v38;
  uint64_t v49 = v36 + 8 * v37;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v45);
  while (v51 != v46)
  {
    uint64_t v40 = *(void *)(*(void *)v51 + 8);
    if (v40) {
      uint64_t v41 = (CFTypeRef *)(v40 - 16);
    }
    else {
      uint64_t v41 = 0;
    }
    CFRetain(v41[1]);
    WebKit::WebUserContentControllerProxy::contentWorldDestroyed((WebKit::WebUserContentControllerProxy *)v41, this);
    if (v40) {
      CFRelease(*(CFTypeRef *)(v40 - 8));
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v50);
  }
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v39);
  }
  if (*v35) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v35, v39);
  }
  int v42 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v39);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  uint64_t v43 = *((void *)this + 2);
  if (v43)
  {
    *(void *)(v43 + 8) = 0;
    uint64_t v44 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v44 && atomic_fetch_add((atomic_uint *volatile)v44, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, v39);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  API::ContentWorld::~ContentWorld(this, a2, a3);

  JUMPOUT(0x199740C10);
}

API::ContextMenuElementInfo *API::ContextMenuElementInfo::ContextMenuElementInfo(API::ContextMenuElementInfo *this, const WebKit::InteractionInformationAtPosition *a2, NSDictionary *a3)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9DF338;
  WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((API::ContextMenuElementInfo *)((char *)this + 16), a2);
  *((void *)this + 82) = a3;
  if (a3) {
    CFRetain(a3);
  }
  return this;
}

void API::DataTask::~DataTask(WebKit::ProcessThrottlerActivity **this)
{
  *this = (WebKit::ProcessThrottlerActivity *)&unk_1EE9DF360;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 13, 0);
  uint64_t v3 = this[12];
  this[12] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1) {
      (*(void (**)(WebKit::ProcessThrottlerActivity *))(*(void *)v3 + 8))(v3);
    }
    else {
      --*((_DWORD *)v3 + 2);
    }
  }
  uint64_t v4 = (unsigned int *)this[9];
  this[9] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v2);
  }
  unsigned int v5 = this[4];
  this[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (unsigned int *)this[3];
  this[3] = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v2);
    }
  }
}

{
  uint64_t vars8;

  API::DataTask::~DataTask(this);

  JUMPOUT(0x199740C10);
}

WebKit::ProcessThrottlerActivity *API::DataTask::cancel(API::DataTask *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*((unsigned char *)this + 88)) {
        WebKit::NetworkProcessProxy::cancelDataTask(v3, *((void *)this + 2), *((void *)this + 10));
      }
    }
  }

  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 13, 0);
}

WTF::StringImpl *API::DataTask::networkProcessCrashed(WebKit::ProcessThrottlerActivity **this)
{
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 13, 0);
  uint64_t v2 = this[12];
  WebCore::createInternalError();
  (*(void (**)(WebKit::ProcessThrottlerActivity *, WebKit::ProcessThrottlerActivity **, WTF::StringImpl **))(*(void *)v2 + 48))(v2, this, &v8);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  unsigned int v5 = v10;
  uint64_t v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t API::DataTask::DataTask(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DF360;
  *(void *)(a1 + 16) = a2;
  uint64_t v10 = *a3;
  *a3 = 0;
  *(void *)(a1 + 24) = v10;
  WTF::URL::URL(a1 + 32, a4);
  uint64_t v11 = *(void *)(a1 + 24);
  if (!v11)
  {
    *(void *)(a1 + 72) = 0;
    unsigned int v15 = (unsigned char *)(a1 + 80);
LABEL_9:
    char v17 = 0;
    *unsigned int v15 = 0;
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12)
  {
    uint64_t v13 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v12 + 296));
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 8), v13);
    uint64_t v12 = *(void *)(v13 + 8);
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)v12, 1u);
    }
  }
  uint64_t v14 = *(void *)(a1 + 24);
  *(void *)(a1 + 72) = v12;
  unsigned int v15 = (unsigned char *)(a1 + 80);
  if (!v14) {
    goto LABEL_9;
  }
  uint64_t v16 = *(void *)(v14 + 8);
  if (!v16) {
    goto LABEL_9;
  }
  *(void *)unsigned int v15 = *(void *)(*(void *)(v16 + 296) + 24);
  char v17 = 1;
LABEL_10:
  *(unsigned char *)(a1 + 88) = v17;
  uint64_t v18 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v18 + 8) = 1;
  *(void *)uint64_t v18 = &unk_1EE9DF510;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v18;
  uint64_t v19 = *(void *)(a1 + 72);
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 8);
    if (v20)
    {
      uint64_t v21 = (unsigned int *)(v20 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v20 + 16), 1u);
      uint64_t v22 = v20 + 200;
      uint64_t v23 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v23, v22, "WKDataTask", 11, a5, 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 104), v23);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v21);
    }
  }
  return a1;
}

void API::DebuggableInfo::~DebuggableInfo(API::DebuggableInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  CFTypeRef v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

{
  uint64_t vars8;

  API::DebuggableInfo::~DebuggableInfo(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)47>::type()
{
  return 47;
}

uint64_t API::ObjectImpl<(API::Object::Type)48>::type()
{
  return 48;
}

uint64_t API::ObjectImpl<(API::Object::Type)49>::type()
{
  return 49;
}

uint64_t API::ObjectImpl<(API::Object::Type)50>::type()
{
  return 50;
}

uint64_t API::ObjectImpl<(API::Object::Type)54>::type()
{
  return 54;
}

uint64_t API::ObjectImpl<(API::Object::Type)55>::type()
{
  return 55;
}

void API::ContextMenuElementInfo::~ContextMenuElementInfo(API::ContextMenuElementInfo *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((API::ContextMenuElementInfo *)((char *)this + 16), a2);
}

{
  const void *v3;
  uint64_t vars8;

  uint64_t v3 = (const void *)*((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((API::ContextMenuElementInfo *)((char *)this + 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)51>::type()
{
  return 51;
}

uint64_t API::ObjectImpl<(API::Object::Type)57>::type()
{
  return 57;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17ContentExtensions20ContentExtensionRuleELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    CFTypeRef v4 = *(WTF **)a1;
    uint64_t v5 = 152 * v3;
    do
    {
      uint64_t v6 = *((unsigned int *)v4 + 36);
      if (v6 != -1) {
        ((void (*)(char *, char *))off_1EE9DF3D8[v6])(&v10, (char *)v4 + 32);
      }
      *((_DWORD *)v4 + 36) = -1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + 16, a2);
      unint64_t v7 = *(WTF::StringImpl **)v4;
      *(void *)CFTypeRef v4 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      CFTypeRef v4 = (WTF *)((char *)v4 + 152);
      v5 -= 152;
    }
    while (v5);
  }
  unint64_t v8 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 24, a2);

  return WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction::ModifyHeaderInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, v3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 104);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF430[v3])(&v5, a2 + 8);
  }
  *(_DWORD *)(a2 + 104) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 112);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF3D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 112);
  if (v2 != -1)
  {
    if (v2 == 1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF3D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 1;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 112);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9DF3D8[v5])(&v7, v4);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 112) = 2;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 112);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9DF3D8[v5])(&v7, v4);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 112) = 3;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 112);
  if (v2 != -1)
  {
    if (v2 == 4) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF3D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 112);
  if (v2 != -1)
  {
    if (v2 == 5) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF3D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 112) = 5;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 112);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 6)
  {
    ((void (*)(char *, uint64_t))off_1EE9DF3D8[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 112) = -1;
    *(unsigned char *)uint64_t v4 = *(unsigned char *)a3;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    uint64_t v17 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(v4 + 8) = v17;
    LODWORD(v17) = *(_DWORD *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 16) = v17;
    LODWORD(v17) = *(_DWORD *)(a3 + 20);
    *(_DWORD *)(a3 + 20) = 0;
    *(_DWORD *)(v4 + 20) = v17;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    uint64_t v18 = *(void *)(a3 + 24);
    *(void *)(a3 + 24) = 0;
    *(void *)(v4 + 24) = v18;
    LODWORD(v18) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = 0;
    *(_DWORD *)(v4 + 32) = v18;
    double result = *(double *)(a3 + 36);
    *(_DWORD *)(a3 + 36) = 0;
    *(double *)(v4 + 36) = result;
    *(_DWORD *)(v4 + 112) = 6;
    return result;
  }
  *(unsigned char *)a2 = *(unsigned char *)a3;
  char v7 = (uint64_t *)(a2 + 8);
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  if (v8)
  {
    uint64_t v9 = *v7;
    uint64_t v10 = 24 * v8;
    do
    {
      uint64_t v11 = *(unsigned int *)(v9 + 16);
      if (v11 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9DF418[v11])(&v19, v9);
      }
      *(_DWORD *)(v9 + 16) = -1;
      v9 += 24;
      v10 -= 24;
    }
    while (v10);
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v7, (_DWORD *)(a3 + 8));
  uint64_t v12 = *(unsigned int *)(a2 + 36);
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 24);
    uint64_t v14 = 24 * v12;
    do
    {
      uint64_t v15 = *(unsigned int *)(v13 + 16);
      if (v15 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9DF418[v15])(&v20, v13);
      }
      *(_DWORD *)(v13 + 16) = -1;
      v13 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2 + 24, (_DWORD *)(a3 + 24));
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions15BlockLoadActionENS9_18BlockCookiesActionENS9_28CSSDisplayNoneSelectorActionENS9_12NotifyActionENS9_25IgnorePreviousRulesActionENS9_15MakeHTTPSActionENS9_19ModifyHeadersActionENS9_14RedirectActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 112);
  if (v5 == -1)
  {
LABEL_7:
    *(_DWORD *)(v4 + 112) = -1;
    *(unsigned char *)uint64_t v4 = *(unsigned char *)a3;
    *(unsigned char *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 104) = -1;
    uint64_t v10 = *(unsigned int *)(a3 + 104);
    if (v10 != -1)
    {
      double result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9DF4E0[v10])(&v14, v4 + 8, a3 + 8);
      *(_DWORD *)(v4 + 104) = v10;
    }
    *(_DWORD *)(v4 + 112) = 7;
    return result;
  }
  if (v5 != 7)
  {
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF3D8[v5])(&v13, v4);
    goto LABEL_7;
  }
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v7 = a2 + 8;
  uint64_t v8 = *(unsigned int *)(a2 + 104);
  uint64_t v9 = *(unsigned int *)(a3 + 104);
  if (v8 == -1)
  {
    if (v9 == -1) {
      return result;
    }
  }
  else if (v9 == -1)
  {
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE9DF430[v8])(&v12, v7);
    *(_DWORD *)(a2 + 104) = -1;
    return result;
  }
  uint64_t v11 = v7;
  return ((uint64_t (*)(uint64_t *))off_1EE9DF4A0[v9])(&v11);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 96);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    double result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9DF430[v5])(&v7, v4);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 96) = 0;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 96);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    double result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9DF430[v5])(&v9, v4);
LABEL_7:
    uint64_t v7 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v7;
    uint64_t v8 = a3[1];
    a3[1] = 0;
    *(void *)(v4 + 8) = v8;
    *(_DWORD *)(v4 + 96) = 1;
    return result;
  }
  WTF::String::operator=(a2, a3);

  return WTF::String::operator=(a2 + 1, a3 + 1);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 96);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1EE9DF430[v5])(&v13, v4);
LABEL_7:
    *(_DWORD *)(v4 + 96) = -1;
    double result = (uint64_t *)std::__variant_detail::__alt<2ul,WebCore::ContentExtensions::RedirectAction::URLTransformAction>::__alt[abi:sn180100]<WebCore::ContentExtensions::RedirectAction::URLTransformAction>(v4, (uint64_t *)a3);
    *(_DWORD *)(v4 + 96) = 2;
    return result;
  }
  WTF::String::operator=((uint64_t *)a2, (uint64_t *)a3);
  WTF::String::operator=((uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
  WTF::String::operator=((uint64_t *)(a2 + 16), (uint64_t *)(a3 + 16));
  WTF::String::operator=((uint64_t *)(a2 + 24), (uint64_t *)(a3 + 24));
  int v7 = *(_DWORD *)(a3 + 32);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a3 + 36);
  *(_DWORD *)(a2 + 32) = v7;
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  uint64_t v9 = *(unsigned int *)(a3 + 72);
  if (v8 == -1)
  {
    if (v9 == -1) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v11 = a2 + 40;
    ((void (*)(uint64_t *))off_1EE9DF4C0[v9])(&v11);
    goto LABEL_10;
  }
  if (v9 != -1) {
    goto LABEL_9;
  }
  ((void (*)(char *, uint64_t))off_1EE9DF450[v8])(&v12, a2 + 40);
  *(_DWORD *)(a2 + 72) = -1;
LABEL_10:
  WTF::String::operator=((uint64_t *)(a2 + 80), (uint64_t *)(a3 + 80));

  return WTF::String::operator=((uint64_t *)(a2 + 88), (uint64_t *)(a3 + 88));
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 96);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    double result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9DF430[v5])(&v7, v4);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 96) = 3;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 32);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    double result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9DF450[v5])(&v7, v4);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v6;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOST_EEEDcSL_DpT0_(WTF *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_13;
  }
  if (v5 != 1)
  {
    double result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1EE9DF450[v5])(&v13, v4);
LABEL_13:
    *(_DWORD *)(v4 + 32) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v11 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v11;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    uint64_t v12 = a3[2];
    a3[2] = 0;
    *(void *)(v4 + 16) = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = 0;
    *(_DWORD *)(v4 + 24) = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = 0;
    *(_DWORD *)(v4 + 28) = v12;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v7) {
    WTF::VectorDestructor<true,WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(void *)a2 + 24 * v7));
  }
  uint64_t v8 = *(WTF **)a2;
  if (*(void *)a2)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    WTF::fastFree(v8, (void *)a2);
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)a2 = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v9;
  uint64_t v10 = *(unsigned int *)(a2 + 28);
  if (v10) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a2 + 16), (WTF::StringImpl *)(*(void *)(a2 + 16) + 8 * v10));
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2 + 16, (_DWORD *)a3 + 4);
}

uint64_t std::__variant_detail::__alt<2ul,WebCore::ContentExtensions::RedirectAction::URLTransformAction>::__alt[abi:sn180100]<WebCore::ContentExtensions::RedirectAction::URLTransformAction>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 8);
  __int16 v8 = *((_WORD *)a2 + 18);
  *(unsigned char *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v9 = *((unsigned int *)a2 + 18);
  if (v9 != -1)
  {
    ((void (*)(char *))off_1EE9DF4D0[v9])(&v13);
    *(_DWORD *)(a1 + 72) = v9;
  }
  uint64_t v10 = a2[10];
  a2[10] = 0;
  *(void *)(a1 + 80) = v10;
  uint64_t v11 = a2[11];
  a2[11] = 0;
  *(void *)(a1 + 88) = v11;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<2ul,WebCore::ContentExtensions::RedirectAction::URLTransformAction>::__alt[abi:sn180100]<WebCore::ContentExtensions::RedirectAction::URLTransformAction>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF::StringImpl *API::DataTaskClient::didReceiveChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v10);
  CFTypeRef cf = 0;
  uint64_t v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, 3, &v10);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  __int16 v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  double result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t API::DataTaskClient::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t API::DataTaskClient::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF558;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

NSObject *API::getContentRuleListSourceFromMappedFile(NSObject *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)a2 <= 8u || !*(void *)(a2 + 8)) {
    goto LABEL_20;
  }
  if (*(_DWORD *)a2 >= 0xCu) {
    unint64_t v4 = 64;
  }
  else {
    unint64_t v4 = 48;
  }
  uint64_t v5 = (WebKit::NetworkCache::Data *)(a2 + 72);
  double result = WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)(a2 + 72));
  if (v6 <= v4) {
    goto LABEL_21;
  }
  int isa_low = LOBYTE(result[v4 / 8].isa);
  unint64_t v8 = v4 | 1;
  uint64_t v9 = *(void *)(a2 + 8);
  unint64_t v10 = v9 - 1;
  if (isa_low)
  {
    WebKit::NetworkCache::Data::span(v5);
    if (v11 >= v8 && (!v9 || v11 - v8 >= v10))
    {
LABEL_11:
      return WTF::String::String();
    }
LABEL_21:
    __break(1u);
    goto LABEL_11;
  }
  if (v10)
  {
LABEL_20:
    v2->Class isa = 0;
    return result;
  }
  WebKit::NetworkCache::Data::span(v5);
  if (v12 < v8 || v12 - v8 < v10) {
    goto LABEL_21;
  }

  return WTF::String::String();
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DF580;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DF580;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 16);
  uint64_t v3 = 0;
  if ((_MergedGlobals_99 & 1) == 0)
  {
    qword_1EB359D58 = (uint64_t)&unk_1EE9DF810;
    _MergedGlobals_99 = 1;
  }
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(v1, &v3);
  if (v3)
  {
    uint64_t v2 = *(const void **)(v3 + 8);
    CFRelease(v2);
  }
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF5A8;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF5A8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[4];
  a1[4] = 0;
  uint64_t v5 = v2;
  API::ContentRuleListStore::compileContentRuleList(v1, (const WTF::String *)(a1 + 3), (const WTF::String *)(a1 + 2), &v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v5 + 8);
    return v4();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#3},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DF5D0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#3},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DF5D0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#3},void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 16);
  uint64_t v3 = 0;
  if ((_MergedGlobals_99 & 1) == 0)
  {
    qword_1EB359D58 = (uint64_t)&unk_1EE9DF810;
    _MergedGlobals_99 = 1;
  }
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(v1, &v3);
  if (v3)
  {
    uint64_t v2 = *(const void **)(v3 + 8);
    CFRelease(v2);
  }
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#4},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF5F8;
  uint64_t v3 = a1[16];
  a1[16] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4) {
    os_release(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF620;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF620;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0,void>::call(void *a1, const WTF::String *a2)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  WTF::FileSystemImpl::listDirectory((uint64_t *)&v26, (WTF::FileSystemImpl *)(a1 + 2), a2);
  if (HIDWORD(v27))
  {
    uint64_t v4 = v26;
    uint64_t v5 = 8 * HIDWORD(v27);
    do
    {
      if (*v4 && WTF::StringImpl::startsWith())
      {
        if (*v4)
        {
          WTF::StringImpl::substring(*v4);
          uint64_t v6 = v32;
        }
        else
        {
          uint64_t v6 = 0;
        }
        unint64_t v29 = v6;
        WTF::FileSystemImpl::decodeFromFilename((uint64_t *)&v32, (WTF::FileSystemImpl *)&v29, v3);
        LODWORD(v7) = HIDWORD(v31);
        if (HIDWORD(v31) == v31)
        {
          unint64_t v11 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v32);
          uint64_t v7 = HIDWORD(v31);
          uint64_t v12 = v30;
          uint64_t v13 = *v11;
          *unint64_t v11 = 0;
          *(void *)(v12 + 8 * v7) = v13;
        }
        else
        {
          unint64_t v8 = v32;
          uint64_t v32 = 0;
          *(void *)(v30 + 8 * HIDWORD(v31)) = v8;
        }
        HIDWORD(v31) = v7 + 1;
        uint64_t v9 = v32;
        uint64_t v32 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v3);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        unint64_t v10 = v29;
        unint64_t v29 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v3);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  char v14 = (WTF::RunLoop *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v3);
  WTF::RunLoop::main(v14);
  uint64_t v15 = a1[1];
  a1[1] = 0;
  uint64_t v16 = a1[3];
  a1[3] = 0;
  uint64_t v17 = v30;
  uint64_t v30 = 0;
  uint64_t v18 = v31;
  uint64_t v31 = 0;
  char v19 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(void *)char v19 = &unk_1EE9DF648;
  *((void *)v19 + 1) = v15;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  *((void *)v19 + 2) = v16;
  *((void *)v19 + 3) = v17;
  v28[0] = 0;
  v28[1] = 0;
  *((void *)v19 + 4) = v18;
  uint64_t v32 = v19;
  WTF::RunLoop::dispatch();
  char v21 = v32;
  uint64_t v32 = 0;
  if (v21) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v21 + 8))(v21);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v20);
  uint64_t v23 = v27;
  uint64_t v27 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = (uint64_t)v26;
  uint64_t v26 = 0;
  if (v24) {
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v22);
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DF648;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DF648;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getAvailableContentRuleListIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t *a1)
{
  v4[0] = a1[3];
  uint64_t v1 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v4[1] = v1;
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a1 + 2, v4);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF670;
  API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  *a1 = (uint64_t)&unk_1EE9DF670;
  API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::~$_0(a1 + 1, a2);

  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::call(void *a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = &v52;
  WTF::FileSystemImpl::openTemporaryFile();
  if (v53 == -1)
  {
    WTFLogAlways();
LABEL_9:
    if ((_MergedGlobals_99 & 1) == 0)
    {
      qword_1EB359D58 = (uint64_t)&unk_1EE9DF810;
      _MergedGlobals_99 = 1;
    }
    *(void *)&long long v27 = 3;
    *((void *)&v27 + 1) = &qword_1EB359D58;
    goto LABEL_12;
  }
  uint64_t v2 = &v53;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  long long v56 = v3;
  long long v57 = v3;
  long long v54 = v3;
  long long v55 = v3;
  if (WTF::FileSystemImpl::writeToFile() == -1) {
    goto LABEL_8;
  }
  *(_DWORD *)uint64_t v50 = 17;
  memset(&v50[8], 0, 44);
  *(void *)&v50[56] = 0;
  uint64_t v51 = 0;
  *(void *)&long long v46 = &unk_1EE9DF698;
  DWORD2(v46) = v53;
  uint64_t v47 = v50;
  long long v48 = 0u;
  memset(v49, 0, sizeof(v49));
  uint64_t v5 = WebCore::ContentExtensions::compileRuleList();
  if (v5)
  {
    uint64_t v6 = v4;
    WTFLogAlways();
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v53, v7);
    *(void *)&long long v27 = v5;
    *((void *)&v27 + 1) = v6;
LABEL_12:
    int v10 = 1;
    int v35 = 1;
    goto LABEL_13;
  }
  if (v49[24])
  {
LABEL_8:
    WTFLogAlways();
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v53, v9);
    goto LABEL_9;
  }
  uint64_t v23 = 64;
  if (*(_DWORD *)v50 < 0xCu) {
    uint64_t v23 = 48;
  }
  WebKit::NetworkCache::adoptAndMapFile((WebKit::NetworkCache *)v53, 0, vaddvq_s64(vaddq_s64(*(int64x2_t *)&v50[8], *(int64x2_t *)&v50[24])) + *(void *)&v50[40] + v23, (uint64_t)&object);
  if (!object
    || (uint64_t v2 = a1 + 2,
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)(a1 + 2), v24),
        (WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v52, (const WTF::String *)(a1 + 2), v25) & 1) == 0))
  {
    WTFLogAlways();
    goto LABEL_42;
  }
  if ((WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath((WTF::FileSystemImpl *)(a1 + 2), v26) & 1) == 0)
  {
LABEL_42:
    if ((_MergedGlobals_99 & 1) == 0)
    {
      qword_1EB359D58 = (uint64_t)&unk_1EE9DF810;
      _MergedGlobals_99 = 1;
    }
    *(void *)&long long v27 = 3;
    *((void *)&v27 + 1) = &qword_1EB359D58;
    int v10 = 1;
    int v35 = 1;
    goto LABEL_45;
  }
  long long v40 = *(_OWORD *)&v50[32];
  long long v41 = *(_OWORD *)&v50[48];
  uint64_t v42 = v51;
  long long v38 = *(_OWORD *)v50;
  long long v39 = *(_OWORD *)&v50[16];
  uint64_t v2 = object;
  if (object)
  {
    os_retain(object);
    long long v36 = v44;
    char v37 = v45;
    long long v29 = v40;
    long long v30 = v41;
    uint64_t v31 = v42;
    long long v27 = v38;
    long long v28 = v39;
    os_retain(v2);
    long long v33 = v36;
    char v34 = v37;
    os_release(v2);
  }
  else
  {
    long long v29 = *(_OWORD *)&v50[32];
    long long v30 = *(_OWORD *)&v50[48];
    uint64_t v31 = v51;
    long long v27 = *(_OWORD *)v50;
    long long v28 = *(_OWORD *)&v50[16];
    long long v33 = v44;
    char v34 = v45;
  }
  int v10 = 0;
  uint64_t v32 = v2;
  int v35 = 0;
LABEL_45:
  if (object) {
    os_release(object);
  }
LABEL_13:
  unint64_t v11 = v52;
  int8x16_t v52 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      unint64_t v11 = (WTF::StringImpl *)WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::RunLoop::main(v11);
  if (!v10)
  {
    uint64_t v17 = a1[1];
    a1[1] = 0;
    uint64_t v18 = a1[3];
    a1[3] = 0;
    *(_OWORD *)&v50[32] = v29;
    *(_OWORD *)&v50[48] = v30;
    uint64_t v51 = v31;
    *(_OWORD *)uint64_t v50 = v27;
    *(_OWORD *)&v50[16] = v28;
    if (v2) {
      os_retain(v2);
    }
    long long v46 = v33;
    LOBYTE(v47) = v34;
    uint64_t v19 = a1[8];
    a1[8] = 0;
    uint64_t v20 = WTF::fastMalloc((WTF *)0x88);
    *(void *)uint64_t v20 = &unk_1EE9DF738;
    *(void *)(v20 + 8) = v17;
    *(void *)(v20 + 16) = v18;
    long long v21 = *(_OWORD *)v50;
    *(_OWORD *)(v20 + 40) = *(_OWORD *)&v50[16];
    *(_OWORD *)(v20 + 56) = *(_OWORD *)&v50[32];
    *(_OWORD *)(v20 + 72) = *(_OWORD *)&v50[48];
    uint64_t v22 = v51;
    *(_OWORD *)(v20 + 24) = v21;
    *(void *)(v20 + 88) = v22;
    *(void *)(v20 + 96) = v2;
    if (v2) {
      os_retain(v2);
    }
    *(_OWORD *)(v20 + 104) = v46;
    *(unsigned char *)(v20 + 120) = (_BYTE)v47;
    *(void *)(v20 + 128) = v19;
    WTF::RunLoop::dispatch();
    *(void *)&long long v38 = 0;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      if (!v2)
      {
LABEL_28:
        int v16 = v35;
        if (v35 == -1) {
          return;
        }
        goto LABEL_29;
      }
    }
    else if (!v2)
    {
      goto LABEL_28;
    }
    os_release(v2);
    goto LABEL_28;
  }
  uint64_t v12 = a1[1];
  a1[1] = 0;
  *(_OWORD *)uint64_t v50 = v27;
  uint64_t v13 = a1[8];
  a1[8] = 0;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v14 = &unk_1EE9DF710;
  *(void *)(v14 + 8) = v12;
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v50;
  *(void *)(v14 + 32) = v13;
  *(void *)&long long v46 = v14;
  WTF::RunLoop::dispatch();
  uint64_t v15 = v46;
  *(void *)&long long v46 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  int v16 = 1;
LABEL_29:
  ((void (*)(unsigned char *, long long *))off_1EE9DF750[v16])(v50, &v27);
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::~CompilationClient()
{
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeSource(uint64_t a1, uint64_t *a2)
{
  if (*a2) {
    int v4 = (*(unsigned __int8 *)(*a2 + 16) >> 2) & 1;
  }
  else {
    LOBYTE(v4) = 1;
  }
  char buffer = v4;
  dispatch_data_t v5 = dispatch_data_create(&buffer, 1uLL, 0, 0);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  dispatch_data_t v12 = v5;
  char v15 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)&v12);
  if (v5) {
    os_release(v5);
  }
  ++*(void *)(a1 + 24);
  uint64_t v6 = *a2;
  if (*a2)
  {
    if ((*(unsigned char *)(v6 + 16) & 4) == 0)
    {
      dispatch_data_t v7 = dispatch_data_create(*(const void **)(v6 + 8), 2 * *(unsigned int *)(v6 + 4), 0, 0);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      dispatch_data_t v12 = v7;
      char v15 = 0;
      API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)&v12);
      if (v7) {
        os_release(v7);
      }
      uint64_t v8 = *a2;
      if (*a2) {
        uint64_t v8 = 2 * *(unsigned int *)(v8 + 4);
      }
      goto LABEL_16;
    }
    uint64_t v9 = *(const void **)(v6 + 8);
    size_t v10 = *(unsigned int *)(v6 + 4);
  }
  else
  {
    uint64_t v9 = 0;
    size_t v10 = 0;
  }
  dispatch_data_t v11 = dispatch_data_create(v9, v10, 0, 0);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  dispatch_data_t v12 = v11;
  char v15 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)&v12);
  if (v11) {
    os_release(v11);
  }
  uint64_t v8 = *a2;
  if (*a2) {
    uint64_t v8 = *(unsigned int *)(v8 + 4);
  }
LABEL_16:
  *(void *)(a1 + 24) += v8;
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeActions(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)(a1 + 32) += v3;
  dispatch_data_t v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[1] = 0;
  v5[2] = 0;
  v5[0] = v4;
  char v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
  {
    os_release(v4);
  }
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeURLFiltersBytecode(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)(a1 + 40) += v3;
  dispatch_data_t v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[1] = 0;
  v5[2] = 0;
  v5[0] = v4;
  char v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
  {
    os_release(v4);
  }
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeTopURLFiltersBytecode(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)(a1 + 48) += v3;
  dispatch_data_t v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[1] = 0;
  v5[2] = 0;
  v5[0] = v4;
  char v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
  {
    os_release(v4);
  }
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeFrameURLFiltersBytecode(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)(a1 + 56) += v3;
  dispatch_data_t v4 = dispatch_data_create(*(const void **)a2, v3, 0, 0);
  v5[1] = 0;
  v5[2] = 0;
  v5[0] = v4;
  char v6 = 0;
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(a1, (uint64_t)v5);
  if (v4)
  {
    os_release(v4);
  }
}

void API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](a1, a2, a3);
  dispatch_data_t v4 = *(unsigned int **)(v3 + 16);
  *(_OWORD *)(v4 + 2) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v4 + 6) = *(_OWORD *)(v3 + 40);
  *((void *)v4 + 5) = *(void *)(v3 + 56);
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&buffer);
  MEMORY[0x19972DD00](&buffer, *v4);
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  MEMORY[0x19972DD00](&buffer, v4[12]);
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  dispatch_data_t v5 = dispatch_data_create(buffer, size, 0, 0);
  v7[1] = 0;
  _OWORD v7[2] = 0;
  v7[0] = v5;
  char v8 = 0;
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&buffer);
  if (!*(unsigned char *)(v3 + 64) && WTF::FileSystemImpl::seekFile() == -1)
  {
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)(v3 + 8), v6);
    *(unsigned char *)(v3 + 64) = 1;
  }
  API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(v3, (uint64_t)v7);
  if (v5) {
    os_release(v5);
  }
}

uint64_t API::compiledToFile(WTF::String &&,WTF::Vector<WebCore::ContentExtensions::ContentExtensionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::String const&)::CompilationClient::writeToFile(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 64))
  {
    uint64_t v3 = result;
    dispatch_data_t v4 = (WTF::FileSystemImpl *)(result + 8);
    int v5 = *(_DWORD *)(result + 8);
    char v9 = 1;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v6 = &unk_1EE9DF6E8;
    *(_DWORD *)(v6 + 8) = v5;
    *(void *)(v6 + 16) = &v9;
    uint64_t v8 = v6;
    WebKit::NetworkCache::Data::apply(a2, (uint64_t)&v8);
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (!v9)
    {
      uint64_t result = WTF::FileSystemImpl::closeFile(v4, v7);
      *(unsigned char *)(v3 + 64) = 1;
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<API::writeDataToFile(WebKit::NetworkCache::Data const&,int)::$_0,BOOL,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  uint64_t v2 = WTF::FileSystemImpl::writeToFile();
  if (v2 == -1) {
    **(unsigned char **)(a1 + 16) = 0;
  }
  return v2 != -1;
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DF710;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DF710;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()((uint64_t *)(a1 + 32), &v2);
  if (v2)
  {
    uint64_t v1 = *(const void **)(v2 + 8);
    CFRelease(v1);
  }
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF738;
  uint64_t v3 = a1[16];
  a1[16] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4) {
    os_release(v4);
  }
  int v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF738;
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 12);
  if (v4) {
    os_release(v4);
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::compileContentRuleListFile(WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  API::createExtension(&v5, (uint64_t *)(a1 + 16), a1 + 24);
  uint64_t v2 = v5;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v4 = v2;
  std::system_category();
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()((uint64_t *)(a1 + 128), &v4);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v3 = *(const void **)(v2 + 8);

  CFRelease(v3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3API10MappedDataENS_10error_codeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 72);
  if (v2) {
    os_release(v2);
  }
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF770;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF770;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0,void>::call(void *a1, const WTF::String *a2)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  uint64_t v4 = (WTF::RunLoop *)WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)(a1 + 2), a2);
  if (v4)
  {
    uint64_t v5 = (WTF::RunLoop *)std::system_category();
    WTF::RunLoop::main(v5);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
    void *v6 = &unk_1EE9DF798;
    v6[1] = v2;
    v6[2] = v3;
    v6[3] = 0;
    _DWORD v6[4] = v5;
    char v9 = v6;
  }
  else
  {
    if ((_MergedGlobals_99 & 1) == 0)
    {
      qword_1EB359D58 = (uint64_t)&unk_1EE9DF810;
      _MergedGlobals_99 = 1;
    }
    WTF::RunLoop::main(v4);
    dispatch_data_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
    void *v7 = &unk_1EE9DF798;
    v7[1] = v2;
    _OWORD v7[2] = v3;
    void v7[3] = 4;
    _DWORD v7[4] = &qword_1EB359D58;
    char v9 = v7;
  }
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0::operator()(void)::{lambda(std::__1)#1}::operator()(std::__1)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DF798;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0::operator()(void)::{lambda(std::__1)#1}::operator()(std::__1)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DF798;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::removeContentRuleListFile(WTF::String &&,WTF::CompletionHandler<void ()(std::error_code)>)::$_0::operator()(void)::{lambda(std::__1)#1}::operator()(std::__1)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v1, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF7C0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF7C0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  a1[1] = 0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  uint64_t v9 = v1;
  uint64_t v10 = v2;
  API::openAndMapContentRuleList((API *)v6, (const WTF::String *)(a1 + 2));
  if (v8)
  {
    API::getContentRuleListSourceFromMappedFile(&v5, (uint64_t)v6);
    API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()((WTF::RunLoop *)&v9);
    uint64_t v4 = v5;
    uint64_t v5 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    if (v8 && object) {
      os_release(object);
    }
  }
  else
  {
    API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()((WTF::RunLoop *)&v9);
    uint64_t v5 = 0;
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  long long v2 = *(_OWORD *)a1;
  *(_OWORD *)a1 = 0u;
  long long v4 = v2;
  WTF::String::isolatedCopy();
  uint64_t v3 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v3 = &unk_1EE9DF7E8;
  *(_OWORD *)(v3 + 8) = v4;
  uint64_t v6 = v3;
  *(void *)(v3 + 24) = v5;
  WTF::RunLoop::dispatch();
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

void *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9DF7E8;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DF7E8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<API::ContentRuleListStore::getContentRuleListSource(WTF::String &&,WTF::CompletionHandler<void ()(WTF::String)>)::$_0::operator()(void)::{lambda(WTF::String &)#1}::operator()(WTF::String &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  long long v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  uint64_t v6 = v3;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(v2, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void API::contentRuleListStoreErrorCategory(void)::ContentRuleListStoreErrorCategory::~ContentRuleListStoreErrorCategory(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x199740C10);
}

const char *API::contentRuleListStoreErrorCategory(void)::ContentRuleListStoreErrorCategory::name()
{
  return "content extension store";
}

char **API::contentRuleListStoreErrorCategory(void)::ContentRuleListStoreErrorCategory::message@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      long long v2 = "Unspecified error during lookup.";
      goto LABEL_7;
    case 2:
      long long v2 = "Version of file does not match version of interpreter.";
      goto LABEL_7;
    case 3:
      long long v2 = "Unspecified error during compile.";
      goto LABEL_7;
    case 4:
      long long v2 = "Unspecified error during remove.";
LABEL_7:
      uint64_t result = std::string::basic_string[abi:sn180100]<0>((char **)a2, v2);
      break;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      break;
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  if (API::sharedWorldIdentifierMap(void)::sharedMap
    && (int v0 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4)) != 0)
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v0 << (6 * *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1)
{
  uint64_t v2 = API::sharedWorldIdentifierMap(void)::sharedMap;
  if (API::sharedWorldIdentifierMap(void)::sharedMap)
  {
    int v3 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 4);
    int v4 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  API::sharedWorldIdentifierMap(void)::sharedMap = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *uint64_t result = 0;
  *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    while (1)
    {
      char v8 = (uint64_t *)(v2 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (API::sharedWorldIdentifierMap(void)::sharedMap) {
            int v12 = *(_DWORD *)(API::sharedWorldIdentifierMap(void)::sharedMap - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          uint64_t v20 = (uint64_t *)(API::sharedWorldIdentifierMap(void)::sharedMap + 16 * v18);
          long long v21 = (unsigned int *)v20[1];
          v20[1] = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v6);
          }
          *uint64_t v20 = *v8;
          uint64_t v22 = v2 + 16 * v7;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          v20[1] = v23;
          dispatch_data_t v11 = *(atomic_uint **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = v2 + 16 * v7;
          dispatch_data_t v11 = *(atomic_uint **)(v10 + 8);
          *(void *)(v10 + 8) = 0;
          if (!v11 || atomic_fetch_add(v11, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        atomic_store(1u, (unsigned int *)v11);
        WTF::fastFree((WTF *)v11, v6);
      }
LABEL_18:
      if (++v7 == v3) {
        goto LABEL_25;
      }
    }
  }
  if (v2)
  {
LABEL_25:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand()
{
  if (qword_1EB359D60 && (int v0 = *(_DWORD *)(qword_1EB359D60 - 4)) != 0) {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB359D60 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakRef<API::ContentWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB359D60;
  if (qword_1EB359D60)
  {
    unsigned int v3 = *(_DWORD *)(qword_1EB359D60 - 4);
    int v4 = *(_DWORD *)(qword_1EB359D60 - 12);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359D60 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *uint64_t result = 0;
  *(_DWORD *)(qword_1EB359D60 - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3;
    while (1)
    {
      uint64_t v9 = (WTF::StringImpl **)(v2 + 16 * v7);
      uint64_t v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          uint64_t v14 = qword_1EB359D60;
          if (qword_1EB359D60) {
            int v15 = *(_DWORD *)(qword_1EB359D60 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v10 + 4);
          if (v16 >= 0x100) {
            unsigned int v17 = v16 >> 8;
          }
          else {
            unsigned int v17 = WTF::StringImpl::hashSlowCase(v10);
          }
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v15;
            unsigned int v17 = ++v18 + v19;
          }
          while (*(void *)(v14 + 16 * v19));
          uint64_t v20 = v14 + 16 * v19;
          long long v21 = *(unsigned int **)(v20 + 8);
          *(void *)(v20 + 8) = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v6);
          }
          uint64_t v22 = *(WTF::StringImpl **)v20;
          *(void *)uint64_t v20 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v6);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v23 = *v9;
          *uint64_t v9 = 0;
          *(void *)uint64_t v20 = v23;
          uint64_t v24 = v2 + 16 * v7;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v20 + 8) = v25;
          uint64_t v26 = *(unsigned int **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v6);
          }
          unint64_t v13 = *v9;
          *uint64_t v9 = 0;
          if (!v13) {
            goto LABEL_31;
          }
          if (*(_DWORD *)v13 == 2) {
            goto LABEL_30;
          }
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          uint64_t v11 = v2 + 16 * v7;
          int v12 = *(unsigned int **)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v6);
          }
          unint64_t v13 = *v9;
          *uint64_t v9 = 0;
          if (!v13) {
            goto LABEL_31;
          }
          if (*(_DWORD *)v13 == 2)
          {
LABEL_30:
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v6);
            goto LABEL_31;
          }
          *(_DWORD *)v13 -= 2;
        }
      }
LABEL_31:
      if (++v7 == v8) {
        goto LABEL_40;
      }
    }
  }
  if (v2)
  {
LABEL_40:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

void WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this)
{
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v2 = *(void *)(*((void *)this + 19) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x7Au, *(void *)(v3 + 40));
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  uint64_t v6 = *((void *)this + 21);
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  uint64_t v7 = *((void *)this + 20);
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), v4);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v4);
  }
  *((void *)this + 17) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 18, v4);

  WebCore::AsyncScrollingCoordinator::~AsyncScrollingCoordinator(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteScrollingCoordinator::~RemoteScrollingCoordinator((WebKit::RemoteScrollingCoordinator *)((char *)this - 136));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteScrollingCoordinator::scrollPositionChangedForNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  return WTF::CompletionHandler<void ()(void)>::operator()(a8);
}

uint64_t WebKit::RemoteScrollingCoordinator::animatedScrollDidEndForNode()
{
  return WebCore::AsyncScrollingCoordinator::applyScrollUpdate();
}

uint64_t WebKit::RemoteScrollingCoordinator::currentSnapPointIndicesChangedForNode()
{
  return MEMORY[0x1F4171410]();
}

uint64_t *WebKit::RemoteScrollingCoordinator::scrollingStateInUIProcessChanged(uint64_t *this, const WebKit::RemoteScrollingUIState *a2)
{
  uint64_t v3 = (uint64_t)this;
  char v4 = *(unsigned char *)a2;
  if ((*(unsigned char *)a2 & 1) == 0)
  {
    if ((*(unsigned char *)a2 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::operator=((uint64_t *)(v3 + 176), (uint64_t *)a2 + 2);
    if ((*(unsigned char *)a2 & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::operator=(this + 21, (uint64_t *)a2 + 1);
  char v4 = *(unsigned char *)a2;
  if ((*(unsigned char *)a2 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:

  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::operator=((uint64_t *)(v3 + 160), (uint64_t *)a2 + 3);
}

uint64_t WebKit::RemoteScrollingCoordinator::startMonitoringWheelEvents(uint64_t this, int a2)
{
  if (a2) {
    *(unsigned char *)(this + 216) = 1;
  }
  return this;
}

atomic_uchar *WebKit::RemoteScrollingCoordinator::receivedWheelEventWithPhases(WebCore::ScrollingCoordinator *a1)
{
  uint64_t v1 = (WebCore::Page *)WebCore::ScrollingCoordinator::page(a1);
  WebCore::Page::wheelEventTestMonitor((uint64_t *)&v5, v1);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t result = (atomic_uchar *)WebCore::WheelEventTestMonitor::receivedWheelEventWithPhases();
    char v4 = (atomic_uchar **)v5;
    uint64_t v5 = 0;
    if (v4) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v4, v3);
    }
  }
  return result;
}

void sub_198F20860(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uchar **a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::RemoteScrollingCoordinator::startDeferringScrollingTestCompletionForNode(WebCore::ScrollingCoordinator *a1)
{
  uint64_t v1 = (WebCore::Page *)WebCore::ScrollingCoordinator::page(a1);
  WebCore::Page::wheelEventTestMonitor((uint64_t *)&v5, v1);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t result = (atomic_uchar *)WebCore::WheelEventTestMonitor::deferForReason();
    char v4 = (atomic_uchar **)v5;
    uint64_t v5 = 0;
    if (v4) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v4, v3);
    }
  }
  return result;
}

void sub_198F208F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uchar **a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::RemoteScrollingCoordinator::stopDeferringScrollingTestCompletionForNode(WebCore::ScrollingCoordinator *a1)
{
  uint64_t v1 = (WebCore::Page *)WebCore::ScrollingCoordinator::page(a1);
  WebCore::Page::wheelEventTestMonitor((uint64_t *)&v5, v1);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t result = (atomic_uchar *)WebCore::WheelEventTestMonitor::removeDeferralForReason();
    char v4 = (atomic_uchar **)v5;
    uint64_t v5 = 0;
    if (v4) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v4, v3);
    }
  }
  return result;
}

void sub_198F20980(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uchar **a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteScrollingCoordinator::handleWheelEventForScrolling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if (*(unsigned char *)(a1 + 218) && *(unsigned char *)(a1 + 217)) {
    return 0;
  }
  *(void *)(a1 + 184) = a3;
  *(void *)(a1 + 192) = a4;
  *(unsigned char *)(a1 + 200) = 1;
  *(_WORD *)(a1 + 208) = a5;
  return 256;
}

WebCore::ScrollableArea *WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarVisibilityDidChange()
{
  uint64_t result = (WebCore::ScrollableArea *)WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode();
  if (result)
  {
    uint64_t result = (WebCore::ScrollableArea *)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID();
    if (result)
    {
      uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::ScrollableArea::scrollbarsController(result) + 272);
      return (WebCore::ScrollableArea *)v1();
    }
  }
  return result;
}

WebCore::ScrollableArea *WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarMinimumThumbLengthDidChange()
{
  uint64_t result = (WebCore::ScrollableArea *)WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode();
  if (result)
  {
    uint64_t result = (WebCore::ScrollableArea *)WebCore::LocalFrameView::scrollableAreaForScrollingNodeID();
    if (result)
    {
      uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::ScrollableArea::scrollbarsController(result) + 304);
      return (WebCore::ScrollableArea *)v1();
    }
  }
  return result;
}

WTF *WebKit::FindIndicatorOverlayClientIOS::drawRect(WTF *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t v6 = this;
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    float v10 = *(float *)(v9 + 364);
    if (*(unsigned char *)(v9 + 1098)) {
      float v10 = v10 * *(float *)(v9 + 356);
    }
  }
  else
  {
    float v10 = MEMORY[0x16C];
  }
  uint64_t v11 = (WTF *)*((void *)this + 2);
  if (*((float *)v11 + 18) == v10) {
    goto LABEL_23;
  }
  WebKit::findTextIndicatorOptions(*(WebKit **)(*(void *)(v7 + 296) + 3096), a2);
  WebCore::TextIndicator::createWithSelectionInFrame();
  uint64_t v11 = v23;
  uint64_t v23 = 0;
  this = (WTF *)*((void *)v6 + 2);
  *((void *)v6 + 2) = v11;
  if (this)
  {
    WTF::RefCounted<WebCore::TextIndicator>::deref(this);
    this = v23;
    uint64_t v23 = 0;
    if (this) {
      this = WTF::RefCounted<WebCore::TextIndicator>::deref(this);
    }
    uint64_t v11 = (WTF *)*((void *)v6 + 2);
  }
  if (v11)
  {
LABEL_23:
    if (*((void *)v11 + 12))
    {
      WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v23, (uint64_t)v11 + 56);
      WebCore::PathUtilities::pathsWithShrinkWrappedRects();
      v20[0] = 0x11040000FFE438FFLL;
      WebCore::GraphicsContextState::setFillColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)v20);
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(void *)a3 + 88))(a3, (char *)a3 + 8);
      if ((v20[0] & 0x8000000000000) != 0)
      {
        int v18 = (unsigned int *)(v20[0] & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v20[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v12);
        }
      }
      if (v22)
      {
        uint64_t v13 = v21;
        uint64_t v14 = 72 * v22;
        do
        {
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 176))(a3, v13);
          v13 += 72;
          v14 -= 72;
        }
        while (v14);
      }
      v19[0] = WebCore::PageOverlay::bounds(a2);
      v19[1] = v15;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v20, (const WebCore::IntRect *)v19);
      WebCore::GraphicsContext::drawImage();
      WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v16);
      this = v23;
      if (v23)
      {
        uint64_t v23 = 0;
        int v24 = 0;
        return (WTF *)WTF::fastFree(this, v17);
      }
    }
  }
  return this;
}

void sub_198F20D14(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF *a15, int a16)
{
  WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  int v18 = a15;
  if (a15)
  {
    a15 = 0;
    a16 = 0;
    WTF::fastFree(v18, v17);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::findTextIndicatorOptions(WebKit *this, const WebCore::LocalFrame *a2)
{
  WebCore::VisibleSelection::range(v4, (WebKit *)((char *)this + 56));
  if (v5)
  {
    if (WebCore::ImageOverlay::isInsideOverlay()) {
      uint64_t v2 = 326;
    }
    else {
      uint64_t v2 = 320;
    }
  }
  else
  {
    uint64_t v2 = 320;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
  return v2;
}

void sub_198F20DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL WebKit::FindController::updateFindIndicator(WebKit::FindController *this, BOOL a2, int a3)
{
  uint64_t v5 = *(void *)(*((void *)this + 1) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v6 + 48), &v52);
  uint64_t v7 = v52;
  if (!v52) {
    return 0;
  }
  uint64_t v8 = (const WebCore::LocalFrame *)*((void *)this + 9);
  if (v8)
  {
    WebCore::PageOverlayController::uninstallPageOverlay();
    uint64_t v9 = *((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v9) {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v9 + 8));
    }
    *((unsigned char *)this + 24) = 0;
  }
  WebKit::findTextIndicatorOptions(*(WebKit **)(*(void *)(v7 + 296) + 3096), v8);
  WebCore::TextIndicator::createWithSelectionInFrame();
  float v10 = (_DWORD *)v51;
  BOOL v11 = v51 != 0;
  if (v51)
  {
    int v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9DFAF8;
    v12[1] = v7;
    ++*v10;
    void v12[2] = v10;
    uint64_t v14 = *((void *)this + 10);
    *((void *)this + 10) = v12;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    *(_OWORD *)long long v48 = *(_OWORD *)(v51 + 8);
    *(void *)((char *)this + 28) = WebCore::enclosingIntRect((WebCore *)v48, v13);
    *(void *)((char *)this + 36) = v15;
    WebCore::PageOverlay::create();
    unsigned int v16 = v48[0];
    v48[0] = 0;
    uint64_t v17 = *((void *)this + 9);
    *((void *)this + 9) = v16;
    if (v17)
    {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v17 + 8));
      int v18 = v48[0];
      v48[0] = 0;
      if (v18) {
        WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)v18 + 2);
      }
    }
    WebCore::PageOverlayController::installPageOverlay();
    uint64_t v19 = (WebCore::PageOverlay *)*((void *)this + 9);
    *(_OWORD *)long long v48 = *(_OWORD *)(v51 + 24);
    IntPoint v21 = (IntPoint)WebCore::enclosingIntRect((WebCore *)v48, v20);
    IntSize v23 = v22;
    v53.m_location = v21;
    v53.m_size_t size = v23;
    WebCore::PageOverlay::setFrame(v19, v53);
    WebCore::PageOverlay::setNeedsDisplay(*((WebCore::PageOverlay **)this + 9));
    if (a3)
    {
      BOOL v50 = 0;
      int v24 = (WebCore::Node *)WebCore::Position::containerNode((WebCore::Position *)(*(void *)(*(void *)(v7 + 296)
                                                                                              + 3096)
                                                                                  + 120));
      v25.i64[0] = WebCore::Node::absoluteBoundingRect(v24, &v50);
      v25.i64[1] = v26;
      float32x4_t v49 = vmulq_f32(vcvtq_f32_s32(v25), (float32x4_t)vdupq_n_s32(0x3C800000u));
      WebCore::VisiblePosition::VisiblePosition();
      uint64_t v27 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v48, 0);
      unint64_t v29 = v28;
      long long v30 = v48[0];
      v48[0] = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 7) == 2)
        {
          if ((*((_WORD *)v30 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v30);
          }
        }
        else
        {
          *((_DWORD *)v30 + 7) -= 2;
        }
      }
      uint64_t v31 = *((void *)this + 1);
      if (v31)
      {
        uint64_t v32 = *(void *)(v31 + 8);
        if (v32) {
          uint64_t v33 = v32 - 16;
        }
        else {
          uint64_t v33 = 0;
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      if ((v29 & 0x80000000) == 0) {
        int v34 = v29;
      }
      else {
        int v34 = v29 + 1;
      }
      uint64_t v35 = (v27 + (v34 >> 1));
      unint64_t v36 = HIDWORD(v29);
      if ((v29 & 0x8000000000000000) != 0) {
        LODWORD(v36) = HIDWORD(v29) + 1;
      }
      unint64_t v46 = v35 | ((unint64_t)(HIDWORD(v27) + ((int)v36 >> 1)) << 32);
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v47, (const IntPoint *)&v46);
      uint64_t v37 = v33 + 32;
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)(v33 + 32) + 56))(v33 + 32);
      long long v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)long long v39 = 1469;
      *((void *)v39 + 1) = v38;
      *((void *)v39 + 66) = (char *)v39 + 16;
      *((void *)v39 + 67) = 512;
      *((void *)v39 + 68) = 0;
      *((void *)v39 + 70) = 0;
      *((void *)v39 + 69) = 0;
      IPC::Encoder::encodeHeader(v39);
      v48[0] = v39;
      IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v39, &v47);
      IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v39, v49.f32);
      (*(void (**)(uint64_t, WebCore::Node **, void))(*(void *)v37 + 32))(v37, v48, 0);
      long long v41 = v48[0];
      v48[0] = 0;
      if (v41)
      {
        IPC::Encoder::~Encoder(v41, v40);
        WTF::fastFree(v44, v45);
      }
    }
    *((unsigned char *)this + 24) = 1;
    uint64_t v42 = (WebCore::TextIndicator *)v51;
    uint64_t v51 = 0;
    if (v42) {
      WTF::RefCounted<WebCore::TextIndicator>::deref(v42);
    }
  }
  if (v52) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v52 + 8));
  }
  return v11;
}

void sub_198F21208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::Node *a11)
{
  if (a11)
  {
    if (*((_DWORD *)a11 + 7) == 2)
    {
      if ((*((_WORD *)a11 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a11);
      }
    }
    else
    {
      *((_DWORD *)a11 + 7) -= 2;
    }
  }
  uint64_t v13 = *(WebCore::TextIndicator **)(v11 - 64);
  *(void *)(v11 - 64) = 0;
  if (v13) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v13);
  }
  uint64_t v14 = *(void *)(v11 - 56);
  *(void *)(v11 - 56) = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::FindController::hideFindIndicator(uint64_t this)
{
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v1 = this;
    WebCore::PageOverlayController::uninstallPageOverlay();
    uint64_t v2 = *(void *)(v1 + 72);
    *(void *)(v1 + 72) = 0;
    if (v2) {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v2 + 8));
    }
    *(unsigned char *)(v1 + 24) = 0;
    uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    return WebKit::setSelectionChangeUpdatesEnabledInAllFrames(v4, 0);
  }
  return this;
}

uint64_t WebKit::setSelectionChangeUpdatesEnabledInAllFrames(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    if (v3)
    {
      do
      {
        if (!*(unsigned char *)(v3 + 144))
        {
          WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
          WebCore::Editor::setIgnoreSelectionChanges();
        }
        this = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v3 + 48), 0);
        uint64_t v3 = this;
      }
      while (this);
    }
  }
  return this;
}

uint64_t WebKit::FindController::didFindString(WebKit::FindController *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  WebCore::Page::checkedFocusController((uint64_t *)&v8, *(WebCore::Page **)(v2 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v8);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    uint64_t v6 = (_WORD *)(*(void *)(*(void *)(result + 296) + 3096) + 257);
    *v6 |= 0x100u;
    WebCore::FrameSelection::updateAppearance(*(WebCore::FrameSelection **)(*(void *)(result + 296) + 3096));
    uint64_t v7 = (_WORD *)(*(void *)(*(void *)(v4 + 296) + 3096) + 257);
    *v7 &= ~0x100u;
    WebCore::FrameSelection::revealSelection();
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return result;
}

void sub_198F214B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (!*a10)
    {
      __break(0xC471u);
      JUMPOUT(0x198F214F8);
    }
    --*a10;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::platformReinitialize(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v6, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v6);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    WebKit::WebPage::accessibilityRemoteTokenData(&cf);
    WebKit::WebPage::accessibilityTransferRemoteToken((uint64_t)this, (id *)&cf, *(void *)(v3 + 32), *(void *)(v3 + 40));
    if (cf) {
      CFRelease(cf);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_198F215CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  if (cf) {
    CFRelease(cf);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::relayAccessibilityNotification(uint64_t a1, uint64_t a2, id *a3)
{
  id v5 = *a3;
  if (*a3)
  {
    uint64_t v6 = [*a3 bytes];
    uint64_t v7 = [v5 length];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v12[0] = v6;
  v12[1] = v7;
  v13[0] = a2;
  v13[1] = v12;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = a1 + 32;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  return IPC::MessageSender::send<Messages::WebPageProxy::RelayAccessibilityNotification>(v8, (uint64_t)v13, v10, 0);
}

uint64_t WebKit::WebPage::requiresPostLayoutDataForEditorState(WebKit::WebPage *this, WebCore::Document **a2)
{
  if (*(void *)(WebCore::Document::editor(a2[37]) + 32)) {
    uint64_t v3 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v3 = 0;
  }
  return *((unsigned __int8 *)this + 1484) | (v3 != 0);
}

uint64_t WebKit::WebPage::getPlatformEditorState(WebCore::Node *a1, WebCore::ScrollView **a2, uint64_t a3)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)WebKit::WebPage::getPlatformEditorStateCommon(a1, (const WebCore::Position *)a2, a3);
  if (!*(unsigned char *)(a3 + 336) || !*(unsigned char *)(a3 + 464)) {
    return result;
  }
  uint64_t v7 = a2[36];
  ++*((_DWORD *)v7 + 2);
  if (*(void *)(WebCore::Document::editor(a2[37]) + 32)) {
    uint64_t v8 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    uint64_t v9 = (WebCore::Editor *)WebCore::Document::editor(a2[37]);
    WebCore::Editor::compositionRange(v109, v9);
    if (!v110)
    {
LABEL_25:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
      goto LABEL_26;
    }
    WebCore::RenderObject::collectSelectionGeometries();
    uint64_t v11 = *(WTF **)(a3 + 416);
    if (v11)
    {
      *(void *)(a3 + 416) = 0;
      *(_DWORD *)(a3 + 424) = 0;
      WTF::fastFree(v11, v10);
    }
    int v12 = v117[0];
    *(WTF::StringImpl **)(a3 + 416) = v117[0];
    unsigned int v13 = HIDWORD(v117[1]);
    *(_DWORD *)(a3 + 424) = v117[1];
    *(_DWORD *)(a3 + 428) = v13;
    WebKit::convertContentToRootView(v7, v12, v13);
    if (!v110) {
      goto LABEL_219;
    }
    WebCore::plainTextReplacingNoBreakSpace();
    uint64_t v15 = v117[0];
    v117[0] = 0;
    unsigned int v16 = *(WTF::StringImpl **)(a3 + 72);
    *(void *)(a3 + 72) = v15;
    if (v16)
    {
      int v17 = *(_DWORD *)v16 - 2;
      if (*(_DWORD *)v16 != 2)
      {
LABEL_16:
        *(_DWORD *)unsigned int v16 = v17;
        goto LABEL_17;
      }
      WTF::StringImpl::destroy(v16, v14);
      unsigned int v16 = v117[0];
      v117[0] = 0;
      if (v16)
      {
        int v17 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v18);
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
LABEL_17:
    if (!v110) {
      goto LABEL_219;
    }
    WebCore::VisibleSelection::VisibleSelection();
    WebCore::VisiblePosition::VisiblePosition();
    v112 = (WebCore::Node *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v114, 0);
    uint64_t v113 = v19;
    *(void *)(a3 + 432) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v112);
    *(void *)(a3 + 440) = v20;
    IntPoint v21 = v114;
    v114 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 7) == 2)
      {
        if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v21);
        }
      }
      else
      {
        *((_DWORD *)v21 + 7) -= 2;
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    v112 = (WebCore::Node *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v114, 0);
    uint64_t v113 = v22;
    *(void *)(a3 + 448) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v112);
    *(void *)(a3 + 456) = v23;
    int v24 = v114;
    v114 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 7) == 2)
      {
        if ((*((_WORD *)v24 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v24);
        }
      }
      else
      {
        *((_DWORD *)v24 + 7) -= 2;
      }
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v117);
    goto LABEL_25;
  }
LABEL_26:
  int32x4_t v25 = (unsigned __int8 *)*((void *)a2[37] + 387);
  uint64_t v107 = (WebCore::VisibleSelection *)(v25 + 56);
  LOBYTE(v109[0]) = 0;
  char v110 = 0;
  *(unsigned char *)(a3 + 122) = *((unsigned char *)a1 + 1285);
  *(_WORD *)v108 = 0;
  int v26 = v25[153];
  if (v26 == 2)
  {
    WebCore::VisiblePosition::VisiblePosition();
    v114 = (WTF::StringImpl *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v117, &v108[1]);
    uint64_t v115 = v30;
    *(void *)(a3 + 352) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v114);
    *(void *)(a3 + 360) = v31;
    uint64_t v32 = v117[0];
    v117[0] = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 7) == 2)
      {
        if ((*((_WORD *)v32 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v32);
        }
      }
      else
      {
        *((_DWORD *)v32 + 7) -= 2;
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    v114 = (WTF::StringImpl *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v117, v108);
    uint64_t v115 = v33;
    *(void *)(a3 + 384) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v114);
    *(void *)(a3 + 392) = v34;
    uint64_t v35 = v117[0];
    v117[0] = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 7) == 2)
      {
        if ((*((_WORD *)v35 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v35);
        }
      }
      else
      {
        *((_DWORD *)v35 + 7) -= 2;
      }
    }
    WebCore::VisibleSelection::toNormalizedRange((uint64_t *)v117, v107);
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v109, (uint64_t)v117);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117);
    v114 = 0;
    if (!v110) {
      goto LABEL_85;
    }
    WebCore::RenderObject::collectSelectionGeometries();
    uint64_t v38 = *(WTF **)(a3 + 400);
    if (v38)
    {
      *(void *)(a3 + 400) = 0;
      *(_DWORD *)(a3 + 408) = 0;
      WTF::fastFree(v38, v37);
    }
    long long v39 = v117[0];
    *(WTF::StringImpl **)(a3 + 400) = v117[0];
    unsigned int v40 = HIDWORD(v117[1]);
    *(_DWORD *)(a3 + 408) = v117[1];
    *(_DWORD *)(a3 + 412) = v40;
    WebKit::convertContentToRootView(v7, v39, v40);
    if (!v110) {
      goto LABEL_219;
    }
    WebCore::plainTextReplacingNoBreakSpace();
    uint64_t v42 = v117[0];
    v117[0] = 0;
    uint64_t v43 = v114;
    v114 = v42;
    if (!v43)
    {
LABEL_48:
      if (v42) {
        LODWORD(v42) = *((_DWORD *)v42 + 1);
      }
      *(void *)(a3 + 40) = v42;
      WTF::String::left(&v114, 0xC8u, v117);
      unint64_t v46 = v117[0];
      v117[0] = 0;
      float v47 = *(WTF::StringImpl **)(a3 + 80);
      *(void *)(a3 + 80) = v46;
      if (v47)
      {
        int v48 = *(_DWORD *)v47 - 2;
        if (*(_DWORD *)v47 != 2) {
          goto LABEL_54;
        }
        WTF::StringImpl::destroy(v47, v36);
        float v47 = v117[0];
        v117[0] = 0;
        if (!v47) {
          goto LABEL_55;
        }
        int v48 = *(_DWORD *)v47 - 2;
        if (*(_DWORD *)v47 == 2) {
          WTF::StringImpl::destroy(v47, v36);
        }
        else {
LABEL_54:
        }
          *(_DWORD *)float v47 = v48;
      }
LABEL_55:
      if (*(unsigned char *)(a3 + 13))
      {
        if (!v110) {
          goto LABEL_219;
        }
        WebCore::TextIterator::TextIterator();
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = MEMORY[0x1E4FB68A0];
        while (v123)
        {
          uint64_t v52 = WebCore::TextIterator::node((WebCore::TextIterator *)v117);
          uint64_t v53 = v52;
          if (v52
            && (*(_WORD *)(v52 + 32) & 0x10) != 0
            && *(void *)(*(void *)(v52 + 104) + 24) == *(void *)(*(void *)v51 + 24))
          {
            if (v50)
            {
              if (*(_DWORD *)(v50 + 28) == 2)
              {
                if ((*(_WORD *)(v50 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v50);
                }
              }
              else
              {
                *(_DWORD *)(v50 + 28) -= 2;
              }
              MEMORY[0x199731050](v117);
              goto LABEL_85;
            }
            *(_DWORD *)(v52 + 28) += 2;
            uint64_t v50 = v52;
          }
          else
          {
            uint64_t v53 = v49;
          }
          WebCore::TextIterator::advance((WebCore::TextIterator *)v117);
          uint64_t v49 = v53;
        }
        MEMORY[0x199731050](v117);
        if (v49)
        {
          WebKit::WebPage::contextForElement(a1, (WebCore::Element *)v49, (uint64_t)v117);
          long long v61 = v120;
          long long v62 = v121;
          long long v63 = v118;
          *(_OWORD *)(a3 + 176) = v119;
          *(_OWORD *)(a3 + 192) = v61;
          *(_OWORD *)(a3 + 208) = v62;
          *(unsigned char *)(a3 + 224) = v122;
          *(_OWORD *)(a3 + 144) = *(_OWORD *)v117;
          *(_OWORD *)(a3 + 160) = v63;
          if (*(_DWORD *)(v49 + 28) == 2)
          {
            if ((*(_WORD *)(v49 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v49);
            }
          }
          else
          {
            *(_DWORD *)(v49 + 28) -= 2;
          }
        }
      }
LABEL_85:
      char v64 = 0;
      unsigned int v65 = v114;
      if (!*(unsigned char *)(a3 + 13) || *(unsigned char *)(a3 + 15))
      {
LABEL_105:
        *(unsigned char *)(a3 + 120) = v64;
        v114 = 0;
        if (!v65) {
          goto LABEL_109;
        }
        goto LABEL_106;
      }
      if (!v114)
      {
        *(unsigned char *)(a3 + 120) = 0;
        goto LABEL_109;
      }
      unsigned int v66 = (unsigned __int8 *)*((void *)v114 + 1);
      uint64_t v67 = *((unsigned int *)v114 + 1);
      if ((*((unsigned char *)v114 + 16) & 4) != 0)
      {
        if (v67)
        {
          while (1)
          {
            unsigned int v73 = *v66;
            BOOL v70 = v73 > 0x20;
            uint64_t v74 = (1 << v73) & 0x100003600;
            if (v70 || v74 == 0) {
              goto LABEL_165;
            }
            ++v66;
            if (!--v67)
            {
LABEL_104:
              char v64 = 0;
              goto LABEL_105;
            }
          }
        }
      }
      else if (v67)
      {
        uint64_t v68 = 2 * v67;
        while (1)
        {
          unsigned int v69 = *(unsigned __int16 *)v66;
          BOOL v70 = v69 > 0x20;
          uint64_t v71 = (1 << v69) & 0x100003600;
          if (v70 || v71 == 0) {
            break;
          }
          v66 += 2;
          v68 -= 2;
          if (!v68) {
            goto LABEL_104;
          }
        }
LABEL_165:
        char v64 = 1;
        goto LABEL_105;
      }
      *(unsigned char *)(a3 + 120) = 0;
      v114 = 0;
LABEL_106:
      if (*(_DWORD *)v65 == 2) {
        WTF::StringImpl::destroy(v65, v36);
      }
      else {
        *(_DWORD *)v65 -= 2;
      }
      goto LABEL_109;
    }
    int v44 = *(_DWORD *)v43 - 2;
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::destroy(v43, v41);
      uint64_t v43 = v117[0];
      v117[0] = 0;
      if (!v43)
      {
LABEL_47:
        uint64_t v42 = v114;
        goto LABEL_48;
      }
      int v44 = *(_DWORD *)v43 - 2;
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::destroy(v43, v45);
        goto LABEL_47;
      }
    }
    *(_DWORD *)uint64_t v43 = v44;
    goto LABEL_47;
  }
  if (v26 != 1) {
    goto LABEL_109;
  }
  v117[0] = (WTF::StringImpl *)WebCore::FrameSelection::absoluteCaretBounds((WebCore::FrameSelection *)v25, &v108[1]);
  v117[1] = v27;
  *(void *)(a3 + 352) = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)v117);
  *(void *)(a3 + 360) = v28;
  v108[0] = v108[1];
  *(_OWORD *)(a3 + 384) = *(_OWORD *)(a3 + 352);
  if (*(unsigned char *)(a3 + 13))
  {
    WebCore::VisiblePosition::VisiblePosition();
    *(unsigned char *)(a3 + 120) = WebCore::atBoundaryOfGranularity();
    unint64_t v29 = v117[0];
    v117[0] = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 7) == 2)
      {
        if ((*((_WORD *)v29 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v29);
        }
      }
      else
      {
        *((_DWORD *)v29 + 7) -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)(a3 + 120) = 0;
  }
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::wordRangeFromPosition();
  std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v109, (uint64_t)v117);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117);
  long long v54 = v114;
  v114 = 0;
  if (v54)
  {
    if (*((_DWORD *)v54 + 7) == 2)
    {
      if ((*((_WORD *)v54 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v54);
      }
    }
    else
    {
      *((_DWORD *)v54 + 7) -= 2;
    }
  }
  WebKit::plainTextForContext(v117, (uint64_t)v109);
  long long v56 = v117[0];
  v117[0] = 0;
  long long v57 = *(WTF::StringImpl **)(a3 + 80);
  *(void *)(a3 + 80) = v56;
  if (!v57) {
    goto LABEL_75;
  }
  int v58 = *(_DWORD *)v57 - 2;
  if (*(_DWORD *)v57 != 2)
  {
LABEL_74:
    *(_DWORD *)long long v57 = v58;
    goto LABEL_75;
  }
  WTF::StringImpl::destroy(v57, v55);
  long long v57 = v117[0];
  v117[0] = 0;
  if (v57)
  {
    int v58 = *(_DWORD *)v57 - 2;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::destroy(v57, v59);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_75:
  if (WebCore::VisibleSelection::isContentEditable(v107))
  {
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::charactersAroundPosition();
    int8x16_t v60 = v117[0];
    v117[0] = 0;
    if (v60)
    {
      if (*((_DWORD *)v60 + 7) == 2)
      {
        if ((*((_WORD *)v60 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v60);
        }
      }
      else
      {
        *((_DWORD *)v60 + 7) -= 2;
      }
    }
  }
LABEL_109:
  if (v110)
  {
    if (*((void *)a2[37] + 192) || (WebCore::Document::ensureMarkers(a2[37]), v110))
    {
      WebCore::DocumentMarkerController::markersInRange();
      int v77 = HIDWORD(v117[1]);
      if (HIDWORD(v117[1]))
      {
        if (HIDWORD(v117[1]) >> 29)
        {
LABEL_220:
          __break(0xC471u);
          JUMPOUT(0x198F22454);
        }
        uint64_t v78 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v117[1])));
        uint64_t v79 = v78;
        if (HIDWORD(v117[1]))
        {
          uint64_t v80 = 0;
          unsigned int v81 = v117[0];
          uint64_t v82 = 8 * HIDWORD(v117[1]);
          while (1)
          {
            uint64_t v83 = *(void *)(*((void *)v81 + v80) + 8);
            if (*(_DWORD *)(v83 + 80) != 1) {
              break;
            }
            *(void *)(v78 + 8 * v80++) = *(void *)(v83 + 32);
            v82 -= 8;
            if (!v82) {
              goto LABEL_121;
            }
          }
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_219;
        }
      }
      else
      {
        uint64_t v79 = 0;
      }
      LODWORD(v80) = 0;
LABEL_121:
      int8x16_t v84 = *(WTF **)(a3 + 104);
      if (v84)
      {
        *(void *)(a3 + 104) = 0;
        *(_DWORD *)(a3 + 112) = 0;
        WTF::fastFree(v84, v76);
      }
      *(void *)(a3 + 104) = v79;
      *(_DWORD *)(a3 + 112) = v77;
      *(_DWORD *)(a3 + 116) = v80;
      WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v117, v76);
      goto LABEL_124;
    }
LABEL_219:
    __break(1u);
    goto LABEL_220;
  }
LABEL_124:
  *(unsigned char *)(a3 + 123) = v108[1] || v108[0];
  if (v25[153])
  {
    if (WebCore::VisibleSelection::hasEditableStyle(v107))
    {
      uint64_t v85 = WebCore::VisibleSelection::rootEditableElement(v107);
      uint64_t v86 = v85;
      if (v85)
      {
        int v87 = *(_DWORD *)(v85 + 28) + 2;
        *(_DWORD *)(v85 + 28) = v87;
        uint64_t v88 = *(void *)(v85 + 72) & 0xFFFFFFFFFFFFLL;
        if (v88)
        {
          if ((*(unsigned char *)((*(void *)(v85 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0) {
            goto LABEL_220;
          }
          WebCore::CaretBase::computeCaretColor();
          WebCore::Color::operator=();
          if (((unint64_t)v117[0] & 0x8000000000000) != 0)
          {
            uint64_t v106 = (unsigned int *)((unint64_t)v117[0] & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v117[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v106);
              WTF::fastFree((WTF *)v106, v89);
            }
          }
          *(unsigned char *)(a3 + 136) = (*(void *)(*(void *)(v88 + 104) + 232) & 0x80000000000000) != 0;
          unsigned int v90 = *(WebCore::Document **)(*(void *)(v86 + 48) + 8);
          if (!*((void *)v90 + 192)) {
            WebCore::Document::ensureMarkers(v90);
          }
          WebCore::makeRangeSelectingNodeContents((uint64_t *)v117, (WebCore *)v86, v89);
          *(unsigned char *)(a3 + 140) = WebCore::DocumentMarkerController::hasMarkers();
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v118);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v117);
          int v87 = *(_DWORD *)(v86 + 28);
        }
        int v91 = v87 - 2;
        if (v91)
        {
          *(_DWORD *)(v86 + 28) = v91;
        }
        else if ((*(_WORD *)(v86 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v86);
        }
      }
    }
    *(unsigned char *)(a3 + 121) = 0;
    *(unsigned char *)(a3 + 124) = 0;
    if (WebCore::VisibleSelection::isContentEditable(v107))
    {
      if (*(void *)(a3 + 40) || *(_DWORD *)(a3 + 88) || *(_DWORD *)(a3 + 92) || *(_DWORD *)(a3 + 96))
      {
        *(unsigned char *)(a3 + 121) = 1;
        *(unsigned char *)(a3 + 124) = 1;
      }
      else
      {
        uint64_t v92 = WebCore::VisibleSelection::rootEditableElement(v107);
        unsigned int v93 = (WebCore *)v92;
        if (v92 && (*(unsigned int (**)(uint64_t))(*(void *)v92 + 208))(v92))
        {
          WebCore::firstPositionInNode(v93, v94);
          if (*((void *)v93 + 11))
          {
            WebCore::VisiblePosition::VisiblePosition();
            int isEndOfEditableOrNonEditableContent = WebCore::isEndOfEditableOrNonEditableContent();
            int v96 = isEndOfEditableOrNonEditableContent ^ 1;
            *(unsigned char *)(a3 + 121) = isEndOfEditableOrNonEditableContent ^ 1;
            unsigned int v97 = v117[0];
            v117[0] = 0;
            if (v97)
            {
              if (*((_DWORD *)v97 + 7) == 2)
              {
                if ((*((_WORD *)v97 + 17) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v97);
                  int v96 = *(unsigned __int8 *)(a3 + 121);
                }
              }
              else
              {
                *((_DWORD *)v97 + 7) -= 2;
              }
            }
            if (v96)
            {
              WebCore::VisiblePosition::VisiblePosition();
              WebCore::lastPositionInNode(v93, v98);
              WebCore::VisiblePosition::VisiblePosition();
              WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t)v117);
              unsigned int v99 = v112;
              v112 = 0;
              if (v99)
              {
                if (*((_DWORD *)v99 + 7) == 2)
                {
                  if ((*((_WORD *)v99 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v99);
                  }
                }
                else
                {
                  *((_DWORD *)v99 + 7) -= 2;
                }
              }
              v100 = v111;
              v111 = 0;
              if (v100)
              {
                if (*((_DWORD *)v100 + 7) == 2)
                {
                  if ((*((_WORD *)v100 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v100);
                  }
                }
                else
                {
                  *((_DWORD *)v100 + 7) -= 2;
                }
              }
              unint64_t v101 = v114;
              v114 = 0;
              if (v101)
              {
                if (*((_DWORD *)v101 + 7) == 2)
                {
                  if ((*((_WORD *)v101 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v101);
                  }
                }
                else
                {
                  *((_DWORD *)v101 + 7) -= 2;
                }
              }
              if ((_BYTE)v119) {
                char hasAnyPlainText = WebCore::hasAnyPlainText();
              }
              else {
                char hasAnyPlainText = 0;
              }
              *(unsigned char *)(a3 + 124) = hasAnyPlainText;
              std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117);
            }
          }
          else
          {
            *(unsigned char *)(a3 + 121) = 0;
          }
          v103 = v116;
          v116 = 0;
          if (v103)
          {
            if (*((_DWORD *)v103 + 7) == 2)
            {
              if ((*((_WORD *)v103 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v103);
              }
            }
            else
            {
              *((_DWORD *)v103 + 7) -= 2;
            }
          }
        }
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    *(unsigned char *)(a3 + 138) = WebCore::atBoundaryOfGranularity();
    uint64_t v104 = v117[0];
    v117[0] = 0;
    if (v104)
    {
      if (*((_DWORD *)v104 + 7) == 2)
      {
        if ((*((_WORD *)v104 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v104);
        }
      }
      else
      {
        *((_DWORD *)v104 + 7) -= 2;
      }
    }
    WebCore::VisiblePosition::VisiblePosition();
    *(unsigned char *)(a3 + 139) = WebCore::atBoundaryOfGranularity();
    uint64_t v105 = v117[0];
    v117[0] = 0;
    if (v105)
    {
      if (*((_DWORD *)v105 + 7) == 2)
      {
        if ((*((_WORD *)v105 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v105);
        }
      }
      else
      {
        *((_DWORD *)v105 + 7) -= 2;
      }
    }
  }
  uint64_t result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109);
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1) {
      return (*(uint64_t (**)(WebCore::ScrollView *))(*(void *)v7 + 8))(v7);
    }
    else {
      --*((_DWORD *)v7 + 2);
    }
  }
  return result;
}

WebCore::ScrollView *WebKit::convertContentToRootView(WebCore::ScrollView *this, _OWORD *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = this;
    uint64_t v5 = 84 * a3;
    do
    {
      long long v6 = a2[1];
      *(_OWORD *)&v7.m_p1.m_CGFloat x = *a2;
      *(_OWORD *)&v7.m_p3.m_CGFloat x = v6;
      WebCore::ScrollView::contentsToRootView((uint64_t *)&v8, v4, &v7);
      this = (WebCore::ScrollView *)WebCore::SelectionGeometry::setQuad((WebCore::SelectionGeometry *)a2, &v8);
      a2 = (_OWORD *)((char *)a2 + 84);
      v5 -= 84;
    }
    while (v5);
  }
  return this;
}

void *WebKit::plainTextForContext(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32)) {
    return (void *)WebCore::plainTextReplacingNoBreakSpace();
  }
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *uint64_t result = v2;
  return result;
}

uint64_t WebKit::WebPage::platformWillPerformEditingCommand(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v7, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v7);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v3 = v7;
  FloatQuad v7 = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    uint64_t v4 = *(void *)(result + 296);
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 28);
      *(_DWORD *)(v4 + 28) = v5 + 2;
      long long v6 = *(WebCore::DOMTimerHoldingTank **)(v4 + 3056);
      if (v6)
      {
        WebCore::DOMTimerHoldingTank::removeAll(v6);
        int v5 = *(_DWORD *)(v4 + 28) - 2;
      }
      if (v5)
      {
        *(_DWORD *)(v4 + 28) = v5;
      }
      else if ((*(_WORD *)(v4 + 34) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  return result;
}

void sub_198F22A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(_DWORD *)(v11 + 28) == 2)
  {
    if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
  }
  else
  {
    *(_DWORD *)(v11 + 28) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPage::restorePageState(WebKit::WebPage *this, const WebCore::HistoryItem *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t result = (IPC::Encoder *)WebCore::HistoryItem::pageScaleFactor(a2);
  if (v5 == 0.0)
  {
    uint64_t v25 = *((void *)this + 4);
    int v24 = (char *)this + 32;
    uint64_t v26 = (*(uint64_t (**)(char *))(v25 + 56))(v24);
    uint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v27 = 1885;
    *((void *)v27 + 1) = v26;
    *((void *)v27 + 66) = (char *)v27 + 16;
    *((void *)v27 + 67) = 512;
    *((void *)v27 + 68) = 0;
    *((void *)v27 + 70) = 0;
    *((void *)v27 + 69) = 0;
    IPC::Encoder::encodeHeader(v27);
    *(void *)buf = v27;
    (*(void (**)(char *, uint8_t *, void))(*(void *)v24 + 32))(v24, buf, 0);
LABEL_44:
    uint64_t result = *(IPC::Encoder **)buf;
    *(void *)buf = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v28);
      return (IPC::Encoder *)WTF::fastFree(v54, v55);
    }
    return result;
  }
  int v6 = *((unsigned __int8 *)a2 + 280);
  *((unsigned char *)this + 1283) = v6 ^ 1;
  uint64_t v7 = *(void *)(*((void *)this + 6) + 160);
  if (v7) {
    BOOL v8 = *(unsigned char *)(v7 + 144) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t v9 = *(const IntPoint **)(v7 + 288);
    float v10 = *((float *)this + 268);
    if (*((float *)a2 + 61) == v10 && *((float *)a2 + 62) == *((float *)this + 269))
    {
      if (v6)
      {
        WebCore::ViewportConfiguration::initialScale((WebKit::WebPage *)((char *)this + 952));
        float v30 = v29;
      }
      else
      {
        WebCore::HistoryItem::pageScaleFactor(a2);
        float v30 = v38;
      }
      if (*((unsigned char *)this + 1169))
      {
        WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)this + 952);
        double v40 = v39 * 5.0;
      }
      else
      {
        double v40 = *((double *)this + 124);
      }
      float v41 = v40;
      WebCore::ViewportConfiguration::minimumScale((WebKit::WebPage *)((char *)this + 952));
      float v43 = v42;
      if (v30 > v43) {
        float v43 = v30;
      }
      if (v43 >= v41) {
        float v43 = v41;
      }
      double v44 = v43;
      *(void *)buf = 0;
      WebKit::WebPage::scalePage(this, v43, (const WebCore::IntPoint *)buf);
      LOBYTE(v57) = 0;
      BYTE8(v57) = 0;
      if (WebCore::HistoryItem::shouldRestoreScrollPosition(a2))
      {
        uint64_t v45 = *((void *)this + 9);
        *(_OWORD *)buf = *(_OWORD *)((char *)a2 + 212);
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v45 + 168))(v45, buf);
        *((unsigned char *)this + 1281) = 1;
        unint64_t v46 = (const IntPoint *)WebCore::HistoryItem::scrollPosition(a2);
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v57, v46);
        BYTE8(v57) = 1;
      }
      float v47 = qword_1EB3584D8;
      if (os_log_type_enabled((os_log_t)qword_1EB3584D8, OS_LOG_TYPE_DEFAULT))
      {
        int shouldRestoreScrollPosition = WebCore::HistoryItem::shouldRestoreScrollPosition(a2);
        int v49 = *(_DWORD *)(WebCore::HistoryItem::scrollPosition(a2) + 4);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = shouldRestoreScrollPosition;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v49;
        _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "WebPage::restorePageState with matching minimumLayoutSize; historyItem.shouldRestoreScrollPosition %d, scrollPosition.y %d",
          buf,
          0xEu);
      }
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v58, v9 + 12);
      uint64_t v51 = *((void *)this + 4);
      uint64_t v50 = (char *)this + 32;
      uint64_t v52 = (*(uint64_t (**)(char *))(v51 + 56))(v50);
      uint64_t v53 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v53 = 2052;
      *((void *)v53 + 1) = v52;
      *((void *)v53 + 66) = (char *)v53 + 16;
      *((void *)v53 + 67) = 512;
      *((void *)v53 + 68) = 0;
      *((void *)v53 + 70) = 0;
      *((void *)v53 + 69) = 0;
      IPC::Encoder::encodeHeader(v53);
      *(void *)buf = v53;
      IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>(v53, (uint64_t)&v57);
      IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v53, (float *)&v58);
      IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(v53, (float *)a2 + 65);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v53, v44);
      (*(void (**)(char *, uint8_t *, void))(*(void *)v50 + 32))(v50, buf, 0);
    }
    else
    {
      int v13 = *((_DWORD *)a2 + 63);
      int v12 = *((_DWORD *)a2 + 64);
      int32x2_t v56 = (int32x2_t)WebCore::ScrollView::contentsSize(*(WebCore::ScrollView **)(v7 + 288));
      float v14 = (float)*((int *)a2 + 59) / (float)v13;
      WebCore::HistoryItem::pageScaleFactor(a2);
      WebKit::scaleAfterViewportWidthChange((WebKit *)(*((unsigned char *)a2 + 280) == 0), COERCE_DOUBLE(__PAIR64__(v56.u32[1], LODWORD(v10))), (WebKit::WebPage *)((char *)this + 952), (const WebCore::ViewportConfiguration *)v56.u32[0], v14, v15, v16, v17);
      double v19 = v18;
      v58.i8[0] = 0;
      char v59 = 0;
      if (WebCore::HistoryItem::shouldRestoreScrollPosition(a2))
      {
        if (v13 < 1
          || v12 < 1
          || (v56.i32[0] >= 1 ? (BOOL v20 = v56.i32[1] < 1) : (BOOL v20 = 1),
              v20 || (v56.i32[0] == v13 ? (BOOL v21 = v56.i32[1] == v12) : (BOOL v21 = 0), v21)))
        {
          long long v57 = *(_OWORD *)((char *)a2 + 228);
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)buf, (const WebCore::IntRect *)&v57);
          char v59 = 1;
          float32x2_t v23 = vadd_f32(*(float32x2_t *)buf, vmul_f32(*(float32x2_t *)&buf[8], (float32x2_t)0x3F0000003F000000));
        }
        else
        {
          long long v57 = *(_OWORD *)((char *)a2 + 228);
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)buf, (const WebCore::IntRect *)&v57);
          char v59 = 1;
          v22.f32[0] = (float)v13;
          v22.f32[1] = (float)v12;
          float32x2_t v23 = vmul_f32(vdiv_f32(vadd_f32(*(float32x2_t *)buf, vmul_f32(*(float32x2_t *)&buf[8], (float32x2_t)0x3F0000003F000000)), v22), vcvt_f32_s32(v56));
        }
        float32x2_t v58 = v23;
      }
      uint64_t v31 = qword_1EB3584D8;
      if (os_log_type_enabled((os_log_t)qword_1EB3584D8, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = WebCore::HistoryItem::shouldRestoreScrollPosition(a2);
        int v33 = *((_DWORD *)a2 + 58);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v32;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v33;
        *(_WORD *)&buf[14] = 2048;
        double v61 = v19;
        _os_log_impl(&dword_1985F2000, v31, OS_LOG_TYPE_DEFAULT, "WebPage::restorePageState with mismatched minimumLayoutSize; historyItem.shouldRestoreScrollPosition %d, unobs"
          "cured rect top %d, scale %.2f",
          buf,
          0x18u);
      }
      *(void *)buf = 0;
      WebKit::WebPage::scalePage(this, v19, (const WebCore::IntPoint *)buf);
      uint64_t v35 = *((void *)this + 4);
      uint64_t v34 = (char *)this + 32;
      uint64_t v36 = (*(uint64_t (**)(char *))(v35 + 56))(v34);
      uint64_t v37 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v37 = 2051;
      *((void *)v37 + 1) = v36;
      *((void *)v37 + 66) = (char *)v37 + 16;
      *((void *)v37 + 67) = 512;
      *((void *)v37 + 68) = 0;
      *((void *)v37 + 70) = 0;
      *((void *)v37 + 69) = 0;
      IPC::Encoder::encodeHeader(v37);
      *(void *)buf = v37;
      IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatPoint> const&>(v37, (uint64_t)&v58);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v37, v19);
      (*(void (**)(char *, uint8_t *, void))(*(void *)v34 + 32))(v34, buf, 0);
    }
    goto LABEL_44;
  }
  return result;
}

void sub_198F230C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, IPC::Encoder *a17)
{
  if (a17)
  {
    IPC::Encoder::~Encoder(a17, a2);
    WTF::fastFree(v18, v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::scaleAfterViewportWidthChange(WebKit *this, double a2, WebCore::ViewportConfiguration *a3, const WebCore::ViewportConfiguration *a4, float a5, const WebCore::IntSize *a6, const WebCore::IntSize *a7, float a8)
{
  if (this)
  {
    if (*((unsigned char *)a3 + 217)) {
      WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)a3);
    }
    return WebCore::ViewportConfiguration::minimumScale(a3);
  }
  else
  {
    return WebCore::ViewportConfiguration::initialScale(a3);
  }
}

double WebKit::WebPage::minimumPageScaleFactor(WebKit::WebPage *this)
{
  uint64_t v2 = (WebKit::WebPage *)((char *)this + 952);
  if ((WebCore::ViewportConfiguration::allowsUserScaling((WebKit::WebPage *)((char *)this + 952)) & 1) == 0) {
    return *(float *)(*((void *)this + 6) + 356);
  }

  WebCore::ViewportConfiguration::minimumScale(v2);
  return result;
}

double WebKit::WebPage::maximumPageScaleFactor(WebKit::WebPage *this)
{
  uint64_t v2 = (char *)this + 952;
  if ((WebCore::ViewportConfiguration::allowsUserScaling((WebKit::WebPage *)((char *)this + 952)) & 1) == 0) {
    return *(float *)(*((void *)this + 6) + 356);
  }
  if (!*((unsigned char *)this + 1169)) {
    return *((double *)this + 124);
  }
  WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor((uint64_t)v2);
  return v3 * 5.0;
}

uint64_t WebKit::WebPage::handleEditingKeyboardEvent(WebKit::WebPage *this, WebCore::KeyboardEvent *a2)
{
  v19[17] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 11);
  if (!v2 || *(unsigned char *)(v2 + 100)) {
    return 0;
  }
  if (WebKit::WebPage::handleKeyEventByRelinquishingFocusToChrome(this, a2)) {
    return 1;
  }
  WebKit::WebPage::updateLastNodeBeforeWritingSuggestions((uint64_t)this, a2);
  {
    int v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  WebKit::WebPage::editorState((uint64_t)this, 1, (uint64_t)v17);
  BOOL v8 = *(unsigned char *)(v2 + 8) == 4;
  int v13 = v17;
  BOOL v14 = v8;
  IPC::Connection::sendSync<Messages::WebPageProxy::InterpretKeyEvent>(v7, (uint64_t)&v13, *((void *)this + 5), 0, (uint64_t)v15, INFINITY);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v9);
  if (v18[304]) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v18, v10);
  }
  if (v16) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v15[8] == 0;
  }
  uint64_t v3 = !v11;
  if (v16 != -1) {
    ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy17InterpretKeyEventEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v16])(v17, v15);
  }
  return v3;
}

void sub_198F233C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59)
{
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a59, a2);
  if (a57) {
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&a19, v60);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::clearServiceWorkerEntitlementOverride(uint64_t a1, uint64_t *a2)
{
  WebKit::disableServiceWorkerEntitlementTestingOverride = 0;
  return WTF::CompletionHandler<void ()(void)>::operator()(a2);
}

unsigned int *WebKit::WebPage::getSelectionContext(uint64_t a1, uint64_t *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)v18, *(WebCore::Page **)(a1 + 48));
  double result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v18[0]);
  uint64_t v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  float v5 = v18[0];
  v18[0] = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198F23678);
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    uint64_t v6 = *(void *)(*((void *)result + 37) + 3096);
    if (*(unsigned char *)(v6 + 153) == 2)
    {
      WebCore::VisibleSelection::firstRange((uint64_t *)v18, (WebCore::VisibleSelection *)(v6 + 56));
      WebKit::plainTextForContext(&v19, (uint64_t)v18);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
      WebKit::plainTextForDisplay(&v17, (uint64_t)v18);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
      uint64_t v7 = v16;
      int v16 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 7) == 2)
        {
          if ((*((_WORD *)v7 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v7);
          }
        }
        else
        {
          *((_DWORD *)v7 + 7) -= 2;
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
      WebKit::plainTextForDisplay(&v15, (uint64_t)v18);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
      BOOL v8 = v16;
      int v16 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 7) == 2)
        {
          if ((*((_WORD *)v8 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v8);
          }
        }
        else
        {
          *((_DWORD *)v8 + 7) -= 2;
        }
      }
      WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>::operator()(a2);
      float v10 = v15;
      uint64_t v15 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      BOOL v14 = v17;
      float v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v9);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      int v13 = v19;
      double v19 = 0;
      if (!v13) {
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
      }
    }
    else
    {
      v18[0] = 0;
      int v16 = 0;
      double v19 = 0;
      WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>::operator()(a2);
      BOOL v11 = v19;
      double v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      int v12 = v16;
      int v16 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v9);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      int v13 = v18[0];
      v18[0] = 0;
      if (!v13) {
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
      }
    }
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
  }
  return result;
}

void sub_198F2369C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  double v18 = *(WTF::StringImpl **)(v16 - 40);
  *(void *)(v16 - 40) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  _Unwind_Resume(a1);
}

void *WebKit::plainTextForDisplay(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32)) {
    return (void *)WebCore::plainTextReplacingNoBreakSpace();
  }
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *double result = v2;
  return result;
}

uint64_t WebKit::WebPage::getStringSelectionForPasteboard(uint64_t a1, uint64_t *a2)
{
  return 0;
}

void sub_198F23904(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::getDataSelectionForPasteboard(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

void sub_198F23978(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::platformCanHandleRequest(WebKit::WebPage *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F18D80];
  uint64_t v3 = WebCore::ResourceRequest::nsURLRequest();

  return [v2 canHandleRequest:v3];
}

uint64_t WebKit::WebPage::shouldDelayWindowOrderingEvent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
}

uint64_t WebKit::WebPage::rectForElementAtInteractionLocation(int32x2_t *this)
{
  uint64_t v1 = *(void *)(*(void *)&this[6] + 160);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 144) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  int32x2_t v4 = this[155];
  int8x8_t v5 = (int8x8_t)vcgt_s32(v4, (int32x2_t)0xFE000000FE000000);
  v10[0] = vorr_s8((int8x8_t)(*(void *)&v5 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v4), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v4, 6uLL)), v5));
  WebCore::EventHandler::hitTestResultAtPoint();
  uint64_t v6 = v12;
  if (v12)
  {
    if ((*(void *)(v12 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v7 = *(WebCore::ScrollView **)(WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v11) + 288);
      v10[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(*(void *)(v6 + 72) & 0xFFFFFFFFFFFFLL), 1, 0);
      v10[1] = v8;
      uint64_t v3 = WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)v10);
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  MEMORY[0x199731400](v11);
  return v3;
}

void sub_198F23AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x199731400](va);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::generateSyntheticEditingCommand(uint64_t a1, int a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v45 = 0;
  WORD4(v45) = 1;
  LOBYTE(v46) = 0;
  LOBYTE(v47) = 0;
  __int16 v48 = 0;
  char v49 = 0;
  CFTypeRef cf = 0;
  long long v50 = 0u;
  memset(v51, 0, 30);
  WebCore::Page::checkedFocusController((uint64_t *)v32, *(WebCore::Page **)(a1 + 48));
  uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v32[0]);
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  uint64_t v6 = v32[0];
  v32[0] = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2434CLL);
    }
    --*(_DWORD *)v6;
  }
  if (v3)
  {
    switch(a2)
    {
      case 0:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v7 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v8 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v9 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        float v10 = v31;
        BOOL v11 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v12 = v31;
        WTF::WallTime::now(v11);
        v32[0] = v14;
        LOWORD(v32[1]) = 1025;
        LOBYTE(v33) = 0;
        LOBYTE(v34) = 0;
        __int16 v35 = 0;
        char v36 = 0;
        if (v31)
        {
          *(_DWORD *)v31 += 2;
          *(_DWORD *)v31 += 2;
        }
        float v38 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v39 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v40 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        int v15 = 90;
        goto LABEL_53;
      case 1:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v7 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v8 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v9 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        float v10 = v31;
        BOOL v20 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v12 = v31;
        WTF::WallTime::now(v20);
        v32[0] = v21;
        LOWORD(v32[1]) = 1025;
        LOBYTE(v33) = 0;
        LOBYTE(v34) = 0;
        __int16 v35 = 0;
        char v36 = 0;
        if (v31)
        {
          *(_DWORD *)v31 += 2;
          *(_DWORD *)v31 += 2;
        }
        float v38 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v39 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v40 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        int v15 = 89;
        goto LABEL_53;
      case 2:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v7 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v8 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v9 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        float v10 = v31;
        double v18 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v12 = v31;
        WTF::WallTime::now(v18);
        v32[0] = v19;
        LOWORD(v32[1]) = 1025;
        LOBYTE(v33) = 0;
        LOBYTE(v34) = 0;
        __int16 v35 = 0;
        char v36 = 0;
        if (v31)
        {
          *(_DWORD *)v31 += 2;
          *(_DWORD *)v31 += 2;
        }
        float v38 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v39 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v40 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        int v15 = 66;
        goto LABEL_53;
      case 3:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v7 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v8 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v9 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        float v10 = v31;
        float32x2_t v22 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v12 = v31;
        WTF::WallTime::now(v22);
        v32[0] = v23;
        LOWORD(v32[1]) = 1025;
        LOBYTE(v33) = 0;
        LOBYTE(v34) = 0;
        __int16 v35 = 0;
        char v36 = 0;
        if (v31)
        {
          *(_DWORD *)v31 += 2;
          *(_DWORD *)v31 += 2;
        }
        float v38 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v39 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v40 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        int v15 = 73;
        goto LABEL_53;
      case 4:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v7 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v8 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v9 = v31;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        float v10 = v31;
        uint64_t v16 = (WTF::WallTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v12 = v31;
        WTF::WallTime::now(v16);
        v32[0] = v17;
        LOWORD(v32[1]) = 1025;
        LOBYTE(v33) = 0;
        LOBYTE(v34) = 0;
        __int16 v35 = 0;
        char v36 = 0;
        if (v31)
        {
          *(_DWORD *)v31 += 2;
          *(_DWORD *)v31 += 2;
        }
        float v38 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v39 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        double v40 = v31;
        if (v31) {
          *(_DWORD *)v31 += 2;
        }
        int v15 = 85;
LABEL_53:
        int v42 = v15;
        __int16 v43 = 0;
        uint64_t v44 = 0;
        long long v45 = *(_OWORD *)v32;
        long long v46 = v33;
        long long v47 = v34;
        __int16 v48 = v35;
        char v49 = v36;
        float v41 = v12;
        uint64_t v37 = 0;
        int v24 = (WTF::StringImpl *)v50;
        *(void *)&long long v50 = v7;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v13);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        float v38 = 0;
        uint64_t v25 = (WTF::StringImpl *)*((void *)&v50 + 1);
        *((void *)&v50 + 1) = v8;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v13);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        double v39 = 0;
        uint64_t v26 = v51[0];
        v51[0] = v9;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v13);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
        double v40 = 0;
        uint64_t v27 = v51[1];
        v51[1] = v10;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v13);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        float v41 = 0;
        uint64_t v28 = v51[2];
        v51[2] = v12;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v13);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        LODWORD(v51[3]) = v42;
        WORD2(v51[3]) = v43;
        uint64_t v44 = 0;
        CFTypeRef v29 = cf;
        CFTypeRef cf = 0;
        if (v29) {
          CFRelease(v29);
        }
        WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v32, v13);
        if (!v12) {
          goto LABEL_78;
        }
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v30);
          if (!v10) {
            goto LABEL_83;
          }
        }
        else
        {
          *(_DWORD *)v12 -= 2;
LABEL_78:
          if (!v10)
          {
LABEL_83:
            if (!v9) {
              goto LABEL_88;
            }
            goto LABEL_86;
          }
        }
        if (*(_DWORD *)v10 != 2)
        {
          *(_DWORD *)v10 -= 2;
          goto LABEL_83;
        }
        WTF::StringImpl::destroy(v10, v30);
        if (!v9) {
          goto LABEL_88;
        }
LABEL_86:
        if (*(_DWORD *)v9 == 2)
        {
          WTF::StringImpl::destroy(v9, v30);
          if (!v8) {
            goto LABEL_93;
          }
          goto LABEL_91;
        }
        *(_DWORD *)v9 -= 2;
LABEL_88:
        if (!v8)
        {
LABEL_93:
          if (!v7) {
            goto LABEL_99;
          }
          goto LABEL_96;
        }
LABEL_91:
        if (*(_DWORD *)v8 != 2)
        {
          *(_DWORD *)v8 -= 2;
          goto LABEL_93;
        }
        WTF::StringImpl::destroy(v8, v30);
        if (!v7) {
          goto LABEL_99;
        }
LABEL_96:
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v30);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
LABEL_99:
        BYTE4(v51[3]) = 1;
        WebCore::PlatformKeyboardEvent::setCurrentModifierState();
        WebCore::EventHandler::keyEvent();
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
        break;
      default:
        goto LABEL_99;
    }
  }
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)&v45, v4);
}

void sub_198F24354(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v31 = v26;
  if (v31)
  {
    long long v33 = v31;
    int v34 = *(_DWORD *)v31 - 2;
    if (v34) {
      *(_DWORD *)long long v33 = v34;
    }
    else {
      WTF::StringImpl::destroy(v33, a2);
    }
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, a2);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (v29)
  {
    if (*(_DWORD *)v29 != 2)
    {
      *(_DWORD *)v29 -= 2;
      if (!v28) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    WTF::StringImpl::destroy(v29, a2);
  }
  if (!v28) {
    goto LABEL_18;
  }
LABEL_15:
  if (*(_DWORD *)v28 == 2) {
    WTF::StringImpl::destroy(v28, a2);
  }
  else {
    *(_DWORD *)v28 -= 2;
  }
LABEL_18:
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, a2);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
  WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)&a25, v35);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::handleSyntheticClick(uint64_t a1, uint64_t a2, float *a3, unsigned __int8 a4, int a5)
{
  float v10 = *(WebCore::Document **)(*(void *)(a2 + 48) + 8);
  *(unsigned char *)(a1 + 1251) = 1;
  if ((*(unsigned char *)(*((void *)v10 + 89) + 712) & 0x10) != 0)
  {
    uint64_t v12 = WebCore::Document::contentChangeObserver(v10);
    uint64_t v13 = *(void *)(v12 + 128);
    if (v13 && *(void *)(v13 + 8) == a2) {
      int isConsideredVisible = WebCore::ContentChangeObserver::isConsideredVisible((WebCore::ContentChangeObserver *)a2, v11);
    }
    else {
      int isConsideredVisible = 0;
    }
    WebCore::ContentChangeObserver::MouseMovedScope::MouseMovedScope((WebCore::ContentChangeObserver::MouseMovedScope *)&v38, (Document *)v10);
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 160);
    if (v15) {
      BOOL v16 = *(unsigned char *)(v15 + 144) == 0;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      float v17 = (unsigned int *)(v15 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
      WebKit::dispatchSyntheticMouseMove((WTF::WallTime *)v15);
      uint64_t v18 = *(void *)(v15 + 296);
      if (v18) {
        *(_DWORD *)(v18 + 28) += 2;
      }
      WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v18);
      if (v18)
      {
        if (*(_DWORD *)(v18 + 28) == 2)
        {
          if ((*(_WORD *)(v18 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v18);
          }
        }
        else
        {
          *(_DWORD *)(v18 + 28) -= 2;
        }
      }
      int v19 = *(unsigned __int8 *)(a1 + 186);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17);
      WebCore::ContentChangeObserver::MouseMovedScope::~MouseMovedScope((WebCore::ContentChangeObserver::MouseMovedScope *)&v38);
      if (!v19)
      {
        if (isConsideredVisible)
        {
          uint64_t v21 = *(void *)(a1 + 32);
          uint64_t v20 = a1 + 32;
          uint64_t v22 = (*(uint64_t (**)(uint64_t))(v21 + 56))(v20);
          float32x2_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)float32x2_t v23 = 1931;
          *((void *)v23 + 1) = v22;
          *((void *)v23 + 66) = (char *)v23 + 16;
          *((void *)v23 + 67) = 512;
          *((void *)v23 + 68) = 0;
          *((void *)v23 + 70) = 0;
          *((void *)v23 + 69) = 0;
          IPC::Encoder::encodeHeader(v23);
          float v38 = v23;
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v20 + 32))(v20, &v38, 0);
          uint64_t v25 = v38;
          float v38 = 0;
          if (v25)
          {
            IPC::Encoder::~Encoder(v25, v24);
            WTF::fastFree(v26, v27);
          }
        }
        else
        {
          if ((*(_WORD *)(a2 + 32) & 8) != 0)
          {
            *(_DWORD *)(a2 + 28) += 2;
            if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 848))(a2))
            {
              char isARIAControl = 1;
            }
            else
            {
              CFTypeRef v29 = *(WebCore::Quirks **)(*(void *)(*(void *)(a2 + 48) + 8) + 720);
              if (!v29) {
                CFTypeRef v29 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(void *)(a2 + 48)
              }
                                                                                               + 8));
              if (WebCore::Quirks::shouldIgnoreAriaForFastPathContentObservationCheck(v29))
              {
                char isARIAControl = 0;
              }
              else
              {
                Attribute = (WebCore::AccessibilityObject *)WebCore::Element::getAttribute((WebCore::Element *)a2, MEMORY[0x1E4FB69E8]);
                WebCore::AccessibilityObject::ariaRoleToWebCoreRole(Attribute, v31);
                char isARIAControl = WebCore::AccessibilityObject::isARIAControl();
              }
            }
            if (*(_DWORD *)(a2 + 28) == 2)
            {
              if ((*(_WORD *)(a2 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)a2);
              }
            }
            else
            {
              *(_DWORD *)(a2 + 28) -= 2;
            }
          }
          else
          {
            char isARIAControl = 0;
          }
          int v32 = *(_DWORD *)(v12 + 120);
          if (v32 == 2 || (isARIAControl & 1) != 0)
          {
            MEMORY[0x1997357E0](v12);
            CFRetain(*(CFTypeRef *)(a1 + 8));
            *(_DWORD *)(a2 + 28) += 2;
            float v38 = (IPC::Encoder *)a1;
            uint64_t v39 = a2;
            *(void *)&long long v40 = *(void *)a3;
            BYTE8(v40) = a4;
            HIDWORD(v40) = v32;
            int v41 = a5;
            uint64_t v34 = WTF::fastMalloc((WTF *)0x30);
            *(void *)uint64_t v34 = &unk_1EE9DFC08;
            *(void *)(v34 + 8) = v38;
            uint64_t v35 = v39;
            float v38 = 0;
            uint64_t v39 = 0;
            *(void *)(v34 + 16) = v35;
            LODWORD(v35) = v41;
            *(_OWORD *)(v34 + 24) = v40;
            *(_DWORD *)(v34 + 40) = v35;
            uint64_t v42 = v34;
            WTF::callOnMainRunLoop();
            uint64_t v36 = v42;
            uint64_t v42 = 0;
            if (v36) {
              (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
            }
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v39);
            uint64_t v37 = v38;
            float v38 = 0;
            if (v37) {
              CFRelease(*((CFTypeRef *)v37 + 1));
            }
          }
          else
          {
            WebCore::ContentChangeObserver::startContentObservationForDuration();
            *(_DWORD *)(a2 + 28) += 2;
            uint64_t v33 = *(void *)(a1 + 1496);
            *(void *)(a1 + 1496) = a2;
            if (v33)
            {
              if (*(_DWORD *)(v33 + 28) == 2)
              {
                if ((*(_WORD *)(v33 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v33);
                }
              }
              else
              {
                *(_DWORD *)(v33 + 28) -= 2;
              }
            }
            *(void *)(a1 + 1504) = *(void *)a3;
            *(unsigned char *)(a1 + 1528) = a4;
            *(_DWORD *)(a1 + 1532) = a5;
          }
        }
      }
    }
    else
    {
      WebCore::ContentChangeObserver::MouseMovedScope::~MouseMovedScope((WebCore::ContentChangeObserver::MouseMovedScope *)&v38);
    }
  }
  else
  {
    WebKit::WebPage::completeSyntheticClick(a1, a2, a3, a4, 1, a5);
  }
}

void sub_198F24964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v14);
  if (a9) {
    CFRelease(a9[1]);
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::completeSyntheticClick(uint64_t a1, uint64_t a2, float *a3, unsigned int a4, char a5, int a6)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(a1 + 1250);
  *(unsigned char *)(a1 + 1250) = 1;
  float v8 = roundf(*a3);
  uint64_t v9 = 0x80000000;
  if (v8 > -2147500000.0) {
    uint64_t v9 = (int)v8;
  }
  if (v8 < 2147500000.0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFLL;
  }
  float v11 = roundf(a3[1]);
  unint64_t v12 = 0x8000000000000000;
  if (v11 > -2147500000.0) {
    unint64_t v12 = (unint64_t)(int)v11 << 32;
  }
  if (v11 < 2147500000.0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0x7FFFFFFF00000000;
  }
  double result = *(unsigned int **)(a1 + 48);
  uint64_t v15 = *((void *)result + 20);
  if (v15) {
    BOOL v16 = *(unsigned char *)(v15 + 144) == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    char v82 = v7;
    uint64_t v21 = (WTF::WallTime *)WebCore::Page::checkedFocusController((uint64_t *)&v85, (WebCore::Page *)result);
    uint64_t v22 = v85;
    uint64_t v23 = *((void *)v85 + 2);
    if (!v23 || (uint64_t v24 = *(void *)(v23 + 8)) == 0 || *(unsigned char *)(v24 + 144))
    {
      uint64_t v85 = 0;
      if (*(_DWORD *)v22)
      {
        uint64_t v24 = 0;
        unsigned int v81 = 0;
        --*(_DWORD *)v22;
        uint64_t v80 = 0x100000001;
        goto LABEL_26;
      }
LABEL_105:
      __break(0xC471u);
      JUMPOUT(0x198F251C0);
    }
    atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
    uint64_t v25 = v85;
    uint64_t v85 = 0;
    if (v25)
    {
      if (!*(_DWORD *)v25) {
        goto LABEL_105;
      }
      --*(_DWORD *)v25;
    }
    uint64_t v26 = *(void *)(*(void *)(v24 + 296) + 1280);
    if (v26)
    {
      uint64_t v80 = 0;
      unsigned int v81 = *(WebCore::Node **)(*(void *)(v24 + 296) + 1280);
      *(_DWORD *)(v26 + 28) += 2;
    }
    else
    {
      unsigned int v81 = 0;
      uint64_t v80 = 1;
    }
LABEL_26:
    uint64_t v27 = v13 | v10;
    char v79 = *(unsigned char *)(a1 + 920);
    *(unsigned char *)(a1 + 920) = 1;
    *(void *)(a1 + 1240) = v13 | v10;
    uint64_t v28 = (WebCore *)WTF::WallTime::now(v21);
    uint64_t v85 = v29;
    char v86 = 6;
    int v30 = a4 & 0x12 | (8 * (a4 & 1)) | (a4 >> 2) & 1 | (a4 >> 1) & 4;
    char v87 = a4 & 0x12 | (8 * (a4 & 1)) | ((a4 & 4) != 0) | (a4 >> 1) & 4;
    char v88 = 0;
    char v89 = 0;
    LOBYTE(v90) = 0;
    HIBYTE(v90) = a5;
    uint64_t v91 = v27;
    uint64_t v92 = v27;
    uint64_t v94 = 0;
    uint64_t v93 = 0;
    uint64_t v95 = 0x3FF0000000000000;
    int v96 = a6;
    uint64_t v31 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v28);
    if (v31) {
      *(_DWORD *)v31 += 2;
    }
    unsigned int v97 = v31;
    uint64_t v98 = 1;
    __int16 v99 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    WebCore::EventHandler::handleMousePressEvent();
    if (v84) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v83 == 0;
    }
    int v34 = !v33;
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v32);
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v35);
    uint64_t v37 = v97;
    unsigned int v97 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        uint64_t v37 = (WTF::StringImpl *)WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 186)) {
      goto LABEL_97;
    }
    uint64_t v38 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = 0;
    if (v38)
    {
      (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
      uint64_t v37 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 8))(v38);
    }
    else if ((v34 & 1) == 0)
    {
      uint64_t v37 = (WTF::StringImpl *)WebKit::WebPage::clearSelectionAfterTapIfNeeded((WebCore::Page **)a1);
    }
    uint64_t v39 = (WebCore *)WTF::WallTime::now(v37);
    uint64_t v85 = v40;
    char v86 = 7;
    char v87 = v30;
    char v88 = 0;
    char v89 = 0;
    LOBYTE(v90) = 0;
    HIBYTE(v90) = a5;
    uint64_t v91 = v27;
    uint64_t v92 = v27;
    uint64_t v94 = 0;
    uint64_t v93 = 0;
    uint64_t v95 = 0x3FF0000000000000;
    int v96 = a6;
    int v41 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v39);
    if (v41) {
      *(_DWORD *)v41 += 2;
    }
    unsigned int v97 = v41;
    uint64_t v98 = 1;
    __int16 v99 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
    WebCore::EventHandler::handleMouseReleaseEvent();
    if (v84) {
      BOOL v43 = 1;
    }
    else {
      BOOL v43 = v83 == 0;
    }
    int v44 = !v43;
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v42);
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v45);
    long long v47 = v97;
    unsigned int v97 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v46);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 186)) {
      goto LABEL_97;
    }
    WebCore::Page::checkedFocusController((uint64_t *)&v85, *(WebCore::Page **)(a1 + 48));
    __int16 v48 = v85;
    uint64_t v49 = *((void *)v85 + 2);
    if (!v49 || (uint64_t v50 = *(void *)(v49 + 8)) == 0 || *(unsigned char *)(v50 + 144))
    {
      uint64_t v85 = 0;
      if (*(_DWORD *)v48)
      {
        int v51 = v44;
        uint64_t v50 = 0;
        int8x16_t v76 = 0;
        --*(_DWORD *)v48;
        char v77 = 1;
        goto LABEL_61;
      }
LABEL_108:
      __break(0xC471u);
      JUMPOUT(0x198F251F4);
    }
    atomic_fetch_add((atomic_uint *volatile)(v50 + 8), 1u);
    uint64_t v52 = v85;
    uint64_t v85 = 0;
    if (v52)
    {
      if (!*(_DWORD *)v52) {
        goto LABEL_108;
      }
      --*(_DWORD *)v52;
    }
    uint64_t v53 = *(void *)(*(void *)(v50 + 296) + 1280);
    if (v53)
    {
      int v51 = v44;
      char v77 = 0;
      char v75 = 0;
      int8x16_t v76 = *(WebCore::Node **)(*(void *)(v50 + 296) + 1280);
      *(_DWORD *)(v53 + 28) += 2;
      goto LABEL_67;
    }
    int v51 = v44;
    char v77 = 0;
    int8x16_t v76 = 0;
LABEL_61:
    char v75 = 1;
LABEL_67:
    long long v54 = *(void **)(*(void *)(a2 + 48) + 8);
    if ((*(unsigned char *)(v54[89] + 712) & 0x10) != 0)
    {
      long long v55 = (WebCore::Quirks *)v54[90];
      if (!v55) {
        long long v55 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(void *)(a2 + 48) + 8));
      }
      int32x2_t v56 = (WTF::WallTime *)WebCore::Quirks::needsYouTubeMouseOutQuirk(v55);
      if (v56)
      {
        uint64_t v57 = v54[68];
        if (v57)
        {
          if (*(void *)(v57 + 8))
          {
            float32x2_t v58 = (WebCore *)WTF::WallTime::now(v56);
            uint64_t v85 = v59;
            char v86 = 0;
            char v87 = v30;
            char v88 = 0;
            char v89 = 0;
            __int16 v90 = 0;
            uint64_t v91 = v27;
            uint64_t v92 = v27;
            uint64_t v94 = 0;
            uint64_t v93 = 0;
            uint64_t v95 = 0;
            int v96 = a6;
            int8x16_t v60 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v58);
            if (v60) {
              *(_DWORD *)v60 += 2;
            }
            unsigned int v97 = v60;
            uint64_t v98 = 0;
            __int16 v99 = 0;
            long long v100 = 0u;
            long long v101 = 0u;
            WebCore::EventHandler::dispatchSyntheticMouseOut();
            WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v61);
            WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v62);
            char v64 = v97;
            unsigned int v97 = 0;
            if (v64)
            {
              if (*(_DWORD *)v64 == 2) {
                WTF::StringImpl::destroy(v64, v63);
              }
              else {
                *(_DWORD *)v64 -= 2;
              }
            }
          }
        }
      }
    }
    if (!*(unsigned char *)(a1 + 186))
    {
      if ((v34 | v51) != 1 || (*(_WORD *)(a2 + 32) & 8) == 0)
      {
        float v65 = roundf(*a3);
        if (v65 >= 2147500000.0)
        {
          uint64_t v66 = 0x7FFFFFFFLL;
        }
        else if (v65 <= -2147500000.0)
        {
          uint64_t v66 = 0x80000000;
        }
        else
        {
          uint64_t v66 = (int)v65;
        }
        float v67 = roundf(a3[1]);
        if (v67 >= 2147500000.0)
        {
          unint64_t v68 = 0x7FFFFFFF00000000;
        }
        else if (v67 <= -2147500000.0)
        {
          unint64_t v68 = 0x8000000000000000;
        }
        else
        {
          unint64_t v68 = (unint64_t)(int)v67 << 32;
        }
        unint64_t v83 = v68 | v66;
        uint64_t v85 = (IPC::Encoder *)&v83;
        IPC::MessageSender::send<Messages::WebPageProxy::DidNotHandleTapAsClick>(a1 + 32, (int **)&v85);
      }
      uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
      BOOL v70 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)BOOL v70 = 1906;
      *((void *)v70 + 1) = v69;
      *((void *)v70 + 66) = (char *)v70 + 16;
      *((void *)v70 + 67) = 512;
      *((void *)v70 + 68) = 0;
      *((void *)v70 + 70) = 0;
      *((void *)v70 + 69) = 0;
      IPC::Encoder::encodeHeader(v70);
      uint64_t v85 = v70;
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 32) + 32))(a1 + 32, &v85, 0);
      int8x16_t v72 = v85;
      uint64_t v85 = 0;
      if (v72)
      {
        IPC::Encoder::~Encoder(v72, v71);
        WTF::fastFree(v73, v74);
      }
      WebKit::WebPage::scheduleLayoutViewportHeightExpansionUpdate(a1);
    }
    if ((v75 & 1) == 0)
    {
      if (*((_DWORD *)v76 + 7) == 2)
      {
        if ((*((_WORD *)v76 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v76);
        }
      }
      else
      {
        *((_DWORD *)v76 + 7) -= 2;
      }
    }
    if ((v77 & 1) == 0) {
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v50 + 8));
    }
LABEL_97:
    *(unsigned char *)(a1 + 920) = v79;
    char v7 = v82;
    double result = (unsigned int *)v81;
    if ((v80 & 1) == 0)
    {
      if (*((_DWORD *)v81 + 7) == 2)
      {
        if ((*((_WORD *)v81 + 17) & 0x400) == 0) {
          double result = (unsigned int *)WebCore::Node::removedLastRef(v81);
        }
      }
      else
      {
        *((_DWORD *)v81 + 7) -= 2;
      }
    }
    if ((v80 & 0x100000000) == 0) {
      double result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v24 + 8));
    }
  }
  *(unsigned char *)(a1 + 1250) = v7;
  return result;
}

void sub_198F25240(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, WebCore::Node *a12, int a13, int a14, uint64_t a15, int a16, char a17, char a18, char a19, WebCore::Node *a20,uint64_t a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,IPC::Encoder *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41)
{
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v45 + 144, a2);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v43, v47);
  if (a41)
  {
    if (*(_DWORD *)a41 == 2) {
      WTF::StringImpl::destroy(a41, v48);
    }
    else {
      *(_DWORD *)a41 -= 2;
    }
  }
  if ((a11 & 1) == 0)
  {
    if (*((_DWORD *)a12 + 7) == 2)
    {
      if ((*((_WORD *)a12 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a12);
      }
    }
    else
    {
      *((_DWORD *)a12 + 7) -= 2;
    }
  }
  if ((v42 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v44 + 8));
  }
  *(unsigned char *)(v41 + 920) = a17;
  if ((a18 & 1) == 0)
  {
    if (*((_DWORD *)a20 + 7) == 2)
    {
      if ((*((_WORD *)a20 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a20);
      }
    }
    else
    {
      *((_DWORD *)a20 + 7) -= 2;
    }
  }
  if ((a19 & 1) == 0) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(a21 + 8));
  }
  *(unsigned char *)(v41 + 1250) = a23;
  _Unwind_Resume(a1);
}

uint64_t WebKit::dispatchSyntheticMouseMove(WTF::WallTime *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (WebCore *)WTF::WallTime::now(a1);
  BOOL v2 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v1);
  if (v2) {
    *(_DWORD *)v2 += 2;
  }
  char v7 = v2;
  long long v8 = 0u;
  long long v9 = 0u;
  WebCore::EventHandler::dispatchSyntheticMouseMove();
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v3);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
  uint64_t result = (uint64_t)v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      return WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

void sub_198F2557C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22)
{
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 144, a2);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, v25);
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, v26);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

double WebKit::WebPage::didFinishContentChangeObserving(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 1496))
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v4 = *(void *)(a1 + 1496);
    *(_DWORD *)(v4 + 28) += 2;
    uint64_t v16 = v4;
    uint64_t v5 = *(void *)(*(void *)(v4 + 48) + 8);
    uint64_t v6 = (void *)(v5 + 16);
    WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)(v5 + 16), v5);
    char v7 = (atomic_uint *)(*v6 & 0xFFFFFFFFFFFFLL);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    float v17 = (unsigned int *)v7;
    LODWORD(v18) = a2;
    *(void *)((char *)&v18 + 4) = *(void *)(a1 + 1504);
    BYTE12(v18) = *(unsigned char *)(a1 + 1528);
    int v19 = *(_DWORD *)(a1 + 1532);
    uint64_t v8 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v8 = &unk_1EE9DFC30;
    *(void *)(v8 + 8) = a1;
    uint64_t v9 = v16;
    uint64_t v16 = 0;
    *(void *)(v8 + 16) = v9;
    uint64_t v10 = v17;
    float v17 = 0;
    *(void *)(v8 + 24) = v10;
    LODWORD(v10) = v19;
    *(_OWORD *)(v8 + 32) = v18;
    *(_DWORD *)(v8 + 48) = v10;
    uint64_t v20 = v8;
    WTF::callOnMainRunLoop();
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = v17;
    float v17 = 0;
    if (v13) {
      WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v13, v11);
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
    uint64_t v14 = *(void *)(a1 + 1496);
    *(void *)(a1 + 1496) = 0;
    if (v14)
    {
      if (*(_DWORD *)(v14 + 28) == 2)
      {
        if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v14);
        }
      }
      else
      {
        *(_DWORD *)(v14 + 28) -= 2;
      }
    }
    double result = 0.0;
    *(void *)(a1 + 1504) = 0;
    *(unsigned char *)(a1 + 1528) = 0;
    *(_DWORD *)(a1 + 1532) = 0;
  }
  return result;
}

void sub_198F25768(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  uint64_t v14 = *(void *)(v12 - 40);
  *(void *)(v12 - 40) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (a11) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(a11, a2);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v11);
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::clearSelectionAfterTapIfNeeded(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v5, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v5);
  uint64_t v3 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    if ((WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(void *)(*(void *)(result + 296)
                                                                                               + 3096)
                                                                                   + 56)) & 1) == 0)
      WebKit::WebPage::clearSelection((WebKit::WebPage *)this);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  return result;
}

void sub_198F25894(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidNotHandleTapAsClick>(uint64_t a1, int **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1934;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F259E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::scheduleLayoutViewportHeightExpansionUpdate(uint64_t this)
{
  if (*(double *)(*(void *)(*(void *)(this + 48) + 112) + 432) != 0.0)
  {
    if ((*(void *)(this + 2296) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(void *)(this + 2296) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      return WebCore::DeferrableOneShotTimer::restart(this + 2264);
    }
    else
    {
      *(unsigned char *)(this + 2328) = 1;
    }
  }
  return this;
}

void WebKit::WebPage::attemptSyntheticClick(uint64_t a1, const IntPoint *a2, unsigned __int8 a3, unint64_t a4)
{
  uint64_t v20 = 0;
  uint64_t v7 = *(WebCore::LocalFrame **)(*(void *)(a1 + 48) + 160);
  if (v7) {
    BOOL v8 = *((unsigned char *)v7 + 144) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    uint64_t v9 = 0;
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v19, a2);
  uint64_t v10 = WebCore::LocalFrame::nodeRespondingToClickEvents(v7, (const WebCore::FloatPoint *)&v19, (WebCore::FloatPoint *)&v20, 0);
  uint64_t v9 = v10;
  if (v10)
  {
    uint64_t v11 = *(void *)(*(void *)(*(void *)(v10 + 48) + 8) + 544);
    if (!v11) {
      goto LABEL_6;
    }
    uint64_t v10 = *(void *)(v11 + 8);
  }
LABEL_10:
  float v12 = roundf(*(float *)&v20);
  uint64_t v13 = 0x7FFFFFFFLL;
  uint64_t v14 = 0x80000000;
  if (v12 > -2147500000.0) {
    uint64_t v14 = (int)v12;
  }
  if (v12 < 2147500000.0) {
    uint64_t v13 = v14;
  }
  float v15 = roundf(*((float *)&v20 + 1));
  if (v15 >= 2147500000.0)
  {
    unint64_t v16 = 0x7FFFFFFF00000000;
  }
  else if (v15 <= -2147500000.0)
  {
    unint64_t v16 = 0x8000000000000000;
  }
  else
  {
    unint64_t v16 = (unint64_t)(int)v15 << 32;
  }
  unint64_t v19 = v16 | v13;
  if (v10 && (WebKit::WebFrame::fromCoreFrame(v10, &v18), unint64_t v17 = v18[12], CFRelease((CFTypeRef)v18[1]), v17 <= a4))
  {
    if (*(void *)(a1 + 1232) == v9) {
      WebKit::WebPage::completeSyntheticClick(a1, v9, (float *)&v20, a3, 1, 1);
    }
    else {
      WebKit::WebPage::handleSyntheticClick(a1, v9, (float *)&v20, a3, 1);
    }
  }
  else
  {
    long long v18 = &v19;
    IPC::MessageSender::send<Messages::WebPageProxy::DidNotHandleTapAsClick>(a1 + 32, (int **)&v18);
  }
}

void WebKit::WebPage::handleDoubleTapForDoubleClickAtPoint(uint64_t a1, const IntPoint *a2, unsigned int a3, unint64_t a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  uint64_t v4 = *(WebCore::LocalFrame **)(*(void *)(a1 + 48) + 160);
  if (v4) {
    BOOL v5 = *((unsigned char *)v4 + 144) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v37, a2);
    uint64_t v9 = WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(v4, (const WebCore::FloatPoint *)&v37, (WebCore::FloatPoint *)&v36);
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(v9 + 48) + 8) + 544);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 8);
        if (v11)
        {
          WebKit::WebFrame::fromCoreFrame(v11, &v37);
          unint64_t v12 = *(void *)(v37 + 96);
          CFRelease(*(CFTypeRef *)(v37 + 8));
          if (v12 <= a4)
          {
            char v14 = *(unsigned char *)(a1 + 920);
            *(unsigned char *)(a1 + 920) = 1;
            float v15 = roundf(*(float *)&v36);
            uint64_t v16 = 0x80000000;
            if (v15 > -2147500000.0) {
              uint64_t v16 = (int)v15;
            }
            if (v15 < 2147500000.0) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0x7FFFFFFFLL;
            }
            float v18 = roundf(*((float *)&v36 + 1));
            unint64_t v19 = 0x8000000000000000;
            if (v18 > -2147500000.0) {
              unint64_t v19 = (unint64_t)(int)v18 << 32;
            }
            if (v18 < 2147500000.0) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = 0x7FFFFFFF00000000;
            }
            uint64_t v21 = (WebCore *)WTF::WallTime::now(v13);
            uint64_t v37 = v22;
            char v38 = 6;
            char v39 = a3 & 0x12 | (8 * (a3 & 1)) | ((a3 & 4) != 0) | (a3 >> 1) & 4;
            char v40 = 0;
            uint64_t v23 = v20 | v17;
            char v41 = 0;
            __int16 v42 = 256;
            uint64_t v43 = v23;
            uint64_t v44 = v23;
            uint64_t v46 = 0;
            uint64_t v45 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            uint64_t v24 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v21);
            if (v24) {
              *(_DWORD *)v24 += 2;
            }
            uint64_t v49 = v24;
            uint64_t v50 = 2;
            __int16 v51 = 0;
            long long v52 = 0u;
            long long v53 = 0u;
            WebCore::EventHandler::handleMousePressEvent();
            WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v25);
            WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v26);
            uint64_t v28 = v49;
            uint64_t v49 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2) {
                uint64_t v28 = (WTF::StringImpl *)WTF::StringImpl::destroy(v28, v27);
              }
              else {
                *(_DWORD *)v28 -= 2;
              }
            }
            if (!*(unsigned char *)(a1 + 186))
            {
              CFTypeRef v29 = (WebCore *)WTF::WallTime::now(v28);
              uint64_t v37 = v30;
              char v38 = 7;
              char v39 = a3 & 0x12 | (8 * (a3 & 1)) | ((a3 & 4) != 0) | (a3 >> 1) & 4;
              char v40 = 0;
              char v41 = 0;
              __int16 v42 = 256;
              uint64_t v43 = v23;
              uint64_t v44 = v23;
              uint64_t v46 = 0;
              uint64_t v45 = 0;
              uint64_t v47 = 0;
              int v48 = 1;
              uint64_t v31 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v29);
              if (v31) {
                *(_DWORD *)v31 += 2;
              }
              uint64_t v49 = v31;
              uint64_t v50 = 2;
              __int16 v51 = 0;
              long long v52 = 0u;
              long long v53 = 0u;
              WebCore::EventHandler::handleMouseReleaseEvent();
              WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v32);
              WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v33);
              uint64_t v35 = v49;
              uint64_t v49 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2) {
                  WTF::StringImpl::destroy(v35, v34);
                }
                else {
                  *(_DWORD *)v35 -= 2;
                }
              }
            }
            *(unsigned char *)(a1 + 920) = v14;
          }
        }
      }
    }
  }
}

void sub_198F25EE0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28)
{
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30 + 144, a2);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v33);
  if (a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, v34);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  *(unsigned char *)(v28 + 920) = v31;
  _Unwind_Resume(a1);
}

void WebKit::WebPage::requestFocusedElementInformation(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  char v10 = 0;
  if (!*(void *)(a1 + 928)) {
    goto LABEL_11;
  }
  WebKit::WebPage::focusedElementInformation((WebCore::Page **)a1, v7);
  if (v10 == v8)
  {
    if (!v10) {
      goto LABEL_11;
    }
    WebKit::FocusedElementInformation::operator=((uint64_t)v9, (uint64_t)v7);
  }
  else
  {
    if (v10)
    {
      WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v9, v3);
      char v5 = 0;
    }
    else
    {
      WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)v9, v7);
      char v5 = 1;
    }
    char v10 = v5;
  }
  if (v8) {
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v7, v4);
  }
LABEL_11:
  WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>::operator()(a2);
  if (v10) {
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v9, v6);
  }
}

void sub_198F26028(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  if (a61) {
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a9, a2);
  }
  if (LOBYTE(STACK[0x350])) {
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a63, a2);
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::focusedElementInformation@<X0>(WebCore::Page **this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v256 = *MEMORY[0x1E4F143B8];
  WebCore::Page::checkedFocusController((uint64_t *)&v193, this[6]);
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame((WebCore::FocusController *)v193);
  char v5 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v6 = (_DWORD *)v193;
  *(void *)&long long v193 = 0;
  if (v6)
  {
    if (!*v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198F26650);
    }
    --*v6;
  }
  if (result)
  {
    uint64_t v7 = *((void *)result + 37);
    if (!v7
      || (*(_DWORD *)(v7 + 28) += 2, (uint64_t v8 = *(void *)(v7 + 544)) == 0)
      || (uint64_t v9 = *(void *)(v8 + 8)) == 0
      || !*(void *)(v9 + 288))
    {
      *a2 = 0;
      a2[416] = 0;
      goto LABEL_21;
    }
    uint64_t v10 = (uint64_t)this[116];
    if (v10) {
      *(_DWORD *)(v10 + 28) += 2;
    }
    WebCore::Page::layoutIfNeeded();
    uint64_t v11 = *(void *)(v7 + 544);
    if (!v11 || (uint64_t v12 = *(void *)(v11 + 8)) == 0 || !*(void *)(v12 + 288) || (WebCore::Page *)v10 != this[116])
    {
      *a2 = 0;
      a2[416] = 0;
      if (!v10) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }
    WebKit::WebPage::scheduleFullEditorStateUpdate(this);
    WebKit::FocusedElementInformation::FocusedElementInformation((WebKit::FocusedElementInformation *)&v193);
    long long v255 = *((_OWORD *)v5 + 2);
    v199 = this[155];
    WebKit::WebPage::contextForElement((WebKit::WebPage *)this, (WebCore::Element *)v10, (uint64_t)v189);
    if (v192)
    {
      long long v196 = v190[1];
      long long v197 = v190[2];
      uint64_t v198 = v191;
      long long v194 = *(_OWORD *)v189;
      long long v195 = v190[0];
    }
    uint64_t v14 = *(void *)(v10 + 72) & 0xFFFFFFFFFFFFLL;
    if (v14)
    {
      if ((*(unsigned char *)((*(void *)(v10 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198F276ACLL);
      }
      *(void *)&long long v193 = WebKit::WebPage::rootViewInteractionBounds((WebKit::WebPage *)v10, v13);
      *((void *)&v193 + 1) = v15;
      double v203 = *(float *)(WebCore::RenderStyle::fontDescription((WebCore::RenderStyle *)(v14 + 80)) + 156);
      LOBYTE(v188) = 0;
      v189[0] = 0;
      WebCore::RenderObject::localToContainerPoint();
      char v216 = 0;
      BOOL v211 = (*(unsigned char *)(v14 + 120) & 8) != 0;
      uint64_t v16 = WebCore::Page::scrollingCoordinator(this[6]);
      if (v16)
      {
        uint64_t v253 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 56))(v16, v14);
        uint64_t v254 = v17;
      }
    }
    else
    {
      long long v193 = 0uLL;
    }
    int v18 = *(_DWORD *)(v10 + 28);
    *(_DWORD *)(v10 + 28) = v18 + 2;
    __int16 v19 = *(_WORD *)(v10 + 32);
    if ((v19 & 0x10) != 0)
    {
      char v246 = MEMORY[0x19973D590](v10);
      uint64_t v20 = v10;
    }
    else if (v18)
    {
      uint64_t v20 = 0;
      *(_DWORD *)(v10 + 28) = v18;
    }
    else
    {
      if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      uint64_t v20 = 0;
    }
    char isWritingSuggestionsEnabled = WebCore::Element::isWritingSuggestionsEnabled((WebCore::Element *)v10);
    *(_DWORD *)(v10 + 28) += 2;
    if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 848))(v10)) {
      char isFocusingWithValidationMessage = WebCore::ValidatedFormListedElement::isFocusingWithValidationMessage((WebCore::ValidatedFormListedElement *)(v10 + 120));
    }
    if (*(_DWORD *)(v10 + 28) == 2)
    {
      if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
    }
    else
    {
      *(_DWORD *)(v10 + 28) -= 2;
    }
    double v200 = WebKit::WebPage::minimumPageScaleFactor((WebKit::WebPage *)this);
    double v201 = WebKit::WebPage::maximumPageScaleFactor((WebKit::WebPage *)this);
    if (WebCore::ViewportConfiguration::allowsUserScalingIgnoringAlwaysScalable((WebCore::ViewportConfiguration *)(this + 119))) {
      double v21 = *((double *)this + 124);
    }
    else {
      double v21 = *((float *)this[6] + 89);
    }
    double v202 = v21;
    char v214 = WebCore::ViewportConfiguration::allowsUserScaling((WebCore::ViewportConfiguration *)(this + 119));
    char v215 = WebCore::ViewportConfiguration::allowsUserScalingIgnoringAlwaysScalable((WebCore::ViewportConfiguration *)(this + 119));
    WebKit::nextAssistableElement((uint64_t)v189, (Node *)v10, *((WebCore::Page **)this[6] + 9), 1);
    uint64_t v23 = v189[0];
    if (v189[0])
    {
      uint64_t v205 = WebKit::WebPage::rootViewBounds(v189[0], v22);
      uint64_t v206 = v24;
      char v204 = 1;
      if (*((_DWORD *)v23 + 7) == 2)
      {
        if ((*((_WORD *)v23 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v23);
        }
      }
      else
      {
        *((_DWORD *)v23 + 7) -= 2;
      }
    }
    WebKit::nextAssistableElement((uint64_t)v189, (Node *)v10, *((WebCore::Page **)this[6] + 9), 0);
    uint64_t v26 = v189[0];
    if (v189[0])
    {
      uint64_t v208 = WebKit::WebPage::rootViewBounds(v189[0], v25);
      uint64_t v209 = v27;
      char v207 = 1;
      if (*((_DWORD *)v26 + 7) == 2)
      {
        if ((*((_WORD *)v26 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v26);
        }
      }
      else
      {
        *((_DWORD *)v26 + 7) -= 2;
      }
    }
    uint64_t v28 = (uint64_t)this[192] + 1;
    this[192] = (WebCore::Page *)v28;
    uint64_t v252 = v28;
    if ((v19 & 0x10) == 0) {
      goto LABEL_91;
    }
    WebCore::HTMLElement::labels((uint64_t *)&v188, (WebCore::HTMLElement *)v20);
    uint64_t v29 = v188;
    if (!v188) {
      goto LABEL_91;
    }
    uint64_t v30 = 0;
    v189[0] = 0;
    v189[1] = 0;
    while (v30 < (*(unsigned int (**)(WTF::StringImpl *))(*(void *)v29 + 16))(v29))
    {
      uint64_t v32 = (*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)v188 + 24))(v188, v30);
      uint64_t v33 = v32;
      if (v32 && (*(_WORD *)(v32 + 32) & 8) != 0)
      {
        int v34 = *(_DWORD *)(v32 + 28);
        int v35 = v34 + 2;
        *(_DWORD *)(v32 + 28) = v34 + 2;
        if ((*(void *)(v32 + 72) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(unsigned char *)((*(void *)(v32 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198F27310);
          }
          uint64_t v36 = HIDWORD(v189[1]);
          if (HIDWORD(v189[1]) == LODWORD(v189[1]))
          {
            WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)v189, v32);
            int v35 = *(_DWORD *)(v33 + 28);
          }
          else
          {
            uint64_t v37 = v189[0];
            int v35 = v34 + 4;
            *(_DWORD *)(v32 + 28) = v34 + 4;
            *((void *)v37 + v36) = v32;
            HIDWORD(v189[1]) = v36 + 1;
          }
        }
        if (v35 == 2)
        {
          if ((*(_WORD *)(v33 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v33);
          }
        }
        else
        {
          *(_DWORD *)(v33 + 28) = v35 - 2;
        }
      }
      uint64_t v30 = (v30 + 1);
      uint64_t v29 = v188;
    }
    if (!HIDWORD(v189[1])) {
      goto LABEL_87;
    }
    char v38 = (WebCore::Element **)v189[0];
    uint64_t v39 = 8 * HIDWORD(v189[1]);
    while (1)
    {
      WebCore::Element::innerText((uint64_t *)&v187, *v38);
      char v40 = v187;
      if (v187) {
        break;
      }
LABEL_73:
      ++v38;
      v39 -= 8;
      if (!v39) {
        goto LABEL_87;
      }
    }
    if (!*((_DWORD *)v187 + 1))
    {
      v187 = 0;
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v31);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
      goto LABEL_73;
    }
    v187 = 0;
    char v41 = v238;
    v238 = v40;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy(v41, v31);
        __int16 v42 = v187;
        v187 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2) {
            WTF::StringImpl::destroy(v42, v31);
          }
          else {
            *(_DWORD *)v42 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
LABEL_87:
    WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v189, v31);
    uint64_t v43 = v188;
    v188 = 0;
    if (v43)
    {
      if (*((_DWORD *)v43 + 4) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v43 + 8))(v43);
      }
      else {
        --*((_DWORD *)v43 + 4);
      }
    }
LABEL_91:
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(void *)v10 + 704))(v189, v10);
    uint64_t v45 = v189[0];
    v189[0] = 0;
    uint64_t v46 = v229;
    v229 = v45;
    if (v46)
    {
      int v47 = *(_DWORD *)v46 - 2;
      if (*(_DWORD *)v46 != 2) {
        goto LABEL_95;
      }
      WTF::StringImpl::destroy(v46, v44);
      uint64_t v46 = v189[0];
      v189[0] = 0;
      if (v46)
      {
        int v47 = *(_DWORD *)v46 - 2;
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v48);
        }
        else {
LABEL_95:
        }
          *(_DWORD *)uint64_t v46 = v47;
      }
    }
    uint64_t v49 = *(void *)(v10 + 112);
    if (v49
      && ((unsigned int v50 = *(_DWORD *)(v49 + 4), (v50 & 1) != 0)
        ? (uint64_t v51 = *(void *)(v49 + 40), LODWORD(v52) = *(_DWORD *)(v49 + 52))
        : (uint64_t v51 = v49 + 32, LODWORD(v52) = v50 >> 5),
          v52))
    {
      uint64_t v53 = *MEMORY[0x1E4FB6758];
      uint64_t v52 = v52;
      uint64_t v54 = (WTF::StringImpl **)(v51 + 8);
      while (1)
      {
        uint64_t v55 = (uint64_t)*(v54 - 1);
        if (v55 == v53
          || *(void *)(v55 + 24) == *(void *)(v53 + 24) && *(void *)(v55 + 32) == *(void *)(v53 + 32))
        {
          break;
        }
        v54 += 2;
        if (!--v52)
        {
          uint64_t v54 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
          break;
        }
      }
    }
    else
    {
      uint64_t v54 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
    }
    WTF::String::operator=(&v239, v54);
    if ((*(_WORD *)(v10 + 32) & 0x10) == 0) {
      goto LABEL_454;
    }
    uint64_t v56 = *(void *)(*(void *)(v10 + 104) + 24);
    if (v56 == *(void *)(*MEMORY[0x1E4FB6B08] + 24))
    {
      *(_DWORD *)(v10 + 28) += 2;
      uint64_t v185 = v20;
      if ((byte_1EB359D69 & 1) == 0)
      {
        _MergedGlobals_100 = WTF::linkedOnOrAfterSDKWithBehavior();
        byte_1EB359D69 = 1;
      }
      char v219 = 16;
      uint64_t v58 = WebCore::HTMLSelectElement::listItems((WebCore::HTMLSelectElement *)v10);
      uint64_t v59 = *(unsigned int *)(v58 + 12);
      if (v59)
      {
        int v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = *(void *)v58;
        uint64_t v63 = *(void *)v58 + 8 * v59;
        while (1)
        {
          if (*(void *)v62)
          {
            uint64_t v64 = *(void *)(*(void *)v62 + 8);
            if (v64)
            {
              uint64_t v65 = *(void *)(*(void *)(v64 + 104) + 24);
              if (v65 == *(void *)(*MEMORY[0x1E4FB6AF0] + 24))
              {
                if (!v61) {
                  goto LABEL_164;
                }
                if (v61 == *(void *)(v64 + 40))
                {
                  uint64_t v67 = v61;
                }
                else
                {
                  if (*(_DWORD *)(v61 + 28) == 2)
                  {
                    if ((*(_WORD *)(v61 + 34) & 0x400) == 0) {
                      WebCore::Node::removedLastRef((WebCore::Node *)v61);
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v61 + 28) -= 2;
                  }
                  uint64_t v66 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
                  if (*MEMORY[0x1E4F30980]) {
                    *(_DWORD *)v66 += 2;
                  }
                  ++v60;
                  v189[0] = v66;
                  LOWORD(v189[1]) = 1;
                  BYTE2(v189[1]) = 0;
                  HIDWORD(v189[1]) = v60;
                  if (v225 == v224)
                  {
                    WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v223, (unint64_t)v189);
                  }
                  else
                  {
                    uint64_t v68 = v223 + 16 * v225;
                    v189[0] = 0;
                    *(void *)uint64_t v68 = v66;
                    *(WTF::StringImpl **)(v68 + 8) = v189[1];
                    ++v225;
                  }
                  uint64_t v69 = v189[0];
                  v189[0] = 0;
                  if (v69)
                  {
                    if (*(_DWORD *)v69 == 2) {
                      WTF::StringImpl::destroy(v69, v57);
                    }
                    else {
                      *(_DWORD *)v69 -= 2;
                    }
                  }
LABEL_164:
                  uint64_t v67 = 0;
                }
                WebCore::HTMLOptionElement::displayLabel((uint64_t *)&v188, (WebCore::HTMLOptionElement *)v64);
                char v80 = WebCore::HTMLOptionElement::selected();
                uint64_t v81 = *(void *)(v64 + 112);
                if (v81
                  && ((unint64_t v82 = *(unsigned int *)(v81 + 4), (v82 & 1) != 0)
                    ? (unint64_t v83 = *(uint64_t **)(v81 + 40), v84 = *(unsigned int *)(v81 + 52))
                    : (unint64_t v83 = (uint64_t *)(v81 + 32), v84 = v82 >> 5),
                      v84))
                {
                  uint64_t v85 = *MEMORY[0x1E4FB66C8];
                  while (1)
                  {
                    uint64_t v86 = *v83;
                    if (*v83 == v85
                      || *(void *)(v86 + 24) == *(void *)(v85 + 24)
                      && *(void *)(v86 + 32) == *(void *)(v85 + 32))
                    {
                      break;
                    }
                    v83 += 2;
                    if (!--v84) {
                      goto LABEL_175;
                    }
                  }
                  char v87 = 1;
                }
                else
                {
LABEL_175:
                  char v87 = 0;
                }
                uint64_t v78 = v188;
                if (v188) {
                  *(_DWORD *)v188 += 2;
                }
                v189[0] = v78;
                LOBYTE(v189[1]) = 0;
                BYTE1(v189[1]) = v80;
                BYTE2(v189[1]) = v87;
                HIDWORD(v189[1]) = v60;
                uint64_t v79 = v225;
                if (v225 == v224) {
                  goto LABEL_162;
                }
                goto LABEL_180;
              }
              if (v65 == *(void *)(*MEMORY[0x1E4FB6668] + 24))
              {
                if (_MergedGlobals_100)
                {
                  *(_DWORD *)(v64 + 28) += 2;
                  uint64_t v67 = v64;
                  if (v61)
                  {
                    if (*(_DWORD *)(v61 + 28) != 2)
                    {
                      *(_DWORD *)(v61 + 28) -= 2;
                      goto LABEL_130;
                    }
                    uint64_t v67 = v64;
                    if ((*(_WORD *)(v61 + 34) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v61);
LABEL_130:
                      uint64_t v67 = v64;
                    }
                  }
                }
                else
                {
                  uint64_t v67 = v61;
                }
                WebCore::HTMLOptGroupElement::groupLabelText((uint64_t *)&v188, (WebCore::HTMLOptGroupElement *)v64);
                uint64_t v70 = *(void *)(v64 + 112);
                if (v70
                  && ((unint64_t v71 = *(unsigned int *)(v70 + 4), (v71 & 1) != 0)
                    ? (int8x16_t v72 = *(uint64_t **)(v70 + 40), v73 = *(unsigned int *)(v70 + 52))
                    : (int8x16_t v72 = (uint64_t *)(v70 + 32), v73 = v71 >> 5),
                      v73))
                {
                  uint64_t v74 = *MEMORY[0x1E4FB66C8];
                  while (1)
                  {
                    uint64_t v75 = *v72;
                    if (*v72 == v74
                      || *(void *)(v75 + 24) == *(void *)(v74 + 24)
                      && *(void *)(v75 + 32) == *(void *)(v74 + 32))
                    {
                      break;
                    }
                    v72 += 2;
                    if (!--v73) {
                      goto LABEL_150;
                    }
                  }
                  char v76 = 1;
                }
                else
                {
LABEL_150:
                  char v76 = 0;
                }
                uint64_t v78 = v188;
                if (v188) {
                  *(_DWORD *)v188 += 2;
                }
                ++v60;
                v189[0] = v78;
                LOWORD(v189[1]) = 1;
                BYTE2(v189[1]) = v76;
                HIDWORD(v189[1]) = v60;
                uint64_t v79 = v225;
                if (v225 == v224)
                {
LABEL_162:
                  WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v223, (unint64_t)v189);
LABEL_181:
                  char v89 = v189[0];
                  v189[0] = 0;
                  if (v89)
                  {
                    if (*(_DWORD *)v89 == 2) {
                      WTF::StringImpl::destroy(v89, v57);
                    }
                    else {
                      *(_DWORD *)v89 -= 2;
                    }
                  }
                  __int16 v90 = v188;
                  v188 = 0;
                  if (v90)
                  {
                    if (*(_DWORD *)v90 == 2) {
                      WTF::StringImpl::destroy(v90, v57);
                    }
                    else {
                      *(_DWORD *)v90 -= 2;
                    }
                  }
                  goto LABEL_195;
                }
LABEL_180:
                uint64_t v88 = v223 + 16 * v79;
                v189[0] = 0;
                *(void *)uint64_t v88 = v78;
                *(WTF::StringImpl **)(v88 + 8) = v189[1];
                ++v225;
                goto LABEL_181;
              }
              if (_MergedGlobals_100 && v65 == *(void *)(*MEMORY[0x1E4FB6838] + 24))
              {
                if (v61)
                {
                  if (*(_DWORD *)(v61 + 28) == 2)
                  {
                    if ((*(_WORD *)(v61 + 34) & 0x400) == 0) {
                      WebCore::Node::removedLastRef((WebCore::Node *)v61);
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v61 + 28) -= 2;
                  }
                }
                char v77 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
                if (*MEMORY[0x1E4F30980]) {
                  *(_DWORD *)v77 += 2;
                }
                ++v60;
                v189[0] = v77;
                LOWORD(v189[1]) = 1;
                BYTE2(v189[1]) = 0;
                HIDWORD(v189[1]) = v60;
                if (v225 == v224)
                {
                  WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v223, (unint64_t)v189);
                }
                else
                {
                  uint64_t v91 = v223 + 16 * v225;
                  v189[0] = 0;
                  *(void *)uint64_t v91 = v77;
                  *(WTF::StringImpl **)(v91 + 8) = v189[1];
                  ++v225;
                }
                uint64_t v92 = v189[0];
                v189[0] = 0;
                if (v92)
                {
                  if (*(_DWORD *)v92 == 2) {
                    WTF::StringImpl::destroy(v92, v57);
                  }
                  else {
                    *(_DWORD *)v92 -= 2;
                  }
                }
                uint64_t v67 = 0;
                goto LABEL_195;
              }
            }
          }
          uint64_t v67 = v61;
LABEL_195:
          v62 += 8;
          uint64_t v61 = v67;
          if (v62 == v63) {
            goto LABEL_213;
          }
        }
      }
      uint64_t v67 = 0;
LABEL_213:
      uint64_t v20 = v185;
      int v226 = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)v10);
      char v212 = *(unsigned char *)(v10 + 305);
      if (v67)
      {
        if (*(_DWORD *)(v67 + 28) == 2)
        {
          if ((*(_WORD *)(v67 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v67);
          }
        }
        else
        {
          *(_DWORD *)(v67 + 28) -= 2;
        }
      }
      goto LABEL_333;
    }
    if (v56 == *(void *)(*MEMORY[0x1E4FB6690] + 24))
    {
      *(_DWORD *)(v10 + 28) += 2;
      char v218 = WebCore::HTMLFormControlElement::autocapitalizeType((WebCore::HTMLFormControlElement *)v10);
      char shouldAutocorrect = WebCore::HTMLFormControlElement::shouldAutocorrect((WebCore::HTMLFormControlElement *)v10);
      char v219 = 4;
      if ((*(unsigned int (**)(uint64_t))(*(void *)(v10 + 120) + 288))(v10 + 120)) {
        int v93 = (*(unsigned __int8 *)(v10 + 168) >> 5) & 1;
      }
      else {
        LOBYTE(v93) = 0;
      }
      char v213 = v93;
      WebCore::HTMLTextAreaElement::value((uint64_t *)v189, (WebCore::HTMLTextAreaElement *)v10);
      long long v101 = v189[0];
      v189[0] = 0;
      uint64_t v102 = v227;
      v227 = v101;
      if (!v102) {
        goto LABEL_229;
      }
      int v103 = *(_DWORD *)v102 - 2;
      if (*(_DWORD *)v102 == 2)
      {
        WTF::StringImpl::destroy(v102, v100);
        uint64_t v102 = v189[0];
        v189[0] = 0;
        if (!v102)
        {
LABEL_228:
          long long v101 = v227;
LABEL_229:
          if (v101) {
            BOOL v105 = *((_DWORD *)v101 + 1) == 0;
          }
          else {
            BOOL v105 = 1;
          }
          char hasAnyPlainText = !v105;
          MEMORY[0x19973F8E0](v189, v10);
          char v235 = WebCore::toAutofillFieldName((WebCore *)v189, v106);
          v108 = v189[1];
          v189[1] = 0;
          if (v108)
          {
            if (*(_DWORD *)v108 == 2) {
              WTF::StringImpl::destroy(v108, v107);
            }
            else {
              *(_DWORD *)v108 -= 2;
            }
          }
          v109 = v189[0];
          v189[0] = 0;
          if (v109)
          {
            if (*(_DWORD *)v109 == 2) {
              WTF::StringImpl::destroy(v109, v107);
            }
            else {
              *(_DWORD *)v109 -= 2;
            }
          }
          MEMORY[0x19973F8E0](v189, v10);
          char v236 = v190[0];
          v111 = v189[1];
          v189[1] = 0;
          if (v111)
          {
            if (*(_DWORD *)v111 == 2) {
              WTF::StringImpl::destroy(v111, v110);
            }
            else {
              *(_DWORD *)v111 -= 2;
            }
          }
          v112 = v189[0];
          v189[0] = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2) {
              WTF::StringImpl::destroy(v112, v110);
            }
            else {
              *(_DWORD *)v112 -= 2;
            }
          }
          uint64_t v113 = *(void *)(v10 + 112);
          if (v113
            && ((unsigned int v114 = *(_DWORD *)(v113 + 4), (v114 & 1) != 0)
              ? (uint64_t v115 = *(void *)(v113 + 40), LODWORD(v116) = *(_DWORD *)(v113 + 52))
              : (uint64_t v115 = v113 + 32, LODWORD(v116) = v114 >> 5),
                v116))
          {
            uint64_t v117 = *MEMORY[0x1E4FB67A8];
            uint64_t v116 = v116;
            long long v118 = (WTF::StringImpl **)(v115 + 8);
            while (1)
            {
              uint64_t v119 = (uint64_t)*(v118 - 1);
              if (v119 == v117
                || *(void *)(v119 + 24) == *(void *)(v117 + 24) && *(void *)(v119 + 32) == *(void *)(v117 + 32))
              {
                break;
              }
              v118 += 2;
              if (!--v116)
              {
                long long v118 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
                break;
              }
            }
          }
          else
          {
            long long v118 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
          }
          WTF::String::operator=(&v237, v118);
          char v220 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)v10);
          char v221 = WebCore::HTMLElement::canonicalEnterKeyHint((WebCore::HTMLElement *)v10);
          goto LABEL_333;
        }
        int v103 = *(_DWORD *)v102 - 2;
        if (*(_DWORD *)v102 == 2)
        {
          WTF::StringImpl::destroy(v102, v104);
          goto LABEL_228;
        }
      }
      *(_DWORD *)uint64_t v102 = v103;
      goto LABEL_228;
    }
    if (v56 != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
    {
LABEL_454:
      if (WebCore::Node::computeEditability())
      {
        char v219 = 1;
        if (v10 && (*(_WORD *)(v10 + 32) & 0x10) != 0)
        {
          *(_DWORD *)(v10 + 28) += 2;
          char shouldAutocorrect = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 1240))(v10);
          char v218 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 1232))(v10);
          char v220 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)v10);
          char v221 = WebCore::HTMLElement::canonicalEnterKeyHint((WebCore::HTMLElement *)v10);
          char v245 = 1;
          if (*(_DWORD *)(v10 + 28) == 2)
          {
            if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
          }
          else
          {
            *(_DWORD *)(v10 + 28) -= 2;
          }
        }
        else
        {
          char shouldAutocorrect = 1;
          char v218 = 0;
        }
        char v213 = 0;
        WebCore::makeRangeSelectingNodeContents((uint64_t *)v189, (WebCore *)v10, v99);
        char hasAnyPlainText = WebCore::hasAnyPlainText();
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v190);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v189);
      }
      goto LABEL_335;
    }
    int v94 = *(_DWORD *)(v10 + 28) + 2;
    *(_DWORD *)(v10 + 28) = v94;
    uint64_t v95 = *(void *)(v10 + 128);
    if (v95)
    {
      int v96 = *(WebCore::Element **)(v95 + 8);
      if (v96)
      {
        WebCore::Element::getURLAttribute((uint64_t *)v189, v96, MEMORY[0x1E4FB6538]);
        WTF::String::operator=(&v222, v189);
        uint64_t v98 = v189[0];
        v189[0] = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 2) {
            WTF::StringImpl::destroy(v98, v97);
          }
          else {
            *(_DWORD *)v98 -= 2;
          }
        }
        int v94 = *(_DWORD *)(v10 + 28);
      }
    }
    *(_DWORD *)(v10 + 28) = v94 + 2;
    uint64_t v186 = v10;
    WebCore::AutofillElements::computeAutofillElements();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v186);
    if (BYTE8(v190[0]))
    {
      char v230 = 1;
      BOOL v231 = (WTF::StringImpl *)v10 == v189[0];
    }
    std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)v189);
    uint64_t v120 = WebCore::Document::urlForBindings(*(WebCore::Document **)(*(void *)(v10 + 48) + 8));
    WTF::String::operator=(&v232, (WTF::StringImpl **)v120);
    long long v121 = *(_OWORD *)(v120 + 8);
    long long v234 = *(_OWORD *)(v120 + 24);
    long long v233 = v121;
    char v218 = WebCore::HTMLFormControlElement::autocapitalizeType((WebCore::HTMLFormControlElement *)v10);
    char shouldAutocorrect = WebCore::HTMLFormControlElement::shouldAutocorrect((WebCore::HTMLFormControlElement *)v10);
    uint64_t v122 = *(void *)(v10 + 112);
    if (v122
      && ((unsigned int v123 = *(_DWORD *)(v122 + 4), (v123 & 1) != 0)
        ? (uint64_t v124 = *(void *)(v122 + 40), LODWORD(v125) = *(_DWORD *)(v122 + 52))
        : (uint64_t v124 = v122 + 32, LODWORD(v125) = v123 >> 5),
          v125))
    {
      uint64_t v126 = *MEMORY[0x1E4FB67A8];
      uint64_t v125 = v125;
      v127 = (WTF::StringImpl **)(v124 + 8);
      while (1)
      {
        uint64_t v128 = (uint64_t)*(v127 - 1);
        if (v128 == v126
          || *(void *)(v128 + 24) == *(void *)(v126 + 24) && *(void *)(v128 + 32) == *(void *)(v126 + 32))
        {
          break;
        }
        v127 += 2;
        if (!--v125)
        {
          v127 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
          break;
        }
      }
    }
    else
    {
      v127 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
    }
    WTF::String::operator=(&v237, v127);
    BOOL v244 = (*(_WORD *)(v10 + 240) & 0x4000) != 0;
    if (WebCore::HTMLInputElement::isPasswordField((WebCore::HTMLInputElement *)v10))
    {
      char v129 = 3;
LABEL_301:
      char v219 = v129;
      goto LABEL_302;
    }
    if (WebCore::HTMLInputElement::isSearchField((WebCore::HTMLInputElement *)v10))
    {
LABEL_282:
      char v129 = 5;
      goto LABEL_301;
    }
    if (WebCore::HTMLInputElement::isEmailField((WebCore::HTMLInputElement *)v10))
    {
      char v129 = 6;
      goto LABEL_301;
    }
    if (WebCore::HTMLInputElement::isTelephoneField((WebCore::HTMLInputElement *)v10))
    {
      char v129 = 8;
      goto LABEL_301;
    }
    if (WebCore::HTMLInputElement::isNumberField((WebCore::HTMLInputElement *)v10))
    {
      Attribute = (void *)WebCore::Element::getAttribute((WebCore::Element *)v10, MEMORY[0x1E4FB6670]);
      if ((MEMORY[0x19972E990](*Attribute, "\\d*", 3) & 1) != 0
        || (v131 = (void *)WebCore::Element::getAttribute((WebCore::Element *)v10, MEMORY[0x1E4FB6670]),
            MEMORY[0x19972E990](*v131, "[0-9]*", 6)))
      {
        char v129 = 10;
      }
      else
      {
        char v129 = 9;
      }
      goto LABEL_301;
    }
    if (WebCore::HTMLInputElement::isDateTimeLocalField((WebCore::HTMLInputElement *)v10))
    {
      char v129 = 12;
      goto LABEL_301;
    }
    if (WebCore::HTMLInputElement::isDateField((WebCore::HTMLInputElement *)v10))
    {
      char v129 = 11;
      goto LABEL_301;
    }
    if (WebCore::HTMLInputElement::isTimeField((WebCore::HTMLInputElement *)v10))
    {
      char v132 = 15;
    }
    else if (WebCore::HTMLInputElement::isWeekField((WebCore::HTMLInputElement *)v10))
    {
      char v132 = 14;
    }
    else if (WebCore::HTMLInputElement::isMonthField((WebCore::HTMLInputElement *)v10))
    {
      char v132 = 13;
    }
    else
    {
      if (!WebCore::HTMLInputElement::isURLField((WebCore::HTMLInputElement *)v10))
      {
        if (WebCore::HTMLInputElement::isText((WebCore::HTMLInputElement *)v10))
        {
          uint64_t v153 = *(void *)(v10 + 112);
          if (v153
            && ((unsigned int v154 = *(_DWORD *)(v153 + 4), (v154 & 1) != 0)
              ? (uint64_t v155 = *(void *)(v153 + 40), LODWORD(v156) = *(_DWORD *)(v153 + 52))
              : (uint64_t v155 = v153 + 32, LODWORD(v156) = v154 >> 5),
                v156))
          {
            uint64_t v161 = *MEMORY[0x1E4FB6670];
            uint64_t v156 = v156;
            v162 = (void *)(v155 + 8);
            while (1)
            {
              uint64_t v163 = *(v162 - 1);
              if (v163 == v161
                || *(void *)(v163 + 24) == *(void *)(v161 + 24) && *(void *)(v163 + 32) == *(void *)(v161 + 32))
              {
                break;
              }
              v162 += 2;
              if (!--v156)
              {
                v162 = (void *)MEMORY[0x1E4F30968];
                break;
              }
            }
          }
          else
          {
            v162 = (void *)MEMORY[0x1E4F30968];
          }
          if ((MEMORY[0x19972E990](*v162, "\\d*", 3) & 1) != 0
            || MEMORY[0x19972E990](*v162, "[0-9]*", 6))
          {
            char v132 = 10;
            goto LABEL_395;
          }
          char v219 = 2;
          if (v222 && *(_DWORD *)(v222 + 4))
          {
            uint64_t v164 = *(void *)(v10 + 112);
            if (v164 && (unsigned int v165 = *(_DWORD *)(v164 + 4), (v165 & 2) != 0))
            {
              if (v165)
              {
                v167 = *(uint64_t **)(v164 + 40);
                LODWORD(v168) = *(_DWORD *)(v164 + 52);
              }
              else
              {
                v167 = (uint64_t *)(v164 + 32);
                LODWORD(v168) = v165 >> 5;
              }
              if (v168)
              {
                uint64_t v169 = *MEMORY[0x1E4FB69D0];
                uint64_t v168 = v168;
                while (1)
                {
                  uint64_t v170 = *v167;
                  if (*v167 == v169
                    || *(void *)(v170 + 24) == *(void *)(v169 + 24)
                    && *(void *)(v170 + 32) == *(void *)(v169 + 32))
                  {
                    break;
                  }
                  v167 += 2;
                  if (!--v168) {
                    goto LABEL_410;
                  }
                }
              }
              else
              {
LABEL_410:
                v167 = 0;
              }
              v166 = v167 + 1;
            }
            else
            {
              v166 = (void *)MEMORY[0x1E4F30968];
            }
            if (*v166)
            {
              if (WTF::StringImpl::find() != -1) {
                goto LABEL_282;
              }
              uint64_t v164 = *(void *)(v10 + 112);
            }
            if (v164 && *(void *)(v164 + 24))
            {
              unsigned int v171 = *(_DWORD *)(v164 + 4);
              if (v171)
              {
                v172 = *(uint64_t **)(v164 + 40);
                LODWORD(v173) = *(_DWORD *)(v164 + 52);
              }
              else
              {
                v172 = (uint64_t *)(v164 + 32);
                LODWORD(v173) = v171 >> 5;
              }
              if (v173)
              {
                uint64_t v175 = *MEMORY[0x1E4FB6898];
                uint64_t v173 = v173;
                while (1)
                {
                  uint64_t v176 = *v172;
                  if (*v172 == v175
                    || *(void *)(v176 + 24) == *(void *)(v175 + 24)
                    && *(void *)(v176 + 32) == *(void *)(v175 + 32))
                  {
                    break;
                  }
                  v172 += 2;
                  if (!--v173) {
                    goto LABEL_427;
                  }
                }
              }
              else
              {
LABEL_427:
                v172 = 0;
              }
              v174 = v172 + 1;
            }
            else
            {
              v174 = (void *)MEMORY[0x1E4F30968];
            }
            if (*v174)
            {
              if (WTF::StringImpl::find() != -1) {
                goto LABEL_282;
              }
              uint64_t v164 = *(void *)(v10 + 112);
            }
            if (v164
              && ((unsigned int v177 = *(_DWORD *)(v164 + 4), (v177 & 1) != 0)
                ? (uint64_t v178 = *(void *)(v164 + 40), v179 = *(_DWORD *)(v164 + 52))
                : (uint64_t v178 = v164 + 32, v179 = v177 >> 5),
                  v179))
            {
              uint64_t v180 = *MEMORY[0x1E4FB6B20];
              uint64_t v181 = v179;
              v182 = (void *)(v178 + 8);
              while (1)
              {
                uint64_t v183 = *(v182 - 1);
                if (v183 == v180
                  || *(void *)(v183 + 24) == *(void *)(v180 + 24)
                  && *(void *)(v183 + 32) == *(void *)(v180 + 32))
                {
                  break;
                }
                v182 += 2;
                if (!--v181)
                {
                  v182 = (void *)MEMORY[0x1E4F30968];
                  break;
                }
              }
            }
            else
            {
              v182 = (void *)MEMORY[0x1E4F30968];
            }
            if (*v182 && WTF::StringImpl::find() != -1) {
              goto LABEL_282;
            }
          }
        }
        else if (WebCore::HTMLInputElement::isColorControl((WebCore::HTMLInputElement *)v10))
        {
          char v219 = 18;
          WebCore::HTMLInputElement::valueAsColor((uint64_t *)v189, (WebCore::HTMLInputElement *)v10);
          WebCore::Color::operator=();
          if (((unint64_t)v189[0] & 0x8000000000000) != 0)
          {
            v184 = (unsigned int *)((unint64_t)v189[0] & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v189[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v184);
              WTF::fastFree((WTF *)v184, v157);
            }
          }
          WebCore::HTMLInputElement::suggestedColors((uint64_t *)v189, (WebCore::HTMLInputElement *)v10);
          if (HIDWORD(v243)) {
            WTF::VectorDestructor<true,WebCore::Color>::destruct(v242, (void *)v242 + HIDWORD(v243));
          }
          v159 = v242;
          if (v242)
          {
            v242 = 0;
            LODWORD(v243) = 0;
            WTF::fastFree(v159, v158);
          }
          v242 = v189[0];
          v160 = v189[1];
          v189[0] = 0;
          v189[1] = 0;
          v243 = v160;
          WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v189, v158);
        }
LABEL_302:
        char isFocusingWithDataListDropdown = WebCore::HTMLInputElement::isFocusingWithDataListDropdown((WebCore::HTMLInputElement *)v10);
        MEMORY[0x19973E940](v189, v10);
        v133 = v189[0];
        BOOL v240 = v189[0] != 0;
        v189[0] = 0;
        if (v133)
        {
          if (*((_DWORD *)v133 + 7) == 2)
          {
            if ((*((_WORD *)v133 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v133);
            }
          }
          else
          {
            *((_DWORD *)v133 + 7) -= 2;
          }
        }
        char v220 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)v10);
        char v221 = WebCore::HTMLElement::canonicalEnterKeyHint((WebCore::HTMLElement *)v10);
        if ((*(unsigned int (**)(uint64_t))(*(void *)(v10 + 120) + 288))(v10 + 120)) {
          int v134 = (*(unsigned __int8 *)(v10 + 168) >> 5) & 1;
        }
        else {
          LOBYTE(v134) = 0;
        }
        char v213 = v134;
        WebCore::HTMLInputElement::value((uint64_t *)v189, (WebCore::HTMLInputElement *)v10);
        v136 = v189[0];
        v189[0] = 0;
        v137 = v227;
        v227 = v136;
        if (!v137) {
          goto LABEL_314;
        }
        int v138 = *(_DWORD *)v137 - 2;
        if (*(_DWORD *)v137 == 2)
        {
          WTF::StringImpl::destroy(v137, v135);
          v137 = v189[0];
          v189[0] = 0;
          if (!v137)
          {
LABEL_313:
            v136 = v227;
LABEL_314:
            if (v136) {
              BOOL v140 = *((_DWORD *)v136 + 1) == 0;
            }
            else {
              BOOL v140 = 1;
            }
            char hasAnyPlainText = !v140;
            WebCore::HTMLInputElement::valueAsNumber((WebCore::HTMLInputElement *)v10);
            uint64_t v228 = v141;
            MEMORY[0x19973F8E0](v189, v10);
            char v235 = WebCore::toAutofillFieldName((WebCore *)v189, v142);
            v144 = v189[1];
            v189[1] = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2) {
                WTF::StringImpl::destroy(v144, v143);
              }
              else {
                *(_DWORD *)v144 -= 2;
              }
            }
            v145 = v189[0];
            v189[0] = 0;
            if (v145)
            {
              if (*(_DWORD *)v145 == 2) {
                WTF::StringImpl::destroy(v145, v143);
              }
              else {
                *(_DWORD *)v145 -= 2;
              }
            }
            MEMORY[0x19973F8E0](v189, v10);
            char v236 = v190[0];
            v147 = v189[1];
            v189[1] = 0;
            if (v147)
            {
              if (*(_DWORD *)v147 == 2) {
                WTF::StringImpl::destroy(v147, v146);
              }
              else {
                *(_DWORD *)v147 -= 2;
              }
            }
            v148 = v189[0];
            v189[0] = 0;
            if (v148)
            {
              if (*(_DWORD *)v148 == 2) {
                WTF::StringImpl::destroy(v148, v146);
              }
              else {
                *(_DWORD *)v148 -= 2;
              }
            }
LABEL_333:
            if (*(_DWORD *)(v10 + 28) == 2)
            {
              if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
              }
            }
            else
            {
              *(_DWORD *)(v10 + 28) -= 2;
            }
LABEL_335:
            v149 = *(WebCore::Quirks **)(*(void *)(*(void *)(v10 + 48) + 8) + 720);
            if (!v149) {
              v149 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(void *)(v10 + 48)
            }
                                                                                              + 8));
            if (WebCore::Quirks::shouldSuppressAutocorrectionAndAutocapitalizationInHiddenEditableAreas(v149)
              && WebKit::WebPage::isTransparentOrFullyClipped((WebKit::WebPage *)this, (const WebCore::Element *)v10))
            {
              char v218 = 1;
              char shouldAutocorrect = 0;
            }
            v150 = *(WebCore::Document **)(*(void *)(v10 + 48) + 8);
            v151 = (WebCore::Quirks *)*((void *)v150 + 90);
            if (!v151) {
              v151 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v150);
            }
            char v248 = WebCore::Quirks::shouldAvoidResizingWhenInputViewBoundsChange(v151);
            char IsVisible = WebCore::Quirks::shouldAvoidScrollingWhenFocusedContentIsVisible(v151);
            char shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation = WebCore::Quirks::shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation(v151);
            WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)a2, &v193);
            a2[416] = 1;
            if (v20)
            {
              if (*(_DWORD *)(v20 + 28) == 2)
              {
                if ((*(_WORD *)(v20 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v20);
                }
              }
              else
              {
                *(_DWORD *)(v20 + 28) -= 2;
              }
            }
            WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&v193, v152);
LABEL_18:
            if (*(_DWORD *)(v10 + 28) == 2)
            {
              if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
              }
            }
            else
            {
              *(_DWORD *)(v10 + 28) -= 2;
            }
LABEL_21:
            if (!v7) {
              return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5 + 2);
            }
LABEL_22:
            if (*(_DWORD *)(v7 + 28) == 2)
            {
              if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v7);
              }
            }
            else
            {
              *(_DWORD *)(v7 + 28) -= 2;
            }
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5 + 2);
          }
          int v138 = *(_DWORD *)v137 - 2;
          if (*(_DWORD *)v137 == 2)
          {
            WTF::StringImpl::destroy(v137, v139);
            goto LABEL_313;
          }
        }
        *(_DWORD *)v137 = v138;
        goto LABEL_313;
      }
      char v132 = 7;
    }
LABEL_395:
    char v219 = v132;
    goto LABEL_302;
  }
  *a2 = 0;
  a2[416] = 0;
  return result;
}

void sub_198F27AFC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (*(_DWORD *)(v29 + 28) == 2)
  {
    if ((*(_WORD *)(v29 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v29);
    }
  }
  else
  {
    *(_DWORD *)(v29 + 28) -= 2;
  }
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a10);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a27, a2);
  if (v29)
  {
    if (*(_DWORD *)(v29 + 28) == 2)
    {
      if ((*(_WORD *)(v29 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v29);
      }
    }
    else
    {
      *(_DWORD *)(v29 + 28) -= 2;
    }
  }
  if (*(_DWORD *)(v28 + 28) == 2)
  {
    if ((*(_WORD *)(v28 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v28);
    }
  }
  else
  {
    *(_DWORD *)(v28 + 28) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v27 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::updateFocusedElementInformation(WebKit::WebPage *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 201);
  *((void *)this + 201) = v2 & 0xFDFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebKit::WebPage *)((char *)this + 1576));
  }
  if (*((void *)this + 116))
  {
    WebKit::WebPage::focusedElementInformation((WebCore::Page **)this, v12);
    if (v13)
    {
      uint64_t v4 = *((void *)this + 4);
      uint64_t v3 = (char *)this + 32;
      uint64_t v5 = (*(uint64_t (**)(char *))(v4 + 56))(v3);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 2113;
      *((void *)v6 + 1) = v5;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      uint64_t v11 = v6;
      IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::encode(v6, (uint64_t)v12);
      (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v11, 0);
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8)
      {
        IPC::Encoder::~Encoder(v8, v7);
        WTF::fastFree(v9, v10);
      }
      if (v13) {
        WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v12, v7);
      }
    }
  }
}

void sub_198F28030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t WebKit::WebPage::requestDragStart(uint64_t result, const IntPoint *a2, const IntPoint *a3, char a4)
{
  uint64_t v4 = result;
  char v5 = *(unsigned char *)(result + 796);
  *(unsigned char *)(result + 796) = a4;
  uint64_t v6 = *(void *)(*(void *)(result + 48) + 160);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v6 + 144) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    char v8 = WebCore::EventHandler::tryToBeginDragAtPoint(*(WebCore::EventHandler **)(v6 + 624), a2, a3);
    uint64_t result = IPC::MessageSender::send<Messages::WebPageProxy::DidHandleDragStartRequest>(v4 + 32, &v8);
  }
  *(unsigned char *)(v4 + 796) = v5;
  return result;
}

void sub_198F280D4(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 796) = v2;
  _Unwind_Resume(a1);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidHandleDragStartRequest>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 1930;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  char v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F281D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPage::requestAdditionalItemsForDragSession(uint64_t a1, const IntPoint *a2, const IntPoint *a3, char a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(a1 + 796);
  *(unsigned char *)(a1 + 796) = a4;
  char v8 = (WebCore *)WTF::WallTime::now((WTF::WallTime *)a1);
  v22[4] = v9;
  __int16 v23 = 5;
  char v24 = 0;
  char v25 = 0;
  __int16 v26 = 0;
  IntPoint v27 = *a2;
  IntPoint v28 = *a3;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = 0;
  int v32 = 1;
  uint64_t v10 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v8);
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v33 = v10;
  uint64_t v34 = 0;
  __int16 v35 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  WebCore::DragController::dragEnded(*(WebCore::DragController **)(*(void *)(a1 + 48) + 64));
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 160);
  if (v12)
  {
    if (!*(unsigned char *)(v12 + 144))
    {
      WebCore::EventHandler::dragSourceEndedAt();
      char v21 = WebCore::EventHandler::tryToBeginDragAtPoint(*(WebCore::EventHandler **)(v12 + 624), a2, a3);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
      uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v14 = 1929;
      *((void *)v14 + 1) = v13;
      *((void *)v14 + 66) = (char *)v14 + 16;
      *((void *)v14 + 67) = 512;
      *((void *)v14 + 68) = 0;
      *((void *)v14 + 70) = 0;
      *((void *)v14 + 69) = 0;
      IPC::Encoder::encodeHeader(v14);
      v22[0] = v14;
      IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v14, &v21);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 32) + 32))(a1 + 32, v22, 0);
      uint64_t v15 = v22[0];
      v22[0] = 0;
      if (v15)
      {
        IPC::Encoder::~Encoder(v15, v11);
        WTF::fastFree(v19, v20);
      }
    }
  }
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v11);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v16);
  uint64_t result = v33;
  uint64_t v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *(unsigned char *)(a1 + 796) = v7;
  return result;
}

void sub_198F28430(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, IPC::Encoder *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,...)
{
  va_start(va, a26);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v31);
  uint64_t v33 = *(WTF::StringImpl **)(v29 + 104);
  *(void *)(v29 + 104) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  *(unsigned char *)(v26 + 796) = v28;
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPage::insertDroppedImagePlaceholders(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)WebCore::DragController::insertDroppedImagePlaceholdersAtCaret();
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 64);
  unint64_t v83 = 0;
  uint64_t v84 = 0;
  unint64_t v8 = *(unsigned int *)(v7 + 124);
  if (v8)
  {
    if (v8 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * v8));
    LODWORD(v84) = v8;
    unint64_t v83 = (WTF *)v9;
    if (*(_DWORD *)(v7 + 124))
    {
      unint64_t v8 = 0;
      uint64_t v11 = (const WebCore::Node **)(v9 + 8);
      do
      {
        *(v11 - 1) = (const WebCore::Node *)WebKit::WebPage::rootViewBounds(*(WebKit::WebPage **)(*(void *)(v7 + 112) + 8 * v8), v10);
        *uint64_t v11 = v10;
        HIDWORD(v84) = ++v8;
        v11 += 2;
      }
      while (v8 < *(unsigned int *)(v7 + 124));
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 64);
  LOBYTE(v78) = 0;
  char v82 = 0;
  if (*(unsigned char *)(v12 + 160))
  {
    uint64_t v13 = *(void *)(v12 + 128);
    *(_DWORD *)(v13 + 28) += 2;
    uint64_t v78 = v13;
    int v79 = *(_DWORD *)(v12 + 136);
    uint64_t v14 = *(void *)(v12 + 144);
    *(_DWORD *)(v14 + 28) += 2;
    uint64_t v80 = v14;
    int v81 = *(_DWORD *)(v12 + 152);
    char v82 = 1;
    unsigned int v15 = *(_DWORD *)(a2 + 12);
    if (v8 == v15)
    {
      buf[0] = 0;
      char v92 = 0;
      WebCore::TextIndicator::createWithRange();
      if (v61)
      {
        WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v54, (const WebCore::TextIndicatorData *)(v61 + 8));
        std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>((uint64_t)buf, v54);
        if ((v60 & 0x8000000000000) != 0)
        {
          __int16 v42 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v42);
            WTF::fastFree((WTF *)v42, v16);
          }
        }
        uint64_t v17 = v59;
        uint64_t v59 = 0;
        if (v17)
        {
          if (v17[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
          }
          else {
            --v17[2];
          }
        }
        uint64_t v26 = v58;
        uint64_t v58 = 0;
        if (v26)
        {
          if (v26[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
          }
          else {
            --v26[2];
          }
        }
        uint64_t v27 = v57;
        uint64_t v57 = 0;
        if (v27)
        {
          if (v27[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
          }
          else {
            --v27[2];
          }
        }
        char v28 = v55;
        if (v55)
        {
          uint64_t v55 = 0;
          int v56 = 0;
          WTF::fastFree(v28, v16);
        }
        uint64_t v29 = (WebCore::TextIndicator *)v61;
        uint64_t v61 = 0;
        if (v29) {
          WTF::RefCounted<WebCore::TextIndicator>::deref(v29);
        }
      }
      std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v46, (uint64_t)buf);
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)&v83, (uint64_t)v46);
      if (v53)
      {
        if ((v52 & 0x8000000000000) != 0)
        {
          uint64_t v43 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v43);
            WTF::fastFree((WTF *)v43, v19);
          }
        }
        uint64_t v30 = v51;
        uint64_t v51 = 0;
        if (v30)
        {
          if (v30[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
          }
          else {
            --v30[2];
          }
        }
        uint64_t v31 = v50;
        unsigned int v50 = 0;
        if (v31)
        {
          if (v31[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
          }
          else {
            --v31[2];
          }
        }
        int v32 = v49;
        uint64_t v49 = 0;
        if (v32)
        {
          if (v32[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v32 + 8))(v32);
          }
          else {
            --v32[2];
          }
        }
        uint64_t v33 = v47;
        if (v47)
        {
          int v47 = 0;
          int v48 = 0;
          WTF::fastFree(v33, v19);
        }
      }
      if (!v92) {
        goto LABEL_101;
      }
      if ((v91 & 0x8000000000000) != 0)
      {
        uint64_t v44 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v44);
          WTF::fastFree((WTF *)v44, v19);
        }
      }
      uint64_t v34 = v90;
      __int16 v90 = 0;
      if (v34)
      {
        if (v34[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
        }
        else {
          --v34[2];
        }
      }
      __int16 v35 = v89;
      char v89 = 0;
      if (v35)
      {
        if (v35[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
        }
        else {
          --v35[2];
        }
      }
      long long v36 = v88;
      uint64_t v88 = 0;
      if (v36)
      {
        if (v36[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
        }
        else {
          --v36[2];
        }
      }
      long long v37 = v86;
      if (!v86) {
        goto LABEL_101;
      }
      uint64_t v86 = 0;
      int v87 = 0;
      goto LABEL_100;
    }
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(a2 + 12);
    if (v8 == v15)
    {
      int v18 = qword_1EB357DA8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "Failed to insert dropped image placeholders: no image placeholder range.", buf, 2u);
      }
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      v62[0] = 0;
      char v69 = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)buf, (uint64_t)v62);
      if (!v69) {
        goto LABEL_98;
      }
      if ((v68 & 0x8000000000000) != 0)
      {
        uint64_t v45 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v19);
        }
      }
      uint64_t v20 = v67;
      uint64_t v67 = 0;
      if (v20)
      {
        if (v20[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
        }
        else {
          --v20[2];
        }
      }
      uint64_t v38 = v66;
      uint64_t v66 = 0;
      if (v38)
      {
        if (v38[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v38 + 8))(v38);
        }
        else {
          --v38[2];
        }
      }
      uint64_t v39 = v65;
      uint64_t v65 = 0;
      if (v39)
      {
        if (v39[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
        }
        else {
          --v39[2];
        }
      }
      char v25 = v63;
      if (!v63) {
        goto LABEL_98;
      }
      uint64_t v63 = 0;
      int v64 = 0;
      goto LABEL_97;
    }
  }
  char v21 = qword_1EB357DA8;
  if (os_log_type_enabled((os_log_t)qword_1EB357DA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(void *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v15;
    _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "Failed to insert dropped image placeholders: placeholder rect count (%tu) does not match image size count (%tu).", buf, 0x16u);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  v70[0] = 0;
  char v77 = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)buf, (uint64_t)v70);
  if (!v77) {
    goto LABEL_98;
  }
  if ((v76 & 0x8000000000000) != 0)
  {
    char v41 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v19);
    }
  }
  uint64_t v22 = v75;
  uint64_t v75 = 0;
  if (v22)
  {
    if (v22[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
    }
    else {
      --v22[2];
    }
  }
  __int16 v23 = v74;
  uint64_t v74 = 0;
  if (v23)
  {
    if (v23[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
    }
    else {
      --v23[2];
    }
  }
  char v24 = v73;
  unint64_t v73 = 0;
  if (v24)
  {
    if (v24[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
    }
    else {
      --v24[2];
    }
  }
  char v25 = v71;
  if (!v71) {
    goto LABEL_98;
  }
  unint64_t v71 = 0;
  int v72 = 0;
LABEL_97:
  WTF::fastFree(v25, v19);
LABEL_98:
  long long v37 = *(WTF **)buf;
  if (!*(void *)buf) {
    goto LABEL_101;
  }
  *(void *)buf = 0;
  *(_DWORD *)&buf[8] = 0;
LABEL_100:
  WTF::fastFree(v37, v19);
LABEL_101:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78);
  uint64_t result = v83;
  if (v83)
  {
    unint64_t v83 = 0;
    LODWORD(v84) = 0;
    return (WTF *)WTF::fastFree(result, v40);
  }
  return result;
}

void sub_198F28CD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF *a46,uint64_t a47,uint64_t a48,_DWORD *a49,_DWORD *a50,_DWORD *a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a54)
  {
    if ((a52 & 0x8000000000000) != 0)
    {
      int v56 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a52 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v56);
        WTF::fastFree((WTF *)v56, a2);
      }
    }
    if (a51)
    {
      if (a51[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a51 + 8))(a51);
      }
      else {
        --a51[2];
      }
    }
    if (a50)
    {
      if (a50[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a50 + 8))(a50);
      }
      else {
        --a50[2];
      }
    }
    if (a49)
    {
      if (a49[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a49 + 8))(a49);
      }
      else {
        --a49[2];
      }
    }
    if (a46) {
      WTF::fastFree(a46, a2);
    }
  }
  uint64_t v57 = *(WTF **)(v54 - 192);
  if (v57)
  {
    *(void *)(v54 - 192) = 0;
    *(_DWORD *)(v54 - 184) = 0;
    WTF::fastFree(v57, a2);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v54 - 248);
  uint64_t v59 = *(WTF **)(v54 - 208);
  if (v59)
  {
    *(void *)(v54 - 208) = 0;
    *(_DWORD *)(v54 - 200) = 0;
    WTF::fastFree(v59, v58);
  }
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebPage::didConcludeDrop(WebKit::WebPage *this)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100]((uint64_t *)this + 101);
  uint64_t result = (uint64_t *)*((void *)this + 100);
  if (result)
  {
    *((void *)this + 100) = 0;
    return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(result, v2);
  }
  return result;
}

uint64_t WebKit::WebPage::didConcludeEditDrag(WebKit::WebPage *this)
{
  char v2 = (char *)this + 32;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2124;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  v31[0] = v4;
  (*(void (**)(char *, WebCore::FocusController **, void))(*(void *)v2 + 32))(v2, v31, 0);
  uint64_t v6 = v31[0];
  v31[0] = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v20, v21);
  }
  WebCore::Page::layoutIfNeeded();
  unint64_t v8 = (uint64_t *)*((void *)this + 100);
  if (v8)
  {
    *((void *)this + 100) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(v8, v7);
  }
  WebCore::Page::checkedFocusController((uint64_t *)v31, *((WebCore::Page **)this + 6));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v31[0]);
  uint64_t v10 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v11 = v31[0];
  v31[0] = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      uint64_t result = 286;
      __break(0xC471u);
      goto LABEL_23;
    }
    --*(_DWORD *)v11;
  }
  if (!result) {
    return result;
  }
  WebCore::VisibleSelection::toNormalizedRange((uint64_t *)v31, (WebCore::VisibleSelection *)(*(void *)(*(void *)(result + 296) + 3096) + 56));
  if (v34)
  {
    WebCore::visibleImageElementsInRangeWithNonLoadedImages();
    uint64_t v13 = v26;
    uint64_t v26 = 0;
    uint64_t result = *((void *)this + 100);
    *((void *)this + 100) = v13;
    if (result)
    {
      WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable((uint64_t *)result, v12);
      uint64_t result = (uint64_t)v26;
      if (v26) {
        uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(v26, v14);
      }
    }
    if (v34)
    {
      uint64_t v15 = v32;
      int v16 = v33;
      int v17 = *(_DWORD *)(v32 + 28);
      uint64_t v35 = v32;
      int v36 = v33;
      *(_DWORD *)(v32 + 28) = v17 + 4;
      uint64_t v37 = v15;
      int v38 = v16;
      WebCore::SimpleRange::SimpleRange();
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v37);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v35);
      uint64_t v26 = v22;
      int v27 = v23;
      uint64_t v18 = v24;
      uint64_t v22 = 0;
      uint64_t v24 = 0;
      uint64_t v28 = v18;
      int v29 = v25;
      char v30 = 1;
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v24);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v22);
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)this + 101, (uint64_t)v31);
      goto LABEL_17;
    }
LABEL_23:
    __break(1u);
    return result;
  }
LABEL_17:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31);
  uint64_t v19 = *((void *)this + 100);
  if (!v19 || !*(_DWORD *)(v19 - 12)) {
    WebKit::WebPage::computeAndSendEditDragSnapshot(this);
  }
  return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
}

void sub_198F2958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, IPC::Encoder *a18)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPage::computeAndSendEditDragSnapshot(WebKit::WebPage *this)
{
  v37[0] = 0;
  char v44 = 0;
  char v2 = (uint64_t *)((char *)this + 808);
  LOBYTE(v32) = 0;
  char v36 = 0;
  if (*((unsigned char *)this + 840))
  {
    uint64_t v3 = *((void *)this + 101);
    *((void *)this + 101) = 0;
    uint64_t v32 = v3;
    int v33 = *((_DWORD *)this + 204);
    uint64_t v4 = *((void *)this + 103);
    *((void *)this + 103) = 0;
    uint64_t v34 = v4;
    int v35 = *((_DWORD *)this + 208);
    char v36 = 1;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](v2);
    WebCore::TextIndicator::createWithRange();
    if (v31)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v24, (const WebCore::TextIndicatorData *)(v31 + 8));
      std::optional<WebCore::TextIndicatorData>::operator=[abi:sn180100]<WebCore::TextIndicatorData,void>((uint64_t)v37, (long long *)v24);
      if ((v30 & 0x8000000000000) != 0)
      {
        int v23 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v5);
        }
      }
      uint64_t v6 = v29;
      int v29 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        }
        else {
          --v6[2];
        }
      }
      uint64_t v7 = v28;
      uint64_t v28 = 0;
      if (v7)
      {
        if (v7[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
        }
        else {
          --v7[2];
        }
      }
      unint64_t v8 = v27;
      int v27 = 0;
      if (v8)
      {
        if (v8[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
        }
        else {
          --v8[2];
        }
      }
      uint64_t v9 = v25;
      if (v25)
      {
        int v25 = 0;
        int v26 = 0;
        WTF::fastFree(v9, v5);
      }
      uint64_t v10 = (WebCore::TextIndicator *)v31;
      uint64_t v31 = 0;
      if (v10) {
        WTF::RefCounted<WebCore::TextIndicator>::deref(v10);
      }
    }
  }
  else
  {
    std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](v2);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
  uint64_t v12 = *((void *)this + 4);
  uint64_t v11 = (char *)this + 32;
  uint64_t v13 = (*(uint64_t (**)(char *))(v12 + 56))(v11);
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 1939;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  v24[0] = v14;
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData> const&>(v14, (uint64_t)v37);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v11 + 32))(v11, v24, 0);
  uint64_t result = v24[0];
  v24[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  if (v44)
  {
    if ((v43 & 0x8000000000000) != 0)
    {
      uint64_t v22 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v15);
      }
    }
    int v17 = v42;
    __int16 v42 = 0;
    if (v17)
    {
      if (v17[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
      }
      else {
        --v17[2];
      }
    }
    uint64_t v18 = v41;
    char v41 = 0;
    if (v18)
    {
      if (v18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
      }
      else {
        --v18[2];
      }
    }
    uint64_t v19 = v40;
    char v40 = 0;
    if (v19)
    {
      if (v19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
      }
      else {
        --v19[2];
      }
    }
    uint64_t result = v38;
    if (v38)
    {
      int v38 = 0;
      int v39 = 0;
      return (IPC::Encoder *)WTF::fastFree(result, v15);
    }
  }
  return result;
}

void sub_198F29A00(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,WebCore::TextIndicator *a24,char a25)
{
  if ((a22 & 0x8000000000000) != 0)
  {
    int v27 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
    }
    else {
      --a21[2];
    }
  }
  if (a20)
  {
    if (a20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
    }
    else {
      --a20[2];
    }
  }
  if (a19)
  {
    if (a19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
    }
    else {
      --a19[2];
    }
  }
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  if (a24) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(a24);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a25);
  if (*(unsigned char *)(v25 - 40))
  {
    uint64_t v29 = *(void *)(v25 - 56);
    if ((v29 & 0x8000000000000) != 0)
    {
      uint64_t v34 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, v28);
      }
    }
    uint64_t v30 = *(_DWORD **)(v25 - 64);
    *(void *)(v25 - 64) = 0;
    if (v30)
    {
      if (v30[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
      }
      else {
        --v30[2];
      }
    }
    uint64_t v31 = *(_DWORD **)(v25 - 72);
    *(void *)(v25 - 72) = 0;
    if (v31)
    {
      if (v31[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
      }
      else {
        --v31[2];
      }
    }
    uint64_t v32 = *(_DWORD **)(v25 - 80);
    *(void *)(v25 - 80) = 0;
    if (v32)
    {
      if (v32[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v32 + 8))(v32);
      }
      else {
        --v32[2];
      }
    }
    int v33 = *(WTF **)(v25 - 104);
    if (v33)
    {
      *(void *)(v25 - 104) = 0;
      *(_DWORD *)(v25 - 96) = 0;
      WTF::fastFree(v33, v28);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebPage::didFinishLoadingImageForElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 800);
  uint64_t v9 = a2;
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>((uint64_t *)(a1 + 800), &v9);
  uint64_t v5 = *(void *)(a1 + 800);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::remove(v3, result);
    uint64_t v5 = *v3;
  }
  if (v5) {
    BOOL v7 = *(_DWORD *)(v5 - 12) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v8 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v8 = &unk_1EE9DFC58;
  *(void *)(v8 + 8) = a1;
  *(unsigned char *)(v8 + 16) = v7;
  uint64_t v9 = (uint64_t *)v8;
  WebCore::DragController::finalizeDroppedImagePlaceholder();
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

void sub_198F29D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

FloatQuad *WebKit::WebPage::sendTapHighlightForNodeIfNecessary(FloatQuad *result, uint64_t a2, FloatQuad *this)
{
  uint64_t v56 = a2;
  if (!this) {
    return result;
  }
  uint64_t v3 = result;
  FloatPoint m_p3 = result[1].m_p3;
  uint64_t v5 = *(void *)(*(void *)&m_p3 + 160);
  if (!v5 || *(unsigned char *)(v5 + 144) != 0) {
    return result;
  }
  if (*(unsigned char *)(*(void *)&m_p3 + 656))
  {
    uint64_t result = (FloatQuad *)WebCore::Document::body(*(WebCore::Document **)(v5 + 296));
    if (result == this) {
      return result;
    }
  }
  if ((LOWORD(this[1].m_p1.m_x) & 8) != 0)
  {
    LODWORD(this->m_p4.m_y) += 2;
    uint64_t v8 = *(void *)(*(void *)(v5 + 280) + 16);
    WebCore::Element::absoluteLinkURL((uint64_t *)v54, (WebCore::Element *)this);
    WTF::URL::host((WTF::URL *)v54);
    if ((v9 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    (*(void (**)(uint64_t, FloatQuad **))(*(void *)v8 + 1104))(v8, &v52);
    uint64_t v11 = v52;
    uint64_t v52 = 0;
    if (v11)
    {
      if (LODWORD(v11->m_p1.m_x) == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)v11, v10);
      }
      else {
        LODWORD(v11->m_p1.m_x) -= 2;
      }
    }
    uint64_t result = (FloatQuad *)v54[0];
    v54[0] = 0;
    if (result)
    {
      if (LODWORD(result->m_p1.m_x) == 2) {
        uint64_t result = (FloatQuad *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      }
      else {
        LODWORD(result->m_p1.m_x) -= 2;
      }
    }
    if (LODWORD(this->m_p4.m_y) == 2)
    {
      if ((HIWORD(this[1].m_p1.m_x) & 0x400) == 0) {
        uint64_t result = (FloatQuad *)WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
    }
    else
    {
      LODWORD(this->m_p4.m_y) -= 2;
    }
  }
  if ((LOWORD(this[1].m_p1.m_x) & 0x10) == 0
    || *(void *)(*(void *)&this[3].m_p2 + 24) != *(void *)(*MEMORY[0x1E4FB68D0] + 24))
  {
    uint64_t v12 = (WTF::StringImpl *)this;
LABEL_29:
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v13 = *((void *)v12 + 9) & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      (*(void (**)(uint64_t, FloatQuad **, void))(*(void *)v13 + 392))(*((void *)v12 + 9) & 0xFFFFFFFFFFFFLL, &v52, 0);
      uint64_t v14 = v13;
      if ((*(unsigned char *)(v13 + 45) & 2) != 0) {
        uint64_t v14 = *(void *)(*(void *)(v13 + 32) + 8);
      }
      MEMORY[0x19972F890](v54, *(void *)(v14 + 104) + 352);
      WebCore::RenderStyle::colorResolvingCurrentColor((WebCore::RenderStyle *)(v14 + 80), (const WebCore::StyleColor *)v54);
      WebCore::StyleColor::~StyleColor((WebCore::StyleColor *)v54);
      int v16 = *(void **)(*(void *)(*((void *)v12 + 6) + 8) + 544);
      if (v16)
      {
        int v16 = (void *)v16[1];
        if (*(void **)(v16[16] + 8) != v16)
        {
          if (HIDWORD(v53))
          {
            int v17 = (WebCore::ScrollView *)v16[36];
            uint64_t v18 = v52;
            uint64_t v19 = 32 * HIDWORD(v53);
            do
            {
              WebCore::ScrollView::contentsToRootView((uint64_t *)v54, v17, v18);
              long long v20 = v55;
              *(_OWORD *)&v18->m_p1.m_CGFloat x = *(_OWORD *)v54;
              *(_OWORD *)&v18->m_p3.m_CGFloat x = v20;
              ++v18;
              v19 -= 32;
            }
            while (v19);
          }
        }
      }
      uint64_t v46 = v3;
      if ((*(unsigned char *)(v13 + 45) & 4) != 0)
      {
        ++*(_DWORD *)(v13 + 16);
        WebCore::RenderBox::borderRadii((uint64_t *)v54, (WebCore::RenderBox *)v13);
        LODWORD(v16) = *(_DWORD *)(v13 + 16);
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2A4C0);
        }
        int v21 = (int)v54[0];
        int v22 = HIDWORD(v54[0]);
        int v23 = (int)v54[1];
        int v24 = HIDWORD(v54[1]);
        int v26 = v55;
        int v25 = DWORD1(v55);
        int v28 = DWORD2(v55);
        int v27 = HIDWORD(v55);
        *(_DWORD *)(v13 + 16) = v16 - 1;
      }
      else
      {
        int v27 = 0;
        int v28 = 0;
        int v25 = 0;
        int v26 = 0;
        int v24 = 0;
        int v23 = 0;
        int v22 = 0;
        int v21 = 0;
      }
      __int16 v45 = *((_WORD *)v12 + 16);
      if ((v45 & 8) != 0)
      {
        *((_DWORD *)v12 + 7) += 2;
        if (((*(uint64_t (**)(WTF::StringImpl *))(*(void *)v12 + 848))(v12) & 1) != 0
          || (*((_WORD *)v12 + 16) & 0x10) != 0
          && ((uint64_t v29 = *(void *)(*((void *)v12 + 13) + 24), v29 == *(void *)(*MEMORY[0x1E4FB67E0] + 24))
           || v29 == *(void *)(*MEMORY[0x1E4FB69B0] + 24)
           || v29 == *(void *)(*MEMORY[0x1E4FB65B8] + 24)))
        {
          LODWORD(v16) = 1;
        }
        else
        {
          LODWORD(v16) = *((_WORD *)v12 + 17) & 1;
        }
        char v44 = (char)v16;
      }
      else
      {
        char v44 = 0;
      }
      uint64_t v30 = (((int)(v21 - (v16 & 0xFFFFFFC0) + 32) >> 6) + v21 / 64);
      unint64_t v31 = v30 | ((unint64_t)(((int)(v22 - (v15 & 0xFFFFFFC0) + 32) >> 6) + v22 / 64) << 32);
      uint64_t v32 = (((int)(v23 - (v30 & 0xFFFFFFC0) + 32) >> 6) + v23 / 64);
      unint64_t v49 = v32 | ((unint64_t)(((int)(v24 - (v15 & 0xFFFFFFC0) + 32) >> 6) + v24 / 64) << 32);
      unint64_t v50 = v31;
      uint64_t v33 = (((int)(v26 - (v32 & 0xFFFFFFC0) + 32) >> 6) + v26 / 64);
      FloatPoint m_p1 = v46[1].m_p1;
      unint64_t v47 = (((int)(v28 - (v33 & 0xFFFFFFC0) + 32) >> 6) + v28 / 64) | ((unint64_t)(((int)(v27 - (v15 & 0xFFFFFFC0) + 32) >> 6) + v27 / 64) << 32);
      unint64_t v48 = v33 | ((unint64_t)(((int)(v25 - (v15 & 0xFFFFFFC0) + 32) >> 6) + v25 / 64) << 32);
      uint64_t v35 = (*(uint64_t (**)(FloatQuad *))(*(void *)&m_p1 + 56))(v46 + 1);
      char v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v36 = 1928;
      *((void *)v36 + 1) = v35;
      *((void *)v36 + 66) = (char *)v36 + 16;
      *((void *)v36 + 67) = 512;
      *((void *)v36 + 68) = 0;
      *((void *)v36 + 70) = 0;
      *((void *)v36 + 69) = 0;
      IPC::Encoder::encodeHeader(v36);
      v54[0] = v36;
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v36, &v56);
      IPC::ArgumentCoder<WebCore::Color,void>::encode(v36, (WebCore::Color *)&v51);
      IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v36, (uint64_t)&v52);
      IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v36, (int *)&v50);
      IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v36, (int *)&v49);
      IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v36, (int *)&v48);
      IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v36, (int *)&v47);
      uint64_t v37 = (unsigned char *)IPC::Encoder::grow(v36, 1uLL, 1);
      if (!v38)
      {
        __break(0xC471u);
        JUMPOUT(0x198F2A4E0);
      }
      unsigned char *v37 = v44;
      (*(void (**)(FloatQuad *, WTF::StringImpl **, void))(*(void *)&v46[1].m_p1 + 32))(v46 + 1, v54, 0);
      char v40 = v54[0];
      v54[0] = 0;
      if (v40)
      {
        IPC::Encoder::~Encoder(v40, v39);
        WTF::fastFree(v41, v42);
      }
      if ((v45 & 8) != 0)
      {
        if (*((_DWORD *)v12 + 7) == 2)
        {
          if ((*((_WORD *)v12 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v12);
          }
        }
        else
        {
          *((_DWORD *)v12 + 7) -= 2;
        }
      }
      if ((v51 & 0x8000000000000) != 0)
      {
        uint64_t v43 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v43);
          WTF::fastFree((WTF *)v43, v39);
        }
      }
      uint64_t result = v52;
      if (v52)
      {
        uint64_t v52 = 0;
        LODWORD(v53) = 0;
        return (FloatQuad *)WTF::fastFree((WTF *)result, v39);
      }
    }
    return result;
  }
  LODWORD(this->m_p4.m_y) += 2;
  uint64_t result = (FloatQuad *)WebCore::HTMLAreaElement::imageElement((uint64_t *)v54, (WebCore::HTMLAreaElement *)this);
  uint64_t v12 = v54[0];
  v54[0] = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 7) == 2)
    {
      if ((*((_WORD *)v12 + 17) & 0x400) == 0) {
        uint64_t result = (FloatQuad *)WebCore::Node::removedLastRef(v12);
      }
    }
    else
    {
      *((_DWORD *)v12 + 7) -= 2;
    }
    if (LODWORD(this->m_p4.m_y) == 2)
    {
      if ((HIWORD(this[1].m_p1.m_x) & 0x400) == 0) {
        uint64_t result = (FloatQuad *)WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
    }
    else
    {
      LODWORD(this->m_p4.m_y) -= 2;
    }
    goto LABEL_29;
  }
  if (LODWORD(this->m_p4.m_y) == 2)
  {
    if ((HIWORD(this[1].m_p1.m_x) & 0x400) == 0) {
      return (FloatQuad *)WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
  }
  else
  {
    LODWORD(this->m_p4.m_y) -= 2;
  }
  return result;
}

void sub_198F2A508(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, int a19, WTF::StringImpl *a20)
{
  if (*(_DWORD *)(v20 + 28) == 2)
  {
    if ((*(_WORD *)(v20 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
  }
  else
  {
    *(_DWORD *)(v20 + 28) -= 2;
  }
  if ((a17 & 0x8000000000000) != 0)
  {
    int v22 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  if (a18) {
    WTF::fastFree(a18, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::handleTwoFingerTapAtPoint(uint64_t a1, const IntPoint *a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v19 = 0;
  uint64_t v5 = *(WebCore::LocalFrame **)(*(void *)(a1 + 48) + 160);
  if (v5) {
    BOOL v6 = *((unsigned char *)v5 + 144) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6
    && (WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v18, a2),
        (uint64_t v9 = WebCore::LocalFrame::nodeRespondingToClickEvents(v5, (const WebCore::FloatPoint *)&v18, (WebCore::FloatPoint *)&v19, 0)) != 0)&& (v10 = v9, (*(void *)(v9 + 72) & 0xFFFFFFFFFFFFLL) != 0))
  {
    WebKit::WebPage::sendTapHighlightForNodeIfNecessary((FloatQuad *)a1, a4, (FloatQuad *)v9);
    return WebKit::WebPage::completeSyntheticClick(a1, v10, (float *)&v19, a3, 2, 1);
  }
  else
  {
    float v12 = roundf(*(float *)&v19);
    uint64_t v13 = 0x7FFFFFFFLL;
    uint64_t v14 = 0x80000000;
    if (v12 > -2147500000.0) {
      uint64_t v14 = (int)v12;
    }
    if (v12 < 2147500000.0) {
      uint64_t v13 = v14;
    }
    float v15 = roundf(*((float *)&v19 + 1));
    if (v15 >= 2147500000.0)
    {
      unint64_t v16 = 0x7FFFFFFF00000000;
    }
    else if (v15 <= -2147500000.0)
    {
      unint64_t v16 = 0x8000000000000000;
    }
    else
    {
      unint64_t v16 = (unint64_t)(int)v15 << 32;
    }
    unint64_t v17 = v16 | v13;
    uint64_t v18 = &v17;
    return (unsigned int *)IPC::MessageSender::send<Messages::WebPageProxy::DidNotHandleTapAsClick>(a1 + 32, (int **)&v18);
  }
}

uint64_t WebKit::WebPage::potentialTapAtPosition(uint64_t a1, uint64_t a2, WebCore::FloatPoint *a3, int a4)
{
  uint64_t v44 = a2;
  uint64_t v8 = *(WebCore::LocalFrame **)(*(void *)(a1 + 48) + 160);
  if (v8) {
    BOOL v9 = *((unsigned char *)v8 + 144) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = WebCore::LocalFrame::nodeRespondingToClickEvents(v8, a3, (WebCore::FloatPoint *)(a1 + 1264), *(WebCore::SecurityOrigin **)(a1 + 1272));
    uint64_t v11 = v10;
    if (v10) {
      *(_DWORD *)(v10 + 28) += 2;
    }
    uint64_t v12 = *(void *)(a1 + 1256);
    *(void *)(a1 + 1256) = v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 28) == 2)
      {
        if ((*(_WORD *)(v12 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
        }
      }
      else
      {
        *(_DWORD *)(v12 + 28) -= 2;
      }
    }
  }
  *(unsigned char *)(a1 + 1249) = *(unsigned char *)(a1 + 1248);
  if (a4)
  {
    uint64_t v13 = *(WebCore::Node **)(a1 + 1256);
    if (v13)
    {
      uint64_t v14 = *(WebKit::WebPage ***)(a1 + 272);
      if (v14)
      {
        float32x2_t v43 = *(float32x2_t *)a3;
        float32x4_t v42 = 0uLL;
        BOOL v41 = 0;
        double v39 = 0.0;
        double v40 = 0.0;
        WebKit::ViewGestureGeometryCollector::computeZoomInformationForNode(v14, v13, &v43, &v42, &v41, &v40, &v39);
        uint64_t v15 = *(void *)(a1 + 1256);
        __int16 v16 = *(_WORD *)(v15 + 32);
        BOOL v17 = (v16 & 0xF000) == 0x9000
           || (v16 & 0x10) != 0
           && *(void *)(*(void *)(v15 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB68E0] + 24);
        BOOL v18 = v41;
        double v19 = v39;
        double v20 = v40;
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
        int v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v22 = 1985;
        *((void *)v22 + 1) = v21;
        *((void *)v22 + 66) = (char *)v22 + 16;
        *((void *)v22 + 67) = 512;
        *((void *)v22 + 68) = 0;
        *((void *)v22 + 70) = 0;
        *((void *)v22 + 69) = 0;
        IPC::Encoder::encodeHeader(v22);
        __int16 v45 = v22;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v22, &v44);
        IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v22, v42.f32);
        int v23 = (unsigned char *)IPC::Encoder::grow(v22, 1uLL, 1);
        if (!v24)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2AB3CLL);
        }
        *int v23 = v18;
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, v20);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v22, v19);
        int v25 = (unsigned char *)IPC::Encoder::grow(v22, 1uLL, 1);
        if (!v26)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2AB5CLL);
        }
        *int v25 = v17;
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 32) + 32))(a1 + 32, &v45, 0);
        int v28 = v45;
        __int16 v45 = 0;
        if (v28)
        {
          IPC::Encoder::~Encoder(v28, v27);
          WTF::fastFree(v37, v38);
        }
      }
    }
  }
  WebKit::WebPage::sendTapHighlightForNodeIfNecessary((FloatQuad *)a1, a2, *(FloatQuad **)(a1 + 1256));
  uint64_t result = *(void *)(a1 + 1256);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 336))(result);
    if ((result & 1) == 0)
    {
      uint64_t v31 = *(void *)(a1 + 32);
      uint64_t v30 = a1 + 32;
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(v31 + 56))(v30);
      uint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v33 = 1957;
      *((void *)v33 + 1) = v32;
      *((void *)v33 + 66) = (char *)v33 + 16;
      *((void *)v33 + 67) = 512;
      *((void *)v33 + 68) = 0;
      *((void *)v33 + 70) = 0;
      *((void *)v33 + 69) = 0;
      IPC::Encoder::encodeHeader(v33);
      v42.i64[0] = (uint64_t)v33;
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v33, &v44);
      (*(void (**)(uint64_t, float32x4_t *, void))(*(void *)v30 + 32))(v30, &v42, 0);
      uint64_t result = v42.i64[0];
      v42.i64[0] = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v34);
        return WTF::fastFree(v35, v36);
      }
    }
  }
  return result;
}

void sub_198F2AB68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::commitPotentialTap(WebKit::WebPage *this, WebCore::LocalFrame *a2, unint64_t a3, int a4)
{
  uint64_t v5 = *((void *)this + 157);
  if (!v5) {
    goto LABEL_26;
  }
  unsigned __int8 v8 = a2;
  uint64_t v9 = *(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  BOOL v10 = v9 != 0;
  int v11 = *(_DWORD *)(v5 + 28);
  int v12 = v11 + 2;
  *(_DWORD *)(v5 + 28) = v11 + 2;
  if ((*(unsigned char *)(v5 + 32) & 8) != 0)
  {
    if (v9)
    {
      BOOL v10 = 1;
    }
    else
    {
      BOOL v10 = WebCore::Element::renderOrDisplayContentsStyle((WebCore::Element *)v5) != 0;
      int v12 = *(_DWORD *)(v5 + 28);
    }
    int v13 = v12 - 2;
    if (v13)
    {
      *(_DWORD *)(v5 + 28) = v13;
      goto LABEL_8;
    }
  }
  else if (v11)
  {
    *(_DWORD *)(v5 + 28) = v11;
    goto LABEL_8;
  }
  if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
LABEL_8:
  uint64_t v14 = *((void *)this + 157);
  if (!v14) {
    goto LABEL_12;
  }
  int v15 = *(_DWORD *)(v14 + 28);
  *(_DWORD *)(v14 + 28) = v15 + 2;
  if ((*(_WORD *)(v14 + 32) & 0x80) == 0)
  {
    if (v15)
    {
      *(_DWORD *)(v14 + 28) = v15;
    }
    else if ((*(_WORD *)(v14 + 34) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
LABEL_12:
    if (v10)
    {
LABEL_33:
      uint64_t v31 = 0;
      uint64_t v21 = *(WebCore::LocalFrame **)(*((void *)this + 6) + 160);
      if (v21) {
        BOOL v22 = *((unsigned char *)v21 + 144) == 0;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22) {
        return WebKit::WebPage::commitPotentialTapFailed(this, a2);
      }
      uint64_t v23 = WebCore::LocalFrame::nodeRespondingToClickEvents(v21, (WebKit::WebPage *)((char *)this + 1264), (WebCore::FloatPoint *)&v31, *((WebCore::SecurityOrigin **)this + 159));
      if (!v23) {
        return WebKit::WebPage::commitPotentialTapFailed(this, a2);
      }
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)(*(void *)(*(void *)(v23 + 48) + 8) + 544);
      if (!v25) {
        return WebKit::WebPage::commitPotentialTapFailed(this, a2);
      }
      uint64_t v26 = *(void *)(v25 + 8);
      if (!v26) {
        return WebKit::WebPage::commitPotentialTapFailed(this, a2);
      }
      WebKit::WebFrame::fromCoreFrame(v26, &v30);
      unint64_t v27 = *(void *)(v30 + 96);
      CFRelease(*(CFTypeRef *)(v30 + 8));
      if (v27 > a3) {
        return WebKit::WebPage::commitPotentialTapFailed(this, a2);
      }
      if (*((void *)this + 157) == v24) {
        WebKit::WebPage::handleSyntheticClick((uint64_t)this, v24, (float *)&v31, v8, a4);
      }
      else {
        WebKit::WebPage::commitPotentialTapFailed(this, a2);
      }
      uint64_t v29 = *((void *)this + 157);
      *((void *)this + 157) = 0;
      if (v29)
      {
        if (*(_DWORD *)(v29 + 28) == 2)
        {
          if ((*(_WORD *)(v29 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v29);
          }
        }
        else
        {
          *(_DWORD *)(v29 + 28) -= 2;
        }
      }
      *((void *)this + 158) = 0;
      uint64_t result = *((void *)this + 159);
      *((void *)this + 159) = 0;
      if (result) {
        return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, v28);
      }
      return result;
    }
    goto LABEL_23;
  }
  if (v10)
  {
    if (v15)
    {
      *(_DWORD *)(v14 + 28) = v15;
    }
    else if ((*(_WORD *)(v14 + 34) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    goto LABEL_33;
  }
  uint64_t v16 = *(void *)(v14 + 208);
  if (v16) {
    BOOL v17 = *(WebCore::Element **)(v16 + 8);
  }
  else {
    BOOL v17 = 0;
  }
  uint64_t v18 = WebCore::Element::renderOrDisplayContentsStyle(v17);
  if (*(_DWORD *)(v14 + 28) == 2)
  {
    if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
  }
  else
  {
    *(_DWORD *)(v14 + 28) -= 2;
  }
  if (v18) {
    goto LABEL_33;
  }
LABEL_23:
  uint64_t v19 = *((void *)this + 157);
  if (v19
    && (*(_WORD *)(v19 + 32) & 0x10) != 0
    && *(void *)(*(void *)(v19 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB68D0] + 24))
  {
    goto LABEL_33;
  }
LABEL_26:

  return WebKit::WebPage::commitPotentialTapFailed(this, a2);
}

void sub_198F2AE40(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::commitPotentialTapFailed(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v3 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WebCore::ContentChangeObserver **)(*((void *)this + 6) + 160);
  if (v4) {
    BOOL v5 = *((unsigned char *)v4 + 144) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    WebCore::ContentChangeObserver::didCancelPotentialTap(v4, a2);
  }
  WebKit::WebPage::clearSelectionAfterTapIfNeeded((WebCore::Page **)this);
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  BOOL v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v7 = 1880;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v19 = v7;
  (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 4) + 32))((char *)this + 32, &v19, 0);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v16, v17);
  }
  float v10 = roundf(*((float *)this + 316));
  uint64_t v11 = 0x7FFFFFFFLL;
  uint64_t v12 = 0x80000000;
  if (v10 > -2147500000.0) {
    uint64_t v12 = (int)v10;
  }
  if (v10 < 2147500000.0) {
    uint64_t v11 = v12;
  }
  float v13 = roundf(*((float *)this + 317));
  if (v13 >= 2147500000.0)
  {
    unint64_t v14 = 0x7FFFFFFF00000000;
  }
  else if (v13 <= -2147500000.0)
  {
    unint64_t v14 = 0x8000000000000000;
  }
  else
  {
    unint64_t v14 = (unint64_t)(int)v13 << 32;
  }
  unint64_t v18 = v14 | v11;
  uint64_t v19 = (IPC::Encoder *)&v18;
  return IPC::MessageSender::send<Messages::WebPageProxy::DidNotHandleTapAsClick>((uint64_t)this + 32, (int **)&v19);
}

void sub_198F2B054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::clearSelection(WebKit::WebPage *this)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100]((uint64_t *)this + 65);
  WebCore::Page::checkedFocusController((uint64_t *)&v6, *((WebCore::Page **)this + 6));
  uint64_t v2 = WebCore::FocusController::focusedOrMainFrame(v6);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  }
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (!v4) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v4)
  {
    --*(_DWORD *)v4;
LABEL_6:
    WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(*(void *)(v2 + 296) + 3096));
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

void sub_198F2B150(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::cancelPotentialTap(WebKit::WebPage *this, WebCore::LocalFrame *a2)
{
  uint64_t v3 = *(WebCore::ContentChangeObserver **)(*((void *)this + 6) + 160);
  if (v3) {
    BOOL v4 = *((unsigned char *)v3 + 144) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    WebCore::ContentChangeObserver::didCancelPotentialTap(v3, a2);
  }
  BOOL v5 = (WebKit::WebFrame *)*((void *)this + 11);

  return WebKit::WebPage::cancelPotentialTapInFrame(this, v5);
}

uint64_t WebKit::WebPage::cancelPotentialTapInFrame(WebKit::WebPage *this, WebKit::WebFrame *a2)
{
  uint64_t v4 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 157);
  if (!v5)
  {
    *((void *)this + 157) = 0;
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 544);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0)
  {
    *((void *)this + 157) = 0;
    goto LABEL_16;
  }
  unsigned __int8 v8 = (WebCore::FrameTree *)(v7 + 48);
  uint64_t v9 = *((void *)a2 + 3);
  if (v9 && (uint64_t v10 = *(const WebCore::Frame **)(v9 + 8)) != 0)
  {
    if (*((unsigned char *)v10 + 144)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t result = WebCore::FrameTree::isDescendantOf(v8, v11);
  if (result)
  {
    uint64_t v5 = *((void *)this + 157);
    *((void *)this + 157) = 0;
    if (!v5)
    {
LABEL_18:
      *((void *)this + 158) = 0;
      uint64_t result = *((void *)this + 159);
      *((void *)this + 159) = 0;
      if (result)
      {
        return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
      }
      return result;
    }
LABEL_16:
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_198F2B344(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

FloatQuad *WebKit::WebPage::tapHighlightAtPosition(uint64_t a1, uint64_t a2, WebCore::FloatPoint *a3)
{
  uint64_t result = *(FloatQuad **)(*(void *)(a1 + 48) + 160);
  if (result) {
    BOOL v5 = LOBYTE(result[4].m_p3.m_x) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = (FloatQuad *)WebCore::LocalFrame::nodeRespondingToClickEvents((WebCore::LocalFrame *)result, a3, (WebCore::FloatPoint *)&v8, 0);
    return WebKit::WebPage::sendTapHighlightForNodeIfNecessary((FloatQuad *)a1, a2, v7);
  }
  return result;
}

WebCore *WebKit::WebPage::inspectorNodeSearchMovedToPosition(WebCore *this, const WebCore::FloatPoint *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*((void *)this + 6) + 160);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = *(WTF::StringImpl **)WebCore::mousePointerEventType(this);
    if (v4) {
      *(_DWORD *)v4 += 2;
    }
    uint64_t v8 = v4;
    long long v9 = 0u;
    long long v10 = 0u;
    WebCore::EventHandler::mouseMoved();
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
    WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    return (WebCore *)WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(v2 + 296));
  }
  return this;
}

void sub_198F2B570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
}

WebCore::LocalFrame *WebKit::WebPage::inspectorNodeSearchEndedAtPosition(WebKit::WebPage *this, const WebCore::FloatPoint *a2)
{
  uint64_t result = *(WebCore::LocalFrame **)(*((void *)this + 6) + 160);
  if (result) {
    BOOL v3 = *((unsigned char *)result + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t result = (WebCore::LocalFrame *)WebCore::LocalFrame::deepestNodeAtLocation(result, a2);
    if (result)
    {
      return (WebCore::LocalFrame *)MEMORY[0x1F4172530]();
    }
  }
  return result;
}

uint64_t WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(uint64_t this, WebCore::Element *a2)
{
  if (*(WebCore::Element **)(this + 936) == a2)
  {
    uint64_t v2 = this;
    if (*(unsigned char *)(this + 1248))
    {
      *(unsigned char *)(this + 944) = 1;
      CFRetain(*(CFTypeRef *)(this + 8));
      BOOL v3 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v3 = &unk_1EE9DFC80;
      v3[1] = v2;
      v3[2] = v2;
      uint64_t v4 = (uint64_t)v3;
      WTF::callOnMainRunLoop();
      this = v4;
      if (v4) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return this;
}

void sub_198F2B6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::setFocusedElementValue(WebKit::WebPage *this, const WebCore::ElementContext *a2, const WTF::String *a3)
{
  uint64_t result = WebKit::WebPage::elementForContext((uint64_t)this, a2, &v10);
  uint64_t v4 = v10;
  if (!v10) {
    return result;
  }
  if ((*((_WORD *)v10 + 16) & 0x10) == 0
    || *(void *)(*((void *)v10 + 13) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    int v5 = *((_DWORD *)v10 + 7) - 2;
    if (*((_DWORD *)v10 + 7) == 2)
    {
      if ((*((_WORD *)v10 + 17) & 0x400) == 0)
      {
        uint64_t v6 = v10;
        return WebCore::Node::removedLastRef(v6);
      }
      return result;
    }
LABEL_15:
    *((_DWORD *)v4 + 7) = v5;
    return result;
  }
  uint64_t result = WebCore::HTMLInputElement::setValue();
  if (v9)
  {
    uint64_t result = (uint64_t)v8;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        uint64_t result = WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  int v5 = *((_DWORD *)v4 + 7) - 2;
  if (*((_DWORD *)v4 + 7) != 2) {
    goto LABEL_15;
  }
  if ((*((_WORD *)v4 + 17) & 0x400) == 0) {
    return WebCore::Node::removedLastRef(v4);
  }
  return result;
}

void sub_198F2B804(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::setFocusedElementSelectedIndex(WebKit::WebPage *this, const WebCore::ElementContext *a2)
{
  uint64_t result = WebKit::WebPage::elementForContext((uint64_t)this, a2, &v4);
  BOOL v3 = v4;
  if (v4)
  {
    if ((*((_WORD *)v4 + 16) & 0x10) != 0
      && *(void *)(*((void *)v4 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB6B08] + 24))
    {
      uint64_t result = WebCore::HTMLSelectElement::optionSelectedByUser(v4);
    }
    if (*((_DWORD *)v3 + 7) == 2)
    {
      if ((*((_WORD *)v3 + 17) & 0x400) == 0)
      {
        return WebCore::Node::removedLastRef(v3);
      }
    }
    else
    {
      *((_DWORD *)v3 + 7) -= 2;
    }
  }
  return result;
}

void sub_198F2B8F4(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::ShowInspectorHighlight>(uint64_t a1, char **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2092;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F2BA18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::hideInspectorHighlight(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  BOOL v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v3 = 1987;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_198F2BB1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::showInspectorIndication(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  BOOL v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v3 = 2093;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_198F2BC20(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::hideInspectorIndication(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  BOOL v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v3 = 1988;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_198F2BD24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::enableInspectorNodeSearch(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  BOOL v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v3 = 1964;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_198F2BE28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPage::disableInspectorNodeSearch(WebKit::WebPage *this)
{
  uint64_t v1 = (char *)this + 32;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 4) + 56))((char *)this + 32);
  BOOL v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v3 = 1958;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_198F2BF2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::selectWithGesture(WebKit::WebPage *this, int32x2_t *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  if (a4 == 1) {
    WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation((uint64_t)this, a2);
  }
  WebCore::Page::checkedFocusController((uint64_t *)&v57, *((WebCore::Page **)this + 6));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v57);
  float v13 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  unint64_t v14 = v57;
  uint64_t v57 = 0;
  if (v14)
  {
    if (!*(_DWORD *)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2C700);
    }
    --*(_DWORD *)v14;
  }
  if (result)
  {
    WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v62, this, (WebCore::ScrollView **)result, (WebCore::IntPoint *)a2, a5);
    if (!v62)
    {
      WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a6, (uint64_t)a2, a3, a4, 0);
LABEL_51:
      uint64_t v25 = v62;
      uint64_t v62 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 7) == 2)
        {
          if ((*((_WORD *)v25 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v25);
          }
        }
        else
        {
          *((_DWORD *)v25 + 7) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13 + 2);
    }
    unsigned __int8 v15 = 0;
    LOBYTE(v57) = 0;
    char v61 = 0;
    switch((int)a3)
    {
      case 0:
        if (WebCore::Node::rootEditableElement(v62)) {
          goto LABEL_40;
        }
        goto LABEL_45;
      case 1:
        WebCore::wordBoundaryForPositionWithoutCrossingLine();
        unsigned __int8 v15 = v49;
        WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v52);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v57, (uint64_t)&v52);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52);
        uint64_t v16 = v48[0];
        v48[0] = 0;
        if (v16)
        {
          if (*((_DWORD *)v16 + 7) == 2)
          {
            if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v16);
            }
          }
          else
          {
            *((_DWORD *)v16 + 7) -= 2;
          }
        }
        goto LABEL_48;
      case 2:
        if ((a4 - 3) < 2) {
          goto LABEL_44;
        }
        if (a4 != 2)
        {
          if (a4 != 1)
          {
            unsigned __int8 v15 = 0;
LABEL_50:
            WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a6, (uint64_t)a2, a3, a4, v15);
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v57);
            goto LABEL_51;
          }
          WebCore::wordRangeFromPosition();
          std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v57, (uint64_t)&v52);
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52);
          if (!v61)
          {
LABEL_44:
            std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100]((uint64_t *)this + 149);
            goto LABEL_47;
          }
          uint64_t v23 = v57;
          *((_DWORD *)v57 + 7) += 2;
          uint64_t v52 = v23;
          int v53 = v58;
          uint64_t v24 = (uint64_t)v59;
          *((_DWORD *)v59 + 7) += 2;
          uint64_t v54 = v24;
          int v55 = v60;
          std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange,void>((uint64_t)this + 1192, (uint64_t *)&v52);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v54);
LABEL_112:
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v52);
          goto LABEL_47;
        }
        if (!*((unsigned char *)this + 1224)) {
          goto LABEL_47;
        }
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>((uint64_t *)&v57, (uint64_t)this + 1192);
        if (!v61) {
          goto LABEL_139;
        }
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        int v36 = (char)WebCore::documentOrder();
        BOOL v38 = v36 != -127 && v36 < 0;
        double v39 = v52;
        uint64_t v52 = 0;
        if (v39)
        {
          if (*((_DWORD *)v39 + 7) == 2)
          {
            if ((*((_WORD *)v39 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v39);
            }
          }
          else
          {
            *((_DWORD *)v39 + 7) -= 2;
          }
        }
        double v40 = v48[0];
        v48[0] = 0;
        if (v40)
        {
          if (*((_DWORD *)v40 + 7) == 2)
          {
            if ((*((_WORD *)v40 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v40);
            }
          }
          else
          {
            *((_DWORD *)v40 + 7) -= 2;
          }
        }
        if (!v38) {
          goto LABEL_101;
        }
        WebCore::makeBoundaryPoint();
        if ((_BYTE)v54 && v61)
        {
          BOOL v41 = v52;
          uint64_t v52 = 0;
          float32x4_t v42 = v57;
          uint64_t v57 = v41;
          v48[0] = v42;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v48);
          int v58 = v53;
          if ((_BYTE)v54) {
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v52);
          }
LABEL_101:
          if (v61)
          {
            WebCore::makeDeprecatedLegacyPosition();
            WebCore::VisiblePosition::VisiblePosition();
            char v43 = WebCore::documentOrder();
            uint64_t v44 = v52;
            uint64_t v52 = 0;
            if (v44)
            {
              if (*((_DWORD *)v44 + 7) == 2)
              {
                if ((*((_WORD *)v44 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v44);
                }
              }
              else
              {
                *((_DWORD *)v44 + 7) -= 2;
              }
            }
            __int16 v45 = v48[0];
            v48[0] = 0;
            if (v45)
            {
              if (*((_DWORD *)v45 + 7) == 2)
              {
                if ((*((_WORD *)v45 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v45);
                }
              }
              else
              {
                *((_DWORD *)v45 + 7) -= 2;
              }
            }
            if (v43 < 1)
            {
LABEL_47:
              unsigned __int8 v15 = 0;
LABEL_48:
              if (v61) {
                WebCore::FrameSelection::setSelectedRange();
              }
              goto LABEL_50;
            }
            WebCore::makeBoundaryPoint();
            if ((_BYTE)v54)
            {
              if (v61)
              {
                uint64_t v46 = v52;
                uint64_t v52 = 0;
                unint64_t v47 = v59;
                uint64_t v59 = v46;
                v48[0] = v47;
                WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v48);
                int v60 = v53;
                if (!(_BYTE)v54) {
                  goto LABEL_47;
                }
                goto LABEL_112;
              }
            }
          }
        }
LABEL_139:
        __break(1u);
        JUMPOUT(0x198F2CA18);
      case 4:
        if (WebCore::atBoundaryOfGranularity()) {
          goto LABEL_40;
        }
LABEL_45:
        WebCore::wordRangeFromPosition();
        goto LABEL_41;
      case 5:
        if (WebCore::atBoundaryOfGranularity()) {
LABEL_40:
        }
          WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v52);
        else {
          WebCore::enclosingTextUnitOfGranularity();
        }
LABEL_41:
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v57, (uint64_t)&v52);
        goto LABEL_46;
      case 6:
        WebCore::enclosingTextUnitOfGranularity();
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v57, (uint64_t)&v52);
LABEL_46:
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52);
        goto LABEL_47;
      case 7:
        if (*(void *)(WebCore::Document::editor(*((WebCore::Document **)v13 + 37)) + 32)) {
          BOOL v17 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
        }
        else {
          BOOL v17 = 0;
        }
        if (!v17) {
          goto LABEL_47;
        }
        unint64_t v18 = (WebCore::Editor *)WebCore::Document::editor(*((WebCore::Document **)v13 + 37));
        WebCore::Editor::compositionRange((uint64_t *)&v52, v18);
        if (!v56) {
          goto LABEL_139;
        }
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        uint64_t v19 = v48[0];
        v48[0] = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 7) == 2)
          {
            if ((*((_WORD *)v19 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v19);
            }
          }
          else
          {
            *((_DWORD *)v19 + 7) -= 2;
          }
        }
        if (!v56) {
          goto LABEL_139;
        }
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        int v20 = (char)WebCore::documentOrder();
        if (v20 != -127 && v20 < 0) {
          goto LABEL_139;
        }
        int v21 = (char)WebCore::documentOrder();
        if (v21 == -127 || (v21 & 0x80000000) == 0)
        {
          BOOL v22 = v48;
          int v26 = (char)WebCore::documentOrder();
          if (v26 >= 0 || v26 == -127) {
            BOOL v22 = &v62;
          }
        }
        else
        {
          BOOL v22 = &v51;
        }
        int v28 = *v22;
        if (*v22) {
          *((_DWORD *)v28 + 7) += 2;
        }
        uint64_t v29 = v62;
        uint64_t v62 = v28;
        if (v29)
        {
          if (*((_DWORD *)v29 + 7) == 2)
          {
            if ((*((_WORD *)v29 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v29);
            }
          }
          else
          {
            *((_DWORD *)v29 + 7) -= 2;
          }
        }
        int v30 = *((_DWORD *)v22 + 2);
        char v64 = *((unsigned char *)v22 + 12);
        int v63 = v30;
        char v65 = *((unsigned char *)v22 + 16);
        uint64_t v31 = v48[0];
        v48[0] = 0;
        if (v31)
        {
          if (*((_DWORD *)v31 + 7) == 2)
          {
            if ((*((_WORD *)v31 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v31);
            }
          }
          else
          {
            *((_DWORD *)v31 + 7) -= 2;
          }
        }
        uint64_t v32 = v50;
        unint64_t v50 = 0;
        if (v32)
        {
          if (*((_DWORD *)v32 + 7) == 2)
          {
            if ((*((_WORD *)v32 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v32);
            }
          }
          else
          {
            *((_DWORD *)v32 + 7) -= 2;
          }
        }
        if (a4 == 1)
        {
          unsigned __int8 v15 = 4;
        }
        else
        {
          WebCore::VisiblePosition::VisiblePosition();
          uint64_t v33 = WebCore::distanceBetweenPositions();
          unsigned __int8 v15 = 4 * (v33 != WebCore::distanceBetweenPositions());
          uint64_t v34 = v48[0];
          v48[0] = 0;
          if (v34)
          {
            if (*((_DWORD *)v34 + 7) == 2)
            {
              if ((*((_WORD *)v34 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v34);
              }
            }
            else
            {
              *((_DWORD *)v34 + 7) -= 2;
            }
          }
        }
        WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)v48);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)&v57, (uint64_t)v48);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v48);
        uint64_t v35 = v51;
        uint64_t v51 = 0;
        if (v35)
        {
          if (*((_DWORD *)v35 + 7) == 2)
          {
            if ((*((_WORD *)v35 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v35);
            }
          }
          else
          {
            *((_DWORD *)v35 + 7) -= 2;
          }
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v52);
        goto LABEL_48;
      default:
        goto LABEL_50;
    }
  }
  return result;
}

uint64_t WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation(uint64_t this, int32x2_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 48) + 160);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = this;
    int v5 = (unsigned int *)(v2 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    int8x8_t v6 = (int8x8_t)vcgt_s32(*a2, (int32x2_t)0xFE000000FE000000);
    int8x8_t v10 = vorr_s8((int8x8_t)(*(void *)&v6 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a2, 6uLL)), v6));
    WebCore::EventHandler::hitTestResultAtPoint();
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
    if (v12 && (*(void *)(v12 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v7 = WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v11);
      uint64_t v8 = v7;
      if (v7) {
        atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      }
      WebCore::Page::checkedFocusController((uint64_t *)&v10, *(WebCore::Page **)(v4 + 48));
      WebCore::FocusController::setFocusedFrame();
      char v9 = (_DWORD *)v10;
      int8x8_t v10 = 0;
      if (v9)
      {
        if (!*v9)
        {
          this = 286;
          __break(0xC471u);
          return this;
        }
        --*v9;
      }
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
      }
    }
    return MEMORY[0x199731400](v11);
  }
  return this;
}

void sub_198F2CB6C(_Unwind_Exception *a1, _DWORD *a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    if (!*a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2CBACLL);
    }
    --*a2;
  }
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  MEMORY[0x199731400](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::visiblePositionInFocusedNodeForPoint(WebKit::WebPage *this, const WebCore::LocalFrame *a2, WebCore::ScrollView **a3, WebCore::IntPoint *a4, int a5)
{
  uint64_t v8 = WebCore::ScrollView::rootViewToContents(a3[36], a4);
  uint64_t v14 = v8;
  int8x8_t v10 = (const WebCore::LocalFrame *)*((void *)a2 + 116);
  if (v10) {
    BOOL v11 = a5 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11) {
    uint64_t v8 = WebKit::constrainPoint((WebKit *)&v14, a3[37], v10, v9);
  }
  uint64_t v13 = v8;
  return WebCore::LocalFrame::visiblePositionForPoint((WebCore::LocalFrame *)a3, (const WebCore::IntPoint *)&v13);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &>(uint64_t a1)
{
  uint64_t result = (uint64_t *)WebCore::makeBoundaryPoint();
  if (v7)
  {
    uint64_t v3 = v5;
    *(_DWORD *)(v5 + 28) += 2;
    uint64_t v12 = v3;
    int v13 = v6;
    WebCore::SimpleRange::SimpleRange();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v12);
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 8) = v9;
    uint64_t v4 = v10;
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    *(void *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 24) = v11;
    *(unsigned char *)(a1 + 32) = 1;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
    uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v8);
    if (v7) {
      return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v5);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

void sub_198F2CD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v12 - 32));
  if (a12) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 32))
  {
    *a2 = 0;
    uint64_t v5 = *(void *)a1;
    *(void *)a1 = v4;
    uint64_t v11 = v5;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v6 = a2[2];
    a2[2] = 0;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    uint64_t v11 = v7;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    int v8 = *((_DWORD *)a2 + 6);
  }
  else
  {
    *a2 = 0;
    *(void *)a1 = v4;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v9 = a2[2];
    a2[2] = 0;
    *(void *)(a1 + 16) = v9;
    int v8 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(a1 + 32) = 1;
  }
  *(_DWORD *)(a1 + 24) = v8;
  return a1;
}

uint64_t WebKit::WebPage::rootViewBounds(WebKit::WebPage *this, const WebCore::Node *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 6) + 8) + 544);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  uint64_t v5 = *(WebCore::ScrollView **)(v3 + 288);
  if (!v5)
  {
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  int v6 = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = v6 + 1;
  uint64_t v7 = (WebCore::RenderObject *)(*((void *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v7)
  {
    uint64_t v9 = 0;
    if (v6) {
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(WebCore::ScrollView *))(*(void *)v5 + 8))(v5);
    goto LABEL_9;
  }
  v11[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v7, 1, 0);
  v11[1] = v8;
  uint64_t v9 = WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)v11);
  int v6 = *((_DWORD *)v5 + 2) - 1;
  if (*((_DWORD *)v5 + 2) == 1) {
    goto LABEL_8;
  }
LABEL_6:
  *((_DWORD *)v5 + 2) = v6;
LABEL_9:
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v9;
}

void sub_198F2CF0C(_Unwind_Exception *a1)
{
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::absoluteInteractionBounds(WebKit::WebPage *this, const WebCore::Node *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 6) + 8) + 544);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  uint64_t v5 = *(_DWORD **)(v3 + 288);
  if (v5)
  {
    ++v5[2];
    uint64_t v6 = *((void *)this + 9) & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      if ((*(unsigned char *)((*((void *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        ++*(_DWORD *)((*((void *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((*(void *)(v6 + 96) & 0x1C00) == 0 || (*(void *)(v6 + 96) & 0xE000) == 0)
        {
          uint64_t v8 = *(void *)(v6 + 192);
          if (v8)
          {
            unint64_t v10 = *(void *)(v8 + 4);
            unint64_t v12 = *(void *)(v8 + 12);
          }
          else
          {
            unint64_t v10 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v6);
            unint64_t v12 = v14;
          }
          unint64_t v11 = HIDWORD(v10);
          unint64_t v13 = HIDWORD(v12);
        }
        else
        {
          LODWORD(v10) = (*(uint64_t (**)(uint64_t, const WebCore::Node *))(*(void *)v6 + 1016))(v6, a2);
          LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1000))(v6);
          LODWORD(v12) = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)v6);
          LODWORD(v13) = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)v6);
        }
        *(float *)&uint64_t v37 = (float)(int)v10 * 0.015625;
        *((float *)&v37 + 1) = (float)(int)v11 * 0.015625;
        *(float *)&uint64_t v38 = (float)((float)(int)v12 * 0.015625) + *(float *)&v37;
        *((float *)&v38 + 1) = *((float *)&v37 + 1);
        float v39 = *(float *)&v38;
        float v40 = *((float *)&v37 + 1) + (float)((float)(int)v13 * 0.015625);
        float v41 = *(float *)&v37;
        float v42 = v40;
        WebCore::RenderObject::localToContainerQuad();
        WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&v43);
        v47[0] = v15;
        v47[1] = v16;
        v47[2] = v17;
        v47[3] = v18;
        uint64_t v20 = WebCore::enclosingIntRect((WebCore *)v47, v19);
        int v21 = *(_DWORD *)(v6 + 16);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x198F2D1E4);
        }
        uint64_t v9 = v20;
        *(_DWORD *)(v6 + 16) = v21 - 1;
      }
      else
      {
        uint64_t v23 = *((void *)this + 9) & 0xFFFFFFFFFFFFLL;
        if ((*(unsigned char *)(v23 + 0x2D) & 2) != 0)
        {
          uint64_t v24 = *(void *)((*((void *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v24) {
            uint64_t v23 = *(void *)(v24 + 8);
          }
          else {
            uint64_t v23 = 0;
          }
        }
        uint64_t v37 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)(*((void *)this + 9) & 0xFFFFFFFFFFFFLL), 1, 0);
        uint64_t v38 = v25;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v43, (const WebCore::IntRect *)&v37);
        float v26 = WebCore::BorderData::borderLeftWidth((WebCore::BorderData *)(*(void *)(*(void *)(v23 + 88) + 24)
                                                                         + 104));
        float v27 = WebCore::BorderData::borderTopWidth((WebCore::BorderData *)(*(void *)(*(void *)(v23 + 88) + 24)
                                                                        + 104));
        float v43 = v26 + v43;
        float v44 = v27 + v44;
        float v28 = v45;
        float v29 = WebCore::BorderData::borderLeftWidth((WebCore::BorderData *)(*(void *)(*(void *)(v23 + 88) + 24)
                                                                         + 104));
        uint64_t v30 = *(void *)(*(void *)(v23 + 88) + 24);
        float v31 = 0.0;
        float v32 = 0.0;
        if ((*(unsigned char *)(v30 + 148) & 0xE) != 0)
        {
          uint64_t v33 = *(void *)(v30 + 200);
          if (*(unsigned char *)(v33 + 5) && *(unsigned char *)(v33 + 60) == 4)
          {
            if (*(unsigned char *)(v33 + 62)) {
              float v32 = *(float *)(v33 + 56);
            }
            else {
              float v32 = (float)*(int *)(v33 + 56);
            }
          }
          else
          {
            float v32 = *(float *)(v30 + 144);
          }
        }
        float v45 = (float)(v28 - v29) - v32;
        if ((*(unsigned char *)(v30 + 196) & 0xE) != 0)
        {
          uint64_t v34 = *(void *)(v30 + 200);
          if (*(unsigned char *)(v34 + 5) && *(unsigned char *)(v34 + 68) == 4)
          {
            if (*(unsigned char *)(v34 + 70)) {
              float v31 = *(float *)(v34 + 64);
            }
            else {
              float v31 = (float)*(int *)(v34 + 64);
            }
          }
          else
          {
            float v31 = *(float *)(v30 + 192);
          }
        }
        float v35 = v46;
        float v46 = (float)(v35 - v31) - WebCore::BorderData::borderTopWidth((WebCore::BorderData *)(v30 + 104));
        uint64_t v9 = WebCore::enclosingIntRect((WebCore *)&v43, v36);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *, const WebCore::Node *))(*(void *)v5 + 8))(v5, a2);
    }
    else {
      --v5[2];
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v9;
}

void sub_198F2D324(_Unwind_Exception *a1)
{
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::rootViewInteractionBounds(WebKit::WebPage *this, const WebCore::Node *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 6) + 8) + 544);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  uint64_t v5 = *(WebCore::ScrollView **)(v3 + 288);
  if (v5)
  {
    ++*((_DWORD *)v5 + 2);
    v9[0] = WebKit::WebPage::absoluteInteractionBounds(this, a2);
    v9[1] = v6;
    uint64_t v7 = WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)v9);
    if (*((_DWORD *)v5 + 2) == 1) {
      (*(void (**)(WebCore::ScrollView *))(*(void *)v5 + 8))(v5);
    }
    else {
      --*((_DWORD *)v5 + 2);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v7;
}

void sub_198F2D49C(_Unwind_Exception *a1)
{
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture(uint64_t a1, int a2, WebCore::IntPoint *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  WebCore::Page::checkedFocusController((uint64_t *)&v30, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v30);
  uint64_t v7 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v8 = v30;
  uint64_t v30 = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2D818);
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    if (WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(void *)(*((void *)result + 37) + 3096)
                                                                                                + 56)))
    {
      unint64_t v10 = *(WebKit::WebPage **)(a1 + 928);
      if (v10)
      {
        unint64_t v11 = (WebCore::FocusController *)WebKit::WebPage::rootViewInteractionBounds(v10, v9);
        if ((int)v12 >= 1 && SHIDWORD(v12) >= 1)
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 160);
          if (v13)
          {
            if (!*(unsigned char *)(v13 + 144))
            {
              uint64_t v30 = v11;
              v29[0] = ((unint64_t)v11 + (v12 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v12 + v11);
              unint64_t v14 = (WTF::WallTime *)WebCore::IntPoint::constrainedBetween(a3, (const WebCore::IntPoint *)&v30, (const WebCore::IntPoint *)v29);
              int v15 = v14;
              if ((a2 - 2) < 4)
              {
                int v16 = (WebCore *)WTF::WallTime::now(v14);
                uint64_t v30 = v17;
                __int16 v31 = 7;
                char v32 = 0;
                char v33 = 0;
                __int16 v34 = 0;
                float v35 = v15;
                int v36 = v15;
                uint64_t v38 = 0;
                uint64_t v37 = 0;
                uint64_t v39 = 0x3FF0000000000000;
                int v40 = 1;
                int v18 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v16);
                if (v18) {
                  *(_DWORD *)v18 += 2;
                }
                float v41 = v18;
                uint64_t v42 = 1;
                __int16 v43 = 0;
                long long v44 = 0u;
                long long v45 = 0u;
                WebCore::EventHandler::handleMouseReleaseEvent();
LABEL_17:
                WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v19);
                WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v20);
                BOOL v22 = v41;
                float v41 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, v21);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
                return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7 + 2);
              }
              if (!a2)
              {
                float v26 = (WebCore *)WTF::WallTime::now(v14);
                uint64_t v30 = v27;
                __int16 v31 = 6;
                char v32 = 0;
                char v33 = 0;
                __int16 v34 = 0;
                float v35 = v15;
                int v36 = v15;
                uint64_t v38 = 0;
                uint64_t v37 = 0;
                uint64_t v39 = 0x3FF0000000000000;
                int v40 = 1;
                float v28 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v26);
                if (v28) {
                  *(_DWORD *)v28 += 2;
                }
                float v41 = v28;
                uint64_t v42 = 1;
                __int16 v43 = 0;
                long long v44 = 0u;
                long long v45 = 0u;
                WebCore::EventHandler::handleMousePressEvent();
                goto LABEL_17;
              }
              if (a2 == 1)
              {
                uint64_t v23 = (WebCore *)WTF::WallTime::now(v14);
                uint64_t v30 = v24;
                __int16 v31 = 5;
                char v32 = 0;
                char v33 = 0;
                __int16 v34 = 0;
                float v35 = v15;
                int v36 = v15;
                uint64_t v38 = 0;
                uint64_t v37 = 0;
                uint64_t v39 = 0x3FF0000000000000;
                int v40 = 1;
                uint64_t v25 = *(WTF::StringImpl **)WebCore::mousePointerEventType(v23);
                if (v25) {
                  *(_DWORD *)v25 += 2;
                }
                float v41 = v25;
                uint64_t v42 = 0;
                __int16 v43 = 0;
                long long v44 = 0u;
                long long v45 = 0u;
                WebCore::EventHandler::dispatchSyntheticMouseMove();
                goto LABEL_17;
              }
            }
          }
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7 + 2);
  }
  return result;
}

void sub_198F2D820(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26)
{
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v28 + 144, a2);
  WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27, v30);
  if (a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, v31);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v26 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::updateSelectionWithTouches(uint64_t a1, const WebCore::IntPoint *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v48, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v48);
  unint64_t v11 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v12 = v48;
  unint64_t v48 = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198F2E19CLL);
    }
    --*(_DWORD *)v12;
  }
  if (result)
  {
    uint64_t v13 = (WebCore::ScrollView *)*((void *)result + 36);
    if (v13) {
      ++*((_DWORD *)v13 + 2);
    }
    uint64_t v60 = WebCore::ScrollView::rootViewToContents(v13, a2);
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1) {
        (*(void (**)(WebCore::ScrollView *))(*(void *)v13 + 8))(v13);
      }
      else {
        --*((_DWORD *)v13 + 2);
      }
    }
    WebCore::LocalFrame::visiblePositionForPoint((uint64_t *)&v56, (WebCore::LocalFrame *)v11, (const WebCore::IntPoint *)&v60);
    if (!v56)
    {
      WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a5, (uint64_t)a2, a3, 0);
LABEL_117:
      uint64_t v46 = v56;
      char v56 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 7) == 2)
        {
          if ((*((_WORD *)v46 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v46);
          }
        }
        else
        {
          *((_DWORD *)v46 + 7) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11 + 2);
    }
    if (WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection((WebKit::WebPage *)a1)) {
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture(a1, a3, a2);
    }
    LOBYTE(v54[0]) = 0;
    char v55 = 0;
    if ((a3 - 3) >= 2)
    {
      if (a3 == 1) {
        goto LABEL_27;
      }
      if (a3 != 2)
      {
        unsigned __int8 v16 = 0;
LABEL_116:
        WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a5, (uint64_t)a2, a3, v16);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54);
        goto LABEL_117;
      }
      if (!WebCore::VisibleSelection::isContentEditable((WebCore::VisibleSelection *)(*(void *)(*((void *)v11 + 37) + 3096) + 56)))
      {
LABEL_27:
        WebKit::rangeForPointInRootViewCoordinates((WebKit *)&v48, (WebCore::LocalFrame *)v11, a2, a4, *(unsigned __int8 *)(a1 + 200));
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v54, (uint64_t)&v48);
        int v17 = v53;
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48);
LABEL_113:
        if (v55) {
          WebCore::FrameSelection::setSelectedRange();
        }
        unsigned __int8 v16 = 2 * (v17 != 0);
        goto LABEL_116;
      }
      WebCore::closestWordBoundaryForPosition();
      WebCore::makeBoundaryPoint();
      if (v76)
      {
        unint64_t v14 = v73;
        *((_DWORD *)v73 + 7) += 2;
        char v65 = v14;
        int v66 = v74;
        WebCore::SimpleRange::SimpleRange();
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v65);
        unint64_t v48 = v77;
        int v49 = v78;
        uint64_t v15 = v80;
        char v77 = 0;
        uint64_t v80 = 0;
        uint64_t v50 = v15;
        int v51 = v81;
        char v52 = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v80);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v77);
        if (v76) {
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v73);
        }
      }
      else
      {
        LOBYTE(v48) = 0;
        char v52 = 0;
      }
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v54, (uint64_t)&v48);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48);
      float v35 = v69;
      char v69 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 7) == 2)
        {
          if ((*((_WORD *)v35 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v35);
          }
        }
        else
        {
          *((_DWORD *)v35 + 7) -= 2;
        }
      }
LABEL_112:
      int v17 = 0;
      goto LABEL_113;
    }
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::VisiblePosition();
    int v18 = v56;
    if (v56) {
      *((_DWORD *)v56 + 7) += 2;
    }
    char v69 = v18;
    int v70 = v57;
    char v71 = v58;
    char v72 = v59;
    if (WebCore::atBoundaryOfGranularity())
    {
      LOBYTE(v48) = 0;
      char v52 = 0;
LABEL_102:
      if (v18)
      {
        if (*((_DWORD *)v18 + 7) == 2)
        {
          if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v18);
          }
        }
        else
        {
          *((_DWORD *)v18 + 7) -= 2;
        }
      }
      uint64_t v44 = (uint64_t)v73;
      unint64_t v73 = 0;
      if (v44)
      {
        if (*(_DWORD *)(v44 + 28) == 2)
        {
          if ((*(_WORD *)(v44 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v44);
          }
        }
        else
        {
          *(_DWORD *)(v44 + 28) -= 2;
        }
      }
      long long v45 = v77;
      char v77 = 0;
      if (v45)
      {
        if (*((_DWORD *)v45 + 7) == 2)
        {
          if ((*((_WORD *)v45 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v45);
          }
        }
        else
        {
          *((_DWORD *)v45 + 7) -= 2;
        }
      }
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v54, (uint64_t)&v48);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48);
      goto LABEL_112;
    }
    if (WebCore::atBoundaryOfGranularity())
    {
      if (a4) {
        WebCore::VisiblePosition::previous();
      }
      else {
        WebCore::VisiblePosition::next();
      }
      uint64_t v19 = v65;
      char v65 = 0;
      uint64_t v20 = (uint64_t)v73;
      unint64_t v73 = v19;
      if (!v20) {
        goto LABEL_39;
      }
      if (*(_DWORD *)(v20 + 28) != 2)
      {
        *(_DWORD *)(v20 + 28) -= 2;
LABEL_39:
        int v74 = v66;
        char v75 = v67;
        char v76 = v68;
        goto LABEL_40;
      }
      if ((*(_WORD *)(v20 + 34) & 0x400) != 0) {
        goto LABEL_39;
      }
      WebCore::Node::removedLastRef((WebCore::Node *)v20);
      unint64_t v47 = v65;
      int v74 = v66;
      char v75 = v67;
      char v76 = v68;
      char v65 = 0;
      if (v47)
      {
        if (*((_DWORD *)v47 + 7) == 2)
        {
          if ((*((_WORD *)v47 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v47);
          }
        }
        else
        {
          *((_DWORD *)v47 + 7) -= 2;
        }
      }
    }
LABEL_40:
    WebCore::positionOfNextBoundaryOfGranularity();
    if (v65) {
      int v21 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    }
    else {
      int v21 = 0;
    }
    if (v21 && WebCore::atBoundaryOfGranularity() && !WebCore::operator==((uint64_t)&v69, (uint64_t)&v65))
    {
      int v36 = v65;
      if (v65) {
        *((_DWORD *)v65 + 7) += 2;
      }
      uint64_t v37 = (uint64_t)v73;
      unint64_t v73 = v36;
      if (v37)
      {
        if (*(_DWORD *)(v37 + 28) == 2)
        {
          if ((*(_WORD *)(v37 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v37);
          }
        }
        else
        {
          *(_DWORD *)(v37 + 28) -= 2;
        }
      }
      int v74 = v66;
      char v75 = v67;
      char v76 = v68;
      int v38 = (char)WebCore::documentOrder();
      if (v38 == -127 || (v38 & 0x80000000) == 0)
      {
        uint64_t v39 = v77;
        char v40 = v79;
        int v41 = v78;
        char v42 = v80;
        char v77 = v73;
        int v78 = v74;
        char v79 = v75;
        LOBYTE(v80) = v76;
        unint64_t v73 = v39;
        int v74 = v41;
        char v75 = v40;
        char v76 = v42;
      }
    }
    else
    {
      BOOL v22 = v73;
      if (v73) {
        uint64_t v23 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v23)
      {
        while (1)
        {
          if ((WebCore::atBoundaryOfGranularity() & 1) != 0
            || WebCore::operator==((uint64_t)&v73, (uint64_t)&v77)
            || (WebCore::atBoundaryOfGranularity() & 1) != 0
            || (WebCore::atBoundaryOfGranularity() & 1) != 0)
          {
LABEL_72:
            BOOL v22 = v73;
            break;
          }
          if (a4) {
            WebCore::VisiblePosition::next();
          }
          else {
            WebCore::VisiblePosition::previous();
          }
          uint64_t v24 = v61;
          char v61 = 0;
          uint64_t v25 = (uint64_t)v73;
          unint64_t v73 = v24;
          if (v25)
          {
            if (*(_DWORD *)(v25 + 28) == 2)
            {
              if ((*(_WORD *)(v25 + 34) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v25);
                uint64_t v27 = v61;
                int v74 = v62;
                char v75 = v63;
                char v76 = v64;
                char v61 = 0;
                if (v27)
                {
                  if (*((_DWORD *)v27 + 7) == 2)
                  {
                    if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v27);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v27 + 7) -= 2;
                  }
                }
                goto LABEL_61;
              }
            }
            else
            {
              *(_DWORD *)(v25 + 28) -= 2;
            }
          }
          int v74 = v62;
          char v75 = v63;
          char v76 = v64;
LABEL_61:
          if (v73) {
            uint64_t v26 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          }
          else {
            uint64_t v26 = 0;
          }
          if (!v26) {
            goto LABEL_72;
          }
        }
      }
      if (!v22 || WebCore::operator==((uint64_t)&v73, (uint64_t)&v77))
      {
        uint64_t v28 = v65;
        if (v65) {
          *((_DWORD *)v65 + 7) += 2;
        }
        uint64_t v29 = (uint64_t)v73;
        unint64_t v73 = v28;
        if (v29)
        {
          if (*(_DWORD *)(v29 + 28) == 2)
          {
            if ((*(_WORD *)(v29 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v29);
            }
          }
          else
          {
            *(_DWORD *)(v29 + 28) -= 2;
          }
        }
        int v74 = v66;
        char v75 = v67;
        char v76 = v68;
      }
      if (!v73)
      {
        LOBYTE(v48) = 0;
        char v52 = 0;
        goto LABEL_99;
      }
      int v30 = (char)WebCore::documentOrder();
      if (v30 == -127 || (v30 & 0x80000000) == 0)
      {
        __int16 v31 = v77;
        char v32 = v79;
        int v33 = v78;
        char v34 = v80;
        char v77 = v73;
        int v78 = v74;
        char v79 = v75;
        LOBYTE(v80) = v76;
        unint64_t v73 = v31;
        int v74 = v33;
        char v75 = v32;
        char v76 = v34;
      }
    }
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v48);
LABEL_99:
    __int16 v43 = v65;
    char v65 = 0;
    if (v43)
    {
      if (*((_DWORD *)v43 + 7) == 2)
      {
        if ((*((_WORD *)v43 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v43);
        }
      }
      else
      {
        *((_DWORD *)v43 + 7) -= 2;
      }
    }
    goto LABEL_102;
  }
  return result;
}

void sub_198F2E268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WebCore::Node *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WebCore::Node *a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a28);
  if (*(unsigned char *)(v32 - 120)) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v32 - 136));
  }
  uint64_t v34 = a31;
  a31 = 0;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 28) == 2)
    {
      if ((*(_WORD *)(v34 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v34);
      }
    }
    else
    {
      *(_DWORD *)(v34 + 28) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16);
  float v35 = a21;
  a21 = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 7) == 2)
    {
      if ((*((_WORD *)v35 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v35);
      }
    }
    else
    {
      *((_DWORD *)v35 + 7) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v31 + 8));
  _Unwind_Resume(a1);
}

void WebKit::rangeForPointInRootViewCoordinates(WebKit *this, WebCore::LocalFrame *a2, const WebCore::IntPoint *a3, uint64_t a4, int a5)
{
  uint64_t v10 = *(void *)(*((void *)a2 + 37) + 3096);
  uint64_t v11 = *(void *)(v10 + 56);
  if (v11) {
    *(_DWORD *)(v11 + 28) += 2;
  }
  uint64_t v154 = v11;
  int v155 = *(_DWORD *)(v10 + 64);
  char v156 = *(unsigned char *)(v10 + 68);
  uint64_t v12 = *(void *)(v10 + 72);
  if (v12) {
    *(_DWORD *)(v12 + 28) += 2;
  }
  uint64_t v157 = v12;
  int v158 = *(_DWORD *)(v10 + 80);
  char v159 = *(unsigned char *)(v10 + 84);
  uint64_t v13 = *(void *)(v10 + 88);
  if (v13) {
    *(_DWORD *)(v13 + 28) += 2;
  }
  uint64_t v160 = v13;
  int v161 = *(_DWORD *)(v10 + 96);
  char v162 = *(unsigned char *)(v10 + 100);
  uint64_t v14 = *(void *)(v10 + 104);
  if (v14) {
    *(_DWORD *)(v14 + 28) += 2;
  }
  uint64_t v163 = v14;
  int v164 = *(_DWORD *)(v10 + 112);
  char v165 = *(unsigned char *)(v10 + 116);
  uint64_t v15 = *(void *)(v10 + 120);
  if (v15) {
    *(_DWORD *)(v15 + 28) += 2;
  }
  uint64_t v166 = v15;
  int v167 = *(_DWORD *)(v10 + 128);
  char v168 = *(unsigned char *)(v10 + 132);
  uint64_t v16 = *(void *)(v10 + 136);
  if (v16) {
    *(_DWORD *)(v16 + 28) += 2;
  }
  uint64_t v169 = v16;
  int v170 = *(_DWORD *)(v10 + 144);
  char v171 = *(unsigned char *)(v10 + 148);
  __int16 v172 = *(_WORD *)(v10 + 152);
  char v173 = *(unsigned char *)(v10 + 154);
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::VisiblePosition();
  uint64_t v17 = *(void *)(*((void *)a2 + 16) + 8);
  if (!v17 || *(unsigned char *)(v17 + 144))
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 32) = 0;
    *((unsigned char *)this + 40) = 0;
    goto LABEL_277;
  }
  int v18 = (WebCore::ScrollView *)*((void *)a2 + 36);
  v144 = (WebCore::Node *)WebCore::ScrollView::unobscuredContentRect();
  uint64_t v145 = v19;
  v174 = (WebCore::Node *)WebCore::IntPoint::constrainedWithin(a3, (const WebCore::IntRect *)&v144);
  int32x2_t v147 = (int32x2_t)WebCore::ScrollView::rootViewToContents(v18, (const WebCore::IntPoint *)&v174);
  if ((a5 & 1) == 0)
  {
    uint64_t v20 = v151;
    if (v151) {
      *((_DWORD *)v151 + 7) += 2;
    }
    v144 = v20;
    LODWORD(v145) = v152;
    BYTE4(v145) = v153;
    uint64_t v21 = WebCore::Position::containerNode((WebCore::Position *)&v144);
    BOOL v22 = v144;
    v144 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 7) == 2)
      {
        if ((*((_WORD *)v22 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v22);
        }
      }
      else
      {
        *((_DWORD *)v22 + 7) -= 2;
      }
    }
    if (!v21) {
      goto LABEL_33;
    }
    uint64_t v23 = *(void *)(v21 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v23) {
      goto LABEL_33;
    }
    if ((*(unsigned char *)((*(void *)(v21 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0) {
      uint64_t v23 = *(void *)(*(void *)((*(void *)(v21 + 72) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    }
    if ((*(_DWORD *)(v23 + 120) & 6u) - 2 > 3)
    {
LABEL_33:
      if (a4)
      {
        unint64_t v29 = (unint64_t)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v151, 0) >> 32;
        unint64_t v30 = HIDWORD(v28);
        if ((v28 & 0x8000000000000000) != 0) {
          LODWORD(v30) = HIDWORD(v28) + 1;
        }
        __int32 v31 = v29 + ((int)v30 >> 1);
        if (v147.i32[1] >= v31) {
          goto LABEL_42;
        }
      }
      else
      {
        unint64_t v33 = (unint64_t)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v148, 0) >> 32;
        unint64_t v34 = HIDWORD(v32);
        if ((v32 & 0x8000000000000000) != 0) {
          LODWORD(v34) = HIDWORD(v32) + 1;
        }
        __int32 v31 = v33 + ((int)v34 >> 1);
        if (v147.i32[1] <= v31) {
          goto LABEL_42;
        }
      }
      v147.i32[1] = v31;
      goto LABEL_42;
    }
    if (a4)
    {
      int v24 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v151, 0);
      if (v25 >= 0) {
        int v26 = v25;
      }
      else {
        int v26 = v25 + 1;
      }
      __int32 v27 = v24 + (v26 >> 1);
      if (v147.i32[0] > v27) {
LABEL_288:
      }
        v147.i32[0] = v27;
    }
    else
    {
      int v119 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v148, 0);
      if (v120 >= 0) {
        int v121 = v120;
      }
      else {
        int v121 = v120 + 1;
      }
      __int32 v27 = v119 + (v121 >> 1);
      if (v147.i32[0] < v27) {
        goto LABEL_288;
      }
    }
  }
LABEL_42:
  int8x8_t v35 = (int8x8_t)vcgt_s32(v147, (int32x2_t)0xFE000000FE000000);
  v174 = (WebCore::Node *)vorr_s8((int8x8_t)(*(void *)&v35 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v147), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v147, 6uLL)), v35));
  WebCore::EventHandler::hitTestResultAtPoint();
  uint64_t v36 = v146;
  if (v146)
  {
    *(_DWORD *)(v146 + 28) += 2;
    if ((WebCore::HTMLElement::shouldExtendSelectionToTargetNode() & 1) == 0)
    {
      *(unsigned char *)this = 0;
      *((unsigned char *)this + 32) = 0;
      *((unsigned char *)this + 40) = 0;
      goto LABEL_274;
    }
  }
  BOOL v140 = 0;
  int v141 = 0;
  v142 &= 0xF0u;
  char v143 = 1;
  LOBYTE(v135) = 0;
  unsigned __int8 v139 = 0;
  if (v36)
  {
    WebCore::EventHandler::selectionExtentRespectingEditingBoundary();
    uint64_t v37 = v129;
    if (v129) {
      *((_DWORD *)v129 + 7) += 2;
    }
    char v192 = v37;
    int v193 = v130;
    char v194 = v131;
    WebCore::VisiblePosition::VisiblePosition();
  }
  else
  {
    WebCore::LocalFrame::visiblePositionForPoint((uint64_t *)&v129, a2, (const WebCore::IntPoint *)&v147);
    int v38 = v129;
    if (v129) {
      *((_DWORD *)v129 + 7) += 2;
    }
    char v192 = v38;
    int v193 = v130;
    char v194 = v131;
    WebCore::VisiblePosition::VisiblePosition();
  }
  uint64_t v39 = v174;
  v174 = 0;
  char v40 = v140;
  BOOL v140 = v39;
  if (!v40) {
    goto LABEL_55;
  }
  if (*((_DWORD *)v40 + 7) != 2)
  {
    *((_DWORD *)v40 + 7) -= 2;
LABEL_55:
    int v141 = v175;
    char v142 = v176;
    char v143 = v177;
    v174 = 0;
    goto LABEL_56;
  }
  if ((*((_WORD *)v40 + 17) & 0x400) != 0) {
    goto LABEL_55;
  }
  WebCore::Node::removedLastRef(v40);
  uint64_t v122 = v174;
  int v141 = v175;
  char v142 = v176;
  char v143 = v177;
  v174 = 0;
  if (v122)
  {
    if (*((_DWORD *)v122 + 7) == 2)
    {
      if ((*((_WORD *)v122 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v122);
      }
    }
    else
    {
      *((_DWORD *)v122 + 7) -= 2;
    }
  }
LABEL_56:
  int v41 = v192;
  char v192 = 0;
  if (v41)
  {
    if (*((_DWORD *)v41 + 7) == 2)
    {
      if ((*((_WORD *)v41 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v41);
      }
    }
    else
    {
      *((_DWORD *)v41 + 7) -= 2;
    }
  }
  char v42 = v129;
  char v129 = 0;
  if (v42)
  {
    if (*((_DWORD *)v42 + 7) == 2)
    {
      if ((*((_WORD *)v42 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v42);
      }
    }
    else
    {
      *((_DWORD *)v42 + 7) -= 2;
    }
  }
  if (!a4)
  {
    int v48 = (char)WebCore::documentOrder();
    BOOL v49 = v48 != -127 && v48 < 0;
    int v45 = !v49;
    if (v49 && !a5 || WebCore::operator==((uint64_t)&v140, (uint64_t)&v148))
    {
      WebCore::VisiblePosition::previous();
      uint64_t v50 = v174;
      v174 = 0;
      int v51 = v140;
      BOOL v140 = v50;
      if (!v51)
      {
LABEL_92:
        int v141 = v175;
        char v142 = v176;
        char v143 = v177;
        goto LABEL_93;
      }
      if (*((_DWORD *)v51 + 7) != 2)
      {
        *((_DWORD *)v51 + 7) -= 2;
        goto LABEL_92;
      }
      if ((*((_WORD *)v51 + 17) & 0x400) != 0) {
        goto LABEL_92;
      }
      WebCore::Node::removedLastRef(v51);
      uint64_t v124 = v174;
      int v141 = v175;
      char v142 = v176;
      char v143 = v177;
      v174 = 0;
      if (!v124) {
        goto LABEL_93;
      }
      if (*((_DWORD *)v124 + 7) != 2)
      {
        *((_DWORD *)v124 + 7) -= 2;
        goto LABEL_93;
      }
      if ((*((_WORD *)v124 + 17) & 0x400) != 0)
      {
LABEL_93:
        if (((v45 | a5 ^ 1) & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
LABEL_365:
      WebCore::Node::removedLastRef(v124);
      goto LABEL_93;
    }
    int v81 = v148;
    if (v148) {
      *((_DWORD *)v148 + 7) += 2;
    }
    v174 = v81;
    int v175 = v149;
    char v176 = v150;
    uint64_t v82 = WebCore::Position::containerNode((WebCore::Position *)&v174);
    a4 = v82;
    if (v82) {
      *(_DWORD *)(v82 + 28) += 2;
    }
    uint64_t v84 = v174;
    v174 = 0;
    if (v84)
    {
      if (*((_DWORD *)v84 + 7) == 2)
      {
        if ((*((_WORD *)v84 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v84);
        }
      }
      else
      {
        *((_DWORD *)v84 + 7) -= 2;
      }
    }
    if (!a4) {
      goto LABEL_93;
    }
    if (!v36 || *(void *)(a4 + 48) == *(void *)(v36 + 48))
    {
LABEL_190:
      if (*(_DWORD *)(a4 + 28) != 2)
      {
        *(_DWORD *)(a4 + 28) -= 2;
        goto LABEL_93;
      }
      if ((*(_WORD *)(a4 + 34) & 0x400) != 0) {
        goto LABEL_93;
      }
      uint64_t v124 = (WebCore::Node *)a4;
      goto LABEL_365;
    }
    uint64_t v85 = v140;
    if (v140) {
      *((_DWORD *)v140 + 7) += 2;
    }
    char v192 = v85;
    int v193 = v141;
    char v194 = v142;
    WebCore::VisibleSelection::adjustPositionForStart((uint64_t *)&v129, (WebCore::VisibleSelection *)&v192, (const WebCore::Position *)a4, v83);
    WebCore::VisiblePosition::VisiblePosition();
    uint64_t v86 = v174;
    v174 = 0;
    int v87 = v140;
    BOOL v140 = v86;
    if (v87)
    {
      if (*((_DWORD *)v87 + 7) == 2)
      {
        if ((*((_WORD *)v87 + 17) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v87);
          uint64_t v128 = v174;
          int v141 = v175;
          char v142 = v176;
          char v143 = v177;
          v174 = 0;
          if (v128)
          {
            if (*((_DWORD *)v128 + 7) == 2)
            {
              if ((*((_WORD *)v128 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v128);
              }
            }
            else
            {
              *((_DWORD *)v128 + 7) -= 2;
            }
          }
          goto LABEL_184;
        }
      }
      else
      {
        *((_DWORD *)v87 + 7) -= 2;
      }
    }
    int v141 = v175;
    char v142 = v176;
    char v143 = v177;
    v174 = 0;
LABEL_184:
    uint64_t v88 = v129;
    char v129 = 0;
    if (v88)
    {
      if (*((_DWORD *)v88 + 7) == 2)
      {
        if ((*((_WORD *)v88 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v88);
        }
      }
      else
      {
        *((_DWORD *)v88 + 7) -= 2;
      }
    }
    char v89 = v192;
    char v192 = 0;
    if (v89)
    {
      if (*((_DWORD *)v89 + 7) == 2)
      {
        if ((*((_WORD *)v89 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v89);
        }
      }
      else
      {
        *((_DWORD *)v89 + 7) -= 2;
      }
    }
    goto LABEL_190;
  }
  int v43 = (char)WebCore::documentOrder();
  BOOL v44 = v43 != -127 && v43 < 0;
  int v45 = !v44;
  if ((!v44 || a5) && !WebCore::operator==((uint64_t)&v140, (uint64_t)&v151))
  {
    int v74 = v151;
    if (v151) {
      *((_DWORD *)v151 + 7) += 2;
    }
    v174 = v74;
    int v175 = v152;
    char v176 = v153;
    uint64_t v75 = WebCore::Position::containerNode((WebCore::Position *)&v174);
    a4 = v75;
    if (v75) {
      *(_DWORD *)(v75 + 28) += 2;
    }
    isInsideOverlay = v174;
    v174 = 0;
    if (isInsideOverlay)
    {
      if (*((_DWORD *)isInsideOverlay + 7) == 2) {
        goto LABEL_336;
      }
      *((_DWORD *)isInsideOverlay + 7) -= 2;
    }
    goto LABEL_151;
  }
  WebCore::VisiblePosition::next();
  uint64_t v46 = v174;
  v174 = 0;
  unint64_t v47 = v140;
  BOOL v140 = v46;
  if (!v47) {
    goto LABEL_76;
  }
  if (*((_DWORD *)v47 + 7) != 2)
  {
    *((_DWORD *)v47 + 7) -= 2;
LABEL_76:
    int v141 = v175;
    char v142 = v176;
    char v143 = v177;
    goto LABEL_77;
  }
  if ((*((_WORD *)v47 + 17) & 0x400) != 0) {
    goto LABEL_76;
  }
  WebCore::Node::removedLastRef(v47);
  unsigned int v123 = v174;
  int v141 = v175;
  char v142 = v176;
  char v143 = v177;
  v174 = 0;
  if (v123)
  {
    if (*((_DWORD *)v123 + 7) == 2)
    {
      if ((*((_WORD *)v123 + 17) & 0x400) == 0) {
        goto LABEL_362;
      }
    }
    else
    {
      *((_DWORD *)v123 + 7) -= 2;
    }
  }
  while (1)
  {
LABEL_77:
    if ((v45 | a5 ^ 1))
    {
LABEL_94:
      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v174);
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v135, (uint64_t)&v174);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v174);
      a5 = 0;
    }
    else
    {
LABEL_95:
      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v174);
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v135, (uint64_t)&v174);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v174);
      a5 = 1;
    }
    if (!v139)
    {
      *(unsigned char *)this = 0;
      *((unsigned char *)this + 32) = 0;
LABEL_143:
      *((unsigned char *)this + 40) = a5;
      goto LABEL_270;
    }
    isInsideOverlay = (WebCore::Node *)WebCore::ImageOverlay::isInsideOverlay();
    if (!isInsideOverlay)
    {
      int v71 = v139;
      *(unsigned char *)this = 0;
      *((unsigned char *)this + 32) = 0;
      if (v71)
      {
        uint64_t v72 = v135;
        *(_DWORD *)(v135 + 28) += 2;
        *(void *)this = v72;
        *((_DWORD *)this + 2) = v136;
        uint64_t v73 = v137;
        *(_DWORD *)(v137 + 28) += 2;
        *((void *)this + 2) = v73;
        *((_DWORD *)this + 6) = v138;
        *((unsigned char *)this + 32) = 1;
      }
      goto LABEL_143;
    }
    if (v139) {
      break;
    }
    __break(1u);
LABEL_336:
    if ((*((_WORD *)isInsideOverlay + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(isInsideOverlay);
    }
LABEL_151:
    if (a4)
    {
      if (v36 && *(void *)(a4 + 48) != *(void *)(v36 + 48))
      {
        char v76 = v140;
        if (v140) {
          *((_DWORD *)v140 + 7) += 2;
        }
        char v192 = v76;
        int v193 = v141;
        char v194 = v142;
        WebCore::VisibleSelection::adjustPositionForEnd((uint64_t *)&v129, (WebCore::VisibleSelection *)&v192, (const WebCore::Position *)a4, v53);
        WebCore::VisiblePosition::VisiblePosition();
        char v77 = v174;
        v174 = 0;
        int v78 = v140;
        BOOL v140 = v77;
        if (!v78) {
          goto LABEL_159;
        }
        if (*((_DWORD *)v78 + 7) != 2)
        {
          *((_DWORD *)v78 + 7) -= 2;
          goto LABEL_159;
        }
        if ((*((_WORD *)v78 + 17) & 0x400) != 0)
        {
LABEL_159:
          int v141 = v175;
          char v142 = v176;
          char v143 = v177;
          v174 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v78);
          v127 = v174;
          int v141 = v175;
          char v142 = v176;
          char v143 = v177;
          v174 = 0;
          if (v127)
          {
            if (*((_DWORD *)v127 + 7) == 2)
            {
              if ((*((_WORD *)v127 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v127);
              }
            }
            else
            {
              *((_DWORD *)v127 + 7) -= 2;
            }
          }
        }
        char v79 = v129;
        char v129 = 0;
        if (v79)
        {
          if (*((_DWORD *)v79 + 7) == 2)
          {
            if ((*((_WORD *)v79 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v79);
            }
          }
          else
          {
            *((_DWORD *)v79 + 7) -= 2;
          }
        }
        uint64_t v80 = v192;
        char v192 = 0;
        if (v80)
        {
          if (*((_DWORD *)v80 + 7) == 2)
          {
            if ((*((_WORD *)v80 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v80);
            }
          }
          else
          {
            *((_DWORD *)v80 + 7) -= 2;
          }
        }
      }
      if (*(_DWORD *)(a4 + 28) == 2)
      {
        if ((*(_WORD *)(a4 + 34) & 0x400) == 0)
        {
          unsigned int v123 = (WebCore::Node *)a4;
LABEL_362:
          WebCore::Node::removedLastRef(v123);
        }
      }
      else
      {
        *(_DWORD *)(a4 + 28) -= 2;
      }
    }
  }
  uint64_t v54 = v135;
  *(_DWORD *)(v135 + 28) += 2;
  v184 = 0;
  v188 = (WebCore::Node *)v54;
  WebCore::Position::Position();
  WebCore::VisiblePosition::VisiblePosition();
  char v55 = v174;
  v174 = 0;
  if (v55)
  {
    if (*((_DWORD *)v55 + 7) == 2)
    {
      if ((*((_WORD *)v55 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v55);
      }
    }
    else
    {
      *((_DWORD *)v55 + 7) -= 2;
    }
  }
  char v56 = v188;
  v188 = 0;
  if (v56)
  {
    if (*((_DWORD *)v56 + 7) == 2)
    {
      if ((*((_WORD *)v56 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v56);
      }
    }
    else
    {
      *((_DWORD *)v56 + 7) -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v184);
  uint64_t v57 = v137;
  *(_DWORD *)(v137 + 28) += 2;
  uint64_t v183 = 0;
  v184 = (WebCore::Node *)v57;
  WebCore::Position::Position();
  WebCore::VisiblePosition::VisiblePosition();
  char v58 = v174;
  v174 = 0;
  if (v58)
  {
    if (*((_DWORD *)v58 + 7) == 2)
    {
      if ((*((_WORD *)v58 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v58);
      }
    }
    else
    {
      *((_DWORD *)v58 + 7) -= 2;
    }
  }
  uint64_t v59 = (uint64_t)v184;
  v184 = 0;
  if (v59)
  {
    if (*(_DWORD *)(v59 + 28) == 2)
    {
      if ((*(_WORD *)(v59 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v59);
      }
    }
    else
    {
      *(_DWORD *)(v59 + 28) -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v183);
  char v61 = v192;
  if (v192) {
    *((_DWORD *)v192 + 7) += 2;
  }
  v174 = v61;
  int v175 = v193;
  char v176 = v194;
  char v177 = v195;
  while ((WebKit::insideImageOverlay(&v174, v60) & 1) != 0)
  {
    char v63 = v174;
    if (v174) {
      *((_DWORD *)v174 + 7) += 2;
    }
    v184 = v63;
    int v185 = v175;
    char v186 = v176;
    uint64_t v64 = WebCore::Position::containerNode((WebCore::Position *)&v184);
    uint64_t v66 = v64;
    if (v64) {
      *(_DWORD *)(v64 + 28) += 2;
    }
    uint64_t v67 = (uint64_t)v184;
    v184 = 0;
    if (v67)
    {
      if (*(_DWORD *)(v67 + 28) == 2)
      {
        if ((*(_WORD *)(v67 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v67);
        }
      }
      else
      {
        *(_DWORD *)(v67 + 28) -= 2;
      }
    }
    if (v66)
    {
      if ((*(_WORD *)(v66 + 32) & 2) != 0)
      {
        WebCore::firstPositionInNode((WebCore *)v66, v65);
        WebCore::Position::downstream();
        WebCore::VisiblePosition::VisiblePosition();
        uint64_t v90 = (uint64_t)v184;
        v184 = 0;
        uint64_t v91 = v192;
        char v192 = (WebCore::Node *)v90;
        if (!v91) {
          goto LABEL_195;
        }
        if (*((_DWORD *)v91 + 7) != 2)
        {
          *((_DWORD *)v91 + 7) -= 2;
          goto LABEL_195;
        }
        if ((*((_WORD *)v91 + 17) & 0x400) != 0)
        {
LABEL_195:
          int v193 = v185;
          char v194 = v186;
          char v195 = v187;
          v184 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v91);
          uint64_t v125 = (uint64_t)v184;
          int v193 = v185;
          char v194 = v186;
          char v195 = v187;
          v184 = 0;
          if (v125)
          {
            if (*(_DWORD *)(v125 + 28) == 2)
            {
              if ((*(_WORD *)(v125 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v125);
              }
            }
            else
            {
              *(_DWORD *)(v125 + 28) -= 2;
            }
          }
        }
        uint64_t v92 = v183;
        uint64_t v183 = 0;
        if (v92)
        {
          if (*(_DWORD *)(v92 + 28) == 2)
          {
            if ((*(_WORD *)(v92 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v92);
            }
          }
          else
          {
            *(_DWORD *)(v92 + 28) -= 2;
          }
        }
        uint64_t v93 = v182;
        uint64_t v182 = 0;
        if (v93)
        {
          if (*(_DWORD *)(v93 + 28) == 2)
          {
            if ((*(_WORD *)(v93 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v93);
            }
          }
          else
          {
            *(_DWORD *)(v93 + 28) -= 2;
          }
        }
        if (*(_DWORD *)(v66 + 28) == 2)
        {
          if ((*(_WORD *)(v66 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v66);
          }
        }
        else
        {
          *(_DWORD *)(v66 + 28) -= 2;
        }
        break;
      }
      if (*(_DWORD *)(v66 + 28) == 2)
      {
        if ((*(_WORD *)(v66 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v66);
        }
      }
      else
      {
        *(_DWORD *)(v66 + 28) -= 2;
      }
    }
    WebCore::VisiblePosition::previous();
    char v68 = v184;
    v184 = 0;
    char v69 = v174;
    v174 = v68;
    if (!v69) {
      goto LABEL_129;
    }
    if (*((_DWORD *)v69 + 7) != 2)
    {
      *((_DWORD *)v69 + 7) -= 2;
LABEL_129:
      int v175 = v185;
      char v176 = v186;
      char v177 = v187;
      continue;
    }
    if ((*((_WORD *)v69 + 17) & 0x400) != 0) {
      goto LABEL_129;
    }
    WebCore::Node::removedLastRef(v69);
    uint64_t v70 = (uint64_t)v184;
    int v175 = v185;
    char v176 = v186;
    char v177 = v187;
    v184 = 0;
    if (v70)
    {
      if (*(_DWORD *)(v70 + 28) == 2)
      {
        if ((*(_WORD *)(v70 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v70);
        }
      }
      else
      {
        *(_DWORD *)(v70 + 28) -= 2;
      }
    }
  }
  int v94 = v174;
  v174 = 0;
  if (v94)
  {
    if (*((_DWORD *)v94 + 7) == 2)
    {
      if ((*((_WORD *)v94 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v94);
      }
    }
    else
    {
      *((_DWORD *)v94 + 7) -= 2;
    }
  }
  uint64_t v95 = v188;
  if (v188) {
    *((_DWORD *)v188 + 7) += 2;
  }
  v174 = v95;
  int v175 = v189;
  char v176 = v190;
  char v177 = v191;
  while ((WebKit::insideImageOverlay(&v174, v62) & 1) != 0)
  {
    int v96 = v174;
    if (v174) {
      *((_DWORD *)v174 + 7) += 2;
    }
    v184 = v96;
    int v185 = v175;
    char v186 = v176;
    uint64_t v97 = WebCore::Position::containerNode((WebCore::Position *)&v184);
    uint64_t v99 = v97;
    if (v97) {
      *(_DWORD *)(v97 + 28) += 2;
    }
    uint64_t v100 = (uint64_t)v184;
    v184 = 0;
    if (v100)
    {
      if (*(_DWORD *)(v100 + 28) == 2)
      {
        if ((*(_WORD *)(v100 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v100);
        }
      }
      else
      {
        *(_DWORD *)(v100 + 28) -= 2;
      }
    }
    if (v99)
    {
      if ((*(_WORD *)(v99 + 32) & 2) != 0)
      {
        WebCore::lastPositionInNode((WebCore *)v99, v98);
        WebCore::Position::upstream();
        WebCore::VisiblePosition::VisiblePosition();
        uint64_t v104 = (uint64_t)v184;
        v184 = 0;
        BOOL v105 = v188;
        v188 = (WebCore::Node *)v104;
        if (!v105) {
          goto LABEL_239;
        }
        if (*((_DWORD *)v105 + 7) != 2)
        {
          *((_DWORD *)v105 + 7) -= 2;
          goto LABEL_239;
        }
        if ((*((_WORD *)v105 + 17) & 0x400) != 0)
        {
LABEL_239:
          int v189 = v185;
          char v190 = v186;
          char v191 = v187;
          v184 = 0;
        }
        else
        {
          WebCore::Node::removedLastRef(v105);
          uint64_t v126 = (uint64_t)v184;
          int v189 = v185;
          char v190 = v186;
          char v191 = v187;
          v184 = 0;
          if (v126)
          {
            if (*(_DWORD *)(v126 + 28) == 2)
            {
              if ((*(_WORD *)(v126 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v126);
              }
            }
            else
            {
              *(_DWORD *)(v126 + 28) -= 2;
            }
          }
        }
        uint64_t v106 = v183;
        uint64_t v183 = 0;
        if (v106)
        {
          if (*(_DWORD *)(v106 + 28) == 2)
          {
            if ((*(_WORD *)(v106 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v106);
            }
          }
          else
          {
            *(_DWORD *)(v106 + 28) -= 2;
          }
        }
        uint64_t v107 = v182;
        uint64_t v182 = 0;
        if (v107)
        {
          if (*(_DWORD *)(v107 + 28) == 2)
          {
            if ((*(_WORD *)(v107 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v107);
            }
          }
          else
          {
            *(_DWORD *)(v107 + 28) -= 2;
          }
        }
        if (*(_DWORD *)(v99 + 28) == 2)
        {
          if ((*(_WORD *)(v99 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v99);
          }
        }
        else
        {
          *(_DWORD *)(v99 + 28) -= 2;
        }
        break;
      }
      if (*(_DWORD *)(v99 + 28) == 2)
      {
        if ((*(_WORD *)(v99 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v99);
        }
      }
      else
      {
        *(_DWORD *)(v99 + 28) -= 2;
      }
    }
    WebCore::VisiblePosition::next();
    long long v101 = v184;
    v184 = 0;
    uint64_t v102 = v174;
    v174 = v101;
    if (!v102) {
      goto LABEL_225;
    }
    if (*((_DWORD *)v102 + 7) != 2)
    {
      *((_DWORD *)v102 + 7) -= 2;
LABEL_225:
      int v175 = v185;
      char v176 = v186;
      char v177 = v187;
      continue;
    }
    if ((*((_WORD *)v102 + 17) & 0x400) != 0) {
      goto LABEL_225;
    }
    WebCore::Node::removedLastRef(v102);
    uint64_t v103 = (uint64_t)v184;
    int v175 = v185;
    char v176 = v186;
    char v177 = v187;
    v184 = 0;
    if (v103)
    {
      if (*(_DWORD *)(v103 + 28) == 2)
      {
        if ((*(_WORD *)(v103 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v103);
        }
      }
      else
      {
        *(_DWORD *)(v103 + 28) -= 2;
      }
    }
  }
  v108 = v174;
  v174 = 0;
  if (v108)
  {
    if (*((_DWORD *)v108 + 7) == 2)
    {
      if ((*((_WORD *)v108 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v108);
      }
    }
    else
    {
      *((_DWORD *)v108 + 7) -= 2;
    }
  }
  v109 = v192;
  if (v192) {
    *((_DWORD *)v192 + 7) += 2;
  }
  v174 = v109;
  int v175 = v193;
  char v176 = v194;
  char v177 = v195;
  char v110 = v188;
  if (v188) {
    *((_DWORD *)v188 + 7) += 2;
  }
  uint64_t v178 = v110;
  int v179 = v189;
  char v180 = v190;
  char v181 = v191;
  WebCore::makeSimpleRange();
  v111 = v178;
  uint64_t v178 = 0;
  if (v111)
  {
    if (*((_DWORD *)v111 + 7) == 2)
    {
      if ((*((_WORD *)v111 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v111);
      }
    }
    else
    {
      *((_DWORD *)v111 + 7) -= 2;
    }
  }
  v112 = v174;
  v174 = 0;
  if (v112)
  {
    if (*((_DWORD *)v112 + 7) == 2)
    {
      if ((*((_WORD *)v112 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v112);
      }
    }
    else
    {
      *((_DWORD *)v112 + 7) -= 2;
    }
  }
  uint64_t v113 = v188;
  v188 = 0;
  if (v113)
  {
    if (*((_DWORD *)v113 + 7) == 2)
    {
      if ((*((_WORD *)v113 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v113);
      }
    }
    else
    {
      *((_DWORD *)v113 + 7) -= 2;
    }
  }
  unsigned int v114 = v192;
  char v192 = 0;
  if (v114)
  {
    if (*((_DWORD *)v114 + 7) == 2)
    {
      if ((*((_WORD *)v114 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v114);
      }
    }
    else
    {
      *((_DWORD *)v114 + 7) -= 2;
    }
  }
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 32) = 0;
  if (v134)
  {
    *(void *)this = v129;
    *((_DWORD *)this + 2) = v130;
    uint64_t v115 = v132;
    char v129 = 0;
    uint64_t v132 = 0;
    *((void *)this + 2) = v115;
    *((_DWORD *)this + 6) = v133;
    *((unsigned char *)this + 32) = 1;
  }
  *((unsigned char *)this + 40) = 0;
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v129);
LABEL_270:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v135);
  uint64_t v116 = v140;
  BOOL v140 = 0;
  if (v116)
  {
    if (*((_DWORD *)v116 + 7) == 2)
    {
      if ((*((_WORD *)v116 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v116);
      }
    }
    else
    {
      *((_DWORD *)v116 + 7) -= 2;
    }
  }
  if (v36)
  {
LABEL_274:
    if (*(_DWORD *)(v36 + 28) == 2)
    {
      if ((*(_WORD *)(v36 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v36);
      }
    }
    else
    {
      *(_DWORD *)(v36 + 28) -= 2;
    }
  }
  MEMORY[0x199731400](&v144);
LABEL_277:
  uint64_t v117 = v148;
  v148 = 0;
  if (v117)
  {
    if (*((_DWORD *)v117 + 7) == 2)
    {
      if ((*((_WORD *)v117 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v117);
      }
    }
    else
    {
      *((_DWORD *)v117 + 7) -= 2;
    }
  }
  long long v118 = v151;
  v151 = 0;
  if (v118)
  {
    if (*((_DWORD *)v118 + 7) == 2)
    {
      if ((*((_WORD *)v118 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v118);
      }
    }
    else
    {
      *((_DWORD *)v118 + 7) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v154);
}

void sub_198F2FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WebCore::Node *a20,uint64_t a21,uint64_t a22,WebCore::Node *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WebCore::Node *a41,uint64_t a42,uint64_t a43,WebCore::Node *a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a10);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  uint64_t v51 = *(void *)(v49 - 88);
  *(void *)(v49 - 88) = 0;
  if (v51)
  {
    if (*(_DWORD *)(v51 + 28) == 2)
    {
      if ((*(_WORD *)(v51 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v51);
      }
    }
    else
    {
      *(_DWORD *)(v51 + 28) -= 2;
    }
  }
  if (*(_DWORD *)(v48 + 28) == 2)
  {
    if ((*(_WORD *)(v48 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v48);
    }
  }
  else
  {
    *(_DWORD *)(v48 + 28) -= 2;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15);
  char v52 = a20;
  a20 = 0;
  if (v52)
  {
    if (*((_DWORD *)v52 + 7) == 2)
    {
      if ((*((_WORD *)v52 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v52);
      }
    }
    else
    {
      *((_DWORD *)v52 + 7) -= 2;
    }
  }
  if (v47)
  {
    if (*(_DWORD *)(v47 + 28) == 2)
    {
      if ((*(_WORD *)(v47 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v47);
      }
    }
    else
    {
      *(_DWORD *)(v47 + 28) -= 2;
    }
  }
  MEMORY[0x199731400](&a23);
  unsigned __int8 v53 = a41;
  a41 = 0;
  if (v53)
  {
    if (*((_DWORD *)v53 + 7) == 2)
    {
      if ((*((_WORD *)v53 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v53);
      }
    }
    else
    {
      *((_DWORD *)v53 + 7) -= 2;
    }
  }
  uint64_t v54 = a44;
  a44 = 0;
  if (v54)
  {
    if (*((_DWORD *)v54 + 7) == 2)
    {
      if ((*((_WORD *)v54 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v54);
      }
    }
    else
    {
      *((_DWORD *)v54 + 7) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a47);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::selectWithTwoTouches(uint64_t a1, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v22, *(WebCore::Page **)(a1 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v22);
  uint64_t v12 = (unsigned int *)result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v13 = v22;
  BOOL v22 = 0;
  if (v13)
  {
    if (!*(_DWORD *)v13)
    {
      uint64_t result = 286;
      __break(0xC471u);
      goto LABEL_32;
    }
    --*(_DWORD *)v13;
  }
  if (!result) {
    return result;
  }
  uint64_t v14 = *(WebCore::ScrollView **)(result + 288);
  if (v14) {
    ++*((_DWORD *)v14 + 2);
  }
  BOOL v22 = (WebCore::FocusController *)WebCore::ScrollView::rootViewToContents(v14, a2);
  WebCore::LocalFrame::visiblePositionForPoint((uint64_t *)&v28, (WebCore::LocalFrame *)v12, (const WebCore::IntPoint *)&v22);
  BOOL v22 = (WebCore::FocusController *)WebCore::ScrollView::rootViewToContents(v14, a3);
  WebCore::LocalFrame::visiblePositionForPoint((uint64_t *)&v27, (WebCore::LocalFrame *)v12, (const WebCore::IntPoint *)&v22);
  WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v22);
  if (v26)
  {
    uint64_t result = WebCore::documentOrder();
    if ((char)result != -127 && (char)result < 0) {
      goto LABEL_14;
    }
    if (v26)
    {
      uint64_t v15 = v22;
      int v16 = v23;
      int v30 = v23;
      uint64_t v17 = v24;
      int v24 = 0;
      BOOL v22 = v17;
      uint64_t v31 = 0;
      int v18 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v31);
      int v23 = v25;
      uint64_t v29 = 0;
      uint64_t v19 = (uint64_t)v24;
      int v24 = v15;
      uint64_t v31 = v19;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v18);
      int v25 = v16;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v29);
LABEL_14:
      WebCore::FrameSelection::setSelectedRange();
      goto LABEL_15;
    }
LABEL_32:
    __break(1u);
    return result;
  }
LABEL_15:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22);
  WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a6, (uint64_t)a2, a4, a5, 0);
  uint64_t v20 = v27;
  __int32 v27 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 7) == 2)
    {
      if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v20);
      }
    }
    else
    {
      *((_DWORD *)v20 + 7) -= 2;
    }
  }
  uint64_t v21 = v28;
  unint64_t v28 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 7) == 2)
    {
      if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v21);
      }
    }
    else
    {
      *((_DWORD *)v21 + 7) -= 2;
    }
  }
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1) {
      (*(void (**)(WebCore::ScrollView *))(*(void *)v14 + 8))(v14);
    }
    else {
      --*((_DWORD *)v14 + 2);
    }
  }
  return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12 + 2);
}

void sub_198F3015C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, uint64_t a16, WebCore::Node *a17)
{
  if (a14)
  {
    if (*((_DWORD *)a14 + 7) == 2)
    {
      if ((*((_WORD *)a14 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a14);
      }
    }
    else
    {
      *((_DWORD *)a14 + 7) -= 2;
    }
  }
  if (a17)
  {
    if (*((_DWORD *)a17 + 7) == 2)
    {
      if ((*((_WORD *)a17 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a17);
      }
    }
    else
    {
      *((_DWORD *)a17 + 7) -= 2;
    }
  }
  if (v18)
  {
    if (v18[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[2];
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebPage::extendSelectionForReplacement(WebCore::Page **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v52 = v3;
  char v53 = 1;
  WebCore::Page::checkedFocusController((uint64_t *)&v34, a1[6]);
  uint64_t v4 = WebCore::FocusController::focusedOrMainFrame(v34);
  uint64_t v5 = v4;
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  }
  uint64_t v6 = v34;
  unint64_t v34 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6) {
      goto LABEL_64;
    }
    --*(_DWORD *)v6;
  }
  if (v4)
  {
    uint64_t v7 = *(void *)(v4 + 296);
    if (!v7)
    {
LABEL_53:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
      return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v52);
    }
    *(_DWORD *)(v7 + 28) += 2;
    WebCore::VisibleSelection::range(&v47, (WebCore::VisibleSelection *)(*(void *)(v7 + 3096) + 56));
    if (!v51 || v47 != v49 || v48 != v50)
    {
LABEL_51:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47);
      if (*(_DWORD *)(v7 + 28) == 2)
      {
        if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
        }
      }
      else
      {
        *(_DWORD *)(v7 + 28) -= 2;
      }
      goto LABEL_53;
    }
    WebCore::VisiblePosition::VisiblePosition();
    uint64_t v8 = v44;
    if (v44) {
      *((_DWORD *)v44 + 7) += 2;
    }
    unint64_t v34 = v8;
    int v35 = v45;
    char v36 = v46;
    uint64_t v9 = WebCore::Position::containerNode((WebCore::Position *)&v34);
    uint64_t v10 = v9;
    if (v9) {
      *(_DWORD *)(v9 + 28) += 2;
    }
    uint64_t v11 = v34;
    unint64_t v34 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 7) == 2)
      {
        if ((*((_WORD *)v11 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v11);
        }
      }
      else
      {
        *((_DWORD *)v11 + 7) -= 2;
      }
    }
    if (!v10)
    {
LABEL_48:
      __int32 v27 = v44;
      BOOL v44 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 7) == 2)
        {
          if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v27);
          }
        }
        else
        {
          *((_DWORD *)v27 + 7) -= 2;
        }
      }
      goto LABEL_51;
    }
    if (!*(void *)(v7 + 1536)) {
      WebCore::Document::ensureMarkers((WebCore::Document *)v7);
    }
    WebCore::DocumentMarkerController::markersFor();
    char v42 = 0;
    uint64_t v43 = 0;
    unsigned int v13 = v40;
    if (!v40)
    {
LABEL_27:
      WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v12);
      LOBYTE(v39) = 0;
      char v41 = 0;
      if (HIDWORD(v43))
      {
        uint64_t v19 = v42;
        uint64_t v20 = 32 * HIDWORD(v43);
        while (1)
        {
          uint64_t v21 = *v19;
          *(_DWORD *)(v21 + 28) = *(_DWORD *)(*v19 + 28) + 2;
          uint64_t v29 = v21;
          int v30 = *((_DWORD *)v19 + 2);
          uint64_t v22 = v19[2];
          *(_DWORD *)(v22 + 28) += 2;
          uint64_t v31 = v22;
          int v32 = *((_DWORD *)v19 + 6);
          char v33 = 1;
          WebCore::makeVisiblePositionRange();
          int v23 = WebCore::contains();
          int v24 = v38;
          int v38 = 0;
          if (v24)
          {
            if (*((_DWORD *)v24 + 7) == 2)
            {
              if ((*((_WORD *)v24 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v24);
              }
            }
            else
            {
              *((_DWORD *)v24 + 7) -= 2;
            }
          }
          int v25 = v34;
          unint64_t v34 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 7) == 2)
            {
              if ((*((_WORD *)v25 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v25);
              }
            }
            else
            {
              *((_DWORD *)v25 + 7) -= 2;
            }
          }
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29);
          if (v23) {
            break;
          }
          v19 += 4;
          v20 -= 32;
          if (!v20) {
            goto LABEL_43;
          }
        }
        std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t)&v39, v19);
      }
LABEL_43:
      if (v41
        || (WebCore::wordRangeFromPosition(),
            std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v39, (uint64_t)&v34), std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34), v41))
      {
        WebKit::WebPage::setSelectedRangeDispatchingSyntheticMouseEventsIfNeeded(a1, (uint64_t)&v39);
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39);
      WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v26);
      if (*(_DWORD *)(v10 + 28) == 2)
      {
        if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
      }
      else
      {
        *(_DWORD *)(v10 + 28) -= 2;
      }
      goto LABEL_48;
    }
    if (!(v40 >> 27))
    {
      uint64_t v14 = WTF::fastMalloc((WTF *)(32 * v40));
      LODWORD(v43) = v13;
      char v42 = (uint64_t *)v14;
      if (v40)
      {
        unint64_t v15 = 0;
        uint64_t v16 = v14 + 16;
        do
        {
          WebCore::makeSimpleRange();
          ++v15;
          uint64_t v17 = v34;
          unint64_t v34 = 0;
          *(void *)(v16 - 16) = v17;
          *(_DWORD *)(v16 - 8) = v35;
          uint64_t v18 = v37;
          uint64_t v37 = 0;
          *(void *)uint64_t v16 = v18;
          *(_DWORD *)(v16 + 8) = v38;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v37);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v34);
          v16 += 32;
        }
        while (v15 < v40);
        HIDWORD(v43) = v15;
      }
      goto LABEL_27;
    }
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x198F30670);
  }
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v52);
}

void sub_198F306B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, uint64_t a16, WebCore::Node *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,int a27,int a28,WebCore::Node *a29)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20);
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a25, v34);
  if (*(_DWORD *)(v31 + 28) == 2)
  {
    if ((*(_WORD *)(v31 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v31);
    }
  }
  else
  {
    *(_DWORD *)(v31 + 28) -= 2;
  }
  int v35 = a29;
  a29 = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 7) == 2)
    {
      if ((*((_WORD *)v35 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v35);
      }
    }
    else
    {
      *((_DWORD *)v35 + 7) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v32 - 136);
  if (*(_DWORD *)(v30 + 28) == 2)
  {
    if ((*(_WORD *)(v30 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v30);
    }
  }
  else
  {
    *(_DWORD *)(v30 + 28) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v29 + 8));
  WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit((uint64_t *)(v32 - 96));
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(v4 + 28) = *(_DWORD *)(*a2 + 28) + 2;
    uint64_t v5 = *(void *)a1;
    *(void *)a1 = v4;
    uint64_t v11 = v5;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v6 = a2[2];
    *(_DWORD *)(v6 + 28) += 2;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    uint64_t v11 = v7;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    int v8 = *((_DWORD *)a2 + 6);
  }
  else
  {
    *(_DWORD *)(v4 + 28) = *(_DWORD *)(*a2 + 28) + 2;
    *(void *)a1 = v4;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v9 = a2[2];
    *(_DWORD *)(v9 + 28) += 2;
    *(void *)(a1 + 16) = v9;
    int v8 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(a1 + 32) = 1;
  }
  *(_DWORD *)(a1 + 24) = v8;
  return a1;
}

unsigned int *WebKit::WebPage::setSelectedRangeDispatchingSyntheticMouseEventsIfNeeded(WebCore::Page **a1, uint64_t a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v27, a1[6]);
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v27);
  uint64_t v5 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v6 = v27;
  __int32 v27 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198F30C40);
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    unint64_t v36 = 0;
    int shouldDispatchSyntheticMouseEventsWhenModifyingSelection = WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection((WebKit::WebPage *)a1);
    if (shouldDispatchSyntheticMouseEventsWhenModifyingSelection)
    {
      int v8 = (WebCore::ScrollView *)*((void *)v5 + 36);
      if (v8) {
        ++*((_DWORD *)v8 + 2);
      }
      WebCore::makeDeprecatedLegacyPosition();
      WebCore::VisiblePosition::VisiblePosition();
      uint64_t v33 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v27, 0);
      uint64_t v34 = v9;
      uint64_t v10 = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)&v33);
      if ((v11 & 0x80000000) == 0) {
        int v12 = v11;
      }
      else {
        int v12 = v11 + 1;
      }
      uint64_t v13 = (v10 + (v12 >> 1));
      unint64_t v14 = HIDWORD(v11);
      if ((v11 & 0x8000000000000000) != 0) {
        LODWORD(v14) = HIDWORD(v11) + 1;
      }
      unint64_t v35 = v13 | ((unint64_t)(HIDWORD(v10) + ((int)v14 >> 1)) << 32);
      unint64_t v15 = v27;
      __int32 v27 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 7) == 2)
        {
          if ((*((_WORD *)v15 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v15);
          }
        }
        else
        {
          *((_DWORD *)v15 + 7) -= 2;
        }
      }
      uint64_t v16 = v32;
      uint64_t v32 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 7) == 2)
        {
          if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v16);
          }
        }
        else
        {
          *((_DWORD *)v16 + 7) -= 2;
        }
      }
      WebCore::makeDeprecatedLegacyPosition();
      WebCore::VisiblePosition::VisiblePosition();
      uint64_t v33 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v27, 0);
      uint64_t v34 = v17;
      uint64_t v18 = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)&v33);
      if ((v19 & 0x80000000) == 0) {
        int v20 = v19;
      }
      else {
        int v20 = v19 + 1;
      }
      uint64_t v21 = (v18 + (v20 >> 1));
      unint64_t v22 = HIDWORD(v19);
      if ((v19 & 0x8000000000000000) != 0) {
        LODWORD(v22) = HIDWORD(v19) + 1;
      }
      unint64_t v36 = v21 | ((unint64_t)(HIDWORD(v18) + ((int)v22 >> 1)) << 32);
      int v23 = v27;
      __int32 v27 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 7) == 2)
        {
          if ((*((_WORD *)v23 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v23);
          }
        }
        else
        {
          *((_DWORD *)v23 + 7) -= 2;
        }
      }
      int v24 = v32;
      uint64_t v32 = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 7) == 2)
        {
          if ((*((_WORD *)v24 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v24);
          }
        }
        else
        {
          *((_DWORD *)v24 + 7) -= 2;
        }
      }
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)a1, 0, (WebCore::IntPoint *)&v35);
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)a1, 1, (WebCore::IntPoint *)&v36);
      if (v8)
      {
        if (*((_DWORD *)v8 + 2) == 1) {
          (*(void (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
        }
        else {
          --*((_DWORD *)v8 + 2);
        }
      }
    }
    int v25 = *(WebCore::Node **)a2;
    *((_DWORD *)v25 + 7) = *(_DWORD *)(*(void *)a2 + 28) + 2;
    __int32 v27 = v25;
    int v28 = *(_DWORD *)(a2 + 8);
    uint64_t v26 = *(void *)(a2 + 16);
    *(_DWORD *)(v26 + 28) += 2;
    uint64_t v29 = v26;
    int v30 = *(_DWORD *)(a2 + 24);
    char v31 = 1;
    WebCore::FrameSelection::setSelectedRange();
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27);
    if (shouldDispatchSyntheticMouseEventsWhenModifyingSelection) {
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)a1, 2, (WebCore::IntPoint *)&v36);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5 + 2);
  }
  return result;
}

void sub_198F30C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_198F30D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10) {
      --*a10;
    }
    else {
      __break(0xC471u);
    }
  }
  JUMPOUT(0x198F30D40);
}

uint64_t *WebKit::WebPage::extendSelection(WebCore::Page **a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v14 = v5;
  char v15 = 1;
  WebCore::Page::checkedFocusController((uint64_t *)v11, a1[6]);
  uint64_t v6 = WebCore::FocusController::focusedOrMainFrame(v11[0]);
  uint64_t v7 = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  int v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198F30EE4);
    }
    --*(_DWORD *)v8;
  }
  if (a2 == 1 && v6)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(v6 + 296) + 3096) + 153) == 1)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::wordRangeFromPosition();
      if (v12) {
        WebKit::WebPage::setSelectedRangeDispatchingSyntheticMouseEventsIfNeeded(a1, (uint64_t)v11);
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11);
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 7) == 2)
        {
          if ((*((_WORD *)v9 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v9);
          }
        }
        else
        {
          *((_DWORD *)v9 + 7) -= 2;
        }
      }
    }
    goto LABEL_15;
  }
  if (v6) {
LABEL_15:
  }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v14);
}

void sub_198F30EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  uint64_t v17 = a14;
  a14 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 7) == 2)
    {
      if ((*((_WORD *)v17 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v17);
      }
    }
    else
    {
      *((_DWORD *)v17 + 7) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit((uint64_t *)(v15 - 48));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::platformDidSelectAll(WebCore::Page **this)
{
  uint64_t result = WebKit::WebPage::shouldDispatchSyntheticMouseEventsWhenModifyingSelection((WebKit::WebPage *)this);
  if (result)
  {
    WebCore::Page::checkedFocusController((uint64_t *)v23, this[6]);
    uint64_t result = WebCore::FocusController::focusedOrMainFrame(v23[0]);
    uint64_t v3 = result;
    if (result) {
      atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
    }
    uint64_t v4 = v23[0];
    v23[0] = 0;
    if (v4)
    {
      if (!*(_DWORD *)v4)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      --*(_DWORD *)v4;
    }
    if (result)
    {
      uint64_t v5 = *(WebCore::ScrollView **)(result + 288);
      if (v5) {
        ++*((_DWORD *)v5 + 2);
      }
      WebCore::VisiblePosition::VisiblePosition();
      uint64_t v24 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v23, 0);
      uint64_t v25 = v6;
      uint64_t v7 = WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)&v24);
      unint64_t v9 = v8;
      uint64_t v10 = v23[0];
      v23[0] = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 7) == 2)
        {
          if ((*((_WORD *)v10 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v10);
          }
        }
        else
        {
          *((_DWORD *)v10 + 7) -= 2;
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      uint64_t v24 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v23, 0);
      uint64_t v25 = v11;
      uint64_t v12 = WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)&v24);
      unint64_t v14 = v13;
      uint64_t v15 = v23[0];
      v23[0] = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 7) == 2)
        {
          if ((*((_WORD *)v15 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v15);
          }
        }
        else
        {
          *((_DWORD *)v15 + 7) -= 2;
        }
      }
      if ((v9 & 0x80000000) == 0) {
        int v16 = v9;
      }
      else {
        int v16 = v9 + 1;
      }
      uint64_t v17 = (v7 + (v16 >> 1));
      unint64_t v18 = HIDWORD(v9);
      if ((v9 & 0x8000000000000000) != 0) {
        LODWORD(v18) = HIDWORD(v9) + 1;
      }
      v23[0] = (WebCore::Node *)(v17 | ((unint64_t)(HIDWORD(v7) + ((int)v18 >> 1)) << 32));
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)this, 0, (WebCore::IntPoint *)v23);
      if ((v14 & 0x80000000) == 0) {
        int v19 = v14;
      }
      else {
        int v19 = v14 + 1;
      }
      uint64_t v20 = (v12 + (v19 >> 1));
      unint64_t v21 = HIDWORD(v14);
      if ((v14 & 0x8000000000000000) != 0) {
        LODWORD(v21) = HIDWORD(v14) + 1;
      }
      unint64_t v22 = (WebCore::Node *)(v20 | ((unint64_t)(HIDWORD(v12) + ((int)v21 >> 1)) << 32));
      v23[0] = v22;
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)this, 1, (WebCore::IntPoint *)v23);
      v23[0] = v22;
      WebKit::WebPage::dispatchSyntheticMouseEventsForSelectionGesture((uint64_t)this, 2, (WebCore::IntPoint *)v23);
      if (v5)
      {
        if (*((_DWORD *)v5 + 2) == 1) {
          (*(void (**)(WebCore::ScrollView *))(*(void *)v5 + 8))(v5);
        }
        else {
          --*((_DWORD *)v5 + 2);
        }
      }
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
    }
  }
  return result;
}

void sub_198F31204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (v11)
  {
    if (v11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
    }
    else {
      --v11[2];
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::selectWordBackward(WebCore::Page **this)
{
  WebCore::Page::checkedFocusController((uint64_t *)v6, this[6]);
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v6[0]);
  uint64_t v2 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v3 = v6[0];
  v6[0] = 0;
  if (v3)
  {
    if (!*(_DWORD *)v3)
    {
      __break(0xC471u);
      JUMPOUT(0x198F31430);
    }
    --*(_DWORD *)v3;
  }
  if (result)
  {
    if (*(unsigned char *)(*(void *)(*((void *)result + 37) + 3096) + 153) == 1)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::positionOfNextBoundaryOfGranularity();
      if (v7)
      {
        if (!WebCore::operator==((uint64_t)&v7, (uint64_t)&v8))
        {
          WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)v6);
          WebCore::FrameSelection::setSelectedRange();
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
        }
        uint64_t v4 = v7;
        uint64_t v7 = 0;
        if (v4)
        {
          if (*((_DWORD *)v4 + 7) == 2)
          {
            if ((*((_WORD *)v4 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v4);
            }
          }
          else
          {
            *((_DWORD *)v4 + 7) -= 2;
          }
        }
      }
      uint64_t v5 = v8;
      uint64_t v8 = 0;
      if (v5)
      {
        if (*(_DWORD *)(v5 + 28) == 2)
        {
          if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
          }
        }
        else
        {
          *(_DWORD *)(v5 + 28) -= 2;
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2 + 2);
  }
  return result;
}

void sub_198F31454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  unint64_t v18 = a15;
  a15 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 7) == 2)
    {
      if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v18);
      }
    }
    else
    {
      *((_DWORD *)v18 + 7) -= 2;
    }
  }
  uint64_t v19 = *(void *)(v16 - 40);
  *(void *)(v16 - 40) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 28) == 2)
    {
      if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
      }
    }
    else
    {
      *(_DWORD *)(v19 + 28) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_198F31640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, WebCore::Node *a11)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a9);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  if (a11)
  {
    if (*((_DWORD *)a11 + 7) == 2)
    {
      if ((*((_WORD *)a11 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a11);
      }
    }
    else
    {
      *((_DWORD *)a11 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::moveSelectionByOffset(uint64_t a1, int a2, uint64_t *a3)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v17, *(WebCore::Page **)(a1 + 48));
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v17);
  uint64_t v6 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198F31928);
    }
    --*(_DWORD *)v7;
  }
  if (result)
  {
    WebCore::VisiblePosition::VisiblePosition();
    uint64_t v8 = v25;
    if (v25)
    {
      *((_DWORD *)v25 + 7) += 2;
      unint64_t v21 = v8;
      int v22 = v26;
      char v23 = v27;
      char v24 = v28;
      unint64_t v9 = (unint64_t)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      if (a2)
      {
        if (a2 >= 0) {
          int v10 = a2;
        }
        else {
          int v10 = -a2;
        }
        while (1)
        {
          WebCore::positionOfNextBoundaryOfGranularity();
          uint64_t v11 = v17;
          uint64_t v17 = 0;
          uint64_t v12 = v21;
          unint64_t v21 = v11;
          if (!v12) {
            goto LABEL_15;
          }
          if (*((_DWORD *)v12 + 7) != 2) {
            break;
          }
          if ((*((_WORD *)v12 + 17) & 0x400) != 0) {
            goto LABEL_15;
          }
          WebCore::Node::removedLastRef(v12);
          unint64_t v14 = v17;
          int v22 = v18;
          char v23 = v19;
          char v24 = v20;
          uint64_t v17 = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 7) == 2)
            {
              if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v14);
              }
            }
            else
            {
              *((_DWORD *)v14 + 7) -= 2;
            }
          }
LABEL_16:
          char v13 = (char)v21;
          if (!v21)
          {
            unint64_t v9 = 0;
            goto LABEL_27;
          }
          unint64_t v9 = (unint64_t)WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
          if (!--v10) {
            goto LABEL_25;
          }
        }
        *((_DWORD *)v12 + 7) -= 2;
LABEL_15:
        int v22 = v18;
        char v23 = v19;
        char v24 = v20;
        goto LABEL_16;
      }
LABEL_25:
      char v13 = 0;
LABEL_27:
      if (v13 & 1 | v9 && !WebCore::operator==((uint64_t)&v25, (uint64_t)&v21))
      {
        WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v17);
        WebCore::FrameSelection::setSelectedRange();
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
      }
      WTF::CompletionHandler<void ()(void)>::operator()(a3);
      uint64_t v15 = v21;
      unint64_t v21 = 0;
      if (v15)
      {
        if (*((_DWORD *)v15 + 7) == 2)
        {
          if ((*((_WORD *)v15 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v15);
          }
        }
        else
        {
          *((_DWORD *)v15 + 7) -= 2;
        }
      }
      uint64_t v16 = v25;
      uint64_t v25 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 7) == 2)
        {
          if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v16);
          }
        }
        else
        {
          *((_DWORD *)v16 + 7) -= 2;
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6 + 2);
  }
  return result;
}

void sub_198F3194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, WebCore::Node *a18)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  char v20 = a15;
  a15 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 7) == 2)
    {
      if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v20);
      }
    }
    else
    {
      *((_DWORD *)v20 + 7) -= 2;
    }
  }
  unint64_t v21 = a18;
  a18 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 7) == 2)
    {
      if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v21);
      }
    }
    else
    {
      *((_DWORD *)v21 + 7) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::startAutoscrollAtPosition(WebKit::WebPage *this, const WebCore::FloatPoint *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 6);
  uint64_t v4 = *((void *)result + 20);
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 144) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return result;
  }
  uint64_t v6 = *((void *)this + 116);
  if (v6 && (*(void *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(unsigned char *)((*(void *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      return (unsigned int *)WebCore::EventHandler::startSelectionAutoscroll();
    }
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x198F31B78);
  }
  WebCore::Page::checkedFocusController((uint64_t *)v10, (WebCore::Page *)result);
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v10[0]);
  uint64_t v7 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v8 = v10[0];
  v10[0] = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      __break(0xC471u);
      goto LABEL_27;
    }
    --*(_DWORD *)v8;
  }
  if (result)
  {
    uint64_t v9 = *(void *)(*((void *)result + 37) + 3096);
    if (*(unsigned char *)(v9 + 153) == 2)
    {
      WebCore::VisibleSelection::toNormalizedRange((uint64_t *)v10, (WebCore::VisibleSelection *)(v9 + 56));
      if (v11 && (*((void *)v10[0] + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
        WebCore::EventHandler::startSelectionAutoscroll();
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7 + 2);
  }
  return result;
}

void sub_198F31B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::requestEvasionRectsAboveSelection(WebCore::Page **a1, uint64_t *a2)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  WebCore::Page::checkedFocusController((uint64_t *)&v118, a1[6]);
  uint64_t v4 = WebCore::FocusController::focusedOrMainFrame(v118);
  uint64_t v5 = v4;
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  }
  uint64_t v6 = v118;
  long long v118 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      goto LABEL_177;
    }
    --*(_DWORD *)v6;
  }
  if (v4)
  {
    uint64_t v7 = *(WebCore::ScrollView **)(v4 + 288);
    if (!v7)
    {
      long long v118 = 0;
      uint64_t v119 = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
      long long v101 = v118;
      if (v118)
      {
        long long v118 = 0;
        LODWORD(v119) = 0;
        WTF::fastFree(v101, v100);
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    ++*((_DWORD *)v7 + 2);
    uint64_t v8 = *(void *)(*(void *)(v4 + 296) + 3096);
    uint64_t v9 = *(WTF **)(v8 + 56);
    if (v9) {
      *((_DWORD *)v9 + 7) += 2;
    }
    long long v118 = v9;
    LODWORD(v119) = *(_DWORD *)(v8 + 64);
    BYTE4(v119) = *(unsigned char *)(v8 + 68);
    uint64_t v10 = *(void *)(v8 + 72);
    if (v10) {
      *(_DWORD *)(v10 + 28) += 2;
    }
    uint64_t v120 = v10;
    int v121 = *(_DWORD *)(v8 + 80);
    char v122 = *(unsigned char *)(v8 + 84);
    uint64_t v11 = *(void *)(v8 + 88);
    if (v11) {
      *(_DWORD *)(v11 + 28) += 2;
    }
    uint64_t v123 = v11;
    int v124 = *(_DWORD *)(v8 + 96);
    char v125 = *(unsigned char *)(v8 + 100);
    uint64_t v12 = *(void *)(v8 + 104);
    if (v12) {
      *(_DWORD *)(v12 + 28) += 2;
    }
    uint64_t v126 = v12;
    int v127 = *(_DWORD *)(v8 + 112);
    char v128 = *(unsigned char *)(v8 + 116);
    uint64_t v13 = *(void *)(v8 + 120);
    if (v13) {
      *(_DWORD *)(v13 + 28) += 2;
    }
    uint64_t v129 = v13;
    int v130 = *(_DWORD *)(v8 + 128);
    char v131 = *(unsigned char *)(v8 + 132);
    uint64_t v14 = *(void *)(v8 + 136);
    if (v14) {
      *(_DWORD *)(v14 + 28) += 2;
    }
    uint64_t v132 = v14;
    int v133 = *(_DWORD *)(v8 + 144);
    char v134 = *(unsigned char *)(v8 + 148);
    __int16 v135 = *(_WORD *)(v8 + 152);
    char v136 = *(unsigned char *)(v8 + 154);
    if (!HIBYTE(v135))
    {
      v110[0] = 0;
      v110[1] = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
      goto LABEL_32;
    }
    WebCore::VisibleSelection::toNormalizedRange(v116, (WebCore::VisibleSelection *)&v118);
    if (!v117) {
      goto LABEL_30;
    }
    uint64_t v15 = a1[116];
    if (!v15 || (*((void *)v15 + 9) & 0xFFFFFFFFFFFFLL) == 0) {
      goto LABEL_30;
    }
    if ((*(unsigned char *)((*((void *)v15 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198F32718);
    }
    if (WebKit::WebPage::isTransparentOrFullyClipped((WebKit::WebPage *)a1, v15)
      || (double v19 = WebKit::WebPage::totalScaleFactor((WebKit::WebPage *)a1, v16),
          char v20 = a1[6],
          (uint64_t v21 = *((void *)v20 + 20)) == 0)
      || *(unsigned char *)(v21 + 144))
    {
LABEL_30:
      v110[0] = 0;
      v110[1] = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
LABEL_31:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v116);
LABEL_32:
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v118);
      if (*((_DWORD *)v7 + 2) == 1) {
        (*(void (**)(WebCore::ScrollView *))(*(void *)v7 + 8))(v7);
      }
      else {
        --*((_DWORD *)v7 + 2);
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    double v22 = v19;
    float v23 = *((float *)v20 + 92);
    char v24 = *(_DWORD **)(v21 + 288);
    if (v24) {
      ++v24[2];
    }
    WebCore::ScrollView::unobscuredContentRect();
    if ((v25 & 0x80000000) == 0) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = -(int)v25;
    }
    unint64_t v27 = HIDWORD(v25);
    if ((v25 & 0x8000000000000000) != 0) {
      LODWORD(v27) = -HIDWORD(v25);
    }
    unint64_t v28 = v26 * (unint64_t)v27;
    if ((v28 & 0xFFFFFFFF00000000) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      if (v24)
      {
        if (v24[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
        }
        else {
          --v24[2];
        }
      }
      long long v115 = 0uLL;
      if (HIBYTE(v135) != 2)
      {
        uint64_t v137 = WebCore::FrameSelection::absoluteCaretBounds(*(WebCore::FrameSelection **)(*(void *)(v5 + 296) + 3096), 0);
        *(void *)int v138 = v34;
        uint64_t v107 = (WTF *)WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v137);
        uint64_t v108 = v35;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v110, (const WebCore::IntRect *)&v107);
        long long v115 = *(_OWORD *)v110;
        goto LABEL_57;
      }
      if (v117)
      {
        WebCore::RenderObject::absoluteTextRects();
        uint64_t v137 = WebCore::unionRect();
        *(void *)int v138 = v29;
        uint64_t v107 = (WTF *)WebCore::ScrollView::contentsToRootView(v7, (const WebCore::IntRect *)&v137);
        uint64_t v108 = v30;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v110, (const WebCore::IntRect *)&v107);
        long long v115 = *(_OWORD *)v110;
        uint64_t v33 = v113;
        if (v113)
        {
          uint64_t v113 = 0;
          LODWORD(v114) = 0;
          WTF::fastFree(v33, v31);
        }
LABEL_57:
        uint64_t v36 = 0;
        LODWORD(v37) = 0;
        float v38 = v22 / v23;
        double v39 = v38 * 0.5 * (double)v28;
        LODWORD(v32) = DWORD1(v115);
        float v40 = *((float *)&v115 + 3);
        float v41 = *(float *)&v115 + (float)(*((float *)&v115 + 2) * 0.5);
        uint64_t v102 = v32;
        float v103 = v41;
        v112 = 0;
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        v110[0] = (WTF *)v111;
        v110[1] = (WTF *)5;
        do
        {
          *((void *)v110[0] + v37) = qword_1994F7428[v36];
          uint64_t v37 = ++HIDWORD(v110[1]);
          ++v36;
        }
        while (v36 != 5);
        if (v37)
        {
          char v42 = (float32x2_t *)v110[0];
          float32x2_t v104 = (float32x2_t)__PAIR64__(v32, LODWORD(v41));
          uint64_t v43 = 8 * v37;
          uint64_t v44 = MEMORY[0x1E4FB68E0];
          do
          {
            uint64_t v137 = (uint64_t)vadd_f32(v104, vmul_n_f32(*v42, 1.0 / v38));
            uint64_t v45 = *((void *)a1[6] + 20);
            if (v45) {
              BOOL v46 = *(unsigned char *)(v45 + 144) == 0;
            }
            else {
              BOOL v46 = 0;
            }
            if (v46)
            {
              uint64_t v107 = 0;
              uint64_t v47 = (unsigned int *)(v45 + 8);
              atomic_fetch_add((atomic_uint *volatile)(v45 + 8), 1u);
              uint64_t v48 = WebCore::LocalFrame::nodeRespondingToClickEvents((WebCore::LocalFrame *)v45, (const WebCore::FloatPoint *)&v137, (WebCore::FloatPoint *)&v107, 0);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v47);
              if (v48)
              {
                __int16 v49 = *(_WORD *)(v48 + 32);
                if ((v49 & 0x10) != 0)
                {
                  if ((v49 & 0xF000) != 0x9000
                    && *(void *)(*(void *)(v48 + 104) + 24) != *(void *)(*(void *)v44 + 24))
                  {
LABEL_72:
                    if (!WebCore::Node::computeEditability())
                    {
                      *(_DWORD *)(v48 + 28) += 2;
                      uint64_t v137 = v48;
                      WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add((uint64_t *)&v112, &v137, (uint64_t)&v107);
                      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v137);
                    }
                  }
                }
                else if ((v49 & 0xF000) != 0x9000)
                {
                  goto LABEL_72;
                }
              }
            }
            ++v42;
            v43 -= 8;
          }
          while (v43);
        }
        uint64_t v51 = 0;
        unsigned int v52 = 0;
        v53.i32[1] = HIDWORD(v102);
        *(float *)v53.i32 = 80.0 / v38;
        *(float *)&uint64_t v137 = *(float *)&v115 - (float)(80.0 / v38);
        *((float *)&v137 + 1) = *(float *)&v102 + (float)(v40 * 0.5);
        *(int32x2_t *)&v138[4] = vrev64_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32(v53, 0), vadd_f32(*(float32x2_t *)&v115, *(float32x2_t *)((char *)&v115 + 8))));
        *(float *)int v138 = v103;
        float v139 = *((float *)&v137 + 1);
        uint64_t v107 = (WTF *)v109;
        uint64_t v108 = 3;
        do
        {
          *((void *)v107 + v52) = *(void *)&v138[v51 - 8];
          unsigned int v52 = ++HIDWORD(v108);
          v51 += 8;
        }
        while (v51 != 24);
        if (v52)
        {
          uint64_t v54 = v107;
          char v55 = (WTF *)((char *)v107 + 8 * v52);
          uint64_t v56 = MEMORY[0x1E4FB68E0];
          do
          {
            uint64_t v57 = *((void *)a1[6] + 20);
            if (v57) {
              BOOL v58 = *(unsigned char *)(v57 + 144) == 0;
            }
            else {
              BOOL v58 = 0;
            }
            if (v58)
            {
              uint64_t v137 = 0;
              uint64_t v59 = (unsigned int *)(v57 + 8);
              atomic_fetch_add((atomic_uint *volatile)(v57 + 8), 1u);
              uint64_t v60 = WebCore::LocalFrame::nodeRespondingToClickEvents((WebCore::LocalFrame *)v57, v54, (WebCore::FloatPoint *)&v137, 0);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v59);
              if (v60)
              {
                __int16 v61 = *(_WORD *)(v60 + 32);
                if ((v61 & 0x10) != 0)
                {
                  if ((v61 & 0xF000) != 0x9000
                    && *(void *)(*(void *)(v60 + 104) + 24) != *(void *)(*(void *)v56 + 24))
                  {
LABEL_93:
                    if (!WebCore::Node::computeEditability() && v112)
                    {
                      int v63 = *((_DWORD *)v112 - 2);
                      unint64_t v64 = (~(v60 << 32) + v60) ^ ((unint64_t)(~(v60 << 32) + v60) >> 22);
                      unint64_t v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
                      unint64_t v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
                      unsigned int v67 = v63 & ((v66 >> 31) ^ v66);
                      for (int i = 1; ; ++i)
                      {
                        uint64_t v69 = v67;
                        uint64_t v70 = v112[v67];
                        if (v70 != -1)
                        {
                          if (!v70) {
                            goto LABEL_94;
                          }
                          if (v70 == v60) {
                            break;
                          }
                        }
                        unsigned int v67 = (v69 + i) & v63;
                      }
                      if (v69 != *((_DWORD *)v112 - 1))
                      {
                        *WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v112[v69]) = -1;
                        ++*((_DWORD *)v112 - 4);
                        int v71 = v112 ? *((_DWORD *)v112 - 3) - 1 : -1;
                        *((_DWORD *)v112 - 3) = v71;
                        if (v112)
                        {
                          unsigned int v72 = *((_DWORD *)v112 - 1);
                          if (6 * *((_DWORD *)v112 - 3) < v72 && v72 >= 9) {
                            WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash((uint64_t *)&v112, v72 >> 1, 0);
                          }
                        }
                      }
                    }
                  }
                }
                else if ((v61 & 0xF000) != 0x9000)
                {
                  goto LABEL_93;
                }
              }
            }
LABEL_94:
            uint64_t v54 = (WTF *)((char *)v54 + 8);
          }
          while (v54 != v55);
        }
        if (v112)
        {
          uint64_t v74 = *((unsigned int *)v112 - 1);
          uint64_t v75 = &v112[v74];
          if (*((_DWORD *)v112 - 3))
          {
            char v76 = v112;
            if (v74)
            {
              uint64_t v77 = 8 * v74;
              char v76 = v112;
              while ((unint64_t)(*v76 + 1) <= 1)
              {
                ++v76;
                v77 -= 8;
                if (!v77)
                {
                  char v76 = v75;
                  goto LABEL_125;
                }
              }
            }
            goto LABEL_125;
          }
          char v76 = &v112[v74];
        }
        else
        {
          char v76 = 0;
          uint64_t v74 = 0;
        }
        uint64_t v75 = &v112[v74];
LABEL_125:
        if (v112) {
          int v78 = &v112[*((unsigned int *)v112 - 1)];
        }
        else {
          int v78 = 0;
        }
        while (v76 != v78)
        {
          uint64_t v79 = *v76;
          uint64_t v80 = *(void *)(*(void *)(*(void *)(*v76 + 48) + 8) + 544);
          if (v80)
          {
            uint64_t v81 = *(void *)(v80 + 8);
            if (v81)
            {
              uint64_t v82 = *(WebCore::ScrollView **)(v81 + 288);
              if (v82)
              {
                int v83 = *((_DWORD *)v82 + 2) + 1;
                *((_DWORD *)v82 + 2) = v83;
                uint64_t v84 = (WebCore::RenderObject *)(*(void *)(v79 + 72) & 0xFFFFFFFFFFFFLL);
                if (v84)
                {
                  uint64_t v105 = WebCore::RenderObject::absoluteBoundingBoxRect(v84, 1, 0);
                  uint64_t v106 = v85;
                  uint64_t v137 = WebCore::ScrollView::contentsToRootView(v82, (const WebCore::IntRect *)&v105);
                  *(void *)int v138 = v86;
                  if ((int)v86 >= 0) {
                    unsigned int v87 = v86;
                  }
                  else {
                    unsigned int v87 = -(int)v86;
                  }
                  unint64_t v88 = (unint64_t)v86 >> 32;
                  if (SHIDWORD(v86) < 0) {
                    LODWORD(v88) = -HIDWORD(v86);
                  }
                  unint64_t v89 = v87 * (unint64_t)v88;
                  if ((v89 & 0xFFFFFFFF00000000) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198F32724);
                  }
                  if (v39 >= (double)v89)
                  {
                    uint64_t v105 = WebCore::enclosingIntRect((WebCore *)&v115, v86);
                    uint64_t v106 = v90;
                    if ((WebCore::IntRect::contains((WebCore::IntRect *)&v137, (const WebCore::IntRect *)&v105) & 1) == 0)
                    {
                      uint64_t v91 = HIDWORD(v114);
                      if (HIDWORD(v114) == v114)
                      {
                        unint64_t v92 = HIDWORD(v114) + ((unint64_t)HIDWORD(v114) >> 2);
                        if (v92 >= 0x10) {
                          unint64_t v93 = v92 + 1;
                        }
                        else {
                          unint64_t v93 = 16;
                        }
                        if (v93 <= (unint64_t)HIDWORD(v114) + 1) {
                          unint64_t v94 = HIDWORD(v114) + 1;
                        }
                        else {
                          unint64_t v94 = v93;
                        }
                        WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v113, v94);
                        uint64_t v91 = HIDWORD(v114);
                      }
                      WebCore::FloatRect::FloatRect((WTF *)((char *)v113 + 16 * v91), (const WebCore::IntRect *)&v137);
                      ++HIDWORD(v114);
                    }
                  }
                  int v83 = *((_DWORD *)v82 + 2);
                }
                if (v83 == 1) {
                  (*(void (**)(WebCore::ScrollView *))(*(void *)v82 + 8))(v82);
                }
                else {
                  *((_DWORD *)v82 + 2) = v83 - 1;
                }
              }
            }
          }
          uint64_t v95 = v76 + 1;
          char v76 = v75;
          if (v95 != v75)
          {
            char v76 = v95;
            while ((unint64_t)(*v76 + 1) <= 1)
            {
              if (++v76 == v75)
              {
                char v76 = v75;
                break;
              }
            }
          }
        }
        WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
        uint64_t v97 = v107;
        if (v109 != (unsigned char *)v107 && v107)
        {
          uint64_t v107 = 0;
          LODWORD(v108) = 0;
          WTF::fastFree(v97, v96);
        }
        uint64_t v98 = v110[0];
        if (v111 != (unsigned char *)v110[0] && v110[0])
        {
          v110[0] = 0;
          LODWORD(v110[1]) = 0;
          WTF::fastFree(v98, v96);
        }
        uint64_t v99 = v113;
        if (v113)
        {
          uint64_t v113 = 0;
          LODWORD(v114) = 0;
          WTF::fastFree(v99, v96);
        }
        if (v112) {
          WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(v112, v96);
        }
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_177:
    JUMPOUT(0x198F326D0);
  }
  long long v118 = 0;
  uint64_t v119 = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
  uint64_t result = (unsigned int *)v118;
  if (v118)
  {
    long long v118 = 0;
    LODWORD(v119) = 0;
    return (unsigned int *)WTF::fastFree((WTF *)result, v17);
  }
  return result;
}

void sub_198F32730(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF *a35,int a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF *a44,int a45)
{
  if (a44) {
    WTF::fastFree(a44, a2);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v45 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::getRectsForGranularityWithSelectionOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v30, *(WebCore::Page **)(a1 + 48));
  uint64_t v6 = WebCore::FocusController::focusedOrMainFrame(v30);
  uint64_t v7 = v6;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  }
  uint64_t v8 = v30;
  uint64_t v30 = 0;
  if (v8)
  {
    if (!*(_DWORD *)v8)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v8;
  }
  if (v6)
  {
    if (*(unsigned char *)(a1 + 1473)) {
      uint64_t v9 = a1 + 1376;
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 + 296) + 3096) + 56;
    }
    uint64_t v12 = *(WTF **)v9;
    if (*(void *)v9) {
      *((_DWORD *)v12 + 7) += 2;
    }
    uint64_t v30 = v12;
    LODWORD(v31) = *(_DWORD *)(v9 + 8);
    BYTE4(v31) = *(unsigned char *)(v9 + 12);
    uint64_t v13 = *(void *)(v9 + 16);
    if (v13) {
      *(_DWORD *)(v13 + 28) += 2;
    }
    uint64_t v32 = v13;
    int v33 = *(_DWORD *)(v9 + 24);
    char v34 = *(unsigned char *)(v9 + 28);
    uint64_t v14 = *(void *)(v9 + 32);
    if (v14) {
      *(_DWORD *)(v14 + 28) += 2;
    }
    uint64_t v35 = v14;
    int v36 = *(_DWORD *)(v9 + 40);
    char v37 = *(unsigned char *)(v9 + 44);
    uint64_t v15 = *(void *)(v9 + 48);
    if (v15) {
      *(_DWORD *)(v15 + 28) += 2;
    }
    uint64_t v38 = v15;
    int v39 = *(_DWORD *)(v9 + 56);
    char v40 = *(unsigned char *)(v9 + 60);
    uint64_t v16 = *(void *)(v9 + 64);
    if (v16) {
      *(_DWORD *)(v16 + 28) += 2;
    }
    uint64_t v41 = v16;
    int v42 = *(_DWORD *)(v9 + 72);
    char v43 = *(unsigned char *)(v9 + 76);
    uint64_t v17 = *(void *)(v9 + 80);
    if (v17) {
      *(_DWORD *)(v17 + 28) += 2;
    }
    uint64_t v44 = v17;
    int v45 = *(_DWORD *)(v9 + 88);
    char v46 = *(unsigned char *)(v9 + 92);
    __int16 v47 = *(_WORD *)(v9 + 96);
    char v48 = *(unsigned char *)(v9 + 98);
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::visiblePositionForPositionWithOffset();
    uint64_t v18 = v24;
    char v24 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 7) == 2)
      {
        if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v18);
        }
      }
      else
      {
        *((_DWORD *)v18 + 7) -= 2;
      }
    }
    WebCore::enclosingTextUnitOfGranularity();
    if (!v28 || v24 == v26 && v25 == v27)
    {
      double v22 = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
    }
    else
    {
      WebCore::RenderObject::collectSelectionGeometriesWithoutUnionInteriorLines();
      char v20 = *(WebCore::ScrollView **)(v7 + 288);
      if (v20) {
        ++*((_DWORD *)v20 + 2);
      }
      WebKit::convertContentToRootView(v20, v22, v23);
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
      if (*((_DWORD *)v20 + 2) == 1) {
        (*(void (**)(WebCore::ScrollView *))(*(void *)v20 + 8))(v20);
      }
      else {
        --*((_DWORD *)v20 + 2);
      }
    }
    if (v22) {
      WTF::fastFree(v22, v19);
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24);
    uint64_t v21 = v29;
    uint64_t v29 = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 7) == 2)
      {
        if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v21);
        }
      }
      else
      {
        *((_DWORD *)v21 + 7) -= 2;
      }
    }
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v30);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
    uint64_t result = (uint64_t)v30;
    if (v30)
    {
      uint64_t v30 = 0;
      LODWORD(v31) = 0;
      return WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

void sub_198F32D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WebCore::Node *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12);
  uint64_t v23 = a17;
  a17 = 0;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 28) == 2)
    {
      if ((*(_WORD *)(v23 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v23);
      }
    }
    else
    {
      *(_DWORD *)(v23 + 28) -= 2;
    }
  }
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&a20);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v21 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebPage::storeSelectionForAccessibility(WebCore::Page **this, char a2)
{
  if (a2)
  {
    WebCore::Page::checkedFocusController((uint64_t *)&v37, this[6]);
    uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v37);
    uint64_t v4 = v3;
    if (v3) {
      atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    }
    uint64_t v5 = v37;
    char v37 = 0;
    if (v5)
    {
      if (!*(_DWORD *)v5)
      {
        __break(0xC471u);
        return;
      }
      --*(_DWORD *)v5;
    }
    if (v3)
    {
      uint64_t v6 = *(void *)(*(void *)(v3 + 296) + 3096);
      uint64_t v7 = *(WebCore::Page **)(v6 + 56);
      if (v7) {
        *((_DWORD *)v7 + 7) += 2;
      }
      uint64_t v8 = this[172];
      this[172] = v7;
      if (v8)
      {
        if (*((_DWORD *)v8 + 7) == 2)
        {
          if ((*((_WORD *)v8 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v8);
          }
        }
        else
        {
          *((_DWORD *)v8 + 7) -= 2;
        }
      }
      int v9 = *(_DWORD *)(v6 + 64);
      *((unsigned char *)this + 1388) = *(unsigned char *)(v6 + 68);
      *((_DWORD *)this + 346) = v9;
      uint64_t v10 = *(WebCore::Page **)(v6 + 72);
      if (v10) {
        *((_DWORD *)v10 + 7) += 2;
      }
      uint64_t v11 = this[174];
      this[174] = v10;
      if (v11)
      {
        if (*((_DWORD *)v11 + 7) == 2)
        {
          if ((*((_WORD *)v11 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v11);
          }
        }
        else
        {
          *((_DWORD *)v11 + 7) -= 2;
        }
      }
      int v12 = *(_DWORD *)(v6 + 80);
      *((unsigned char *)this + 1404) = *(unsigned char *)(v6 + 84);
      *((_DWORD *)this + 350) = v12;
      uint64_t v13 = *(WebCore::Page **)(v6 + 88);
      if (v13) {
        *((_DWORD *)v13 + 7) += 2;
      }
      uint64_t v14 = this[176];
      this[176] = v13;
      if (v14)
      {
        if (*((_DWORD *)v14 + 7) == 2)
        {
          if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v14);
          }
        }
        else
        {
          *((_DWORD *)v14 + 7) -= 2;
        }
      }
      int v15 = *(_DWORD *)(v6 + 96);
      *((unsigned char *)this + 1420) = *(unsigned char *)(v6 + 100);
      *((_DWORD *)this + 354) = v15;
      uint64_t v16 = *(WebCore::Page **)(v6 + 104);
      if (v16) {
        *((_DWORD *)v16 + 7) += 2;
      }
      uint64_t v17 = this[178];
      this[178] = v16;
      if (v17)
      {
        if (*((_DWORD *)v17 + 7) == 2)
        {
          if ((*((_WORD *)v17 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v17);
          }
        }
        else
        {
          *((_DWORD *)v17 + 7) -= 2;
        }
      }
      int v18 = *(_DWORD *)(v6 + 112);
      *((unsigned char *)this + 1436) = *(unsigned char *)(v6 + 116);
      *((_DWORD *)this + 358) = v18;
      double v19 = *(WebCore::Page **)(v6 + 120);
      if (v19) {
        *((_DWORD *)v19 + 7) += 2;
      }
      char v20 = this[180];
      this[180] = v19;
      if (v20)
      {
        if (*((_DWORD *)v20 + 7) == 2)
        {
          if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v20);
          }
        }
        else
        {
          *((_DWORD *)v20 + 7) -= 2;
        }
      }
      int v21 = *(_DWORD *)(v6 + 128);
      *((unsigned char *)this + 1452) = *(unsigned char *)(v6 + 132);
      *((_DWORD *)this + 362) = v21;
      double v22 = *(WebCore::Page **)(v6 + 136);
      if (v22) {
        *((_DWORD *)v22 + 7) += 2;
      }
      uint64_t v23 = this[182];
      this[182] = v22;
      if (v23)
      {
        if (*((_DWORD *)v23 + 7) == 2)
        {
          if ((*((_WORD *)v23 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v23);
          }
        }
        else
        {
          *((_DWORD *)v23 + 7) -= 2;
        }
      }
      int v24 = *(_DWORD *)(v6 + 144);
      *((unsigned char *)this + 1468) = *(unsigned char *)(v6 + 148);
      *((_DWORD *)this + 366) = v24;
      LOWORD(v24) = *(_WORD *)(v6 + 152);
      *((unsigned char *)this + 1474) = *(unsigned char *)(v6 + 154);
      *((_WORD *)this + 736) = v24;
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
    }
  }
  else
  {
    WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v37);
    int v25 = v37;
    char v37 = 0;
    unsigned int v26 = this[172];
    this[172] = v25;
    if (v26)
    {
      if (*((_DWORD *)v26 + 7) == 2)
      {
        if ((*((_WORD *)v26 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v26);
        }
      }
      else
      {
        *((_DWORD *)v26 + 7) -= 2;
      }
    }
    *((_DWORD *)this + 346) = v38;
    *((unsigned char *)this + 1388) = v39;
    int v27 = v40;
    char v40 = 0;
    char v28 = this[174];
    this[174] = v27;
    if (v28)
    {
      if (*((_DWORD *)v28 + 7) == 2)
      {
        if ((*((_WORD *)v28 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v28);
        }
      }
      else
      {
        *((_DWORD *)v28 + 7) -= 2;
      }
    }
    *((_DWORD *)this + 350) = v41;
    *((unsigned char *)this + 1404) = v42;
    uint64_t v29 = v43;
    char v43 = 0;
    uint64_t v30 = this[176];
    this[176] = v29;
    if (v30)
    {
      if (*((_DWORD *)v30 + 7) == 2)
      {
        if ((*((_WORD *)v30 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v30);
        }
      }
      else
      {
        *((_DWORD *)v30 + 7) -= 2;
      }
    }
    *((_DWORD *)this + 354) = v44;
    *((unsigned char *)this + 1420) = v45;
    uint64_t v31 = v46;
    char v46 = 0;
    uint64_t v32 = this[178];
    this[178] = v31;
    if (v32)
    {
      if (*((_DWORD *)v32 + 7) == 2)
      {
        if ((*((_WORD *)v32 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v32);
        }
      }
      else
      {
        *((_DWORD *)v32 + 7) -= 2;
      }
    }
    *((_DWORD *)this + 358) = v47;
    *((unsigned char *)this + 1436) = v48;
    int v33 = v49;
    __int16 v49 = 0;
    char v34 = this[180];
    this[180] = v33;
    if (v34)
    {
      if (*((_DWORD *)v34 + 7) == 2)
      {
        if ((*((_WORD *)v34 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v34);
        }
      }
      else
      {
        *((_DWORD *)v34 + 7) -= 2;
      }
    }
    *((_DWORD *)this + 362) = v50;
    *((unsigned char *)this + 1452) = v51;
    uint64_t v35 = v52;
    unsigned int v52 = 0;
    int v36 = this[182];
    this[182] = v35;
    if (v36)
    {
      if (*((_DWORD *)v36 + 7) == 2)
      {
        if ((*((_WORD *)v36 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v36);
        }
      }
      else
      {
        *((_DWORD *)v36 + 7) -= 2;
      }
    }
    *((_DWORD *)this + 366) = v53;
    *((unsigned char *)this + 1468) = v54;
    *((_WORD *)this + 736) = v55;
    *((unsigned char *)this + 1474) = v56;
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v37);
  }
}

void sub_198F332B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (!a10) {
LABEL_4:
  }
    _Unwind_Resume(a1);
  if (*a10)
  {
    --*a10;
    goto LABEL_4;
  }
  __break(0xC471u);
}

unsigned int *WebKit::WebPage::getRectsAtSelectionOffsetWithText(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t *)a1;
  WebCore::Page::checkedFocusController((uint64_t *)&v48, *(WebCore::Page **)(a1 + 48));
  uint64_t v7 = WebCore::FocusController::focusedOrMainFrame(v48);
  uint64_t v8 = v7;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  int v9 = v48;
  char v48 = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      goto LABEL_60;
    }
    --*(_DWORD *)v9;
  }
  if (!v7)
  {
    char v48 = 0;
    uint64_t v49 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
    uint64_t result = (unsigned int *)v48;
    if (v48)
    {
      char v48 = 0;
      LODWORD(v49) = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
    return result;
  }
  if (*((unsigned char *)v6 + 1473)) {
    v6 += 172;
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(v7 + 296) + 3096) + 56);
  }
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::visiblePositionForPositionWithOffset();
  int v12 = v48;
  char v48 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 7) == 2)
    {
      if ((*((_WORD *)v12 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v12);
      }
    }
    else
    {
      *((_DWORD *)v12 + 7) -= 2;
    }
  }
  while (1)
  {
    WebCore::visiblePositionForPositionWithOffset();
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition>((uint64_t)&v30);
    uint64_t v13 = v48;
    char v48 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 7) == 2)
      {
        if ((*((_WORD *)v13 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v13);
        }
      }
      else
      {
        *((_DWORD *)v13 + 7) -= 2;
      }
    }
    if (!v34 || v30 == v32 && v31 == v33)
    {
      char v48 = 0;
      uint64_t v49 = 0;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
      goto LABEL_46;
    }
    WebCore::plainTextReplacingNoBreakSpace();
    char v17 = WTF::equal(v48, *a3, v15);
    int v18 = v48;
    char v48 = 0;
    if (!v18) {
      goto LABEL_25;
    }
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
LABEL_25:
      if (v17) {
        goto LABEL_40;
      }
      goto LABEL_28;
    }
    WTF::StringImpl::destroy(v18, v16);
    if (v17) {
      goto LABEL_40;
    }
LABEL_28:
    WebCore::VisibleSelection::firstRange((uint64_t *)&v48, (WebCore::VisibleSelection *)v6);
    if (v52)
    {
      double v19 = v48;
      *((_DWORD *)v48 + 7) += 2;
      int v44 = v19;
      int v45 = v49;
      uint64_t v6 = &v46;
      uint64_t v20 = v50;
      *(_DWORD *)(v50 + 28) += 2;
      uint64_t v46 = v20;
      int v47 = v51;
      WebCore::makeBoundaryPoint();
      if (v43)
      {
        WebCore::SimpleRange::SimpleRange();
        WebCore::characterCount();
        WebCore::findClosestPlainText();
        uint64_t v25 = v38;
        int v26 = v39;
        uint64_t v21 = v40;
        uint64_t v38 = 0;
        uint64_t v40 = 0;
        uint64_t v27 = v21;
        int v28 = v41;
        char v29 = 1;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v38);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v37);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v36);
        if (v43) {
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v42);
        }
      }
      else
      {
        LOBYTE(v25) = 0;
        char v29 = 0;
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v46);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v44);
    }
    else
    {
      LOBYTE(v25) = 0;
      char v29 = 0;
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v48);
    if (v29 && (v25 != v27 || v26 != v28)) {
      std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t)&v30, &v25);
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25);
LABEL_40:
    if (v34) {
      break;
    }
LABEL_60:
    __break(1u);
  }
  WebCore::RenderObject::collectSelectionGeometriesWithoutUnionInteriorLines();
  double v22 = *(WebCore::ScrollView **)(v8 + 288);
  if (v22) {
    ++*((_DWORD *)v22 + 2);
  }
  WebKit::convertContentToRootView(v22, v48, HIDWORD(v49));
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
  if (*((_DWORD *)v22 + 2) == 1) {
    (*(void (**)(WebCore::ScrollView *))(*(void *)v22 + 8))(v22);
  }
  else {
    --*((_DWORD *)v22 + 2);
  }
LABEL_46:
  uint64_t v23 = v48;
  if (v48)
  {
    char v48 = 0;
    LODWORD(v49) = 0;
    WTF::fastFree(v23, v14);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30);
  int v24 = v35;
  uint64_t v35 = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 7) == 2)
    {
      if ((*((_WORD *)v24 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v24);
      }
    }
    else
    {
      *((_DWORD *)v24 + 7) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
}

void sub_198F3377C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WebCore::Node *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (*(unsigned char *)(v25 - 144)) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v25 - 160));
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v24);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v25 - 136));
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v25 - 104);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15);
  uint64_t v27 = a20;
  a20 = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 7) == 2)
    {
      if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v27);
      }
    }
    else
    {
      *((_DWORD *)v27 + 7) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v23 + 8));
  _Unwind_Resume(a1);
}

void sub_198F33904()
{
  uint64_t v1 = *(void *)(v0 - 104);
  *(void *)(v0 - 104) = 0;
  if (!v1) {
    JUMPOUT(0x198F338E4);
  }
  JUMPOUT(0x198F338D4);
}

void sub_198F33918()
{
}

void sub_198F33920()
{
  uint64_t v1 = *(_DWORD **)(v0 - 104);
  *(void *)(v0 - 104) = 0;
  if (v1)
  {
    if (*v1) {
      --*v1;
    }
    else {
      __break(0xC471u);
    }
  }
  JUMPOUT(0x198F338ECLL);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition>@<X0>(uint64_t a1@<X8>)
{
  WebCore::makeBoundaryPoint();
  uint64_t result = (uint64_t *)WebCore::makeBoundaryPoint();
  int v3 = v8;
  if (v10) {
    BOOL v4 = v8 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    *(void *)a1 = v11;
    *(_DWORD *)(a1 + 8) = v12;
    uint64_t v5 = v13;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v14;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    int v3 = v8;
    char v6 = 1;
  }
  *(unsigned char *)(a1 + 32) = v6;
  if (v3) {
    uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
  }
  if (v10) {
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  }
  return result;
}

void sub_198F33A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a11) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  }
  if (a15) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::constrainPoint(WebKit *this, const WebCore::IntPoint *a2, const WebCore::LocalFrame *a3, const WebCore::Element *a4)
{
  WebCore::Document::updateLayout();
  if ((*((_WORD *)a3 + 16) & 0x10) != 0
    && ((uint64_t v7 = *(void *)(*((void *)a3 + 13) + 24), v7 == *(void *)(*MEMORY[0x1E4FB6690] + 24))
     || v7 == *(void *)(*MEMORY[0x1E4FB69A8] + 24)
     || v7 == *(void *)(*MEMORY[0x1E4FB6B08] + 24)))
  {
    unsigned __int8 v8 = a3;
  }
  else
  {
    unsigned __int8 v8 = (WebKit::WebPage *)WebCore::Node::rootEditableElement(a3);
    if (!v8)
    {
      uint64_t v9 = 0;
      goto LABEL_9;
    }
  }
  unsigned __int8 v8 = (WebKit::WebPage *)WebKit::WebPage::absoluteInteractionBounds(v8, v6);
LABEL_9:
  int v10 = *((_DWORD *)this + 1);
  int v11 = v8 + 2;
  unsigned int v12 = v9 + v8 - 2;
  int v13 = HIDWORD(v8) + 2;
  if ((signed int)v12 >= *(_DWORD *)this) {
    unsigned int v12 = *(_DWORD *)this;
  }
  if (v11 <= *(_DWORD *)this) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v11;
  }
  if (HIDWORD(v9) + HIDWORD(v8) - 2 >= v10) {
    unsigned int v15 = *((_DWORD *)this + 1);
  }
  else {
    unsigned int v15 = HIDWORD(v9) + HIDWORD(v8) - 2;
  }
  if (v13 <= v10) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v13;
  }
  return v14 | (v16 << 32);
}

uint64_t WebKit::WebPage::selectPositionAtPoint(uint64_t a1, int32x2_t *a2, int a3, uint64_t *a4)
{
  char v8 = *(unsigned char *)(a1 + 920);
  *(unsigned char *)(a1 + 920) = 1;
  WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation(a1, a2);
  WebCore::Page::checkedFocusController((uint64_t *)v15, *(WebCore::Page **)(a1 + 48));
  uint64_t v9 = WebCore::FocusController::focusedOrMainFrame(v15[0]);
  uint64_t v10 = v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  int v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v11;
  }
  if (v9)
  {
    WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v16, (const WebCore::LocalFrame *)a1, (WebCore::ScrollView **)v9, (WebCore::IntPoint *)a2, a3);
    if (v16) {
      unsigned int v12 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    }
    else {
      unsigned int v12 = 0;
    }
    if (v12)
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)v15);
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
    }
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
    int v13 = v16;
    uint64_t v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 7) == 2)
      {
        if ((*((_WORD *)v13 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v13);
        }
      }
      else
      {
        *((_DWORD *)v13 + 7) -= 2;
      }
    }
    uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  }
  else
  {
    uint64_t result = WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  *(unsigned char *)(a1 + 920) = v8;
  return result;
}

void sub_198F33CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  *(unsigned char *)(v14 + 920) = v15;
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::selectPositionAtBoundaryWithDirection(WebCore::Page **a1, WebCore::IntPoint *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v20, a1[6]);
  uint64_t v10 = WebCore::FocusController::focusedOrMainFrame(v20);
  uint64_t v11 = v10;
  if (v10) {
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
  }
  unsigned int v12 = v20;
  uint64_t v20 = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198F33F60);
    }
    --*(_DWORD *)v12;
  }
  if (!v10) {
    return (unsigned int *)WTF::CompletionHandler<void ()(void)>::operator()(a6);
  }
  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v24, (const WebCore::LocalFrame *)a1, (WebCore::ScrollView **)v10, a2, a5);
  if (v24) {
    int v13 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  }
  else {
    int v13 = 0;
  }
  if (v13)
  {
    WebCore::positionOfNextBoundaryOfGranularity();
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    char v15 = v24;
    int v24 = v14;
    if (v15)
    {
      if (*((_DWORD *)v15 + 7) == 2)
      {
        if ((*((_WORD *)v15 + 17) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v15);
          double v19 = v20;
          int v25 = v21;
          char v26 = v22;
          char v27 = v23;
          uint64_t v20 = 0;
          if (v19)
          {
            if (*((_DWORD *)v19 + 7) == 2)
            {
              if ((*((_WORD *)v19 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v19);
              }
            }
            else
            {
              *((_DWORD *)v19 + 7) -= 2;
            }
          }
          goto LABEL_15;
        }
      }
      else
      {
        *((_DWORD *)v15 + 7) -= 2;
      }
    }
    int v25 = v21;
    char v26 = v22;
    char v27 = v23;
LABEL_15:
    if (v24) {
      uint64_t v16 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v16)
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v20);
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
    }
  }
  WTF::CompletionHandler<void ()(void)>::operator()(a6);
  char v17 = v24;
  int v24 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 7) == 2)
    {
      if ((*((_WORD *)v17 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v17);
      }
    }
    else
    {
      *((_DWORD *)v17 + 7) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
}

void sub_198F33FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  uint64_t v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 7) == 2)
    {
      if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v16);
      }
    }
    else
    {
      *((_DWORD *)v16 + 7) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::moveSelectionAtBoundaryWithDirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v15, *(WebCore::Page **)(a1 + 48));
  uint64_t v5 = WebCore::FocusController::focusedOrMainFrame(v15);
  uint64_t v6 = v5;
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  uint64_t v7 = v15;
  char v15 = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198F34244);
    }
    --*(_DWORD *)v7;
  }
  if (!v5) {
    return (unsigned int *)WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  uint64_t v8 = *(void *)(*(void *)(v5 + 296) + 3096);
  if (*(unsigned char *)(v8 + 153))
  {
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::positionOfNextBoundaryOfGranularity();
    uint64_t v10 = v15;
    char v15 = 0;
    uint64_t v11 = v19;
    double v19 = v10;
    if (v11)
    {
      if (*((_DWORD *)v11 + 7) == 2)
      {
        if ((*((_WORD *)v11 + 17) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v11);
          uint64_t v14 = v15;
          int v20 = v16;
          char v21 = v17;
          char v22 = v18;
          char v15 = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 7) == 2)
            {
              if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v14);
              }
            }
            else
            {
              *((_DWORD *)v14 + 7) -= 2;
            }
          }
          goto LABEL_14;
        }
      }
      else
      {
        *((_DWORD *)v11 + 7) -= 2;
      }
    }
    int v20 = v16;
    char v21 = v17;
    char v22 = v18;
LABEL_14:
    unsigned int v12 = v19;
    if (v19) {
      int v13 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
    }
    else {
      int v13 = 0;
    }
    if (v13)
    {
      WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v15);
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15);
      unsigned int v12 = v19;
    }
    double v19 = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 7) == 2)
      {
        if ((*((_WORD *)v12 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v12);
        }
      }
      else
      {
        *((_DWORD *)v12 + 7) -= 2;
      }
    }
  }
  WTF::CompletionHandler<void ()(void)>::operator()(a4);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

void sub_198F342AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  int v16 = a14;
  a14 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 7) == 2)
    {
      if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v16);
      }
    }
    else
    {
      *((_DWORD *)v16 + 7) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

WebCore::Node *WebKit::WebPage::rangeForGranularityAtPoint(unsigned char *a1, const WebCore::LocalFrame *a2, uint64_t a3, WebCore::IntPoint *a4, int a5, int a6)
{
  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v10, a2, (WebCore::ScrollView **)a3, a4, a6);
  switch(a5)
  {
    case 0:
      WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)a1);
      break;
    case 1:
      WebCore::wordRangeFromPosition();
      break;
    case 2:
    case 4:
      WebCore::enclosingTextUnitOfGranularity();
      break;
    case 5:
      WebCore::FrameSelection::selectAll(*(WebCore::FrameSelection **)(*(void *)(a3 + 296) + 3096));
      goto LABEL_6;
    default:
LABEL_6:
      *a1 = 0;
      a1[32] = 0;
      break;
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 7) == 2)
    {
      if ((*((_WORD *)result + 17) & 0x400) == 0) {
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
    }
    else
    {
      *((_DWORD *)result + 7) -= 2;
    }
  }
  return result;
}

void sub_198F34438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a10);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::setSelectionRange(uint64_t a1, int32x2_t *a2, int a3, int a4)
{
  WebKit::WebPage::setFocusedFrameBeforeSelectingTextAtLocation(a1, a2);
  WebCore::Page::checkedFocusController((uint64_t *)&v18, *(WebCore::Page **)(a1 + 48));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v18);
  uint64_t v9 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v10 = v18;
  char v18 = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v10;
  }
  if (result)
  {
    WebKit::WebPage::rangeForGranularityAtPoint(&v18, (const WebCore::LocalFrame *)a1, result, (WebCore::IntPoint *)a2, a3, a4);
    if (v22)
    {
      uint64_t v11 = v18;
      *((_DWORD *)v18 + 7) += 2;
      int v13 = v11;
      int v14 = v19;
      uint64_t v12 = v20;
      *(_DWORD *)(v20 + 28) += 2;
      uint64_t v15 = v12;
      int v16 = v21;
      char v17 = 1;
      WebCore::FrameSelection::setSelectedRange();
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13);
    }
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>((uint64_t *)(a1 + 1336), (uint64_t)&v18);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
  }
  return result;
}

void sub_198F345DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::selectTextWithGranularityAtPoint(uint64_t a1, int32x2_t *a2, char a3, char a4, uint64_t *a5)
{
  if (*(void *)(a1 + 1256))
  {
    uint64_t v10 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = 0;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    int32x2_t v11 = *a2;
    uint64_t v12 = *a5;
    *a5 = 0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    int v13 = *(atomic_uint **)(a1 + 24);
    if (v13) {
      atomic_fetch_add(v13, 1u);
    }
    uint64_t result = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t result = &unk_1EE9DFCA8;
    *(int32x2_t *)(result + 8) = v11;
    *(unsigned char *)(result + 16) = a3;
    *(unsigned char *)(result + 17) = a4;
    *(void *)(result + 24) = v12;
    *(void *)(result + 32) = v13;
    *(void *)(result + 40) = a1;
    uint64_t v15 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = result;
    if (v15)
    {
      int v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);
      return v16(v15);
    }
  }
  else
  {
    WebKit::WebPage::setSelectionRange(a1, a2, a3, a4);
    return WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  return result;
}

void sub_198F347F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::beginSelectionInDirection(uint64_t a1, int a2, uint64_t *a3)
{
  *(_DWORD *)(a1 + 1252) = a2 != 3;
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
}

unsigned int *WebKit::WebPage::updateSelectionWithExtentPointAndBoundary(uint64_t a1, WebCore::IntPoint *a2, int a3, int a4, uint64_t *a5)
{
  WebCore::Page::checkedFocusController((uint64_t *)v47, *(WebCore::Page **)(a1 + 48));
  uint64_t v10 = WebCore::FocusController::focusedOrMainFrame(v47[0]);
  uint64_t v11 = v10;
  if (v10) {
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
  }
  uint64_t v12 = v47[0];
  v47[0] = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      goto LABEL_87;
    }
    --*(_DWORD *)v12;
  }
  if (!v10) {
    return (unsigned int *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
  }
  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)v49, (const WebCore::LocalFrame *)a1, (WebCore::ScrollView **)v10, a2, a4);
  WebKit::WebPage::rangeForGranularityAtPoint(v47, (const WebCore::LocalFrame *)a1, v11, a2, a3, a4);
  if (v49[0] && *(unsigned char *)(a1 + 1368) && v48)
  {
    WebCore::makeDeprecatedLegacyPosition();
    if (*(unsigned char *)(a1 + 1368))
    {
      WebCore::makeDeprecatedLegacyPosition();
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::VisiblePosition::VisiblePosition();
      int v13 = (char)WebCore::documentOrder();
      uint64_t v14 = v31;
      int v31 = 0;
      if (v14)
      {
        if (*((_DWORD *)v14 + 7) == 2)
        {
          if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v14);
          }
        }
        else
        {
          *((_DWORD *)v14 + 7) -= 2;
        }
      }
      if (v13 < 1)
      {
        WebCore::VisiblePosition::VisiblePosition();
        int v18 = (char)WebCore::documentOrder();
        BOOL v20 = v18 != -127 && v18 < 0;
        int v21 = v31;
        int v31 = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 7) == 2)
          {
            if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v21);
            }
          }
          else
          {
            *((_DWORD *)v21 + 7) -= 2;
          }
        }
        if (!v20) {
          goto LABEL_41;
        }
        if (v48)
        {
          WebCore::makeDeprecatedLegacyPosition();
          WebCore::VisiblePosition::VisiblePosition();
          char v22 = v31;
          int v31 = 0;
          char v23 = v41;
          int v41 = v22;
          if (v23)
          {
            if (*((_DWORD *)v23 + 7) == 2)
            {
              if ((*((_WORD *)v23 + 17) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v23);
                int v42 = v32;
                char v43 = v33;
                char v44 = v34;
                goto LABEL_85;
              }
            }
            else
            {
              *((_DWORD *)v23 + 7) -= 2;
            }
          }
          int v42 = v32;
          char v43 = v33;
          char v44 = v34;
          goto LABEL_37;
        }
      }
      else if (v48)
      {
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        uint64_t v15 = v31;
        int v31 = 0;
        int v16 = v37;
        uint64_t v37 = v15;
        if (!v16)
        {
LABEL_19:
          int v38 = v32;
          char v39 = v33;
          char v40 = v34;
LABEL_37:
          int v31 = 0;
          goto LABEL_38;
        }
        if (*((_DWORD *)v16 + 7) != 2)
        {
          *((_DWORD *)v16 + 7) -= 2;
          goto LABEL_19;
        }
        if ((*((_WORD *)v16 + 17) & 0x400) != 0) {
          goto LABEL_19;
        }
        WebCore::Node::removedLastRef(v16);
        int v38 = v32;
        char v39 = v33;
        char v40 = v34;
LABEL_85:
        int v31 = 0;
LABEL_38:
        int v24 = v36;
        uint64_t v36 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 7) == 2)
          {
            if ((*((_WORD *)v24 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v24);
            }
          }
          else
          {
            *((_DWORD *)v24 + 7) -= 2;
          }
        }
LABEL_41:
        WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v31);
        if (v35) {
          WebCore::FrameSelection::setSelectedRange();
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::operator==((uint64_t)&v41, (uint64_t)&v31);
        WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
        int v25 = v31;
        int v31 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 7) == 2)
          {
            if ((*((_WORD *)v25 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v25);
            }
          }
          else
          {
            *((_DWORD *)v25 + 7) -= 2;
          }
        }
        char v26 = v37;
        uint64_t v37 = 0;
        if (v26)
        {
          if (*((_DWORD *)v26 + 7) == 2)
          {
            if ((*((_WORD *)v26 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v26);
            }
          }
          else
          {
            *((_DWORD *)v26 + 7) -= 2;
          }
        }
        char v27 = v41;
        int v41 = 0;
        if (v27)
        {
          if (*((_DWORD *)v27 + 7) == 2)
          {
            if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v27);
            }
          }
          else
          {
            *((_DWORD *)v27 + 7) -= 2;
          }
        }
        int v28 = v45;
        int v45 = 0;
        if (v28)
        {
          if (*((_DWORD *)v28 + 7) == 2)
          {
            if ((*((_WORD *)v28 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v28);
            }
          }
          else
          {
            *((_DWORD *)v28 + 7) -= 2;
          }
        }
        char v29 = v46;
        uint64_t v46 = 0;
        if (v29)
        {
          if (*((_DWORD *)v29 + 7) == 2)
          {
            if ((*((_WORD *)v29 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v29);
            }
          }
          else
          {
            *((_DWORD *)v29 + 7) -= 2;
          }
        }
        goto LABEL_58;
      }
    }
    __break(1u);
LABEL_87:
    JUMPOUT(0x198F34C80);
  }
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
LABEL_58:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v47);
  uint64_t v30 = v49[0];
  v49[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)(v30 + 28) == 2)
    {
      if ((*(_WORD *)(v30 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v30);
      }
    }
    else
    {
      *(_DWORD *)(v30 + 28) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
}

unsigned int *WebKit::WebPage::updateSelectionWithExtentPoint(uint64_t a1, WebCore::IntPoint *a2, int a3, int a4, uint64_t *a5)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v51, *(WebCore::Page **)(a1 + 48));
  uint64_t v10 = WebCore::FocusController::focusedOrMainFrame(v51);
  uint64_t v11 = v10;
  if (v10) {
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
  }
  uint64_t v12 = v51;
  int v51 = 0;
  if (v12)
  {
    if (!*(_DWORD *)v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198F35664);
    }
    --*(_DWORD *)v12;
  }
  if (!v10) {
    return (unsigned int *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
  }
  WebKit::WebPage::visiblePositionInFocusedNodeForPoint((WebKit::WebPage *)&v65, (const WebCore::LocalFrame *)a1, (WebCore::ScrollView **)v10, a2, a3);
  int v13 = v65;
  if (v65)
  {
    __int16 v61 = 0;
    int v62 = 0;
    v63 &= 0xF0u;
    char v64 = 1;
    uint64_t v57 = 0;
    int v58 = 0;
    v59 &= 0xF0u;
    char v60 = 1;
    if (a4)
    {
      if (*(_DWORD *)(a1 + 1252))
      {
        *((_DWORD *)v65 + 7) += 2;
        __int16 v61 = v13;
        int v62 = v66;
        char v63 = v67;
        char v64 = v68;
        WebCore::VisiblePosition::VisiblePosition();
        char v27 = v51;
        int v51 = 0;
        int v28 = v57;
        uint64_t v57 = v27;
        if (v28)
        {
          if (*((_DWORD *)v28 + 7) == 2)
          {
            if ((*((_WORD *)v28 + 17) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v28);
              int v45 = v51;
              int v58 = v52;
              char v59 = v53;
              char v60 = v54;
              int v51 = 0;
              if (v45)
              {
                if (*((_DWORD *)v45 + 7) == 2)
                {
                  if ((*((_WORD *)v45 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v45);
                  }
                }
                else
                {
                  *((_DWORD *)v45 + 7) -= 2;
                }
              }
LABEL_50:
              if ((char)WebCore::documentOrder() < 0)
              {
LABEL_80:
                WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v51);
                if (v55) {
                  WebCore::FrameSelection::setSelectedRange();
                }
                std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
                WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
                int v42 = v57;
                uint64_t v57 = 0;
                if (v42)
                {
                  if (*((_DWORD *)v42 + 7) == 2)
                  {
                    if ((*((_WORD *)v42 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v42);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v42 + 7) -= 2;
                  }
                }
                char v43 = v61;
                __int16 v61 = 0;
                if (v43)
                {
                  if (*((_DWORD *)v43 + 7) == 2)
                  {
                    if ((*((_WORD *)v43 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v43);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v43 + 7) -= 2;
                  }
                }
                goto LABEL_88;
              }
              WebCore::VisiblePosition::VisiblePosition();
              char v29 = v51;
              int v51 = 0;
              uint64_t v30 = v61;
              __int16 v61 = v29;
              if (v30)
              {
                if (*((_DWORD *)v30 + 7) == 2)
                {
                  if ((*((_WORD *)v30 + 17) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v30);
                    uint64_t v46 = v51;
                    int v62 = v52;
                    char v63 = v53;
                    char v64 = v54;
                    int v51 = 0;
                    if (v46)
                    {
                      if (*((_DWORD *)v46 + 7) == 2)
                      {
                        if ((*((_WORD *)v46 + 17) & 0x400) == 0) {
                          WebCore::Node::removedLastRef(v46);
                        }
                      }
                      else
                      {
                        *((_DWORD *)v46 + 7) -= 2;
                      }
                    }
LABEL_55:
                    WebCore::VisiblePosition::next();
                    int v31 = v51;
                    int v51 = 0;
                    int v32 = v57;
                    uint64_t v57 = v31;
                    if (v32)
                    {
                      if (*((_DWORD *)v32 + 7) == 2)
                      {
                        if ((*((_WORD *)v32 + 17) & 0x400) == 0)
                        {
                          WebCore::Node::removedLastRef(v32);
                          int v47 = v51;
                          int v58 = v52;
                          char v59 = v53;
                          char v60 = v54;
                          int v51 = 0;
                          if (v47)
                          {
                            if (*((_DWORD *)v47 + 7) == 2)
                            {
                              if ((*((_WORD *)v47 + 17) & 0x400) == 0) {
                                WebCore::Node::removedLastRef(v47);
                              }
                            }
                            else
                            {
                              *((_DWORD *)v47 + 7) -= 2;
                            }
                          }
                          goto LABEL_59;
                        }
                      }
                      else
                      {
                        *((_DWORD *)v32 + 7) -= 2;
                      }
                    }
                    int v58 = v52;
                    char v59 = v53;
                    char v60 = v54;
LABEL_59:
                    *(_DWORD *)(a1 + 1252) = 0;
                    goto LABEL_80;
                  }
                }
                else
                {
                  *((_DWORD *)v30 + 7) -= 2;
                }
              }
              int v62 = v52;
              char v63 = v53;
              char v64 = v54;
              goto LABEL_55;
            }
          }
          else
          {
            *((_DWORD *)v28 + 7) -= 2;
          }
        }
        int v58 = v52;
        char v59 = v53;
        char v60 = v54;
        goto LABEL_50;
      }
      WebCore::VisiblePosition::VisiblePosition();
      char v33 = v51;
      int v51 = 0;
      char v34 = v61;
      __int16 v61 = v33;
      if (v34)
      {
        if (*((_DWORD *)v34 + 7) == 2)
        {
          if ((*((_WORD *)v34 + 17) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v34);
            char v48 = v51;
            int v62 = v52;
            char v63 = v53;
            char v64 = v54;
            int v51 = 0;
            if (v48)
            {
              if (*((_DWORD *)v48 + 7) == 2)
              {
                if ((*((_WORD *)v48 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v48);
                }
              }
              else
              {
                *((_DWORD *)v48 + 7) -= 2;
              }
            }
LABEL_64:
            char v35 = v65;
            if (v65) {
              *((_DWORD *)v65 + 7) += 2;
            }
            uint64_t v36 = v57;
            uint64_t v57 = v35;
            if (v36)
            {
              if (*((_DWORD *)v36 + 7) == 2)
              {
                if ((*((_WORD *)v36 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v36);
                }
              }
              else
              {
                *((_DWORD *)v36 + 7) -= 2;
              }
            }
            int v58 = v66;
            char v59 = v67;
            char v60 = v68;
            int v37 = (char)WebCore::documentOrder();
            if (v37 == -127 || v37 > 0) {
              goto LABEL_80;
            }
            WebCore::VisiblePosition::previous();
            int v38 = v51;
            int v51 = 0;
            char v39 = v61;
            __int16 v61 = v38;
            if (v39)
            {
              if (*((_DWORD *)v39 + 7) == 2)
              {
                if ((*((_WORD *)v39 + 17) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v39);
                  uint64_t v49 = v51;
                  int v62 = v52;
                  char v63 = v53;
                  char v64 = v54;
                  int v51 = 0;
                  if (v49)
                  {
                    if (*((_DWORD *)v49 + 7) == 2)
                    {
                      if ((*((_WORD *)v49 + 17) & 0x400) == 0) {
                        WebCore::Node::removedLastRef(v49);
                      }
                    }
                    else
                    {
                      *((_DWORD *)v49 + 7) -= 2;
                    }
                  }
LABEL_75:
                  WebCore::VisiblePosition::VisiblePosition();
                  char v40 = v51;
                  int v51 = 0;
                  int v41 = v57;
                  uint64_t v57 = v40;
                  if (v41)
                  {
                    if (*((_DWORD *)v41 + 7) == 2)
                    {
                      if ((*((_WORD *)v41 + 17) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef(v41);
                        uint64_t v50 = v51;
                        int v58 = v52;
                        char v59 = v53;
                        char v60 = v54;
                        int v51 = 0;
                        if (v50)
                        {
                          if (*((_DWORD *)v50 + 7) == 2)
                          {
                            if ((*((_WORD *)v50 + 17) & 0x400) == 0) {
                              WebCore::Node::removedLastRef(v50);
                            }
                          }
                          else
                          {
                            *((_DWORD *)v50 + 7) -= 2;
                          }
                        }
                        goto LABEL_79;
                      }
                    }
                    else
                    {
                      *((_DWORD *)v41 + 7) -= 2;
                    }
                  }
                  int v58 = v52;
                  char v59 = v53;
                  char v60 = v54;
LABEL_79:
                  *(_DWORD *)(a1 + 1252) = 1;
                  goto LABEL_80;
                }
              }
              else
              {
                *((_DWORD *)v39 + 7) -= 2;
              }
            }
            int v62 = v52;
            char v63 = v53;
            char v64 = v54;
            goto LABEL_75;
          }
        }
        else
        {
          *((_DWORD *)v34 + 7) -= 2;
        }
      }
      int v62 = v52;
      char v63 = v53;
      char v64 = v54;
      goto LABEL_64;
    }
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::VisiblePosition();
    int v15 = (char)WebCore::documentOrder();
    if (v15 == -127 || v15 > 0)
    {
      if ((char)WebCore::documentOrder() < 0)
      {
LABEL_39:
        int v25 = v56;
        char v56 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 7) == 2)
          {
            if ((*((_WORD *)v25 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v25);
            }
          }
          else
          {
            *((_DWORD *)v25 + 7) -= 2;
          }
        }
        char v26 = v51;
        int v51 = 0;
        if (v26)
        {
          if (*((_DWORD *)v26 + 7) == 2)
          {
            if ((*((_WORD *)v26 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v26);
            }
          }
          else
          {
            *((_DWORD *)v26 + 7) -= 2;
          }
        }
        goto LABEL_80;
      }
      int v21 = v51;
      if (v51) {
        *((_DWORD *)v51 + 7) += 2;
      }
      char v22 = v61;
      __int16 v61 = v21;
      if (v22)
      {
        if (*((_DWORD *)v22 + 7) == 2)
        {
          if ((*((_WORD *)v22 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v22);
          }
        }
        else
        {
          *((_DWORD *)v22 + 7) -= 2;
        }
      }
      int v62 = v52;
      char v63 = v53;
      char v64 = v54;
      char v23 = v65;
      if (v65) {
        *((_DWORD *)v65 + 7) += 2;
      }
      int v24 = v57;
      uint64_t v57 = v23;
      if (v24)
      {
        if (*((_DWORD *)v24 + 7) == 2)
        {
          if ((*((_WORD *)v24 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v24);
          }
        }
        else
        {
          *((_DWORD *)v24 + 7) -= 2;
        }
      }
      BOOL v20 = &v65;
    }
    else
    {
      int v16 = v65;
      if (v65) {
        *((_DWORD *)v65 + 7) += 2;
      }
      char v17 = v61;
      __int16 v61 = v16;
      if (v17)
      {
        if (*((_DWORD *)v17 + 7) == 2)
        {
          if ((*((_WORD *)v17 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v17);
          }
        }
        else
        {
          *((_DWORD *)v17 + 7) -= 2;
        }
      }
      int v62 = v66;
      char v63 = v67;
      char v64 = v68;
      int v18 = v56;
      if (v56) {
        *((_DWORD *)v56 + 7) += 2;
      }
      int v19 = v57;
      uint64_t v57 = v18;
      if (v19)
      {
        if (*((_DWORD *)v19 + 7) == 2)
        {
          if ((*((_WORD *)v19 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v19);
          }
        }
        else
        {
          *((_DWORD *)v19 + 7) -= 2;
        }
      }
      BOOL v20 = &v56;
    }
    int v58 = *((_DWORD *)v20 + 2);
    char v59 = *((unsigned char *)v20 + 12);
    char v60 = *((unsigned char *)v20 + 16);
    goto LABEL_39;
  }
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
LABEL_88:
  char v44 = v65;
  unint64_t v65 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 7) == 2)
    {
      if ((*((_WORD *)v44 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v44);
      }
    }
    else
    {
      *((_DWORD *)v44 + 7) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
}

void sub_198F358F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, WebCore::Node *a18, uint64_t a19, uint64_t a20,WebCore::Node *a21)
{
  if (a18)
  {
    if (*((_DWORD *)a18 + 7) == 2)
    {
      if ((*((_WORD *)a18 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a18);
      }
    }
    else
    {
      *((_DWORD *)a18 + 7) -= 2;
    }
  }
  if (a21)
  {
    if (*((_DWORD *)a21 + 7) == 2)
    {
      if ((*((_WORD *)a21 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a21);
      }
    }
    else
    {
      *((_DWORD *)a21 + 7) -= 2;
    }
  }
  uint64_t v24 = *(void *)(v22 - 72);
  *(void *)(v22 - 72) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 28) == 2)
    {
      if ((*(_WORD *)(v24 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v24);
      }
    }
    else
    {
      *(_DWORD *)(v24 + 28) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v21 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::revealItemForCurrentSelection(WebKit::WebPage *this, WebCore::Page *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v34, a2);
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v34);
  BOOL v4 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  uint64_t v5 = v34;
  char v34 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      uint64_t v13 = 286;
      __break(0xC471u);
      goto LABEL_54;
    }
    --*(_DWORD *)v5;
  }
  if (result)
  {
    uint64_t v6 = *(void *)(*((void *)result + 37) + 3096);
    uint64_t v7 = *(WebCore::FocusController **)(v6 + 56);
    if (v7) {
      *((_DWORD *)v7 + 7) += 2;
    }
    char v34 = v7;
    int v35 = *(_DWORD *)(v6 + 64);
    char v36 = *(unsigned char *)(v6 + 68);
    uint64_t v8 = *(void *)(v6 + 72);
    if (v8) {
      *(_DWORD *)(v8 + 28) += 2;
    }
    uint64_t v37 = v8;
    int v38 = *(_DWORD *)(v6 + 80);
    char v39 = *(unsigned char *)(v6 + 84);
    uint64_t v9 = *(void *)(v6 + 88);
    if (v9) {
      *(_DWORD *)(v9 + 28) += 2;
    }
    uint64_t v40 = v9;
    int v41 = *(_DWORD *)(v6 + 96);
    char v42 = *(unsigned char *)(v6 + 100);
    uint64_t v10 = *(void *)(v6 + 104);
    if (v10) {
      *(_DWORD *)(v10 + 28) += 2;
    }
    uint64_t v43 = v10;
    int v44 = *(_DWORD *)(v6 + 112);
    char v45 = *(unsigned char *)(v6 + 116);
    uint64_t v11 = *(void *)(v6 + 120);
    if (v11) {
      *(_DWORD *)(v11 + 28) += 2;
    }
    uint64_t v46 = v11;
    int v47 = *(_DWORD *)(v6 + 128);
    char v48 = *(unsigned char *)(v6 + 132);
    uint64_t v12 = *(void *)(v6 + 136);
    if (v12) {
      *(_DWORD *)(v12 + 28) += 2;
    }
    uint64_t v49 = v12;
    int v50 = *(_DWORD *)(v6 + 144);
    char v51 = *(unsigned char *)(v6 + 148);
    __int16 v52 = *(_WORD *)(v6 + 152);
    char v53 = *(unsigned char *)(v6 + 154);
    if (HIBYTE(v52))
    {
      LOBYTE(v31) = 0;
      char v33 = 0;
      if (HIBYTE(v52) == 2)
      {
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::startOfParagraph();
        WebCore::endOfParagraph();
        WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t)v27);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v31, (uint64_t)v27);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27);
        uint64_t v13 = (uint64_t)v26;
        char v26 = 0;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 28) == 2) {
            goto LABEL_55;
          }
          *(_DWORD *)(v13 + 28) -= 2;
        }
        while (1)
        {
          uint64_t v14 = v24[0];
          v24[0] = 0;
          if (v14)
          {
            if (*((_DWORD *)v14 + 7) == 2)
            {
              if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v14);
              }
            }
            else
            {
              *((_DWORD *)v14 + 7) -= 2;
            }
          }
          if (!v33)
          {
            WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)v27);
            std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v31, (uint64_t)v27);
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27);
            if (!v33) {
              break;
            }
          }
          uint64_t v13 = (uint64_t)WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>((uint64_t)v27, v31, v32);
          if (v28)
          {
            uint64_t v15 = WebCore::characterCount();
            uint64_t v13 = (uint64_t)WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)v24);
            if (v25)
            {
              uint64_t v16 = WebCore::characterCount();
              std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24);
              uint64_t v13 = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27);
              if (v33)
              {
                WebCore::plainText();
                int v18 = v27[0];
                if (v27[0])
                {
                  int v19 = *(_DWORD *)v27[0];
                  *(_DWORD *)v27[0] += 2;
                  *(void *)this = v18;
                  *((void *)this + 1) = v15;
                  *((void *)this + 2) = v16;
                  *((void *)this + 3) = 0;
                  v27[0] = 0;
                  if (v19) {
                    *(_DWORD *)int v18 = v19;
                  }
                  else {
                    WTF::StringImpl::destroy(v18, v17);
                  }
                }
                else
                {
                  *(void *)this = 0;
                  *((void *)this + 1) = v15;
                  *((void *)this + 2) = v16;
                  *((void *)this + 3) = 0;
                }
                BOOL v20 = v29;
                char v29 = 0;
                if (v20)
                {
                  if (*((_DWORD *)v20 + 7) == 2)
                  {
                    if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v20);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v20 + 7) -= 2;
                  }
                }
                uint64_t v21 = v30;
                uint64_t v30 = 0;
                if (v21)
                {
                  if (*((_DWORD *)v21 + 7) == 2)
                  {
                    if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v21);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v21 + 7) -= 2;
                  }
                }
                std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
                goto LABEL_52;
              }
            }
          }
LABEL_54:
          __break(1u);
LABEL_55:
          if ((*(_WORD *)(v13 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
        }
        uint64_t v22 = v29;
        char v29 = 0;
        if (v22)
        {
          if (*((_DWORD *)v22 + 7) == 2)
          {
            if ((*((_WORD *)v22 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v22);
            }
          }
          else
          {
            *((_DWORD *)v22 + 7) -= 2;
          }
        }
        char v23 = v30;
        uint64_t v30 = 0;
        if (v23)
        {
          if (*((_DWORD *)v23 + 7) == 2)
          {
            if ((*((_WORD *)v23 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v23);
            }
          }
          else
          {
            *((_DWORD *)v23 + 7) -= 2;
          }
        }
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31);
    }
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
LABEL_52:
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v34);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4 + 2);
  }
  else
  {
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

void sub_198F35EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WebCore::Node *a23,uint64_t a24,uint64_t a25,WebCore::Node *a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a18);
  int v32 = a23;
  a23 = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 7) == 2)
    {
      if ((*((_WORD *)v32 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v32);
      }
    }
    else
    {
      *((_DWORD *)v32 + 7) -= 2;
    }
  }
  char v33 = a26;
  a26 = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 7) == 2)
    {
      if ((*((_WORD *)v33 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v33);
      }
    }
    else
    {
      *((_DWORD *)v33 + 7) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a29);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)(v30 - 152));
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v29 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>(uint64_t a1)
{
  WebCore::makeBoundaryPoint();
  uint64_t result = (uint64_t *)WebCore::makeBoundaryPoint();
  int v3 = v8;
  if (v10) {
    BOOL v4 = v8 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    *(void *)a1 = v11;
    *(_DWORD *)(a1 + 8) = v12;
    uint64_t v5 = v13;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v14;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
    uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    int v3 = v8;
    char v6 = 1;
  }
  *(unsigned char *)(a1 + 32) = v6;
  if (v3) {
    uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v7);
  }
  if (v10) {
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  }
  return result;
}

void sub_198F36134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a11) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  }
  if (a15) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 28) += 2;
  int v11 = a3;
  uint64_t v10 = 0;
  uint64_t v12 = a2;
  int v13 = a3;
  char v14 = 1;
  WebCore::makeBoundaryPoint();
  int v4 = v9;
  if (v9)
  {
    WebCore::SimpleRange::SimpleRange();
    *(void *)a1 = v15;
    *(_DWORD *)(a1 + 8) = v16;
    uint64_t v5 = v17;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = v18;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v17);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v15);
    int v4 = v9;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 32) = v6;
  if (v4) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v8);
  }
  if (v14) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v12);
  }
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
}

void sub_198F36258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a11) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  }
  if (a16) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a14);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::requestRVItemInCurrentSelectedRange(uint64_t a1, uint64_t *a2)
{
  WebKit::WebPage::revealItemForCurrentSelection((WebKit::WebPage *)&v6, *(WebCore::Page **)(a1 + 48));
  WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>::operator()(a2);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t result = v6;
  char v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198F36308(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::prepareSelectionForContextMenuWithLocationInView(WebCore::Page **a1, uint64_t a2, uint64_t *a3)
{
  int32x2_t v33 = (int32x2_t)a2;
  uint64_t v4 = *((void *)a1[6] + 20);
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 144) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    *(_OWORD *)uint64_t v30 = 0u;
    cf[0] = 0;
    WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(a3);
    cf[1] = 0;
    uint64_t result = 0;
    v30[0] = 0;
    return result;
  }
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  int8x8_t v8 = (int8x8_t)vcgt_s32(v33, (int32x2_t)0xFE000000FE000000);
  v24[0] = (WTF::StringImpl *)vorr_s8((int8x8_t)(*(void *)&v8 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v33), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v33, 6uLL)), v8));
  WebCore::EventHandler::hitTestResultAtPoint();
  uint64_t v9 = v32;
  if (v32)
  {
    *(_DWORD *)(v32 + 28) += 2;
    uint64_t v10 = *(WebCore::ScrollView **)(v4 + 288);
    if (v10)
    {
      ++*((_DWORD *)v10 + 2);
      int32x2_t v11 = (int32x2_t)WebCore::ScrollView::rootViewToContents(v10, (const WebCore::IntPoint *)&v33);
      int8x8_t v12 = (int8x8_t)vcgt_s32(v11, (int32x2_t)0xFE000000FE000000);
      v24[0] = (WTF::StringImpl *)vorr_s8((int8x8_t)(*(void *)&v12 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v11), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v11, 6uLL)), v12));
      if (WebCore::FrameSelection::contains())
      {
        WebKit::WebPage::revealItemForCurrentSelection((WebKit::WebPage *)v24, a1[6]);
        WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(a3);
        CFTypeRef v14 = v26;
        CFTypeRef v26 = 0;
        if (v14) {
          CFRelease(v14);
        }
        uint64_t v15 = v24[0];
        v24[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        if (*((_DWORD *)v10 + 2) == 1) {
          (*(void (**)(WebCore::ScrollView *))(*(void *)v10 + 8))(v10);
        }
        else {
          --*((_DWORD *)v10 + 2);
        }
LABEL_36:
        if (*(_DWORD *)(v9 + 28) == 2)
        {
          if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
        }
        else
        {
          *(_DWORD *)(v9 + 28) -= 2;
        }
        goto LABEL_38;
      }
      if (*((_DWORD *)v10 + 2) == 1) {
        (*(void (**)(WebCore::ScrollView *))(*(void *)v10 + 8))(v10);
      }
      else {
        --*((_DWORD *)v10 + 2);
      }
    }
    uint64_t v16 = *a3;
    *a3 = 0;
    char v28 = (WebKit::WebPage *)a1;
    uint64_t v29 = v16;
    if ((*(unsigned char *)(v9 + 32) & 0x10) != 0
      && *(void *)(*(void *)(v9 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB68A0] + 24)
      && WebCore::Node::computeEditability())
    {
      WebCore::makeRangeSelectingNode((uint64_t *)v24, (WebCore *)v9, v17);
      if (v27 && WebCore::FrameSelection::setSelectedRange())
      {
        int v18 = v28;
        WebCore::Page::layoutIfNeeded();
        WebKit::WebPage::sendEditorStateUpdate(v18);
        WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(&v29);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24);
LABEL_34:
        uint64_t v23 = v29;
        uint64_t v29 = 0;
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        }
        goto LABEL_36;
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24);
    }
    WebCore::EventHandler::selectClosestContextualWordOrLinkFromHitTestResult();
    WebKit::WebPage::revealItemForCurrentSelection((WebKit::WebPage *)v24, a1[6]);
    int v19 = v28;
    WebCore::Page::layoutIfNeeded();
    WebKit::WebPage::sendEditorStateUpdate(v19);
    WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(&v29);
    CFTypeRef v21 = v26;
    CFTypeRef v26 = 0;
    if (v21) {
      CFRelease(v21);
    }
    uint64_t v22 = v24[0];
    v24[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v20);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    goto LABEL_34;
  }
  *(_OWORD *)uint64_t v24 = 0u;
  uint64_t v25 = 0;
  WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(a3);
  CFTypeRef v26 = 0;
  v24[0] = 0;
LABEL_38:
  MEMORY[0x199731400](v30);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
}

void sub_198F367B4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  MEMORY[0x199731400](&a21);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v21);
  _Unwind_Resume(a1);
}

void sub_198F36978()
{
}

void sub_198F36980(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  JUMPOUT(0x198F3695CLL);
}

unsigned int *WebKit::WebPage::replaceSelectedText(WebCore::Page **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  WebCore::Page::checkedFocusController((uint64_t *)v13, this[6]);
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v13[0]);
  uint64_t v5 = (uint64_t)result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  char v6 = v13[0];
  v13[0] = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198F36B50);
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    uint64_t v7 = *(void *)(*((void *)result + 37) + 3096);
    if (*(unsigned char *)(v7 + 153) == 1)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::wordRangeFromPosition();
      int8x8_t v8 = v13[0];
      v13[0] = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 7) == 2)
        {
          if ((*((_WORD *)v8 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v8);
          }
        }
        else
        {
          *((_DWORD *)v8 + 7) -= 2;
        }
      }
    }
    else
    {
      WebCore::VisibleSelection::toNormalizedRange(v14, (WebCore::VisibleSelection *)(v7 + 56));
    }
    WebKit::plainTextForContext(v13, (uint64_t)v14);
    char v11 = WTF::equal(v13[0], *a2, v9);
    int8x8_t v12 = v13[0];
    v13[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        if ((v11 & 1) == 0)
        {
LABEL_19:
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
        }
LABEL_18:
        WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope((WebCore::IgnoreSelectionChangeForScope *)v13, (WebCore::LocalFrame *)v5);
        WebCore::FrameSelection::setSelectedRange();
        WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
        WebCore::Editor::insertText();
        MEMORY[0x199737F60](v13);
        goto LABEL_19;
      }
      *(_DWORD *)v12 -= 2;
    }
    if ((v11 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_198F36B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v11 - 72);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::replaceDictatedText(WebCore::Page **this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v27, this[6]);
  uint64_t result = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v27);
  uint64_t v5 = (uint64_t)result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
  }
  char v6 = v27;
  char v27 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198F36FDCLL);
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    uint64_t v7 = (WebCore::Document *)*((void *)result + 37);
    uint64_t v8 = *((void *)v7 + 387);
    if (!*(unsigned char *)(v8 + 153)) {
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    if (*(unsigned char *)(v8 + 153) == 2)
    {
      WebCore::Document::editor(v7);
      WebCore::Editor::deleteSelectionWithSmartDelete();
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    WebCore::VisiblePosition::VisiblePosition();
    for (int i = WTF::numGraphemeClusters(); i; --i)
    {
      WebCore::VisiblePosition::previous();
      uint64_t v11 = v27;
      char v27 = 0;
      int8x8_t v12 = v37;
      uint64_t v37 = v11;
      if (v12)
      {
        if (*((_DWORD *)v12 + 7) == 2)
        {
          if ((*((_WORD *)v12 + 17) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v12);
            int v13 = v27;
            int v38 = v28;
            char v39 = v29;
            char v40 = v30;
            char v27 = 0;
            if (v13)
            {
              if (*((_DWORD *)v13 + 7) == 2)
              {
                if ((*((_WORD *)v13 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v13);
                }
              }
              else
              {
                *((_DWORD *)v13 + 7) -= 2;
              }
            }
            continue;
          }
        }
        else
        {
          *((_DWORD *)v12 + 7) -= 2;
        }
      }
      int v38 = v28;
      char v39 = v29;
      char v40 = v30;
    }
    if (!v37)
    {
      WebCore::startOfDocument((uint64_t *)&v27, *(WebCore **)(v5 + 296), v9);
      CFTypeRef v14 = v27;
      char v27 = 0;
      uint64_t v15 = v37;
      uint64_t v37 = v14;
      if (!v15)
      {
LABEL_27:
        int v38 = v28;
        char v39 = v29;
        char v40 = v30;
        goto LABEL_28;
      }
      if (*((_DWORD *)v15 + 7) != 2)
      {
        *((_DWORD *)v15 + 7) -= 2;
        goto LABEL_27;
      }
      if ((*((_WORD *)v15 + 17) & 0x400) != 0) {
        goto LABEL_27;
      }
      WebCore::Node::removedLastRef(v15);
      CFTypeRef v26 = v27;
      int v38 = v28;
      char v39 = v29;
      char v40 = v30;
      char v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 7) == 2)
        {
          if ((*((_WORD *)v26 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v26);
          }
        }
        else
        {
          *((_DWORD *)v26 + 7) -= 2;
        }
      }
    }
LABEL_28:
    uint64_t v16 = *(void *)(*(void *)(v5 + 296) + 3096);
    WebCore::makeBoundaryPoint();
    WebCore::makeBoundaryPoint(v41, (WebCore *)(v16 + 120), v17);
    int v18 = v42;
    if (v44 && v42)
    {
      WebCore::SimpleRange::SimpleRange();
      uint64_t v32 = v27;
      int v33 = v28;
      uint64_t v19 = v30;
      char v27 = 0;
      uint64_t v30 = 0;
      uint64_t v34 = v19;
      int v35 = v31;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v30);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v27);
      int v18 = v42;
      char v20 = 1;
    }
    else
    {
      char v20 = 0;
      LOBYTE(v32) = 0;
    }
    char v36 = v20;
    if (v18) {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v41);
    }
    if (v44) {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v43);
    }
    WebKit::plainTextForContext(&v27, (uint64_t)&v32);
    char v23 = WTF::equal(v27, *a2, v21);
    uint64_t v24 = v27;
    char v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v22);
        if ((v23 & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
      *(_DWORD *)v24 -= 2;
    }
    if ((v23 & 1) == 0)
    {
LABEL_43:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
      uint64_t v25 = v37;
      uint64_t v37 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 7) == 2)
        {
          if ((*((_WORD *)v25 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v25);
          }
        }
        else
        {
          *((_DWORD *)v25 + 7) -= 2;
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
LABEL_42:
    WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope((WebCore::IgnoreSelectionChangeForScope *)&v27, (WebCore::LocalFrame *)v5);
    WebCore::FrameSelection::setSelectedRange();
    WebCore::Document::editor(*(WebCore::Document **)(v5 + 296));
    WebCore::Editor::insertText();
    MEMORY[0x199737F60](&v27);
    goto LABEL_43;
  }
  return result;
}

void sub_198F37044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v28 = *(void *)(v26 - 136);
  *(void *)(v26 - 136) = 0;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 28) == 2)
    {
      if ((*(_WORD *)(v28 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v28);
      }
    }
    else
    {
      *(_DWORD *)(v28 + 28) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::willInsertFinalDictationResult(WebKit::WebPage *this)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v6, *((WebCore::Page **)this + 6));
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v6);
  int v3 = (unsigned int *)result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v4 = v6;
  char v6 = 0;
  if (v4)
  {
    if (!*(_DWORD *)v4)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v4;
  }
  if (result)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(result + 296) + 3096) + 153))
    {
      uint64_t v5 = (WebCore::IgnoreSelectionChangeForScope *)WTF::fastMalloc((WTF *)0x80);
      WebCore::IgnoreSelectionChangeForScope::IgnoreSelectionChangeForScope(v5, (WebCore::LocalFrame *)v3);
      std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100]((uint64_t *)this + 210, (uint64_t)v5);
    }
    return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3 + 2);
  }
  return result;
}

void sub_198F37230(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF::fastFree(v11, a2);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::requestAutocorrectionData(uint64_t a1, const WTF::StringImpl **a2, uint64_t *a3)
{
  WebCore::Page::checkedFocusController((uint64_t *)v69, *(WebCore::Page **)(a1 + 48));
  uint64_t v5 = WebCore::FocusController::focusedOrMainFrame(v69[0]);
  uint64_t v6 = v5;
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  uint64_t v7 = v69[0];
  v69[0] = 0;
  if (v7)
  {
    if (!*(_DWORD *)v7) {
      goto LABEL_104;
    }
    --*(_DWORD *)v7;
  }
  if (!v5)
  {
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    char v76 = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v74);
    uint64_t v25 = v76;
    char v76 = 0;
    if (v25) {
      CFRelease(v25);
    }
    uint64_t result = v74;
    if (v74)
    {
      uint64_t v74 = 0;
      LODWORD(v75) = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, v24);
    }
    return result;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v5 + 296) + 3096) + 153) != 1)
  {
    int v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v71);
    uint64_t v28 = v73;
    uint64_t v73 = 0;
    if (v28) {
      CFRelease(v28);
    }
    char v29 = v71;
    if (v71)
    {
      int v71 = 0;
      LODWORD(v72) = 0;
      WTF::fastFree(v29, v27);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  }
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::wordRangeFromPosition();
  uint64_t v8 = v61[0];
  v61[0] = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 7) == 2)
    {
      if ((*((_WORD *)v8 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v8);
      }
    }
    else
    {
      *((_DWORD *)v8 + 7) -= 2;
    }
  }
  if (!v70)
  {
    int v66 = 0;
    uint64_t v67 = 0;
    CFTypeRef cf = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v66);
    CFTypeRef v39 = cf;
    CFTypeRef cf = 0;
    if (v39) {
      CFRelease(v39);
    }
    char v40 = v66;
    if (v66)
    {
      int v66 = 0;
      LODWORD(v67) = 0;
      WTF::fastFree(v40, v38);
    }
    goto LABEL_97;
  }
  WebKit::plainTextForContext(&v65, (uint64_t)v69);
  uint64_t v10 = 5;
  while ((WTF::equal(v65, *a2, v9) & 1) == 0)
  {
    if (!v70) {
      goto LABEL_100;
    }
    WebCore::makeDeprecatedLegacyPosition();
    WebCore::Position::previous();
    uint64_t v11 = v61[0];
    v61[0] = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 7) == 2)
      {
        if ((*((_WORD *)v11 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v11);
        }
      }
      else
      {
        *((_DWORD *)v11 + 7) -= 2;
      }
    }
    if (!v63) {
      break;
    }
    if (!v70) {
      goto LABEL_100;
    }
    WebCore::makeDeprecatedLegacyPosition();
    int8x8_t v12 = v61[0];
    if (v63 == v61[0])
    {
      int v14 = WebCore::Position::deprecatedEditingOffset((WebCore::Position *)&v63);
      BOOL v13 = v14 == WebCore::Position::deprecatedEditingOffset((WebCore::Position *)v61)
         && ((BYTE4(v61[1]) ^ BYTE4(v64)) & 7) == 0;
      int8x8_t v12 = v61[0];
    }
    else
    {
      BOOL v13 = 0;
    }
    v61[0] = 0;
    if (v12)
    {
      if (*((_DWORD *)v12 + 7) == 2)
      {
        if ((*((_WORD *)v12 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v12);
        }
      }
      else
      {
        *((_DWORD *)v12 + 7) -= 2;
      }
    }
    if (!v13)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::wordRangeFromPosition();
      uint64_t v16 = v56;
      char v56 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 7) == 2)
        {
          if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v16);
          }
        }
        else
        {
          *((_DWORD *)v16 + 7) -= 2;
        }
      }
      if (v62)
      {
        if (!v70) {
          goto LABEL_100;
        }
        WebCore::SimpleRange::SimpleRange();
        char v56 = v52;
        LODWORD(v57) = v53;
        uint64_t v17 = v54;
        __int16 v52 = 0;
        uint64_t v54 = 0;
        uint64_t v58 = v17;
        int v59 = v55;
        char v60 = 1;
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)v69, (uint64_t)&v56);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v54);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v52);
        WebKit::plainTextForContext(&v56, (uint64_t)v69);
        uint64_t v19 = v56;
        char v56 = 0;
        char v20 = v65;
        unint64_t v65 = v19;
        if (v20)
        {
          int v21 = *(_DWORD *)v20 - 2;
          if (*(_DWORD *)v20 != 2) {
            goto LABEL_40;
          }
          WTF::StringImpl::destroy(v20, v18);
          char v20 = v56;
          char v56 = 0;
          if (v20)
          {
            int v21 = *(_DWORD *)v20 - 2;
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v22);
            }
            else {
LABEL_40:
            }
              *(_DWORD *)char v20 = v21;
          }
        }
        int v15 = 0;
      }
      else
      {
        int v15 = 4;
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61);
      goto LABEL_44;
    }
    int v15 = 2;
LABEL_44:
    char v23 = v63;
    char v63 = 0;
    if (v23)
    {
      if (*((_DWORD *)v23 + 7) == 2)
      {
        if ((*((_WORD *)v23 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v23);
        }
      }
      else
      {
        *((_DWORD *)v23 + 7) -= 2;
      }
    }
    if ((v15 | 4) == 4)
    {
      if (--v10) {
        continue;
      }
    }
    break;
  }
  if ((WTF::equal(v65, *a2, v9) & 1) == 0)
  {
    uint64_t v30 = 0;
    char v63 = 0;
    uint64_t v64 = 0;
    goto LABEL_79;
  }
  if (!v70)
  {
LABEL_100:
    __break(1u);
    goto LABEL_104;
  }
  WebCore::RenderObject::collectSelectionGeometries();
  uint64_t v30 = v61[0];
  uint64_t v31 = HIDWORD(v61[1]);
  char v63 = 0;
  uint64_t v64 = 0;
  if (!HIDWORD(v61[1])) {
    goto LABEL_79;
  }
  if (HIDWORD(v61[1]) >> 28)
  {
LABEL_104:
    __break(0xC471u);
    JUMPOUT(0x198F37874);
  }
  uint64_t v32 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v61[1])));
  uint64_t v33 = 0;
  LODWORD(v64) = v31;
  char v63 = v32;
  uint64_t v34 = v30;
  do
  {
    int v35 = *(WebCore::ScrollView **)(v6 + 288);
    __int16 v52 = (WTF::StringImpl *)WebCore::SelectionGeometry::rect(v34);
    uint64_t v53 = v36;
    char v56 = (WTF::StringImpl *)WebCore::ScrollView::contentsToRootView(v35, (const WebCore::IntRect *)&v52);
    uint64_t v57 = v37;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v61, (const WebCore::IntRect *)&v56);
    *((_OWORD *)v32 + v33++) = *(_OWORD *)v61;
    HIDWORD(v64) = v33;
    uint64_t v34 = (WebCore::SelectionGeometry *)((char *)v34 + 84);
  }
  while (v31 != v33);
LABEL_79:
  LOBYTE(v56) = 0;
  int v41 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v6 + 296));
  WebCore::Editor::fontForSelection((uint64_t *)v61, v41, (BOOL *)&v56);
  unsigned __int8 v42 = v61[0];
  if (v61[0])
  {
    uint64_t v43 = (WebCore::Node *)*((void *)v61[0] + 11);
    v61[0] = 0;
    WTF::RefCounted<WebCore::Font>::deref(v42);
    v61[0] = v43;
    if (v43) {
      CFRetain(v43);
    }
  }
  else
  {
    uint64_t v43 = 0;
    v61[0] = 0;
  }
  WebKit::WebAutocorrectionData::WebAutocorrectionData(&v49, (uint64_t)&v63, (const void **)v61);
  WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v49);
  CFTypeRef v45 = v51;
  CFTypeRef v51 = 0;
  if (v45) {
    CFRelease(v45);
  }
  uint64_t v46 = v49;
  if (v49)
  {
    uint64_t v49 = 0;
    int v50 = 0;
    WTF::fastFree(v46, v44);
  }
  if (v43) {
    CFRelease(v43);
  }
  int v47 = v63;
  if (v63)
  {
    char v63 = 0;
    LODWORD(v64) = 0;
    WTF::fastFree(v47, v44);
  }
  if (v30) {
    WTF::fastFree(v30, v44);
  }
  char v48 = v65;
  unint64_t v65 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v44);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
LABEL_97:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v69);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
}

void sub_198F37890(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, CFTypeRef a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WebCore::Node *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,WTF::StringImpl *a28,WTF *a29,int a30,CFTypeRef cf)
{
  if (a26) {
    WTF::fastFree(a26, a2);
  }
  if (v32) {
    WTF::fastFree(v32, a2);
  }
  if (a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v33 - 168);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v31 + 8));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::applyAutocorrection(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, int a4, WTF::RefCountedBase *a5)
{
  if (WebKit::WebPage::applyAutocorrectionInternal(*(WebKit::WebPage **)(a1 + 48), a2, a3, a4))
  {
    uint64_t v7 = *a2;
    if (*a2) {
      *(_DWORD *)v7 += 2;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a5, (WTF::RefCountedBase *)&v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198F37BC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::applyAutocorrectionInternal(WebKit::WebPage *this, WTF **a2, const WTF::StringImpl **a3, int a4)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  WebCore::Page::checkedFocusController((uint64_t *)&v78, this);
  uint64_t v7 = WebCore::FocusController::focusedOrMainFrame(v78);
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  uint64_t v10 = v78;
  int v78 = 0;
  if (v10)
  {
    if (!*(_DWORD *)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198F38390);
    }
    --*(_DWORD *)v10;
  }
  if (v7)
  {
    if (!*(unsigned char *)(*(void *)(*(void *)(v7 + 296) + 3096) + 153) || (WTF::equal(*a2, *a3, v8) & 1) != 0)
    {
      uint64_t v12 = 0;
LABEL_136:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
      return v12;
    }
    LOBYTE(v55) = 0;
    char v59 = 0;
    uint64_t v54 = 0;
    WebCore::foldQuoteMarks((uint64_t *)&v53, (WebCore *)a3, v11);
    uint64_t v13 = *(void *)(*(void *)(v9 + 296) + 3096);
    if (*(unsigned char *)(v13 + 153) == 1)
    {
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::wordRangeFromPosition();
      std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v55, (uint64_t)&v78);
      int v14 = (void *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78);
      WebKit::plainTextForContext(v14, (uint64_t)&v55);
      uint64_t v16 = v78;
      int v78 = 0;
      uint64_t v17 = v54;
      uint64_t v54 = v16;
      if (!v17) {
        goto LABEL_17;
      }
      int v18 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 != 2) {
        goto LABEL_16;
      }
      WTF::StringImpl::destroy(v17, v15);
      uint64_t v17 = v78;
      int v78 = 0;
      if (!v17) {
        goto LABEL_17;
      }
      int v18 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
LABEL_16:
      }
        *(_DWORD *)uint64_t v17 = v18;
LABEL_17:
      WebCore::foldQuoteMarks((uint64_t *)&v78, (WebCore *)&v54, v15);
      char v21 = WTF::equal(v78, v53, v19);
      uint64_t v22 = v78;
      int v78 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v20);
          if (v21)
          {
LABEL_21:
            if ((!v54 || !*((_DWORD *)v54 + 1)) && v59 && (v55 != v57 || v56 != v58))
            {
              WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v78);
              std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v55, (uint64_t)&v78);
              std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78);
              if (!v59)
              {
                char v23 = v60;
                char v60 = 0;
                if (v23)
                {
                  if (*((_DWORD *)v23 + 7) == 2)
                  {
                    if ((*((_WORD *)v23 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v23);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v23 + 7) -= 2;
                  }
                }
                goto LABEL_126;
              }
            }
            goto LABEL_50;
          }
LABEL_37:
          if (!WTF::numGraphemeClusters())
          {
            WTF::String::operator=((uint64_t *)&v54, MEMORY[0x1E4F30980]);
            WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)&v78);
            std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v55, (uint64_t)&v78);
            goto LABEL_49;
          }
          WebCore::rangeExpandedAroundPositionByCharacters();
          if (!v82)
          {
LABEL_49:
            std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78);
LABEL_50:
            uint64_t v33 = v60;
            char v60 = 0;
            if (v33)
            {
              if (*((_DWORD *)v33 + 7) == 2)
              {
                if ((*((_WORD *)v33 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v33);
                }
              }
              else
              {
                *((_DWORD *)v33 + 7) -= 2;
              }
            }
            goto LABEL_53;
          }
          WebCore::findPlainText();
          if (v64 == v66 && v65 == v67)
          {
LABEL_47:
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v66);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v64);
            goto LABEL_49;
          }
          WebCore::plainTextReplacingNoBreakSpace();
          char v29 = (WTF::StringImpl *)v76[0];
          v76[0] = 0;
          uint64_t v30 = v54;
          uint64_t v54 = v29;
          if (v30)
          {
            int v31 = *(_DWORD *)v30 - 2;
            if (*(_DWORD *)v30 != 2)
            {
LABEL_45:
              *(_DWORD *)uint64_t v30 = v31;
              goto LABEL_46;
            }
            WTF::StringImpl::destroy(v30, v28);
            uint64_t v30 = (WTF::StringImpl *)v76[0];
            v76[0] = 0;
            if (v30)
            {
              int v31 = *(_DWORD *)v30 - 2;
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::destroy(v30, v32);
                goto LABEL_46;
              }
              goto LABEL_45;
            }
          }
LABEL_46:
          std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange&,void>((uint64_t)&v55, (uint64_t *)&v64);
          goto LABEL_47;
        }
        *(_DWORD *)v22 -= 2;
      }
      if (v21) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
    WebCore::VisibleSelection::toNormalizedRange((uint64_t *)&v78, (WebCore::VisibleSelection *)(v13 + 56));
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(&v55, (uint64_t)&v78);
    uint64_t v24 = (void *)std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v78);
    if (!v59) {
      goto LABEL_126;
    }
    WebKit::plainTextForContext(v24, (uint64_t)&v55);
    uint64_t v25 = v78;
    int v78 = 0;
    uint64_t v26 = v54;
    uint64_t v54 = v25;
    if (v26)
    {
      int v27 = *(_DWORD *)v26 - 2;
      if (*(_DWORD *)v26 != 2)
      {
LABEL_35:
        *(_DWORD *)uint64_t v26 = v27;
        goto LABEL_53;
      }
      WTF::StringImpl::destroy(v26, v20);
      uint64_t v26 = v78;
      int v78 = 0;
      if (v26)
      {
        int v27 = *(_DWORD *)v26 - 2;
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::destroy(v26, v20);
          goto LABEL_53;
        }
        goto LABEL_35;
      }
    }
LABEL_53:
    WebCore::foldQuoteMarks((uint64_t *)&v78, (WebCore *)&v54, v20);
    char v35 = WTF::equal(v78, v53, v34);
    uint64_t v36 = v78;
    int v78 = 0;
    if (!v36) {
      goto LABEL_56;
    }
    if (*(_DWORD *)v36 != 2)
    {
      *(_DWORD *)v36 -= 2;
LABEL_56:
      if ((v35 & 1) == 0) {
        goto LABEL_126;
      }
LABEL_59:
      if (v59 && v55 == v57 && v56 == v58)
      {
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        uint64_t v37 = v78;
        int v78 = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 7) == 2)
          {
            if ((*((_WORD *)v37 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v37);
            }
          }
          else
          {
            *((_DWORD *)v37 + 7) -= 2;
          }
        }
        int v38 = v64;
        uint64_t v64 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 7) == 2)
          {
            if ((*((_WORD *)v38 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v38);
            }
          }
          else
          {
            *((_DWORD *)v38 + 7) -= 2;
          }
        }
      }
      WebCore::FrameSelection::setSelectedRange();
      if (*a2 && *((_DWORD *)*a2 + 1))
      {
        WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
        WebCore::Editor::insertText();
        if (a4)
        {
          uint64_t v39 = *(void *)(*(void *)(v9 + 296) + 3096);
          char v40 = *(WebCore::Node **)(v39 + 120);
          if (v40) {
            *((_DWORD *)v40 + 7) += 2;
          }
          uint64_t v73 = v40;
          int v74 = *(_DWORD *)(v39 + 128);
          char v75 = *(unsigned char *)(v39 + 132);
          int v41 = *(WebCore::Node **)(v39 + 136);
          if (v41) {
            *((_DWORD *)v41 + 7) += 2;
          }
          char v70 = v41;
          int v71 = *(_DWORD *)(v39 + 144);
          char v72 = *(unsigned char *)(v39 + 148);
          WebCore::VisiblePosition::VisiblePosition();
          WebCore::startOfEditableContent();
          unsigned __int8 v42 = v78;
          int v78 = 0;
          if (v42)
          {
            if (*((_DWORD *)v42 + 7) == 2)
            {
              if ((*((_WORD *)v42 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v42);
              }
            }
            else
            {
              *((_DWORD *)v42 + 7) -= 2;
            }
          }
          WebCore::makeBoundaryPoint();
          WebCore::makeBoundaryPoint(v76, (WebCore *)&v70, v43);
          int v44 = v77;
          if ((_BYTE)v62 && v77)
          {
            WebCore::SimpleRange::SimpleRange();
            uint64_t v64 = v78;
            int v65 = v79;
            CFTypeRef v45 = v80;
            int v78 = 0;
            uint64_t v80 = 0;
            int v66 = v45;
            int v67 = v81;
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v80);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v78);
            int v44 = v77;
            char v46 = 1;
          }
          else
          {
            char v46 = 0;
            LOBYTE(v64) = 0;
          }
          char v68 = v46;
          if (v44) {
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v76);
          }
          if ((_BYTE)v62) {
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v60);
          }
          if (v68)
          {
            WebCore::findPlainText();
            if (v60 != v62 || v61 != v63)
            {
              int v78 = 0;
              int v83 = 0;
              WebCore::addMarker();
              if (v83 != -1) {
                ((void (*)(uint64_t *, WTF **))off_1EE9DFB88[v83])(v76, &v78);
              }
            }
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v62);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v60);
          }
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64);
          int v47 = v69;
          uint64_t v69 = 0;
          if (v47)
          {
            if (*((_DWORD *)v47 + 7) == 2)
            {
              if ((*((_WORD *)v47 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v47);
              }
            }
            else
            {
              *((_DWORD *)v47 + 7) -= 2;
            }
          }
          char v48 = v70;
          char v70 = 0;
          if (v48)
          {
            if (*((_DWORD *)v48 + 7) == 2)
            {
              if ((*((_WORD *)v48 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v48);
              }
            }
            else
            {
              *((_DWORD *)v48 + 7) -= 2;
            }
          }
          uint64_t v49 = v73;
          uint64_t v73 = 0;
          if (v49)
          {
            if (*((_DWORD *)v49 + 7) == 2)
            {
              if ((*((_WORD *)v49 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v49);
              }
            }
            else
            {
              *((_DWORD *)v49 + 7) -= 2;
            }
          }
        }
      }
      else if (*a3 && *((_DWORD *)*a3 + 1))
      {
        WebCore::Document::editor(*(WebCore::Document **)(v9 + 296));
        uint64_t v12 = 1;
        WebCore::Editor::deleteWithDirection();
LABEL_127:
        int v50 = v53;
        uint64_t v53 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2) {
            WTF::StringImpl::destroy(v50, v20);
          }
          else {
            *(_DWORD *)v50 -= 2;
          }
        }
        CFTypeRef v51 = v54;
        uint64_t v54 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, v20);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55);
        goto LABEL_136;
      }
      uint64_t v12 = 1;
      goto LABEL_127;
    }
    WTF::StringImpl::destroy(v36, v20);
    if (v35) {
      goto LABEL_59;
    }
LABEL_126:
    uint64_t v12 = 0;
    goto LABEL_127;
  }
  return 0;
}

void sub_198F384A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WebCore::Node *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WebCore::Node *a28,uint64_t a29,uint64_t a30)
{
  uint64_t v34 = *(unsigned int *)(v32 - 80);
  if (v34 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9DFB88[v34])(v32 - 152, v32 - 128);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v31);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a16);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20);
  uint64_t v36 = a25;
  a25 = 0;
  if (v36)
  {
    if (*(_DWORD *)(v36 + 28) == 2)
    {
      if ((*(_WORD *)(v36 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v36);
      }
    }
    else
    {
      *(_DWORD *)(v36 + 28) -= 2;
    }
  }
  uint64_t v37 = a28;
  a28 = 0;
  if (v37)
  {
    if (*((_DWORD *)v37 + 7) == 2)
    {
      if ((*((_WORD *)v37 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v37);
      }
    }
    else
    {
      *((_DWORD *)v37 + 7) -= 2;
    }
  }
  uint64_t v38 = a30;
  a30 = 0;
  if (v38)
  {
    if (*(_DWORD *)(v38 + 28) == 2)
    {
      if ((*(_WORD *)(v38 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v38);
      }
    }
    else
    {
      *(_DWORD *)(v38 + 28) -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v35);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v35);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v30 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::syncApplyAutocorrection(uint64_t a1, WTF **a2, const WTF::StringImpl **a3, int a4, uint64_t *a5)
{
  WebKit::WebPage::applyAutocorrectionInternal(*(WebKit::WebPage **)(a1 + 48), a2, a3, a4);

  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a5);
}

unsigned int *WebKit::WebPage::autocorrectionContext(unsigned int *this, uint64_t a2)
{
  uint64_t v4 = (uint64_t)this;
  if (!*(void *)(a2 + 928)) {
    goto LABEL_11;
  }
  WebCore::Page::checkedFocusController((uint64_t *)&v75, *(WebCore::Page **)(a2 + 48));
  this = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v75);
  uint64_t v5 = this;
  if (this) {
    atomic_fetch_add((atomic_uint *volatile)this + 2, 1u);
  }
  uint64_t v6 = v75;
  char v75 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      goto LABEL_183;
    }
    --*(_DWORD *)v6;
  }
  if (!this)
  {
LABEL_11:
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = xmmword_1994F6020;
    return this;
  }
  if ((WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(*(void *)(*((void *)this + 37)
                                                                                            + 3096)
                                                                                + 56)) & 1) == 0)
  {
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = xmmword_1994F6020;
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5 + 2);
  }
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::VisiblePosition::VisiblePosition();
  uint64_t v7 = (WebCore::Document *)*((void *)v5 + 37);
  uint64_t v8 = *((void *)v7 + 387);
  if (*(unsigned char *)(v8 + 153) == 2)
  {
    WebCore::VisibleSelection::toNormalizedRange((uint64_t *)&v75, (WebCore::VisibleSelection *)(v8 + 56));
    WebKit::plainTextForContext(&v72, (uint64_t)&v75);
    uint64_t v9 = (unsigned int *)v72;
    char v72 = 0;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75);
    uint64_t v7 = (WebCore::Document *)*((void *)v5 + 37);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (WebCore::Editor *)WebCore::Document::editor(v7);
  WebCore::Editor::compositionRange((uint64_t *)&v75, v10);
  if (v78)
  {
    WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>((uint64_t)&v72, (uint64_t)v75, v76);
    WebKit::plainTextForContext(v68, (uint64_t)&v72);
    uint64_t v11 = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72);
    if (!v78)
    {
      __break(1u);
      goto LABEL_170;
    }
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::BoundaryPoint &>((uint64_t)&v72, (uint64_t)v79, v77);
    WebKit::plainTextForContext(&v64, (uint64_t)&v72);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72);
    uint64_t v12 = v68[0];
    if (v68[0]) {
      *(_DWORD *)v68[0] += 2;
    }
    int v71 = v12;
    if (v9) {
      *v9 += 2;
    }
    char v70 = (WTF::StringImpl *)v9;
    uint64_t v13 = v64;
    if (v64) {
      *(_DWORD *)v64 += 2;
    }
    uint64_t v69 = v13;
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
    int v15 = v72;
    char v72 = 0;
    uint64_t v16 = v69;
    uint64_t v69 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v28 = v70;
    char v70 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v14);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    char v29 = v71;
    int v71 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v14);
        if (!v15) {
          goto LABEL_76;
        }
        goto LABEL_72;
      }
      *(_DWORD *)v29 -= 2;
    }
    if (!v15) {
      goto LABEL_76;
    }
LABEL_72:
    if (*((_DWORD *)v15 + 1))
    {
      if (v68[0])
      {
        uint64_t v30 = *((unsigned int *)v68[0] + 1);
        if (v9)
        {
LABEL_75:
          uint64_t v31 = v9[1];
LABEL_77:
          uint64_t v32 = v64;
          uint64_t v64 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v14);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          uint64_t v33 = v68[0];
          v68[0] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v14);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          uint64_t v2 = 0;
          int v3 = 0;
          goto LABEL_144;
        }
      }
      else
      {
        uint64_t v30 = 0;
        if (v9) {
          goto LABEL_75;
        }
      }
      uint64_t v31 = 0;
      goto LABEL_77;
    }
LABEL_76:
    uint64_t v31 = 0;
    uint64_t v30 = -1;
    goto LABEL_77;
  }
  WebCore::startOfEditableContent();
  if (WebCore::operator==((uint64_t)&v80, (uint64_t)v68))
  {
    uint64_t v2 = 0;
    goto LABEL_125;
  }
  uint64_t v17 = v80;
  if (v80) {
    *((_DWORD *)v80 + 7) += 2;
  }
  unsigned int v18 = 0;
  uint64_t v64 = v17;
  int v65 = v81;
  char v66 = v82;
  char v67 = v83;
  char v60 = 0;
  int v61 = 0;
  v62 &= 0xF0u;
  char v63 = 1;
  int v19 = 10;
  while (1)
  {
    WebCore::positionOfNextBoundaryOfGranularity();
    WebCore::startOfWord();
    char v20 = v72;
    char v72 = 0;
    char v21 = v60;
    char v60 = v20;
    if (!v21) {
      goto LABEL_33;
    }
    if (*((_DWORD *)v21 + 7) != 2)
    {
      *((_DWORD *)v21 + 7) -= 2;
LABEL_33:
      int v61 = v73;
      char v62 = BYTE4(v73);
      char v63 = v74;
      char v72 = 0;
      goto LABEL_34;
    }
    if ((*((_WORD *)v21 + 17) & 0x400) != 0) {
      goto LABEL_33;
    }
    WebCore::Node::removedLastRef(v21);
    int v27 = v72;
    int v61 = v73;
    char v62 = BYTE4(v73);
    char v63 = v74;
    char v72 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 7) == 2)
      {
        if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v27);
        }
      }
      else
      {
        *((_DWORD *)v27 + 7) -= 2;
      }
    }
LABEL_34:
    uint64_t v22 = v56;
    int v56 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 7) == 2)
      {
        if ((*((_WORD *)v22 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v22);
        }
      }
      else
      {
        *((_DWORD *)v22 + 7) -= 2;
      }
    }
    if (!v60) {
      goto LABEL_89;
    }
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v72);
    WebKit::plainTextForContext(&v56, (uint64_t)&v72);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72);
    uint64_t v24 = v56;
    if (v56)
    {
      v18 += *((_DWORD *)v56 + 1);
      if (v18 >= 0x64) {
        break;
      }
    }
    uint64_t v25 = v60;
    if (v60) {
      *((_DWORD *)v60 + 7) += 2;
    }
    uint64_t v26 = v64;
    uint64_t v64 = v25;
    if (v26)
    {
      if (*((_DWORD *)v26 + 7) == 2)
      {
        if ((*((_WORD *)v26 + 17) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v26);
          uint64_t v24 = v56;
        }
      }
      else
      {
        *((_DWORD *)v26 + 7) -= 2;
      }
    }
    int v65 = v61;
    char v66 = v62;
    char v67 = v63;
    int v56 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    if (!--v19) {
      goto LABEL_89;
    }
  }
  int v56 = 0;
  if (*(_DWORD *)v24 == 2) {
    WTF::StringImpl::destroy(v24, v23);
  }
  else {
    *(_DWORD *)v24 -= 2;
  }
LABEL_89:
  WebCore::startOfSentence();
  if (v56) {
    uint64_t v34 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v34 = 0;
  }
  if (v34)
  {
    int v35 = (char)WebCore::documentOrder();
    if (v35 != -127 && v35 < 0)
    {
      uint64_t v36 = v56;
      if (v56) {
        *((_DWORD *)v56 + 7) += 2;
      }
      uint64_t v37 = v64;
      uint64_t v64 = v36;
      if (v37)
      {
        if (*((_DWORD *)v37 + 7) == 2)
        {
          if ((*((_WORD *)v37 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v37);
          }
        }
        else
        {
          *((_DWORD *)v37 + 7) -= 2;
        }
      }
      int v65 = v57;
      char v66 = v58;
      char v67 = v59;
    }
  }
  if (v64) {
    uint64_t v38 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v38 = 0;
  }
  if (!v38)
  {
    uint64_t v2 = 0;
    goto LABEL_116;
  }
  uint64_t v2 = 0;
  int v39 = (char)WebCore::documentOrder();
  if (v39 != -127 && v39 < 0)
  {
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v72);
    WebKit::plainTextForContext(&v55, (uint64_t)&v72);
    uint64_t v2 = v55;
    uint64_t v55 = 0;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72);
    if (WebCore::atBoundaryOfGranularity())
    {
      if (!WebCore::operator==((uint64_t)v68, (uint64_t)&v64))
      {
        if (v2) {
          *(_DWORD *)v2 += 2;
        }
        uint64_t v54 = v2;
        char v72 = (WebCore::Node *)"\n ";
        uint64_t v73 = 3;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v72, (uint64_t *)&v54, &v55);
        int v41 = v55;
        if (v55)
        {
          uint64_t v55 = 0;
          if (v2)
          {
            if (*(_DWORD *)v2 == 2)
            {
              WTF::StringImpl::destroy(v2, v40);
              CFTypeRef v51 = v55;
              uint64_t v55 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2) {
                  WTF::StringImpl::destroy(v51, v40);
                }
                else {
                  *(_DWORD *)v51 -= 2;
                }
              }
            }
            else
            {
              *(_DWORD *)v2 -= 2;
              uint64_t v55 = 0;
            }
          }
          __int16 v52 = v54;
          uint64_t v54 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2) {
              WTF::StringImpl::destroy(v52, v40);
            }
            else {
              *(_DWORD *)v52 -= 2;
            }
          }
          uint64_t v2 = v41;
          goto LABEL_116;
        }
        __break(0xC471u);
LABEL_183:
        JUMPOUT(0x198F39098);
      }
    }
  }
LABEL_116:
  unsigned __int8 v42 = v56;
  int v56 = 0;
  if (v42)
  {
    if (*((_DWORD *)v42 + 7) == 2)
    {
      if ((*((_WORD *)v42 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v42);
      }
    }
    else
    {
      *((_DWORD *)v42 + 7) -= 2;
    }
  }
  uint64_t v43 = v60;
  char v60 = 0;
  if (v43)
  {
    if (*((_DWORD *)v43 + 7) == 2)
    {
      if ((*((_WORD *)v43 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v43);
      }
    }
    else
    {
      *((_DWORD *)v43 + 7) -= 2;
    }
  }
  int v44 = v64;
  uint64_t v64 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 7) == 2)
    {
      if ((*((_WORD *)v44 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v44);
      }
    }
    else
    {
      *((_DWORD *)v44 + 7) -= 2;
    }
  }
LABEL_125:
  WebCore::endOfEditableContent();
  BOOL v45 = WebCore::operator==((uint64_t)v79, (uint64_t)&v72);
  char v46 = v72;
  char v72 = 0;
  if (v46)
  {
    if (*((_DWORD *)v46 + 7) == 2)
    {
      if ((*((_WORD *)v46 + 17) & 0x400) == 0)
      {
        BOOL v53 = v45;
        WebCore::Node::removedLastRef(v46);
        BOOL v45 = v53;
      }
    }
    else
    {
      *((_DWORD *)v46 + 7) -= 2;
    }
  }
  if (v45)
  {
    int v3 = 0;
    goto LABEL_140;
  }
  WebCore::endOfSentence();
  if (v64) {
    int v47 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  }
  else {
    int v47 = 0;
  }
  if (v47 && (char)WebCore::documentOrder() >= 1)
  {
    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v72);
    WebKit::plainTextForContext(&v60, (uint64_t)&v72);
    int v3 = v60;
    char v60 = 0;
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72);
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v11 = (uint64_t)v64;
  uint64_t v64 = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 28) != 2)
    {
      *(_DWORD *)(v11 + 28) -= 2;
      goto LABEL_140;
    }
LABEL_170:
    if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
  }
LABEL_140:
  char v48 = v68[0];
  v68[0] = 0;
  if (v48)
  {
    if (*((_DWORD *)v48 + 7) == 2)
    {
      if ((*((_WORD *)v48 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v48);
      }
    }
    else
    {
      *((_DWORD *)v48 + 7) -= 2;
    }
  }
  int v15 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = -1;
LABEL_144:
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75);
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = v15;
  *(void *)(v4 + 16) = v9;
  *(void *)(v4 + 24) = v3;
  *(void *)(v4 + 32) = v30;
  *(void *)(v4 + 40) = v31;
  uint64_t v49 = v79[0];
  v79[0] = 0;
  if (v49)
  {
    if (*(_DWORD *)(v49 + 28) == 2)
    {
      if ((*(_WORD *)(v49 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v49);
      }
    }
    else
    {
      *(_DWORD *)(v49 + 28) -= 2;
    }
  }
  int v50 = v80;
  uint64_t v80 = 0;
  if (v50)
  {
    if (*((_DWORD *)v50 + 7) == 2)
    {
      if ((*((_WORD *)v50 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v50);
      }
    }
    else
    {
      *((_DWORD *)v50 + 7) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5 + 2);
}

void sub_198F39184(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WebCore::Node *a12, uint64_t a13, uint64_t a14, WebCore::Node *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a12)
  {
    if (*((_DWORD *)a12 + 7) == 2)
    {
      if ((*((_WORD *)a12 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a12);
      }
    }
    else
    {
      *((_DWORD *)a12 + 7) -= 2;
    }
  }
  if (a15)
  {
    if (*((_DWORD *)a15 + 7) == 2)
    {
      if ((*((_WORD *)a15 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a15);
      }
    }
    else
    {
      *((_DWORD *)a15 + 7) -= 2;
    }
  }
  if (a18)
  {
    if (*((_DWORD *)a18 + 7) == 2)
    {
      if ((*((_WORD *)a18 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a18);
      }
    }
    else
    {
      *((_DWORD *)a18 + 7) -= 2;
    }
  }
  if (a21)
  {
    if (*((_DWORD *)a21 + 7) == 2)
    {
      if ((*((_WORD *)a21 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a21);
      }
    }
    else
    {
      *((_DWORD *)a21 + 7) -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v30 - 168);
  uint64_t v33 = *(void *)(v30 - 128);
  *(void *)(v30 - 128) = 0;
  if (v33)
  {
    if (*(_DWORD *)(v33 + 28) == 2)
    {
      if ((*(_WORD *)(v33 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v33);
      }
    }
    else
    {
      *(_DWORD *)(v33 + 28) -= 2;
    }
  }
  uint64_t v34 = *(void *)(v30 - 104);
  *(void *)(v30 - 104) = 0;
  if (v34)
  {
    if (*(_DWORD *)(v34 + 28) == 2)
    {
      if ((*(_WORD *)(v34 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v34);
      }
    }
    else
    {
      *(_DWORD *)(v34 + 28) -= 2;
    }
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v32);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v32);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v27 + 8));
  _Unwind_Resume(a1);
}

void sub_198F3950C()
{
  uint64_t v1 = *(_DWORD **)(v0 - 168);
  *(void *)(v0 - 168) = 0;
  if (v1)
  {
    if (*v1) {
      --*v1;
    }
    else {
      __break(0xC471u);
    }
  }
  JUMPOUT(0x198F394B4);
}

uint64_t *WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::BoundaryPoint &>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  WebCore::makeBoundaryPoint();
  uint64_t v5 = *(void *)a3;
  *(_DWORD *)(v5 + 28) = *(_DWORD *)(*(void *)a3 + 28) + 2;
  int v10 = a3[2];
  uint64_t v9 = 0;
  uint64_t v11 = v5;
  int v12 = v10;
  unsigned __int8 v13 = 1;
  if (!v15)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    goto LABEL_5;
  }
  WebCore::SimpleRange::SimpleRange();
  *(void *)a1 = v16;
  *(_DWORD *)(a1 + 8) = v17;
  uint64_t v6 = v18;
  uint64_t v16 = 0;
  uint64_t v18 = 0;
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v19;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v18);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v16);
  int v7 = v13;
  *(unsigned char *)(a1 + 32) = 1;
  if (v7) {
LABEL_5:
  }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
  uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v9);
  if (v15) {
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
  }
  return result;
}

void sub_198F39644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a13) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a11);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  if (a16) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a14);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::preemptivelySendAutocorrectionContext(WebKit::WebPage *this)
{
  WebKit::WebPage::autocorrectionContext((unsigned int *)&v7, (uint64_t)this);
  uint64_t v11 = &v7;
  IPC::MessageSender::send<Messages::WebPageProxy::HandleAutocorrectionContext>((uint64_t)this + 32, (uint64_t **)&v11);
  int v3 = v10;
  int v10 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198F39750(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::HandleAutocorrectionContext>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1979;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v10 = v5;
  IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::encode(v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198F398D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebPage::handleAutocorrectionContextRequest(WebKit::WebPage *this)
{
  WebKit::WebPage::autocorrectionContext((unsigned int *)&v7, (uint64_t)this);
  uint64_t v11 = &v7;
  IPC::MessageSender::send<Messages::WebPageProxy::HandleAutocorrectionContext>((uint64_t)this + 32, (uint64_t **)&v11);
  int v3 = v10;
  int v10 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198F399D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::URL *WebKit::WebPage::positionInformation@<X0>(WebKit::WebPage *this@<X0>, const WebKit::InteractionInformationRequest *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v319 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a3 + 7) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 11) = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 17) = 0;
  *(_WORD *)(a3 + 21) = 0;
  *(unsigned char *)(a3 + 23) = 1;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 54) = 0;
  uint64_t v297 = a3 + 72;
  WTF::URL::URL((WTF::URL *)(a3 + 72));
  uint64_t result = WTF::URL::URL((WTF::URL *)(a3 + 112));
  *(_OWORD *)(a3 + 152) = 0u;
  v296 = (WTF::StringImpl **)(a3 + 152);
  *(unsigned char *)(a3 + 240) = 0;
  int v7 = (unsigned __int8 *)(a3 + 240);
  *(unsigned char *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_DWORD *)(a3 + 344) = 1065353216;
  *(_WORD *)(a3 + 386) = 0;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(unsigned char *)(a3 + 384) = 0;
  uint64_t v8 = (WTF::StringImpl **)(a3 + 392);
  *(unsigned char *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 512) = 0;
  *(unsigned char *)(a3 + 528) = 0;
  *(unsigned char *)(a3 + 608) = 0;
  *(_OWORD *)(a3 + 624) = 0u;
  *(_OWORD *)(a3 + 392) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(void *)a3 = *(void *)a2;
  *(void *)(a3 + 7) = *(void *)((char *)a2 + 7);
  uint64_t v301 = 0;
  uint64_t v9 = *(WebCore::LocalFrame **)(*((void *)this + 6) + 160);
  if (!v9 || *((unsigned char *)v9 + 144)) {
    return result;
  }
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v314, (const IntPoint *)a2);
  int v10 = (WebCore::Node *)WebCore::LocalFrame::nodeRespondingToClickEvents(v9, (const WebCore::FloatPoint *)v314, (WebCore::FloatPoint *)&v301, 0);
  uint64_t v11 = (uint64_t)v10;
  if (v10) {
    char isContentEditable = WebCore::Node::isContentEditable(v10);
  }
  else {
    char isContentEditable = 0;
  }
  *(unsigned char *)(a3 + 32) = isContentEditable;
  *(void *)(a3 + 64) = v301;
  if (*((unsigned char *)a2 + 11))
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v314, (const IntPoint *)a2);
    uint64_t v13 = WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(v9, (const WebCore::FloatPoint *)v314, (WebCore::FloatPoint *)&v301);
    if (!*(unsigned char *)(a3 + 18)) {
      *(unsigned char *)(a3 + 18) = 1;
    }
    *(unsigned char *)(a3 + 17) = v13 != 0;
  }
  int8x8_t v14 = (int8x8_t)vcgt_s32(*(int32x2_t *)a2, (int32x2_t)0xFE000000FE000000);
  *(int8x8_t *)v314 = vorr_s8((int8x8_t)(*(void *)&v14 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *(int32x2_t *)a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*(int32x2_t *)a2, 6uLL)), v14));
  WebCore::EventHandler::hitTestResultAtPoint();
  if (WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v298))
  {
    WebCore::EventHandler::selectCursor();
    __n128 v15 = std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Cursor,false>>((__n128 *)(a3 + 240), (__n128 *)v314);
    if ((_BYTE)v315)
    {
      uint64_t v16 = *(_DWORD **)&v314[8];
      *(void *)&v314[8] = 0;
      if (v16)
      {
        if (v16[2] == 1) {
          (*(void (**)(_DWORD *, __n128))(*(void *)v16 + 8))(v16, v15);
        }
        else {
          --v16[2];
        }
      }
    }
    if (*((unsigned char *)a2 + 10))
    {
      uint64_t v17 = WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v298);
      uint64_t v18 = (WebCore::LocalFrame *)v17;
      if (v17)
      {
        v294 = (unsigned int *)(v17 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
        int v19 = *(WebCore::ScrollView **)(v17 + 288);
        if (!v19)
        {
LABEL_116:
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v294);
          goto LABEL_117;
        }
        int v20 = *((_DWORD *)v19 + 2);
        *((_DWORD *)v19 + 2) = v20 + 1;
        if (!v299 || (v293 = v299, (char v21 = (_DWORD *)(*(void *)(v299 + 72) & 0xFFFFFFFFFFFFLL)) == 0))
        {
LABEL_113:
          if (v20) {
            *((_DWORD *)v19 + 2) = v20;
          }
          else {
            (*(void (**)(WebCore::ScrollView *))(*(void *)v19 + 8))(v19);
          }
          goto LABEL_116;
        }
        while ((v21[13] & 7) != 1)
        {
          uint64_t v22 = *((void *)v21 + 4);
          if (v22)
          {
            char v21 = *(_DWORD **)(v22 + 8);
            if (v21) {
              continue;
            }
          }
          goto LABEL_113;
        }
        *(void *)v306 = WebCore::ScrollView::rootViewToContents(v19, a2);
        WebCore::LocalFrame::visiblePositionForPoint((uint64_t *)v314, v18, (const WebCore::IntPoint *)v306);
        WebCore::VisiblePosition::absoluteSelectionBoundsForLine((WebCore::VisiblePosition *)v314);
        *(_DWORD *)v306 = v23;
        *(_DWORD *)&v306[4] = v24;
        *(_DWORD *)&v306[8] = v25;
        *(_DWORD *)&v306[12] = v26;
        int v287 = WebCore::Node::computeEditability();
        if (v287)
        {
          unsigned int v292 = v21[40];
          int v291 = (*(uint64_t (**)(_DWORD *))(*(void *)v21 + 1016))(v21);
          int v290 = (*(uint64_t (**)(_DWORD *))(*(void *)v21 + 1024))(v21);
          int v27 = (*(uint64_t (**)(_DWORD *))(*(void *)v21 + 1352))(v21);
          int v289 = (*(uint64_t (**)(_DWORD *))(*(void *)v21 + 944))(v21);
          int v288 = (*(uint64_t (**)(_DWORD *))(*(void *)v21 + 952))(v21);
          if ((WebCore::RenderStyle::scrollbarGutter((WebCore::RenderStyle *)(v21 + 20)) & 0x100) != 0)
          {
            int v29 = (*(uint64_t (**)(_DWORD *))(*(void *)v21 + 1352))(v21);
            int v30 = v29 << 6;
            if (v29 > 0x1FFFFFF) {
              int v30 = 0x7FFFFFFF;
            }
            if (v29 >= -33554432) {
              unsigned int v28 = v30;
            }
            else {
              unsigned int v28 = 0x80000000;
            }
          }
          else
          {
            unsigned int v28 = 0;
          }
          unsigned int v31 = v292 - v291;
          if (__OFSUB__(v292, v291)) {
            unsigned int v31 = (v292 >> 31) + 0x7FFFFFFF;
          }
          BOOL v32 = __OFSUB__(v31, v290);
          unsigned int v33 = v31 - v290;
          unsigned int v34 = (v31 >> 31) + 0x7FFFFFFF;
          if (!v32) {
            unsigned int v34 = v33;
          }
          unsigned int v35 = v27 << 6;
          if (v27 < -33554432) {
            unsigned int v35 = 0x80000000;
          }
          if (v27 > 0x1FFFFFF) {
            unsigned int v35 = 0x7FFFFFFF;
          }
          BOOL v32 = __OFSUB__(v34, v35);
          int v36 = v34 - v35;
          int v37 = (v34 >> 31) + 0x7FFFFFFF;
          if (!v32) {
            int v37 = v36;
          }
          int v38 = v37 & ~(v37 >> 31);
          BOOL v32 = __OFSUB__(v38, v289);
          unsigned int v39 = v38 - v289;
          if (v32) {
            unsigned int v39 = 0x7FFFFFFF;
          }
          BOOL v32 = __OFSUB__(v39, v288);
          unsigned int v40 = v39 - v288;
          unsigned int v41 = (v39 >> 31) + 0x7FFFFFFF;
          if (!v32) {
            unsigned int v41 = v40;
          }
          BOOL v32 = __OFSUB__(v41, v28);
          int v42 = v41 - v28;
          int v43 = (v41 >> 31) + 0x7FFFFFFF;
          if (v32) {
            int v42 = v43;
          }
          *(float *)&v306[8] = (float)(v42 & ~(v42 >> 31)) * 0.015625;
        }
        *(unsigned char *)(a3 + 61) = (v21[5] & 0x1000) != 0;
        WebCore::ScrollView::contentsToRootView(v19, (const WebCore::FloatRect *)v306);
        *(_DWORD *)(a3 + 220) = v46;
        *(_DWORD *)(a3 + 224) = v47;
        uint64_t v48 = a3 + 220;
        *(float *)(a3 + 228) = v44;
        *(float *)(a3 + 232) = v45;
        if (*(unsigned char *)(a3 + 61)) {
          float v49 = v44;
        }
        else {
          float v49 = v45;
        }
        *(float *)(a3 + 216) = v49;
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v311, (const IntPoint *)a2);
        uint64_t DeprecatedLegacyPosition = WebCore::FloatRect::contains();
        if (!DeprecatedLegacyPosition)
        {
          if (!*(unsigned char *)(a3 + 272)) {
            goto LABEL_530;
          }
          int v61 = *v7;
          uint64_t v52 = v293;
          if (v61 == 4)
          {
            v311 = (WebCore::Node *)WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v21, 1, 0);
            v312 = v62;
            if ((*((unsigned char *)v21 + 45) & 2) != 0)
            {
              uint64_t v63 = *((void *)v21 + 4);
              if (v63) {
                char v21 = *(_DWORD **)(v63 + 8);
              }
              else {
                char v21 = 0;
              }
            }
            WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)(v21 + 20));
            HIDWORD(v312) = (int)v70;
            v302[0] = (WTF::StringImpl *)WebCore::ScrollView::contentsToRootView(v19, (const WebCore::IntRect *)&v311);
            v302[1] = v71;
            WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v305, (const WebCore::IntRect *)v302);
            *(_OWORD *)uint64_t v48 = *(_OWORD *)v305;
            WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v305, (const IntPoint *)a2);
            char v72 = WebCore::FloatRect::contains();
            if (v287) {
              char v73 = v72;
            }
            else {
              char v73 = 0;
            }
            float v74 = *(float *)(a3 + 232);
            if ((v73 & 1) == 0) {
              *(float *)(a3 + 224) = (float)*((int *)a2 + 1) + (float)(v74 * -0.5);
            }
            if (*(unsigned char *)(a3 + 61)) {
              float v74 = *(float *)(a3 + 228);
            }
            *(float *)(a3 + 216) = v74;
          }
          goto LABEL_94;
        }
        if (!*(unsigned char *)(a3 + 272)) {
          goto LABEL_530;
        }
        int v51 = *v7;
        uint64_t v52 = v293;
        if (v51 == 3) {
          goto LABEL_94;
        }
        uint64_t v53 = *(void *)v314;
        if (!*(void *)v314)
        {
          char v75 = 0;
LABEL_96:
          v311 = v75;
          LODWORD(v312) = *(_DWORD *)&v314[8];
          BYTE4(v312) = v314[12];
          if ((*(void *)(v52 + 72) & 0xFFFFFFFFFFFFLL) != 0
            && (*(unsigned char *)((*(void *)(v52 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
            || (uint64_t v76 = WebCore::Position::computeNodeBeforePosition((WebCore::Position *)&v311)) != 0
            && (*(void *)(v76 + 72) & 0xFFFFFFFFFFFFLL) != 0
            && (*(unsigned char *)((*(void *)(v76 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3)
          {
            LOBYTE(v77) = 1;
          }
          else
          {
            uint64_t v78 = WebCore::Position::computeNodeAfterPosition((WebCore::Position *)&v311);
            if (v78)
            {
              uint64_t v77 = *(void *)(v78 + 72) & 0xFFFFFFFFFFFFLL;
              if (v77) {
                LOBYTE(v77) = (*(unsigned char *)((*(void *)(v78 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3;
              }
            }
            else
            {
              LOBYTE(v77) = 0;
            }
          }
          *(unsigned char *)(a3 + 59) = v77;
          int v79 = v311;
          v311 = 0;
          if (v79)
          {
            if (*((_DWORD *)v79 + 7) == 2)
            {
              if ((*((_WORD *)v79 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v79);
              }
            }
            else
            {
              *((_DWORD *)v79 + 7) -= 2;
            }
          }
          uint64_t v80 = *(void *)v314;
          *(void *)v314 = 0;
          if (v80)
          {
            if (*(_DWORD *)(v80 + 28) == 2)
            {
              if ((*(_WORD *)(v80 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v80);
              }
            }
            else
            {
              *(_DWORD *)(v80 + 28) -= 2;
            }
          }
          int v20 = *((_DWORD *)v19 + 2) - 1;
          goto LABEL_113;
        }
        int v54 = *(_DWORD *)(*(void *)v314 + 28);
        *(_DWORD *)(*(void *)v314 + 28) = v54 + 2;
        if (v54)
        {
          *(_DWORD *)(v53 + 28) = v54;
        }
        else if ((*(_WORD *)(v53 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v53);
        }
        uint64_t v55 = *(void *)(v53 + 72);
        uint64_t v56 = v55 & 0xFFFFFFFFFFFFLL;
        if ((v55 & 0xFFFFFFFFFFFFLL) != 0)
        {
          char v57 = *(unsigned char *)((v55 & 0xFFFFFFFFFFFFLL) + 0x2D);
          uint64_t v58 = v55 & 0xFFFFFFFFFFFFLL;
          if ((v57 & 2) != 0) {
            uint64_t v58 = *(void *)(*(void *)(v56 + 32) + 8);
          }
          int v59 = *(_DWORD *)(v58 + 124) & 0x3F;
          if (v59 == 9) {
            goto LABEL_74;
          }
          if (v59) {
            goto LABEL_94;
          }
          if (WebCore::Node::computeEditability()) {
            goto LABEL_74;
          }
          if ((*(unsigned char *)(v56 + 45) & 2) == 0)
          {
LABEL_94:
            char v75 = *(WebCore::Node **)v314;
            if (*(void *)v314) {
              *(_DWORD *)(*(void *)v314 + 28) += 2;
            }
            goto LABEL_96;
          }
          int v60 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 248))(v53);
        }
        else
        {
          int v60 = WebCore::Node::computeEditability();
        }
        if (v60)
        {
LABEL_74:
          uint64_t v64 = WebCore::Cursor::fromType();
          uint64_t v65 = v64;
          int v66 = *(unsigned __int8 *)(a3 + 272);
          *(unsigned char *)(a3 + 240) = *(unsigned char *)v64;
          if (v66)
          {
            uint64_t v67 = *(void *)(v64 + 8);
            if (v67) {
              ++*(_DWORD *)(v67 + 8);
            }
            char v68 = *(_DWORD **)(a3 + 248);
            *(void *)(a3 + 248) = v67;
            if (v68)
            {
              if (v68[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v68 + 8))(v68);
              }
              else {
                --v68[2];
              }
            }
            *(_OWORD *)(a3 + 256) = *(_OWORD *)(v65 + 16);
          }
          else
          {
            uint64_t v69 = *(void *)(v64 + 8);
            if (v69) {
              ++*(_DWORD *)(v69 + 8);
            }
            *(void *)(a3 + 248) = v69;
            *(_OWORD *)(a3 + 256) = *(_OWORD *)(v64 + 16);
            *(unsigned char *)(a3 + 272) = 1;
          }
          goto LABEL_94;
        }
        goto LABEL_94;
      }
    }
  }
LABEL_117:
  char v21 = (_DWORD *)*((void *)this + 116);
  if (v21)
  {
    WebCore::Page::checkedFocusController((uint64_t *)v314, *((WebCore::Page **)this + 6));
    uint64_t v81 = WebCore::FocusController::focusedOrMainFrame(*(WebCore::FocusController **)v314);
    uint64_t v48 = v81;
    if (v81) {
      atomic_fetch_add((atomic_uint *volatile)(v81 + 8), 1u);
    }
    char v82 = *(_DWORD **)v314;
    *(void *)v314 = 0;
    if (v82)
    {
      if (!*v82)
      {
        __break(0xC471u);
        JUMPOUT(0x198F3BA10);
      }
      --*v82;
    }
    if (v81)
    {
      if (*(void *)(WebCore::Document::editor(*(WebCore::Document **)(v81 + 296)) + 32)) {
        char v83 = WTF::RefPtr<WebCore::Text,WTF::RawPtrTraits<WebCore::Text>,WTF::DefaultRefDerefTraits<WebCore::Text>>::unspecifiedBoolTypeInstance;
      }
      else {
        char v83 = 0;
      }
      if (!v83)
      {
LABEL_173:
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v48 + 8));
        goto LABEL_174;
      }
      int v19 = *(WebCore::ScrollView **)(v48 + 288);
      ++*((_DWORD *)v19 + 2);
      uint64_t v304 = WebCore::ScrollView::rootViewToContents(v19, a2);
      uint64_t v303 = WebKit::constrainPoint((WebKit *)&v304, *(const WebCore::IntPoint **)(v48 + 296), (const WebCore::LocalFrame *)v21, v84);
      WebCore::LocalFrame::visiblePositionForPoint((uint64_t *)v306, (WebCore::LocalFrame *)v48, (const WebCore::IntPoint *)&v303);
      uint64_t v85 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v48 + 296));
      WebCore::Editor::compositionRange((uint64_t *)v314, v85);
      if (!(_BYTE)v315)
      {
LABEL_167:
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v314);
        uint64_t v106 = *(void *)v306;
        *(void *)v306 = 0;
        if (v106)
        {
          if (*(_DWORD *)(v106 + 28) == 2)
          {
            if ((*(_WORD *)(v106 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v106);
            }
          }
          else
          {
            *(_DWORD *)(v106 + 28) -= 2;
          }
        }
        if (*((_DWORD *)v19 + 2) == 1) {
          (*(void (**)(WebCore::ScrollView *))(*(void *)v19 + 8))(v19);
        }
        else {
          --*((_DWORD *)v19 + 2);
        }
        goto LABEL_173;
      }
      uint64_t DeprecatedLegacyPosition = WebCore::makeDeprecatedLegacyPosition();
      if ((_BYTE)v315)
      {
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        int v86 = (char)WebCore::documentOrder();
        BOOL v88 = v86 != -127 && v86 < 0;
        unint64_t v89 = v311;
        v311 = 0;
        if (v89)
        {
          if (*((_DWORD *)v89 + 7) == 2)
          {
            if ((*((_WORD *)v89 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v89);
            }
          }
          else
          {
            *((_DWORD *)v89 + 7) -= 2;
          }
        }
        if (v88)
        {
LABEL_144:
          WebCore::VisiblePosition::VisiblePosition();
          uint64_t v90 = v311;
          v311 = 0;
          uint64_t v91 = *(void *)v306;
          *(void *)v306 = v90;
          if (v91)
          {
            if (*(_DWORD *)(v91 + 28) == 2)
            {
              if ((*(_WORD *)(v91 + 34) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v91);
                v286 = v311;
                *(_DWORD *)&v306[8] = v312;
                v306[12] = BYTE4(v312);
                v306[16] = v313;
                v311 = 0;
                if (v286)
                {
                  if (*((_DWORD *)v286 + 7) == 2)
                  {
                    if ((*((_WORD *)v286 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v286);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v286 + 7) -= 2;
                  }
                }
                goto LABEL_148;
              }
            }
            else
            {
              *(_DWORD *)(v91 + 28) -= 2;
            }
          }
          *(_DWORD *)&v306[8] = v312;
          v306[12] = BYTE4(v312);
          v306[16] = v313;
LABEL_148:
          v311 = (WebCore::Node *)WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v306, 0);
          v312 = v92;
          uint64_t v93 = WebCore::ScrollView::contentsToRootView(v19, (const WebCore::IntRect *)&v311);
          BOOL v96 = 0;
          if (v94 >= 0) {
            int v97 = v94;
          }
          else {
            int v97 = v94 + 1;
          }
          int v98 = v93 + (v97 >> 1);
          int v99 = *((_DWORD *)a2 + 1);
          int v100 = v98 - *(_DWORD *)a2;
          if (v100 >= 0) {
            unsigned int v101 = v100;
          }
          else {
            unsigned int v101 = -v100;
          }
          unsigned int v102 = HIDWORD(v93) - v99;
          if (HIDWORD(v93) - v99 < 0) {
            unsigned int v102 = v99 - HIDWORD(v93);
          }
          if (v101 <= 0x42 && v102 <= 0x42)
          {
            int v103 = HIDWORD(v93) + v95 - v99;
            if (v103 < 0) {
              int v103 = v99 - (HIDWORD(v93) + v95);
            }
            BOOL v96 = v103 < 0x43;
          }
          *(unsigned char *)(a3 + 22) = v96;
          float32x2_t v104 = v302[0];
          v302[0] = 0;
          if (v104)
          {
            if (*((_DWORD *)v104 + 7) == 2)
            {
              if ((*((_WORD *)v104 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v104);
              }
            }
            else
            {
              *((_DWORD *)v104 + 7) -= 2;
            }
          }
          uint64_t v105 = v305[0];
          v305[0] = 0;
          if (v105)
          {
            if (*((_DWORD *)v105 + 7) == 2)
            {
              if ((*((_WORD *)v105 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v105);
              }
            }
            else
            {
              *((_DWORD *)v105 + 7) -= 2;
            }
          }
          goto LABEL_167;
        }
        WebCore::VisiblePosition::VisiblePosition();
        LODWORD(v21) = (char)WebCore::documentOrder();
        uint64_t DeprecatedLegacyPosition = (uint64_t)v311;
        v311 = 0;
        if (!DeprecatedLegacyPosition)
        {
LABEL_143:
          if ((int)v21 < 1) {
            goto LABEL_148;
          }
          goto LABEL_144;
        }
        if (*(_DWORD *)(DeprecatedLegacyPosition + 28) != 2)
        {
          *(_DWORD *)(DeprecatedLegacyPosition + 28) -= 2;
          goto LABEL_143;
        }
LABEL_531:
        if ((*(_WORD *)(DeprecatedLegacyPosition + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)DeprecatedLegacyPosition);
        }
        goto LABEL_143;
      }
LABEL_530:
      __break(1u);
      goto LABEL_531;
    }
  }
LABEL_174:
  uint64_t v107 = v300;
  if (v300) {
    *((_DWORD *)v300 + 7) += 2;
  }
  v295 = v107;
  if (!v11 || (*(_WORD *)(v11 + 32) & 8) == 0) {
    goto LABEL_320;
  }
  *(_DWORD *)(v11 + 28) += 2;
  if ((*(void *)(v11 + 72) & 0xFFFFFFFFFFFFLL) == 0) {
    goto LABEL_182;
  }
  if ((*(unsigned char *)((*(void *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198F3BA8CLL);
  }
  if ((*(unsigned char *)((*(void *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
    && (*(unsigned char *)((*(void *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
  {
    uint64_t v108 = (WebCore::Element *)WebKit::containingLinkAnchorElement(v11);
  }
  else
  {
LABEL_182:
    if (*(_WORD *)(v11 + 34)) {
      uint64_t v108 = (WebCore::Element *)v11;
    }
    else {
      uint64_t v108 = 0;
    }
  }
  *(unsigned char *)(a3 + 31) = 1;
  uint64_t v109 = *(void *)(v11 + 112);
  if (!v109 || !*(void *)(v109 + 24))
  {
    uint64_t v113 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
    goto LABEL_199;
  }
  unsigned int v110 = *(_DWORD *)(v109 + 4);
  if ((v110 & 1) == 0)
  {
    v111 = (void *)(v109 + 32);
    LODWORD(v112) = v110 >> 5;
    if (!v112) {
      goto LABEL_197;
    }
LABEL_192:
    uint64_t v114 = *MEMORY[0x1E4FB6898];
    uint64_t v112 = v112;
    while (1)
    {
      uint64_t v115 = *v111;
      if (*v111 == v114
        || *(void *)(v115 + 24) == *(void *)(v114 + 24) && *(void *)(v115 + 32) == *(void *)(v114 + 32))
      {
        goto LABEL_198;
      }
      v111 += 2;
      if (!--v112) {
        goto LABEL_197;
      }
    }
  }
  v111 = *(void **)(v109 + 40);
  LODWORD(v112) = *(_DWORD *)(v109 + 52);
  if (v112) {
    goto LABEL_192;
  }
LABEL_197:
  v111 = 0;
LABEL_198:
  uint64_t v113 = (WTF::StringImpl **)(v111 + 1);
LABEL_199:
  WTF::String::operator=((uint64_t *)(a3 + 168), v113);
  *(unsigned char *)(a3 + 60) = WebCore::ImageOverlay::isOverlayText(v107, v116);
  uint64_t v117 = *(void *)(v11 + 112);
  if (!v117) {
    goto LABEL_209;
  }
  unsigned int v118 = *(_DWORD *)(v117 + 4);
  if ((v118 & 1) == 0)
  {
    uint64_t v119 = v117 + 32;
    LODWORD(v120) = v118 >> 5;
    if (v120) {
      goto LABEL_202;
    }
LABEL_209:
    char v122 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
    goto LABEL_210;
  }
  uint64_t v119 = *(void *)(v117 + 40);
  LODWORD(v120) = *(_DWORD *)(v117 + 52);
  if (!v120) {
    goto LABEL_209;
  }
LABEL_202:
  uint64_t v121 = *MEMORY[0x1E4FB6B20];
  uint64_t v120 = v120;
  char v122 = (WTF::StringImpl **)(v119 + 8);
  while (1)
  {
    uint64_t v123 = (uint64_t)*(v122 - 1);
    if (v123 == v121
      || *(void *)(v123 + 24) == *(void *)(v121 + 24) && *(void *)(v123 + 32) == *(void *)(v121 + 32))
    {
      break;
    }
    v122 += 2;
    if (!--v120)
    {
      char v122 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
      break;
    }
  }
LABEL_210:
  int v124 = (WTF::StringImpl **)(a3 + 160);
  WTF::String::operator=((uint64_t *)(a3 + 160), v122);
  if (v108 && (!*v124 || !*((_DWORD *)*v124 + 1)))
  {
    WebCore::Element::innerText((uint64_t *)v314, (WebCore::Element *)v11);
    int v127 = *(WTF::StringImpl **)v314;
    *(void *)v314 = 0;
    char v128 = *v124;
    *int v124 = v127;
    if (v128)
    {
      int v129 = *(_DWORD *)v128 - 2;
      if (*(_DWORD *)v128 != 2) {
        goto LABEL_217;
      }
      WTF::StringImpl::destroy(v128, v126);
      char v128 = *(WTF::StringImpl **)v314;
      *(void *)v314 = 0;
      if (!v128) {
        goto LABEL_218;
      }
      int v129 = *(_DWORD *)v128 - 2;
      if (*(_DWORD *)v128 == 2) {
        WTF::StringImpl::destroy(v128, v130);
      }
      else {
LABEL_217:
      }
        *(_DWORD *)char v128 = v129;
    }
  }
LABEL_218:
  if ((*(void *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(unsigned char *)((*(void *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198F3BAACLL);
    }
    *(unsigned char *)(a3 + 23) = *(unsigned char *)(*(void *)((*(void *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x68) + 237) & 1;
  }
  uint64_t v131 = v11;
  if (!v108) {
    goto LABEL_274;
  }
  if (!*(unsigned char *)(a3 + 60))
  {
    *(unsigned char *)(a3 + 24) = 1;
    WebCore::Element::getAttribute(v108, MEMORY[0x1E4FB69A0]);
    WebCore::Document::completeURL();
    WebKit::WebPage::applyLinkDecorationFiltering((uint64_t)v314, this, (uint64_t)v306);
    WTF::URL::operator=(v297, (uint64_t)v314);
    char v134 = *(WTF::StringImpl **)v314;
    *(void *)v314 = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2) {
        WTF::StringImpl::destroy(v134, v132);
      }
      else {
        *(_DWORD *)v134 -= 2;
      }
    }
    __int16 v135 = *(WTF::StringImpl **)v306;
    *(void *)v306 = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2) {
        WTF::StringImpl::destroy(v135, v132);
      }
      else {
        *(_DWORD *)v135 -= 2;
      }
    }
    WebKit::linkIndicatorPositionInformation(this, v108, a2, (const WebKit::InteractionInformationRequest *)a3, v133);
    if (WebCore::DataDetection::isDataDetectorLink())
    {
      *(unsigned char *)(a3 + 56) = 1;
      *(_OWORD *)(a3 + 408) = *(_OWORD *)(a3 + 176);
      WebCore::DataDetection::dataDetectorIdentifier();
      uint64_t v137 = *(WTF::StringImpl **)v314;
      *(void *)v314 = 0;
      int v138 = *v8;
      WTF::StringImpl *v8 = v137;
      if (v138)
      {
        int v139 = *(_DWORD *)v138 - 2;
        if (*(_DWORD *)v138 != 2)
        {
LABEL_237:
          *(_DWORD *)int v138 = v139;
          goto LABEL_238;
        }
        WTF::StringImpl::destroy(v138, v136);
        int v138 = *(WTF::StringImpl **)v314;
        *(void *)v314 = 0;
        if (v138)
        {
          int v139 = *(_DWORD *)v138 - 2;
          if (*(_DWORD *)v138 == 2)
          {
            WTF::StringImpl::destroy(v138, v140);
            goto LABEL_238;
          }
          goto LABEL_237;
        }
      }
LABEL_238:
      int v141 = *(CFTypeRef **)(*(void *)(*(void *)(*(void *)(*(void *)(v11 + 48) + 8) + 544) + 8) + 312);
      if (v141)
      {
        CFTypeRef v142 = *v141;
        if (*v141) {
          CFRetain(*v141);
        }
        char v143 = *(const void **)(a3 + 400);
        *(void *)(a3 + 400) = v142;
        if (v143) {
          CFRelease(v143);
        }
      }
      if (WebCore::DataDetection::requiresExtendedContext())
      {
        WebCore::makeRangeSelectingNodeContents((uint64_t *)v306, (WebCore *)v11, v144);
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
        WebKit::plainTextForDisplay(v302, (uint64_t)v314);
        uint64_t v146 = v302[0];
        v302[0] = 0;
        int32x2_t v147 = *(WTF::StringImpl **)(a3 + 200);
        *(void *)(a3 + 200) = v146;
        if (v147)
        {
          if (*(_DWORD *)v147 == 2)
          {
            WTF::StringImpl::destroy(v147, v145);
            int v149 = v302[0];
            v302[0] = 0;
            if (v149)
            {
              if (*(_DWORD *)v149 == 2) {
                WTF::StringImpl::destroy(v149, v148);
              }
              else {
                *(_DWORD *)v149 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v147 -= 2;
            v302[0] = 0;
          }
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v314);
        char v150 = v311;
        v311 = 0;
        if (v150)
        {
          if (*((_DWORD *)v150 + 7) == 2)
          {
            if ((*((_WORD *)v150 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v150);
            }
          }
          else
          {
            *((_DWORD *)v150 + 7) -= 2;
          }
        }
        v151 = v305[0];
        v305[0] = 0;
        if (v151)
        {
          if (*((_DWORD *)v151 + 7) == 2)
          {
            if ((*((_WORD *)v151 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v151);
            }
          }
          else
          {
            *((_DWORD *)v151 + 7) -= 2;
          }
        }
        WebCore::makeDeprecatedLegacyPosition();
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary();
        WebKit::plainTextForDisplay(v302, (uint64_t)v314);
        char v153 = v302[0];
        v302[0] = 0;
        uint64_t v154 = *(WTF::StringImpl **)(a3 + 208);
        *(void *)(a3 + 208) = v153;
        if (v154)
        {
          if (*(_DWORD *)v154 == 2)
          {
            WTF::StringImpl::destroy(v154, v152);
            char v156 = v302[0];
            v302[0] = 0;
            if (v156)
            {
              if (*(_DWORD *)v156 == 2) {
                WTF::StringImpl::destroy(v156, v155);
              }
              else {
                *(_DWORD *)v156 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v154 -= 2;
            v302[0] = 0;
          }
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v314);
        uint64_t v157 = v311;
        v311 = 0;
        if (v157)
        {
          if (*((_DWORD *)v157 + 7) == 2)
          {
            if ((*((_WORD *)v157 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v157);
            }
          }
          else
          {
            *((_DWORD *)v157 + 7) -= 2;
          }
        }
        int v158 = v305[0];
        v305[0] = 0;
        if (v158)
        {
          if (*((_DWORD *)v158 + 7) == 2)
          {
            if ((*((_WORD *)v158 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v158);
            }
          }
          else
          {
            *((_DWORD *)v158 + 7) -= 2;
          }
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v306[16]);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v306);
      }
    }
  }
  uint64_t v131 = (uint64_t)v108;
LABEL_274:
  uint64_t v159 = *(void *)(v131 + 72) & 0xFFFFFFFFFFFFLL;
  if (v159)
  {
    if ((*(unsigned char *)((*(void *)(v131 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198F3BACCLL);
    }
    uint64_t v160 = WebCore::Page::scrollingCoordinator(*((WebCore::Page **)this + 6));
    if (v160)
    {
      *(void *)(a3 + 40) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v160 + 56))(v160, v159);
      *(void *)(a3 + 48) = v161;
    }
  }
  unint64_t v162 = *(void *)(v11 + 72);
  uint64_t v163 = (WebKit *)(v162 & 0xFFFFFFFFFFFFLL);
  if ((v162 & 0xFFFFFFFFFFFFLL) == 0) {
    goto LABEL_307;
  }
  if ((*(unsigned char *)((v162 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198F3BAECLL);
  }
  if ((*(unsigned char *)((v162 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3)
  {
    if ((*(unsigned char *)((v162 & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0 || !*(unsigned char *)(a3 + 60))
    {
      if (*(unsigned char *)((v162 & 0xFFFFFFFFFFFFLL) + 0x35))
      {
        WebKit::hostVideoElementIgnoringImageOverlay((WebKit *)v314, (WebCore::Node *)v11);
        uint64_t v170 = *(void *)v314;
        if (*(void *)v314)
        {
          WebKit::videoPositionInformation(this, *(WebKit::WebPage **)v314, a2, (const WebKit::InteractionInformationRequest *)a3, v169);
          if (*(_DWORD *)(v170 + 28) == 2)
          {
            if ((*(_WORD *)(v170 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v170);
            }
          }
          else
          {
            *(_DWORD *)(v170 + 28) -= 2;
          }
        }
        else
        {
          WebKit::imagePositionInformation(this, (WebKit::WebPage *)v11, a2, (const WebKit::InteractionInformationRequest *)a3, v169);
        }
      }
      goto LABEL_306;
    }
    if (*((unsigned char *)a2 + 12))
    {
      WebKit::imageRendererAndImage((WebKit *)&v311, v162);
      if (v313)
      {
        int v164 = v311;
        char v165 = v312;
        uint64_t v166 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*((void *)v311 + 28) + 24));
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v166 + 160));
        WebCore::Document::completeURL();
        WebKit::WebPage::applyLinkDecorationFiltering((uint64_t)v314, this, (uint64_t)v306);
        WTF::URL::operator=(a3 + 112, (uint64_t)v314);
        char v168 = *(WTF::StringImpl **)v314;
        *(void *)v314 = 0;
        if (v168)
        {
          if (*(_DWORD *)v168 == 2) {
            WTF::StringImpl::destroy(v168, v167);
          }
          else {
            *(_DWORD *)v168 -= 2;
          }
        }
        char v171 = *(WTF::StringImpl **)v306;
        *(void *)v306 = 0;
        if (v171)
        {
          if (*(_DWORD *)v171 == 2) {
            WTF::StringImpl::destroy(v171, v167);
          }
          else {
            *(_DWORD *)v171 -= 2;
          }
        }
        WebCore::Image::mimeType((uint64_t *)v314, v165);
        char v173 = *(WTF::StringImpl **)v314;
        *(void *)v314 = 0;
        v174 = *v296;
        *v296 = v173;
        if (!v174) {
          goto LABEL_303;
        }
        int v175 = *(_DWORD *)v174 - 2;
        if (*(_DWORD *)v174 == 2)
        {
          WTF::StringImpl::destroy(v174, v172);
          v174 = *(WTF::StringImpl **)v314;
          *(void *)v314 = 0;
          if (!v174)
          {
LABEL_303:
            WebCore::screenSize(v174);
            float v177 = *(float *)(*((void *)this + 6) + 364);
            *(float *)v314 = v178 * v177;
            *(float *)&v314[4] = v179 * v177;
            v314[8] = 1;
            *(_WORD *)&v314[12] = 257;
            WebKit::createShareableBitmap((uint64_t)v164, (uint64_t)v314, (WebCore::ShareableBitmap **)v306);
            uint64_t v181 = *(void *)v306;
            *(void *)v306 = 0;
            uint64_t v182 = *(void *)(a3 + 192);
            *(void *)(a3 + 192) = v181;
            if (v182)
            {
              WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v182, v180);
              uint64_t v184 = *(void *)v306;
              *(void *)v306 = 0;
              if (v184) {
                WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v184, v183);
              }
            }
            goto LABEL_306;
          }
          int v175 = *(_DWORD *)v174 - 2;
          if (*(_DWORD *)v174 == 2)
          {
            v174 = (WTF::StringImpl *)WTF::StringImpl::destroy(v174, v176);
            goto LABEL_303;
          }
        }
        *(_DWORD *)v174 = v175;
        goto LABEL_303;
      }
    }
  }
LABEL_306:
  WebKit::boundsPositionInformation(v163, (WebCore::RenderObject *)a3, v125);
LABEL_307:
  WebKit::WebPage::contextForElement(this, (WebCore::Element *)v11, (uint64_t)v314);
  long long v185 = v316;
  *(_OWORD *)(a3 + 464) = v315;
  *(_OWORD *)(a3 + 480) = v185;
  *(_OWORD *)(a3 + 496) = v317;
  *(unsigned char *)(a3 + 512) = v318;
  long long v186 = *(_OWORD *)&v314[16];
  *(_OWORD *)(a3 + 432) = *(_OWORD *)v314;
  *(_OWORD *)(a3 + 448) = v186;
  if (*(unsigned char *)(a3 + 24) && !*(unsigned char *)(a3 + 25) && *((unsigned char *)a2 + 8))
  {
    WebKit::WebPage::snapshotNode((unsigned int *)this, v11, 1u, 0x96000u, v314);
    if (*(void *)v314)
    {
      WebKit::WebImage::bitmap(*(WebKit::WebImage **)v314, v306);
      uint64_t v188 = *(void *)v314;
      *(void *)v314 = 0;
      if (v188) {
        CFRelease(*(CFTypeRef *)(v188 + 8));
      }
      uint64_t v189 = *(void *)v306;
    }
    else
    {
      uint64_t v189 = 0;
    }
    *(void *)v306 = 0;
    uint64_t v190 = *(void *)(a3 + 192);
    *(void *)(a3 + 192) = v189;
    if (v190)
    {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v190, v187);
      uint64_t v192 = *(void *)v306;
      *(void *)v306 = 0;
      if (v192) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v192, v191);
      }
    }
  }
  if (*(_DWORD *)(v11 + 28) == 2)
  {
    if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
  }
  else
  {
    *(_DWORD *)(v11 + 28) -= 2;
  }
LABEL_320:
  if (!v107)
  {
    uint64_t v195 = 0;
    goto LABEL_344;
  }
  if (!*(unsigned char *)(a3 + 60)) {
    goto LABEL_334;
  }
  uint64_t v193 = WebCore::Node::shadowHost(v107);
  uint64_t v195 = v193;
  if (!v193) {
    goto LABEL_335;
  }
  if ((*(_WORD *)(v193 + 32) & 0x10) == 0)
  {
LABEL_334:
    uint64_t v195 = 0;
    goto LABEL_335;
  }
  *(_DWORD *)(v193 + 28) += 2;
  if ((WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)v193, v194) & 1) == 0)
  {
    if (*(_DWORD *)(v195 + 28) == 2)
    {
      if ((*(_WORD *)(v195 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v195);
      }
    }
    else
    {
      *(_DWORD *)(v195 + 28) -= 2;
    }
    goto LABEL_334;
  }
  uint64_t v196 = *(void *)(*(void *)(*(void *)(v195 + 48) + 8) + 544);
  if (v196)
  {
    uint64_t v197 = *(void *)(v196 + 8);
    if (v197)
    {
      uint64_t v198 = (unsigned int *)(v197 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v197 + 8), 1u);
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v306, (const IntPoint *)a2);
      WebCore::DataDetection::findDataDetectionResultElementInImageOverlay((uint64_t *)v314, (WebCore::DataDetection *)v306, (const WebCore::FloatPoint *)v195, v199);
      if (v314[24])
      {
        uint64_t v200 = *(void *)v314;
        *(_DWORD *)(*(void *)v314 + 28) += 2;
        *(void *)v306 = v200;
        *(_OWORD *)&v306[8] = *(_OWORD *)&v314[8];
        uint64_t v201 = *(void *)(v200 + 112);
        if (v201
          && ((unsigned int v202 = *(_DWORD *)(v201 + 4), (v202 & 1) != 0)
            ? (uint64_t v203 = *(void *)(v201 + 40), LODWORD(v204) = *(_DWORD *)(v201 + 52))
            : (uint64_t v203 = v201 + 32, LODWORD(v204) = v202 >> 5),
              v204))
        {
          uint64_t v255 = *MEMORY[0x1E4FB67D8];
          uint64_t v204 = v204;
          uint64_t v256 = (uint64_t *)(v203 + 8);
          while (1)
          {
            uint64_t v257 = *(v256 - 1);
            if (v257 == v255
              || *(void *)(v257 + 24) == *(void *)(v255 + 24) && *(void *)(v257 + 32) == *(void *)(v255 + 32))
            {
              break;
            }
            v256 += 2;
            if (!--v204)
            {
              uint64_t v256 = (uint64_t *)MEMORY[0x1E4F30968];
              break;
            }
          }
        }
        else
        {
          uint64_t v256 = (uint64_t *)MEMORY[0x1E4F30968];
        }
        uint64_t v258 = *v256;
        if (v258)
        {
          uint64_t v259 = *(void *)(v258 + 8);
          unint64_t v260 = *(unsigned int *)(v258 + 4) | ((unint64_t)((*(_DWORD *)(v258 + 16) >> 2) & 1) << 32);
        }
        else
        {
          uint64_t v259 = 0;
          unint64_t v260 = 0x100000000;
        }
        unint64_t v261 = WTF::parseInteger<unsigned long long>(v259, v260, 0xAu);
        if (v262 && v261)
        {
          if (v261 - 1 >= 0xFFFFFFFFFFFFFFFELL)
          {
            __break(0xC471u);
            JUMPOUT(0x198F3BC68);
          }
          uint64_t v263 = *(void *)(v197 + 312);
          if (v263)
          {
            uint64_t v264 = *(void *)(v263 + 8);
            if (v264)
            {
              unsigned int v265 = *(_DWORD *)(v264 - 8);
              unint64_t v266 = (v261 + ~(v261 << 32)) ^ ((v261 + ~(v261 << 32)) >> 22);
              unint64_t v267 = 9 * ((v266 + ~(v266 << 13)) ^ ((v266 + ~(v266 << 13)) >> 8));
              unint64_t v268 = (v267 ^ (v267 >> 15)) + ~((v267 ^ (v267 >> 15)) << 27);
              uint64_t v269 = v265 & ((v268 >> 31) ^ v268);
              uint64_t v270 = *(void *)(v264 + 16 * v269);
              if (v270 == v261)
              {
LABEL_436:
                uint64_t v272 = v264 + 16 * v269;
                v273 = *(void **)(v272 + 8);
                if (v273)
                {
                  CFRetain(*(CFTypeRef *)(v272 + 8));
                  CFRelease(v273);
                  CFRetain(v273);
                  *(_OWORD *)(a3 + 408) = *(_OWORD *)&v306[8];
                  v311 = (WebCore::Node *)v273;
                  v274 = (const void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v311 count:1];
                  v275 = v274;
                  if (v274) {
                    CFRetain(v274);
                  }
                  v276 = *(const void **)(a3 + 400);
                  *(void *)(a3 + 400) = v275;
                  if (v276) {
                    CFRelease(v276);
                  }
                  CFRelease(v273);
                }
              }
              else
              {
                int v271 = 1;
                while (v270)
                {
                  uint64_t v269 = (v269 + v271) & v265;
                  uint64_t v270 = *(void *)(v264 + 16 * v269);
                  ++v271;
                  if (v270 == v261) {
                    goto LABEL_436;
                  }
                }
              }
            }
          }
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v306);
        if (v314[24]) {
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v314);
        }
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v198);
    }
  }
LABEL_335:
  if (*(unsigned char *)(a3 + 25) || !*((unsigned char *)a2 + 12)) {
    goto LABEL_344;
  }
  WebKit::hostVideoElementIgnoringImageOverlay((WebKit *)v314, v107);
  uint64_t v206 = *(void *)v314;
  if (!*(void *)v314)
  {
    int v207 = *((_DWORD *)v107 + 7);
    *((_DWORD *)v107 + 7) = v207 + 2;
    if ((*((_WORD *)v107 + 16) & 0x10) != 0
      && *(void *)(*((void *)v107 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB68A0] + 24))
    {
      WebKit::imagePositionInformation(this, v107, a2, (const WebKit::InteractionInformationRequest *)a3, v205);
      int v207 = *((_DWORD *)v107 + 7) - 2;
      if (*((_DWORD *)v107 + 7) != 2) {
        goto LABEL_343;
      }
    }
    else if (v207)
    {
LABEL_343:
      *((_DWORD *)v107 + 7) = v207;
      goto LABEL_344;
    }
    if ((*((_WORD *)v107 + 17) & 0x400) != 0) {
      goto LABEL_344;
    }
    uint64_t v237 = v107;
    goto LABEL_511;
  }
  WebKit::videoPositionInformation(this, *(WebKit::WebPage **)v314, a2, (const WebKit::InteractionInformationRequest *)a3, v205);
  if (*(_DWORD *)(v206 + 28) != 2)
  {
    *(_DWORD *)(v206 + 28) -= 2;
    goto LABEL_344;
  }
  if ((*(_WORD *)(v206 + 34) & 0x400) == 0)
  {
    uint64_t v237 = (WebCore::Node *)v206;
LABEL_511:
    WebCore::Node::removedLastRef(v237);
  }
LABEL_344:
  uint64_t v208 = *((void *)this + 6);
  if (v208) {
    LODWORD(v208) = (*(unsigned __int8 *)(*(void *)(v208 + 112) + 711) >> 6) & 1;
  }
  *(unsigned char *)(a3 + 29) = v208;
  if (*((unsigned char *)a2 + 13))
  {
    for (int i = *(uint64_t **)(WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)v298) + 8);
          i;
          int i = (uint64_t *)i[2])
    {
      uint64_t v210 = *i;
      if (*i)
      {
        if ((*(_WORD *)(v210 + 32) & 8) != 0)
        {
          WebKit::imageRendererAndImage((WebKit *)&v311, *(void *)(v210 + 72));
          if (v313)
          {
            BOOL v211 = v312;
            if ((*(unsigned int (**)(WebCore::Image *))(*(void *)v312 + 112))(v312))
            {
              WebKit::WebPage::contextForElement(this, (WebCore::Element *)v210, (uint64_t)v314);
              if (v318)
              {
                char v212 = (*(uint64_t (**)(WebCore::Image *))(*(void *)v211 + 280))(v211);
                long long v307 = v315;
                long long v308 = v316;
                long long v309 = v317;
                *(_OWORD *)v306 = *(_OWORD *)v314;
                *(_OWORD *)&v306[16] = *(_OWORD *)&v314[16];
                LOBYTE(v310) = v212;
                uint64_t v213 = *(unsigned int *)(a3 + 636);
                if (v213 == *(_DWORD *)(a3 + 632))
                {
                  char v214 = (_OWORD *)WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 624, v213 + 1, (unint64_t)v306);
                  char v215 = (_OWORD *)(*(void *)(a3 + 624) + 96 * *(unsigned int *)(a3 + 636));
                  long long v216 = v214[5];
                  long long v218 = v214[2];
                  long long v217 = v214[3];
                  v215[4] = v214[4];
                  v215[5] = v216;
                  v215[2] = v218;
                  v215[3] = v217;
                  long long v219 = v214[1];
                  *char v215 = *v214;
                  v215[1] = v219;
                }
                else
                {
                  char v220 = (_OWORD *)(*(void *)(a3 + 624) + 96 * v213);
                  long long v221 = *(_OWORD *)&v306[16];
                  *char v220 = *(_OWORD *)v306;
                  v220[1] = v221;
                  long long v222 = v307;
                  long long v223 = v308;
                  long long v224 = v310;
                  v220[4] = v309;
                  v220[5] = v224;
                  v220[2] = v222;
                  v220[3] = v223;
                }
                ++*(_DWORD *)(a3 + 636);
              }
            }
          }
        }
      }
    }
  }
  uint64_t v225 = *(void *)(*((void *)this + 6) + 160);
  if (v225) {
    BOOL v226 = *(unsigned char *)(v225 + 144) == 0;
  }
  else {
    BOOL v226 = 0;
  }
  if (!v226) {
    goto LABEL_472;
  }
  int8x8_t v227 = (int8x8_t)vcgt_s32(*(int32x2_t *)a2, (int32x2_t)0xFE000000FE000000);
  *(int8x8_t *)v306 = vorr_s8((int8x8_t)(*(void *)&v227 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *(int32x2_t *)a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*(int32x2_t *)a2, 6uLL)), v227));
  WebCore::EventHandler::hitTestResultAtPoint();
  uint64_t v228 = *((void *)&v317 + 1);
  if (*((void *)&v317 + 1))
  {
    uint64_t v229 = *(void *)(*((void *)&v317 + 1) + 72);
    char v230 = (WebKit *)(v229 & 0xFFFFFFFFFFFFLL);
    if ((v229 & 0xFFFFFFFFFFFFLL) != 0)
    {
      char v231 = *(unsigned char *)((v229 & 0xFFFFFFFFFFFFLL) + 0x2D);
      uint64_t v232 = v229 & 0xFFFFFFFFFFFFLL;
      if ((v231 & 2) != 0)
      {
        uint64_t v232 = *((void *)v230 + 4);
        if (v232) {
          uint64_t v232 = *(void *)(v232 + 8);
        }
      }
      if (WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(v232 + 80)))
      {
        if ((*(_WORD *)(v228 + 32) & 8) == 0) {
          goto LABEL_385;
        }
        *(_DWORD *)(v228 + 28) += 2;
        if (WebKit::isAssistableElement((WebKit *)v228, v233))
        {
          int v234 = 0;
          LOBYTE(v235) = 1;
        }
        else
        {
          WebCore::HitTestResult::innerNodeFrame((WebCore::HitTestResult *)v314);
          int v235 = *(_DWORD *)(a3 + 188);
          WebCore::ScrollView::unobscuredContentRect();
          if ((float)((float)v236 * 0.97) >= (float)v235)
          {
            WebKit::hostVideoElementIgnoringImageOverlay((WebKit *)v306, (WebCore::Node *)v228);
            if (*(void *)v306)
            {
              if (*(_DWORD *)(*(void *)v306 + 28) == 2)
              {
                if ((*(_WORD *)(*(void *)v306 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(*(WebCore::Node **)v306);
                }
              }
              else
              {
                *(_DWORD *)(*(void *)v306 + 28) -= 2;
              }
              int v234 = 0;
              LOBYTE(v235) = 4;
            }
            else
            {
              int v234 = 1;
            }
          }
          else
          {
            int v234 = 0;
            LOBYTE(v235) = 2;
          }
        }
        if (*(_DWORD *)(v228 + 28) == 2)
        {
          if ((*(_WORD *)(v228 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v228);
          }
        }
        else
        {
          *(_DWORD *)(v228 + 28) -= 2;
        }
        if (v234) {
LABEL_385:
        }
          LOBYTE(v235) = 0;
      }
      else
      {
        LOBYTE(v235) = 3;
      }
      *(unsigned char *)(a3 + 19) = v235;
      *(unsigned char *)(a3 + 20) = WebCore::HitTestResult::isSelected((WebCore::HitTestResult *)v314);
      if (!(*(unsigned __int8 *)(a3 + 24) | *(unsigned __int8 *)(a3 + 25)))
      {
        WebKit::boundsPositionInformation(v230, (WebCore::RenderObject *)a3, v238);
        if ((*(_WORD *)(v228 + 32) & 8) != 0)
        {
          *(_DWORD *)(v228 + 28) += 2;
          uint64_t v239 = *(void *)(v228 + 112);
          if (v239 && *(void *)(v239 + 24))
          {
            unsigned int v240 = *(_DWORD *)(v239 + 4);
            if (v240)
            {
              v241 = *(void **)(v239 + 40);
              LODWORD(v242) = *(_DWORD *)(v239 + 52);
            }
            else
            {
              v241 = (void *)(v239 + 32);
              LODWORD(v242) = v240 >> 5;
            }
            if (v242)
            {
              uint64_t v244 = *MEMORY[0x1E4FB6898];
              uint64_t v242 = v242;
              while (1)
              {
                uint64_t v245 = *v241;
                if (*v241 == v244
                  || *(void *)(v245 + 24) == *(void *)(v244 + 24)
                  && *(void *)(v245 + 32) == *(void *)(v244 + 32))
                {
                  break;
                }
                v241 += 2;
                if (!--v242) {
                  goto LABEL_400;
                }
              }
            }
            else
            {
LABEL_400:
              v241 = 0;
            }
            v243 = (WTF::StringImpl **)(v241 + 1);
          }
          else
          {
            v243 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
          }
          WTF::String::operator=((uint64_t *)(a3 + 168), v243);
          if (*(_DWORD *)(v228 + 28) == 2)
          {
            if ((*(_WORD *)(v228 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v228);
            }
          }
          else
          {
            *(_DWORD *)(v228 + 28) -= 2;
          }
        }
        __int16 v246 = *(_WORD *)(v228 + 32);
        if ((v246 & 0x10) == 0
          || (v246 & 0x110) == 0x110
          || *(void *)(*(void *)(v228 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB6720] + 24))
        {
          goto LABEL_448;
        }
        *(_DWORD *)(v228 + 28) += 2;
        *(unsigned char *)(a3 + 26) = 1;
        WebCore::HTMLAttachmentElement::attachmentTitle((uint64_t *)v306, (WebCore::HTMLAttachmentElement *)v228);
        uint64_t v249 = *(void *)v306;
        *(void *)v306 = 0;
        v250 = *(WTF::StringImpl **)(a3 + 160);
        *(void *)(a3 + 160) = v249;
        if (v250)
        {
          int v251 = *(_DWORD *)v250 - 2;
          if (*(_DWORD *)v250 != 2) {
            goto LABEL_411;
          }
          WTF::StringImpl::destroy(v250, v247);
          v250 = *(WTF::StringImpl **)v306;
          *(void *)v306 = 0;
          if (!v250) {
            goto LABEL_412;
          }
          int v251 = *(_DWORD *)v250 - 2;
          if (*(_DWORD *)v250 == 2) {
            WTF::StringImpl::destroy(v250, v252);
          }
          else {
LABEL_411:
          }
            *(_DWORD *)v250 = v251;
        }
LABEL_412:
        WebKit::linkIndicatorPositionInformation(this, (WebKit::WebPage *)v228, a2, (const WebKit::InteractionInformationRequest *)a3, v248);
        if (WebCore::HTMLAttachmentElement::file((WebCore::HTMLAttachmentElement *)v228))
        {
          WebCore::HTMLAttachmentElement::file((WebCore::HTMLAttachmentElement *)v228);
          WTF::URL::fileURLWithFileSystemPath();
          WTF::URL::operator=(v297, (uint64_t)v306);
          uint64_t v254 = *(WTF::StringImpl **)v306;
          *(void *)v306 = 0;
          if (v254)
          {
            if (*(_DWORD *)v254 == 2) {
              WTF::StringImpl::destroy(v254, v253);
            }
            else {
              *(_DWORD *)v254 -= 2;
            }
          }
        }
        if (*(_DWORD *)(v228 + 28) == 2)
        {
          if ((*(_WORD *)(v228 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v228);
          }
        }
        else
        {
          *(_DWORD *)(v228 + 28) -= 2;
        }
LABEL_448:
        *(_DWORD *)(v228 + 28) += 2;
        while (1)
        {
          uint64_t v277 = v228;
          uint64_t v278 = *(void *)(v228 + 72) & 0xFFFFFFFFFFFFLL;
          if (v278)
          {
            if ((*(unsigned char *)(v278 + 45) & 2) != 0)
            {
              uint64_t v279 = *(void *)(v278 + 32);
              if (v279) {
                uint64_t v278 = *(void *)(v279 + 8);
              }
              else {
                uint64_t v278 = 0;
              }
            }
            if (!WebCore::RenderStyle::usedUserSelect((WebCore::RenderStyle *)(v278 + 80))
              && (*(_DWORD *)(*(void *)(*(void *)(v278 + 88) + 32) + 148) & 0x1800000) == 0x1000000)
            {
              *(unsigned char *)(a3 + 21) = 1;
              if (*(_DWORD *)(v277 + 28) == 2)
              {
                if ((*(_WORD *)(v277 + 34) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::Node *)v277);
                }
              }
              else
              {
                *(_DWORD *)(v277 + 28) -= 2;
              }
              goto LABEL_471;
            }
          }
          if ((*(_WORD *)(v277 + 32) & 0x80) == 0) {
            break;
          }
          uint64_t v281 = *(void *)(v277 + 208);
          if (v281)
          {
            v280 = (uint64_t *)(v281 + 8);
LABEL_460:
            uint64_t v228 = *v280;
            if (*v280) {
              *(_DWORD *)(v228 + 28) += 2;
            }
            goto LABEL_462;
          }
          uint64_t v228 = 0;
LABEL_462:
          if (*(_DWORD *)(v277 + 28) == 2)
          {
            if ((*(_WORD *)(v277 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v277);
            }
          }
          else
          {
            *(_DWORD *)(v277 + 28) -= 2;
          }
          if (!v228) {
            goto LABEL_471;
          }
        }
        v280 = (uint64_t *)(v277 + 40);
        goto LABEL_460;
      }
    }
  }
LABEL_471:
  MEMORY[0x199731400](v314);
LABEL_472:
  if (v11
    && (*(_WORD *)(v11 + 32) & 0x10) != 0
    && *(void *)(*(void *)(v11 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    *(_DWORD *)(v11 + 28) += 2;
    MEMORY[0x19973E940](v314, v11);
    uint64_t v282 = *(void *)v314;
    *(void *)v314 = 0;
    if (v282)
    {
      if (*(_DWORD *)(v282 + 28) == 2)
      {
        if ((*(_WORD *)(v282 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v282);
        }
      }
      else
      {
        *(_DWORD *)(v282 + 28) -= 2;
      }
      uint64_t v283 = *(void *)(*((void *)this + 6) + 160);
      if (v283 && !*(unsigned char *)(v283 + 144))
      {
        int8x8_t v284 = (int8x8_t)vcgt_s32(*(int32x2_t *)a2, (int32x2_t)0xFE000000FE000000);
        *(int8x8_t *)v306 = vorr_s8((int8x8_t)(*(void *)&v284 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *(int32x2_t *)a2), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*(int32x2_t *)a2, 6uLL)), v284));
        WebCore::EventHandler::hitTestResultAtPoint();
        uint64_t v285 = *((void *)&v317 + 1);
        if (v285 == WebCore::HTMLInputElement::dataListButtonElement((WebCore::HTMLInputElement *)v11)) {
          *(unsigned char *)(a3 + 57) = 1;
        }
        MEMORY[0x199731400](v314);
      }
    }
    if (*(_DWORD *)(v11 + 28) == 2)
    {
      if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 28) -= 2;
    }
  }
  if (v195)
  {
    if (*(_DWORD *)(v195 + 28) == 2)
    {
      if ((*(_WORD *)(v195 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v195);
      }
    }
    else
    {
      *(_DWORD *)(v195 + 28) -= 2;
    }
  }
  if (v295)
  {
    if (*((_DWORD *)v295 + 7) == 2)
    {
      if ((*((_WORD *)v295 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v295);
      }
    }
    else
    {
      *((_DWORD *)v295 + 7) -= 2;
    }
  }
  return (WTF::URL *)MEMORY[0x199731400](v298);
}

void sub_198F3BC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WebCore::Node *a35,uint64_t a36,uint64_t a37,uint64_t a38,WebCore::Node *a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,WebCore::Node *a54)
{
  CFRelease(v55);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a41);
  if (*(unsigned char *)(v58 - 216)) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v58 - 240));
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v57);
  if (v56)
  {
    if (*(_DWORD *)(v56 + 28) == 2)
    {
      if ((*(_WORD *)(v56 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v56);
      }
    }
    else
    {
      *(_DWORD *)(v56 + 28) -= 2;
    }
  }
  if (a13)
  {
    if (*((_DWORD *)a13 + 7) == 2)
    {
      if ((*((_WORD *)a13 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a13);
      }
    }
    else
    {
      *((_DWORD *)a13 + 7) -= 2;
    }
  }
  MEMORY[0x199731400](&a17);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition(v54, v60);
  _Unwind_Resume(a1);
}

uint64_t WebKit::hostVideoElementIgnoringImageOverlay(WebKit *this, WebCore::Node *a2)
{
  uint64_t v2 = a2;
  uint64_t result = WebCore::ImageOverlay::isInsideOverlay(a2, (const Node *)a2);
  if (result) {
    goto LABEL_8;
  }
  if ((*((_WORD *)v2 + 16) & 0x10) != 0
    && *(void *)(*((void *)v2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB6A48] + 24))
  {
    goto LABEL_7;
  }
  *(void *)this = 0;
  uint64_t result = WebCore::Node::shadowHost(v2);
  uint64_t v2 = (WebCore::Node *)result;
  if (result)
  {
    if ((*(_WORD *)(result + 32) & 0x10) != 0
      && *(void *)(*(void *)(result + 104) + 24) == *(void *)(*MEMORY[0x1E4FB6A48] + 24))
    {
LABEL_7:
      *((_DWORD *)v2 + 7) += 2;
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v2 = 0;
  }
LABEL_9:
  *(void *)this = v2;
  return result;
}

double WebKit::videoPositionInformation(WebKit *this, WebKit::WebPage *a2, WebCore::HTMLVideoElement *a3, const WebKit::InteractionInformationRequest *a4, WebKit::InteractionInformationAtPosition *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)a4 + 58) = WebCore::ImageOverlay::hasOverlay(a2, a2);
  if (WebCore::HTMLMediaElement::paused(a2))
  {
    uint64_t v10 = *((void *)a2 + 9) & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      if ((*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198F3C52CLL);
      }
      if ((*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198F3C54CLL);
      }
      if (*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
      {
        __break(0xC471u);
        JUMPOUT(0x198F3C56CLL);
      }
      *((unsigned char *)a4 + 30) = 1;
      if (*((unsigned char *)a3 + 12))
      {
        LOBYTE(v20[0]) = 0;
        BYTE8(v20[0]) = 0;
        WORD6(v20[0]) = 1;
        WebKit::createShareableBitmap(v10, (uint64_t)v20, &v19);
        uint64_t v13 = v19;
        int v19 = 0;
        uint64_t v14 = *((void *)a4 + 24);
        *((void *)a4 + 24) = v13;
        if (v14)
        {
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v14, v12);
          uint64_t v16 = v19;
          int v19 = 0;
          if (v16) {
            WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v16, v15);
          }
        }
      }
      WebKit::WebPage::contextForElement(this, a2, (uint64_t)v20);
      long long v17 = v20[3];
      *((_OWORD *)a4 + 35) = v20[2];
      *((_OWORD *)a4 + 36) = v17;
      *((_OWORD *)a4 + 37) = v20[4];
      *((unsigned char *)a4 + 608) = v21;
      double result = *(double *)v20;
      long long v18 = v20[1];
      *((_OWORD *)a4 + 33) = v20[0];
      *((_OWORD *)a4 + 34) = v18;
    }
  }
  return result;
}

void WebKit::imagePositionInformation(WebKit *this, WebKit::WebPage *a2, WebCore::Element *a3, const WebKit::InteractionInformationRequest *a4, WebKit::InteractionInformationAtPosition *a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  WebKit::imageRendererAndImage((WebKit *)v34, *((void *)a2 + 9));
  if (!v35) {
    return;
  }
  uint64_t v9 = v34[0];
  uint64_t v10 = (WebCore::Image *)v34[1];
  *((unsigned char *)a4 + 25) = 1;
  uint64_t v11 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(v9 + 224) + 24));
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v11 + 160));
  WebCore::Document::completeURL();
  WebKit::WebPage::applyLinkDecorationFiltering((uint64_t)v36, this, (uint64_t)v33);
  WTF::URL::operator=((uint64_t)a4 + 112, (uint64_t)v36);
  uint64_t v13 = v36[0];
  v36[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v33[0];
  v33[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  WebCore::Image::mimeType((uint64_t *)v36, v10);
  uint64_t v16 = v36[0];
  v36[0] = 0;
  long long v17 = (WTF::StringImpl *)*((void *)a4 + 19);
  *((void *)a4 + 19) = v16;
  if (v17)
  {
    int v18 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 != 2)
    {
LABEL_14:
      *(_DWORD *)long long v17 = v18;
      goto LABEL_15;
    }
    WTF::StringImpl::destroy(v17, v15);
    long long v17 = v36[0];
    v36[0] = 0;
    if (v17)
    {
      int v18 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v19);
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  *((unsigned char *)a4 + 27) = (*(uint64_t (**)(WebCore::Image *))(*(void *)v10 + 112))(v10);
  *((unsigned char *)a4 + 28) = (*(uint64_t (**)(WebCore::Image *))(*(void *)v10 + 280))(v10);
  __int16 v21 = *((_WORD *)a2 + 16);
  if ((v21 & 0x10) != 0)
  {
    *((_DWORD *)a2 + 7) += 2;
    hasOverlay = (WebCore *)WebCore::ImageOverlay::hasOverlay(a2, v20);
  }
  else
  {
    hasOverlay = 0;
  }
  *((unsigned char *)a4 + 58) = (_BYTE)hasOverlay;
  if (*((unsigned __int8 *)a3 + 8) | *((unsigned __int8 *)a3 + 12))
  {
    WebCore::screenSize(hasOverlay);
    float v23 = *(float *)(*((void *)this + 6) + 364);
    *(float *)int v36 = v24 * v23;
    *((float *)v36 + 1) = v25 * v23;
    LOBYTE(v36[1]) = 1;
    WORD2(v36[1]) = 257;
    WebKit::createShareableBitmap(v9, (uint64_t)v36, v33);
    int v27 = v33[0];
    v33[0] = 0;
    uint64_t v28 = *((void *)a4 + 24);
    *((void *)a4 + 24) = v27;
    if (v28)
    {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v28, v26);
      int v30 = v33[0];
      v33[0] = 0;
      if (v30) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v30, v29);
      }
    }
  }
  WebKit::WebPage::contextForElement(this, a2, (uint64_t)v36);
  long long v31 = v39;
  *((_OWORD *)a4 + 35) = v38;
  *((_OWORD *)a4 + 36) = v31;
  *((_OWORD *)a4 + 37) = v40;
  *((unsigned char *)a4 + 608) = v41;
  long long v32 = v37;
  *((_OWORD *)a4 + 33) = *(_OWORD *)v36;
  *((_OWORD *)a4 + 34) = v32;
  if ((v21 & 0x10) != 0)
  {
    if (*((_DWORD *)a2 + 7) == 2)
    {
      if ((*((_WORD *)a2 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a2);
      }
    }
    else
    {
      *((_DWORD *)a2 + 7) -= 2;
    }
  }
}

void sub_198F3C848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17)
{
  if (*(_DWORD *)(v17 + 28) == 2)
  {
    if ((*(_WORD *)(v17 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v17);
    }
  }
  else
  {
    *(_DWORD *)(v17 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPage::requestPositionInformation(WebKit::WebPage *this, const WebKit::InteractionInformationRequest *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  WebKit::WebPage::sendEditorStateUpdate(this);
  WebKit::WebPage::positionInformation(this, a2, (uint64_t)v6);
  uint64_t v5 = v6;
  IPC::MessageSender::send<Messages::WebPageProxy::DidReceivePositionInformation>((uint64_t)this + 32, (uint64_t *)&v5);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v6, v4);
}

void sub_198F3C974(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidReceivePositionInformation>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1941;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  int v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F3CA84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::startInteractionWithElementContextOrPosition(uint64_t this, const WebCore::ElementContext *a2, IntPoint *a3)
{
  uint64_t v4 = this;
  if (!*((unsigned char *)a2 + 80)) {
    goto LABEL_6;
  }
  WebKit::WebPage::elementForContext(this, a2, &v11);
  uint64_t v5 = v11;
  this = *(void *)(v4 + 1232);
  *(void *)(v4 + 1232) = v11;
  if (this)
  {
    if (*(_DWORD *)(this + 28) == 2)
    {
      if ((*(_WORD *)(this + 34) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
        uint64_t v5 = *(void *)(v4 + 1232);
      }
    }
    else
    {
      *(_DWORD *)(this + 28) -= 2;
    }
  }
  if (!v5)
  {
LABEL_6:
    uint64_t v11 = 0;
    uint64_t v6 = *(WebCore::LocalFrame **)(*(void *)(v4 + 48) + 160);
    if (v6) {
      BOOL v7 = *((unsigned char *)v6 + 144) == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v10, a3);
      uint64_t v8 = WebCore::LocalFrame::nodeRespondingToInteraction(v6, (const WebCore::FloatPoint *)&v10, (WebCore::FloatPoint *)&v11);
      uint64_t v9 = v8;
      if (v8) {
        *(_DWORD *)(v8 + 28) += 2;
      }
      this = *(void *)(v4 + 1232);
      *(void *)(v4 + 1232) = v9;
      if (this)
      {
        if (*(_DWORD *)(this + 28) == 2)
        {
          if ((*(_WORD *)(this + 34) & 0x400) == 0) {
            return WebCore::Node::removedLastRef((WebCore::Node *)this);
          }
        }
        else
        {
          *(_DWORD *)(this + 28) -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebPage::stopInteraction(WebKit::WebPage *this)
{
  uint64_t result = *((void *)this + 154);
  *((void *)this + 154) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

void WebKit::WebPage::performActionOnElement(uint64_t a1, WebCore::Element *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t v73 = v4;
  uint64_t v5 = *(void *)(a1 + 1232);
  if (!v5) {
    goto LABEL_5;
  }
  int v6 = *(_DWORD *)(v5 + 28);
  *(_DWORD *)(v5 + 28) = v6 + 2;
  if ((*(_WORD *)(v5 + 32) & 0x10) == 0)
  {
    if (v6)
    {
LABEL_4:
      *(_DWORD *)(v5 + 28) = v6;
      goto LABEL_5;
    }
    goto LABEL_101;
  }
  uint64_t v7 = *(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(unsigned char *)((*(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    if (a2 != 1)
    {
      if ((_BYTE)a2)
      {
LABEL_99:
        WebKit::handleAnimationActions(v5, a2);
        goto LABEL_100;
      }
      if ((*(unsigned char *)((*(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(unsigned char *)((*(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) == 0)
      {
        if ((*(_WORD *)(v5 + 34) & 1) == 0)
        {
          WebCore::Document::editor(*(WebCore::Document **)(*(void *)(v5 + 48) + 8));
          WebCore::Editor::promisedAttachmentInfo();
          if (v71)
          {
            if (*((_DWORD *)v71 + 1))
            {
              uint64_t v14 = *(void *)(a1 + 32);
              uint64_t v13 = a1 + 32;
              uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
              uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v16 = 2126;
              *((void *)v16 + 1) = v15;
              *((void *)v16 + 66) = (char *)v16 + 16;
              *((void *)v16 + 67) = 512;
              *((void *)v16 + 68) = 0;
              *((void *)v16 + 70) = 0;
              *((void *)v16 + 69) = 0;
              IPC::Encoder::encodeHeader(v16);
              uint64_t v67 = v16;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v71);
              IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v16, (uint64_t *)v72);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
              (*(void (**)(uint64_t, WTF::StringImpl **, void))(*(void *)v13 + 32))(v13, &v67, 0);
              uint64_t v17 = v67;
              uint64_t v67 = 0;
              if (v17)
              {
                IPC::Encoder::~Encoder(v17, v12);
                WTF::fastFree(v63, v64);
              }
            }
          }
          WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v72, v12);
          goto LABEL_95;
        }
        long long v38 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(*(void *)(v5 + 48) + 8));
        uint64_t v39 = *(void *)(v5 + 112);
        if (v39)
        {
          unsigned int v40 = *(_DWORD *)(v39 + 4);
          if (v40)
          {
            uint64_t v41 = *(void *)(v39 + 40);
            LODWORD(v42) = *(_DWORD *)(v39 + 52);
          }
          else
          {
            uint64_t v41 = v39 + 32;
            LODWORD(v42) = v40 >> 5;
          }
          if (v42)
          {
            uint64_t v43 = *MEMORY[0x1E4FB69A0];
            uint64_t v42 = v42;
            uint64_t v44 = v41 + 8;
            do
            {
              uint64_t v45 = *(void *)(v44 - 8);
              if (v45 == v43
                || *(void *)(v45 + 24) == *(void *)(v43 + 24) && *(void *)(v45 + 32) == *(void *)(v43 + 32))
              {
                break;
              }
              v44 += 16;
              --v42;
            }
            while (v42);
          }
        }
        WebCore::Document::completeURL();
        WebCore::Node::textContent((WebCore::Node *)v5);
        WebCore::Editor::copyURL(v38, (const WTF::URL *)&v71, (const WTF::String *)&v67);
        int v46 = v67;
        uint64_t v67 = 0;
        if (!v46) {
          goto LABEL_95;
        }
      }
      else
      {
        WTF::URL::URL((WTF::URL *)&v71);
        float v70 = 0;
        int v30 = (WebCore::HTMLAnchorElement *)WebKit::containingLinkAnchorElement(v5);
        long long v31 = v30;
        if (v30)
        {
          *((_DWORD *)v30 + 7) += 2;
          WebCore::HTMLAnchorElement::href((uint64_t *)&v67, v30);
          if (v67)
          {
            if (*((_DWORD *)v67 + 1) && (WTF::URL::protocolIsJavaScript((WTF::URL *)&v67) & 1) == 0)
            {
              WTF::String::operator=((uint64_t *)&v71, &v67);
              v72[0] = v68;
              v72[1] = v69;
              uint64_t v33 = *((void *)v31 + 14);
              if (v33
                && ((unsigned int v34 = *(_DWORD *)(v33 + 4), (v34 & 1) != 0)
                  ? (uint64_t v35 = *(void *)(v33 + 40), LODWORD(v36) = *(_DWORD *)(v33 + 52))
                  : (uint64_t v35 = v33 + 32, LODWORD(v36) = v34 >> 5),
                    v36))
              {
                uint64_t v47 = *MEMORY[0x1E4FB6B20];
                uint64_t v36 = v36;
                uint64_t v48 = (WTF::StringImpl **)(v35 + 8);
                while (1)
                {
                  uint64_t v49 = (uint64_t)*(v48 - 1);
                  if (v49 == v47
                    || *(void *)(v49 + 24) == *(void *)(v47 + 24) && *(void *)(v49 + 32) == *(void *)(v47 + 32))
                  {
                    break;
                  }
                  v48 += 2;
                  if (!--v36)
                  {
                    uint64_t v48 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
                    break;
                  }
                }
              }
              else
              {
                uint64_t v48 = (WTF::StringImpl **)MEMORY[0x1E4F30968];
              }
              WTF::String::operator=((uint64_t *)&v70, v48);
              if (!v70 || !*((_DWORD *)v70 + 1))
              {
                WebCore::Node::textContent(v31);
                int v51 = v65;
                uint64_t v65 = 0;
                uint64_t v52 = v70;
                float v70 = v51;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                  {
                    WTF::StringImpl::destroy(v52, v50);
                    uint64_t v65 = 0;
                  }
                  else
                  {
                    *(_DWORD *)v52 -= 2;
                  }
                }
              }
              WTF::String::trim();
              uint64_t v53 = v70;
              float v70 = v65;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2) {
                  WTF::StringImpl::destroy(v53, v32);
                }
                else {
                  *(_DWORD *)v53 -= 2;
                }
              }
            }
            int v54 = v67;
            uint64_t v67 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2) {
                WTF::StringImpl::destroy(v54, v32);
              }
              else {
                *(_DWORD *)v54 -= 2;
              }
            }
          }
          if (*((_DWORD *)v31 + 7) == 2)
          {
            if ((*((_WORD *)v31 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v31);
            }
          }
          else
          {
            *((_DWORD *)v31 + 7) -= 2;
          }
        }
        WebCore::Document::editor(*(WebCore::Document **)(*(void *)(*(void *)(a1 + 1232) + 48) + 8));
        uint64_t v55 = WebCore::Document::pageID(*(WebCore::Document **)(*(void *)(v5 + 48) + 8));
        uint64_t v57 = v56;
        uint64_t v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v58 = &unk_1EE9DC600;
        *((void *)v58 + 1) = v55;
        *((void *)v58 + 2) = v57;
        int v66 = v58;
        WebCore::Pasteboard::createForCopyAndPaste();
        WebCore::Editor::writeImageToPasteboard();
        int v59 = v67;
        uint64_t v67 = 0;
        if (v59) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v59 + 8))(v59);
        }
        if (v66) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v66 + 8))(v66);
        }
        int v46 = v70;
        float v70 = 0;
        if (!v46) {
          goto LABEL_95;
        }
      }
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v18);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
LABEL_95:
      int v60 = v71;
      int v71 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2) {
          WTF::StringImpl::destroy(v60, v18);
        }
        else {
          *(_DWORD *)v60 -= 2;
        }
      }
      goto LABEL_99;
    }
    if ((*(unsigned char *)((*(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
      && (*(unsigned char *)((*(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
    {
      ++*(_DWORD *)((*(void *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x10);
      uint64_t v20 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(v7 + 224) + 24));
      if (!v20)
      {
        int v22 = 1;
        goto LABEL_47;
      }
      __int16 v21 = *(atomic_uint **)(v20 + 392);
      int v22 = 1;
      if (!v21)
      {
LABEL_47:
        int v37 = *(_DWORD *)(v7 + 16);
        if (v37)
        {
          *(_DWORD *)(v7 + 16) = v37 - 1;
          if (v22) {
            goto LABEL_100;
          }
          goto LABEL_99;
        }
        __break(0xC471u);
LABEL_107:
        JUMPOUT(0x198F3D398);
      }
      atomic_fetch_add(v21, 1u);
      LOBYTE(v71) = 0;
      BYTE8(v72[0]) = 0;
      WebCore::SharedMemory::copyBuffer();
      if (v70)
      {
        WebCore::SharedMemory::createHandle();
        std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>((WTF::MachSendRight *)&v71, (uint64_t)&v67);
        if (BYTE8(v68)) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v67);
        }
        float v24 = (unsigned int *)v70;
        float v70 = 0;
        if (v24) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v24);
        }
        if (!BYTE8(v72[0])) {
          goto LABEL_38;
        }
        uint64_t v26 = *(void *)(a1 + 32);
        uint64_t v25 = a1 + 32;
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(v26 + 56))(v25);
        uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v28 = 2057;
        *((void *)v28 + 1) = v27;
        *((void *)v28 + 66) = (char *)v28 + 16;
        *((void *)v28 + 67) = 512;
        *((void *)v28 + 68) = 0;
        *((void *)v28 + 70) = 0;
        *((void *)v28 + 69) = 0;
        IPC::Encoder::encodeHeader(v28);
        uint64_t v67 = v28;
        IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v28, (unint64_t)&v71);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v28, a3);
        (*(void (**)(uint64_t, WTF::StringImpl **, void))(*(void *)v25 + 32))(v25, &v67, 0);
        int v29 = v67;
        uint64_t v67 = 0;
        if (v29)
        {
          IPC::Encoder::~Encoder(v29, v23);
          WTF::fastFree(v61, v62);
        }
        int v22 = 0;
      }
      if (BYTE8(v72[0])) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v71);
      }
LABEL_38:
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v21, v23);
      goto LABEL_47;
    }
  }
LABEL_100:
  int v6 = *(_DWORD *)(v5 + 28) - 2;
  if (*(_DWORD *)(v5 + 28) != 2) {
    goto LABEL_4;
  }
LABEL_101:
  if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
LABEL_5:
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)&v73);
}

void sub_198F3D3D0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, char a19)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (*(_DWORD *)(v20 + 28) == 2)
  {
    if ((*(_WORD *)(v20 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v20);
    }
  }
  else
  {
    *(_DWORD *)(v20 + 28) -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (*(_DWORD *)(v19 + 28) == 2)
  {
    if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
  }
  else
  {
    *(_DWORD *)(v19 + 28) -= 2;
  }
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)(v21 - 72));
  _Unwind_Resume(a1);
}

uint64_t WebKit::containingLinkAnchorElement(uint64_t result)
{
  uint64_t v1 = (uint64_t *)MEMORY[0x1E4FB67E0];
  if ((*(_WORD *)(result + 32) & 0x10) == 0
    || *(void *)(*(void *)(result + 104) + 24) != *(void *)(*MEMORY[0x1E4FB67E0] + 24))
  {
    uint64_t result = *(void *)(result + 40);
    if (!result) {
      return result;
    }
    __int16 v6 = *(_WORD *)(result + 32);
    if ((v6 & 8) == 0) {
      return 0;
    }
    while ((v6 & 0x10) == 0
         || *(void *)(*(void *)(result + 104) + 24) != *(void *)(*MEMORY[0x1E4FB67E0] + 24))
    {
      uint64_t result = *(void *)(result + 40);
      if (!result) {
        return result;
      }
      __int16 v6 = *(_WORD *)(result + 32);
      if ((v6 & 8) == 0) {
        return 0;
      }
    }
  }
  ++*(_DWORD *)(result + 24);
  uint64_t v2 = *v1;
  while ((*(_WORD *)(result + 34) & 1) == 0)
  {
    uint64_t v3 = *(void *)(result + 40);
    if (v3)
    {
      while (1)
      {
        __int16 v4 = *(_WORD *)(v3 + 32);
        if ((v4 & 8) == 0)
        {
          uint64_t v3 = 0;
          goto LABEL_13;
        }
        if ((v4 & 0x10) != 0 && *(void *)(*(void *)(v3 + 104) + 24) == *(void *)(v2 + 24)) {
          break;
        }
        uint64_t v3 = *(void *)(v3 + 40);
        if (!v3) {
          goto LABEL_13;
        }
      }
      ++*(_DWORD *)(v3 + 24);
    }
LABEL_13:
    int v5 = *(_DWORD *)(result + 24);
    if (!v5) {
      goto LABEL_25;
    }
    *(_DWORD *)(result + 24) = v5 - 1;
    uint64_t result = v3;
    if (!v3) {
      return result;
    }
  }
  int v7 = *(_DWORD *)(result + 24);
  if (!v7)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x198F3D748);
  }
  *(_DWORD *)(result + 24) = v7 - 1;
  return result;
}

uint64_t WTF::isASCIIWhitespace<char16_t>(unsigned int a1)
{
  return (a1 < 0x21) & (0x100003600uLL >> a1);
}

uint64_t WebKit::handleAnimationActions(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2 = this;
  if (a2 == 2)
  {
    if ((*(_WORD *)(this + 32) & 0x10) == 0
      || *(void *)(*(void *)(this + 104) + 24) != *(void *)(*MEMORY[0x1E4FB68A0] + 24))
    {
      return this;
    }
  }
  else if (a2 != 3 {
         || (*(_WORD *)(this + 32) & 0x10) == 0
  }
         || *(void *)(*(void *)(this + 104) + 24) != *(void *)(*MEMORY[0x1E4FB68A0] + 24))
  {
    return this;
  }
  *(_DWORD *)(this + 28) += 2;
  this = WebCore::HTMLImageElement::setAllowsAnimation();
  if (*(_DWORD *)(v2 + 28) == 2)
  {
    if ((*(_WORD *)(v2 + 34) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 28) -= 2;
  }
  return this;
}

void sub_198F3D878(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::performActionOnElements(uint64_t this, WebCore::Element *a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 12);
  if (v3)
  {
    uint64_t v5 = this;
    __int16 v6 = *(const WebCore::ElementContext **)a3;
    uint64_t v7 = 80 * v3;
    do
    {
      this = WebKit::WebPage::elementForContext(v5, v6, &v9);
      uint64_t v8 = v9;
      if (v9)
      {
        this = WebKit::handleAnimationActions((uint64_t)v9, a2);
        if (*((_DWORD *)v8 + 7) == 2)
        {
          if ((*((_WORD *)v8 + 17) & 0x400) == 0) {
            this = WebCore::Node::removedLastRef(v8);
          }
        }
        else
        {
          *((_DWORD *)v8 + 7) -= 2;
        }
      }
      __int16 v6 = (const WebCore::ElementContext *)((char *)v6 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  return this;
}

void sub_198F3D954(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::focusNextFocusedElement(uint64_t a1, int a2, uint64_t *a3)
{
  WebKit::nextAssistableElement((uint64_t)&v9, *(Node **)(a1 + 928), *(WebCore::Page **)(*(void *)(a1 + 48) + 72), a2);
  *(unsigned char *)(a1 + 920) = 1;
  uint64_t v5 = v9;
  if (v9)
  {
    __int16 v8 = 0;
    int v7 = 0;
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 656))(v9, &v7);
  }
  *(unsigned char *)(a1 + 920) = 0;
  uint64_t result = WTF::CompletionHandler<void ()(void)>::operator()(a3);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  return result;
}

void sub_198F3DA50(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::nextAssistableElement(uint64_t this, Node *a2, WebCore::Page *a3, int a4)
{
  if (a2 && (__int16 v4 = a2, (*((_WORD *)a2 + 16) & 8) != 0))
  {
    uint64_t v11 = (Node **)this;
    *((_DWORD *)a2 + 7) += 2;
    ++*(_DWORD *)a3;
    while (1)
    {
      if (a4) {
        this = WebCore::FocusController::nextFocusableElement(a3, v4);
      }
      else {
        this = WebCore::FocusController::previousFocusableElement(a3, v4);
      }
      __int16 v8 = (Node *)this;
      if (this) {
        *(_DWORD *)(this + 28) += 2;
      }
      if (*((_DWORD *)v4 + 7) == 2)
      {
        if ((*((_WORD *)v4 + 17) & 0x400) == 0) {
          this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
      }
      else
      {
        *((_DWORD *)v4 + 7) -= 2;
      }
      if (!v8) {
        break;
      }
      __int16 v4 = v8;
      if (WebKit::isAssistableElement((WebKit *)v8, v7))
      {
        uint64_t v9 = WebCore::Document::topDocument(*(WebCore::Document **)(*((void *)v8 + 6) + 8));
        *(_DWORD *)(v9 + 28) += 2;
        uint64_t v13 = v9;
        WebCore::Element::boundingBoxInRootViewCoordinates((WebCore::Element *)v8);
        WebCore::HitTestResult::HitTestResult();
        WebCore::Document::hitTest();
        WebCore::HitTestResult::setToNonUserAgentShadowAncestor((WebCore::HitTestResult *)v12);
        uint64_t v10 = WebCore::HitTestResult::targetElement((WebCore::HitTestResult *)v12);
        MEMORY[0x199731400](v12);
        this = (uint64_t)WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v13);
        __int16 v4 = v8;
        if ((Node *)v10 == v8) {
          break;
        }
      }
    }
    *uint64_t v11 = v8;
    if (*(_DWORD *)a3)
    {
      --*(_DWORD *)a3;
    }
    else
    {
      this = 286;
      __break(0xC471u);
    }
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

uint64_t sub_198F3DC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x199731400](va);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v6 - 96));
  if (*v4)
  {
    --*v4;
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
    _Unwind_Resume(a1);
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

uint64_t *WebKit::WebPage::autofillLoginCredentials(uint64_t *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v3 = this[116];
  if (!v3) {
    return this;
  }
  int v4 = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = v4 + 2;
  if ((*(_WORD *)(v3 + 32) & 0x10) == 0
    || *(void *)(*(void *)(v3 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    if (!v4)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0)
      {
        return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
      return this;
    }
LABEL_23:
    *(_DWORD *)(v3 + 28) = v4;
    return this;
  }
  *(_DWORD *)(v3 + 28) = v4 + 4;
  uint64_t v12 = v3;
  WebCore::AutofillElements::computeAutofillElements();
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v12);
  if (v14)
  {
    int v7 = *a2;
    if (*a2) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v11 = v7;
    __int16 v8 = *a3;
    if (*a3) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v10 = v8;
    WebCore::AutofillElements::autofill();
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  this = std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](v13);
  int v4 = *(_DWORD *)(v3 + 28) - 2;
  if (*(_DWORD *)(v3 + 28) != 2) {
    goto LABEL_23;
  }
  if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
    return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  return this;
}

void sub_198F3DEA4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12, int a13, uint64_t a14)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](&a14);
  if (*(_DWORD *)(v14 + 28) == 2)
  {
    if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
  }
  else
  {
    *(_DWORD *)(v14 + 28) -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::setDeviceOrientation(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 1480) != a2)
  {
    *(_DWORD *)(this + 1480) = a2;
    this = *(void *)(*(void *)(this + 48) + 160);
    if (this) {
      BOOL v2 = *(unsigned char *)(this + 144) == 0;
    }
    else {
      BOOL v2 = 0;
    }
    if (v2) {
      return MEMORY[0x1F416C178]();
    }
  }
  return this;
}

uint64_t WebKit::WebPage::dynamicViewportSizeUpdate(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 48) + 160);
  if (v2) {
    _ZF = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    _ZF = 0;
  }
  if (!_ZF) {
    return result;
  }
  uint64_t v5 = result;
  char v148 = *(unsigned char *)(result + 1485);
  *(unsigned char *)(result + 1485) = 1;
  uint64_t v6 = *(WebCore::ScrollView **)(v2 + 288);
  unint64_t v7 = WebCore::ScrollView::contentsSize(v6);
  float v8 = *(float *)(*(void *)(v5 + 48) + 356);
  uint64_t v9 = WebCore::ScrollView::unobscuredContentRect();
  uint64_t v10 = (WebKit *)WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(v5 + 952));
  uint64_t v144 = v9;
  float v12 = v11;
  BOOL v145 = WebKit::scalesAreEssentiallyEqual(v10, v8, v12);
  v158.i64[0] = v7;
  double v13 = v8;
  *(double *)&v158.i64[1] = v13;
  uint64_t v14 = WebCore::ScrollableArea::visibleContentRect();
  uint64_t v15 = (uint64_t *)(v5 + 1488);
  uint64_t v16 = *(void *)(v5 + 1488);
  if (v16
    || (WTF::HashTable<std::pair<WebCore::IntSize,double>,WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>>,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashMap<std::pair<WebCore::IntSize,double>,WebCore::IntPoint,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::IntSize,double>>>::expand((uint64_t *)(v5 + 1488)),
        (uint64_t v16 = *v15) != 0))
  {
    int v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = HIDWORD(v7);
  unsigned int v19 = WTF::PairHash<WebCore::IntSize,double>::hash((uint64_t)&v158) & v17;
  uint64_t v20 = (unsigned int *)(v16 + 24 * v19);
  unsigned int v21 = *v20;
  unsigned int v22 = v20[1];
  double v23 = *((double *)v20 + 1);
  if (*v20) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v22 == 0;
  }
  if (!v24 || v23 != INFINITY)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (__PAIR64__(v22, v21) != v7 || *(void *)&v13 != *(void *)&v23)
    {
      if ((v21 & v22) == 0xFFFFFFFF) {
        uint64_t v26 = v20;
      }
      unsigned int v19 = (v19 + v27) & v17;
      uint64_t v20 = (unsigned int *)(v16 + 24 * v19);
      unsigned int v21 = *v20;
      unsigned int v22 = v20[1];
      double v23 = *((double *)v20 + 1);
      ++v27;
      if (*v20) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v22 == 0;
      }
      if (v28 && v23 == INFINITY)
      {
        unint64_t v30 = v7;
        if (v26)
        {
          *(_OWORD *)uint64_t v26 = xmmword_1994F73E0;
          *((void *)v26 + 2) = 0x8000000000000000;
          --*(_DWORD *)(*v15 - 16);
          unint64_t v30 = v158.i64[0];
          uint64_t v20 = v26;
        }
        goto LABEL_32;
      }
    }
    goto LABEL_41;
  }
  unint64_t v30 = v7;
LABEL_32:
  *(void *)uint64_t v20 = v30;
  *((void *)v20 + 1) = v158.i64[1];
  *((void *)v20 + 2) = v14;
  uint64_t v31 = *v15;
  if (*v15) {
    int v32 = *(_DWORD *)(v31 - 12) + 1;
  }
  else {
    int v32 = 1;
  }
  *(_DWORD *)(v31 - 12) = v32;
  uint64_t v33 = *v15;
  if (*v15) {
    int v34 = *(_DWORD *)(v33 - 12);
  }
  else {
    int v34 = 0;
  }
  uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
  unint64_t v36 = *(unsigned int *)(v33 - 4);
  if (v36 <= 0x400)
  {
    if (3 * v36 > 4 * v35) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (v36 <= 2 * v35) {
LABEL_40:
  }
    WTF::HashTable<std::pair<WebCore::IntSize,double>,WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>>,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashMap<std::pair<WebCore::IntSize,double>,WebCore::IntPoint,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::IntSize,double>>>::expand((uint64_t *)(v5 + 1488));
LABEL_41:
  if (WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v5) && *(unsigned char *)(v5 + 924))
  {
    uint64_t v37 = 0;
    float v38 = 1.0;
    float v39 = 0.0;
    float v40 = 0.0;
  }
  else
  {
    WebCore::ScrollView::unobscuredContentSize(v6);
    float v42 = v41;
    uint64_t v43 = WebCore::ScrollView::unobscuredContentRect();
    if ((v44 & 0x80000000) == 0) {
      int v45 = v44;
    }
    else {
      int v45 = v44 + 1;
    }
    int v46 = v43 + (v45 >> 1);
    unint64_t v47 = HIDWORD(v44);
    if ((v44 & 0x8000000000000000) != 0) {
      LODWORD(v47) = HIDWORD(v44) + 1;
    }
    int v48 = HIDWORD(v43) + ((int)v47 >> 1);
    LODWORD(v49) = v46 << 6;
    if (v46 < -33554432) {
      float v49 = -0.0;
    }
    if (v46 > 0x1FFFFFF) {
      float v49 = NAN;
    }
    LODWORD(v50) = v48 << 6;
    if (v48 < -33554432) {
      float v50 = -0.0;
    }
    if (v48 > 0x1FFFFFF) {
      float v50 = NAN;
    }
    v157.m_location.m_CGFloat x = v49;
    v157.m_location.float m_y = v50;
    WebCore::HitTestResult::HitTestResult();
    if (*(void *)(WebCore::LocalFrameView::frame(v6) + 296))
    {
      LODWORD(v157.m_location.m_x) = 259;
      LOBYTE(v157.m_location.m_y) = 1;
      WebCore::Document::hitTest();
    }
    float v39 = 0.0;
    if (v160 && (int v51 = (WebCore::RenderObject *)(*(void *)(v160 + 72) & 0xFFFFFFFFFFFFLL)) != 0)
    {
      uint64_t v149 = v160;
      uint64_t v52 = *(WebCore::ScrollView **)(*(void *)(*(void *)(*(void *)(*(void *)(v160 + 48) + 8) + 544) + 8)
                                    + 288);
      uint64_t v154 = WebCore::RenderObject::absoluteBoundingBoxRect(v51, 1, 0);
      uint64_t v155 = v53;
      *(void *)&long long v156 = WebCore::ScrollView::contentsToRootView(v52, (const WebCore::IntRect *)&v154);
      *((void *)&v156 + 1) = v54;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v157, (const WebCore::IntRect *)&v156);
      float m_y = v157.m_location.m_y;
      float m_height = v157.m_size.m_height;
      float v40 = (float)((float)v46 - v157.m_location.m_x) / v157.m_size.m_width;
      *(_DWORD *)(v149 + 28) += 2;
      float v57 = (float)v48;
      uint64_t v37 = v149;
      float v39 = (float)(v57 - m_y) / m_height;
    }
    else
    {
      uint64_t v37 = 0;
      float v40 = 0.0;
    }
    float v38 = v42 / (float)(int)v7;
    MEMORY[0x199731400](&v158);
  }
  int IsKnownToLayOutWiderThanViewport = WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebCore::ViewportConfiguration *)(v5 + 952));
  v158.i8[0] = 0;
  v158.i8[8] = 0;
  v157.m_location = *(FloatPoint *)(a2 + 104);
  LOBYTE(v157.m_size.m_width) = 1;
  if ((IsKnownToLayOutWiderThanViewport | WebCore::ViewportConfiguration::setViewLayoutSize()) == 1) {
    WebKit::WebPage::viewportConfigurationChanged(v5, 0);
  }
  uint64_t v153 = WebCore::ViewportConfiguration::layoutSize((WebCore::ViewportConfiguration *)(v5 + 952));
  if (WebKit::WebPage::setFixedLayoutSize((WebKit::WebPage *)v5, (IntSize *)&v153)) {
    WebKit::WebPage::resetTextAutosizing(*(void *)(*(void *)(v5 + 48) + 160));
  }
  WebKit::WebPage::setDefaultUnobscuredSize((_DWORD *)v5, (const WebCore::FloatSize *)(a2 + 16));
  WebKit::WebPage::setMinimumUnobscuredSize((_DWORD *)v5, (const WebCore::FloatSize *)(a2 + 8));
  WebKit::WebPage::setMaximumUnobscuredSize((_DWORD *)v5, (const WebCore::FloatSize *)(a2 + 16));
  WebCore::Page::setUnobscuredSafeAreaInsets();
  WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive();
  int v59 = (const WebCore::ViewportConfiguration *)WebCore::ScrollView::contentsSize(v6);
  if (!WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v5)) {
    goto LABEL_73;
  }
  BOOL v64 = v145;
  if (!*(unsigned char *)(v5 + 924)) {
    BOOL v64 = 0;
  }
  if (v64) {
    BOOL v65 = 0;
  }
  else {
LABEL_73:
  }
    BOOL v65 = *(unsigned char *)(v5 + 1283) != 0;
  LODWORD(v62) = *(_DWORD *)(a2 + 64);
  int v66 = (WebKit *)WebKit::scaleAfterViewportWidthChange((WebKit *)v65, v62, (WebCore::ViewportConfiguration *)(v5 + 952), v59, v38, v60, v61, v63);
  double v68 = v67;
  FloatRect v69 = *(FloatRect *)(a2 + 40);
  long long v156 = *(_OWORD *)(a2 + 24);
  FloatRect v157 = v69;
  float v70 = v67;
  double v71 = *(double *)(a2 + 88);
  v69.m_location.m_CGFloat x = v71;
  uint64_t shouldIgnoreMetaViewport = WebKit::scalesAreEssentiallyEqual(v66, v70, v69.m_location.m_x);
  if (shouldIgnoreMetaViewport)
  {
    if ((const WebCore::ViewportConfiguration *)v7 == v59) {
      goto LABEL_138;
    }
    uint64_t v150 = v37;
    BOOL v73 = 0;
    float m_width = v157.m_size.m_width;
    float v75 = v157.m_size.m_height;
  }
  else
  {
    float32x2_t v76 = *(float32x2_t *)(a2 + 48);
    double v146 = v71 / v68;
    uint64_t shouldIgnoreMetaViewport = WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)v5);
    float64x2_t v77 = vmulq_n_f64(vcvtq_f64_f32(v76), v71 / v68);
    if (shouldIgnoreMetaViewport && *(unsigned char *)(v5 + 924))
    {
      v78.i64[0] = (int)v144;
      v78.i64[1] = SHIDWORD(v144);
      float64x2_t v79 = vcvtq_f64_s64(v78);
      float32x2_t v80 = *(float32x2_t *)(a2 + 40);
      float32x2_t v81 = *(float32x2_t *)(a2 + 48);
    }
    else
    {
      float32x2_t v80 = *(float32x2_t *)(a2 + 40);
      float32x2_t v81 = *(float32x2_t *)(a2 + 48);
      __asm { FMOV            V4.2D, #-0.5 }
      float64x2_t v79 = vaddq_f64(vcvtq_f64_f32(v80), vmulq_f64(vsubq_f64(v77, vcvtq_f64_f32(v81)), _Q4));
    }
    uint64_t v150 = v37;
    float v86 = v79.f64[0];
    float v87 = v79.f64[1];
    float m_width = v77.f64[0];
    float v75 = v77.f64[1];
    v157.m_location.m_CGFloat x = v86;
    v157.m_location.float m_y = v87;
    float32x2_t v88 = vadd_f32(v81, v80);
    float32x2_t v89 = *(float32x2_t *)(a2 + 24);
    float64x2_t v90 = vmulq_n_f64(vcvtq_f64_f32(vsub_f32(v80, v89)), v146);
    float64x2_t v91 = vmulq_n_f64(vcvtq_f64_f32(vsub_f32(vadd_f32(v89, *(float32x2_t *)(a2 + 32)), v88)), v146);
    float64x2_t v92 = vsubq_f64(v79, v90);
    v89.f32[0] = v92.f64[0];
    *(float *)v92.f64 = v92.f64[1];
    *(void *)&long long v156 = __PAIR64__(LODWORD(v92.f64[0]), v89.u32[0]);
    *((float32x2_t *)&v156 + 1) = vcvt_f32_f64(vaddq_f64(vaddq_f64(v77, v90), v91));
    BOOL v73 = v7 == v59 && HIDWORD(v7) == HIDWORD(v59);
  }
  float v94 = (float)(int)v59;
  if (m_width >= (float)(int)v59) {
    float v95 = (float)(int)v59;
  }
  else {
    float v95 = m_width;
  }
  float v96 = (float)SHIDWORD(v59);
  if (v75 >= (float)SHIDWORD(v59)) {
    float v97 = (float)SHIDWORD(v59);
  }
  else {
    float v97 = v75;
  }
  v157.m_size.float m_width = v95;
  v157.m_size.float m_height = v97;
  v158.i64[0] = (uint64_t)v59;
  *(double *)&v158.i64[1] = v70;
  uint64_t v98 = *v15;
  if (!v98)
  {
    uint64_t v37 = v150;
    goto LABEL_115;
  }
  BOOL v147 = v73;
  int v99 = *(_DWORD *)(v98 - 8);
  uint64_t shouldIgnoreMetaViewport = WTF::PairHash<WebCore::IntSize,double>::hash((uint64_t)&v158);
  for (int i = 0; ; shouldIgnoreMetaViewport = i + (shouldIgnoreMetaViewport & v99))
  {
    uint64_t v101 = v98 + 24 * (shouldIgnoreMetaViewport & v99);
    int v102 = *(_DWORD *)(v101 + 4);
    if (*(_DWORD *)v101 != v59 || v102 != HIDWORD(v59))
    {
      double v104 = *(double *)(v101 + 8);
      goto LABEL_102;
    }
    if (*(void *)(v101 + 8) == COERCE__INT64(v70)) {
      break;
    }
    double v104 = *(double *)(v101 + 8);
LABEL_102:
    if (*(_DWORD *)v101) {
      BOOL v105 = 0;
    }
    else {
      BOOL v105 = v102 == 0;
    }
    if (v105 && v104 == INFINITY)
    {
      unsigned int v107 = *(_DWORD *)(v98 - 4);
      uint64_t v101 = v98 + 24 * v107;
      goto LABEL_113;
    }
    ++i;
  }
  unsigned int v107 = *(_DWORD *)(v98 - 4);
LABEL_113:
  _ZF = v98 + 24 * v107 == v101;
  uint64_t v37 = v150;
  BOOL v73 = v147;
  if (!_ZF)
  {
    float v108 = (float)*(int *)(v101 + 16) - v157.m_location.m_x;
    float v109 = (float)*(int *)(v101 + 20) - v157.m_location.m_y;
    m_CGFloat x = v157.m_location.m_x + v108;
    v157.m_location.float m_y = v157.m_location.m_y + v109;
    float v111 = v108 + *(float *)&v156;
    *((float *)&v156 + 1) = v109 + *((float *)&v156 + 1);
    goto LABEL_132;
  }
LABEL_115:
  if (!v73)
  {
    if (v37 && (uint64_t shouldIgnoreMetaViewport = *(void *)(v37 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v112 = *(WebCore::ScrollView **)(*(void *)(*(void *)(*(void *)(*(void *)(v37 + 48) + 8) + 544) + 8)
                                     + 288);
      v152[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)shouldIgnoreMetaViewport, 1, 0);
      v152[1] = v113;
      uint64_t v154 = WebCore::ScrollView::contentsToRootView(v112, (const WebCore::IntRect *)v152);
      uint64_t v155 = v114;
      uint64_t shouldIgnoreMetaViewport = WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v158, (const WebCore::IntRect *)&v154);
      float v115 = *(float *)v158.i32 + (float)(v40 * *(float *)&v158.i32[2]);
      float v116 = *(float *)&v158.i32[1] + (float)(v39 * *(float *)&v158.i32[3]);
      float v95 = v157.m_size.m_width;
      float v97 = v157.m_size.m_height;
    }
    else
    {
      float v115 = (float)((float)(*(float *)(a2 + 40) + (float)(*(float *)(a2 + 48) * 0.5)) / (float)(int)v7) * v94;
      float v116 = (float)((float)(*(float *)(a2 + 44) + (float)(*(float *)(a2 + 52) * 0.5)) / (float)SHIDWORD(v7)) * v96;
    }
    float v117 = v115 - (float)(v157.m_location.m_x + (float)(v95 * 0.5));
    float v118 = v116 - (float)(v157.m_location.m_y + (float)(v97 * 0.5));
    v157.m_location.m_CGFloat x = v157.m_location.m_x + v117;
    v157.m_location.float m_y = v157.m_location.m_y + v118;
    *(float *)&long long v156 = v117 + *(float *)&v156;
    *((float *)&v156 + 1) = v118 + *((float *)&v156 + 1);
  }
  float v119 = *(float *)(a2 + 44);
  if ((float)(v119 + *(float *)(a2 + 52)) > (float)((int)v18 - 1))
  {
    v157.m_location.float m_y = v96 - v97;
    *((float *)&v156 + 1) = v96 - v97;
  }
  if (v119 < 1.0)
  {
    v157.m_location.float m_y = 0.0;
    DWORD1(v156) = 0;
  }
  int v120 = v153;
  if (*(float *)a2 == (float)(int)v153
    && (float v121 = v68,
        uint64_t shouldIgnoreMetaViewport = WebKit::scalesAreEssentiallyEqual((WebKit *)shouldIgnoreMetaViewport, v121, 1.0),
        shouldIgnoreMetaViewport)
    && v120 < (int)v59
    && (float v111 = 0.0, *(float *)(a2 + 40) <= 0.0))
  {
    m_CGFloat x = 0.0;
  }
  else
  {
    m_CGFloat x = v157.m_location.m_x;
    float v111 = *(float *)&v156;
  }
LABEL_132:
  float v122 = v94 - (float)(m_x + v95);
  if ((float)(m_x + v95) <= v94) {
    float v122 = 0.0;
  }
  if ((float)(v157.m_location.m_y + v97) <= v96) {
    float v123 = 0.0;
  }
  else {
    float v123 = v96 - (float)(v157.m_location.m_y + v97);
  }
  float v124 = v122 - fminf(m_x, 0.0);
  float v125 = v123 - fminf(v157.m_location.m_y, 0.0);
  v157.m_location.m_CGFloat x = m_x + v124;
  v157.m_location.float m_y = v157.m_location.m_y + v125;
  *(float *)&long long v156 = v111 + v124;
  *((float *)&v156 + 1) = v125 + *((float *)&v156 + 1);
LABEL_138:
  WTF::MonotonicTime::now((WTF::MonotonicTime *)shouldIgnoreMetaViewport);
  v158.i64[0] = 0;
  v158.i32[2] = 0;
  uint64_t v159 = v126;
  WebCore::LocalFrameView::setScrollVelocity();
  float v127 = roundf(v157.m_location.m_x);
  uint64_t v128 = 0x7FFFFFFFLL;
  uint64_t v129 = 0x80000000;
  if (v127 > -2147500000.0) {
    uint64_t v129 = (int)v127;
  }
  if (v127 < 2147500000.0) {
    uint64_t v128 = v129;
  }
  float v130 = roundf(v157.m_location.m_y);
  if (v130 >= 2147500000.0)
  {
    unint64_t v131 = 0x7FFFFFFF00000000;
  }
  else if (v130 <= -2147500000.0)
  {
    unint64_t v131 = 0x8000000000000000;
  }
  else
  {
    unint64_t v131 = (unint64_t)(int)v130 << 32;
  }
  IntPoint v151 = (IntPoint)(v131 | v128);
  v158.i64[0] = (uint64_t)v157.m_size;
  WebCore::ScrollView::setUnobscuredContentSize(v6, (const WebCore::FloatSize *)&v158);
  (*(void (**)(void, long long *))(**(void **)(v5 + 72) + 168))(*(void *)(v5 + 72), &v156);
  WebKit::WebPage::scalePage((WebKit::WebPage *)v5, v68, (const WebCore::IntPoint *)&v151);
  WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive();
  WebCore::LocalFrameView::frame(v6);
  uint64_t v132 = WebCore::ScrollView::contentsSize(v6);
  v133.i64[0] = *((void *)v6 + 12);
  v133.i64[1] = v132;
  v134.i64[0] = 0xFE000000FE000000;
  v134.i64[1] = 0xFE000000FE000000;
  int8x16_t v135 = (int8x16_t)vcgtq_s32(v133, v134);
  v136.i64[0] = 0xFE000000FE000000;
  v136.i64[1] = 0xFE000000FE000000;
  v137.i64[0] = 0x8000000080000000;
  v137.i64[1] = 0x8000000080000000;
  int8x16_t v158 = vorrq_s8((int8x16_t)(*(_OWORD *)&v135 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v136, v133), v137, (int8x16_t)vshlq_n_s32(v133, 6uLL)), v135));
  uint64_t v154 = WebCore::LocalFrameView::baseLayoutViewportSize(v6);
  v152[0] = v158.i64[1];
  WebCore::LocalFrameView::expandedLayoutViewportSize();
  uint64_t v154 = WebCore::LocalFrameView::layoutViewportRect(v6);
  uint64_t v155 = v138;
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v152, &v157);
  WebCore::LocalFrameView::minStableLayoutViewportOrigin(v6);
  WebCore::LocalFrameView::maxStableLayoutViewportOrigin(v6);
  WebCore::LocalFrameView::computeUpdatedLayoutViewportRect();
  WebCore::LocalFrameView::setLayoutViewportOverrideRect();
  WebCore::LocalFrameView::layoutOrVisualViewportChanged(v6);
  float v139 = ceilf(*(float *)(a2 + 64));
  if (v139 >= 2147500000.0)
  {
    uint64_t v140 = 0x7FFFFFFFLL;
  }
  else if (v139 <= -2147500000.0)
  {
    uint64_t v140 = 0x80000000;
  }
  else
  {
    uint64_t v140 = (int)v139;
  }
  float v141 = ceilf(*(float *)(a2 + 68));
  if (v141 >= 2147500000.0)
  {
    unint64_t v142 = 0x7FFFFFFF00000000;
  }
  else if (v141 <= -2147500000.0)
  {
    unint64_t v142 = 0x8000000000000000;
  }
  else
  {
    unint64_t v142 = (unint64_t)(int)v141 << 32;
  }
  IntSize v143 = (IntSize)(v142 | v140);
  WebCore::LocalFrameView::setCustomSizeForResizeEvent(v6, v143);
  WebKit::WebPage::setDeviceOrientation(v5, *(_DWORD *)(a2 + 96));
  WebCore::ScrollView::setScrollOffset(v6, &v151);
  WebCore::Page::isolatedUpdateRendering(*(WebCore::Page **)(v5 + 48));
  WebKit::WebPage::shrinkToFitContent((unsigned int *)v5, 0);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v5 + 72) + 264))(*(void *)(v5 + 72));
  *(void *)(v5 + 1544) = *(void *)(a2 + 112);
  *(unsigned char *)(v5 + 1552) = 1;
  if (v37)
  {
    if (*(_DWORD *)(v37 + 28) == 2)
    {
      if ((*(_WORD *)(v37 + 34) & 0x400) == 0) {
        uint64_t result = WebCore::Node::removedLastRef((WebCore::Node *)v37);
      }
    }
    else
    {
      *(_DWORD *)(v37 + 28) -= 2;
    }
  }
  *(unsigned char *)(v5 + 1485) = v148;
  return result;
}

void sub_198F3EBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (v35)
  {
    if (*(_DWORD *)(v35 + 28) == 2)
    {
      if ((*(_WORD *)(v35 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v35);
      }
    }
    else
    {
      *(_DWORD *)(v35 + 28) -= 2;
    }
  }
  *(unsigned char *)(v34 + 1485) = a15;
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::shrinkToFitContent(unsigned int *this, char a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 186))
  {
    uint64_t v2 = (uint64_t)this;
    if ((*(unsigned char *)(*(void *)(*((void *)this + 6) + 112) + 726) & 0x80) != 0 && !*((unsigned char *)this + 1184))
    {
      this = (unsigned int *)WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)this);
      if (this)
      {
        if (*(float *)(v2 + 1120) != 0.0 && !*(unsigned char *)(v2 + 1168))
        {
          uint64_t v4 = *(void *)(*(void *)(v2 + 88) + 24);
          if (v4)
          {
            uint64_t v5 = *(void *)(v4 + 8);
            if (v5)
            {
              if (!*(unsigned char *)(v5 + 144))
              {
                uint64_t v6 = (unsigned int *)(v5 + 8);
                atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
                unint64_t v7 = *(WebCore::ScrollView **)(v5 + 288);
                if (v7)
                {
                  int v8 = *((_DWORD *)v7 + 2);
                  *((_DWORD *)v7 + 2) = v8 + 1;
                  uint64_t v9 = *(void *)(v5 + 296);
                  if (!v9)
                  {
LABEL_37:
                    if (v8) {
                      *((_DWORD *)v7 + 2) = v8;
                    }
                    else {
                      (*(void (**)(WebCore::ScrollView *))(*(void *)v7 + 8))(v7);
                    }
                    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
                  }
                  *(_DWORD *)(v9 + 28) += 2;
                  WebCore::Document::updateLayout();
                  int v10 = WebCore::ScrollView::contentsSize(v7);
                  float v11 = *(float *)(v2 + 1080);
                  WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(v2 + 952));
                  double v13 = v12;
                  int v14 = WebCore::ViewportConfiguration::layoutWidth((WebCore::ViewportConfiguration *)(v2 + 952));
                  signed int v15 = llround(v11 / v13);
                  signed int v16 = v10 - v15;
                  if (v10 - v15 < 21 || (int v17 = v14, v14 > 1279) || v10 > 1920 || v10 <= v15)
                  {
LABEL_33:
                    if (*(_DWORD *)(v9 + 28) == 2)
                    {
                      if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
                        WebCore::Node::removedLastRef((WebCore::Node *)v9);
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v9 + 28) -= 2;
                    }
                    if (!v7) {
                      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
                    }
                    int v8 = *((_DWORD *)v7 + 2) - 1;
                    goto LABEL_37;
                  }
                  *(_DWORD *)(v9 + 28) += 2;
                  WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebCore::ViewportConfiguration *)(v2 + 952));
                  double v18 = *(double *)(v2 + 1144);
                  if ((WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)(v2 + 952)) & 1) == 0)
                  {
                    uint64_t v19 = 1160;
                    if (!*(unsigned char *)(v2 + 1168)) {
                      uint64_t v19 = 1152;
                    }
                    if (v18 < *(double *)(v2 + v19)) {
                      double v18 = *(double *)(v2 + v19);
                    }
                  }
                  if (v10 >= 1280) {
                    int v20 = 1280;
                  }
                  else {
                    int v20 = v10;
                  }
                  if (WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)(v2 + 952), (double)v20))
                  {
                    WebKit::WebPage::viewportConfigurationChanged(v2, 0);
                    WebCore::Document::updateLayout();
                    int v21 = WebCore::ScrollView::contentsSize(v7);
                    float v22 = *(float *)(v2 + 1080);
                    WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(v2 + 952));
                    if ((int)(v21 - llround(v22 / v23)) > v16)
                    {
                      if (WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)(v2 + 952), (double)(int)v18))
                      {
                        WebKit::WebPage::viewportConfigurationChanged(v2, 0);
                        WebCore::Document::updateLayout();
                      }
                      WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport((WebCore::ViewportConfiguration *)(v2 + 952));
                    }
                  }
                  BOOL v24 = qword_1EB358758;
                  if (os_log_type_enabled((os_log_t)qword_1EB358758, OS_LOG_TYPE_DEFAULT))
                  {
                    v26[0] = 67109888;
                    v26[1] = v10;
                    __int16 v27 = 1024;
                    int v28 = WebCore::ScrollView::contentsSize(v7);
                    __int16 v29 = 1024;
                    int v30 = v17;
                    __int16 v31 = 1024;
                    int v32 = WebCore::ViewportConfiguration::layoutWidth((WebCore::ViewportConfiguration *)(v2 + 952));
                    _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "Shrink-to-fit: content width %d => %d; layout width %d => %d",
                      (uint8_t *)v26,
                      0x1Au);
                  }
                  WebKit::WebPage::viewportConfigurationChanged(v2, a2);
                  int v25 = *(_DWORD *)(v9 + 28) - 2;
                  if (*(_DWORD *)(v9 + 28) == 2)
                  {
                    if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
                      WebCore::Node::removedLastRef((WebCore::Node *)v9);
                    }
                    goto LABEL_33;
                  }
                }
                else
                {
                  uint64_t v9 = *(void *)(v5 + 296);
                  if (!v9) {
                    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
                  }
                  int v25 = *(_DWORD *)(v9 + 28) + 2;
                }
                *(_DWORD *)(v9 + 28) = v25;
                goto LABEL_33;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_198F3F028(_Unwind_Exception *a1)
{
  if (*(_DWORD *)(v3 + 28) == 2)
  {
    if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 28) -= 2;
  }
  if (*(_DWORD *)(v3 + 28) == 2)
  {
    if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 28) -= 2;
  }
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::applicationWillResignActive(WebKit::WebPage *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v3 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists((WebCore::PlatformMediaSessionManager *)[v2 postNotificationName:*MEMORY[0x1E4FB6248] object:0]);
  if (v3) {
    WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive(v3);
  }
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    return MEMORY[0x1F41727C0]();
  }
  return result;
}

WebCore::Page *WebKit::WebPage::applicationDidEnterBackground(WebKit::WebPage *this, uint64_t a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v5 = *MEMORY[0x1E4FB6238];
  uint64_t v9 = @"isSuspendedUnderLock";
  v10[0] = [NSNumber numberWithBool:a2];
  objc_msgSend(v4, "postNotificationName:object:userInfo:", v5, 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
  *((unsigned char *)this + 1776) = a2;
  uint64_t v6 = (WebCore::PlatformMediaSessionManager *)WebKit::WebPage::freezeLayerTree((uint64_t)this, 2);
  unint64_t v7 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(v6);
  if (v7) {
    WebCore::PlatformMediaSessionManager::applicationDidEnterBackground(v7);
  }
  uint64_t result = (WebCore::Page *)*((void *)this + 6);
  if (result) {
    return (WebCore::Page *)WebCore::Page::applicationDidEnterBackground(result);
  }
  return result;
}

uint64_t WebKit::WebPage::applicationDidFinishSnapshottingAfterEnteringBackground(WebKit::WebPage *this)
{
  uint64_t v2 = 0;
  WebKit::WebPage::markLayersVolatile((uint64_t)this, &v2);
  uint64_t result = v2;
  uint64_t v2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198F3F2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebCore::Page *WebKit::WebPage::applicationWillEnterForeground(WebKit::WebPage *this, uint64_t a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 1776) = 0;
  WebKit::WebPage::cancelMarkLayersVolatile(this);
  WebKit::WebPage::unfreezeLayerTree((uint64_t)this, 2);
  uint64_t v4 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v5 = *MEMORY[0x1E4FB6240];
  int v8 = @"isSuspendedUnderLock";
  v9[0] = [NSNumber numberWithBool:a2];
  uint64_t v6 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists((WebCore::PlatformMediaSessionManager *)objc_msgSend(v4, "postNotificationName:object:userInfo:", v5, 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1)));
  if (v6) {
    WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(v6);
  }
  uint64_t result = (WebCore::Page *)*((void *)this + 6);
  if (result) {
    return (WebCore::Page *)WebCore::Page::applicationWillEnterForeground(result);
  }
  return result;
}

WebCore::PlatformMediaSessionManager *WebKit::WebPage::applicationDidEnterBackgroundForMedia(WebKit::WebPage *this)
{
  uint64_t result = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(this);
  if (result)
  {
    return (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::applicationDidEnterBackground(result);
  }
  return result;
}

WebCore::PlatformMediaSessionManager *WebKit::WebPage::applicationWillEnterForegroundForMedia(WebKit::WebPage *this)
{
  uint64_t result = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(this);
  if (result)
  {
    return (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(result);
  }
  return result;
}

uint64_t WebCore::DeferrableOneShotTimer::restart(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  if ((v1 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v1 & 0xFFFFFFFFFFFFLL) + 8) == 0.0) {
    return WebCore::TimerBase::start();
  }
  *(void *)(this + 32) = v1 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
  return this;
}

unsigned int *WebKit::WebPage::updateLayoutViewportHeightExpansionTimerFired(unsigned int *this)
{
  if ((*((unsigned char *)this + 2257) & 2) != 0) {
    return this;
  }
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(*((void *)this + 11) + 24);
  if (!v2) {
    return this;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3 || *(unsigned char *)(v3 + 144)) {
    return this;
  }
  uint64_t v4 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  uint64_t v5 = *(void *)(v3 + 296);
  if (!v5) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  }
  *(_DWORD *)(v5 + 28) += 2;
  uint64_t v6 = *(void *)(v3 + 288);
  if (!v6) {
    goto LABEL_114;
  }
  ++*(_DWORD *)(v6 + 8);
  v7.i64[0] = WebCore::LocalFrameView::viewportConstrainedObjectsRect((WebCore::LocalFrameView *)v6);
  v7.i64[1] = v8;
  float32x4_t v72 = vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)vdupq_n_s32(0x3C800000u));
  if ((WebCore::LocalFrameView::hasViewportConstrainedObjects((WebCore::LocalFrameView *)v6) & 1) == 0) {
    goto LABEL_109;
  }
  float v87 = 0;
  uint64_t v9 = *(uint64_t **)(v6 + 1312);
  *(void *)buf = v9;
  float v75 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::begin((void **)v9);
  float32x2_t v76 = v10;
  float v11 = (void *)*v9;
  if (*v9)
  {
    uint64_t v13 = *((unsigned int *)v11 - 1);
    double v12 = &v11[v13];
    float64x2_t v77 = v12;
    int64x2_t v78 = v12;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(buf);
  }
  else
  {
    float64x2_t v77 = 0;
    int64x2_t v78 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(buf);
    double v12 = 0;
    uint64_t v13 = 0;
  }
  char v82 = v9;
  char v83 = v12;
  uint64_t v84 = v12;
  uint64_t v85 = v12;
  float v86 = &v11[v13];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v82);
  int v14 = v75;
  if (v75 == v83) {
    goto LABEL_109;
  }
  do
  {
    uint64_t v15 = *(void *)(*v14 + 8);
    if (*(unsigned char *)(v15 + 45)) {
      goto LABEL_36;
    }
    uint64_t v16 = *(void *)(*(void *)(v15 + 24) + 8);
    if (!v16) {
      goto LABEL_36;
    }
    if ((*(_WORD *)(v16 + 32) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198F3FCA4);
    }
    *(_DWORD *)(v16 + 28) += 2;
    v81[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v15, 1, 0);
    v81[1] = v17;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v80, (const WebCore::IntRect *)v81);
    float32x4_t v88 = v72;
    WebCore::FloatRect::intersect((WebCore::FloatRect *)&v88, (const WebCore::FloatRect *)v80);
    if (v72.f32[3] * 0.9 >= v88.f32[3])
    {
      if (*(_DWORD *)(v16 + 28) == 2)
      {
        if ((*(_WORD *)(v16 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
        }
      }
      else
      {
        *(_DWORD *)(v16 + 28) -= 2;
      }
      goto LABEL_36;
    }
    uint64_t v79 = v16;
    double v18 = v87;
    if (v87
      || (WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::expand((uint64_t *)&v87),
          (double v18 = v87) != 0))
    {
      int v19 = *((_DWORD *)v18 - 2);
    }
    else
    {
      int v19 = 0;
    }
    int v20 = 0;
    uint64_t v21 = v79;
    unint64_t v22 = (~(v79 << 32) + v79) ^ ((unint64_t)(~(v79 << 32) + v79) >> 22);
    unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    unsigned int v25 = (v24 >> 31) ^ v24;
    for (int i = 1; ; ++i)
    {
      unsigned int v27 = v25 & v19;
      int v28 = &v18[v27];
      uint64_t v29 = *v28;
      if (*v28 == -1)
      {
        int v20 = &v18[v27];
        goto LABEL_24;
      }
      if (!v29) {
        break;
      }
      if (v29 == v79) {
        goto LABEL_35;
      }
LABEL_24:
      unsigned int v25 = i + v27;
    }
    if (v20)
    {
      *int v20 = 0;
      --*((_DWORD *)v87 - 4);
      uint64_t v21 = v79;
      int v28 = v20;
    }
    uint64_t v79 = 0;
    v80[0] = 0;
    uint64_t v30 = *v28;
    *int v28 = v21;
    v88.i64[0] = v30;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v88);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v80);
    __int16 v31 = v87;
    if (v87) {
      int v32 = *((_DWORD *)v87 - 3) + 1;
    }
    else {
      int v32 = 1;
    }
    *((_DWORD *)v87 - 3) = v32;
    uint64_t v33 = (*((_DWORD *)v31 - 4) + v32);
    unint64_t v34 = *((unsigned int *)v31 - 1);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33) {
LABEL_34:
      }
        WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::expand((uint64_t *)&v87);
    }
    else if (3 * v34 <= 4 * v33)
    {
      goto LABEL_34;
    }
LABEL_35:
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v79);
    int v14 = v75;
LABEL_36:
    uint64_t v35 = v14 + 1;
    float v75 = v14 + 1;
    if (v14 + 1 != v76)
    {
      while ((unint64_t)(*v35 + 1) <= 1)
      {
        if (++v35 == v76)
        {
          uint64_t v35 = v76;
          break;
        }
      }
      float v75 = v35;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(buf);
    ++*(_DWORD *)(*(void *)buf + 8);
    int v14 = v75;
  }
  while (v75 != v83);
  uint64_t v37 = v87;
  if (!v87) {
    goto LABEL_109;
  }
  if (!*((_DWORD *)v87 - 3))
  {
LABEL_108:
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(v37, v36);
    goto LABEL_109;
  }
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)&v82, (const FloatRect *)&v72);
  WebCore::HitTestResult::HitTestResult((WebCore::HitTestResult *)buf, (const WebCore::LayoutRect *)&v82);
  LODWORD(v82) = 32769;
  BYTE4(v82) = 1;
  if ((WebCore::Document::hitTest() & 1) == 0
    || (uint64_t v38 = WebCore::HitTestResult::listBasedTestResult((WebCore::HitTestResult *)buf),
        v80[0] = 0,
        (float v39 = *(uint64_t **)(v38 + 8)) == 0))
  {
    MEMORY[0x199731400](buf);
    goto LABEL_108;
  }
  while (1)
  {
    uint64_t v40 = *v39;
    *(_DWORD *)(v40 + 28) = *(_DWORD *)(*v39 + 28) + 2;
    uint64_t v73 = v40;
    if ((*(unsigned char *)(v40 + 32) & 8) != 0)
    {
      uint64_t v73 = 0;
      char v82 = 0;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v82);
    }
    else
    {
      uint64_t v41 = WebCore::Node::parentElementInComposedTree((WebCore::Node *)*v39);
      uint64_t v40 = v41;
      if (v41) {
        *(_DWORD *)(v41 + 28) += 2;
      }
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v73);
    char v82 = 0;
    char v83 = 0;
    if (v40) {
      break;
    }
LABEL_73:
    if (!HIDWORD(v83)) {
      goto LABEL_98;
    }
    float v49 = v82;
    float v50 = &v82[HIDWORD(v83)];
    do
    {
      int v51 = v80[0];
      if (v80[0]
        || (WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::expand((uint64_t *)v80),
            (int v51 = v80[0]) != 0))
      {
        int v52 = *((_DWORD *)v51 - 2);
      }
      else
      {
        int v52 = 0;
      }
      uint64_t v53 = 0;
      uint64_t v54 = *v49;
      unint64_t v55 = ~(*v49 << 32) + *v49;
      unint64_t v56 = (v55 ^ (v55 >> 22)) + ~((v55 ^ (v55 >> 22)) << 13);
      unint64_t v57 = (9 * (v56 ^ (v56 >> 8))) ^ ((9 * (v56 ^ (v56 >> 8))) >> 15);
      unsigned int v58 = ((v57 + ~(v57 << 27)) >> 31) ^ (v57 + ~(v57 << 27));
      for (int j = 1; ; ++j)
      {
        unsigned int v60 = v58 & v52;
        int v61 = &v51[v60];
        uint64_t v62 = *v61;
        if (*v61 == -1)
        {
          uint64_t v53 = &v51[v60];
          goto LABEL_84;
        }
        if (!v62) {
          break;
        }
        if (v62 == v54) {
          goto LABEL_93;
        }
LABEL_84:
        unsigned int v58 = j + v60;
      }
      if (v53)
      {
        *uint64_t v53 = 0;
        --*((_DWORD *)v80[0] - 4);
        uint64_t v54 = *v49;
        int v61 = v53;
      }
      *(_DWORD *)(v54 + 28) += 2;
      v81[0] = 0;
      uint64_t v63 = *v61;
      uint64_t *v61 = v54;
      v88.i64[0] = v63;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v88);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v81);
      BOOL v64 = v80[0];
      if (v80[0]) {
        int v65 = *((_DWORD *)v80[0] - 3) + 1;
      }
      else {
        int v65 = 1;
      }
      *((_DWORD *)v80[0] - 3) = v65;
      uint64_t v66 = (*((_DWORD *)v64 - 4) + v65);
      unint64_t v67 = *((unsigned int *)v64 - 1);
      if (v67 > 0x400)
      {
        if (v67 <= 2 * v66) {
LABEL_92:
        }
          WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::expand((uint64_t *)v80);
      }
      else if (3 * v67 <= 4 * v66)
      {
        goto LABEL_92;
      }
LABEL_93:
      ++v49;
    }
    while (v49 != v50);
LABEL_98:
    WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v42);
    if (v40)
    {
      if (*(_DWORD *)(v40 + 28) == 2)
      {
        if ((*(_WORD *)(v40 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v40);
        }
      }
      else
      {
        *(_DWORD *)(v40 + 28) -= 2;
      }
    }
    float v39 = (uint64_t *)v39[2];
    if (!v39)
    {
      int v71 = 0;
      goto LABEL_123;
    }
  }
  *(_DWORD *)(v40 + 28) += 2;
  uint64_t v43 = v40;
  while (1)
  {
    uint64_t v44 = v43;
    if (WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>((uint64_t)v87, v43))break; {
    if (WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>((uint64_t)v80[0], v43))
    }
    {
      if (*(_DWORD *)(v43 + 28) == 2)
      {
        if ((*(_WORD *)(v43 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v43);
        }
      }
      else
      {
        *(_DWORD *)(v43 + 28) -= 2;
      }
      goto LABEL_73;
    }
    uint64_t v46 = HIDWORD(v83);
    if (HIDWORD(v83) == v83)
    {
      WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>((uint64_t)&v82, v43);
    }
    else
    {
      uint64_t v47 = (uint64_t)v82;
      *(_DWORD *)(v43 + 28) += 2;
      *(void *)(v47 + 8 * v46) = v43;
      HIDWORD(v83) = v46 + 1;
    }
    uint64_t v48 = WebCore::Node::parentElementInComposedTree((WebCore::Node *)v43);
    uint64_t v43 = v48;
    if (v48) {
      *(_DWORD *)(v48 + 28) += 2;
    }
    if (*(_DWORD *)(v44 + 28) == 2)
    {
      if ((*(_WORD *)(v44 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v44);
      }
    }
    else
    {
      *(_DWORD *)(v44 + 28) -= 2;
    }
    if (!v43) {
      goto LABEL_73;
    }
  }
  if (*(_DWORD *)(v43 + 28) == 2)
  {
    if ((*(_WORD *)(v43 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v43);
    }
  }
  else
  {
    *(_DWORD *)(v43 + 28) -= 2;
  }
  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v45);
  if (*(_DWORD *)(v40 + 28) == 2)
  {
    if ((*(_WORD *)(v40 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v40);
    }
  }
  else
  {
    *(_DWORD *)(v40 + 28) -= 2;
  }
  int v71 = 1;
LABEL_123:
  if (v80[0]) {
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(v80[0], v68);
  }
  MEMORY[0x199731400](buf);
  if (v87)
  {
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(v87, v69);
    if (v71)
    {
LABEL_129:
      float v70 = qword_1EB358758;
      if (os_log_type_enabled((os_log_t)qword_1EB358758, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1985F2000, v70, OS_LOG_TYPE_DEFAULT, "Shrinking viewport down to normal height (found large fixed-position container)", buf, 2u);
      }
      WebKit::WebPage::addReasonsToDisallowLayoutViewportHeightExpansion((IPC::Encoder *)v1, 2);
      goto LABEL_111;
    }
  }
  else if (v71)
  {
    goto LABEL_129;
  }
LABEL_109:
  if (*((unsigned char *)v1 + 2328))
  {
    *((unsigned char *)v1 + 2328) = 0;
    WebCore::DeferrableOneShotTimer::restart((uint64_t)(v1 + 566));
  }
LABEL_111:
  if (*(_DWORD *)(v6 + 8) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  else {
    --*(_DWORD *)(v6 + 8);
  }
LABEL_114:
  if (*(_DWORD *)(v5 + 28) == 2)
  {
    if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
  }
  else
  {
    *(_DWORD *)(v5 + 28) -= 2;
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
}

void sub_198F3FCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  if (a31) {
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(a31, v36);
  }
  MEMORY[0x199731400](&a13);
  uint64_t v38 = *(uint64_t **)(v34 - 136);
  if (v38) {
    WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(v38, v37);
  }
  if (v33[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v33 + 8))(v33);
  }
  else {
    --v33[2];
  }
  if (*(_DWORD *)(v32 + 28) == 2)
  {
    if ((*(_WORD *)(v32 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v32);
    }
  }
  else
  {
    *(_DWORD *)(v32 + 28) -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v31);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPage::willStartUserTriggeredZooming(WebCore::Page **this)
{
  uint64_t v2 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(this[6]);
  uint64_t v3 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::webViewKey((uint64_t *)&v8, v2);
  WebCore::DiagnosticLoggingKeys::userZoomActionKey((uint64_t *)&v7, v3);
  (**(void (***)(WebCore::DiagnosticLoggingKeys *, WTF::StringImpl **, WTF::StringImpl **, void))v2)(v2, &v8, &v7, 0);
  uint64_t v5 = v7;
  int32x4_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *((unsigned char *)this + 1283) = 1;
  return result;
}

void sub_198F3FF34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::dispatchAsynchronousTouchEvents(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)a2 + 12);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = 144 * v2;
    uint64_t v5 = (uint64_t *)(**(void **)a2 + 128);
    do
    {
      uint64_t result = (uint64_t)WebKit::WebPage::dispatchTouchEvent(v3, *(v5 - 16), *(v5 - 15), (uint64_t)(v5 - 14), (uint64_t)&v14);
      if (*v5)
      {
        char v6 = v16;
        if (v16)
        {
          if (v16 != 1)
          {
            uint64_t v8 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(v8, v9, v10);
          }
          BOOL v7 = 0;
          long long v11 = v14;
          uint64_t v12 = v15;
          char v6 = 1;
        }
        else
        {
          BOOL v7 = (_BYTE)v14 != 0;
          LOBYTE(v11) = 0;
        }
        char v13 = v6;
        uint64_t result = WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(v5, v7, &v11);
      }
      v5 += 18;
      v4 -= 144;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  long long v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v3 + 16))(v3, a2, v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void sub_198F400DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::cancelAsynchronousTouchEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)a2 + 12);
  if (v2)
  {
    uint64_t v3 = 144 * v2;
    long long v4 = (uint64_t *)(**(void **)a2 + 128);
    do
    {
      if (*v4)
      {
        LOBYTE(v6) = 0;
        char v7 = 0;
        uint64_t result = WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)>::operator()(v4, 1, &v6);
      }
      v4 += 18;
      v3 -= 144;
    }
    while (v3);
  }
  return result;
}

WTF *WebKit::WebPage::computePagesForPrintingiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  long long v11 = *(_OWORD *)(a4 + 12);
  WebKit::WebPage::computePagesForPrintingImpl(a1, a2, a3, (float *)a4, (uint64_t)&v13, (double *)&v12, &v11);
  long long v6 = qword_1EB3582D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3582D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v16 = HIDWORD(v14);
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "Computing pages for printing. Page rects size_t size = %zu", buf, 0xCu);
  }
  uint64_t v7 = HIDWORD(v14);
  uint64_t v8 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v7);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t result = v13;
  if (v13)
  {
    char v13 = 0;
    LODWORD(v14) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

void sub_198F402B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a13) {
    WTF::fastFree(a13, v16);
  }
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPage::drawToImage(WebCore::PrintContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  long long v38 = *(_OWORD *)(a4 + 12);
  WebKit::WebPage::computePagesForPrintingImpl((uint64_t)a1, a2, a3, (float *)a4, (uint64_t)&v40, (double *)&v39, &v38);
  unint64_t v7 = HIDWORD(v41);
  uint64_t v8 = qword_1EB3582D0;
  if (os_log_type_enabled((os_log_t)qword_1EB3582D0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "Drawing to image. Page rects size_t size = %zu", (uint8_t *)&buf, 0xCu);
  }
  if (!a1[84])
  {
    LOBYTE(buf) = 0;
    char v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    double v18 = (void *)WTF::fastMalloc((WTF *)0x10);
    *double v18 = &unk_1EE9DFCD0;
    *(void *)&long long buf = v18;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
LABEL_16:
    uint64_t v19 = buf;
    *(void *)&long long buf = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    goto LABEL_42;
  }
  if (!HIDWORD(v41))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  int v10 = *((_DWORD *)v40 + 2);
  int v9 = *((_DWORD *)v40 + 3);
  if (v10 <= v9) {
    int v11 = *((_DWORD *)v40 + 3);
  }
  else {
    int v11 = *((_DWORD *)v40 + 2);
  }
  float v12 = 500.0 / (float)v11;
  if (v12 < 1.0)
  {
    int v10 = vcvtms_s32_f32(v12 * (float)v10);
    int v9 = vcvtms_s32_f32(v12 * (float)v9);
  }
  uint64_t v32 = 0;
  unint64_t v13 = __muloti4(v9, 0, v7, 0, &v32);
  if ((v14 << 63 >> 63) ^ v14 | v32) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = (v13 ^ (int)v13 | (v14 ^ ((uint64_t)(int)v13 >> 63)) & 1) == 0;
  }
  if (!v15)
  {
    LOBYTE(buf) = 0;
    char v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v16 = &unk_1EE9DFCD0;
    *(void *)&long long buf = v16;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
    goto LABEL_16;
  }
  unint64_t v36 = (WebCore::GraphicsContext *)__PAIR64__(v13, v10);
  LOBYTE(v34) = 0;
  char v35 = 0;
  MEMORY[0x199738D60](&buf, &v36, &v34, 0);
  WebCore::ShareableBitmap::create();
  if (v43)
  {
    int v20 = (const void *)*((void *)&buf + 1);
    *((void *)&buf + 1) = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  if (v35)
  {
    CFTypeRef v21 = v34;
    CFTypeRef v34 = 0;
    if (v21) {
      CFRelease(v21);
    }
  }
  if (!v37)
  {
    LOBYTE(buf) = 0;
    char v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v26 = &unk_1EE9DFCD0;
    *(void *)&long long buf = v26;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
    unsigned int v27 = (WebCore::GraphicsContext *)buf;
    *(void *)&long long buf = 0;
    if (!v27) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  WebCore::ShareableBitmap::createGraphicsContext((uint64_t *)&v36, v37);
  if (v36)
  {
    if (v7)
    {
      unint64_t v22 = 0;
      while (1)
      {
        if (v22 >= *((unsigned int *)a1[84] + 9)) {
          goto LABEL_31;
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)v36 + 96))(v36, 1);
        uint64_t v23 = (int)v22 * (uint64_t)v9;
        if (v23 != (int)v23) {
          break;
        }
        (*(void (**)(WebCore::GraphicsContext *, double, float))(*(void *)v36 + 640))(v36, 0.0, (float)(int)v23);
        WebCore::PrintContext::spoolPage(a1[84], v36, (float)v10);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)v36 + 104))(v36, 1);
        if (v7 == ++v22) {
          goto LABEL_31;
        }
      }
      __break(0xC471u);
LABEL_47:
      JUMPOUT(0x198F408A0);
    }
LABEL_31:
    WebCore::ShareableBitmap::createHandle();
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    unint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unint64_t v24 = &unk_1EE9DFCD0;
    uint64_t v33 = v24;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&v33);
    uint64_t v25 = (uint64_t)v33;
    uint64_t v33 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
  }
  else
  {
    LOBYTE(buf) = 0;
    char v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&buf);
    int v28 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v28 = &unk_1EE9DFCD0;
    *(void *)&long long buf = v28;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&buf);
    uint64_t v29 = buf;
    *(void *)&long long buf = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
  unsigned int v27 = v36;
  unint64_t v36 = 0;
  if (v27) {
LABEL_39:
  }
    (*(void (**)(WebCore::GraphicsContext *))(*(void *)v27 + 8))(v27);
LABEL_40:
  uint64_t v30 = v37;
  uint64_t v37 = 0;
  if (v30) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v30, v17);
  }
LABEL_42:
  uint64_t result = v40;
  if (v40)
  {
    uint64_t v40 = 0;
    LODWORD(v41) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

void sub_198F408AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,CFTypeRef cf,char a23)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a14) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a14, a2);
  }
  if (a19) {
    WTF::fastFree(a19, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPage::drawToPDFiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  if (*(unsigned char *)(a4 + 28))
  {
    *(void *)&long long v33 = *(void *)(a4 + 4);
    WebCore::IntSize::IntSize((WebCore::IntSize *)&v35, (const WebCore::FloatSize *)&v33);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 160);
    if (v8) {
      BOOL v9 = *(unsigned char *)(v8 + 144) == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      uint64_t v10 = (uint64_t)v35;
      uint64_t v11 = *(void *)(v8 + 288);
      long long v33 = *(_OWORD *)(v11 + 1088);
      int v34 = *(_DWORD *)(v11 + 1104);
      v31[1] = 0;
      int8x8_t v12 = (int8x8_t)vcgt_s32((int32x2_t)v35, (int32x2_t)0xFE000000FE000000);
      v31[2] = (__CFData *)vorr_s8((int8x8_t)(*(void *)&v12 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v35), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v35, 6uLL)), v12));
      char v32 = 1;
      WebCore::LocalFrameView::setLayoutViewportOverrideRect();
      WebKit::WebPage::pdfSnapshotAtSize((unsigned int *)a1, 0, v10, (int32x2_t)v35, 0, v31);
      long long v29 = v33;
      int v30 = v34;
      WebCore::LocalFrameView::setLayoutViewportOverrideRect();
      uint64_t v26 = v31[0];
      WebCore::SharedBuffer::create<__CFData const*>(&v26, v13, (uint64_t *)&v27);
      uint64_t v14 = v27;
      unsigned int v27 = 0;
      int v28 = v14;
      WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>::operator()(a6);
      uint64_t v16 = (unsigned int *)v28;
      int v28 = 0;
      if (v16) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v16, v15);
      }
      uint64_t v17 = (unsigned int *)v27;
      unsigned int v27 = 0;
      if (v17) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v15);
      }
      double v18 = v31[0];
      v31[0] = 0;
      if (v18) {
LABEL_20:
      }
        CFRelease(v18);
    }
  }
  else
  {
    *(void *)&long long v33 = 0;
    WebKit::WebPage::drawPagesToPDFImpl(a1, a2, a3, a4, 0, a5, (CFMutableDataRef *)&v33);
    int v28 = (WebCore::FragmentedSharedBuffer *)v33;
    WebCore::SharedBuffer::create<__CFData *>(&v28, v19, (uint64_t *)v31);
    int v20 = v31[0];
    v31[0] = 0;
    char v35 = (unsigned int *)v20;
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>::operator()(a6);
    unint64_t v22 = v35;
    char v35 = 0;
    if (v22) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v21);
    }
    uint64_t v23 = (unsigned int *)v31[0];
    v31[0] = 0;
    if (v23) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v21);
    }
    unint64_t v24 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unint64_t v24 = &unk_1EE9DFCD0;
    char v35 = v24;
    WebKit::WebPage::endPrinting((WebKit::WebPage *)a1, (uint64_t *)&v35);
    int32x2_t v25 = (int32x2_t)v35;
    char v35 = 0;
    if (v25) {
      (*(void (**)(int32x2_t))(**(void **)&v25 + 8))(v25);
    }
    double v18 = (__CFData *)v33;
    *(void *)&long long v33 = 0;
    if (v18) {
      goto LABEL_20;
    }
  }
}

void sub_198F40CD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, unsigned int *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf)
{
  if (a12) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a12, a2);
  }
  if (a11) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::SharedBuffer::create<__CFData const*>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, const __CFData *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::FragmentedSharedBuffer::create((uint64_t *)&v7, *a1, a2);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x199730FA0](v4, &v7);
  *a3 = v4;
  uint64_t result = v7;
  unint64_t v7 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

void sub_198F40DF0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF::fastFree(v10, a2);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  }
  _Unwind_Resume(a1);
}

unsigned int *WebCore::SharedBuffer::create<__CFData *>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, const __CFData *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::FragmentedSharedBuffer::create((uint64_t *)&v7, *a1, a2);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x199730FA0](v4, &v7);
  *a3 = v4;
  uint64_t result = v7;
  unint64_t v7 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

void sub_198F40E78(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF::fastFree(v10, a2);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::hoverSupportedByAnyAvailablePointingDevice(WebKit::WebPage *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(unsigned __int8 *)(WebKit::WebProcess::singleton(void)::process + 259);
}

uint64_t WebKit::WebPage::pointerCharacteristicsOfAllAvailablePointingDevices(WebKit::WebPage *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 259)
    || *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 260))
  {
    return 3;
  }
  else
  {
    return 1;
  }
}

uint64_t WebKit::WebPage::hardwareKeyboardAvailabilityChanged(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 1484) = a2 & 1;
  GSEventSetHardwareKeyboardAttachedWithCountryCodeAndType();
  uint64_t result = (uint64_t)WebCore::Page::checkedFocusController(&v9, *(WebCore::Page **)(a1 + 48));
  uint64_t v4 = (_DWORD *)v9;
  uint64_t v5 = *(void *)(v9 + 16);
  if (!v5 || (uint64_t v6 = *(void *)(v5 + 8)) == 0 || *(unsigned char *)(v6 + 144))
  {
    uint64_t v9 = 0;
    if (*v4)
    {
      --*v4;
      return result;
    }
    goto LABEL_11;
  }
  unint64_t v7 = (unsigned int *)(v6 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  uint64_t v8 = (_DWORD *)v9;
  uint64_t v9 = 0;
  if (v8)
  {
    if (!*v8)
    {
LABEL_11:
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*v8;
  }
  WebCore::EventHandler::capsLockStateMayHaveChanged(*(WebCore::EventHandler **)(v6 + 624));
  return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
}

void sub_198F4104C(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::UpdateStringForFind>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2119;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int8x8_t v12 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  int8x8_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F41154(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPage::updateSelectionWithDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::Page::checkedFocusController((uint64_t *)v30, *(WebCore::Page **)(a1 + 48));
  uint64_t v7 = WebCore::FocusController::focusedOrMainFrame(v30[0]);
  uint64_t v8 = v7;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  }
  uint64_t v9 = v30[0];
  v30[0] = 0;
  if (v9)
  {
    if (!*(_DWORD *)v9)
    {
      __break(0xC471u);
      goto LABEL_29;
    }
    --*(_DWORD *)v9;
  }
  if (!v7) {
    return (unsigned int *)WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  uint64_t v10 = WebCore::FrameSelection::rootEditableElementOrDocumentElement(*(WebCore::FrameSelection **)(*(void *)(v7 + 296)
                                                                                                  + 3096));
  uint64_t v11 = v10;
  if (v10) {
    *(_DWORD *)(v10 + 28) += 2;
  }
  WebCore::VisibleSelection::toNormalizedRange((uint64_t *)v30, (WebCore::VisibleSelection *)(*(void *)(*(void *)(v8 + 296) + 3096) + 56));
  if (v11 && v31)
  {
    WebCore::makeRangeSelectingNodeContents(v28, (WebCore *)v11, v12);
    if (v31)
    {
      WebCore::SimpleRange::SimpleRange();
      uint64_t v13 = WebCore::characterCount();
      uint64_t v14 = WebCore::characterCount();
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v21);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v19);
      if (__OFADD__(v13, a2) || __OFADD__(v14, a3) || v13 < 0 || v14 < 0)
      {
        WTF::CompletionHandler<void ()(void)>::operator()(a4);
      }
      else
      {
        WebCore::makeRangeSelectingNodeContents(&v19, (WebCore *)v11, v15);
        WebCore::resolveCharacterRange();
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v21);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v19);
        uint64_t v16 = v24;
        *(_DWORD *)(v24 + 28) += 2;
        uint64_t v19 = v16;
        int v20 = v25;
        uint64_t v17 = v26;
        *(_DWORD *)(v26 + 28) += 2;
        uint64_t v21 = v17;
        int v22 = v27;
        char v23 = 1;
        WebCore::FrameSelection::setSelectedRange();
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19);
        WTF::CompletionHandler<void ()(void)>::operator()(a4);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v26);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v24);
      }
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v29);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v28);
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30);
      goto LABEL_22;
    }
    __break(1u);
LABEL_29:
    JUMPOUT(0x198F4140CLL);
  }
  WTF::CompletionHandler<void ()(void)>::operator()(a4);
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v30);
  if (v11)
  {
LABEL_22:
    if (*(_DWORD *)(v11 + 28) == 2)
    {
      if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 28) -= 2;
    }
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
}

unsigned int *WebKit::WebPage::requestDocumentEditingContext(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v237 = *MEMORY[0x1E4F143B8];
  if ((*a2 & 3) != 0)
  {
    WebCore::Page::checkedFocusController((uint64_t *)&v219, *(WebCore::Page **)(a1 + 48));
    uint64_t v6 = WebCore::FocusController::focusedOrMainFrame(v219);
    uint64_t v7 = v6;
    if (v6) {
      atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
    }
    uint64_t v8 = v219;
    long long v219 = 0;
    if (v8)
    {
      if (!*(_DWORD *)v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198F42E3CLL);
      }
      --*(_DWORD *)v8;
    }
    if (v6)
    {
      uint64_t v9 = *(void *)(v6 + 296);
      if (v9) {
        *(_DWORD *)(v9 + 28) += 2;
      }
      WebCore::Document::updateLayout();
      if (v9)
      {
        if (*(_DWORD *)(v9 + 28) == 2)
        {
          if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
        }
        else
        {
          *(_DWORD *)(v9 + 28) -= 2;
        }
      }
      uint64_t v10 = *(void *)(*(void *)(v7 + 296) + 3096);
      uint64_t v11 = *(void *)(v10 + 56);
      if (v11) {
        *(_DWORD *)(v11 + 28) += 2;
      }
      uint64_t v199 = v11;
      int v200 = *(_DWORD *)(v10 + 64);
      char v201 = *(unsigned char *)(v10 + 68);
      uint64_t v12 = *(void *)(v10 + 72);
      if (v12) {
        *(_DWORD *)(v12 + 28) += 2;
      }
      uint64_t v202 = v12;
      int v203 = *(_DWORD *)(v10 + 80);
      char v204 = *(unsigned char *)(v10 + 84);
      uint64_t v13 = *(void *)(v10 + 88);
      if (v13) {
        *(_DWORD *)(v13 + 28) += 2;
      }
      uint64_t v205 = v13;
      int v206 = *(_DWORD *)(v10 + 96);
      char v207 = *(unsigned char *)(v10 + 100);
      uint64_t v14 = *(void *)(v10 + 104);
      if (v14) {
        *(_DWORD *)(v14 + 28) += 2;
      }
      uint64_t v208 = v14;
      int v209 = *(_DWORD *)(v10 + 112);
      char v210 = *(unsigned char *)(v10 + 116);
      uint64_t v15 = *(void *)(v10 + 120);
      if (v15) {
        *(_DWORD *)(v15 + 28) += 2;
      }
      uint64_t v211 = v15;
      int v212 = *(_DWORD *)(v10 + 128);
      char v213 = *(unsigned char *)(v10 + 132);
      uint64_t v16 = *(void *)(v10 + 136);
      if (v16) {
        *(_DWORD *)(v16 + 28) += 2;
      }
      uint64_t v214 = v16;
      int v215 = *(_DWORD *)(v10 + 144);
      char v216 = *(unsigned char *)(v10 + 148);
      __int16 v217 = *(_WORD *)(v10 + 152);
      char v218 = *(unsigned char *)(v10 + 154);
      char v191 = 0;
      int v192 = 0;
      v193 &= 0xF0u;
      char v194 = 1;
      uint64_t v195 = 0;
      int v196 = 0;
      v197 &= 0xF0u;
      char v198 = 1;
      WebCore::VisiblePosition::VisiblePosition();
      WebCore::VisiblePosition::VisiblePosition();
      char v17 = *a2;
      long long v18 = *((_OWORD *)a2 + 5);
      long long v233 = *((_OWORD *)a2 + 4);
      long long v234 = v18;
      long long v19 = *((_OWORD *)a2 + 7);
      long long v235 = *((_OWORD *)a2 + 6);
      long long v236 = v19;
      long long v20 = *((_OWORD *)a2 + 3);
      long long v231 = *((_OWORD *)a2 + 2);
      long long v232 = v20;
      char v161 = v17;
      if ((_BYTE)v19)
      {
        WebKit::WebPage::elementForContext(a1, (const WebCore::ElementContext *)&v231, &v170);
        uint64_t v21 = v170;
        if (!v170)
        {
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v219);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v224);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v225);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v226);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v227);
          long long v230 = 0u;
          long long v229 = 0u;
          long long v228 = 0u;
          WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(a3);
LABEL_164:
          float32x2_t v76 = (WTF *)v230;
          if ((void)v230)
          {
            *(void *)&long long v230 = 0;
            DWORD2(v230) = 0;
            WTF::fastFree(v76, v42);
          }
          float64x2_t v77 = (WTF *)v229;
          if ((void)v229)
          {
            *(void *)&long long v229 = 0;
            DWORD2(v229) = 0;
            WTF::fastFree(v77, v42);
          }
          MEMORY[0x199732DE0](v227);
          MEMORY[0x199732DE0](v226);
          MEMORY[0x199732DE0](v225);
          MEMORY[0x199732DE0](v224);
          MEMORY[0x199732DE0](&v219);
LABEL_169:
          int64x2_t v78 = v187;
          char v187 = 0;
          if (v78)
          {
            if (*((_DWORD *)v78 + 7) == 2)
            {
              if ((*((_WORD *)v78 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v78);
              }
            }
            else
            {
              *((_DWORD *)v78 + 7) -= 2;
            }
          }
          uint64_t v79 = v183;
          uint64_t v183 = 0;
          if (v79)
          {
            if (*((_DWORD *)v79 + 7) == 2)
            {
              if ((*((_WORD *)v79 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v79);
              }
            }
            else
            {
              *((_DWORD *)v79 + 7) -= 2;
            }
          }
          float32x2_t v80 = v195;
          uint64_t v195 = 0;
          if (v80)
          {
            if (*((_DWORD *)v80 + 7) == 2)
            {
              if ((*((_WORD *)v80 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v80);
              }
            }
            else
            {
              *((_DWORD *)v80 + 7) -= 2;
            }
          }
          float32x2_t v81 = v191;
          char v191 = 0;
          if (v81)
          {
            if (*((_DWORD *)v81 + 7) == 2)
            {
              if ((*((_WORD *)v81 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v81);
              }
            }
            else
            {
              *((_DWORD *)v81 + 7) -= 2;
            }
          }
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v199);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
        }
        if (*((float *)a2 + 6) > 0.0 && *((float *)a2 + 7) > 0.0)
        {
          float v22 = roundf(*((float *)a2 + 4));
          if (v22 >= 2147500000.0)
          {
            uint64_t v23 = 0x7FFFFFFFLL;
          }
          else if (v22 <= -2147500000.0)
          {
            uint64_t v23 = 0x80000000;
          }
          else
          {
            uint64_t v23 = (int)v22;
          }
          float v24 = roundf(*((float *)a2 + 5));
          if (v24 >= 2147500000.0)
          {
            unint64_t v25 = 0x7FFFFFFF00000000;
          }
          else if (v24 <= -2147500000.0)
          {
            unint64_t v25 = 0x8000000000000000;
          }
          else
          {
            unint64_t v25 = (unint64_t)(int)v24 << 32;
          }
          *(void *)&long long v166 = v25 | v23;
          WebCore::closestEditablePositionInElementForAbsolutePoint();
          uint64_t v26 = v219;
          long long v219 = 0;
          int v27 = v191;
          char v191 = v26;
          if (v27)
          {
            if (*((_DWORD *)v27 + 7) == 2)
            {
              if ((*((_WORD *)v27 + 17) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v27);
                int v152 = v219;
                int v192 = v220;
                char v193 = v221;
                char v194 = v222;
                long long v219 = 0;
                if (v152)
                {
                  if (*((_DWORD *)v152 + 7) == 2)
                  {
                    if ((*((_WORD *)v152 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v152);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v152 + 7) -= 2;
                  }
                }
                goto LABEL_39;
              }
            }
            else
            {
              *((_DWORD *)v27 + 7) -= 2;
            }
          }
          int v192 = v220;
          char v193 = v221;
          char v194 = v222;
LABEL_39:
          float v28 = roundf(*((float *)a2 + 4) + *((float *)a2 + 6));
          if (v28 >= 2147500000.0)
          {
            uint64_t v29 = 0x7FFFFFFFLL;
          }
          else if (v28 <= -2147500000.0)
          {
            uint64_t v29 = 0x80000000;
          }
          else
          {
            uint64_t v29 = (int)v28;
          }
          float v30 = roundf(*((float *)a2 + 5) + *((float *)a2 + 7));
          if (v30 >= 2147500000.0)
          {
            unint64_t v31 = 0x7FFFFFFF00000000;
          }
          else if (v30 <= -2147500000.0)
          {
            unint64_t v31 = 0x8000000000000000;
          }
          else
          {
            unint64_t v31 = (unint64_t)(int)v30 << 32;
          }
          *(void *)&long long v166 = v31 | v29;
          WebCore::closestEditablePositionInElementForAbsolutePoint();
          char v32 = v219;
          long long v219 = 0;
          long long v33 = v195;
          uint64_t v195 = v32;
          if (!v33) {
            goto LABEL_48;
          }
          if (*((_DWORD *)v33 + 7) != 2)
          {
            *((_DWORD *)v33 + 7) -= 2;
LABEL_48:
            int v196 = v220;
            char v197 = v221;
            char v198 = v222;
            goto LABEL_134;
          }
          if ((*((_WORD *)v33 + 17) & 0x400) != 0) {
            goto LABEL_48;
          }
          WebCore::Node::removedLastRef(v33);
          unsigned int v58 = v219;
          int v196 = v220;
          char v197 = v221;
          char v198 = v222;
LABEL_128:
          long long v219 = 0;
          if (!v58) {
            goto LABEL_134;
          }
          goto LABEL_129;
        }
        *((_DWORD *)v170 + 7) += 2;
        if ((*(uint64_t (**)(WebCore::Node *))(*(void *)v21 + 872))(v21))
        {
          WebCore::HTMLTextFormControlElement::visiblePositionForIndex(v21);
          char v43 = v219;
          long long v219 = 0;
          char v44 = v191;
          char v191 = v43;
          if (v44)
          {
            if (*((_DWORD *)v44 + 7) == 2)
            {
              if ((*((_WORD *)v44 + 17) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v44);
                uint64_t v153 = v219;
                int v192 = v220;
                char v193 = v221;
                char v194 = v222;
                long long v219 = 0;
                if (v153)
                {
                  if (*((_DWORD *)v153 + 7) == 2)
                  {
                    if ((*((_WORD *)v153 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v153);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v153 + 7) -= 2;
                  }
                }
LABEL_65:
                (*(void (**)(long long *__return_ptr, WebCore::Node *))(*(void *)v21 + 1400))(&v166, v21);
                WebCore::HTMLTextFormControlElement::visiblePositionForIndex(v21);
                uint64_t v46 = v219;
                long long v219 = 0;
                uint64_t v47 = v195;
                uint64_t v195 = v46;
                if (v47)
                {
                  if (*((_DWORD *)v47 + 7) == 2)
                  {
                    if ((*((_WORD *)v47 + 17) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef(v47);
                      uint64_t v155 = v219;
                      int v196 = v220;
                      char v197 = v221;
                      char v198 = v222;
                      long long v219 = 0;
                      if (v155)
                      {
                        if (*((_DWORD *)v155 + 7) == 2)
                        {
                          if ((*((_WORD *)v155 + 17) & 0x400) == 0) {
                            WebCore::Node::removedLastRef(v155);
                          }
                        }
                        else
                        {
                          *((_DWORD *)v155 + 7) -= 2;
                        }
                      }
                      goto LABEL_69;
                    }
                  }
                  else
                  {
                    *((_DWORD *)v47 + 7) -= 2;
                  }
                }
                int v196 = v220;
                char v197 = v221;
                char v198 = v222;
                long long v219 = 0;
LABEL_69:
                uint64_t v48 = (WTF::StringImpl *)v166;
                *(void *)&long long v166 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2) {
                    WTF::StringImpl::destroy(v48, v45);
                  }
                  else {
                    *(_DWORD *)v48 -= 2;
                  }
                }
                if (*((_DWORD *)v21 + 7) != 2)
                {
                  *((_DWORD *)v21 + 7) -= 2;
                  goto LABEL_134;
                }
                if ((*((_WORD *)v21 + 17) & 0x400) != 0)
                {
LABEL_134:
                  if (*((_DWORD *)v21 + 7) == 2)
                  {
                    if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v21);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v21 + 7) -= 2;
                  }
                  goto LABEL_136;
                }
                unsigned int v58 = v21;
LABEL_367:
                WebCore::Node::removedLastRef(v58);
                goto LABEL_134;
              }
            }
            else
            {
              *((_DWORD *)v44 + 7) -= 2;
            }
          }
          int v192 = v220;
          char v193 = v221;
          char v194 = v222;
          goto LABEL_65;
        }
        if (*((_DWORD *)v21 + 7) == 2)
        {
          if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v21);
          }
        }
        else
        {
          *((_DWORD *)v21 + 7) -= 2;
        }
        WebCore::firstPositionInOrBeforeNode((WebCore::Node *)&v166, v21);
        WebCore::VisiblePosition::VisiblePosition();
        uint64_t v53 = v219;
        long long v219 = 0;
        uint64_t v54 = v191;
        char v191 = v53;
        if (v54)
        {
          if (*((_DWORD *)v54 + 7) == 2)
          {
            if ((*((_WORD *)v54 + 17) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v54);
              uint64_t v154 = v219;
              int v192 = v220;
              char v193 = v221;
              char v194 = v222;
              long long v219 = 0;
              if (v154)
              {
                if (*((_DWORD *)v154 + 7) == 2)
                {
                  if ((*((_WORD *)v154 + 17) & 0x400) == 0) {
                    WebCore::Node::removedLastRef(v154);
                  }
                }
                else
                {
                  *((_DWORD *)v154 + 7) -= 2;
                }
              }
LABEL_90:
              uint64_t v55 = v166;
              *(void *)&long long v166 = 0;
              if (v55)
              {
                if (*(_DWORD *)(v55 + 28) == 2)
                {
                  if ((*(_WORD *)(v55 + 34) & 0x400) == 0) {
                    WebCore::Node::removedLastRef((WebCore::Node *)v55);
                  }
                }
                else
                {
                  *(_DWORD *)(v55 + 28) -= 2;
                }
              }
              WebCore::lastPositionInOrAfterNode((WebCore::Node *)&v166, v21);
              WebCore::VisiblePosition::VisiblePosition();
              unint64_t v56 = v219;
              long long v219 = 0;
              unint64_t v57 = v195;
              uint64_t v195 = v56;
              if (v57)
              {
                if (*((_DWORD *)v57 + 7) == 2)
                {
                  if ((*((_WORD *)v57 + 17) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v57);
                    long long v156 = v219;
                    int v196 = v220;
                    char v197 = v221;
                    char v198 = v222;
                    long long v219 = 0;
                    if (v156)
                    {
                      if (*((_DWORD *)v156 + 7) == 2)
                      {
                        if ((*((_WORD *)v156 + 17) & 0x400) == 0) {
                          WebCore::Node::removedLastRef(v156);
                        }
                      }
                      else
                      {
                        *((_DWORD *)v156 + 7) -= 2;
                      }
                    }
LABEL_97:
                    unsigned int v58 = (WebCore::Node *)v166;
                    *(void *)&long long v166 = 0;
                    if (!v58) {
                      goto LABEL_134;
                    }
LABEL_129:
                    if (*((_DWORD *)v58 + 7) != 2)
                    {
                      *((_DWORD *)v58 + 7) -= 2;
                      goto LABEL_134;
                    }
                    if ((*((_WORD *)v58 + 17) & 0x400) != 0) {
                      goto LABEL_134;
                    }
                    goto LABEL_367;
                  }
                }
                else
                {
                  *((_DWORD *)v57 + 7) -= 2;
                }
              }
              int v196 = v220;
              char v197 = v221;
              char v198 = v222;
              long long v219 = 0;
              goto LABEL_97;
            }
          }
          else
          {
            *((_DWORD *)v54 + 7) -= 2;
          }
        }
        int v192 = v220;
        char v193 = v221;
        char v194 = v222;
        long long v219 = 0;
        goto LABEL_90;
      }
      if ((v17 & 0x48) == 0)
      {
        if (HIBYTE(v217))
        {
          float v49 = v183;
          if (v183) {
            *((_DWORD *)v183 + 7) += 2;
          }
          float v50 = v191;
          char v191 = v49;
          if (v50)
          {
            if (*((_DWORD *)v50 + 7) == 2)
            {
              if ((*((_WORD *)v50 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v50);
              }
            }
            else
            {
              *((_DWORD *)v50 + 7) -= 2;
            }
          }
          int v192 = v184;
          char v193 = v185;
          char v194 = v186;
          int v51 = v187;
          if (v187) {
            *((_DWORD *)v187 + 7) += 2;
          }
          int v52 = v195;
          uint64_t v195 = v51;
          if (v52)
          {
            if (*((_DWORD *)v52 + 7) == 2)
            {
              if ((*((_WORD *)v52 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v52);
              }
            }
            else
            {
              *((_DWORD *)v52 + 7) -= 2;
            }
          }
          int v196 = v188;
          char v197 = v189;
          char v198 = v190;
        }
LABEL_136:
        int v68 = (char)WebCore::documentOrder();
        if (v68 != -127 && v68 < 0)
        {
          FloatRect v69 = v191;
          float v70 = v195;
          if (v195) {
            *((_DWORD *)v195 + 7) += 2;
          }
          char v191 = v70;
          int v192 = v196;
          char v193 = v197;
          char v194 = v198;
          if (v69)
          {
            if (*((_DWORD *)v69 + 7) == 2)
            {
              if ((*((_WORD *)v69 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v69);
              }
            }
            else
            {
              *((_DWORD *)v69 + 7) -= 2;
            }
          }
        }
        if ((*a2 & 0x40) != 0)
        {
          int v71 = (char)WebCore::documentOrder();
          if (v71 != -127 && v71 < 0)
          {
            float32x4_t v72 = v183;
            if (v183) {
              *((_DWORD *)v183 + 7) += 2;
            }
            uint64_t v73 = v191;
            char v191 = v72;
            if (v73)
            {
              if (*((_DWORD *)v73 + 7) == 2)
              {
                if ((*((_WORD *)v73 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v73);
                }
              }
              else
              {
                *((_DWORD *)v73 + 7) -= 2;
              }
            }
            int v192 = v184;
            char v193 = v185;
            char v194 = v186;
          }
          if ((char)WebCore::documentOrder() >= 1)
          {
            float v74 = v187;
            if (v187) {
              *((_DWORD *)v187 + 7) += 2;
            }
            float v75 = v195;
            uint64_t v195 = v74;
            if (v75)
            {
              if (*((_DWORD *)v75 + 7) == 2)
              {
                if ((*((_WORD *)v75 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v75);
                }
              }
              else
              {
                *((_DWORD *)v75 + 7) -= 2;
              }
            }
            int v196 = v188;
            char v197 = v189;
            char v198 = v190;
          }
        }
        if (!v191 || (*((unsigned char *)v191 + 22) & 8) == 0 || !v195 || (*((unsigned char *)v195 + 22) & 8) == 0)
        {
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v219);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v224);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v225);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v226);
          WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v227);
          long long v230 = 0u;
          long long v229 = 0u;
          long long v228 = 0u;
          WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(a3);
          goto LABEL_164;
        }
        WebCore::VisiblePosition::VisiblePosition();
        WebCore::VisiblePosition::VisiblePosition();
        if (WebCore::intersects())
        {
          WebCore::intersection();
          goto LABEL_202;
        }
        WebCore::midpoint();
        WebCore::startOfWord();
        if (WebCore::contains())
        {
LABEL_196:
          float v86 = v170;
          if (v170)
          {
            int v87 = *((_DWORD *)v170 + 7);
            *(void *)&long long v231 = v170;
            int v88 = v171;
            DWORD2(v231) = v171;
            char v89 = v172;
            BYTE12(v231) = v172;
            char v90 = v173;
            LOBYTE(v232) = v173;
            *((_DWORD *)v170 + 7) = v87 + 4;
            *((void *)&v232 + 1) = v86;
            LODWORD(v233) = v88;
            BYTE4(v233) = v89;
            BYTE8(v233) = v90;
            uint64_t v170 = 0;
            int v91 = v87 + 2;
            if (v91)
            {
              *((_DWORD *)v86 + 7) = v91;
            }
            else if ((*((_WORD *)v86 + 17) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v86);
            }
          }
          else
          {
            *(void *)&long long v231 = 0;
            DWORD2(v231) = v171;
            BYTE12(v231) = v172;
            LOBYTE(v232) = v173;
            *((void *)&v232 + 1) = 0;
            LODWORD(v233) = v171;
            BYTE4(v233) = v172;
            BYTE8(v233) = v173;
          }
          uint64_t v92 = v166;
          *(void *)&long long v166 = 0;
          if (v92)
          {
            if (*(_DWORD *)(v92 + 28) == 2)
            {
              if ((*(_WORD *)(v92 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v92);
              }
            }
            else
            {
              *(_DWORD *)(v92 + 28) -= 2;
            }
          }
LABEL_202:
          uint64_t v93 = v223;
          long long v223 = 0;
          if (v93)
          {
            if (*((_DWORD *)v93 + 7) == 2)
            {
              if ((*((_WORD *)v93 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v93);
              }
            }
            else
            {
              *((_DWORD *)v93 + 7) -= 2;
            }
          }
          float v94 = v219;
          long long v219 = 0;
          if (v94)
          {
            if (*((_DWORD *)v94 + 7) == 2)
            {
              if ((*((_WORD *)v94 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v94);
              }
            }
            else
            {
              *((_DWORD *)v94 + 7) -= 2;
            }
          }
          if (!(void)v231 || !*((void *)&v232 + 1))
          {
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v219);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v224);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v225);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v226);
            WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v227);
            long long v230 = 0u;
            long long v229 = 0u;
            long long v228 = 0u;
            WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(a3);
            int v103 = (WTF *)v230;
            if ((void)v230)
            {
              *(void *)&long long v230 = 0;
              DWORD2(v230) = 0;
              WTF::fastFree(v103, v102);
            }
            double v104 = (WTF *)v229;
            if ((void)v229)
            {
              *(void *)&long long v229 = 0;
              DWORD2(v229) = 0;
              WTF::fastFree(v104, v102);
            }
            MEMORY[0x199732DE0](v227);
            MEMORY[0x199732DE0](v226);
            MEMORY[0x199732DE0](v225);
            MEMORY[0x199732DE0](v224);
            MEMORY[0x199732DE0](&v219);
            goto LABEL_324;
          }
          float v179 = 0;
          int v180 = 0;
          v181 &= 0xF0u;
          char v182 = 1;
          int v175 = 0;
          int v176 = 0;
          v177 &= 0xF0u;
          char v178 = 1;
          float v95 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v7 + 296));
          WebCore::Editor::compositionRange((uint64_t *)&v170, v95);
          uint64_t v96 = *((void *)a2 + 1);
          if (v96)
          {
            WebKit::moveByGranularityRespectingWordBoundary((uint64_t)&v219, (uint64_t)&v191, a2[1], v96, 1);
            float v97 = v219;
            long long v219 = 0;
            uint64_t v98 = v179;
            float v179 = v97;
            char v99 = v161;
            if (v98)
            {
              if (*((_DWORD *)v98 + 7) == 2)
              {
                if ((*((_WORD *)v98 + 17) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v98);
                  FloatRect v157 = v219;
                  int v180 = v220;
                  char v181 = v221;
                  char v182 = v222;
                  long long v219 = 0;
                  if (v157)
                  {
                    if (*((_DWORD *)v157 + 7) == 2)
                    {
                      if ((*((_WORD *)v157 + 17) & 0x400) == 0) {
                        WebCore::Node::removedLastRef(v157);
                      }
                    }
                    else
                    {
                      *((_DWORD *)v157 + 7) -= 2;
                    }
                  }
LABEL_215:
                  WebKit::moveByGranularityRespectingWordBoundary((uint64_t)&v219, (uint64_t)&v195, a2[1], *((void *)a2 + 1), 0);
                  int v100 = v219;
                  long long v219 = 0;
                  uint64_t v101 = v175;
                  int v175 = v100;
                  if (!v101)
                  {
LABEL_218:
                    int v176 = v220;
                    char v177 = v221;
                    char v178 = v222;
                    goto LABEL_265;
                  }
                  if (*((_DWORD *)v101 + 7) != 2)
                  {
                    *((_DWORD *)v101 + 7) -= 2;
                    goto LABEL_218;
                  }
                  if ((*((_WORD *)v101 + 17) & 0x400) != 0) {
                    goto LABEL_218;
                  }
                  WebCore::Node::removedLastRef(v101);
                  int v120 = v219;
                  int v176 = v220;
                  char v177 = v221;
                  char v178 = v222;
                  long long v219 = 0;
                  if (!v120)
                  {
LABEL_265:
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v219);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v224);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v225);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v226);
                    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v227);
                    long long v230 = 0u;
                    long long v229 = 0u;
                    long long v228 = 0u;
                    WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v166, (uint64_t)&v179);
                    WebCore::AttributedString::operator=();
                    MEMORY[0x199732DE0](&v166);
                    WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v166, (uint64_t)&v231);
                    WebCore::AttributedString::operator=();
                    MEMORY[0x199732DE0](&v166);
                    WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v166, (uint64_t)&v232 + 8);
                    WebCore::AttributedString::operator=();
                    MEMORY[0x199732DE0](&v166);
                    WebCore::makeVisiblePositionRange();
                    if (WebCore::intersects())
                    {
                      WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()((WebCore::AttributedString *)&v164, (uint64_t)&v166);
                      WebCore::AttributedString::operator=();
                      MEMORY[0x199732DE0](&v164);
                      if (v226[0]) {
                        unsigned int v121 = *(_DWORD *)(v226[0] + 4);
                      }
                      else {
                        unsigned int v121 = 0;
                      }
                      uint64_t v122 = WebCore::distanceBetweenPositions();
                      if (v224[0]) {
                        float v123 = (__CFString *)WTF::StringImpl::operator NSString *();
                      }
                      else {
                        float v123 = &stru_1EEA10550;
                      }
                      uint64_t v124 = [(__CFString *)v123 length] + v122;
                      unint64_t v125 = v122 & ~(v122 >> 63);
                      if (v122 >= v121) {
                        unint64_t v125 = v121;
                      }
                      if (v124 >= v121) {
                        unint64_t v126 = v121;
                      }
                      else {
                        unint64_t v126 = v124 & ~(v124 >> 63);
                      }
                      BOOL v127 = v126 >= v125;
                      unint64_t v128 = v126 - v125;
                      if (!v127)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198F43350);
                      }
                      *(void *)&long long v228 = v125;
                      *((void *)&v228 + 1) = v128;
                    }
                    uint64_t v129 = v168;
                    char v168 = 0;
                    if (v129)
                    {
                      if (*((_DWORD *)v129 + 7) == 2)
                      {
                        if ((*((_WORD *)v129 + 17) & 0x400) == 0) {
                          WebCore::Node::removedLastRef(v129);
                        }
                      }
                      else
                      {
                        *((_DWORD *)v129 + 7) -= 2;
                      }
                    }
                    uint64_t v130 = v166;
                    *(void *)&long long v166 = 0;
                    if (v130)
                    {
                      if (*(_DWORD *)(v130 + 28) == 2)
                      {
                        if ((*(_WORD *)(v130 + 34) & 0x400) == 0) {
                          WebCore::Node::removedLastRef((WebCore::Node *)v130);
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v130 + 28) -= 2;
                      }
                    }
                    if ((v99 & 4) != 0)
                    {
                      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v166);
                      if (v169)
                      {
                        WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_3::operator()((uint64_t)&v164, (uint64_t)&v166, 0);
                        int32x4_t v133 = (WTF *)v229;
                        if ((void)v229)
                        {
                          *(void *)&long long v229 = 0;
                          DWORD2(v229) = 0;
                          WTF::fastFree(v133, v132);
                        }
                        long long v229 = v164;
                      }
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v166);
                    }
                    else if ((v99 & 0x20) != 0 && v174)
                    {
                      WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::BoundaryPoint &>((uint64_t)&v166, (uint64_t)&v179, &v170);
                      if (v169) {
                        unsigned int v131 = WebCore::characterCount();
                      }
                      else {
                        unsigned int v131 = 0;
                      }
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v166);
                      if (!v174) {
                        goto LABEL_478;
                      }
                      WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_3::operator()((uint64_t)&v166, (uint64_t)&v170, v131);
                      int8x16_t v135 = (WTF *)v229;
                      if ((void)v229)
                      {
                        *(void *)&long long v229 = 0;
                        DWORD2(v229) = 0;
                        WTF::fastFree(v135, v134);
                      }
                      long long v229 = v166;
                    }
                    if ((*a2 & 0x80000000) == 0)
                    {
LABEL_314:
                      WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(a3);
                      double v146 = (WTF *)v230;
                      if ((void)v230)
                      {
                        *(void *)&long long v230 = 0;
                        DWORD2(v230) = 0;
                        WTF::fastFree(v146, v145);
                      }
                      BOOL v147 = (WTF *)v229;
                      if ((void)v229)
                      {
                        *(void *)&long long v229 = 0;
                        DWORD2(v229) = 0;
                        WTF::fastFree(v147, v145);
                      }
                      MEMORY[0x199732DE0](v227);
                      MEMORY[0x199732DE0](v226);
                      MEMORY[0x199732DE0](v225);
                      MEMORY[0x199732DE0](v224);
                      MEMORY[0x199732DE0](&v219);
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v170);
                      char v148 = v175;
                      int v175 = 0;
                      if (v148)
                      {
                        if (*((_DWORD *)v148 + 7) == 2)
                        {
                          if ((*((_WORD *)v148 + 17) & 0x400) == 0) {
                            WebCore::Node::removedLastRef(v148);
                          }
                        }
                        else
                        {
                          *((_DWORD *)v148 + 7) -= 2;
                        }
                      }
                      uint64_t v149 = v179;
                      float v179 = 0;
                      if (v149)
                      {
                        if (*((_DWORD *)v149 + 7) == 2)
                        {
                          if ((*((_WORD *)v149 + 17) & 0x400) == 0) {
                            WebCore::Node::removedLastRef(v149);
                          }
                        }
                        else
                        {
                          *((_DWORD *)v149 + 7) -= 2;
                        }
                      }
LABEL_324:
                      uint64_t v150 = *((void *)&v232 + 1);
                      *((void *)&v232 + 1) = 0;
                      if (v150)
                      {
                        if (*(_DWORD *)(v150 + 28) == 2)
                        {
                          if ((*(_WORD *)(v150 + 34) & 0x400) == 0) {
                            WebCore::Node::removedLastRef((WebCore::Node *)v150);
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v150 + 28) -= 2;
                        }
                      }
                      uint64_t v151 = v231;
                      *(void *)&long long v231 = 0;
                      if (v151)
                      {
                        if (*(_DWORD *)(v151 + 28) == 2)
                        {
                          if ((*(_WORD *)(v151 + 34) & 0x400) == 0) {
                            WebCore::Node::removedLastRef((WebCore::Node *)v151);
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v151 + 28) -= 2;
                        }
                      }
                      goto LABEL_169;
                    }
                    WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition &>((uint64_t)&v166);
                    if (!v169)
                    {
LABEL_313:
                      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v166);
                      goto LABEL_314;
                    }
                    if (*(void *)(*(void *)(v7 + 296) + 1536)
                      || (WebCore::Document::ensureMarkers(*(WebCore::Document **)(v7 + 296)), v169))
                    {
                      WebCore::DocumentMarkerController::rangesForMarkersInRange();
                      unsigned int v137 = v163;
                      if (v163)
                      {
                        if (v163 >> 28)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198F43530);
                        }
                        uint64_t v160 = (WTF *)WTF::fastMalloc((WTF *)(16 * v163));
                        uint64_t v138 = 0;
                        unint64_t v139 = 0;
                        uint64_t v140 = (uint64_t *)((char *)v160 + 8);
                        do
                        {
                          if (!v169) {
                            goto LABEL_478;
                          }
                          WebCore::SimpleRange::SimpleRange();
                          uint64_t v141 = WebCore::characterCount();
                          uint64_t v142 = WebCore::characterCount();
                          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v165);
                          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v164);
                          *(v140 - 1) = v141;
                          *uint64_t v140 = v142;
                          ++v139;
                          v140 += 2;
                          v138 += 32;
                        }
                        while (v139 < v163);
                        IntSize v143 = v160;
                      }
                      else
                      {
                        IntSize v143 = 0;
                        LODWORD(v139) = 0;
                      }
                      uint64_t v144 = (WTF *)v230;
                      if ((void)v230)
                      {
                        *(void *)&long long v230 = 0;
                        DWORD2(v230) = 0;
                        WTF::fastFree(v144, v136);
                      }
                      *(void *)&long long v230 = v143;
                      *((void *)&v230 + 1) = __PAIR64__(v139, v137);
                      WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v162, v136);
                      goto LABEL_313;
                    }
LABEL_478:
                    __break(1u);
                    JUMPOUT(0x198F43DC0);
                  }
LABEL_263:
                  if (*((_DWORD *)v120 + 7) == 2)
                  {
                    if ((*((_WORD *)v120 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v120);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v120 + 7) -= 2;
                  }
                  goto LABEL_265;
                }
              }
              else
              {
                *((_DWORD *)v98 + 7) -= 2;
              }
            }
            int v180 = v220;
            char v181 = v221;
            char v182 = v222;
            goto LABEL_215;
          }
          BOOL v105 = v191;
          if (v191) {
            *((_DWORD *)v191 + 7) += 2;
          }
          uint64_t v106 = v179;
          float v179 = v105;
          if (v106)
          {
            if (*((_DWORD *)v106 + 7) == 2)
            {
              if ((*((_WORD *)v106 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v106);
              }
            }
            else
            {
              *((_DWORD *)v106 + 7) -= 2;
            }
          }
          int v180 = v192;
          char v181 = v193;
          char v182 = v194;
          unsigned int v107 = v195;
          if (v195) {
            *((_DWORD *)v195 + 7) += 2;
          }
          float v108 = v175;
          int v175 = v107;
          if (v108)
          {
            if (*((_DWORD *)v108 + 7) == 2)
            {
              if ((*((_WORD *)v108 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v108);
              }
            }
            else
            {
              *((_DWORD *)v108 + 7) -= 2;
            }
          }
          int v176 = v196;
          char v177 = v197;
          char v178 = v198;
          char v99 = v161;
          if ((v161 & 0x20) == 0 || !v174) {
            goto LABEL_265;
          }
          WebCore::makeDeprecatedLegacyPosition();
          if (!v174) {
            goto LABEL_478;
          }
          WebCore::makeDeprecatedLegacyPosition();
          WebCore::VisiblePosition::VisiblePosition();
          int v109 = (char)WebCore::documentOrder();
          unsigned int v110 = v219;
          long long v219 = 0;
          if (v110)
          {
            if (*((_DWORD *)v110 + 7) == 2)
            {
              if ((*((_WORD *)v110 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v110);
              }
            }
            else
            {
              *((_DWORD *)v110 + 7) -= 2;
            }
          }
          if (v109 >= 1)
          {
            WebCore::VisiblePosition::VisiblePosition();
            float v111 = v219;
            long long v219 = 0;
            uint64_t v112 = v179;
            float v179 = v111;
            if (!v112)
            {
LABEL_244:
              int v180 = v220;
              char v181 = v221;
              char v182 = v222;
              goto LABEL_245;
            }
            if (*((_DWORD *)v112 + 7) != 2)
            {
              *((_DWORD *)v112 + 7) -= 2;
              goto LABEL_244;
            }
            if ((*((_WORD *)v112 + 17) & 0x400) != 0) {
              goto LABEL_244;
            }
            WebCore::Node::removedLastRef(v112);
            int8x16_t v158 = v219;
            int v180 = v220;
            char v181 = v221;
            char v182 = v222;
            long long v219 = 0;
            if (v158)
            {
              if (*((_DWORD *)v158 + 7) == 2)
              {
                if ((*((_WORD *)v158 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v158);
                }
              }
              else
              {
                *((_DWORD *)v158 + 7) -= 2;
              }
            }
          }
LABEL_245:
          WebCore::VisiblePosition::VisiblePosition();
          int v113 = (char)WebCore::documentOrder();
          BOOL v115 = v113 != -127 && v113 < 0;
          float v116 = v219;
          long long v219 = 0;
          if (v116)
          {
            if (*((_DWORD *)v116 + 7) == 2)
            {
              if ((*((_WORD *)v116 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v116);
              }
            }
            else
            {
              *((_DWORD *)v116 + 7) -= 2;
            }
          }
          if (v115)
          {
            WebCore::VisiblePosition::VisiblePosition();
            float v117 = v219;
            long long v219 = 0;
            float v118 = v175;
            int v175 = v117;
            if (!v118)
            {
LABEL_258:
              int v176 = v220;
              char v177 = v221;
              char v178 = v222;
              goto LABEL_259;
            }
            if (*((_DWORD *)v118 + 7) != 2)
            {
              *((_DWORD *)v118 + 7) -= 2;
              goto LABEL_258;
            }
            if ((*((_WORD *)v118 + 17) & 0x400) != 0) {
              goto LABEL_258;
            }
            WebCore::Node::removedLastRef(v118);
            uint64_t v159 = v219;
            int v176 = v220;
            char v177 = v221;
            char v178 = v222;
            long long v219 = 0;
            if (v159)
            {
              if (*((_DWORD *)v159 + 7) == 2)
              {
                if ((*((_WORD *)v159 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v159);
                }
              }
              else
              {
                *((_DWORD *)v159 + 7) -= 2;
              }
            }
          }
LABEL_259:
          uint64_t v119 = v164;
          *(void *)&long long v164 = 0;
          if (v119)
          {
            if (*(_DWORD *)(v119 + 28) == 2)
            {
              if ((*(_WORD *)(v119 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v119);
              }
            }
            else
            {
              *(_DWORD *)(v119 + 28) -= 2;
            }
          }
          int v120 = (WebCore::Node *)v166;
          *(void *)&long long v166 = 0;
          if (!v120) {
            goto LABEL_265;
          }
          goto LABEL_263;
        }
        WebCore::endOfWord();
        char v82 = (WebCore::Node *)v164;
        *(void *)&long long v164 = 0;
        char v83 = v170;
        uint64_t v170 = v82;
        if (v83)
        {
          if (*((_DWORD *)v83 + 7) == 2)
          {
            if ((*((_WORD *)v83 + 17) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v83);
              int v171 = DWORD2(v164);
              char v172 = BYTE12(v164);
              char v173 = v165[0];
              *(void *)&long long v164 = 0;
LABEL_189:
              if ((WebCore::contains() & 1) == 0)
              {
                uint64_t v84 = (WebCore::Node *)v166;
                if ((void)v166) {
                  *(_DWORD *)(v166 + 28) += 2;
                }
                uint64_t v85 = v170;
                uint64_t v170 = v84;
                if (v85)
                {
                  if (*((_DWORD *)v85 + 7) == 2)
                  {
                    if ((*((_WORD *)v85 + 17) & 0x400) == 0) {
                      WebCore::Node::removedLastRef(v85);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v85 + 7) -= 2;
                  }
                }
                int v171 = DWORD2(v166);
                char v172 = BYTE12(v166);
                char v173 = v167;
              }
              goto LABEL_196;
            }
          }
          else
          {
            *((_DWORD *)v83 + 7) -= 2;
          }
        }
        int v171 = DWORD2(v164);
        char v172 = BYTE12(v164);
        char v173 = v165[0];
        goto LABEL_189;
      }
      WebKit::visiblePositionForPointInRootViewCoordinates((uint64_t *)&v219, (WebCore::LocalFrame *)v7, *((float *)a2 + 4), *((float *)a2 + 5));
      long long v38 = v219;
      long long v219 = 0;
      char v191 = v38;
      int v192 = v220;
      char v193 = v221;
      char v194 = v222;
      WebKit::visiblePositionForPointInRootViewCoordinates((uint64_t *)&v219, (WebCore::LocalFrame *)v7, *((float *)a2 + 4) + *((float *)a2 + 6), *((float *)a2 + 5) + *((float *)a2 + 7));
      uint64_t v39 = v219;
      long long v219 = 0;
      uint64_t v195 = v39;
      int v196 = v220;
      char v197 = v221;
      char v198 = v222;
      if ((*a2 & 0x40) == 0) {
        goto LABEL_136;
      }
      uint64_t v40 = (WebCore::Node *)WebCore::VisibleSelection::rootEditableElement((WebCore::VisibleSelection *)&v199);
      uint64_t v21 = v40;
      if (!v40) {
        goto LABEL_136;
      }
      *((_DWORD *)v40 + 7) += 2;
      if ((*(uint64_t (**)(WebCore::Node *))(*(void *)v40 + 208))(v40))
      {
        WebCore::firstPositionInNode(v21, v41);
      }
      else
      {
        *((_DWORD *)v21 + 7) += 2;
        WebCore::Position::Position();
        uint64_t v170 = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 7) == 2)
          {
            if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v21);
            }
          }
          else
          {
            *((_DWORD *)v21 + 7) -= 2;
          }
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      uint64_t v59 = v166;
      *(void *)&long long v166 = 0;
      if (v59)
      {
        if (*(_DWORD *)(v59 + 28) == 2)
        {
          if ((*(_WORD *)(v59 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v59);
          }
        }
        else
        {
          *(_DWORD *)(v59 + 28) -= 2;
        }
      }
      if ((*(uint64_t (**)(WebCore::Node *))(*(void *)v21 + 208))(v21))
      {
        WebCore::lastPositionInNode(v21, v60);
      }
      else
      {
        *((_DWORD *)v21 + 7) += 2;
        WebCore::Position::Position();
        *(void *)&long long v164 = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 7) == 2)
          {
            if ((*((_WORD *)v21 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v21);
            }
          }
          else
          {
            *((_DWORD *)v21 + 7) -= 2;
          }
        }
      }
      WebCore::VisiblePosition::VisiblePosition();
      int v61 = v170;
      uint64_t v170 = 0;
      if (v61)
      {
        if (*((_DWORD *)v61 + 7) == 2)
        {
          if ((*((_WORD *)v61 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v61);
          }
        }
        else
        {
          *((_DWORD *)v61 + 7) -= 2;
        }
      }
      int v62 = (char)WebCore::documentOrder();
      if (v62 != -127 && v62 < 0)
      {
        uint64_t v63 = v219;
        long long v219 = 0;
        BOOL v64 = v191;
        char v191 = v63;
        if (v64)
        {
          if (*((_DWORD *)v64 + 7) == 2)
          {
            if ((*((_WORD *)v64 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v64);
            }
          }
          else
          {
            *((_DWORD *)v64 + 7) -= 2;
          }
        }
        int v192 = v220;
        char v193 = v221;
        char v194 = v222;
      }
      int v65 = (char)WebCore::documentOrder();
      uint64_t v66 = v166;
      if (v65 < 1)
      {
LABEL_124:
        *(void *)&long long v166 = 0;
        if (v66)
        {
          if (*(_DWORD *)(v66 + 28) == 2)
          {
            if ((*(_WORD *)(v66 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v66);
            }
          }
          else
          {
            *(_DWORD *)(v66 + 28) -= 2;
          }
        }
        unsigned int v58 = v219;
        goto LABEL_128;
      }
      *(void *)&long long v166 = 0;
      unint64_t v67 = v195;
      uint64_t v195 = (WebCore::Node *)v66;
      if (v67)
      {
        if (*((_DWORD *)v67 + 7) != 2)
        {
          uint64_t v66 = 0;
          *((_DWORD *)v67 + 7) -= 2;
LABEL_123:
          int v196 = DWORD2(v166);
          char v197 = BYTE12(v166);
          char v198 = v167;
          goto LABEL_124;
        }
        if ((*((_WORD *)v67 + 17) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v67);
          uint64_t v66 = v166;
          goto LABEL_123;
        }
      }
      uint64_t v66 = 0;
      goto LABEL_123;
    }
  }
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)&v219);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v224);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v225);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v226);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v227);
  long long v230 = 0u;
  long long v229 = 0u;
  long long v228 = 0u;
  WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(a3);
  char v35 = (WTF *)v230;
  if ((void)v230)
  {
    *(void *)&long long v230 = 0;
    DWORD2(v230) = 0;
    WTF::fastFree(v35, v34);
  }
  unint64_t v36 = (WTF *)v229;
  if ((void)v229)
  {
    *(void *)&long long v229 = 0;
    DWORD2(v229) = 0;
    WTF::fastFree(v36, v34);
  }
  MEMORY[0x199732DE0](v227);
  MEMORY[0x199732DE0](v226);
  MEMORY[0x199732DE0](v225);
  MEMORY[0x199732DE0](v224);
  return (unsigned int *)MEMORY[0x199732DE0](&v219);
}

WebCore::Node *WebCore::firstPositionInOrBeforeNode(WebCore::Node *this, WebCore::Node *a2)
{
  if (a2)
  {
    if ((*(uint64_t (**)(WebCore::Node *))(*(void *)a2 + 208))(a2))
    {
      return WebCore::firstPositionInNode(a2, v3);
    }
    else
    {
      *((_DWORD *)a2 + 7) += 2;
      WebCore::Position::Position();
      this = a2;
      if (*((_DWORD *)a2 + 7) == 2)
      {
        if ((*((_WORD *)a2 + 17) & 0x400) == 0) {
          return (WebCore::Node *)WebCore::Node::removedLastRef(a2);
        }
      }
      else
      {
        *((_DWORD *)a2 + 7) -= 2;
      }
    }
  }
  else
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    *((unsigned char *)this + 12) &= 0xF0u;
  }
  return this;
}

void sub_198F43EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a10);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::Node *WebCore::lastPositionInOrAfterNode(WebCore::Node *this, WebCore::Node *a2)
{
  if (a2)
  {
    if ((*(uint64_t (**)(WebCore::Node *))(*(void *)a2 + 208))(a2))
    {
      return WebCore::lastPositionInNode(a2, v3);
    }
    else
    {
      *((_DWORD *)a2 + 7) += 2;
      WebCore::Position::Position();
      this = a2;
      if (*((_DWORD *)a2 + 7) == 2)
      {
        if ((*((_WORD *)a2 + 17) & 0x400) == 0) {
          return (WebCore::Node *)WebCore::Node::removedLastRef(a2);
        }
      }
      else
      {
        *((_DWORD *)a2 + 7) -= 2;
      }
    }
  }
  else
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    *((unsigned char *)this + 12) &= 0xF0u;
  }
  return this;
}

void sub_198F43FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a10);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::visiblePositionForPointInRootViewCoordinates(uint64_t *a1, WebCore::LocalFrame *a2, float a3, float a4)
{
  uint64_t v6 = (WebCore::ScrollView *)*((void *)a2 + 36);
  float v7 = roundf(a3);
  uint64_t v8 = 0x7FFFFFFFLL;
  uint64_t v9 = 0x80000000;
  if (v7 > -2147500000.0) {
    uint64_t v9 = (int)v7;
  }
  if (v7 < 2147500000.0) {
    uint64_t v8 = v9;
  }
  float v10 = roundf(a4);
  uint64_t v11 = 0x7FFFFFFF00000000;
  unint64_t v12 = 0x8000000000000000;
  if (v10 > -2147500000.0) {
    unint64_t v12 = (unint64_t)(int)v10 << 32;
  }
  if (v10 < 2147500000.0) {
    uint64_t v11 = v12;
  }
  uint64_t v14 = v11 | v8;
  uint64_t v15 = WebCore::ScrollView::rootViewToContents(v6, (const WebCore::IntPoint *)&v14);
  return WebCore::LocalFrame::visiblePositionForPoint(a1, a2, (const WebCore::IntPoint *)&v15);
}

WebCore::Node *WebKit::moveByGranularityRespectingWordBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a5 == 1) {
    WebCore::startOfEditableContent();
  }
  else {
    WebCore::endOfEditableContent();
  }
  if (WebCore::operator==(a2, (uint64_t)&v27))
  {
    if (a5 == 1) {
      WebCore::startOfWord();
    }
    else {
      WebCore::endOfWord();
    }
    goto LABEL_36;
  }
  float v10 = *(WebCore::Node **)a2;
  if (*(void *)a2) {
    *((_DWORD *)v10 + 7) += 2;
  }
  uint64_t v11 = 0;
  uint64_t v23 = v10;
  int v24 = *(_DWORD *)(a2 + 8);
  char v25 = *(unsigned char *)(a2 + 12);
  char v26 = *(unsigned char *)(a2 + 16);
  do
  {
    WebCore::positionOfNextBoundaryOfGranularity();
    unint64_t v12 = v19;
    long long v19 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 7) == 2)
      {
        if ((*((_WORD *)v11 + 17) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v11);
          int v13 = v20;
          char v14 = v21;
          char v15 = v22;
          long long v19 = 0;
          goto LABEL_14;
        }
      }
      else
      {
        *((_DWORD *)v11 + 7) -= 2;
      }
    }
    int v13 = v20;
    char v14 = v21;
    char v15 = v22;
LABEL_14:
    if (!v12) {
      break;
    }
    *((_DWORD *)v12 + 7) += 2;
    uint64_t v16 = v23;
    uint64_t v23 = v12;
    if (v16)
    {
      if (*((_DWORD *)v16 + 7) == 2)
      {
        if ((*((_WORD *)v16 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v16);
        }
      }
      else
      {
        *((_DWORD *)v16 + 7) -= 2;
      }
    }
    int v24 = v13;
    char v25 = v14;
    char v26 = v15;
    a4 -= WebCore::atBoundaryOfGranularity();
    uint64_t v11 = v12;
  }
  while (a4);
  if (a3 == 2)
  {
    char v17 = v23;
    uint64_t v23 = 0;
    *(void *)a1 = v17;
    *(_DWORD *)(a1 + 8) = v24;
    *(unsigned char *)(a1 + 12) = v25;
    *(unsigned char *)(a1 + 16) = v26;
  }
  else if (a5 == 1)
  {
    WebCore::startOfWord();
  }
  else
  {
    WebCore::endOfWord();
  }
  if (v12)
  {
    if (*((_DWORD *)v12 + 7) == 2)
    {
      if ((*((_WORD *)v12 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v12);
      }
    }
    else
    {
      *((_DWORD *)v12 + 7) -= 2;
    }
  }
  if (v23)
  {
    if (*((_DWORD *)v23 + 7) == 2)
    {
      if ((*((_WORD *)v23 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v23);
      }
    }
    else
    {
      *((_DWORD *)v23 + 7) -= 2;
    }
  }
LABEL_36:
  uint64_t result = v27;
  int v27 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 7) == 2)
    {
      if ((*((_WORD *)result + 17) & 0x400) == 0) {
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
    }
    else
    {
      *((_DWORD *)result + 7) -= 2;
    }
  }
  return result;
}

void sub_198F4436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13, uint64_t a14, uint64_t a15, WebCore::Node *a16)
{
  if (v16)
  {
    if (*(_DWORD *)(v16 + 28) == 2)
    {
      if ((*(_WORD *)(v16 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
    }
    else
    {
      *(_DWORD *)(v16 + 28) -= 2;
    }
  }
  if (a13)
  {
    if (*((_DWORD *)a13 + 7) == 2)
    {
      if ((*((_WORD *)a13 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a13);
      }
    }
    else
    {
      *((_DWORD *)a13 + 7) -= 2;
    }
  }
  if (a16)
  {
    if (*((_DWORD *)a16 + 7) == 2)
    {
      if ((*((_WORD *)a16 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a16);
      }
    }
    else
    {
      *((_DWORD *)a16 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_1::operator()(WebCore::AttributedString *a1, uint64_t a2)
{
  WebCore::makeBoundaryPoint();
  WebCore::makeBoundaryPoint();
  int v5 = v26;
  if (v28) {
    BOOL v6 = v26 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    char v8 = 0;
    LOBYTE(v20) = 0;
  }
  else
  {
    WebCore::SimpleRange::SimpleRange();
    uint64_t v20 = (uint64_t)v29;
    int v21 = v30;
    uint64_t v7 = v32;
    uint64_t v29 = 0;
    uint64_t v32 = 0;
    uint64_t v22 = v7;
    int v23 = v33;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v32);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v29);
    int v5 = v26;
    char v8 = 1;
  }
  char v24 = v8;
  if (v5) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v25);
  }
  if (v28) {
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v27);
  }
  if (!v24 || v20 == v22 && v21 == v23)
  {
    WebCore::AttributedString::AttributedString(a1);
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    if (*(void *)a2) {
      *(_DWORD *)(v9 + 28) += 2;
    }
    uint64_t v29 = (const void *)v9;
    int v30 = *(_DWORD *)(a2 + 8);
    char v31 = *(unsigned char *)(a2 + 12);
    uint64_t v10 = WebCore::enclosingTextFormControl((WebCore *)&v29, v4);
    uint64_t v11 = v10;
    if (v10) {
      *(_DWORD *)(v10 + 28) += 2;
    }
    uint64_t v12 = (uint64_t)v29;
    uint64_t v29 = 0;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 28) == 2)
      {
        if ((*(_WORD *)(v12 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
        }
      }
      else
      {
        *(_DWORD *)(v12 + 28) -= 2;
      }
    }
    if (v11)
    {
      if (*(void *)(*(void *)(v11 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24)
        && (*(_WORD *)(v11 + 238) & 0x400) != 0)
      {
        if (*(_DWORD *)(v11 + 28) == 2) {
          goto LABEL_44;
        }
        *(_DWORD *)(v11 + 28) -= 2;
      }
      else if (*(_DWORD *)(v11 + 28) == 2)
      {
        if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
        }
      }
      else
      {
        *(_DWORD *)(v11 + 28) -= 2;
      }
    }
    while (1)
    {
      id v13 = objc_alloc(MEMORY[0x1E4F28B18]);
      if (v24) {
        break;
      }
      __break(1u);
LABEL_44:
      if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
    }
    char v14 = v13;
    WebCore::plainTextReplacingNoBreakSpace();
    if (v27) {
      char v15 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      char v15 = &stru_1EEA10550;
    }
    uint64_t v29 = (const void *)[v14 initWithString:v15];
    WebCore::AttributedString::fromNSAttributedString();
    char v17 = v29;
    uint64_t v29 = 0;
    if (v17) {
      CFRelease(v17);
    }
    long long v18 = v27;
    int v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
}

void sub_198F446C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, WTF::StringImpl *a18, uint64_t a19, char a20)
{
  uint64_t v22 = *(const void **)(v20 - 64);
  *(void *)(v20 - 64) = 0;
  if (v22) {
    CFRelease(v22);
  }
  int v23 = a18;
  a18 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, a2);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::requestDocumentEditingContext(WebKit::DocumentEditingContextRequest &&,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&)::$_3::operator()(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  LOBYTE(v51) = 0;
  char v55 = 0;
  WebCore::TextIterator::TextIterator();
  while (v49)
  {
    if (!v50) {
      goto LABEL_42;
    }
    WebCore::TextIterator::range((uint64_t *)&v46, (WebCore::TextIterator *)v48);
    if (!v55 || v51 != (void)v46 || v52 != DWORD2(v46))
    {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
LABEL_11:
      char v44 = 0;
      uint64_t v45 = 0;
      WebCore::TextIterator::range((uint64_t *)&v46, (WebCore::TextIterator *)v48);
      uint64_t v9 = v46;
      uint64_t v10 = v47;
      int v11 = DWORD2(v46);
      int v12 = DWORD2(v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
      if (v9 == v10 && v11 == v12)
      {
        WebCore::TextIterator::range((uint64_t *)&v46, (WebCore::TextIterator *)v48);
        WebCore::makeContainerOffsetPosition();
        WebCore::VisiblePosition::VisiblePosition();
        uint64_t v13 = WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)&v40, 0);
        uint64_t v15 = v14;
        char v17 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(void *)char v17 = v13;
        *((void *)v17 + 1) = v15;
        long long v18 = v44;
        if (v44)
        {
          char v44 = 0;
          LODWORD(v45) = 0;
          WTF::fastFree(v18, v16);
        }
        char v44 = v17;
        uint64_t v45 = 0x100000001;
        long long v19 = v40;
        uint64_t v40 = 0;
        if (v19)
        {
          if (*((_DWORD *)v19 + 7) == 2)
          {
            if ((*((_WORD *)v19 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v19);
            }
          }
          else
          {
            *((_DWORD *)v19 + 7) -= 2;
          }
        }
        uint64_t v20 = v43[0];
        v43[0] = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 7) == 2)
          {
            if ((*((_WORD *)v20 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v20);
            }
          }
          else
          {
            *((_DWORD *)v20 + 7) -= 2;
          }
        }
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
        unsigned int v21 = HIDWORD(v45);
        if (!HIDWORD(v45)) {
          goto LABEL_40;
        }
LABEL_31:
        uint64_t v25 = v44;
        unsigned __int8 v26 = (WTF *)((char *)v44 + 16 * v21);
        do
        {
LABEL_32:
          WebCore::TextIterator::range((uint64_t *)&v40, (WebCore::TextIterator *)v48);
          uint64_t v29 = *(void *)(*(void *)(*((void *)v40 + 6) + 8) + 544);
          if (v29 && (uint64_t v30 = *(void *)(v29 + 8)) != 0) {
            char v31 = *(WebCore::ScrollView **)(v30 + 288);
          }
          else {
            char v31 = 0;
          }
          v43[0] = (WebCore::Node *)WebCore::ScrollView::contentsToRootView(v31, v25);
          v43[1] = v32;
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v46, (const WebCore::IntRect *)v43);
          *(void *)&long long v47 = a3;
          *((void *)&v47 + 1) = 1;
          uint64_t v33 = *(unsigned int *)(a1 + 12);
          if (v33 == *(_DWORD *)(a1 + 8))
          {
            int v34 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v33 + 1, (unint64_t)&v46);
            uint64_t v33 = *(unsigned int *)(a1 + 12);
            char v35 = (_OWORD *)(*(void *)a1 + 32 * v33);
            long long v36 = v34[1];
            _OWORD *v35 = *v34;
          }
          else
          {
            char v35 = (_OWORD *)(*(void *)a1 + 32 * v33);
            long long v36 = v47;
            _OWORD *v35 = v46;
          }
          v35[1] = v36;
          *(_DWORD *)(a1 + 12) = v33 + 1;
          ++a3;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v42);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v40);
          uint64_t v25 = (WTF *)((char *)v25 + 16);
        }
        while (v25 != v26);
      }
      else
      {
        WebCore::TextIterator::range((uint64_t *)&v46, (WebCore::TextIterator *)v48);
        WebCore::RenderObject::absoluteTextRects();
        int v23 = v44;
        if (v44)
        {
          char v44 = 0;
          LODWORD(v45) = 0;
          WTF::fastFree(v23, v22);
        }
        char v44 = v40;
        uint64_t v24 = v41;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v45 = v24;
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
        if (HIDWORD(v45))
        {
          uint64_t v25 = v44;
          unsigned __int8 v26 = (WTF *)((char *)v44 + 16 * HIDWORD(v45));
          goto LABEL_32;
        }
        long long v46 = 0uLL;
        if (v45)
        {
          int v27 = v44;
          *(void *)char v44 = 0;
          *((void *)v27 + 1) = 0;
        }
        else
        {
          char v28 = (_OWORD *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, 1uLL, (unint64_t)&v46);
          *((_OWORD *)v44 + HIDWORD(v45)) = *v28;
        }
        unsigned int v21 = HIDWORD(v45) + 1;
        HIDWORD(v45) = v21;
        if (v21) {
          goto LABEL_31;
        }
      }
LABEL_40:
      WebCore::TextIterator::range((uint64_t *)&v46, (WebCore::TextIterator *)v48);
      std::optional<WebCore::SimpleRange>::operator=[abi:sn180100]<WebCore::SimpleRange,void>((uint64_t)&v51, (uint64_t *)&v46);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
      long long v38 = v44;
      if (v44)
      {
        char v44 = 0;
        LODWORD(v45) = 0;
        WTF::fastFree(v38, v37);
      }
      goto LABEL_42;
    }
    uint64_t v5 = v53;
    uint64_t v6 = v47;
    int v7 = v54;
    int v8 = DWORD2(v47);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v47);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v46);
    if (v5 != v6 || v7 != v8) {
      goto LABEL_11;
    }
LABEL_42:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v48);
  }
  MEMORY[0x199731050](v48);
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
}

void sub_198F44B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, WTF *a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v24 - 136);
  int v27 = *(WTF **)v23;
  if (*(void *)v23)
  {
    *(void *)uint64_t v23 = 0;
    *(_DWORD *)(v23 + 8) = 0;
    WTF::fastFree(v27, v26);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::shouldAllowSingleClickToChangeSelection(WebKit::WebPage *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t v6 = WebCore::VisibleSelection::rootEditableElement(a3);
  if (v6)
  {
    uint64_t v7 = v6;
    *(_DWORD *)(v6 + 28) += 2;
    uint64_t v8 = WebCore::Node::rootEditableElement(a2);
    BOOL v9 = v7 == v8;
    if (v7 == v8)
    {
      uint64_t v10 = 1248;
      if (*((unsigned char *)this + 1250)) {
        uint64_t v10 = 1249;
      }
      BOOL v3 = *((unsigned char *)this + v10) == 0;
    }
    if (*(_DWORD *)(v7 + 28) == 2)
    {
      if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
    }
    else
    {
      *(_DWORD *)(v7 + 28) -= 2;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  return v3 | !v9;
}

void sub_198F44D60(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *WebKit::WebPage::setShouldRevealCurrentSelectionAfterInsertion(unsigned char *this, int a2)
{
  if (this[1286] != a2)
  {
    uint64_t v2 = this;
    this[1286] = a2;
    if (a2)
    {
      WebCore::Page::revealCurrentSelection(*((WebCore::Page **)this + 6));
      return WebKit::WebPage::scheduleFullEditorStateUpdate(v2);
    }
  }
  return this;
}

WTF *WebKit::WebPage::textInputContextsInRect(uint64_t a1, uint64_t *a2, float a3, float a4, float a5, float a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(float *)int v27 = a3;
  *(float *)&v27[1] = a4;
  *(float *)&v27[2] = a5;
  *(float *)&v27[3] = a6;
  uint64_t result = (WTF *)WebCore::Page::editableElementsInRect(&v23, *(WebCore::Page **)(a1 + 48), (const WebCore::FloatRect *)v27);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (v24)
  {
    if (v24 >= 0x3333334)
    {
      __break(0xC471u);
      return result;
    }
    unsigned int v10 = 80 * v24;
    int v11 = (WTF *)WTF::fastMalloc((WTF *)(80 * v24));
    LODWORD(v26) = v10 / 0x50;
    uint64_t v25 = v11;
    if (v24)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v23;
        uint64_t v15 = *(WebCore::Element **)(v23 + 8 * v12);
        uint64_t v16 = *(void *)(*((void *)v15 + 6) + 8);
        uint64_t v17 = *(void *)(a1 + 40);
        *(_OWORD *)((char *)v31 + 8) = *(_OWORD *)(v16 + 432);
        *((void *)&v31[1] + 1) = *(void *)(v16 + 448);
        uint64_t v18 = WebCore::Element::identifier(v15);
        v29[0] = WebCore::Element::boundingBoxInRootViewCoordinates(*(WebCore::Element **)(v14 + 8 * v12));
        v29[1] = v19;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v30, (const WebCore::IntRect *)v29);
        long long v28 = v30[0];
        long long v21 = v31[1];
        v30[1] = v31[0];
        long long v20 = v31[0];
        v30[2] = v31[1];
        *(_OWORD *)uint64_t v13 = v30[0];
        *((void *)v13 + 2) = v17;
        *(_OWORD *)((char *)v13 + 24) = v20;
        *(_OWORD *)((char *)v13 + 40) = v21;
        *((void *)v13 + 8) = v18;
        ++v12;
        uint64_t v13 = (WTF *)((char *)v13 + 80);
      }
      while (v12 < v24);
      HIDWORD(v26) = v12;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v9);
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
  WebCore::Page::setEditableRegionEnabled(*(WebCore::Page **)(a1 + 48));
  uint64_t result = v25;
  if (v25)
  {
    uint64_t v25 = 0;
    LODWORD(v26) = 0;
    return (WTF *)WTF::fastFree(result, v22);
  }
  return result;
}

void sub_198F44FA0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
}

WebCore::Node *WebKit::WebPage::focusTextInputContextAndPlaceCaret(uint64_t a1, const WebCore::ElementContext *a2, const WebCore::IntPoint *a3, uint64_t *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  WebKit::WebPage::elementForContext(a1, a2, &v18);
  if (v18)
  {
    uint64_t v7 = *(void *)(*(void *)(*((void *)v18 + 6) + 8) + 544);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    uint64_t v9 = *(void *)(v8 + 296);
    if (v9) {
      *(_DWORD *)(v9 + 28) += 2;
    }
    WebCore::Document::updateLayout();
    if (v9)
    {
      if (*(_DWORD *)(v9 + 28) == 2)
      {
        if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
        }
      }
      else
      {
        *(_DWORD *)(v9 + 28) -= 2;
      }
    }
    unsigned int v10 = v18;
    if ((*((void *)v18 + 9) & 0xFFFFFFFFFFFFLL) == 0) {
      goto LABEL_17;
    }
    if ((*(unsigned char *)((*((void *)v18 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198F45310);
    }
    if ((*(uint64_t (**)(WebCore::Node *))(*(void *)v18 + 552))(v18))
    {
      char v19 = 0;
      char v20 = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator();
      char v11 = *(unsigned char *)(a1 + 920);
      *(unsigned char *)(a1 + 920) = 1;
      WebCore::Page::checkedFocusController(v15, *(WebCore::Page **)(a1 + 48));
      WORD2(v16) = 0;
      LODWORD(v16) = 0;
      WebCore::FocusController::setFocusedElement();
      unint64_t v12 = (_DWORD *)v15[0];
      v15[0] = 0;
      if (v12)
      {
        if (!*v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198F45330);
        }
        --*v12;
      }
      if (*(WebCore::Node **)(a1 + 928) == v10 && (*((void *)v10 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(unsigned char *)((*((void *)v10 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198F45360);
        }
        v15[0] = WebCore::ScrollView::rootViewToContents(*(WebCore::ScrollView **)(v8 + 288), a3);
        WebCore::closestEditablePositionInElementForAbsolutePoint();
        if (v16)
        {
          WebCore::makeSimpleRange<WebCore::VisiblePosition &>((uint64_t)v15);
          WebCore::FrameSelection::setSelectedRange();
          std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
        }
        WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
        uint64_t v14 = v16;
        uint64_t v16 = 0;
        if (v14)
        {
          if (*((_DWORD *)v14 + 7) == 2)
          {
            if ((*((_WORD *)v14 + 17) & 0x400) == 0) {
              WebCore::Node::removedLastRef(v14);
            }
          }
          else
          {
            *((_DWORD *)v14 + 7) -= 2;
          }
        }
      }
      else
      {
        WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
      }
      *(unsigned char *)(a1 + 920) = v11;
      MEMORY[0x1997355E0](v17);
    }
    else
    {
LABEL_17:
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
    uint64_t result = v18;
    if (v18)
    {
      if (*((_DWORD *)v18 + 7) == 2)
      {
        if ((*((_WORD *)v18 + 17) & 0x400) == 0) {
          return (WebCore::Node *)WebCore::Node::removedLastRef(v18);
        }
      }
      else
      {
        *((_DWORD *)v18 + 7) -= 2;
      }
    }
  }
  else
  {
    return (WebCore::Node *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
  return result;
}

void sub_198F45368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, uint64_t a16, char a17, WebCore::Node *a18)
{
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  uint64_t v22 = a14;
  a14 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 7) == 2)
    {
      if ((*((_WORD *)v22 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v22);
      }
    }
    else
    {
      *((_DWORD *)v22 + 7) -= 2;
    }
  }
  *(unsigned char *)(v19 + 920) = v20;
  MEMORY[0x1997355E0](&a17);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
  if (a18)
  {
    if (*((_DWORD *)a18 + 7) == 2)
    {
      if ((*((_WORD *)a18 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a18);
      }
    }
    else
    {
      *((_DWORD *)a18 + 7) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::didFinishLoadForQuickLookDocumentInMainFrame(WebKit::WebPage *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t result = (unsigned int *)WebCore::SharedMemory::copyBuffer();
  if (v10)
  {
    v7[0] = (uint64_t)v10;
    unsigned int v10 = 0;
    WebCore::ShareableResource::create();
    uint64_t v4 = (unsigned int *)v7[0];
    v7[0] = 0;
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v4);
    if (v9)
    {
      WebCore::ShareableResource::createHandle(v7, v9);
      if (v8)
      {
        uint64_t v6 = v7;
        IPC::MessageSender::send<Messages::WebPageProxy::DidFinishLoadForQuickLookDocumentInMainFrame>((uint64_t)this + 32, (unint64_t *)&v6);
        if (v8) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v7);
        }
      }
      uint64_t v5 = (unsigned int *)v9;
      uint64_t v9 = 0;
      if (v5) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v5);
      }
    }
    uint64_t result = v10;
    unsigned int v10 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

void sub_198F4554C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  }
  uint64_t v16 = *(unsigned int **)(v14 - 32);
  *(void *)(v14 - 32) = 0;
  if (v16) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v16);
  }
  uint64_t v17 = *(unsigned int **)(v14 - 24);
  *(void *)(v14 - 24) = 0;
  if (v17) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidFinishLoadForQuickLookDocumentInMainFrame>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1921;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  char v8 = v12;
  unint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F456A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPage::animationDidFinishForElement(WebCore::Page **this, const WebCore::Element *a2)
{
  WebCore::Page::checkedFocusController((uint64_t *)&v19, this[6]);
  uint64_t result = WebCore::FocusController::focusedOrMainFrame(v19);
  uint64_t v5 = result;
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  }
  uint64_t v6 = v19;
  uint64_t v19 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198F458F0);
    }
    --*(_DWORD *)v6;
  }
  if (result)
  {
    uint64_t v7 = *(unsigned char **)(*(void *)(result + 296) + 3096);
    if (v7[153])
    {
      uint64_t v9 = (WebCore::Position *)(v7 + 120);
      uint64_t v8 = *((void *)v7 + 15);
      if (!v8 || (*(unsigned char *)(v8 + 22) & 8) != 0)
      {
        char v11 = (WebCore::Position *)(v7 + 136);
        uint64_t v10 = *((void *)v7 + 17);
        if ((!v10 || (*(unsigned char *)(v10 + 22) & 8) != 0)
          && (v7[153] != 1
           || WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(v7 + 56))))
        {
          unint64_t v12 = (const WebCore::Node *)WebCore::Position::containerNode(v9);
          uint64_t v13 = v12;
          if (v12) {
            *((_DWORD *)v12 + 7) += 2;
          }
          if (WebCore::Node::containsIncludingShadowDOM(a2, v12))
          {
            *(unsigned char *)(*(void *)(*(void *)(v5 + 296) + 3096) + 24) = 1;
            WebKit::WebPage::scheduleFullEditorStateUpdate(this);
          }
          else
          {
            uint64_t v14 = (const WebCore::Node *)WebCore::Position::containerNode(v11);
            uint64_t v15 = v14;
            if (v14) {
              *((_DWORD *)v14 + 7) += 2;
            }
            if (v13 != v14 && WebCore::Node::containsIncludingShadowDOM(a2, v14))
            {
              *(unsigned char *)(*(void *)(*(void *)(v5 + 296) + 3096) + 24) = 1;
              WebKit::WebPage::scheduleFullEditorStateUpdate(this);
            }
            if (v15)
            {
              if (*((_DWORD *)v15 + 7) == 2)
              {
                if ((*((_WORD *)v15 + 17) & 0x400) == 0) {
                  WebCore::Node::removedLastRef(v15);
                }
              }
              else
              {
                *((_DWORD *)v15 + 7) -= 2;
              }
            }
          }
          if (v13)
          {
            if (*((_DWORD *)v13 + 7) == 2)
            {
              if ((*((_WORD *)v13 + 17) & 0x400) == 0) {
                WebCore::Node::removedLastRef(v13);
              }
            }
            else
            {
              *((_DWORD *)v13 + 7) -= 2;
            }
          }
        }
      }
    }
    uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  if (*(double *)(*((void *)this[6] + 14) + 432) != 0.0)
  {
    uint64_t result = WebCore::Document::isTopDocument(*(WebCore::Document **)(*((void *)a2 + 6) + 8));
    if (result)
    {
      uint64_t v16 = *((void *)a2 + 9) & 0xFFFFFFFFFFFFLL;
      if (v16)
      {
        if ((*(unsigned char *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198F45924);
        }
        int v17 = *(_DWORD *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x14);
        int v18 = *(_DWORD *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
        *(_DWORD *)((*((void *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x10) = v18;
        if ((v17 & 0x1800000) == 0x1000000 && (*(void *)(v16 + 96) & 0x380000) == 0x300000)
        {
          uint64_t result = WebKit::WebPage::scheduleLayoutViewportHeightExpansionUpdate((uint64_t)this);
          int v18 = *(_DWORD *)(v16 + 16);
        }
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x198F45944);
        }
        *(_DWORD *)(v16 + 16) = v18 - 1;
      }
    }
  }
  return result;
}

void sub_198F4595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v12)
  {
    if (*(_DWORD *)(v12 + 28) == 2)
    {
      if ((*(_WORD *)(v12 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
    }
    else
    {
      *(_DWORD *)(v12 + 28) -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)(v11 + 28) == 2)
    {
      if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
    }
    else
    {
      *(_DWORD *)(v11 + 28) -= 2;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::shouldDismissKeyboardAfterTapAtPoint(uint64_t a1, uint64_t *a2, float a3, float a4)
{
  *(float *)uint64_t v14 = a3;
  *(float *)&v14[1] = a4;
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 160);
  if (v5) {
    BOOL v6 = *(unsigned char *)(v5 + 144) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = (unsigned int *)(v5 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
    uint64_t v8 = *(WebCore::ScrollView **)(v5 + 288);
    if (!v8)
    {
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    }
    ++*((_DWORD *)v8 + 2);
    uint64_t v13 = 0;
    uint64_t v9 = WebCore::LocalFrame::nodeRespondingToClickEvents((WebCore::LocalFrame *)v5, (const WebCore::FloatPoint *)v14, (WebCore::FloatPoint *)&v13, 0);
    uint64_t v10 = v9;
    if (!v9)
    {
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
LABEL_19:
      if (*((_DWORD *)v8 + 2) == 1) {
        (*(void (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
      }
      else {
        --*((_DWORD *)v8 + 2);
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    }
    *(_DWORD *)(v9 + 28) += 2;
    if (WebCore::Node::computeEditability())
    {
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
    }
    else
    {
      if ((*(_WORD *)(v10 + 32) & 8) != 0)
      {
        *(_DWORD *)(v10 + 28) += 2;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 848))(v10))
        {
          WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
          if (*(_DWORD *)(v10 + 28) == 2)
          {
            if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
          }
          else
          {
            *(_DWORD *)(v10 + 28) -= 2;
          }
          goto LABEL_17;
        }
        if (*(_DWORD *)(v10 + 28) == 2)
        {
          if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v10);
          }
        }
        else
        {
          *(_DWORD *)(v10 + 28) -= 2;
        }
      }
      WebCore::ScrollView::unobscuredContentSize(v8);
      BOOL v12 = 0;
      WebCore::Node::absoluteBoundingRect((WebCore::Node *)v10, &v12);
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
    }
LABEL_17:
    if (*(_DWORD *)(v10 + 28) == 2)
    {
      if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
    }
    else
    {
      *(_DWORD *)(v10 + 28) -= 2;
    }
    goto LABEL_19;
  }

  return (unsigned int *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
}

void sub_198F45CD0(_Unwind_Exception *a1)
{
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_198F45EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_198F45FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, CFTypeRef cf)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AsyncScrollingCoordinator::isAsyncScrollingCoordinator(WebCore::AsyncScrollingCoordinator *this)
{
  return 1;
}

uint64_t WebCore::AsyncScrollingCoordinator::hasVisibleSlowRepaintViewportConstrainedObjects()
{
  return 0;
}

void WebKit::FindIndicatorOverlayClientIOS::~FindIndicatorOverlayClientIOS(WebKit::FindIndicatorOverlayClientIOS *this)
{
  *(void *)this = &unk_1EE9DFAF8;
  uint64_t v2 = (WebCore::TextIndicator *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v2);
  }
}

void WebKit::FindIndicatorOverlayClientIOS::~FindIndicatorOverlayClientIOS(WebKit::FindIndicatorOverlayClientIOS *this, void *a2)
{
  *(void *)this = &unk_1EE9DFAF8;
  BOOL v3 = (WebCore::TextIndicator *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v3);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::FindIndicatorOverlayClientIOS::mouseEvent()
{
  return 0;
}

uint64_t WebCore::PageOverlayClient::copyAccessibilityAttributeStringValueForPoint()
{
  return 0;
}

uint64_t WebCore::PageOverlayClient::copyAccessibilityAttributeBoolValueForPoint()
{
  return 0;
}

void WebCore::PageOverlayClient::copyAccessibilityAttributeNames(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (!*a2 || (uint64_t v3 = *(unsigned int *)(*a2 - 12), !v3))
  {
    uint64_t v11 = 0;
    goto LABEL_31;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_9;
    }
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    double v8 = (double)v3;
    double v9 = (double)v7;
    double v10 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400) {
    goto LABEL_6;
  }
LABEL_9:
  double v8 = (double)v3;
  double v9 = (double)v7;
  double v10 = 0.416666667;
LABEL_10:
  if (v9 * v10 <= v8) {
    LODWORD(v7) = 2 * v7;
  }
  if (v7 <= 8) {
    unsigned int v12 = 8;
  }
  else {
    unsigned int v12 = v7;
  }
  uint64_t v13 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v12 + 16));
  uint64_t v11 = v13 + 4;
  void v13[2] = v12 - 1;
  uint64_t v13[3] = v12;
  _DWORD *v13 = 0;
  v13[1] = v3;
  uint64_t v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(a2);
  uint64_t v15 = (uint64_t *)v14;
  uint64_t v16 = a2;
  if (*a2) {
    uint64_t v17 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 != v14)
  {
    do
    {
      unsigned int v18 = v13[2];
      unsigned int v26 = -1640531527;
      __int16 v27 = 0;
      char v28 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v26, v15);
      int v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v26);
      int v20 = 0;
      do
      {
        uint64_t v21 = v19 & v18;
        int v19 = ++v20 + v21;
      }
      while (*(_OWORD *)&v11[4 * v21] != 0);
      long long v22 = *(_OWORD *)v15;
      v15 += 2;
      *(_OWORD *)&v11[4 * v21] = v22;
      while (v15 != v16)
      {
        if (*(_OWORD *)v15 != 0 && v15[1] != -1) {
          goto LABEL_30;
        }
        v15 += 2;
      }
      uint64_t v15 = v16;
LABEL_30:
      ;
    }
    while (v15 != (uint64_t *)v17);
  }
LABEL_31:
  uint64_t v24 = *a1;
  *a1 = (uint64_t)v11;
  if (v24) {
    WTF::fastFree((WTF *)(v24 - 16), a2);
  }
  return a1;
}

unsigned int *WebCore::GraphicsContextState::setFillColor(WebCore::GraphicsContextState *this, const WebCore::Color *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v7 = 0;
  WebCore::SourceBrush::SourceBrush();
  uint64_t result = (unsigned int *)WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>((uint64_t)this, 1, 0, (uint64_t)&v8);
  if (v10 != -1) {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1EE9DFB48[v10])(&v5, &v9);
  }
  int v10 = -1;
  if ((v8 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  if (v7 != -1) {
    return (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1EE9DFB48[v7])(&v5, &v6);
  }
  return result;
}

void sub_198F4644C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v28 = *(unsigned int *)(v26 + 80);
  if (v28 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9DFB48[v28])(&a13, &a26);
  }
  *(_DWORD *)(v26 + 80) = -1;
  if ((a24 & 0x8000000000000) != 0)
  {
    uint64_t v29 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
  }
  if (a23 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9DFB48[a23])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + a3;
  uint64_t result = WebCore::operator==((uint64_t *)(a1 + a3), (unint64_t *)a4);
  if ((result & 1) == 0)
  {
    uint64_t result = WebCore::Color::operator=();
    uint64_t v9 = *(unsigned int *)(v7 + 80);
    uint64_t v10 = *(unsigned int *)(a4 + 80);
    if (v9 == -1)
    {
      if (v10 == -1) {
        goto LABEL_5;
      }
    }
    else if (v10 == -1)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9DFB48[v9])(&v12, v7 + 16);
      *(_DWORD *)(v7 + 80) = -1;
      goto LABEL_5;
    }
    uint64_t v11 = v7 + 16;
    uint64_t result = ((uint64_t (*)(uint64_t *))off_1EE9DFB60[v10])(&v11);
LABEL_5:
    *(_DWORD *)(a1 + 176) |= a2;
  }
  return result;
}

uint64_t WebCore::operator==(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if ((*a1 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0) {
      return 0;
    }
    BOOL v16 = 0;
    unint64_t v17 = 0;
    long long v18 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
    long long v21 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    long long v22 = v18;
    do
    {
      if (*((float *)&v22 + v17) != *((float *)&v21 + v17)) {
        break;
      }
      BOOL v16 = v17++ > 2;
    }
    while (v17 != 4);
    if (!v16 || HIBYTE(v2) != HIBYTE(v3) || BYTE6(v2) != BYTE6(v3)) {
      return 0;
    }
  }
  else
  {
    BOOL v4 = v2 == v3 && (v3 & 0x8000000000000) == 0;
    if (!v4) {
      return 0;
    }
  }
  int v5 = *((_DWORD *)a1 + 20);
  int v6 = *((_DWORD *)a2 + 20);
  BOOL v7 = v6 == v5;
  if (v6 == -1) {
    BOOL v7 = 0;
  }
  if (v5 == -1) {
    BOOL v7 = v6 == -1;
  }
  if (!v7) {
    return 0;
  }
  if (v5 == 1) {
    uint64_t v8 = a1 + 2;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v5 != 1)
  {
    if (v5 != 2) {
      return 1;
    }
    if (v6 == 2)
    {
      uint64_t v13 = a1[2];
      return v13 == a2[2];
    }
    goto LABEL_44;
  }
  if (v6 != 1) {
    goto LABEL_44;
  }
  uint64_t v9 = 0;
  do
  {
    double v10 = *(double *)&a1[v9 + 4];
    double v11 = *(double *)&a2[v9 + 4];
    if (v10 != v11) {
      break;
    }
    BOOL v4 = v9++ == 5;
  }
  while (!v4);
  if (v10 != v11) {
    return 0;
  }
  int v12 = *((_DWORD *)v8 + 2);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (!*((_DWORD *)a2 + 6))
      {
        uint64_t v13 = *v8;
        return v13 == a2[2];
      }
      return 0;
    }
LABEL_44:
    int v19 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t)std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v19, v20);
  }
  if (*((_DWORD *)a2 + 6) != 1) {
    return 0;
  }
  return a2[2] == *v8;
}

uint64_t *std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result;
  if (*((unsigned __int8 *)result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*((unsigned char *)result + 32))
    {
      uint64_t v4 = *(void *)a2;
      *(void *)a2 = 0;
      uint64_t v5 = *result;
      *uint64_t result = v4;
      uint64_t v10 = v5;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      uint64_t v7 = v3[2];
      v3[2] = v6;
      uint64_t v10 = v7;
      uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
    }
  }
  else if (*((unsigned char *)result + 32))
  {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](result);
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a2 = 0;
    *uint64_t result = v8;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    result[2] = v9;
    *((_DWORD *)result + 6) = *(_DWORD *)(a2 + 24);
    *((unsigned char *)result + 32) = 1;
  }
  return result;
}

uint64_t *std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](uint64_t *result)
{
  if (*((unsigned char *)result + 32))
  {
    uint64_t v1 = result;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(result + 2);
    uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v1);
    *((unsigned char *)v1 + 32) = 0;
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy17InterpretKeyEventEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t WebKit::FocusedElementInformation::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v9;
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  WTF::String::operator=((uint64_t *)(a1 + 192), (uint64_t *)(a2 + 192));
  uint64_t v11 = *(unsigned int *)(a1 + 212);
  if (v11) {
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(a1 + 200), (WTF::StringImpl *)(*(void *)(a1 + 200) + 16 * v11));
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 200, (_DWORD *)(a2 + 200));
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  WTF::String::operator=((uint64_t *)(a1 + 224), (uint64_t *)(a2 + 224));
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  WTF::String::operator=((uint64_t *)(a1 + 240), (uint64_t *)(a2 + 240));
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  WTF::URL::operator=(a1 + 256, a2 + 256);
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  WTF::String::operator=((uint64_t *)(a1 + 304), (uint64_t *)(a2 + 304));
  WTF::String::operator=((uint64_t *)(a1 + 312), (uint64_t *)(a2 + 312));
  WTF::String::operator=((uint64_t *)(a1 + 320), (uint64_t *)(a2 + 320));
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  WebCore::Color::operator=();
  uint64_t v12 = *(unsigned int *)(a1 + 356);
  if (v12) {
    WTF::VectorDestructor<true,WebCore::Color>::destruct(*(void **)(a1 + 344), (void *)(*(void *)(a1 + 344) + 8 * v12));
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 344, (_DWORD *)(a2 + 344));
  long long v13 = *(_OWORD *)(a2 + 360);
  long long v14 = *(_OWORD *)(a2 + 376);
  long long v15 = *(_OWORD *)(a2 + 392);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v14;
  *(_OWORD *)(a1 + 392) = v15;
  *(_OWORD *)(a1 + 360) = v13;
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    long long v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        *long long v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)(v5 + 28) == 2)
          {
            if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v5);
            }
          }
          else
          {
            *(_DWORD *)(v5 + 28) -= 2;
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::SimpleRange,false> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*((unsigned char *)result + 32))
    {
      uint64_t v4 = *(void *)a2;
      *(_DWORD *)(v4 + 28) = *(_DWORD *)(*(void *)a2 + 28) + 2;
      uint64_t v5 = *result;
      *uint64_t result = v4;
      uint64_t v10 = v5;
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 2) = *(_DWORD *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 16);
      *(_DWORD *)(v6 + 28) += 2;
      uint64_t v7 = v3[2];
      v3[2] = v6;
      uint64_t v10 = v7;
      uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v10);
      *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
    }
  }
  else if (*((unsigned char *)result + 32))
  {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::reset[abi:sn180100](result);
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    *(_DWORD *)(v8 + 28) = *(_DWORD *)(*(void *)a2 + 28) + 2;
    *uint64_t result = v8;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    *(_DWORD *)(v9 + 28) += 2;
    result[2] = v9;
    *((_DWORD *)result + 6) = *(_DWORD *)(a2 + 24);
    *((unsigned char *)result + 32) = 1;
  }
  return result;
}

float WebCore::BorderData::borderLeftWidth(WebCore::BorderData *this)
{
  if ((*((unsigned char *)this + 20) & 0xE) == 0) {
    return 0.0;
  }
  uint64_t v1 = *((void *)this + 12);
  if (!*(unsigned char *)(v1 + 5) || *(unsigned char *)(v1 + 76) != 4) {
    return *((float *)this + 4);
  }
  if (*(unsigned char *)(v1 + 78)) {
    return *(float *)(v1 + 72);
  }
  return (float)*(int *)(v1 + 72);
}

float WebCore::BorderData::borderTopWidth(WebCore::BorderData *this)
{
  if ((*((unsigned char *)this + 68) & 0xE) == 0) {
    return 0.0;
  }
  uint64_t v1 = *((void *)this + 12);
  if (!*(unsigned char *)(v1 + 5) || *(unsigned char *)(v1 + 52) != 4) {
    return *((float *)this + 16);
  }
  if (*(unsigned char *)(v1 + 54)) {
    return *(float *)(v1 + 48);
  }
  return (float)*(int *)(v1 + 48);
}

uint64_t WebKit::insideImageOverlay(WebCore::Node **this, const WebCore::VisiblePosition *a2)
{
  unint64_t v2 = *this;
  if (*this) {
    *((_DWORD *)v2 + 7) += 2;
  }
  uint64_t v9 = v2;
  int v10 = *((_DWORD *)this + 2);
  char v11 = *((unsigned char *)this + 12);
  uint64_t v3 = WebCore::Position::containerNode((WebCore::Position *)&v9);
  uint64_t v5 = v3;
  if (v3) {
    *(_DWORD *)(v3 + 28) += 2;
  }
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 7) == 2)
    {
      if ((*((_WORD *)v6 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v6);
      }
    }
    else
    {
      *((_DWORD *)v6 + 7) -= 2;
    }
  }
  if (!v5) {
    return 0;
  }
  uint64_t isInsideOverlay = WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)v5, v4);
  if (*(_DWORD *)(v5 + 28) == 2)
  {
    if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
  }
  else
  {
    *(_DWORD *)(v5 + 28) -= 2;
  }
  return isInsideOverlay;
}

void sub_198F46CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9)
{
  if (*(_DWORD *)(v9 + 28) == 2)
  {
    if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  unint64_t v2 = a1;
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    do
    {
      if (*a1 != -1) {
        a1 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1);
      }
      ++a1;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t std::unique_ptr<WebCore::IgnoreSelectionChangeForScope>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = (WTF *)MEMORY[0x199737F60]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebCore::Position::deprecatedEditingOffset(WebCore::Position *this)
{
  if ((*((unsigned char *)this + 12) & 8) == 0 && ((int v1 = *((unsigned char *)this + 12) & 7, v1 != 2) ? (v2 = v1 == 4) : (v2 = 1), v2)) {
    return MEMORY[0x1F4176320]();
  }
  else {
    return *((unsigned int *)this + 2);
  }
}

WTF::StringImpl *WebKit::WebPage::applyLinkDecorationFiltering(uint64_t a1, void *a2, uint64_t a3)
{
  WebKit::WebPage::applyLinkDecorationFilteringWithResult(a2, a3, 0, (uint64_t)v6);
  WTF::URL::URL(a1, (uint64_t *)v6);
  uint64_t result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198F46E6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::linkIndicatorPositionInformation(WebKit *this, WebKit::WebPage *a2, WebCore::Element *a3, const WebKit::InteractionInformationRequest *a4, WebKit::InteractionInformationAtPosition *a5)
{
  if (*((unsigned char *)a3 + 9))
  {
    WebCore::makeRangeSelectingNodeContents(v21, a2, (Node *)a2);
    WebCore::TextIndicator::createWithRange();
    if (v20)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v13, (const WebCore::TextIndicatorData *)(v20 + 8));
      WebCore::TextIndicatorData::operator=((uint64_t)a4 + 280, v13);
      if ((v19 & 0x8000000000000) != 0)
      {
        uint64_t v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v6);
        }
      }
      uint64_t v7 = v18;
      long long v18 = 0;
      if (v7)
      {
        if (v7[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
        }
        else {
          --v7[2];
        }
      }
      uint64_t v8 = v17;
      unint64_t v17 = 0;
      if (v8)
      {
        if (v8[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
        }
        else {
          --v8[2];
        }
      }
      uint64_t v9 = v16;
      BOOL v16 = 0;
      if (v9)
      {
        if (v9[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
        }
        else {
          --v9[2];
        }
      }
      int v10 = v14;
      if (v14)
      {
        long long v14 = 0;
        int v15 = 0;
        WTF::fastFree(v10, v6);
      }
      char v11 = (WebCore::TextIndicator *)v20;
      uint64_t v20 = 0;
      if (v11) {
        WTF::RefCounted<WebCore::TextIndicator>::deref(v11);
      }
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v22);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v21);
  }
}

void sub_198F4706C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22)
{
  if ((a22 & 0x8000000000000) != 0)
  {
    uint64_t v24 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, a2);
    }
  }
  if (a21)
  {
    if (a21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
    }
    else {
      --a21[2];
    }
  }
  if (a20)
  {
    if (a20[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
    }
    else {
      --a20[2];
    }
  }
  if (a19)
  {
    if (a19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
    }
    else {
      --a19[2];
    }
  }
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  uint64_t v25 = *(WebCore::TextIndicator **)(v22 - 72);
  *(void *)(v22 - 72) = 0;
  if (v25) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v25);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v22 - 48));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v22 - 64));
  _Unwind_Resume(a1);
}

void WebKit::imageRendererAndImage(WebKit *this, unint64_t a2)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFLL) == 0) {
    goto LABEL_10;
  }
  if ((*(unsigned char *)((a2 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if ((((*(unsigned char *)((a2 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(unsigned char *)((a2 & 0xFFFFFFFFFFFFLL) + 0x35)) != 0)
    {
      if (WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)((a2 & 0xFFFFFFFFFFFFLL)
                                                                                                  + 0xE0)
                                                                                      + 24)))
      {
        if ((*(_WORD *)(WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(v3 + 224) + 24))
                                                      + 557) >> 5)
           - 3 > 1)
        {
          WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(v3 + 224) + 24));
          uint64_t v4 = WebCore::CachedImage::imageForRenderer();
          if (v4)
          {
            uint64_t v5 = v4;
            if ((*(float (**)(uint64_t, void))(*(void *)v4 + 168))(v4, 0) > 1.0)
            {
              (*(void (**)(uint64_t, void))(*(void *)v5 + 168))(v5, 0);
              if (v6 > 1.0)
              {
                *(void *)this = v3;
                *((void *)this + 1) = v5;
                char v7 = 1;
LABEL_11:
                *((unsigned char *)this + 16) = v7;
                return;
              }
            }
          }
        }
      }
    }
LABEL_10:
    char v7 = 0;
    *(unsigned char *)this = 0;
    goto LABEL_11;
  }
  __break(0xC471u);
}

uint64_t WebKit::boundsPositionInformation(WebKit *this, WebCore::RenderObject *a2, InteractionInformationAtPosition *a3)
{
  if ((*((unsigned char *)this + 52) & 7) != 3 || (*((unsigned char *)this + 53) & 1) == 0)
  {
    uint64_t result = WebCore::RenderObject::absoluteBoundingBoxRect(this, 1, 0);
    *((void *)a2 + 22) = result;
    *((void *)a2 + 23) = v17;
  }
  else
  {
    ++*((_DWORD *)this + 4);
    WebCore::RenderBox::absoluteContentQuad(v18, this);
    WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v18);
    v19[0] = v6;
    v19[1] = v7;
    void v19[2] = v8;
    v19[3] = v9;
    uint64_t result = WebCore::enclosingIntRect((WebCore *)v19, v10);
    *((void *)a2 + 22) = result;
    *((void *)a2 + 23) = v12;
    int v13 = *((_DWORD *)this + 4);
    if (!v13)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    *((_DWORD *)this + 4) = v13 - 1;
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 3) + 8) + 48) + 8) + 544);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 8);
    if (*(void *)(*(void *)(v15 + 128) + 8) != v15)
    {
      uint64_t result = WebCore::ScrollView::contentsToRootView(*(WebCore::ScrollView **)(v15 + 288), (WebCore::RenderObject *)((char *)a2 + 176));
      *((void *)a2 + 22) = result;
      *((void *)a2 + 23) = v16;
    }
  }
  return result;
}

void sub_198F47400(_Unwind_Exception *a1)
{
  int v2 = *(_DWORD *)(v1 + 16);
  if (v2)
  {
    *(_DWORD *)(v1 + 16) = v2 - 1;
    _Unwind_Resume(a1);
  }
  __break(0xC471u);
}

uint64_t WebKit::isAssistableElement(WebKit *this, WebCore::Element *a2)
{
  if ((*((_WORD *)this + 16) & 0x10) == 0) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)(*((void *)this + 13) + 24);
  if (v3 == *(void *)(*MEMORY[0x1E4FB6B08] + 24) || v3 == *(void *)(*MEMORY[0x1E4FB6690] + 24)) {
    return 1;
  }
  if (v3 == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    *((_DWORD *)this + 7) += 2;
    if ((WebCore::HTMLInputElement::isColorControl(this) & 1) != 0
      || (WebCore::HTMLInputElement::isWeekField(this) & 1) != 0
      || (WebCore::HTMLInputElement::isTextField(this) & 1) != 0
      || (WebCore::HTMLInputElement::isDateField(this) & 1) != 0
      || (WebCore::HTMLInputElement::isDateTimeLocalField(this) & 1) != 0
      || (WebCore::HTMLInputElement::isMonthField(this) & 1) != 0)
    {
      uint64_t isTimeField = 1;
    }
    else
    {
      uint64_t isTimeField = WebCore::HTMLInputElement::isTimeField(this);
    }
    if (*((_DWORD *)this + 7) == 2)
    {
      if ((*((_WORD *)this + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(this);
      }
    }
    else
    {
      *((_DWORD *)this + 7) -= 2;
    }
    return isTimeField;
  }
  if (v3 == *(void *)(*MEMORY[0x1E4FB6AB0] + 24)) {
    return 0;
  }
LABEL_20:

  return WebCore::Node::isContentEditable(this);
}

void sub_198F47584(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 28) == 2)
  {
    if ((*(_WORD *)(v1 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
  }
  else
  {
    *(_DWORD *)(v1 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<WebCore::SharedMemoryHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SharedMemoryHandle,false>>(WTF::MachSendRight *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((unsigned char *)this + 16))
    {
      WTF::MachSendRight::operator=();
      *((void *)this + 1) = *(void *)(a2 + 8);
    }
  }
  else if (*((unsigned char *)this + 16))
  {
    WTF::MachSendRight::~MachSendRight(this);
    *((unsigned char *)this + 16) = 0;
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    *((void *)this + 1) = *(void *)(a2 + 8);
    *((unsigned char *)this + 16) = 1;
  }
}

uint64_t *std::__optional_destruct_base<WebCore::AutofillElements,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1)
{
  if (*((unsigned char *)a1 + 24))
  {
    uint64_t v2 = a1[2];
    a1[2] = 0;
    if (v2)
    {
      if (*(_DWORD *)(v2 + 28) == 2)
      {
        if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v2);
        }
      }
      else
      {
        *(_DWORD *)(v2 + 28) -= 2;
      }
    }
    uint64_t v3 = a1[1];
    a1[1] = 0;
    if (v3)
    {
      if (*(_DWORD *)(v3 + 28) == 2)
      {
        if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
      }
      else
      {
        *(_DWORD *)(v3 + 28) -= 2;
      }
    }
    uint64_t v4 = *a1;
    *a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 28) == 2)
      {
        if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
      }
      else
      {
        *(_DWORD *)(v4 + 28) -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v3;
    do
    {
      int v10 = (uint64_t *)(v2 + 8 * v8);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          long long v21 = (uint64_t *)(v12 + 8 * v19);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v21);
          uint64_t v22 = *v10;
          *int v10 = 0;
          *long long v21 = v22;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v2 + 8 * v8));
        }
        else
        {
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v2 + 8 * v8));
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
    for (int i = 1; ; ++i)
    {
      uint64_t v8 = *(void *)(result + 8 * v6);
      if (v8 != -1)
      {
        if (!v8) {
          return 0;
        }
        if (v8 == a2) {
          break;
        }
      }
      unsigned int v6 = (v6 + i) & v2;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    unsigned int v15 = -1640531527;
    __int16 v16 = 0;
    char v17 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
    uint64_t v6 = a2[1];
    uint64_t v7 = v5 & v4;
    uint64_t v8 = (uint64_t *)(v3 + 16 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
      return v3 + 16 * v7;
    }
    else
    {
      int v12 = 1;
      while (v9 | v10)
      {
        uint64_t v7 = (v7 + v12) & v4;
        int v13 = (uint64_t *)(v3 + 16 * v7);
        uint64_t v9 = *v13;
        uint64_t v10 = v13[1];
        ++v12;
        if (v9 == *a2 && v10 == v6) {
          return v3 + 16 * v7;
        }
      }
      return 0;
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::PageOverlay>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x1997305F0](result - 2);
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::RelayAccessibilityNotification>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2038;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v15 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  uint64_t v11 = v15;
  unsigned int v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F47B20(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::InterpretKeyEvent>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3764, a3, &v26, &v25);
  uint64_t v11 = v25;
  if (a4)
  {
    **((unsigned char **)v25 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<WebKit::EditorState,void>::encode(v11, *(void *)a2);
  char v12 = *(unsigned char *)(a2 + 8);
  int v13 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (!v14)
  {
    __break(0xC471u);
    goto LABEL_19;
  }
  unsigned char *v13 = v12;
  IPC::Connection::sendSyncMessage(a1, v26, (uint64_t *)&v25, a4, (uint64_t)&v23, a6);
  if (!v24)
  {
    __int16 v22 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v23, &v22);
    if (!HIBYTE(v22))
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + 16) = 1;
      int v15 = v24;
      if (v24 == -1) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    int v15 = v24;
    if (!v24)
    {
      char v17 = v23;
      uint64_t v23 = 0;
      char v18 = v22;
      *(void *)a5 = v17;
      *(unsigned char *)(a5 + 8) = v18;
      *(_DWORD *)(a5 + 16) = 0;
      goto LABEL_11;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  if (v24 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    __break(1u);
LABEL_19:
    JUMPOUT(0x198F47CD4);
  }
  *(unsigned char *)a5 = (_BYTE)v23;
  int v15 = 1;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_11:
  ((void (*)(__int16 *, uint64_t **))off_1EE9DFBE8[v15])(&v22, &v23);
LABEL_12:
  uint64_t result = v25;
  uint64_t v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

void sub_198F47CE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16, IPC::Encoder *a17)
{
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9DFBE8[a16])(&a12, &a14);
  }
  char v18 = a17;
  a17 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::handleSyntheticClick(WebCore::Node &,WebCore::FloatPoint const&,WTF::OptionSet<WebKit::WebEventModifier>,unsigned int)::$_1,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DFC08;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::handleSyntheticClick(WebCore::Node &,WebCore::FloatPoint const&,WTF::OptionSet<WebKit::WebEventModifier>,unsigned int)::$_1,void>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9DFC08;
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree((WTF *)a1, v2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPage::handleSyntheticClick(WebCore::Node &,WebCore::FloatPoint const&,WTF::OptionSet<WebKit::WebEventModifier>,unsigned int)::$_1,void>::call(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (!*(unsigned char *)(v1 + 186))
  {
    uint64_t v2 = *(void *)(v1 + 48);
    if (v2)
    {
      uint64_t v3 = result;
      if (result[9] == 2)
      {
        unsigned int v4 = *(WTF::WallTime **)(v2 + 160);
        if (v4) {
          BOOL v5 = *((unsigned char *)v4 + 144) == 0;
        }
        else {
          BOOL v5 = 0;
        }
        if (v5)
        {
          WebKit::dispatchSyntheticMouseMove(v4);
          uint64_t v1 = *((void *)v3 + 1);
        }
        uint64_t v7 = *(void *)(v1 + 32);
        uint64_t v6 = v1 + 32;
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
        uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v9 = 1931;
        *((void *)v9 + 1) = v8;
        *((void *)v9 + 66) = (char *)v9 + 16;
        *((void *)v9 + 67) = 512;
        *((void *)v9 + 68) = 0;
        *((void *)v9 + 70) = 0;
        *((void *)v9 + 69) = 0;
        IPC::Encoder::encodeHeader(v9);
        char v18 = v9;
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v18, 0);
        uint64_t result = (unsigned int *)v18;
        char v18 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
          return (unsigned int *)WTF::fastFree(v11, v12);
        }
      }
      else
      {
        uint64_t v13 = *((void *)result + 2);
        uint64_t v14 = (float *)(result + 6);
        unsigned int v15 = *((unsigned __int8 *)result + 32);
        int v16 = result[10];
        uint64_t v17 = *((void *)result + 1);
        return WebKit::WebPage::completeSyntheticClick(v17, v13, v14, v15, 1, v16);
      }
    }
  }
  return result;
}

void sub_198F47F64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishContentChangeObserving(WKContentChange)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DFC30;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishContentChangeObserving(WKContentChange)::$_0,void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)&unk_1EE9DFC30;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree((WTF *)a1, v4);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishContentChangeObserving(WKContentChange)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (!*(unsigned char *)(v1 + 186))
  {
    uint64_t v2 = *(void *)(v1 + 48);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t v4 = *((void *)result + 3);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v6 = *((void *)result + 2);
          if (v5 == *(void *)(*(void *)(v6 + 48) + 8))
          {
            if (result[8])
            {
              uint64_t v7 = *(WTF::WallTime **)(v2 + 160);
              if (v7) {
                BOOL v8 = *((unsigned char *)v7 + 144) == 0;
              }
              else {
                BOOL v8 = 0;
              }
              if (v8)
              {
                WebKit::dispatchSyntheticMouseMove(v7);
                uint64_t v1 = *((void *)v3 + 1);
              }
              uint64_t v10 = *(void *)(v1 + 32);
              uint64_t v9 = v1 + 32;
              uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
              char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)char v12 = 1931;
              *((void *)v12 + 1) = v11;
              *((void *)v12 + 66) = (char *)v12 + 16;
              *((void *)v12 + 67) = 512;
              *((void *)v12 + 68) = 0;
              *((void *)v12 + 70) = 0;
              *((void *)v12 + 69) = 0;
              IPC::Encoder::encodeHeader(v12);
              uint64_t v20 = v12;
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v20, 0);
              uint64_t result = (unsigned int *)v20;
              uint64_t v20 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
                return (unsigned int *)WTF::fastFree(v14, v15);
              }
            }
            else
            {
              int v16 = (float *)(result + 9);
              unsigned int v17 = *((unsigned __int8 *)result + 44);
              int v18 = result[12];
              uint64_t v19 = *((void *)result + 1);
              return WebKit::WebPage::completeSyntheticClick(v19, v6, v16, v17, 1, v18);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_198F481F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = (void *)WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>::customDeleteBucket(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = -1;
  if (result)
  {
    if (*(_DWORD *)(result + 28) == 2)
    {
      if ((*(_WORD *)(result + 34) & 0x400) == 0) {
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
    }
    else
    {
      *(_DWORD *)(result + 28) -= 2;
    }
  }
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    char v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          int v24 = (void *)(v15 + 8 * v22);
          *int v24 = 0;
          uint64_t v25 = *v13;
          uint64_t *v13 = 0;
          *int v24 = v25;
          uint64_t v26 = *v13;
          uint64_t *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)(v26 + 28) == 2)
            {
              if ((*(_WORD *)(v26 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v26);
              }
            }
            else
            {
              *(_DWORD *)(v26 + 28) -= 2;
            }
          }
          if (v13 == a3) {
            char v12 = v24;
          }
        }
        else
        {
          uint64_t *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    char v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DFC58;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DFC58;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPage::didFinishLoadingImageForElement(WebCore::HTMLImageElement &)::$_0,void>::call(IPC::Encoder *result)
{
  if (*((unsigned char *)result + 16)) {
    return WebKit::WebPage::computeAndSendEditDragSnapshot(*((WebKit::WebPage **)result + 1));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(WebCore::Element &)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DFC80;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(WebCore::Element &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DFC80;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded(WebCore::Element &)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (*(unsigned char *)(v1 + 944))
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 32) + 56))(v1 + 32);
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v3 = 2114;
    *((void *)v3 + 1) = v2;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 68) = 0;
    *((void *)v3 + 70) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    int v7 = v3;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v1 + 32) + 32))(v1 + 32, &v7, 0);
    uint64_t result = v7;
    int v7 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      uint64_t result = (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  *(unsigned char *)(v1 + 944) = 0;
  return result;
}

void sub_198F486F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)a1, (uint64_t *)(*(void *)a1 + 32 * v3));
  }
  uint64_t v4 = *(uint64_t **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t *WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v3 + 2);
      uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v3);
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    unint64_t v17 = (uint64_t *)(v6 + 8 * v16);
    uint64_t v18 = *v17;
    if (*v17 != -1) {
      break;
    }
    uint64_t v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    unsigned int v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *uint64_t v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v10 = *a2;
      unint64_t v17 = v9;
    }
    *a2 = 0;
    uint64_t v29 = 0;
    uint64_t v19 = *v17;
    *unint64_t v17 = v10;
    uint64_t v30 = v19;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v30);
    uint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v29);
    uint64_t v20 = *v4;
    if (*v4) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v25 = *v4;
    if (*v4) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_25:
        uint64_t result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::expand(v4, v17);
        unint64_t v17 = result;
        uint64_t v25 = *v4;
        if (*v4) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_25;
    }
    uint64_t v24 = v25 + 8 * v28;
    char v23 = 1;
    goto LABEL_30;
  }
  if (v18 != v10) {
    goto LABEL_10;
  }
  if (v7) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v6 - 4);
  }
  char v23 = 0;
  uint64_t v24 = v6 + 8 * v22;
LABEL_30:
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v24;
  *(unsigned char *)(a3 + 16) = v23;
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    unint64_t v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          unsigned int v14 = (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::lookupForReinsert(a1, v13);
          uint64_t v15 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v14);
          uint64_t v16 = *v13;
          uint64_t *v13 = 0;
          *uint64_t v15 = v16;
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v13);
          if (v13 == a3) {
            unint64_t v11 = v14;
          }
        }
        else
        {
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v13);
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPage::selectTextWithGranularityAtPoint(WebCore::IntPoint const&,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DFCA8;
  uint64_t v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPage::selectTextWithGranularityAtPoint(WebCore::IntPoint const&,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DFCA8;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPage::selectTextWithGranularityAtPoint(WebCore::IntPoint const&,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    CFRetain(*(CFTypeRef *)(v3 - 8));
    WebKit::WebPage::setSelectionRange(v4, (int32x2_t *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17));
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 24));
    unsigned int v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 24);
    WTF::CompletionHandler<void ()(void)>::operator()(v6);
  }
}

void sub_198F48CA8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v4 = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = *(void *)a1;
  *(_DWORD *)(a2 + 28) += 2;
  *(void *)(v9 + 8 * v8) = a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

uint64_t WTF::HashTable<std::pair<WebCore::IntSize,double>,WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::IntSize,double>,WebCore::IntPoint>>,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashMap<std::pair<WebCore::IntSize,double>,WebCore::IntPoint,WTF::DefaultHash<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<std::pair<WebCore::IntSize,double>>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::IntSize,double>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(24 * v5 + 16));
  if (v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = (void *)(result + 32);
    do
    {
      *((_OWORD *)v9 - 1) = xmmword_1994F73E0;
      *uint64_t v9 = 0x8000000000000000;
      v9 += 3;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v3;
    do
    {
      uint64_t v12 = (long long *)(v2 + 24 * v10);
      int v13 = *((_DWORD *)v12 + 1);
      if (*(_DWORD *)v12 != -1 || v13 != -1)
      {
        BOOL v15 = !*(_DWORD *)v12 && v13 == 0;
        if (!v15 || *((double *)v12 + 1) != INFINITY)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v19 = WTF::PairHash<WebCore::IntSize,double>::hash(v2 + 24 * v10);
          int v20 = 0;
          do
          {
            uint64_t v21 = v17 + 24 * (v19 & v18);
            int v19 = ++v20 + (v19 & v18);
            if (*(_DWORD *)v21) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = *(_DWORD *)(v21 + 4) == 0;
            }
          }
          while (!v22 || *(double *)(v21 + 8) != INFINITY);
          long long v24 = *v12;
          *(void *)(v21 + 16) = *((void *)v12 + 2);
          *(_OWORD *)uint64_t v21 = v24;
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

unint64_t WTF::PairHash<WebCore::IntSize,double>::hash(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8) + ~(*(void *)(a1 + 8) << 32);
  unint64_t v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  unint64_t v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (0xD7862706ELL
        * (unint64_t)(277951225
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225 * *(_DWORD *)a1
                                                                            + 95187966 * *(_DWORD *)(a1 + 4))) >> 4)
                           + 95187966 * ((v3 >> 31) ^ v3))) >> 4;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::DidStartLoadForQuickLookDocumentInMainFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1950;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  BOOL v15 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  uint64_t v11 = v15;
  BOOL v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F490C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2047;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  BOOL v22 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v12 = &unk_1EE9DFCF8;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  int v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v22, v21, a5);
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v22;
  BOOL v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void sub_198F49244(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DFCF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DFCF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (WTF::RefCountedBase *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
    if (v7)
    {
      uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v2, (WTF::RefCountedBase *)&v6);
      if (v7)
      {
        uint64_t result = v6;
        unint64_t v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    unsigned int v5 = (WTF::RefCountedBase *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5);
  }
  return result;
}

void sub_198F49488(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::RefCountedBase *a1)
{
  uint64_t v3 = 0;
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a1, (WTF::RefCountedBase *)&v3);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198F49514(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::FrameInfo::FrameInfo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DFD48;
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  WTF::URL::URL(a1 + 24, (uint64_t *)(a2 + 8));
  WTF::URL::URL(a1 + 64, (uint64_t *)(a2 + 48));
  *(void *)(a1 + 104) = *(void *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 128) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 132) = v7;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 144) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(a1 + 148) = v8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 152) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a1 + 164) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 156);
  *(_DWORD *)(a1 + 168) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 176) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 184) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a1 + 192) = v12;
  uint64_t v13 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = v13;
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  *(void *)(a1 + 216) = v14;
  *(unsigned char *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 248) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 224, a2 + 208);
  uint64_t v15 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 256) = v15;
  long long v16 = *(_OWORD *)(a2 + 248);
  long long v17 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 294) = *(_OWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 280) = v17;
  *(_OWORD *)(a1 + 264) = v16;
  uint64_t v18 = *a3;
  *a3 = 0;
  *(void *)(a1 + 312) = v18;
  return a1;
}

void API::FrameInfo::~FrameInfo(API::FrameInfo *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((unsigned int *)this + 62);
  if (v5 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_6[v5])(&v7, (char *)this + 224);
  }
  *((_DWORD *)this + 62) = -1;
  uint64_t v6 = (const void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::FrameInfo *)((char *)this + 24));
}

{
  uint64_t vars8;

  API::FrameInfo::~FrameInfo(this, a2);

  JUMPOUT(0x199740C10);
}

void API::FrameInfo::handle(API::FrameInfo *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 33);
  uint64_t v4 = *((void *)this + 34);
  uint64_t v5 = API::Object::newObject(0x28uLL, 11);
  *(void *)uint64_t v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *(void *)uint64_t v5 = &unk_1EE9B3E30;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  *(unsigned char *)(v5 + 32) = 0;
  *a2 = v5;
}

void API::FrameInfo::parentFrameHandle(API::FrameInfo *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((unsigned char *)this + 296))
  {
    uint64_t v3 = *((void *)this + 35);
    uint64_t v4 = *((void *)this + 36);
    uint64_t v5 = API::Object::newObject(0x28uLL, 11);
    *(void *)uint64_t v5 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v5);
    *(void *)uint64_t v5 = &unk_1EE9B3E30;
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    *(unsigned char *)(v5 + 32) = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

void API::FrameInfo::title(API::FrameInfo *this@<X0>, void *a2@<X8>)
{
  if (!*((void *)this + 39)) {
    goto LABEL_9;
  }
  uint64_t v4 = WebKit::WebFrameProxy::webFrame(*((void *)this + 33), *((void *)this + 34));
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      uint64_t v6 = v7 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  if (*((void *)this + 39) != v6)
  {
    CFRelease(*(CFTypeRef *)(v5 + 8));
LABEL_9:
    *a2 = 0;
    return;
  }
  uint64_t v8 = *(_DWORD **)(v5 + 232);
  if (v8) {
    *v8 += 2;
  }
  *a2 = v8;
  uint64_t v9 = *(const void **)(v5 + 8);

  CFRelease(v9);
}

void API::FrameTreeNode::~FrameTreeNode(API::FrameTreeNode *this, void *a2)
{
  uint64_t v3 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 312, a2);
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((unsigned int *)this + 62);
  if (v6 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_6[v6])(&v8, (char *)this + 224);
  }
  *((_DWORD *)this + 62) = -1;
  uint64_t v7 = (const void *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::FrameTreeNode *)((char *)this + 24));
}

{
  uint64_t vars8;

  API::FrameTreeNode::~FrameTreeNode(this, a2);

  JUMPOUT(0x199740C10);
}

void API::HTTPCookieStore::~HTTPCookieStore(API::HTTPCookieStore *this, void *a2)
{
  uint64_t v3 = (unsigned int **)*((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  uint64_t vars8;

  API::HTTPCookieStore::~HTTPCookieStore(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::HTTPCookieStore::filterAppBoundCookies(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = a2[1];
    a2[1] = 0;
    char v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9DFE80;
    v8[1] = v5;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    _OWORD v8[2] = v7;
    v8[3] = v6;
    uint64_t v15 = v8;
    WebKit::WebsiteDataStore::getAppBoundDomains(v4, (uint64_t *)&v15);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 16))(v10, &v12);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v9);
}

IPC::Encoder *API::HTTPCookieStore::cookies(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && (v5 = *(void *)(v4 + 400)) != 0)
  {
    uint64_t v7 = (uint64_t *)(a1 + 16);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1582;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v21 = v9;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v7);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v10 = &unk_1EE9DFEA8;
    v10[1] = a1;
    void v10[2] = a1;
    v10[3] = v8;
    uint64_t v18 = v10;
    uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v20 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v21, 0, (uint64_t)&v18, 1);
    if (v20)
    {
      uint64_t v12 = v18;
      uint64_t v18 = 0;
      if (v12) {
        (*(void (**)(void *))(*v12 + 8))(v12);
      }
    }
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v16 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 16))(v16, &v18);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    return (IPC::Encoder *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v17);
  }
  return result;
}

IPC::Encoder *API::HTTPCookieStore::cookiesForURL(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 && (v5 = *(void *)(v4 + 8)) != 0 && (uint64_t v6 = *(void *)(v5 + 400)) != 0)
  {
    uint64_t v9 = (uint64_t *)(a1 + 16);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1583;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    char v23 = v11;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, v9);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v12 = &unk_1EE9DFED0;
    v12[1] = a1;
    void v12[2] = a1;
    v12[3] = v10;
    char v20 = v12;
    uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v22 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v23, 0, (uint64_t)&v20, 1);
    if (v22)
    {
      uint64_t v14 = v20;
      char v20 = 0;
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
    }
    uint64_t result = v23;
    char v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v18 + 16))(v18, &v20);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    return (IPC::Encoder *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v19);
  }
  return result;
}

uint64_t API::HTTPCookieStore::setCookies(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v7 = &unk_1EE9DFEF8;
  v7[1] = a1;
  _OWORD v7[2] = a1;
  uint64_t v7[3] = v6;
  uint64_t v10 = v7;
  API::HTTPCookieStore::filterAppBoundCookies(a1, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*v10 + 8);
    return v9();
  }
  return result;
}

uint64_t API::HTTPCookieStore::deleteCookie(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && (v5 = *(void *)(v4 + 400)) != 0)
  {
    v9[0] = a1 + 16;
    v9[1] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(v5, (uint64_t)v9, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1580;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::Cookie,void>::encode(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9DFF48;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

unsigned int *API::HTTPCookieStore::deleteAllCookies(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t result = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *((void *)result + 1) = v5;
  unint64_t v28 = (atomic_uint *)result;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6)
  {
    unint64_t v28 = 0;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
  }
  uint64_t v7 = *(WebKit::WebsiteDataStore **)(v6 + 8);
  if (v7)
  {
    WebKit::WebsiteDataStore::processPools(v7, -1, (uint64_t *)v29);
    uint64_t v9 = (unsigned int **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v29);
    uint64_t v10 = v8;
    uint64_t v11 = v29[0];
    if (v29[0]) {
      uint64_t v12 = (unsigned int **)&v29[0][*((unsigned int *)v29[0] - 1)];
    }
    else {
      uint64_t v12 = 0;
    }
    if (v12 != v9)
    {
      do
      {
        uint64_t v13 = *v9++;
        uint64_t v14 = *(void *)(a1 + 16);
        uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v15 = &unk_1EE9DFF70;
        *((void *)v15 + 1) = &v28;
        char v31 = v15;
        WebKit::WebProcessPool::forEachProcessForSession(v13, v14, (uint64_t)&v31);
        (*(void (**)(IPC::Encoder *))(*(void *)v15 + 8))(v15);
        while (v9 != v10)
        {
          if ((unint64_t)*v9 + 1 > 1) {
            goto LABEL_13;
          }
          ++v9;
        }
        uint64_t v9 = v10;
LABEL_13:
        ;
      }
      while (v9 != v12);
      uint64_t v11 = v29[0];
    }
    if (v11) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v11, v8);
    }
    uint64_t v16 = *(void *)(a1 + 24);
    if (v16)
    {
      int v17 = *(WebKit::WebsiteDataStore **)(v16 + 8);
      if (v17)
      {
        uint64_t v18 = WebKit::WebsiteDataStore::networkProcess(v17);
        uint64_t v19 = v28;
        atomic_fetch_add(v28, 1u);
        char v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v20 = 1578;
        *((void *)v20 + 1) = 0;
        *((void *)v20 + 66) = (char *)v20 + 16;
        *((void *)v20 + 67) = 512;
        *((void *)v20 + 68) = 0;
        *((void *)v20 + 70) = 0;
        *((void *)v20 + 69) = 0;
        IPC::Encoder::encodeHeader(v20);
        char v31 = v20;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v20, (uint64_t *)(a1 + 16));
        uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v21 = &unk_1EE9DFFC0;
        v21[1] = v19;
        char v22 = (void *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        v29[0] = v21;
        v29[1] = v22;
        char v30 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v31, 0, (uint64_t)v29, 1);
        if (v30)
        {
          char v24 = v29[0];
          v29[0] = 0;
          if (v24) {
            (*(void (**)(void *))(*v24 + 8))(v24);
          }
        }
        uint64_t v25 = v31;
        char v31 = 0;
        if (v25)
        {
          IPC::Encoder::~Encoder(v25, v23);
          WTF::fastFree(v26, v27);
        }
      }
    }
  }
  uint64_t result = (unsigned int *)v28;
  unint64_t v28 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t API::HTTPCookieStore::deleteCookiesForHostnames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && (v5 = *(void *)(v4 + 400)) != 0)
  {
    v9[0] = a1 + 16;
    v9[1] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(v5, (uint64_t)v9, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1581;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, *(void *)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9DFFE8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t API::HTTPCookieStore::setHTTPCookieAcceptPolicy(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 && (uint64_t v6 = *(WebKit::WebsiteDataStore **)(v4 + 8)) != 0)
  {
    uint64_t v8 = WebKit::WebsiteDataStore::networkProcess(v6);
    uint64_t v12 = a1 + 16;
    char v13 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(v8, (uint64_t)&v12, a3, 0, 0, 1);
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);
    return v11(v10);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1588;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::HTTPCookieAcceptPolicy>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::HTTPCookieAcceptPolicy>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9E0010;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t API::HTTPCookieStore::getHTTPCookieAcceptPolicy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 && (uint64_t v5 = *(WebKit::WebsiteDataStore **)(v3 + 8)) != 0)
  {
    uint64_t v6 = WebKit::WebsiteDataStore::networkProcess(v5);
    uint64_t v10 = (uint64_t *)(a1 + 16);
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(v6, &v10, a2, 0, 0, 1);
  }
  else
  {
    char v9 = 0;
    uint64_t v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v8 + 16))(v8, &v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1584;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9E0038;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t API::HTTPCookieStore::flushCookies(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (v3 = *(void *)(v2 + 8)) != 0 && (uint64_t v4 = *(void *)(v3 + 400)) != 0)
  {
    uint64_t v8 = (uint64_t *)(a1 + 16);
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(v4, &v8, a2, 0, 0, 1);
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return v7(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 401;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v25 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9E0060;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t API::HTTPCookieStore::unregisterObserver(uint64_t a1, void *a2)
{
  uint64_t v3 = (void **)(a1 + 32);
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(a1 + 32, a2);
  uint64_t result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v3);
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t result = *(void *)(v6 + 400);
        if (result)
        {
          uint64_t v7 = (uint64_t *)(a1 + 16);
          return WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StopObservingCookieChanges>(result, &v7, 0, 0);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StopObservingCookieChanges>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1590;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *API::HTTPCookieStore::cookiesDidChange(API::HTTPCookieStore *this)
{
  uint64_t v2 = (char *)this + 32;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 4, &v12);
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v7 = v2;
  uint64_t v8 = v5;
  uint64_t v9 = v5;
  uint64_t v10 = v5;
  uint64_t v11 = v3 + 8 * v4;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    (*(void (**)(void, API::HTTPCookieStore *))(**(void **)(*(void *)v13 + 8) + 16))(*(void *)(*(void *)v13 + 8), this);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

void API::InspectorConfiguration::~InspectorConfiguration(API::InspectorConfiguration *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t vars8;

  API::InspectorConfiguration::~InspectorConfiguration(this, a2);

  JUMPOUT(0x199740C10);
}

_DWORD *API::InspectorConfiguration::addURLSchemeHandler(uint64_t a1, void *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (_DWORD *)*a2;
  *a2 = 0;
  uint64_t v12 = v3;
  uint64_t v4 = *a3;
  if (*a3) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v13 = v4;
  uint64_t v5 = *(unsigned int *)(a1 + 28);
  if (v5 == *(_DWORD *)(a1 + 24))
  {
    WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>(a1 + 16, (unint64_t)&v12);
    uint64_t v7 = v13;
    uint64_t v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    int v8 = v5 + 1;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v12 = 0;
    uint64_t v10 = (void *)(v9 + 16 * v5);
    *uint64_t v10 = v3;
    v10[1] = v4;
    *(_DWORD *)(a1 + 28) = v8;
    uint64_t v13 = 0;
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

void API::InspectorConfiguration::setProcessPool(API::InspectorConfiguration *this, CFTypeRef *a2)
{
  if (a2) {
    CFRetain(a2[1]);
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = a2;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

uint64_t API::SubstituteData::SubstituteData(uint64_t a1, uint64_t *a2, WebCore::ResourceResponseBase *this, char a4)
{
  int v8 = (_DWORD **)WebCore::ResourceResponseBase::mimeType(this);
  uint64_t v9 = (_DWORD **)WebCore::ResourceResponseBase::textEncodingName(this);
  uint64_t v10 = (_DWORD **)WebCore::ResourceResponseBase::url(this);

  return API::SubstituteData::SubstituteData(a1, a2, v8, v9, v10, 0, a4);
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DFD98;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 24) = a2;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 32));
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 232));
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(void *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 738) = *(unsigned char *)(a1 + 738) & 0xF1 | 4;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(void *)(a1 + 984) = 0;
  *(_WORD *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(unsigned char *)(a1 + 1378) = 0;
  *(unsigned char *)(a1 + 1380) = 0;
  *(unsigned char *)(a1 + 1384) = 0;
  *(unsigned char *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_WORD *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2064));
  *(void *)(a1 + 2272) = 0;
  *(void *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(void *)(a1 + 2280) = 0;
  *(unsigned char *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2304) = 0;
  *(unsigned char *)(a1 + 2320) = 0;
  *(unsigned char *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2376));
  *(void *)(a1 + 2584) = 0;
  *(void *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(void *)(a1 + 2592) = 0;
  *(unsigned char *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2616) = 0;
  *(unsigned char *)(a1 + 2632) = 0;
  *(unsigned char *)(a1 + 2664) = 0;
  *(unsigned char *)(a1 + 2672) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2680));
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2880));
  *(_WORD *)(a1 + 3088) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 3096));
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3296) = 0;
  *(_DWORD *)(a1 + 3320) = 0;
  *(void *)(a1 + 3312) = 0;
  *(unsigned char *)(a1 + 3368) = 0;
  *(_WORD *)(a1 + 3380) = 0;
  *(void *)(a1 + 3328) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3336) = 0;
  *(unsigned char *)(a1 + 3352) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3392) = 0;
  *(_DWORD *)(a1 + 3408) = 0;
  *(_WORD *)(a1 + 3416) = 1;
  uint64_t v5 = 0;
  int v6 = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3424, (uint64_t)&v5, 30.0);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9DFE60[v6])(&v7, &v5);
  }
  *(unsigned char *)(a1 + 3480) = 0;
  *(void *)(a1 + 3488) = 0;
  *(unsigned char *)(a1 + 3496) = 0;
  *(unsigned char *)(a1 + 3498) = 0;
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DFD98;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 24) = a2;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 32));
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 232));
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  uint64_t v6 = *a3;
  *a3 = 0;
  *(void *)(a1 + 480) = v6;
  *(_WORD *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(void *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 738) = *(unsigned char *)(a1 + 738) & 0xF1 | 4;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(void *)(a1 + 984) = 0;
  *(_WORD *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(unsigned char *)(a1 + 1378) = 0;
  *(unsigned char *)(a1 + 1380) = 0;
  *(unsigned char *)(a1 + 1384) = 0;
  *(unsigned char *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_WORD *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2064));
  *(void *)(a1 + 2272) = 0;
  *(void *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(void *)(a1 + 2280) = 0;
  *(unsigned char *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2304) = 0;
  *(unsigned char *)(a1 + 2320) = 0;
  *(unsigned char *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2376));
  *(void *)(a1 + 2584) = 0;
  *(void *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(void *)(a1 + 2592) = 0;
  *(unsigned char *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2616) = 0;
  *(unsigned char *)(a1 + 2632) = 0;
  *(unsigned char *)(a1 + 2664) = 0;
  *(unsigned char *)(a1 + 2672) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2680));
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2880));
  *(_WORD *)(a1 + 3088) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 3096));
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3296) = 0;
  *(_DWORD *)(a1 + 3320) = 0;
  *(void *)(a1 + 3312) = 0;
  *(unsigned char *)(a1 + 3368) = 0;
  *(_WORD *)(a1 + 3380) = 0;
  *(void *)(a1 + 3328) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3336) = 0;
  *(unsigned char *)(a1 + 3352) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3392) = 0;
  *(_DWORD *)(a1 + 3408) = 0;
  *(_WORD *)(a1 + 3416) = 1;
  uint64_t v8 = 0;
  int v9 = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3424, (uint64_t)&v8, 30.0);
  if (v9 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9DFE60[v9])(&v10, &v8);
  }
  *(unsigned char *)(a1 + 3480) = 0;
  *(void *)(a1 + 3488) = 0;
  *(unsigned char *)(a1 + 3496) = 0;
  *(unsigned char *)(a1 + 3498) = 0;
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  uint64_t v5 = API::Navigation::Navigation(a1, a2);
  uint64_t v6 = *a3;
  *a3 = 0;
  char v7 = *(WTF **)(v5 + 496);
  *(void *)(v5 + 496) = v6;
  if (v7) {
    std::default_delete<API::SubstituteData>::operator()[abi:sn180100](a1 + 496, v7);
  }
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DFD98;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 24) = a2;
  WTF::URL::URL(a1 + 32, (uint64_t *)a3);
  WTF::URL::URL(a1 + 72, (uint64_t *)(a3 + 40));
  *(void *)(a1 + 112) = *(void *)(a3 + 80);
  uint64_t v8 = *(void *)(a3 + 88);
  *(void *)(a3 + 88) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = v8;
  uint64_t v9 = *(void *)(a3 + 96);
  *(void *)(a3 + 96) = 0;
  *(void *)(a1 + 128) = v9;
  LODWORD(v9) = *(_DWORD *)(a3 + 104);
  *(_DWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a1 + 136) = v9;
  LODWORD(v9) = *(_DWORD *)(a3 + 108);
  *(_DWORD *)(a3 + 108) = 0;
  *(_DWORD *)(a1 + 140) = v9;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v10 = *(void *)(a3 + 112);
  *(void *)(a3 + 112) = 0;
  *(void *)(a1 + 144) = v10;
  LODWORD(v10) = *(_DWORD *)(a3 + 120);
  *(_DWORD *)(a3 + 120) = 0;
  *(_DWORD *)(a1 + 152) = v10;
  LODWORD(v10) = *(_DWORD *)(a3 + 124);
  *(_DWORD *)(a3 + 124) = 0;
  *(_DWORD *)(a1 + 156) = v10;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t v11 = *(void *)(a3 + 128);
  *(void *)(a3 + 128) = 0;
  *(void *)(a1 + 160) = v11;
  LODWORD(v11) = *(_DWORD *)(a3 + 136);
  *(_DWORD *)(a3 + 136) = 0;
  *(_DWORD *)(a1 + 168) = v11;
  LODWORD(v11) = *(_DWORD *)(a3 + 140);
  *(_DWORD *)(a3 + 140) = 0;
  *(_DWORD *)(a1 + 172) = v11;
  LODWORD(v11) = *(_DWORD *)(a3 + 144);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a3 + 148);
  *(_DWORD *)(a1 + 176) = v11;
  uint64_t v12 = *(void *)(a3 + 152);
  *(void *)(a3 + 152) = 0;
  *(void *)(a1 + 184) = v12;
  uint64_t v13 = *(void *)(a3 + 160);
  *(void *)(a3 + 160) = 0;
  *(void *)(a1 + 192) = v13;
  uint64_t v14 = *(void *)(a3 + 168);
  *(void *)(a3 + 168) = 0;
  *(void *)(a1 + 200) = v14;
  uint64_t v15 = *(void *)(a3 + 176);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a3 + 184);
  *(void *)(a1 + 208) = v15;
  uint64_t v16 = *(void *)(a3 + 192);
  *(void *)(a3 + 192) = 0;
  *(void *)(a1 + 224) = v16;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 232), (const String *)(a1 + 32));
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  uint64_t v17 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 32));
  uint64_t v18 = *(WTF::StringImpl **)v17;
  if (*(void *)v17) {
    *(_DWORD *)v18 += 2;
  }
  uint64_t v25 = v18;
  long long v19 = *(_OWORD *)(v17 + 24);
  long long v26 = *(_OWORD *)(v17 + 8);
  long long v27 = v19;
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)(a1 + 448), (uint64_t)&v25, 1uLL);
  uint64_t v21 = v25;
  uint64_t v25 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  *(void *)(a1 + 464) = 0;
  uint64_t v22 = *a4;
  *a4 = 0;
  *(void *)(a1 + 472) = v22;
  *(void *)(a1 + 480) = 0;
  *(_WORD *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(void *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 738) = *(unsigned char *)(a1 + 738) & 0xF1 | 4;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(void *)(a1 + 984) = 0;
  *(_WORD *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(unsigned char *)(a1 + 1378) = 0;
  *(unsigned char *)(a1 + 1380) = 0;
  *(unsigned char *)(a1 + 1384) = 0;
  *(unsigned char *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_WORD *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2064));
  *(void *)(a1 + 2272) = 0;
  *(void *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(void *)(a1 + 2280) = 0;
  *(unsigned char *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2304) = 0;
  *(unsigned char *)(a1 + 2320) = 0;
  *(unsigned char *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2376));
  *(void *)(a1 + 2584) = 0;
  *(void *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(void *)(a1 + 2592) = 0;
  *(unsigned char *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2616) = 0;
  *(unsigned char *)(a1 + 2632) = 0;
  *(unsigned char *)(a1 + 2664) = 0;
  *(unsigned char *)(a1 + 2672) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2680));
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2880));
  *(_WORD *)(a1 + 3088) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 3096));
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3296) = 0;
  *(_DWORD *)(a1 + 3320) = 0;
  *(void *)(a1 + 3312) = 0;
  *(unsigned char *)(a1 + 3368) = 0;
  *(_WORD *)(a1 + 3380) = 0;
  *(void *)(a1 + 3328) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3336) = 0;
  *(unsigned char *)(a1 + 3352) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3392) = 0;
  *(_DWORD *)(a1 + 3408) = 0;
  *(_WORD *)(a1 + 3416) = 1;
  uint64_t v25 = 0;
  LODWORD(v26) = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3424, (uint64_t)&v25, 30.0);
  if (v26 != -1) {
    ((void (*)(char *, WTF::StringImpl **))off_1EE9DFE60[v26])(&v24, &v25);
  }
  *(unsigned char *)(a1 + 3480) = 0;
  *(void *)(a1 + 3488) = 0;
  *(unsigned char *)(a1 + 3496) = 0;
  *(unsigned char *)(a1 + 3498) = 0;
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DFD98;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 24) = a2;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 32), (const WTF::String *)(*a3 + 56));
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 232), (const String *)(a1 + 32));
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v10 = *a3;
  *a3 = 0;
  *(void *)(a1 + 464) = v10;
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)(a1 + 472) = v11;
  *(void *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 488) = a5;
  *(unsigned char *)(a1 + 489) = 1;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(void *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 738) = *(unsigned char *)(a1 + 738) & 0xF1 | 4;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(void *)(a1 + 984) = 0;
  *(_WORD *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(unsigned char *)(a1 + 1378) = 0;
  *(unsigned char *)(a1 + 1380) = 0;
  *(unsigned char *)(a1 + 1384) = 0;
  *(unsigned char *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_WORD *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2064));
  *(void *)(a1 + 2272) = 0;
  *(void *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(void *)(a1 + 2280) = 0;
  *(unsigned char *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(void *)(a1 + 2296) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2304) = 0;
  *(unsigned char *)(a1 + 2320) = 0;
  *(unsigned char *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2376));
  *(void *)(a1 + 2584) = 0;
  *(void *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(void *)(a1 + 2592) = 0;
  *(unsigned char *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2616) = 0;
  *(unsigned char *)(a1 + 2632) = 0;
  *(unsigned char *)(a1 + 2664) = 0;
  *(unsigned char *)(a1 + 2672) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2680));
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 2880));
  *(_WORD *)(a1 + 3088) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)(a1 + 3096));
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3296) = 0;
  *(_DWORD *)(a1 + 3320) = 0;
  *(void *)(a1 + 3312) = 0;
  *(unsigned char *)(a1 + 3368) = 0;
  *(_WORD *)(a1 + 3380) = 0;
  *(void *)(a1 + 3328) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3336) = 0;
  *(unsigned char *)(a1 + 3352) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3392) = 0;
  *(_DWORD *)(a1 + 3408) = 0;
  *(_WORD *)(a1 + 3416) = 1;
  uint64_t v13 = 0;
  int v14 = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3424, (uint64_t)&v13, 30.0);
  if (v14 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9DFE60[v14])(&v15, &v13);
  }
  *(unsigned char *)(a1 + 3480) = 0;
  *(void *)(a1 + 3488) = 0;
  *(unsigned char *)(a1 + 3496) = 0;
  *(unsigned char *)(a1 + 3498) = 0;
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7 = API::Navigation::Navigation(a1, a2, a3, a5);
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v9 = *(WTF **)(v7 + 496);
  *(void *)(v7 + 496) = v8;
  if (v9) {
    std::default_delete<API::SubstituteData>::operator()[abi:sn180100](a1 + 496, v9);
  }
  return a1;
}

void API::Navigation::~Navigation(API::Navigation *this)
{
  *(void *)this = &unk_1EE9DFD98;
  uint64_t v2 = *((void *)this + 436);
  *((void *)this + 436) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = *((unsigned int *)this + 868);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE9DFE60[v3])(&v16, (char *)this + 3464);
  }
  *((_DWORD *)this + 868) = -1;
  *((void *)this + 428) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 431);
  *((void *)this + 431) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((API::Navigation *)((char *)this + 3424));
  uint64_t v6 = *((unsigned int *)this + 852);
  if (v6 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_6[v6])(&v17, (char *)this + 3384);
  }
  *((_DWORD *)this + 852) = -1;
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 416);
  *((void *)this + 416) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *((unsigned int *)this + 830);
  if (v8 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_6[v8])(&v18, (char *)this + 3296);
  }
  *((_DWORD *)this + 830) = -1;
  uint64_t v9 = (const void *)*((void *)this + 411);
  *((void *)this + 411) = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::Navigation *)((char *)this + 3096));
  WebKit::NavigationActionData::~NavigationActionData((API::Navigation *)((char *)this + 512));
  uint64_t v10 = (WTF *)*((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v10) {
    std::default_delete<API::SubstituteData>::operator()[abi:sn180100](this + 496, v10);
  }
  uint64_t v11 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  uint64_t v12 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  uint64_t v13 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 448, v10);
  int v14 = (const void *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::Navigation *)((char *)this + 232));
  char v15 = (const void *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v15) {
    CFRelease(v15);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::Navigation *)((char *)this + 32));
}

{
  uint64_t vars8;

  API::Navigation::~Navigation(this);

  JUMPOUT(0x199740C10);
}

void API::Navigation::setCurrentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 232, a2);
  WTF::String::operator=((uint64_t *)(a1 + 384), (uint64_t *)(a2 + 152));
  WTF::String::operator=((uint64_t *)(a1 + 392), (uint64_t *)(a2 + 160));
  uint64_t v6 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v7 = *(WTF::RefCountedBase **)(a1 + 400);
  *(void *)(a1 + 400) = v6;
  if (v7) {
    WTF::RefCounted<WebCore::FormData>::deref(v7);
  }
  uint64_t v8 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 408) = v8;
  uint64_t v9 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v10 = *(const void **)(a1 + 424);
  *(void *)(a1 + 424) = v9;
  if (v10) {
    CFRelease(v10);
  }
  if (!*(unsigned char *)(a1 + 440)) {
    *(unsigned char *)(a1 + 440) = 1;
  }
  *(void *)(a1 + 432) = a3;
}

__n128 API::Navigation::appendRedirectionURL(API::Navigation *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 448);
  unsigned int v6 = *((_DWORD *)this + 115);
  if (v6)
  {
    if (WTF::equal(*(WTF **)(*v5 + 40 * v6 - 40), *(const WTF::StringImpl **)a2, a3)) {
      return result;
    }
    unsigned int v8 = *((_DWORD *)this + 115);
  }
  else
  {
    unsigned int v8 = 0;
  }
  if (v8 == *((_DWORD *)this + 114))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>((uint64_t)v5, (unint64_t)a2);
  }
  else
  {
    unsigned int v9 = v8;
    uint64_t v10 = *v5;
    uint64_t v11 = (const WTF::StringImpl **)(*v5 + 40 * v8);
    uint64_t v12 = *(const WTF::StringImpl **)a2;
    if (*(void *)a2) {
      *(_DWORD *)v12 += 2;
    }
    *uint64_t v11 = v12;
    uint64_t v13 = v10 + 40 * v9;
    __n128 result = *(__n128 *)((char *)a2 + 8);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(__n128 *)(v13 + 8) = result;
    ++*((_DWORD *)this + 115);
  }
  return result;
}

uint64_t API::NavigationData::NavigationData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9DFDC0;
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 24) = v5;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 32), (const String *)(a2 + 16));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 232), (const WebCore::ResourceResponseBase *)(a2 + 216));
  unsigned int v6 = *(const void **)(a2 + 456);
  *(void *)(a1 + 472) = v6;
  if (v6) {
    CFRetain(v6);
  }
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 464);
  return a1;
}

void API::NavigationData::~NavigationData(API::NavigationData *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9DFDC0;
  uint64_t v3 = (API::NavigationData *)((char *)this + 232);
  uint64_t v4 = (const void *)*((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  uint64_t v5 = (const void *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationData *)((char *)this + 32));
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unsigned int v8 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
}

{
  uint64_t vars8;

  API::NavigationData::~NavigationData(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)60>::type()
{
  return 60;
}

uint64_t API::ObjectImpl<(API::Object::Type)62>::type()
{
  return 62;
}

uint64_t API::ObjectImpl<(API::Object::Type)66>::type()
{
  return 66;
}

uint64_t API::ObjectImpl<(API::Object::Type)72>::type()
{
  return 72;
}

uint64_t API::ObjectImpl<(API::Object::Type)76>::type()
{
  return 76;
}

uint64_t API::ObjectImpl<(API::Object::Type)78>::type()
{
  return 78;
}

API::HitTestResult *API::HitTestResult::HitTestResult(API::HitTestResult *this, const WebKit::WebHitTestResultData *a2, WebKit::WebPageProxy *a3)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9DFE48;
  WebKit::WebHitTestResultData::WebHitTestResultData((API::HitTestResult *)((char *)this + 16), a2);
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 6, (uint64_t)a3 + 16);
    unsigned int v6 = (atomic_uint *)*((void *)a3 + 3);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  *((void *)this + 85) = v6;
  return this;
}

void API::HitTestResult::~HitTestResult(API::HitTestResult *this, void *a2)
{
  *(void *)this = &unk_1EE9DFE48;
  uint64_t v3 = (unsigned int *)*((void *)this + 85);
  *((void *)this + 85) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebKit::WebHitTestResultData::~WebHitTestResultData((API::HitTestResult *)((char *)this + 16));
}

{
  unsigned int *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9DFE48;
  uint64_t v3 = (unsigned int *)*((void *)this + 85);
  *((void *)this + 85) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebKit::WebHitTestResultData::~WebHitTestResultData((API::HitTestResult *)((char *)this + 16));

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)67>::type()
{
  return 67;
}

void *WTF::Detail::CallableWrapper<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTraits<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9DFE80;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTraits<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9DFE80;
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTraits<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (*a2 && *(_DWORD *)(*a2 - 12) && (WebKit::isFullWebBrowserOrRunningTest((WebKit *)a1) & 1) == 0)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = 136 * v8;
    while (1)
    {
      uint64_t v12 = (WebCore::RegistrableDomain *)(v10 + v9 + 16);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v12, &v25);
      int v14 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(a2, &v25);
      char v15 = v25;
      uint64_t v25 = 0;
      if (!v15) {
        goto LABEL_11;
      }
      if (*(_DWORD *)v15 != 2) {
        break;
      }
      WTF::StringImpl::destroy(v15, v13);
      if (v14)
      {
LABEL_14:
        if (HIDWORD(v27) == v27)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>((uint64_t)&v26, v10 + v9);
        }
        else
        {
          uint64_t v16 = v26 + 136 * HIDWORD(v27);
          uint64_t v17 = v10 + v9;
          uint64_t v18 = *(void *)(v10 + v9);
          *(void *)uint64_t v17 = 0;
          *(void *)uint64_t v16 = v18;
          uint64_t v19 = *(void *)(v10 + v9 + 8);
          *(void *)(v17 + 8) = 0;
          *(void *)(v16 + 8) = v19;
          uint64_t v20 = *(void *)v12;
          *(void *)uint64_t v12 = 0;
          *(void *)(v16 + 16) = v20;
          uint64_t v21 = *(void *)(v10 + v9 + 24);
          *(void *)(v17 + 24) = 0;
          *(void *)(v16 + 24) = v21;
          long long v22 = *(_OWORD *)(v10 + v9 + 32);
          *(_OWORD *)(v16 + 43) = *(_OWORD *)(v10 + v9 + 43);
          *(_OWORD *)(v16 + 32) = v22;
          uint64_t v23 = *(void *)(v10 + v9 + 64);
          *(void *)(v17 + 64) = 0;
          *(void *)(v16 + 64) = v23;
          WTF::URL::URL(v16 + 72, (uint64_t *)(v10 + v9 + 72));
          *(void *)(v16 + 112) = 0;
          *(void *)(v16 + 120) = 0;
          uint64_t v24 = *(void *)(v10 + v9 + 112);
          *(void *)(v17 + 112) = 0;
          *(void *)(v16 + 112) = v24;
          LODWORD(v24) = *(_DWORD *)(v10 + v9 + 120);
          *(_DWORD *)(v17 + 120) = 0;
          *(_DWORD *)(v16 + 120) = v24;
          LODWORD(v24) = *(_DWORD *)(v10 + v9 + 124);
          *(_DWORD *)(v17 + 124) = 0;
          *(_DWORD *)(v16 + 124) = v24;
          *(unsigned char *)(v16 + 128) = *(unsigned char *)(v10 + v9 + 128);
          ++HIDWORD(v27);
        }
      }
LABEL_17:
      v9 += 136;
      if (v11 == v9) {
        goto LABEL_5;
      }
    }
    *(_DWORD *)v15 -= 2;
LABEL_11:
    if (v14) {
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v27 = v4;
LABEL_5:
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v26);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v6);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetAllCookies,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)#1},void,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DFEA8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetAllCookies,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)#1},void,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DFEA8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetAllCookies,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)#1},void,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (!a2
    || !*(void *)a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v5), !v6))
  {
    v5[0] = 0;
    v5[1] = 0;
    API::HTTPCookieStore::filterAppBoundCookies(*(void *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  }
  uint64_t result = API::HTTPCookieStore::filterAppBoundCookies(*(void *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
  if (v6) {
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::URL &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetCookies,API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DFED0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::URL &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetCookies,API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DFED0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::URL &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetCookies,API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (!a2
    || !*(void *)a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v5), !v6))
  {
    v5[0] = 0;
    v5[1] = 0;
    API::HTTPCookieStore::filterAppBoundCookies(*(void *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  }
  uint64_t result = API::HTTPCookieStore::filterAppBoundCookies(*(void *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
  if (v6) {
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<API::HTTPCookieStore::setCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9DFEF8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::HTTPCookieStore::setCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9DFEF8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<API::HTTPCookieStore::setCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 && (uint64_t v5 = *(WebKit::WebsiteDataStore **)(v4 + 8)) != 0)
  {
    uint64_t v7 = WebKit::WebsiteDataStore::networkProcess(v5);
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 1586;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v20 = v8;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, (uint64_t *)(v3 + 16));
    IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, a2);
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v10 = &unk_1EE9DFF20;
    v10[1] = v9;
    v18[0] = v10;
    v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v19 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v20, 0, (uint64_t)v18, 1);
    if (v19)
    {
      uint64_t v12 = v18[0];
      v18[0] = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    char v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 8);
    return (IPC::Encoder *)v15(v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DFF20;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DFF20;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DFF48;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DFF48;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

IPC::Encoder *WTF::Detail::CallableWrapper<API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebProcessProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 136);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 104)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = *(void *)(a2 + 144) == 0;
    }
    if (v4) {
      return result;
    }
  }
  else if (!*(void *)(a2 + 144))
  {
    return result;
  }
  uint64_t v5 = (atomic_uint *)**((void **)result + 1);
  atomic_fetch_add(v5, 1u);
  char v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v6 = 2623;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v7 = &unk_1EE9DFF98;
  v7[1] = v5;
  v12[0] = v7;
  v12[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v13 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v14, 0, (uint64_t)v12, 1);
  if (v13)
  {
    uint64_t v9 = v12[0];
    v12[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess16DeleteAllCookiesEZZN3API15HTTPCookieStore16deleteAllCookiesEONS_17CompletionHandlerIFvvEEEENK3__0clIN6WebKit15WebProcessProxyEEEDaRT_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSN_E_vJSN_EED1Ev(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DFF98;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess16DeleteAllCookiesEZZN3API15HTTPCookieStore16deleteAllCookiesEONS_17CompletionHandlerIFvvEEEENK3__0clIN6WebKit15WebProcessProxyEEEDaRT_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSN_E_vJSN_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DFF98;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteAllCookies,API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1>(API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9DFFC0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteAllCookies,API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1>(API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DFFC0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9DFFE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DFFE8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::HTTPCookieAcceptPolicy>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::HTTPCookieAcceptPolicy>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0010;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0010;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0038;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0038;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v6 = IPC::Decoder::decode<std::tuple<WebCore::HTTPCookieAcceptPolicy>>(a2);
    if (v6 >= 0x100u)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)v3 + 16))(v3, &v6);
    }
    else
    {
      char v7 = 0;
      uint64_t v3 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v3 + 16))(v3, &v7);
    }
  }
  else
  {
    char v5 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v3 + 16))(v3, &v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0060;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0060;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v3));
  }
  char v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      char v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unint64_t result = *v3;
      unsigned int *v3 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1) {
          unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
        }
        else {
          --*((_DWORD *)result + 2);
        }
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  unsigned __int16 v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  void *v6 = v7;
  uint64_t v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

uint64_t *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  *unint64_t result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x6666667)
  {
    uint64_t v5 = 5 * a3;
    int v6 = 40 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(40 * a3));
    *((_DWORD *)v3 + 2) = (v6 & 0xFFFFFFF8) / 0x28;
    uint64_t *v3 = v7;
    uint64_t v8 = a2 + 8 * v5;
    unsigned int v9 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v10 = *v3;
      uint64_t v11 = *(_DWORD **)a2;
      if (*(void *)a2) {
        *v11 += 2;
      }
      *(void *)(v10 + 40 * v9) = v11;
      uint64_t v12 = v10 + 40 * v9;
      long long v13 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      unsigned int v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 40;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebKit::PlaybackSessionInterfaceContext::~PlaybackSessionInterfaceContext(WebKit::PlaybackSessionInterfaceContext *this, void *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    goto LABEL_4;
  }
  int v3 = *(_DWORD *)(v2 + 20);
  if (v3)
  {
    *(_DWORD *)(v2 + 20) = v3 - 1;
LABEL_4:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
    return;
  }
  __break(0xC471u);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  WebKit::PlaybackSessionInterfaceContext::~PlaybackSessionInterfaceContext(this, a2);
  if (*(_DWORD *)(v2 + 20))
  {
    *(void *)(v2 + 32) = 0;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::durationChanged(IPC::Encoder *this, double a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v4 = *(void *)(v2 + 24);
    uint64_t v15 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = v6 + 32;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 625;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v16 = v10;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v15);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v10, a2);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v16, 0);
    this = v16;
    uint64_t v16 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v11);
      this = (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v12(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4E108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (v10[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::currentTimeChanged(IPC::Encoder *this, double a2, double a3)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    ++*(_DWORD *)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 24);
    uint64_t v17 = *((void *)this + 4);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v8 = v7 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v10 = *(void *)(v8 + 32);
    uint64_t v9 = v8 + 32;
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 624;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v18 = v12;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v17);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, a2);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v12, a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v18, 0);
    this = v18;
    uint64_t v18 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v13);
      this = (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
    if (*(_DWORD *)(v3 + 16) == 1)
    {
      uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
      return (IPC::Encoder *)v14(v3);
    }
    else
    {
      --*(_DWORD *)(v3 + 16);
    }
  }
  return this;
}

void sub_198F4E318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (v10[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::bufferedTimeChanged(IPC::Encoder *this, double a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v4 = *(void *)(v2 + 24);
    uint64_t v15 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = v6 + 32;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 621;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v16 = v10;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v15);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v10, a2);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v16, 0);
    this = v16;
    uint64_t v16 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v11);
      this = (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v12(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4E518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (v10[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::rateChanged(IPC::Encoder *result, char a2, double a3, double a4)
{
  uint64_t v4 = *((void *)result + 3);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 16);
    uint64_t v8 = *(void *)(v4 + 24);
    uint64_t v21 = *((void *)result + 4);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        uint64_t v10 = v9 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = *(void *)(v10 + 32);
    uint64_t v11 = v10 + 32;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v14 = 634;
    *((void *)v14 + 1) = v13;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    long long v22 = v14;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v21);
    uint64_t v15 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198F4E764);
    }
    *uint64_t v15 = a2;
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v14, a3);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v14, a4);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v11 + 32))(v11, &v22, 0);
    unint64_t result = v22;
    long long v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      unint64_t result = (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
    if (*(_DWORD *)(v4 + 16) == 1)
    {
      uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
      return (IPC::Encoder *)v18(v4);
    }
    else
    {
      --*(_DWORD *)(v4 + 16);
    }
  }
  return result;
}

void sub_198F4E770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (v10[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::playbackStartedTimeChanged(IPC::Encoder *this, double a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v4 = *(void *)(v2 + 24);
    uint64_t v15 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = v6 + 32;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 633;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v16 = v10;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v15);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v10, a2);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v16, 0);
    this = v16;
    uint64_t v16 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v11);
      this = (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v12(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4E970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (v10[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[4];
  }
  _Unwind_Resume(exception_object);
}

WTF *WebKit::PlaybackSessionInterfaceContext::seekableRangesChanged(WTF *this, const WebCore::TimeRanges *a2, double a3, double a4)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    unsigned int v8 = 0;
    ++*(_DWORD *)(v4 + 16);
    uint64_t v9 = *((void *)this + 4);
    uint64_t v36 = 0;
    uint64_t v37 = v9;
    char v35 = 0;
    uint64_t v10 = (const WebCore::TimeRanges *)((char *)a2 + 8);
    while (v8 < WebCore::TimeRanges::length(a2))
    {
      v34[0] = (IPC::Encoder *)WebCore::PlatformTimeRanges::start(v10);
      v34[1] = v11;
      WTF::MediaTime::toDouble((WTF::MediaTime *)v34);
      uint64_t v13 = v12;
      v34[0] = (IPC::Encoder *)WebCore::PlatformTimeRanges::end(v10);
      v34[1] = v14;
      WTF::MediaTime::toDouble((WTF::MediaTime *)v34);
      v34[0] = v13;
      v34[1] = v15;
      uint64_t v16 = HIDWORD(v36);
      if (HIDWORD(v36) == v36)
      {
        uint64_t v17 = (long long *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, HIDWORD(v36) + 1, (unint64_t)v34);
        uint64_t v16 = HIDWORD(v36);
        uint64_t v18 = v35;
        long long v19 = *v17;
      }
      else
      {
        uint64_t v18 = v35;
        long long v19 = *(_OWORD *)v34;
      }
      *((_OWORD *)v18 + v16) = v19;
      ++HIDWORD(v36);
      ++v8;
    }
    uint64_t v20 = *(void *)(v4 + 24);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 8);
      if (v21) {
        uint64_t v22 = v21 - 16;
      }
      else {
        uint64_t v22 = 0;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v24 = *(void *)(v22 + 32);
    uint64_t v23 = v22 + 32;
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(v24 + 56))(v23);
    uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v26 = 635;
    *((void *)v26 + 1) = v25;
    *((void *)v26 + 66) = (char *)v26 + 16;
    *((void *)v26 + 67) = 512;
    *((void *)v26 + 68) = 0;
    *((void *)v26 + 70) = 0;
    *((void *)v26 + 69) = 0;
    IPC::Encoder::encodeHeader(v26);
    v34[0] = v26;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, &v37);
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v26, HIDWORD(v36));
    if (HIDWORD(v36))
    {
      uint64_t v27 = (double *)v35;
      uint64_t v28 = (double *)((char *)v35 + 16 * HIDWORD(v36));
      do
      {
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v26, *v27);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v26, v27[1]);
        v27 += 2;
      }
      while (v27 != v28);
    }
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v26, a3);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v26, a4);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v23 + 32))(v23, v34, 0);
    char v30 = v34[0];
    v34[0] = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v29);
      WTF::fastFree(v32, v33);
    }
    this = v35;
    if (v35)
    {
      char v35 = 0;
      LODWORD(v36) = 0;
      this = (WTF *)WTF::fastFree(this, v29);
    }
    if (*(_DWORD *)(v4 + 16) == 1)
    {
      char v31 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
      return (WTF *)v31(v4);
    }
    else
    {
      --*(_DWORD *)(v4 + 16);
    }
  }
  return this;
}

void sub_198F4EC90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, WTF *a12, int a13)
{
  if (a12) {
    WTF::fastFree(a12, a2);
  }
  if (v13[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
  }
  else {
    --v13[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::canPlayFastReverseChanged(IPC::Encoder *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v16 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        uint64_t v5 = v4 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v6 = v5 + 32;
    uint64_t v14 = &v16;
    char v15 = a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 622;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v17 = v9;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v14);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v17, 0);
    this = v17;
    uint64_t v17 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v10);
      this = (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v11(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4EEB0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::audioMediaSelectionOptionsChanged(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)result + 3);
  if (v3)
  {
    ++*(_DWORD *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 24);
    uint64_t v16 = *((void *)result + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = v6 + 32;
    v15[0] = &v16;
    v15[1] = a2;
    v15[2] = a3;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 620;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v17 = v10;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,0ul,1ul,2ul>(v10, (uint64_t)v15);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v17, 0);
    unint64_t result = v17;
    uint64_t v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      unint64_t result = (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
    if (*(_DWORD *)(v3 + 16) == 1)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
      return (IPC::Encoder *)v12(v3);
    }
    else
    {
      --*(_DWORD *)(v3 + 16);
    }
  }
  return result;
}

void sub_198F4F09C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  if (v14[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
  }
  else {
    --v14[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::legibleMediaSelectionOptionsChanged(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)result + 3);
  if (v3)
  {
    ++*(_DWORD *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 24);
    uint64_t v16 = *((void *)result + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = v6 + 32;
    v15[0] = &v16;
    v15[1] = a2;
    v15[2] = a3;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 630;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v17 = v10;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,0ul,1ul,2ul>(v10, (uint64_t)v15);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v17, 0);
    unint64_t result = v17;
    uint64_t v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      unint64_t result = (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
    if (*(_DWORD *)(v3 + 16) == 1)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
      return (IPC::Encoder *)v12(v3);
    }
    else
    {
      --*(_DWORD *)(v3 + 16);
    }
  }
  return result;
}

void sub_198F4F288(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  if (v14[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
  }
  else {
    --v14[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::audioMediaSelectionIndexChanged(IPC::Encoder *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v15 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        uint64_t v5 = v4 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v6 = v5 + 32;
    v14[0] = &v15;
    v14[1] = a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 619;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v16 = v9;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,0ul,1ul>(v9, (uint64_t)v14);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v16, 0);
    this = v16;
    uint64_t v16 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v10);
      this = (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v11(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4F470(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionInterfaceContext::legibleMediaSelectionIndexChanged(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(this + 24);
  if (v2)
  {
    ++v2[4];
    this = WebKit::PlaybackSessionManager::legibleMediaSelectionIndexChanged((uint64_t)v2, *(void *)(this + 32), a2);
    if (v2[4] == 1)
    {
      uint64_t v3 = *(uint64_t (**)(_DWORD *))(*(void *)v2 + 8);
      return v3(v2);
    }
    else
    {
      --v2[4];
    }
  }
  return this;
}

void sub_198F4F564(_Unwind_Exception *exception_object)
{
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::legibleMediaSelectionIndexChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v3 = v4 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  v6[0] = &v7;
  v6[1] = a3;
  return IPC::MessageSender::send<Messages::PlaybackSessionManagerProxy::LegibleMediaSelectionIndexChanged>(v3 + 32, (uint64_t)v6);
}

WTF::StringImpl *WebKit::PlaybackSessionInterfaceContext::externalPlaybackChanged(WTF::StringImpl *result, char a2, char a3, WTF::StringImpl **a4)
{
  uint64_t v4 = *((void *)result + 3);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 16);
    uint64_t v7 = *((void *)result + 4);
    uint64_t v8 = *a4;
    if (*a4) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v24 = v8;
    uint64_t v9 = *(void *)(v4 + 24);
    uint64_t v25 = v7;
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10) {
        uint64_t v11 = v10 - 16;
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = v11 + 32;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
    uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v15 = 626;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    uint64_t v26 = v15;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v15, &v25);
    uint64_t v16 = (unsigned char *)IPC::Encoder::grow(v15, 1uLL, 1);
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198F4F7F4);
    }
    *uint64_t v16 = a2;
    uint64_t v18 = (unsigned char *)IPC::Encoder::grow(v15, 1uLL, 1);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x198F4F814);
    }
    *uint64_t v18 = a3;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, (uint64_t *)&v24);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v12 + 32))(v12, &v26, 0);
    uint64_t v21 = v26;
    uint64_t v26 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v20);
      WTF::fastFree(v22, v23);
    }
    unint64_t result = v24;
    uint64_t v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 16) == 1) {
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    else {
      --*(_DWORD *)(v4 + 16);
    }
  }
  return result;
}

void sub_198F4F820(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::wirelessVideoPlaybackDisabledChanged(IPC::Encoder *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v16 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        uint64_t v5 = v4 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v6 = v5 + 32;
    uint64_t v14 = &v16;
    char v15 = a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 639;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v17 = v9;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v14);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v17, 0);
    this = v17;
    uint64_t v17 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v10);
      this = (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v11(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4FA30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::mutedChanged(IPC::Encoder *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v16 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        uint64_t v5 = v4 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v6 = v5 + 32;
    uint64_t v14 = &v16;
    char v15 = a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 631;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v17 = v9;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v14);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v17, 0);
    this = v17;
    uint64_t v17 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v10);
      this = (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v11(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4FC1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::isPictureInPictureSupportedChanged(IPC::Encoder *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v16 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        uint64_t v5 = v4 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v6 = v5 + 32;
    uint64_t v14 = &v16;
    char v15 = a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 632;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v17 = v9;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v14);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v17, 0);
    this = v17;
    uint64_t v17 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v10);
      this = (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v11(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F4FE08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::volumeChanged(IPC::Encoder *this, double a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v4 = *(void *)(v2 + 24);
    uint64_t v15 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = v6 + 32;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 638;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v16 = v10;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v15);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v10, a2);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v16, 0);
    this = v16;
    uint64_t v16 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v11);
      this = (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v12(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F50004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (v10[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
  }
  else {
    --v10[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionInterfaceContext::isInWindowFullscreenActiveChanged(IPC::Encoder *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v16 = *((void *)this + 4);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        uint64_t v5 = v4 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v6 = v5 + 32;
    uint64_t v14 = &v16;
    char v15 = a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 628;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v17 = v9;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v14);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v17, 0);
    this = v17;
    uint64_t v17 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v10);
      this = (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    if (*(_DWORD *)(v2 + 16) == 1)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
      return (IPC::Encoder *)v11(v2);
    }
    else
    {
      --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

void sub_198F501F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

WebKit::PlaybackSessionManager *WebKit::PlaybackSessionManager::create@<X0>(WebKit::PlaybackSessionManager *this@<X0>, WebKit::PlaybackSessionManager **a2@<X8>)
{
  uint64_t v5 = (WebKit::PlaybackSessionManager *)WTF::fastMalloc((WTF *)0x58);
  unint64_t result = WebKit::PlaybackSessionManager::PlaybackSessionManager(v5, this);
  *a2 = v5;
  return result;
}

void sub_198F5029C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::PlaybackSessionManager *WebKit::PlaybackSessionManager::PlaybackSessionManager(WebKit::PlaybackSessionManager *this, WebKit::WebPage *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 1;
  *(void *)this = &unk_1EE9E0168;
  uint64_t v4 = (atomic_uint **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v5 = *v4;
  if (*v4) {
    atomic_fetch_add(v5, 1u);
  }
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 3) = v5;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  uint64_t v6 = WebKit::WebPage::logger(a2);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  *((void *)this + 9) = v6;
  unint64_t v7 = *((void *)a2 + 5) + ~(*((void *)a2 + 5) << 32);
  unint64_t v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  unint64_t v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  uint64_t v10 = (unsigned __int8 *)(((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~(v9 << 27)));
  *((void *)this + 10) = v10;
  v14[0] = "VideoPresentationManager";
  v14[1] = (unsigned __int8 *)25;
  void v14[2] = "PlaybackSessionManager";
  void v14[3] = v10;
  if (*(unsigned char *)(v6 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  }
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v11 = *((void *)a2 + 5);
  v15[0] = 48;
  v15[1] = v11;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 56), (unsigned __int8 *)v15, (uint64_t)this, v14);
  return this;
}

void sub_198F50434(_Unwind_Exception *a1, void *a2)
{
  uint64_t v6 = (unsigned int *)v2[9];
  v2[9] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v2[8];
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  uint64_t v8 = v2[6];
  if (v8) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v8, a2);
  }
  if (*v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
  }
  unint64_t v9 = (unsigned int *)v2[3];
  v2[3] = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  *uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

void WebKit::PlaybackSessionManager::~PlaybackSessionManager(WebKit::PlaybackSessionManager *this)
{
  *(void *)this = &unk_1EE9E0168;
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *((void *)this + 10);
  v25[0] = "VideoPresentationManager";
  v25[1] = 25;
  v25[2] = "~PlaybackSessionManager";
  v25[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v25);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  uint64_t v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  if (v4) {
    unint64_t v9 = &v4[3 * *((unsigned int *)v4 - 1)];
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 != v5)
  {
    do
    {
      uint64_t v10 = v7[1];
      ++*(_DWORD *)(v10 + 32);
      uint64_t v11 = v7[2];
      ++*(_DWORD *)(v11 + 16);
      WebCore::PlaybackSessionModelMediaElement::removeClient((WebCore::PlaybackSessionModelMediaElement *)v10, (WebCore::PlaybackSessionModelClient *)v11);
      WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v10, 0);
      uint64_t v12 = *(void *)(v11 + 24);
      if (v12)
      {
        int v13 = *(_DWORD *)(v12 + 20);
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x198F50818);
        }
        *(_DWORD *)(v12 + 20) = v13 - 1;
      }
      *(void *)(v11 + 24) = 0;
      if (*(_DWORD *)(v11 + 16) == 1) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      else {
        --*(_DWORD *)(v11 + 16);
      }
      if (*(_DWORD *)(v10 + 32) == 1) {
        (*(void (**)(uint64_t))(*(void *)(v10 + 16) + 8))(v10 + 16);
      }
      else {
        --*(_DWORD *)(v10 + 32);
      }
      while (1)
      {
        v7 += 3;
        if (v7 == v8) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_20;
        }
      }
      uint64_t v7 = v8;
LABEL_20:
      ;
    }
    while (v7 != v9);
    uint64_t v4 = (void *)*((void *)this + 6);
  }
  if (v4)
  {
    *((void *)this + 6) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)v4, v6);
  }
  uint64_t v14 = (unsigned int **)*((void *)this + 4);
  if (v14)
  {
    *((void *)this + 4) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v14, v6);
    uint64_t v15 = *((void *)this + 4);
    *((_DWORD *)this + 10) = 0;
    if (v15)
    {
      LODWORD(v15) = *(_DWORD *)(v15 - 12);
      if (v15 > 0x7FFFFFFE) {
        LODWORD(v15) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v15) = 0;
    *((_DWORD *)this + 10) = 0;
  }
  *((_DWORD *)this + 11) = 2 * v15;
  uint64_t v16 = *((void *)this + 8);
  if (v16)
  {
    *((void *)this + 8) = 0;
    WTF::fastFree((WTF *)(v16 - 16), v6);
  }
  uint64_t v17 = *((void *)this + 3);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 8);
    if (v18)
    {
      {
        uint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v24);
      }
      IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x30u, *(void *)(v18 + 24));
    }
  }
  uint64_t v19 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v19 && atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v19 + 2);
    (*(void (**)(unsigned int *))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *((void *)this + 8);
  if (v20) {
    WTF::fastFree((WTF *)(v20 - 16), v6);
  }
  uint64_t v21 = *((void *)this + 6);
  if (v21) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v21, v6);
  }
  uint64_t v22 = (unsigned int **)*((void *)this + 4);
  if (v22) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v22, v6);
  }
  uint64_t v23 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v6);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  WebKit::PlaybackSessionManager::~PlaybackSessionManager(this);
  if (*(_DWORD *)(v1 + 20))
  {
    *(void *)(v1 + 80) = 0;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

void sub_198F50884(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *(unsigned int **)(v2 + 72);
  *(void *)(v2 + 72) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v2 + 64);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  uint64_t v6 = *(void *)(v2 + 48);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *(unsigned int ***)(v2 + 32);
  if (v7) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, a2);
  }
  uint64_t v8 = *(unsigned int **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v8)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  *(void *)uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::PlaybackSessionManager::invalidate(WebKit::PlaybackSessionManager *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *((void *)this + 10);
  v9[0] = "VideoPresentationManager";
  v9[1] = 25;
  void v9[2] = "invalidate";
  v9[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  }
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v4 = *(void *)(*((void *)this + 3) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x30u, *(void *)(v5 + 40));
  unint64_t result = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

uint64_t *WebKit::PlaybackSessionManager::ensureModelAndInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 48), 0), (uint64_t v4 = *v5) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = (uint64_t *)(v4 + 24 * v10);
  uint64_t v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *uint64_t v11 = a2;
    uint64_t v15 = (WebCore::PlaybackSessionModelMediaElement *)WTF::fastMalloc((WTF *)0x70);
    WebCore::PlaybackSessionModelMediaElement::PlaybackSessionModelMediaElement(v15);
    uint64_t v16 = (WebCore::PlaybackSessionModelClient *)WTF::fastMalloc((WTF *)0x28);
    *((void *)v16 + 2) = 1;
    *(void *)uint64_t v16 = &unk_1EE9E0088;
    *((void *)v16 + 1) = 0;
    ++*(_DWORD *)(a1 + 20);
    *((void *)v16 + 3) = a1;
    *((void *)v16 + 4) = a2;
    WebCore::PlaybackSessionModelMediaElement::addClient(v15, v16);
    uint64_t v17 = v11[1];
    v11[1] = (uint64_t)v15;
    if (v17)
    {
      if (*(_DWORD *)(v17 + 32) == 1) {
        (*(void (**)(void))(*(void *)(v17 + 16) + 8))();
      }
      else {
        --*(_DWORD *)(v17 + 32);
      }
    }
    uint64_t v18 = (_DWORD *)v11[2];
    void v11[2] = (uint64_t)v16;
    if (v18)
    {
      if (v18[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
      }
      else {
        --v18[4];
      }
    }
    uint64_t v19 = *v5;
    if (*v5) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *v5;
    if (*v5) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23) {
        return v11 + 1;
      }
    }
    else if (3 * v24 > 4 * v23)
    {
      return v11 + 1;
    }
    uint64_t v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5, v11);
    return v11 + 1;
  }
  int v13 = 0;
  int v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1) {
      int v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    uint64_t v11 = (uint64_t *)(v4 + 24 * v10);
    uint64_t v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        uint64_t *v13 = 0;
        v13[1] = 0;
        void v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        uint64_t v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return v11 + 1;
}

void sub_198F50D68(_Unwind_Exception *exception_object)
{
  if (v2[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[4];
  }
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::removeContext(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 48);
  uint64_t result = (uint64_t)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 48), &v36);
  uint64_t v5 = (void *)result;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    v6 += 24 * *(unsigned int *)(v6 - 4);
  }
  if (v6 != result)
  {
    uint64_t v7 = *(void *)(result + 8);
    ++*(_DWORD *)(v7 + 32);
    uint64_t v8 = *(void *)(result + 16);
    ++*(_DWORD *)(v8 + 16);
    uint64_t result = WebCore::PlaybackSessionModelMediaElement::removeClient((WebCore::PlaybackSessionModelMediaElement *)v7, (WebCore::PlaybackSessionModelClient *)v8);
    uint64_t v9 = *(void *)(v8 + 24);
    if (v9)
    {
      int v10 = *(_DWORD *)(v9 + 20);
      if (!v10)
      {
        uint64_t result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v9 + 20) = v10 - 1;
    }
    *(void *)(v8 + 24) = 0;
    if (*v3)
    {
      uint64_t v11 = *v3 + 24 * *(unsigned int *)(*v3 - 4);
      if ((void *)v11 == v5) {
        goto LABEL_28;
      }
    }
    else
    {
      if (!v5) {
        goto LABEL_28;
      }
      uint64_t v11 = 0;
    }
    if ((void *)v11 != v5)
    {
      void *v5 = -1;
      uint64_t v12 = (_DWORD *)v5[2];
      uint64_t v5[2] = 0;
      if (v12)
      {
        if (v12[4] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
        }
        else {
          --v12[4];
        }
      }
      uint64_t result = v5[1];
      v5[1] = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 32) == 1) {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 16) + 8))();
        }
        else {
          --*(_DWORD *)(result + 32);
        }
      }
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v13 = *v3;
      if (*v3) {
        int v14 = *(_DWORD *)(v13 - 12) - 1;
      }
      else {
        int v14 = -1;
      }
      *(_DWORD *)(v13 - 12) = v14;
      uint64_t v15 = *v3;
      if (*v3)
      {
        unsigned int v16 = 6 * *(_DWORD *)(v15 - 12);
        unsigned int v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9) {
          uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v17 >> 1, 0);
        }
      }
    }
LABEL_28:
    uint64_t v18 = *(void *)(v7 + 48);
    if (!v18)
    {
LABEL_67:
      if (*(_DWORD *)(v8 + 16) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      else {
        --*(_DWORD *)(v8 + 16);
      }
      if (*(_DWORD *)(v7 + 32) == 1) {
        return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 8))(v7 + 16);
      }
      --*(_DWORD *)(v7 + 32);
      return result;
    }
    *(_DWORD *)(v18 + 28) += 2;
    uint64_t result = WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v7, 0);
    int v20 = (uint64_t *)(a1 + 32);
    unsigned int v21 = *(_DWORD *)(a1 + 44);
    unsigned int v22 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v22;
    if (v22 <= v21)
    {
LABEL_56:
      uint64_t v34 = *(void *)(v18 + 304);
      if (v34 && *(void *)(v34 + 8))
      {
        uint64_t v37 = *(void *)(v18 + 304);
        uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)(a1 + 32), &v37);
        if (*v20)
        {
          uint64_t v35 = *v20 + 8 * *(unsigned int *)(*v20 - 4);
          if (v35 == result) {
            goto LABEL_65;
          }
        }
        else
        {
          if (!result) {
            goto LABEL_65;
          }
          uint64_t v35 = 0;
        }
        if (v35 != result) {
          uint64_t result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)(a1 + 32), (unsigned int **)result);
        }
      }
LABEL_65:
      if (*(_DWORD *)(v18 + 28) == 2)
      {
        if ((*(_WORD *)(v18 + 34) & 0x400) == 0) {
          uint64_t result = WebCore::Node::removedLastRef((WebCore::Node *)v18);
        }
      }
      else
      {
        *(_DWORD *)(v18 + 28) -= 2;
      }
      goto LABEL_67;
    }
    uint64_t v23 = *v20;
    if (*v20)
    {
      int v24 = *(_DWORD *)(v23 - 4);
      if (!v24) {
        goto LABEL_50;
      }
      int v25 = 0;
      unsigned int v26 = v24 - 1;
      do
      {
        uint64_t v27 = v26;
        uint64_t result = *(void *)(v23 + 8 * v26);
        if ((unint64_t)(result + 1) >= 2 && !*(void *)(result + 8))
        {
          *(void *)(v23 + 8 * v26) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            uint64_t result = WTF::fastFree((WTF *)result, v19);
          }
          *(void *)(v23 + 8 * v26) = -1;
          ++v25;
        }
        --v26;
      }
      while (v27);
      uint64_t v23 = *v20;
      if (v25)
      {
        *(_DWORD *)(v23 - 16) += v25;
        uint64_t v28 = *v20;
        if (*v20) {
          int v29 = *(_DWORD *)(v28 - 12);
        }
        else {
          int v29 = 0;
        }
        *(_DWORD *)(v28 - 12) = v29 - v25;
        uint64_t v23 = *v20;
      }
      if (v23)
      {
        unsigned int v30 = *(_DWORD *)(v23 - 4);
        if (v30 >= 9 && 6 * *(_DWORD *)(v23 - 12) < v30)
        {
          uint64_t result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 32));
          uint64_t v23 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          if (!v23)
          {
            unsigned int v32 = 0;
            goto LABEL_54;
          }
          goto LABEL_53;
        }
LABEL_50:
        *(_DWORD *)(a1 + 40) = 0;
LABEL_53:
        unsigned int v32 = *(_DWORD *)(v23 - 12);
        int v33 = 0x7FFFFFFF;
        if (v32 >= 0x7FFFFFFF)
        {
LABEL_55:
          *(_DWORD *)(a1 + 44) = 2 * v33;
          goto LABEL_56;
        }
LABEL_54:
        int v33 = v32;
        goto LABEL_55;
      }
    }
    unsigned int v32 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_54;
  }
  return result;
}

void sub_198F51250(_Unwind_Exception *exception_object)
{
  if (v2[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[4];
  }
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::removeClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 64), &v8);
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    uint64_t v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    if (*(_DWORD *)(result + 8) != 1)
    {
      --*(_DWORD *)(result + 8);
      return result;
    }
    if (v5)
    {
      uint64_t v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
      if (v7 == result) {
        return WebKit::PlaybackSessionManager::removeContext(a1, v8);
      }
    }
    else
    {
      if (!result) {
        return WebKit::PlaybackSessionManager::removeContext(a1, v8);
      }
      uint64_t v7 = 0;
    }
    if (v7 != result) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, (void *)result);
    }
    return WebKit::PlaybackSessionManager::removeContext(a1, v8);
  }
  return result;
}

unsigned int *WebKit::PlaybackSessionManager::setUpPlaybackControlsManager(WebKit::PlaybackSessionManager *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v4 = (IPC::Encoder *)*((void *)a2 + 20);
  uint64_t v5 = (uint64_t *)((char *)this + 32);
  unsigned int v6 = *((_DWORD *)this + 11);
  unsigned int v7 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 10) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *v5;
    if (*v5)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *v5;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *v5;
        if (*v5) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *v5;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v5);
          uint64_t v8 = *((void *)this + 4);
          *((_DWORD *)this + 10) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)this + 10) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)this + 11) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *((_DWORD *)this + 10) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 76, (uint64_t)a2);
  int v20 = (atomic_uint *)*((void *)a2 + 38);
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  char v43 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v5, &v43, (uint64_t)v42);
  uint64_t result = (unsigned int *)v43;
  char v43 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20 && atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v20);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)v20, v21);
  }
  if (v42[16])
  {
    uint64_t v23 = WebKit::PlaybackSessionManager::ensureModelAndInterface((uint64_t)this, (uint64_t)v4);
    uint64_t v24 = *v23;
    *(_DWORD *)(v24 + 32) = *(_DWORD *)(*v23 + 32) + 1;
    WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v24, a2);
    if (*(_DWORD *)(v24 + 32) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v24 + 16) + 8))(v24 + 16);
    }
    else {
      --*(_DWORD *)(v24 + 32);
    }
    uint64_t result = (unsigned int *)WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(this, a2);
  }
  unsigned int v26 = (WebKit::PlaybackSessionManager *)((char *)this + 56);
  uint64_t v25 = *((void *)this + 7);
  if ((IPC::Encoder *)v25 != v4)
  {
    *(void *)unsigned int v26 = v4;
    if (v25)
    {
      WebKit::PlaybackSessionManager::removeClientForContext((uint64_t)this, v25);
      uint64_t v4 = (IPC::Encoder *)*((void *)this + 7);
    }
    long long v46 = v4;
    int v45 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)this + 8, (uint64_t *)&v46, &v45, (uint64_t)&v43);
    ++*((_DWORD *)v43 + 2);
    uint64_t v27 = *((void *)this + 3);
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 8);
      if (v28) {
        int v29 = (WebKit::WebPage *)(v28 - 16);
      }
      else {
        int v29 = 0;
      }
    }
    else
    {
      int v29 = 0;
    }
    unsigned int v30 = WebKit::WebPage::fullScreenManager(v29);
    if (v30) {
      WebKit::WebFullScreenManager::videoControlsManagerDidChange(v30);
    }
    uint64_t v31 = *((void *)this + 3);
    if (v31)
    {
      uint64_t v32 = *(void *)(v31 + 8);
      if (v32) {
        uint64_t v33 = v32 - 16;
      }
      else {
        uint64_t v33 = 0;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    char v34 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(void *)a2 + 1272))(a2);
    uint64_t v36 = *(void *)(v33 + 32);
    uint64_t v35 = v33 + 32;
    char v43 = v26;
    char v44 = v34;
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(v36 + 56))(v35);
    long long v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v38 = 637;
    *((void *)v38 + 1) = v37;
    *((void *)v38 + 66) = (char *)v38 + 16;
    *((void *)v38 + 67) = 512;
    *((void *)v38 + 68) = 0;
    *((void *)v38 + 70) = 0;
    *((void *)v38 + 69) = 0;
    IPC::Encoder::encodeHeader(v38);
    long long v46 = v38;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v38, (uint64_t)&v43);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v35 + 32))(v35, &v46, 0);
    uint64_t result = (unsigned int *)v46;
    long long v46 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v39);
      return (unsigned int *)WTF::fastFree(v40, v41);
    }
  }
  return result;
}

void sub_198F517B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (*(_DWORD *)(v16 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v16 + 16) + 8))(v16 + 16);
  }
  else {
    --*(_DWORD *)(v16 + 32);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(WebKit::PlaybackSessionManager *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v17 = WebKit::PlaybackSessionManager::contextIdForMediaElement(this, a2);
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = *((void *)a2 + 230);
  v16[0] = &v17;
  v16[1] = v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  unsigned int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v11 = 636;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  unsigned int v18 = v11;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,0ul,1ul>(v11, (uint64_t)v16);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v18, 0);
  uint64_t result = v18;
  unsigned int v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void sub_198F51988(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::PlaybackSessionManager::clearPlaybackControlsManager(IPC::Encoder *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1)
  {
    uint64_t v2 = this;
    WebKit::PlaybackSessionManager::removeClientForContext((uint64_t)this, v1);
    *((void *)v2 + 7) = 0;
    uint64_t v3 = *((void *)v2 + 3);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        uint64_t v5 = (WebKit::WebPage *)(v4 - 16);
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v6 = WebKit::WebPage::fullScreenManager(v5);
    if (v6) {
      WebKit::WebFullScreenManager::videoControlsManagerDidChange(v6);
    }
    uint64_t v7 = *((void *)v2 + 3);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8) {
        uint64_t v9 = v8 - 16;
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v10 = v9 + 32;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 623;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v17 = v13;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v10 + 32))(v10, &v17, 0);
    this = v17;
    uint64_t v17 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v14);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return this;
}

void sub_198F51AE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::PlaybackSessionManager::mediaEngineChanged(uint64_t *result)
{
  if (result[7])
  {
    uint64_t v1 = result;
    uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(result + 6, result + 7);
    uint64_t v2 = (uint64_t *)v1[6];
    if (v2) {
      v2 += 3 * *((unsigned int *)v2 - 1);
    }
    if (v2 != result)
    {
      uint64_t v3 = result[1];
      return (uint64_t *)MEMORY[0x1F4172038](v3);
    }
  }
  return result;
}

uint64_t WebKit::PlaybackSessionManager::contextIdForMediaElement(WebKit::PlaybackSessionManager *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v3 = *((void *)a2 + 20);
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface((uint64_t)this, v3);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setMediaElement((WebCore::PlaybackSessionModelMediaElement *)v5, a2);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return v3;
}

void sub_198F51C0C(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::currentPlaybackControlsElement(WebKit::PlaybackSessionManager *this)
{
  if (!*((void *)this + 7)) {
    return 0;
  }
  uint64_t v2 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 6, (void *)this + 7);
  uint64_t v3 = (uint64_t *)*((void *)this + 6);
  if (v3) {
    v3 += 3 * *((unsigned int *)v3 - 1);
  }
  if (v3 == v2) {
    return 0;
  }
  else {
    return *(void *)(v2[1] + 48);
  }
}

uint64_t IPC::MessageSender::send<Messages::PlaybackSessionManagerProxy::LegibleMediaSelectionIndexChanged>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 629;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,unsigned long long>,0ul,1ul>(v5, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F51DA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::play(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::play((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F51EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::pause(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::pause((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F51FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::togglePlayState(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::togglePlayState((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F52144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::beginScrubbing(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::beginScrubbing((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F5228C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::endScrubbing(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::endScrubbing((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F523D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::seekToTime(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v13[8] = 0;
  v13[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v10 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v11 = *v10;
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(*v10 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::seekToTime((WebCore::PlaybackSessionModelMediaElement *)v11, a3, a4, a5);
  if (*(_DWORD *)(v11 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 16) + 8))(v11 + 16);
  }
  else {
    --*(_DWORD *)(v11 + 32);
  }
  return MEMORY[0x1997355E0](v13);
}

void sub_198F52544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::fastSeek(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  _OWORD v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::fastSeek((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 16) + 8))(v7 + 16);
  }
  else {
    --*(_DWORD *)(v7 + 32);
  }
  return MEMORY[0x1997355E0](v9);
}

void sub_198F5269C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::beginScanningForward(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::beginScanningForward((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F527E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::beginScanningBackward(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::beginScanningBackward((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F5292C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::endScanning(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::endScanning((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F52A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setDefaultPlaybackRate(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  _OWORD v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setDefaultPlaybackRate((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 16) + 8))(v7 + 16);
  }
  else {
    --*(_DWORD *)(v7 + 32);
  }
  return MEMORY[0x1997355E0](v9);
}

void sub_198F52BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setPlaybackRate(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  _OWORD v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setPlaybackRate((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 16) + 8))(v7 + 16);
  }
  else {
    --*(_DWORD *)(v7 + 32);
  }
  return MEMORY[0x1997355E0](v9);
}

void sub_198F52D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::selectAudioMediaOption(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::selectAudioMediaOption((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F52E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::selectLegibleMediaOption(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v8[8] = 0;
  v8[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::selectLegibleMediaOption((WebCore::PlaybackSessionModelMediaElement *)v5);
  uint64_t v6 = WebCore::PlaybackSessionModelMediaElement::legibleMediaSelectedIndex((WebCore::PlaybackSessionModelMediaElement *)v5);
  WebKit::PlaybackSessionManager::legibleMediaSelectionIndexChanged(a1, a2, v6);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v8);
}

void sub_198F52FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::handleControlledElementIDRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t result = *WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  int v4 = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = v4 + 1;
  uint64_t v5 = *(void *)(result + 48);
  if (v5) {
    *(_DWORD *)(v5 + 28) += 2;
  }
  if (v4)
  {
    *(_DWORD *)(result + 32) = v4;
    if (!v5) {
      return result;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(result + 16) + 8))(result + 16);
    if (!v5) {
      return result;
    }
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      uint64_t v6 = v7 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v8 = v6 + 32;
  uint64_t v9 = *(void *)(v5 + 112);
  if (v9 && *(void *)(v9 + 24))
  {
    unsigned int v10 = *(_DWORD *)(v9 + 4);
    if (v10)
    {
      uint64_t v11 = *(uint64_t **)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 52);
      if (!v12)
      {
LABEL_23:
        uint64_t v11 = 0;
LABEL_24:
        uint64_t v13 = v11 + 1;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v11 = (uint64_t *)(v9 + 32);
      LODWORD(v12) = v10 >> 5;
      if (!v12) {
        goto LABEL_23;
      }
    }
    uint64_t v14 = *MEMORY[0x1E4FB6898];
    uint64_t v12 = v12;
    while (1)
    {
      uint64_t v15 = *v11;
      if (*v11 == v14
        || *(void *)(v15 + 24) == *(void *)(v14 + 24) && *(void *)(v15 + 32) == *(void *)(v14 + 32))
      {
        goto LABEL_24;
      }
      v11 += 2;
      if (!--v12) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v13 = (uint64_t *)MEMORY[0x1E4F30968];
LABEL_25:
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 627;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  unsigned int v22 = v17;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, &v21);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v22, 0);
  uint64_t result = (uint64_t)v22;
  unsigned int v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    uint64_t result = WTF::fastFree(v19, v20);
  }
  if (*(_DWORD *)(v5 + 28) == 2)
  {
    if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
      return WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
  }
  else
  {
    *(_DWORD *)(v5 + 28) -= 2;
  }
  return result;
}

void sub_198F53280(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v12, v13);
  }
  if (*(_DWORD *)(v10 + 28) == 2)
  {
    if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
  }
  else
  {
    *(_DWORD *)(v10 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::togglePictureInPicture(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  int v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::togglePictureInPicture((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F533B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::enterFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v3 = *v2;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(*v2 + 32) + 1;
  uint64_t result = WebCore::PlaybackSessionModelMediaElement::enterFullscreen((WebCore::PlaybackSessionModelMediaElement *)v3);
  if (*(_DWORD *)(v3 + 32) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8);
    return v5(v3 + 16);
  }
  else
  {
    --*(_DWORD *)(v3 + 32);
  }
  return result;
}

void sub_198F5349C(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::exitFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v3 = *v2;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(*v2 + 32) + 1;
  uint64_t result = WebCore::PlaybackSessionModelMediaElement::exitFullscreen((WebCore::PlaybackSessionModelMediaElement *)v3);
  if (*(_DWORD *)(v3 + 32) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8);
    return v5(v3 + 16);
  }
  else
  {
    --*(_DWORD *)(v3 + 32);
  }
  return result;
}

void sub_198F5356C(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::enterInWindow(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v3 = *v2;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(*v2 + 32) + 1;
  uint64_t result = WebCore::PlaybackSessionModelMediaElement::enterInWindowFullscreen((WebCore::PlaybackSessionModelMediaElement *)v3);
  if (*(_DWORD *)(v3 + 32) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8);
    return v5(v3 + 16);
  }
  else
  {
    --*(_DWORD *)(v3 + 32);
  }
  return result;
}

void sub_198F5363C(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::exitInWindow(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v3 = *v2;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(*v2 + 32) + 1;
  uint64_t result = WebCore::PlaybackSessionModelMediaElement::exitInWindowFullscreen((WebCore::PlaybackSessionModelMediaElement *)v3);
  if (*(_DWORD *)(v3 + 32) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8);
    return v5(v3 + 16);
  }
  else
  {
    --*(_DWORD *)(v3 + 32);
  }
  return result;
}

void sub_198F5370C(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlaybackSessionManager::toggleMuted(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  int v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::toggleMuted((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F5383C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setMuted(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  int v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setMuted((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F53994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setVolume(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  _OWORD v9[8] = 0;
  v9[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  uint64_t v6 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v7 = *v6;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(*v6 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setVolume((WebCore::PlaybackSessionModelMediaElement *)v7, a3);
  if (*(_DWORD *)(v7 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 16) + 8))(v7 + 16);
  }
  else {
    --*(_DWORD *)(v7 + 32);
  }
  return MEMORY[0x1997355E0](v9);
}

void sub_198F53AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setPlayingOnSecondScreen(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  int v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(*v4 + 32) + 1;
  WebCore::PlaybackSessionModelMediaElement::setPlayingOnSecondScreen((WebCore::PlaybackSessionModelMediaElement *)v5);
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F53C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::sendRemoteCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v7[8] = 0;
  v7[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  int v4 = WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  uint64_t v5 = *v4;
  ++*(_DWORD *)(*v4 + 32);
  WebCore::PlaybackSessionModelMediaElement::sendRemoteCommand();
  if (*(_DWORD *)(v5 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v5 + 16) + 8))(v5 + 16);
  }
  else {
    --*(_DWORD *)(v5 + 32);
  }
  return MEMORY[0x1997355E0](v7);
}

void sub_198F53DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(_DWORD *)(v2 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v2 + 16);
  }
  else {
    --*(_DWORD *)(v2 + 32);
  }
  MEMORY[0x1997355E0](va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PlaybackSessionManager::setSoundStageSize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *WebKit::PlaybackSessionManager::ensureModelAndInterface(a1, a2);
  int v6 = *(_DWORD *)(v5 + 32);
  *(_DWORD *)(v5 + 32) = v6 + 1;
  *(unsigned char *)(v5 + 104) = a3;
  if (v6) {
    *(_DWORD *)(v5 + 32) = v6;
  }
  else {
    (*(void (**)(void))(*(void *)(v5 + 16) + 8))();
  }
  char v12 = a3;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v7 = &unk_1EE9E0300;
  v7[1] = &v12;
  uint64_t v11 = v7;
  WebKit::PlaybackSessionManager::forEachModel(a1, &v11);
  uint64_t v8 = (WebCore::AudioSession *)(*(uint64_t (**)(void *))(*v7 + 8))(v7);
  uint64_t v9 = *(void *)WebCore::AudioSession::sharedSession(v8);
  return (*(uint64_t (**)(void))(v9 + 272))();
}

void sub_198F53F20(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WebKit::PlaybackSessionManager::forEachModel(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 48);
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v3);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  if (v3) {
    uint64_t v8 = &v3[3 * *((unsigned int *)v3 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      uint64_t v9 = v5[1];
      uint64_t v10 = (_DWORD *)v5[2];
      ++*(_DWORD *)(v9 + 32);
      ++v10[4];
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v9);
      if (v10[4] == 1) {
        uint64_t result = (void *)(*(uint64_t (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
      else {
        --v10[4];
      }
      if (*(_DWORD *)(v9 + 32) == 1) {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v9 + 16) + 8))(v9 + 16);
      }
      else {
        --*(_DWORD *)(v9 + 32);
      }
      while (1)
      {
        v5 += 3;
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v5 = v7;
LABEL_15:
      ;
    }
    while (v5 != v8);
  }
  return result;
}

void sub_198F540A4(_Unwind_Exception *exception_object)
{
  if (v2[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[4];
  }
  if (*(_DWORD *)(v1 + 32) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 8))(v1 + 16);
  }
  else {
    --*(_DWORD *)(v1 + 32);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationInterfaceContext::~VideoPresentationInterfaceContext(WebKit::VideoPresentationInterfaceContext *this)
{
  uint64_t v2 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    CFRelease(v2);
  }
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 5, 0);
  int v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  WebKit::VideoPresentationInterfaceContext::~VideoPresentationInterfaceContext(this);
  if (*(_DWORD *)(v1 + 20))
  {
    *(void *)(v1 + 64) = 0;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

void WebKit::VideoPresentationInterfaceContext::setRootLayer(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v4 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v5 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    CFTypeRef v7 = *a2;
    uint64_t v8 = *(void **)(v6 + 16);
    if (!v8) {
      uint64_t v8 = *(void **)(v6 + 8);
    }
    [v8 setLayer:v7];
  }
}

IPC::Encoder *WebKit::VideoPresentationInterfaceContext::hasVideoChanged(IPC::Encoder *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      uint64_t v15 = *((void *)this + 4);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = *(void *)(v5 + 16);
          uint64_t v6 = v5 + 16;
          uint64_t v13 = &v15;
          char v14 = a2;
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
          uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v9 = 1520;
          *((void *)v9 + 1) = v8;
          *((void *)v9 + 66) = (char *)v9 + 16;
          *((void *)v9 + 67) = 512;
          *((void *)v9 + 68) = 0;
          *((void *)v9 + 70) = 0;
          *((void *)v9 + 69) = 0;
          IPC::Encoder::encodeHeader(v9);
          uint64_t v16 = v9;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v13);
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v16, 0);
          this = v16;
          uint64_t v16 = 0;
          if (this)
          {
            IPC::Encoder::~Encoder(this, v10);
            return (IPC::Encoder *)WTF::fastFree(v11, v12);
          }
        }
      }
    }
  }
  return this;
}

void sub_198F54384(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationInterfaceContext::documentVisibilityChanged(WebKit::VideoPresentationInterfaceContext *this, char a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      int v4 = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v4 + 1;
      uint64_t v5 = *(void *)(v3 + 32);
      uint64_t v17 = *((void *)this + 4);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          CFRetain(*(CFTypeRef *)(v6 - 8));
          uint64_t v15 = &v17;
          char v16 = a2;
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 16) + 56))(v6 + 16);
          uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v9 = 1519;
          *((void *)v9 + 1) = v8;
          *((void *)v9 + 66) = (char *)v9 + 16;
          *((void *)v9 + 67) = 512;
          *((void *)v9 + 68) = 0;
          *((void *)v9 + 70) = 0;
          *((void *)v9 + 69) = 0;
          IPC::Encoder::encodeHeader(v9);
          unsigned int v18 = v9;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v9, (uint64_t)&v15);
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v6 + 16) + 32))(v6 + 16, &v18, 0);
          uint64_t v11 = v18;
          unsigned int v18 = 0;
          if (v11)
          {
            IPC::Encoder::~Encoder(v11, v10);
            WTF::fastFree(v13, v14);
          }
          CFRelease(*(CFTypeRef *)(v6 - 8));
          int v4 = *(_DWORD *)(v3 + 16) - 1;
        }
      }
      if (v4)
      {
        *(_DWORD *)(v3 + 16) = v4;
      }
      else
      {
        char v12 = *(void (**)(uint64_t))(*(void *)v3 + 8);
        v12(v3);
      }
    }
  }
}

void sub_198F5454C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::VideoPresentationInterfaceContext::videoDimensionsChanged(IPC::Encoder *this, const WebCore::FloatSize *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      uint64_t v10 = *((void *)this + 4);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          v9[0] = &v10;
          v9[1] = a2;
          uint64_t v7 = *(void *)(v5 + 16);
          uint64_t v6 = v5 + 16;
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoDimensions>(v6, (uint64_t)v9, v8);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::VideoPresentationInterfaceContext::setPlayerIdentifier(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)result + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      return WebKit::VideoPresentationManager::setPlayerIdentifier(*(IPC::Encoder **)(v4 + 32), *((void *)result + 4), a2, a3);
    }
  }
  return result;
}

IPC::Encoder *WebKit::VideoPresentationManager::setPlayerIdentifier(IPC::Encoder *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[1] = a4;
  uint64_t v13 = a2;
  v12[0] = a3;
  if (result)
  {
    uint64_t v4 = *((void *)result + 1);
    if (v4)
    {
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v5 = v4 + 16;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 1523;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      char v14 = v8;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v13);
      IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v8, (uint64_t)v12);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
      uint64_t result = v14;
      char v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v9);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

void sub_198F5477C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WebKit::VideoPresentationManager *WebKit::VideoPresentationManager::create@<X0>(WebKit::VideoPresentationManager *this@<X0>, WebKit::WebPage *a2@<X1>, WebKit::VideoPresentationManager **a3@<X8>)
{
  uint64_t v7 = (WebKit::VideoPresentationManager *)WTF::fastMalloc((WTF *)0x68);
  uint64_t result = WebKit::VideoPresentationManager::VideoPresentationManager(v7, this, a2);
  *a3 = v7;
  return result;
}

void sub_198F547EC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::VideoPresentationManager *WebKit::VideoPresentationManager::VideoPresentationManager(WebKit::VideoPresentationManager *this, WebKit::WebPage *a2, WebKit::PlaybackSessionManager *a3)
{
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *(void *)this = &unk_1EE9E0228;
  uint64_t v6 = (atomic_uint **)((char *)a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v7 = *v6;
  if (*v6) {
    atomic_fetch_add(v7, 1u);
  }
  ++*((_DWORD *)a3 + 4);
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 4) = v7;
  *((void *)this + 5) = a3;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((unsigned char *)this + 96) = 0;
  uint64_t v8 = *((void *)a3 + 9);
  uint64_t v9 = (unsigned __int8 *)*((void *)a3 + 10);
  v13[0] = "VideoPresentationManager";
  v13[1] = (unsigned __int8 *)25;
  void v13[2] = "VideoPresentationManager";
  long long v13[3] = v9;
  if (*(unsigned char *)(v8 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  }
  {
    char v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t v10 = *((void *)a2 + 5);
  v14[0] = 151;
  v14[1] = v10;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 56), (unsigned __int8 *)v14, (uint64_t)this, v13);
  return this;
}

void sub_198F54948(_Unwind_Exception *a1, void *a2)
{
  uint64_t v7 = (unsigned int *)v2[11];
  v2[11] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  uint64_t v8 = v2[10];
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  uint64_t v9 = v2[8];
  if (v9) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v9, a2);
  }
  if (*v5) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v5, a2);
  }
  uint64_t v10 = (_DWORD *)v2[5];
  v2[5] = 0;
  if (v10)
  {
    if (v10[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
    }
    else {
      --v10[4];
    }
  }
  uint64_t v11 = (unsigned int *)v2[4];
  v2[4] = 0;
  if (v11)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  *uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v12);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationManager::~VideoPresentationManager(WebKit::VideoPresentationManager *this, void *a2)
{
  *(void *)this = &unk_1EE9E0228;
  uint64_t v3 = *((void *)this + 5);
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t v4 = *(void *)(v3 + 80);
  v28[0] = "VideoPresentationManager";
  v28[1] = 25;
  uint64_t v28[2] = "~VideoPresentationManager";
  v28[3] = v4;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v28);
  }
  uint64_t v6 = *((void *)this + 8);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = (void *)(v6 + 24 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      uint64_t v9 = (void *)*((void *)this + 8);
      if (v7)
      {
        uint64_t v10 = 24 * v7;
        uint64_t v9 = (void *)*((void *)this + 8);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 3;
          v10 -= 24;
          if (!v10)
          {
            uint64_t v9 = v8;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    uint64_t v9 = (void *)(v6 + 24 * v7);
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v7) = 0;
  }
  uint64_t v8 = (void *)(v6 + 24 * v7);
  if (v6)
  {
LABEL_10:
    uint64_t v11 = (void *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    goto LABEL_15;
  }
  uint64_t v11 = 0;
LABEL_15:
  if (v11 == v9) {
    goto LABEL_28;
  }
  do
  {
    char v12 = (atomic_uchar *volatile *)v9[1];
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v12 + 1);
    uint64_t v13 = (WebCore::VideoPresentationModelClient *)v9[2];
    ++*((_DWORD *)v13 + 4);
    WebCore::VideoPresentationModelVideoElement::setVideoElement((WebCore::VideoPresentationModelVideoElement *)v12, 0);
    WebCore::VideoPresentationModelVideoElement::removeClient((WebCore::VideoPresentationModelVideoElement *)v12, v13);
    if (*((_DWORD *)v13 + 4) != 1)
    {
      --*((_DWORD *)v13 + 4);
      if (!v12) {
        goto LABEL_19;
      }
LABEL_18:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*((atomic_uchar **)v12 + 1), a2);
      goto LABEL_19;
    }
    (*(void (**)(WebCore::VideoPresentationModelClient *))(*(void *)v13 + 8))(v13);
    if (v12) {
      goto LABEL_18;
    }
LABEL_19:
    char v14 = v9 + 3;
    uint64_t v9 = v8;
    if (v14 != v8)
    {
      uint64_t v9 = v14;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 3;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
  uint64_t v6 = *((void *)this + 8);
LABEL_28:
  if (v6)
  {
    *((void *)this + 8) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  uint64_t v15 = (unsigned int **)*((void *)this + 6);
  if (v15)
  {
    *((void *)this + 6) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v15, a2);
    uint64_t v16 = *((void *)this + 6);
    *((_DWORD *)this + 14) = 0;
    if (v16)
    {
      LODWORD(v16) = *(_DWORD *)(v16 - 12);
      if (v16 > 0x7FFFFFFE) {
        LODWORD(v16) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
    *((_DWORD *)this + 14) = 0;
  }
  *((_DWORD *)this + 15) = 2 * v16;
  uint64_t v17 = *((void *)this + 10);
  if (v17)
  {
    *((void *)this + 10) = 0;
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  uint64_t v18 = *((void *)this + 4);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19)
    {
      {
        uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v27);
      }
      IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x97u, *(void *)(v19 + 24));
    }
  }
  int v20 = (unsigned int *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, a2);
  }
  uint64_t v21 = *((void *)this + 10);
  if (v21) {
    WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  uint64_t v22 = *((void *)this + 8);
  if (v22) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v22, a2);
  }
  uint64_t v23 = (unsigned int **)*((void *)this + 6);
  if (v23) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v23, a2);
  }
  uint64_t v24 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v24)
  {
    if (v24[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
    }
    else {
      --v24[4];
    }
  }
  uint64_t v25 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v25);
    WTF::fastFree((WTF *)v25, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v26);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::VideoPresentationManager::~VideoPresentationManager(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198F54DF0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *(unsigned int **)(v2 + 88);
  *(void *)(v2 + 88) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = *(void *)(v2 + 80);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  uint64_t v6 = *(void *)(v2 + 64);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *(unsigned int ***)(v2 + 48);
  if (v7) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, a2);
  }
  uint64_t v8 = *(_DWORD **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v8)
  {
    if (v8[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
    }
    else {
      --v8[4];
    }
  }
  uint64_t v9 = *(unsigned int **)(v2 + 32);
  *(void *)(v2 + 32) = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  *(void *)uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 24), v10);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::VideoPresentationManager::invalidate(WebKit::VideoPresentationManager *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v3 = *(void *)(v2 + 80);
  v10[0] = "VideoPresentationManager";
  v10[1] = 25;
  void v10[2] = "invalidate";
  v10[3] = v3;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  }
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v5 = *(void *)(*((void *)this + 4) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x97u, *(void *)(v6 + 40));
  uint64_t result = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

BOOL WebKit::VideoPresentationManager::hasVideoPlayingInPictureInPicture(WebKit::VideoPresentationManager *this)
{
  uint64_t v1 = *((void *)this + 11);
  return v1 && *(void *)(v1 + 8) != 0;
}

uint64_t *WebKit::VideoPresentationManager::ensureModelAndInterface(void *a1, uint64_t a2, int a3)
{
  uint64_t v7 = a1 + 8;
  uint64_t v6 = a1[8];
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 8, 0), (uint64_t v6 = *v7) != 0))
  {
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (uint64_t *)(v6 + 24 * v12);
  uint64_t v14 = *v13;
  if (!*v13)
  {
LABEL_12:
    uint64_t *v13 = a2;
    uint64_t v17 = (WebCore::VideoPresentationModelVideoElement *)WTF::fastMalloc((WTF *)0x90);
    WebCore::VideoPresentationModelVideoElement::VideoPresentationModelVideoElement(v17);
    uint64_t v18 = WTF::fastMalloc((WTF *)0x48);
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 1;
    *(void *)uint64_t v18 = &unk_1EE9E01A0;
    uint64_t v19 = a1[3];
    if (v19) {
      goto LABEL_17;
    }
    uint64_t v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = a1;
    uint64_t v21 = (unsigned int *)a1[3];
    a1[3] = v19;
    if (!v21) {
      goto LABEL_17;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    uint64_t v19 = a1[3];
    if (v19) {
LABEL_17:
    }
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
    *(void *)(v18 + 40) = 0;
    *(void *)(v18 + 24) = v19;
    *(void *)(v18 + 32) = a2;
    *(_DWORD *)(v18 + 48) = 0;
    *(unsigned char *)(v18 + 52) = 0;
    *(_DWORD *)(v18 + 56) = 0;
    *(_WORD *)(v18 + 60) = 0;
    *(void *)(v18 + 64) = 0;
    uint64_t v22 = a1[5];
    uint64_t v38 = a2;
    int v39 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v22 + 64), &v38, &v39, (uint64_t)v37);
    ++*((_DWORD *)v37[0] + 2);
    if (a3)
    {
      LOWORD(v38) = 0;
      WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)&v38, (uint64_t *)v37);
      uint64_t v23 = (id *)v37[0];
      v37[0] = 0;
      std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v18 + 40), v23);
      uint64_t v24 = (id *)v37[0];
      v37[0] = 0;
      if (v24)
      {
        WebKit::LayerHostingContext::~LayerHostingContext(v24);
        WTF::fastFree(v25, v26);
      }
    }
    WebCore::VideoPresentationModelVideoElement::addClient(v17, (WebCore::VideoPresentationModelClient *)v18);
    uint64_t v28 = v13[1];
    v13[1] = (uint64_t)v17;
    if (v28) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v28 + 8), v27);
    }
    int v29 = (_DWORD *)v13[2];
    void v13[2] = v18;
    if (v29)
    {
      if (v29[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v29 + 8))(v29);
      }
      else {
        --v29[4];
      }
    }
    uint64_t v30 = *v7;
    if (*v7) {
      int v31 = *(_DWORD *)(v30 - 12) + 1;
    }
    else {
      int v31 = 1;
    }
    *(_DWORD *)(v30 - 12) = v31;
    uint64_t v32 = *v7;
    if (*v7) {
      int v33 = *(_DWORD *)(v32 - 12);
    }
    else {
      int v33 = 0;
    }
    uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
    unint64_t v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34) {
        return v13 + 1;
      }
    }
    else if (3 * v35 > 4 * v34)
    {
      return v13 + 1;
    }
    uint64_t v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v7, v13);
    return v13 + 1;
  }
  uint64_t v15 = 0;
  int v16 = 1;
  while (v14 != a2)
  {
    if (v14 == -1) {
      uint64_t v15 = v13;
    }
    unsigned int v12 = (v12 + v16) & v8;
    uint64_t v13 = (uint64_t *)(v6 + 24 * v12);
    uint64_t v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *uint64_t v15 = 0;
        v15[1] = 0;
        void v15[2] = 0;
        --*(_DWORD *)(*v7 - 16);
        uint64_t v13 = v15;
      }
      goto LABEL_12;
    }
  }
  return v13 + 1;
}

void sub_198F5538C(_Unwind_Exception *a1, void *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4, a2);
  WTF::fastFree(v3, v6);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 8), v7);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::VideoPresentationManager::addClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  int v3 = 1;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 80), &v6, &v3, (uint64_t)&v4);
  if (!v5) {
    ++*(_DWORD *)(v4 + 8);
  }
  return result;
}

atomic_uchar *WebKit::VideoPresentationManager::removeClientForContext(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a2;
  int v3 = (uint64_t *)(a1 + 80);
  uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 80), &v45);
  char v5 = *(atomic_uchar **)(a1 + 80);
  if (v5) {
    v5 += 16 * *((unsigned int *)v5 - 1);
  }
  if (v5 == result) {
    return result;
  }
  int v6 = *((_DWORD *)result + 2);
  BOOL v7 = __OFSUB__(v6--, 1);
  *((_DWORD *)result + 2) = v6;
  if (!((v6 < 0) ^ v7 | (v6 == 0))) {
    return result;
  }
  if (*v3)
  {
    uint64_t v8 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
    if ((atomic_uchar *)v8 == result) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_13;
    }
    uint64_t v8 = 0;
  }
  if ((atomic_uchar *)v8 != result) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
LABEL_13:
  uint64_t v9 = v45;
  WebKit::PlaybackSessionManager::removeClientForContext(*(void *)(a1 + 40), v45);
  unint64_t v11 = (uint64_t *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t result = (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10, v9);
  unsigned int v12 = result;
  if (v10) {
    uint64_t v13 = (atomic_uchar *)(v10 + 24 * *(unsigned int *)(v10 - 4));
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13 == result) {
    return result;
  }
  uint64_t v14 = *((void *)result + 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v14 + 8));
  uint64_t v15 = (WebCore::VideoPresentationModelClient *)*((void *)v12 + 2);
  ++*((_DWORD *)v15 + 4);
  WebCore::VideoPresentationModelVideoElement::removeClient((WebCore::VideoPresentationModelVideoElement *)v14, v15);
  if (*v11)
  {
    uint64_t v17 = *v11 + 24 * *(unsigned int *)(*v11 - 4);
    if ((atomic_uchar *)v17 == v12) {
      goto LABEL_36;
    }
LABEL_22:
    if ((atomic_uchar *)v17 != v12)
    {
      *(void *)unsigned int v12 = -1;
      uint64_t v18 = (_DWORD *)*((void *)v12 + 2);
      *((void *)v12 + 2) = 0;
      if (v18)
      {
        if (v18[4] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
        }
        else {
          --v18[4];
        }
      }
      uint64_t v19 = *((void *)v12 + 1);
      *((void *)v12 + 1) = 0;
      if (v19) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v19 + 8), v16);
      }
      ++*(_DWORD *)(*v11 - 16);
      uint64_t v20 = *v11;
      if (*v11) {
        int v21 = *(_DWORD *)(v20 - 12) - 1;
      }
      else {
        int v21 = -1;
      }
      *(_DWORD *)(v20 - 12) = v21;
      uint64_t v22 = *v11;
      if (*v11)
      {
        unsigned int v23 = 6 * *(_DWORD *)(v22 - 12);
        unsigned int v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(a1 + 64), v24 >> 1, 0);
        }
      }
    }
    goto LABEL_36;
  }
  if (v12)
  {
    uint64_t v17 = 0;
    goto LABEL_22;
  }
LABEL_36:
  uint64_t v25 = *(void *)(v14 + 24);
  if (v25)
  {
    *(_DWORD *)(v25 + 28) += 2;
    WebCore::VideoPresentationModelVideoElement::setVideoElement((WebCore::VideoPresentationModelVideoElement *)v14, 0);
    unsigned int v26 = (uint64_t *)(a1 + 48);
    unsigned int v27 = *(_DWORD *)(a1 + 56);
    unsigned int v28 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 56) = v27 + 1;
    if (v27 > v28) {
      WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::removeNullReferences((unsigned int **)(a1 + 48), v16);
    }
    uint64_t v29 = *(void *)(v25 + 304);
    if (v29)
    {
      if (*(void *)(v29 + 8))
      {
        uint64_t v30 = *v26;
        if (*v26)
        {
          unsigned int v31 = *(_DWORD *)(v30 - 8);
          int v32 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v25 + 304));
          for (i = 0; ; int v32 = i + v34)
          {
            uint64_t v34 = v32 & v31;
            uint64_t v35 = *(void *)(v30 + 16 * v34);
            if (v35 != -1)
            {
              if (!v35)
              {
                uint64_t v36 = (unsigned int **)*v26;
                if (!*v26) {
                  goto LABEL_63;
                }
                uint64_t v37 = *((unsigned int *)v36 - 1);
                uint64_t v38 = &v36[2 * v37];
                goto LABEL_51;
              }
              if (v35 == v29) {
                break;
              }
            }
            ++i;
          }
          uint64_t v38 = (unsigned int **)(v30 + 16 * v34);
          uint64_t v36 = (unsigned int **)*v26;
          if (!*v26) {
            goto LABEL_52;
          }
          uint64_t v37 = *((unsigned int *)v36 - 1);
LABEL_51:
          v36 += 2 * v37;
          if (v36 == v38) {
            goto LABEL_63;
          }
LABEL_52:
          if (v36 != v38)
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v38, v16);
            ++*(_DWORD *)(*v26 - 16);
            uint64_t v39 = *v26;
            int v40 = *v26 ? *(_DWORD *)(v39 - 12) - 1 : -1;
            *(_DWORD *)(v39 - 12) = v40;
            uint64_t v41 = *v26;
            if (*v26)
            {
              unsigned int v42 = 6 * *(_DWORD *)(v41 - 12);
              unsigned int v43 = *(_DWORD *)(v41 - 4);
              if (v42 < v43 && v43 >= 9) {
                WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v26, v43 >> 1, 0);
              }
            }
          }
        }
      }
    }
LABEL_63:
    if (*(_DWORD *)(v25 + 28) == 2)
    {
      if ((*(_WORD *)(v25 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v25);
      }
    }
    else
    {
      *(_DWORD *)(v25 + 28) -= 2;
    }
  }
  if (*((_DWORD *)v15 + 4) == 1) {
    (*(void (**)(WebCore::VideoPresentationModelClient *))(*(void *)v15 + 8))(v15);
  }
  else {
    --*((_DWORD *)v15 + 4);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 8), v16);
}

void sub_198F55818(_Unwind_Exception *exception_object, void *a2)
{
  if (v3[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  else {
    --v3[4];
  }
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::VideoPresentationManager::setupRemoteLayerHosting(WebKit::PlaybackSessionManager **this, WebCore::HTMLVideoElement *a2)
{
  v57[1] = *MEMORY[0x1E4F143B8];
  long long v47 = (unsigned int *)WebKit::PlaybackSessionManager::contextIdForMediaElement(this[5], a2);
  uint64_t v4 = (WTF::StringImpl *)WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::add<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>((uint64_t)v46, (uint64_t)(this + 6), (uint64_t)a2, &v47);
  if (v46[48]) {
    uint64_t v4 = WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(this[5], a2);
  }
  uint64_t v5 = *(void *)(*((void *)a2 + 6) + 8);
  if ((*(unsigned char *)(*(void *)(v5 + 712) + 714) & 0x10) != 0
    && (uint64_t v6 = *(void *)(v5 + 544)) != 0
    && (uint64_t v7 = *(void *)(v6 + 8)) != 0
    && (uint64_t v8 = *(void *)(v7 + 24)) != 0
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0)
  {
    uint64_t v4 = (WTF::StringImpl *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 48) + 16) + 1776))(*(void *)(*(void *)(v9 + 48) + 16));
    int v10 = (int)v4;
  }
  else
  {
    int v10 = 0;
  }
  unint64_t v11 = this[5];
  uint64_t v13 = *((void *)v11 + 9);
  uint64_t v12 = *((void *)v11 + 10);
  v45[0] = "VideoPresentationManager";
  v45[1] = 25;
  v45[2] = "setupRemoteLayerHosting";
  v45[3] = v12;
  if (*(unsigned char *)(v13 + 12) && WebKit2LogFullscreen && byte_1EB357E10 >= 3u)
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v51, (WTF::Logger::LogSiteIdentifier *)v45);
    WTF::String::String((WTF::String *)&v50, "Block Media layer rehosting = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v49);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, &v52);
    uint64_t v15 = v49;
    uint64_t v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    int v16 = v50;
    int v50 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v51;
    uint64_t v51 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = qword_1EB357E20;
    uint64_t v19 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      WTF::String::utf8();
      int v21 = v48[0] ? (char *)v48[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      int v54 = v21;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v19 = v48[0];
      v48[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          uint64_t v19 = (WTF *)WTF::fastFree(v19, v20);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
    }
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u)
    {
      uint64_t v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v23 = *v22;
        if (v23) {
          break;
        }
        int v24 = *v22;
        atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
        if (v24 == v23)
        {
          uint64_t v25 = WTF::Logger::observers(v19);
          uint64_t v26 = *(unsigned int *)(v25 + 12);
          if (v26)
          {
            unsigned int v27 = *(uint64_t **)v25;
            uint64_t v28 = *(void *)v25 + 8 * v26;
            do
            {
              uint64_t v29 = *v27;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v54 + 4), (WTF::Logger::LogSiteIdentifier *)v45);
              int v55 = 0;
              WTF::String::String((WTF::String *)v56, "Block Media layer rehosting = ");
              v56[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(v57);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v48, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v29 + 16))(v29, &WebKit2LogFullscreen, 3, v48);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v30);
              for (uint64_t i = 40; i != -8; i -= 16)
              {
                int v32 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2) {
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v20);
                  }
                  else {
                    *(_DWORD *)v32 -= 2;
                  }
                }
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v28);
          }
          int v33 = 1;
          atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
          if (v33 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v4 = v52;
    int v52 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        uint64_t v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  int v34 = v10 ^ 1;
  if ((v34 & 1) == 0)
  {
    uint64_t v35 = (uint64_t *)WebCore::TextTrackRepresentationCocoa::representationFactory(v4);
    uint64_t v36 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v36 = &unk_1EE9E0328;
    uint64_t v37 = *v35;
    uint64_t *v35 = (uint64_t)v36;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
  }
  uint64_t v38 = v47;
  uint64_t v39 = WebKit::VideoPresentationManager::ensureModelAndInterface(this, (uint64_t)v47, v34);
  int v40 = (WebCore::VideoPresentationModelVideoElement *)*v39;
  uint64_t v41 = (atomic_uchar *volatile *)(*v39 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v41);
  unsigned int v42 = (_DWORD *)v39[1];
  ++v42[4];
  WebCore::VideoPresentationModelVideoElement::setVideoElement(v40, a2);
  uint64_t result = WebKit::VideoPresentationManager::addClientForContext((uint64_t)this, (uint64_t)v38);
  if (v42[4] == 1)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)v42 + 8))(v42);
    if (!v40) {
      return result;
    }
  }
  else
  {
    --v42[4];
    if (!v40) {
      return result;
    }
  }
  return (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v41, v44);
}

void sub_198F55DC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28)
{
  int v29 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
  if (v29 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::add<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  unsigned int v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 8) = v8 + 1;
  if (v8 > v9) {
    WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::removeNullReferences((unsigned int **)a2, (void *)a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 304), a3);
  unint64_t v11 = *(atomic_uint **)(a3 + 304);
  atomic_fetch_add(v11, 1u);
  atomic_fetch_add(v11, 1u);
  uint64_t v38 = (WTF *)v11;
  if (v11 && atomic_fetch_add(v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  uint64_t v12 = *(unsigned int **)a2;
  if (*(void *)a2
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a2, 0), (uint64_t v12 = *(unsigned int **)a2) != 0))
  {
    int v13 = *(v12 - 2);
  }
  else
  {
    int v13 = 0;
  }
  unsigned int v14 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(&v38);
  uint64_t v15 = 0;
  int v16 = 1;
  uint64_t result = (unsigned int *)v38;
  while (1)
  {
    unsigned int v18 = v14 & v13;
    uint64_t v19 = (unsigned int **)&v12[4 * v18];
    uint64_t v20 = (WTF *)*v19;
    if (*v19 != (unsigned int *)-1) {
      break;
    }
    uint64_t v15 = (unsigned int **)&v12[4 * v18];
LABEL_15:
    unsigned int v14 = v16 + v18;
    ++v16;
  }
  if (!v20)
  {
    if (v15)
    {
      *uint64_t v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*(void *)a2 - 16);
      uint64_t v19 = v15;
    }
    uint64_t v38 = 0;
    int v21 = *v19;
    *uint64_t v19 = result;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      uint64_t v37 = v19;
      WTF::fastFree((WTF *)v21, v19);
      uint64_t v19 = v37;
    }
    v19[1] = *a4;
    uint64_t v22 = *(unsigned int **)a2;
    if (*(void *)a2) {
      int v23 = *(v22 - 3) + 1;
    }
    else {
      int v23 = 1;
    }
    *(v22 - 3) = v23;
    uint64_t v26 = *(unsigned int **)a2;
    if (*(void *)a2) {
      int v27 = *(v26 - 3);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = *(v26 - 4) + v27;
    unint64_t v29 = *(v26 - 1);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
      {
LABEL_29:
        uint64_t v19 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)a2, v19);
        uint64_t v26 = *(unsigned int **)a2;
        if (*(void *)a2) {
          unint64_t v29 = *(v26 - 1);
        }
        else {
          unint64_t v29 = 0;
        }
      }
    }
    else if (3 * v29 <= 4 * v28)
    {
      goto LABEL_29;
    }
    unsigned int v31 = &v26[4 * v29];
    char v30 = 1;
    uint64_t result = (unsigned int *)v38;
    goto LABEL_36;
  }
  if (v20 != v38) {
    goto LABEL_15;
  }
  int v24 = *(unsigned int **)a2;
  if (*(void *)a2) {
    uint64_t v25 = *(v24 - 1);
  }
  else {
    uint64_t v25 = 0;
  }
  char v30 = 0;
  unsigned int v31 = &v24[4 * v25];
LABEL_36:
  uint64_t v38 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t v36 = v19;
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v19);
    uint64_t v19 = v36;
  }
  int v32 = *(unsigned int **)a2;
  if (*(void *)a2)
  {
    uint64_t v33 = *(v32 - 1);
    int v34 = (unsigned int **)&v32[4 * v33];
  }
  else
  {
    int v34 = 0;
    uint64_t v33 = 0;
  }
  if (v19 != v34)
  {
    while (!*((void *)*v19 + 1))
    {
      uint64_t v35 = v19 + 2;
      uint64_t v19 = (unsigned int **)v31;
      if (v35 != (unsigned int **)v31)
      {
        uint64_t v19 = v35;
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (unsigned int **)v31)
          {
            uint64_t v19 = (unsigned int **)v31;
            break;
          }
        }
      }
      if (v19 == v34)
      {
        uint64_t v19 = v34;
        break;
      }
    }
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v19;
  *(void *)(a1 + 16) = v31;
  *(void *)(a1 + 24) = v34;
  *(void *)(a1 + 32) = &v32[4 * v33];
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = v30;
  return result;
}

void sub_198F56254(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3, char a4)
{
  unsigned int v8 = *(WebCore::Quirks **)(*(void *)(*((void *)a2 + 6) + 8) + 720);
  if (!v8) {
    unsigned int v8 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((void *)a2 + 6) + 8));
  }
  char v9 = WebCore::Quirks::allowLayeredFullscreenVideos(v8);
  uint64_t result = (WTF::StringImpl *)*((void *)this + 5);
  uint64_t v11 = *((void *)result + 9);
  if (a3 != 1 || !*((unsigned char *)this + 96) || (v9 & 1) != 0)
  {
    int v13 = (WTF *)*((void *)result + 10);
    v70[0] = "VideoPresentationManager";
    v70[1] = (CFTypeRef)25;
    v71[0] = (WTF *)"enterVideoFullscreenForVideoElement";
    v71[1] = v13;
    if (*(unsigned char *)(v11 + 12) && WebKit2LogFullscreen && byte_1EB357E10 >= 3u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)v70);
      uint64_t result = (WTF::StringImpl *)*((void *)this + 5);
    }
    unsigned int v14 = (unsigned int *)WebKit::PlaybackSessionManager::contextIdForMediaElement(result, a2);
    uint64_t v84 = v14;
    WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::add<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&>((uint64_t)v83, (uint64_t)this + 48, (uint64_t)a2, &v84);
    if (v83[48]) {
      WebKit::PlaybackSessionManager::sendLogIdentifierForMediaElement(*((WebKit::PlaybackSessionManager **)this + 5), a2);
    }
    uint64_t v15 = WebKit::VideoPresentationManager::ensureModelAndInterface(this, (uint64_t)v14, 1);
    int v16 = (WebCore::VideoPresentationModelVideoElement *)*v15;
    uint64_t v17 = (atomic_uchar *volatile *)(*v15 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v17);
    uint64_t v19 = v15[1];
    ++*(_DWORD *)(v19 + 16);
    int v20 = *(_DWORD *)(v19 + 56);
    if (!v20) {
      WebKit::VideoPresentationManager::addClientForContext((uint64_t)this, (uint64_t)v14);
    }
    float v21 = WebKit::inlineVideoFrame(a2, v18);
    unsigned int v23 = v22;
    float v25 = v24;
    float v27 = v26;
    WebCore::HTMLMediaElement::videoLayerSize(a2);
    unsigned int v29 = v28;
    unsigned int v31 = v30;
    BOOL v32 = a3 != 0;
    if ((v9 & 1) == 0) {
      *((unsigned char *)this + 96) = v32;
    }
    *(unsigned char *)(v19 + 52) = v32;
    if (a3 == 2)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 76, (uint64_t)a2);
      int v34 = (atomic_uint *)*((void *)a2 + 38);
      if (v34) {
        atomic_fetch_add(v34, 1u);
      }
      uint64_t v35 = (unsigned int *)*((void *)this + 11);
      *((void *)this + 11) = v34;
      if (v35 && atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, v33);
      }
    }
    *(_DWORD *)(v19 + 56) = a3;
    *(unsigned char *)(v19 + 60) = a4;
    uint64_t result = (WTF::StringImpl *)WebCore::VideoPresentationModelVideoElement::setVideoElement(v16, a2);
    if (a3 && !v20)
    {
      v85.m_location.m_CGFloat x = 0.0;
      v85.m_location.float m_y = 0.0;
      v85.m_size.float m_width = v25;
      v85.m_size.float m_height = v27;
      uint64_t result = (WTF::StringImpl *)WebCore::VideoPresentationModelVideoElement::setVideoLayerFrame(v16, v85);
    }
    if (*(_DWORD *)(v19 + 48))
    {
LABEL_28:
      if (*(_DWORD *)(v19 + 16) == 1)
      {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
        if (!v16) {
          return result;
        }
      }
      else
      {
        --*(_DWORD *)(v19 + 16);
        if (!v16) {
          return result;
        }
      }
      return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v17, v36);
    }
    *(_DWORD *)(v19 + 48) = 1;
    char v37 = WebCore::HTMLVideoElement::webkitSupportsPresentationMode();
    uint64_t v38 = *(const void **)(v19 + 64);
    if (v38)
    {
      CFRetain(*(CFTypeRef *)(v19 + 64));
      CFTypeRef v39 = v38;
    }
    else
    {
      WebCore::VideoPresentationModelVideoElement::createVideoFullscreenLayer((uint64_t *)v70, v16);
      objc_msgSend((id)v70[0], "setDelegate:", objc_msgSend(MEMORY[0x1E4FB61C8], "shared"));
      [(id)v70[0] setName:@"Web Video Fullscreen Layer"];
      objc_msgSend((id)v70[0], "setAnchorPoint:", 0.0, 0.0);
      objc_msgSend((id)v70[0], "setPosition:", 0.0, 0.0);
      int v40 = (void *)v70[0];
      uint64_t v82 = 0x1104000000000000;
      WebCore::cachedCGColor((uint64_t *)cf, (WebCore *)&v82, v41);
      [v40 setBackgroundColor:cf[0]];
      CFTypeRef v43 = cf[0];
      cf[0] = 0;
      if (v43) {
        CFRelease(v43);
      }
      if ((v82 & 0x8000000000000) != 0)
      {
        FloatRect v69 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v69);
          WTF::fastFree((WTF *)v69, v42);
        }
      }
      CFTypeRef v44 = v70[0];
      CFTypeRef v81 = v70[0];
      if (v70[0]) {
        CFRetain(v70[0]);
      }
      WebKit::VideoPresentationInterfaceContext::setRootLayer(v19, &v81);
      CFTypeRef v81 = 0;
      if (v44) {
        CFRelease(v44);
      }
      CFTypeRef v39 = v70[0];
      v70[0] = 0;
      if (!v39)
      {
LABEL_45:
        ++*((_DWORD *)this + 4);
        cf[0] = this;
        uint64_t v45 = (atomic_uint *)*((void *)this + 4);
        if (v45) {
          atomic_fetch_add(v45, 1u);
        }
        cf[1] = v45;
        *(void *)&long long v77 = v84;
        *((void *)&v77 + 1) = __PAIR64__(v31, v29);
        *(void *)&long long v78 = __PAIR64__(v23, LODWORD(v21));
        *((void *)&v78 + 1) = __PAIR64__(LODWORD(v27), LODWORD(v25));
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 76, (uint64_t)a2);
        long long v46 = (atomic_uint *)*((void *)a2 + 38);
        if (v46) {
          atomic_fetch_add(v46, 1u);
        }
        uint64_t v79 = (WTF *)v46;
        LOBYTE(v80) = v37;
        BYTE1(v80) = a4;
        HIDWORD(v80) = *(_DWORD *)(v19 + 56);
        uint64_t v47 = *(void *)(*((void *)a2 + 6) + 8);
        if ((*(unsigned char *)(*(void *)(v47 + 712) + 714) & 0x10) != 0
          && (uint64_t v48 = *(void *)(v47 + 544)) != 0
          && (uint64_t v49 = *(void *)(v48 + 8)) != 0
          && (uint64_t v50 = *(void *)(v49 + 24)) != 0
          && (uint64_t v51 = *(void *)(v50 + 8)) != 0
          && (*(unsigned int (**)(void))(**(void **)(*(void *)(v51 + 48) + 16) + 1776))(*(void *)(*(void *)(v51 + 48) + 16)))
        {
          int v52 = WebCore::HTMLMediaElement::layerHostingContextID(a2);
          if (!v52)
          {
            long long v53 = v78;
            *(_OWORD *)int v71 = *(_OWORD *)cf;
            long long v72 = v77;
            ++*((_DWORD *)this + 4);
            *((_DWORD *)a2 + 7) += 2;
            v70[0] = this;
            v70[1] = a2;
            cf[0] = 0;
            cf[1] = 0;
            long long v73 = v53;
            int v54 = v79;
            uint64_t v79 = 0;
            float v74 = v54;
            uint64_t v75 = v80;
            uint64_t v55 = WTF::fastMalloc((WTF *)0x58);
            *(void *)uint64_t v55 = &unk_1EE9E0350;
            *(CFTypeRef *)(v55 + 8) = v70[0];
            *(CFTypeRef *)(v55 + 16) = v70[1];
            *(WTF **)(v55 + 24) = v71[0];
            unint64_t v56 = v71[1];
            *(_OWORD *)float v70 = 0u;
            *(_OWORD *)int v71 = 0u;
            *(void *)(v55 + 32) = v56;
            long long v57 = v72;
            *(_OWORD *)(v55 + 56) = v73;
            *(_OWORD *)(v55 + 40) = v57;
            unsigned int v58 = v74;
            float v74 = 0;
            *(void *)(v55 + 72) = v58;
            *(void *)(v55 + 80) = v75;
            uint64_t v82 = v55;
            WebCore::HTMLMediaElement::requestHostingContextID();
            uint64_t v60 = v82;
            uint64_t v82 = 0;
            if (v60) {
              (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
            }
            int v61 = (unsigned int *)v74;
            float v74 = 0;
            if (v61 && atomic_fetch_add((atomic_uint *volatile)v61, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, v59);
            }
            int v62 = (unsigned int *)v71[1];
            v71[1] = 0;
            if (v62 && atomic_fetch_add((atomic_uint *volatile)v62, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v62);
              WTF::fastFree((WTF *)v62, v59);
            }
            uint64_t v63 = v71[0];
            v71[0] = 0;
            if (v63)
            {
              if (*((_DWORD *)v63 + 4) == 1) {
                (*(void (**)(WTF *))(*(void *)v63 + 8))(v63);
              }
              else {
                --*((_DWORD *)v63 + 4);
              }
            }
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v70[1]);
            int v68 = v70[0];
            v70[0] = 0;
            if (v68)
            {
              if (v68[4] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v68 + 8))(v68);
              }
              else {
                --v68[4];
              }
            }
            goto LABEL_69;
          }
        }
        else
        {
          int v52 = WebKit::LayerHostingContext::contextID(*(WebKit::LayerHostingContext **)(v19 + 40));
        }
        unsigned int v64 = WebCore::HTMLVideoElement::videoWidth(a2);
        unsigned int v65 = WebCore::HTMLVideoElement::videoHeight(a2);
        *(float *)float v70 = (float)v64;
        *((float *)v70 + 1) = (float)v65;
        WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_0::operator()((IPC::Encoder *)cf, v52, (float *)v70);
LABEL_69:
        uint64_t v66 = (unsigned int *)v79;
        uint64_t v79 = 0;
        if (v66 && atomic_fetch_add((atomic_uint *volatile)v66, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v66);
          WTF::fastFree((WTF *)v66, v36);
        }
        unint64_t v67 = (unsigned int *)cf[1];
        cf[1] = 0;
        if (v67 && atomic_fetch_add((atomic_uint *volatile)v67, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v67);
          WTF::fastFree((WTF *)v67, v36);
        }
        uint64_t result = (WTF::StringImpl *)cf[0];
        cf[0] = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1) {
            uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
          }
          else {
            --*((_DWORD *)result + 4);
          }
        }
        goto LABEL_28;
      }
    }
    CFRelease(v39);
    goto LABEL_45;
  }
  uint64_t v12 = (WTF *)*((void *)result + 10);
  v70[0] = "VideoPresentationManager";
  v70[1] = (CFTypeRef)25;
  v71[0] = (WTF *)"enterVideoFullscreenForVideoElement";
  v71[1] = v12;
  if (*(unsigned char *)(v11 + 12)) {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebKit2LogFullscreen, 1u, (WTF::Logger::LogSiteIdentifier *)v70, "already in fullscreen, aborting");
  }
  return result;
}

void sub_198F56A24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *cf, uint64_t a10, _DWORD *a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, uint64_t a18, _DWORD *a19, WTF *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 8))(a29);
  }
  if (a17 && atomic_fetch_add((atomic_uint *volatile)a17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a17);
    WTF::fastFree(a17, a2);
  }
  if (a12 && atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a12);
    WTF::fastFree(a12, a2);
  }
  if (a11)
  {
    if (a11[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[4];
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v32);
  if (cf)
  {
    if (cf[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)cf + 8))(cf);
    }
    else {
      --cf[4];
    }
  }
  if (a25 && atomic_fetch_add((atomic_uint *volatile)a25, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a25);
    WTF::fastFree(a25, v34);
  }
  if (a20 && atomic_fetch_add((atomic_uint *volatile)a20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a20);
    WTF::fastFree(a20, v34);
  }
  if (a19)
  {
    if (a19[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
    }
    else {
      --a19[4];
    }
  }
  if (v31[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v31 + 8))(v31);
  }
  else {
    --v31[4];
  }
  if (v30) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v29, v34);
  }
  _Unwind_Resume(a1);
}

float WebKit::inlineVideoFrame(WebKit *this, WebCore::HTMLVideoElement *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 6) + 8);
  *(_DWORD *)(v3 + 28) += 2;
  uint64_t v29 = v3;
  if (!*(void *)(v3 + 1984)
    || *(unsigned char *)(v3 + 3459)
    || *(unsigned char *)(v3 + 484)
    || (WebCore::Document::updateLayout(),
        uint64_t v5 = *((void *)this + 9),
        uint64_t v6 = (WebCore::RenderObject *)(v5 & 0xFFFFFFFFFFFFLL),
        (v5 & 0xFFFFFFFFFFFFLL) == 0))
  {
    unint64_t v30 = 0;
    unint64_t v31 = 0;
  }
  else
  {
    if ((*(unsigned char *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0) {
      goto LABEL_27;
    }
    if ((*(unsigned char *)((v5 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3 || (*(unsigned char *)((v5 & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198F56F04);
    }
    if (*(unsigned char *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x198F56EE4);
    }
    if ((*(unsigned char *)((v5 & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0
      && *(void *)(WebCore::RenderObject::enclosingLayer(v6) + 256))
    {
      uint64_t v8 = WebCore::RenderObject::enclosingLayer(v6);
      WebCore::RenderLayerBacking::contentsBox(*(WebCore::RenderLayerBacking **)(v8 + 256));
      WebCore::RenderObject::localToContainerQuad();
      v28[0] = v27[0];
      v28[1] = v27[1];
      uint64_t v9 = *(void *)(v29 + 544);
      if (v9 && (uint64_t v10 = *(void *)(v9 + 8)) != 0) {
        uint64_t v11 = *(WebCore::ScrollView **)(v10 + 288);
      }
      else {
        uint64_t v11 = 0;
      }
      WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v28);
      *(void *)&v27[0] = __PAIR64__(v20, v19);
      *((void *)&v27[0] + 1) = __PAIR64__(v22, v21);
      WebCore::ScrollView::contentsToRootView(v11, (const WebCore::FloatRect *)v27);
      unint64_t v30 = __PAIR64__(v24, v23);
      unint64_t v31 = __PAIR64__(v26, v25);
    }
    else
    {
      uint64_t v12 = WebCore::RenderVideo::videoBox(v6);
      *((void *)&v28[0] + 1) = v13;
      uint64_t v14 = WebCore::RenderObject::absoluteBoundingBoxRect(v6, 1, 0);
      LODWORD(v28[0]) = v14 + v12;
      DWORD1(v28[0]) = HIDWORD(v14) + HIDWORD(v12);
      uint64_t v15 = *(void *)(v29 + 544);
      if (v15 && (uint64_t v16 = *(void *)(v15 + 8)) != 0) {
        uint64_t v17 = *(WebCore::ScrollView **)(v16 + 288);
      }
      else {
        uint64_t v17 = 0;
      }
      *(void *)&v27[0] = WebCore::ScrollView::contentsToRootView(v17, (const WebCore::IntRect *)v28);
      *((void *)&v27[0] + 1) = v18;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v30, (const WebCore::IntRect *)v27);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v29);
  return *(float *)&v30;
}

void sub_198F56F28(_Unwind_Exception *a1)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_0::operator()(IPC::Encoder *result, int a2, float *a3)
{
  int v31 = a2;
  uint64_t v3 = *((void *)result + 1);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = result;
      uint64_t v6 = *((void *)result + 6);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          uint64_t v9 = v4 + 16;
          float v10 = *(float *)(*(void *)(v4 + 32) + 364);
          char v11 = *((unsigned char *)result + 56);
          char v12 = *((unsigned char *)result + 57);
          uint64_t v13 = *(WebCore::Quirks **)(*(void *)(*(void *)(v7 + 48) + 8) + 720);
          if (!v13) {
            uint64_t v13 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(void *)(v7 + 48) + 8));
          }
          char v14 = WebCore::Quirks::blocksReturnToFullscreenFromPictureInPictureQuirk(v13);
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
          uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v16 = 1526;
          *((void *)v16 + 1) = v15;
          *((void *)v16 + 66) = (char *)v16 + 16;
          *((void *)v16 + 67) = 512;
          *((void *)v16 + 68) = 0;
          *((void *)v16 + 70) = 0;
          *((void *)v16 + 69) = 0;
          IPC::Encoder::encodeHeader(v16);
          BOOL v32 = v16;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, (uint64_t *)v5 + 2);
          uint64_t v17 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v16, &v31);
          IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v17, (float *)v5 + 8);
          IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v17, (float *)v5 + 6);
          IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v17, a3);
          IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v17, v10);
          uint64_t v18 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v17, (int *)v5 + 15);
          unsigned int v19 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
          if (!v20) {
            goto LABEL_19;
          }
          *unsigned int v19 = v11;
          unsigned int v21 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
          if (!v22)
          {
            __break(0xC471u);
            JUMPOUT(0x198F571D4);
          }
          *unsigned int v21 = v12;
          unsigned int v23 = (unsigned char *)IPC::Encoder::grow(v18, 1uLL, 1);
          if (!v24)
          {
LABEL_19:
            __break(0xC471u);
            JUMPOUT(0x198F571B4);
          }
          *unsigned int v23 = v14;
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v32, 0);
          uint64_t result = v32;
          BOOL v32 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v25);
            uint64_t result = (IPC::Encoder *)WTF::fastFree(v29, v30);
          }
          uint64_t v26 = *(void *)(*((void *)v5 + 6) + 8);
          float v27 = *(WebCore::MediaPlayer **)(v26 + 1144);
          if (v27)
          {
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(atomic_uchar *volatile **)(v26 + 1144));
            uint64_t v28 = WebCore::MediaPlayer::identifier(v27);
            if (v28) {
              WebKit::VideoPresentationManager::setPlayerIdentifier(*(IPC::Encoder **)(*(void *)v5 + 32), *((void *)v5 + 2), v28, 1);
            }
            return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(atomic_uchar **)v27);
          }
        }
      }
    }
  }
  return result;
}

void sub_198F571F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v10);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(uint64_t a1, WebKit *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(v6 + 72);
  uint64_t v7 = *(void *)(v6 + 80);
  BOOL v32 = "VideoPresentationManager";
  uint64_t v33 = 25;
  int v34 = "exitVideoFullscreenForVideoElement";
  uint64_t v35 = v7;
  if (*(unsigned char *)(v8 + 12))
  {
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v32);
    }
  }
  if ((WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::contains(a1 + 48, (uint64_t)a2) & 1) == 0)return (IPC::Encoder *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a3); {
  ++*(_DWORD *)(a1 + 56);
  }
  uint64_t v10 = *((void *)a2 + 38);
  if (v10)
  {
    if (*(void *)(v10 + 8)) {
      uint64_t v10 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(a1 + 48), v10);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  uint64_t v31 = v10;
  uint64_t v13 = (_DWORD *)WebKit::VideoPresentationManager::ensureModelAndInterface((void *)a1, v10, 1)[1];
  ++v13[4];
  if (v13[12])
  {
    uint64_t result = (IPC::Encoder *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
    if (v13[4] == 1) {
      return (IPC::Encoder *)(*(uint64_t (**)(_DWORD *))(*(void *)v13 + 8))(v13);
    }
    else {
      --v13[4];
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15) {
        uint64_t v16 = v15 - 16;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = v16 + 32;
    v30[0] = WebKit::inlineVideoFrame(a2, v12);
    v30[1] = v18;
    v30[2] = v19;
    _OWORD v30[3] = v20;
    ++*(_DWORD *)(a1 + 16);
    uint64_t v21 = *a3;
    *a3 = 0;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17);
    unsigned int v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v23 = 1515;
    *((void *)v23 + 1) = v22;
    *((void *)v23 + 66) = (char *)v23 + 16;
    *((void *)v23 + 67) = 512;
    *((void *)v23 + 68) = 0;
    *((void *)v23 + 70) = 0;
    *((void *)v23 + 69) = 0;
    IPC::Encoder::encodeHeader(v23);
    uint64_t v36 = v23;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v31);
    IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v23, v30);
    uint64_t v24 = (char *)WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v24 = &unk_1EE9E0378;
    *((void *)v24 + 1) = a1;
    *((void *)v24 + 2) = a1;
    *((void *)v24 + 3) = a2;
    *((void *)v24 + 4) = v13;
    *((void *)v24 + 5) = v21;
    uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    BOOL v32 = v24;
    uint64_t v33 = v25;
    (*(void (**)(uint64_t, IPC::Encoder **, const char **, void))(*(void *)v17 + 40))(v17, &v36, &v32, 0);
    float v27 = v32;
    BOOL v32 = 0;
    if (v27) {
      (*(void (**)(const char *))(*(void *)v27 + 8))(v27);
    }
    uint64_t result = v36;
    uint64_t v36 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v26);
      return (IPC::Encoder *)WTF::fastFree(v28, v29);
    }
  }
  return result;
}

void sub_198F57514(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::contains(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a2 + 304);
  if (!v2 || !*(void *)(v2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 304);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

IPC::Encoder *WebKit::VideoPresentationManager::exitVideoFullscreenToModeWithoutAnimation(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3)
{
  int v26 = a3;
  uint64_t v5 = *((void *)this + 5);
  uint64_t v7 = *(void *)(v5 + 72);
  uint64_t v6 = *(IPC::Encoder **)(v5 + 80);
  v25[0] = (IPC::Encoder *)"VideoPresentationManager";
  v25[1] = (IPC::Encoder *)25;
  v25[2] = (IPC::Encoder *)"exitVideoFullscreenToModeWithoutAnimation";
  v25[3] = v6;
  if (*(unsigned char *)(v7 + 12))
  {
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)v25);
    }
  }
  uint64_t result = (IPC::Encoder *)WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::contains((uint64_t)this + 48, (uint64_t)a2);
  if (result)
  {
    uint64_t result = (IPC::Encoder *)*((void *)this + 11);
    if (result)
    {
      if (*((WebCore::HTMLVideoElement **)result + 1) == a2)
      {
        *((void *)this + 11) = 0;
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          uint64_t result = (IPC::Encoder *)WTF::fastFree(result, v10);
        }
      }
    }
    ++*((_DWORD *)this + 14);
    uint64_t v11 = *((void *)a2 + 38);
    if (v11)
    {
      if (*(void *)(v11 + 8))
      {
        uint64_t result = (IPC::Encoder *)WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v11);
        uint64_t v24 = result;
        if ((unint64_t)result - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v12 = WebKit::VideoPresentationManager::ensureModelAndInterface(this, (uint64_t)result, 1)[1];
          int v13 = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(v12 + 16) = v13 + 1;
          *(unsigned char *)(v12 + 52) = 0;
          *((unsigned char *)this + 96) = 0;
          if (v13) {
            *(_DWORD *)(v12 + 16) = v13;
          }
          else {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          uint64_t v14 = *((void *)this + 4);
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 8);
            if (v15) {
              uint64_t v16 = v15 - 16;
            }
            else {
              uint64_t v16 = 0;
            }
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v18 = *(void *)(v16 + 32);
          uint64_t v17 = v16 + 32;
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
          float v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)float v20 = 1516;
          *((void *)v20 + 1) = v19;
          *((void *)v20 + 66) = (char *)v20 + 16;
          *((void *)v20 + 67) = 512;
          *((void *)v20 + 68) = 0;
          *((void *)v20 + 70) = 0;
          *((void *)v20 + 69) = 0;
          IPC::Encoder::encodeHeader(v20);
          v25[0] = v20;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v20, (uint64_t *)&v24);
          IPC::Encoder::operator<<<int>(v20, &v26);
          (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v17 + 32))(v17, v25, 0);
          uint64_t result = v25[0];
          v25[0] = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v21);
            return (IPC::Encoder *)WTF::fastFree(v22, v23);
          }
        }
      }
    }
  }
  return result;
}

void sub_198F57A04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManager::setVideoFullscreenMode(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3)
{
  int v21 = a3;
  uint64_t v5 = *((void *)this + 5);
  uint64_t v7 = *(void *)(v5 + 72);
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v17 = (uint64_t *)"VideoPresentationManager";
  uint64_t v18 = 25;
  uint64_t v19 = "setVideoFullscreenMode";
  uint64_t v20 = v6;
  if (*(unsigned char *)(v7 + 12))
  {
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v17);
    }
  }
  uint64_t result = WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::contains((uint64_t)this + 48, (uint64_t)a2);
  if (result)
  {
    ++*((_DWORD *)this + 14);
    uint64_t v10 = *((void *)a2 + 38);
    if (v10)
    {
      if (*(void *)(v10 + 8))
      {
        uint64_t result = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v10);
        uint64_t v16 = result;
        if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v11 = *((void *)this + 4);
          if (v11)
          {
            uint64_t v12 = *(void *)(v11 + 8);
            if (v12)
            {
              uint64_t v17 = &v16;
              uint64_t v18 = (uint64_t)&v21;
              uint64_t v14 = *(void *)(v12 + 16);
              uint64_t v13 = v12 + 16;
              uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
              return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoFullscreenMode>(v13, (uint64_t)&v17, v15, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::VideoPresentationManager::clearVideoFullscreenMode(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3)
{
  int v21 = a3;
  uint64_t v5 = *((void *)this + 5);
  uint64_t v7 = *(void *)(v5 + 72);
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v17 = (uint64_t *)"VideoPresentationManager";
  uint64_t v18 = 25;
  uint64_t v19 = "clearVideoFullscreenMode";
  uint64_t v20 = v6;
  if (*(unsigned char *)(v7 + 12))
  {
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v17);
    }
  }
  uint64_t result = WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::contains((uint64_t)this + 48, (uint64_t)a2);
  if (result)
  {
    ++*((_DWORD *)this + 14);
    uint64_t v10 = *((void *)a2 + 38);
    if (v10)
    {
      if (*(void *)(v10 + 8))
      {
        uint64_t result = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v10);
        uint64_t v16 = result;
        if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v11 = *((void *)this + 4);
          if (v11)
          {
            uint64_t v12 = *(void *)(v11 + 8);
            if (v12)
            {
              uint64_t v17 = &v16;
              uint64_t v18 = (uint64_t)&v21;
              uint64_t v14 = *(void *)(v12 + 16);
              uint64_t v13 = v12 + 16;
              uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
              return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::ClearVideoFullscreenMode>(v13, (uint64_t)&v17, v15, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::VideoPresentationManager::requestFullscreenMode(void *a1, uint64_t a2)
{
  uint64_t v2 = (atomic_uchar *volatile *)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2 + 1);
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::requestFullscreenMode((WebCore::VideoPresentationModelVideoElement *)v2);
  if (v2)
  {
    uint64_t v5 = (atomic_uchar *)*((void *)v2 + 1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(v5, v4);
  }
  return result;
}

void sub_198F57D0C(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::fullscreenModeChanged(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  uint64_t v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  uint64_t v6 = (atomic_uchar *volatile *)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
  uint64_t v7 = (_DWORD *)v4[1];
  ++v7[4];
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::fullscreenModeChanged(v5);
  v7[14] = a3;
  if (v7[4] == 1)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    if (!v5) {
      return result;
    }
  }
  else
  {
    --v7[4];
    if (!v5) {
      return result;
    }
  }
  uint64_t v10 = *v6;

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(v10, v9);
}

void sub_198F57DEC(_Unwind_Exception *exception_object, void *a2)
{
  if (v4[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[4];
  }
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::requestUpdateInlineRect(atomic_uchar *result, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v2 = *((void *)result + 4);
  if (!v2 || !*(void *)(v2 + 8)) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *WebKit::VideoPresentationManager::ensureModelAndInterface(result, a2, 1);
  uint64_t v5 = (atomic_uchar **)(v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 8));
  uint64_t v7 = *(void *)(v4 + 24);
  if (v7) {
    *(_DWORD *)(v7 + 28) += 2;
  }
  float v8 = WebKit::inlineVideoFrame((WebKit *)v7, v6);
  float v10 = v9;
  float v12 = v11;
  float v14 = v13;
  v32[0] = v8;
  v32[1] = v9;
  v32[2] = v11;
  v32[3] = v13;
  uint64_t v15 = *((void *)v3 + 4);
  if (v15 && (uint64_t v16 = *(void *)(v15 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v16 - 8));
    char v17 = 0;
    uint64_t v18 = v16 - 16;
  }
  else
  {
    uint64_t v18 = 0;
    char v17 = 1;
  }
  v30[0] = 0;
  v30[1] = 0;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v31, (const WebCore::IntRect *)v30);
  uint64_t v19 = v18 + 32;
  BOOL v29 = v8 != v31[0] || v10 != v31[1] || v14 != v31[3] || v12 != v31[2];
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 56))(v18 + 32);
  uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v22 = 1522;
  *((void *)v22 + 1) = v21;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 68) = 0;
  *((void *)v22 + 70) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  int v34 = v22;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, &v33);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v22, v32);
  unsigned int v23 = (unsigned char *)IPC::Encoder::grow(v22, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198F5808CLL);
  }
  *unsigned int v23 = v29;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v19 + 32))(v18 + 32, &v34, 0);
  int v26 = v34;
  int v34 = 0;
  if (v26)
  {
    IPC::Encoder::~Encoder(v26, v25);
    WTF::fastFree(v27, v28);
    if (v17) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((v17 & 1) == 0) {
LABEL_20:
  }
    CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_21:
  if (*(_DWORD *)(v7 + 28) == 2)
  {
    if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
  }
  else
  {
    *(_DWORD *)(v7 + 28) -= 2;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v5, v25);
}

void sub_198F58098(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (v17)
  {
    if (*(_DWORD *)(v17 + 28) == 2)
    {
      if ((*(_WORD *)(v17 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v17);
      }
    }
    else
    {
      *(_DWORD *)(v17 + 28) -= 2;
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v16, a2);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationManager::requestVideoContentLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebKit::VideoPresentationManager::ensureModelAndInterface((void *)a1, a2, 1);
  uint64_t v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  uint64_t v6 = (atomic_uchar *volatile *)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
  uint64_t v7 = v4[1];
  ++*(_DWORD *)(v7 + 16);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v9 = *(void *)(v8 + 80);
  v15[0] = "VideoPresentationManager";
  v15[1] = 25;
  void v15[2] = "requestVideoContentLayer";
  void v15[3] = v9;
  WebCore::VideoPresentationModelVideoElement::logIdentifier(v5);
  if (*(unsigned char *)(v10 + 12) && WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v15);
  }
  float v11 = *(const void **)(v7 + 64);
  if (v11) {
    CFRetain(*(CFTypeRef *)(v7 + 64));
  }
  ++*(_DWORD *)(a1 + 16);
  float v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v12 = &unk_1EE9E03A0;
  v12[1] = a1;
  void v12[2] = a2;
  v15[0] = v12;
  WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer();
  uint64_t v14 = v15[0];
  v15[0] = 0;
  if (!v14)
  {
    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (v11) {
LABEL_9:
  }
    CFRelease(v11);
LABEL_10:
  if (*(_DWORD *)(v7 + 16) != 1)
  {
    --*(_DWORD *)(v7 + 16);
    if (!v5) {
      return;
    }
    goto LABEL_12;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v5) {
LABEL_12:
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v6, v13);
}

void sub_198F582B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v13[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
  }
  else {
    --v13[4];
  }
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v11, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::returnVideoContentLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebKit::VideoPresentationManager::ensureModelAndInterface((void *)a1, a2, 1);
  uint64_t v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  uint64_t v6 = (atomic_uchar *volatile *)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
  uint64_t v7 = (_DWORD *)v4[1];
  ++v7[4];
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v9 = *(void *)(v8 + 80);
  v14[0] = "VideoPresentationManager";
  v14[1] = 25;
  void v14[2] = "returnVideoContentLayer";
  void v14[3] = v9;
  WebCore::VideoPresentationModelVideoElement::logIdentifier(v5);
  if (*(unsigned char *)(v10 + 12) && WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v14);
  }
  ++*(_DWORD *)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
  float v11 = (void *)WTF::fastMalloc((WTF *)0x20);
  *float v11 = &unk_1EE9E03F0;
  v11[1] = a1;
  void v11[2] = a2;
  v11[3] = v5;
  v14[0] = v11;
  WebCore::VideoPresentationModelVideoElement::waitForPreparedForInlineThen();
  uint64_t result = (atomic_uchar *)v14[0];
  v14[0] = 0;
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  if (v7[4] == 1)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    if (!v5) {
      return result;
    }
  }
  else
  {
    --v7[4];
    if (!v5) {
      return result;
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v6, v12);
}

void sub_198F5852C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (v13[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
  }
  else {
    --v13[4];
  }
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v11, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::willExitFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebKit::VideoPresentationManager::ensureModelAndInterface((void *)a1, a2, 1);
  uint64_t v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  uint64_t v6 = (atomic_uchar *volatile *)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
  uint64_t v7 = (_DWORD *)v4[1];
  ++v7[4];
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v8 + 72);
  uint64_t v9 = *(void *)(v8 + 80);
  v17[0] = "VideoPresentationManager";
  v17[1] = 25;
  v17[2] = "willExitFullscreen";
  v17[3] = v9;
  float v11 = (WTF::StringImpl *)WebCore::VideoPresentationModelVideoElement::logIdentifier(v5);
  if (*(unsigned char *)(v10 + 12) && WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
    float v11 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v17);
  }
  uint64_t v13 = *((void *)v5 + 3);
  if (v13)
  {
    *(_DWORD *)(v13 + 28) += 2;
    WTF::RunLoop::main(v11);
    ++*(_DWORD *)(a1 + 16);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v14 = &unk_1EE9E0490;
    v14[1] = a1;
    void v14[2] = v13;
    void v14[3] = a2;
    v17[0] = v14;
    WTF::RunLoop::dispatch();
    uint64_t v15 = v17[0];
    v17[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  if (v7[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
  }
  else {
    --v7[4];
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v6, v12);
}

void sub_198F587B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v11, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::didEnterFullscreen(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4 = a4;
  uint64_t v5 = a1;
  v75[1] = *MEMORY[0x1E4F143B8];
  int8x8_t v65 = (int8x8_t)a3;
  int v66 = a4;
  uint64_t v6 = WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  uint64_t v7 = (WebCore::VideoPresentationModelVideoElement *)*v6;
  uint64_t v8 = (atomic_uchar *volatile *)(*v6 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v8);
  uint64_t v9 = v6[1];
  ++*(_DWORD *)(v9 + 16);
  uint64_t v10 = v5[5];
  uint64_t v11 = *(void *)(v10 + 72);
  if (v4)
  {
    uint64_t v12 = *(void *)(v10 + 80);
    int v61 = "VideoPresentationManager";
    uint64_t v62 = 25;
    uint64_t v63 = "didEnterFullscreen";
    uint64_t v64 = v12;
    WebCore::VideoPresentationModelVideoElement::logIdentifier(v7);
    if ((_BYTE)v66)
    {
      if (!*(unsigned char *)(v11 + 12) || !WebKit2LogFullscreen || byte_1EB357E10 < 3u) {
        goto LABEL_84;
      }
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v70, (WTF::Logger::LogSiteIdentifier *)&v61);
      WTF::LogArgument<void const*>::toString();
      WebCore::FloatSize::toJSONString((uint64_t *)&v68, (WebCore::FloatSize *)&v65);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v71);
      uint64_t v15 = v68;
      int v68 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v19 = v69;
      FloatRect v69 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v14);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v20 = v70;
      float v70 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v14);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      uint64_t v21 = qword_1EB357E20;
      uint64_t v22 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
      if (v22)
      {
        WTF::String::utf8();
        unsigned int v23 = v67[0] ? (char *)v67[0] + 16 : 0;
        buf[0].i32[0] = 136446210;
        *(int8x8_t *)((char *)buf + 4) = (int8x8_t)v23;
        _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)buf, 0xCu);
        uint64_t v22 = v67[0];
        v67[0] = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 1) {
            uint64_t v22 = (WTF *)WTF::fastFree(v22, v13);
          }
          else {
            --*(_DWORD *)v22;
          }
        }
      }
      if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u)
      {
        uint64_t v24 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v25 = *v24;
          if (v25) {
            break;
          }
          int v26 = *v24;
          atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v26, v25 | 1, memory_order_acquire, memory_order_acquire);
          if (v26 == v25)
          {
            unsigned int v58 = v5;
            uint64_t v59 = v8;
            uint64_t v60 = v7;
            uint64_t v27 = WTF::Logger::observers(v22);
            uint64_t v28 = *(unsigned int *)(v27 + 12);
            if (v28)
            {
              BOOL v29 = *(uint64_t **)v27;
              uint64_t v30 = *(void *)v27 + 8 * v28;
              do
              {
                uint64_t v31 = *v29;
                buf[0].i32[0] = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[1], (WTF::Logger::LogSiteIdentifier *)&v61);
                int v73 = 0;
                WTF::LogArgument<void const*>::toString();
                int v74 = 1;
                WebCore::FloatSize::toJSONString(v75, (WebCore::FloatSize *)&v65);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v67, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v31 + 16))(v31, &WebKit2LogFullscreen, 3, v67);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v32);
                for (uint64_t i = 5; i != -1; i -= 2)
                {
                  int v34 = (WTF::StringImpl *)buf[i];
                  buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2) {
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v13);
                    }
                    else {
                      *(_DWORD *)v34 -= 2;
                    }
                  }
                }
                ++v29;
              }
              while (v29 != (uint64_t *)v30);
            }
            int v35 = 1;
            atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
            goto LABEL_79;
          }
        }
      }
    }
    else
    {
      __break(1u);
LABEL_98:
      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(v10 + 80);
    int v61 = "VideoPresentationManager";
    uint64_t v62 = 25;
    uint64_t v63 = "didEnterFullscreen";
    uint64_t v64 = v16;
    WebCore::VideoPresentationModelVideoElement::logIdentifier(v7);
    if (!*(unsigned char *)(v11 + 12) || !WebKit2LogFullscreen || byte_1EB357E10 < 3u) {
      goto LABEL_84;
    }
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v70, (WTF::Logger::LogSiteIdentifier *)&v61);
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v68, "(empty)");
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v71);
    uint64_t v18 = v68;
    int v68 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v36 = v69;
    FloatRect v69 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v17);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    char v37 = v70;
    float v70 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v17);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    uint64_t v38 = qword_1EB357E20;
    CFTypeRef v39 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
    if (v39)
    {
      WTF::String::utf8();
      int v40 = v67[0] ? (char *)v67[0] + 16 : 0;
      buf[0].i32[0] = 136446210;
      *(int8x8_t *)((char *)buf + 4) = (int8x8_t)v40;
      _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)buf, 0xCu);
      CFTypeRef v39 = v67[0];
      v67[0] = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1) {
          CFTypeRef v39 = (WTF *)WTF::fastFree(v39, v13);
        }
        else {
          --*(_DWORD *)v39;
        }
      }
    }
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u)
    {
      uint64_t v41 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v42 = *v41;
        if (v42) {
          break;
        }
        int v43 = *v41;
        atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v43, v42 | 1, memory_order_acquire, memory_order_acquire);
        if (v43 == v42)
        {
          unsigned int v58 = v5;
          uint64_t v59 = v8;
          uint64_t v60 = v7;
          uint64_t v44 = WTF::Logger::observers(v39);
          uint64_t v45 = *(unsigned int *)(v44 + 12);
          if (v45)
          {
            long long v46 = *(uint64_t **)v44;
            uint64_t v47 = *(void *)v44 + 8 * v45;
            do
            {
              uint64_t v48 = *v46;
              buf[0].i32[0] = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[1], (WTF::Logger::LogSiteIdentifier *)&v61);
              int v73 = 0;
              WTF::LogArgument<void const*>::toString();
              int v74 = 0;
              WTF::String::String((WTF::String *)v75, "(empty)");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v67, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v48 + 16))(v48, &WebKit2LogFullscreen, 3, v67);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v49);
              for (uint64_t j = 5; j != -1; j -= 2)
              {
                uint64_t v51 = (WTF::StringImpl *)buf[j];
                buf[j] = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2) {
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v51 -= 2;
                  }
                }
              }
              ++v46;
            }
            while (v46 != (uint64_t *)v47);
          }
          int v35 = 1;
          atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
LABEL_79:
          uint64_t v8 = v59;
          uint64_t v7 = v60;
          uint64_t v5 = v58;
          if (v35 != 1) {
            goto LABEL_98;
          }
          break;
        }
      }
    }
  }
  int v52 = v71;
  int v71 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2) {
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v13);
    }
    else {
      *(_DWORD *)v52 -= 2;
    }
  }
LABEL_84:
  *(_DWORD *)(v9 + 48) = 0;
  *(unsigned char *)(v9 + 61) = 0;
  uint64_t v53 = *((void *)v7 + 3);
  if (v53)
  {
    *(_DWORD *)(v53 + 28) += 2;
    buf[0] = vand_s8(v65, (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32((_BYTE)v66 == 0), 0x1FuLL)));
    int v54 = (WTF::RunLoop *)WebCore::HTMLVideoElement::didEnterFullscreenOrPictureInPicture((WebCore::HTMLVideoElement *)v53, (const WebCore::FloatSize *)buf);
    if (!*(unsigned char *)(v9 + 52) && !*(unsigned char *)(v9 + 60))
    {
      WTF::RunLoop::main(v54);
      ++*((_DWORD *)v5 + 4);
      *(_DWORD *)(v53 + 28) += 2;
      uint64_t v55 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v55 = &unk_1EE9E04B8;
      v55[1] = v5;
      v55[2] = v53;
      buf[0] = (int8x8_t)v55;
      WTF::RunLoop::dispatch();
      int8x8_t v56 = buf[0];
      buf[0] = 0;
      if (v56) {
        (*(void (**)(int8x8_t))(**(void **)&v56 + 8))(v56);
      }
    }
    if (*(_DWORD *)(v53 + 28) == 2)
    {
      if ((*(_WORD *)(v53 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v53);
      }
    }
    else
    {
      *(_DWORD *)(v53 + 28) -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 16) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  else {
    --*(_DWORD *)(v9 + 16);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v8, v13);
}

void sub_198F590B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uchar **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27)
{
  int v30 = 1;
  atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
  if (v30 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (v27[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
  }
  else {
    --v27[4];
  }
  if (a13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*a12, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::failedToEnterFullscreen(uint64_t a1, uint64_t a2)
{
  char v4 = (atomic_uchar *volatile *)*WebKit::VideoPresentationManager::ensureModelAndInterface((void *)a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 1);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v5 + 72);
  uint64_t v6 = *(void *)(v5 + 80);
  v13[0] = "VideoPresentationManager";
  v13[1] = 25;
  void v13[2] = "failedToEnterFullscreen";
  long long v13[3] = v6;
  uint64_t v8 = (WTF::StringImpl *)WebCore::VideoPresentationModelVideoElement::logIdentifier((WebCore::VideoPresentationModelVideoElement *)v4);
  if (*(unsigned char *)(v7 + 12))
  {
    if (WebKit2LogFullscreen) {
      BOOL v9 = byte_1EB357E10 >= 3u;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      uint64_t v8 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v13);
    }
  }
  WTF::RunLoop::main(v8);
  ++*(_DWORD *)(a1 + 16);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v10 = &unk_1EE9E0508;
  v10[1] = a1;
  void v10[2] = a2;
  v13[0] = v10;
  WTF::RunLoop::dispatch();
  uint64_t result = (atomic_uchar *)v13[0];
  v13[0] = 0;
  if (result)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
    if (!v4) {
      return result;
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*((atomic_uchar **)v4 + 1), v11);
}

void sub_198F59560(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (v12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v11, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::didExitFullscreen(uint64_t a1, WTF::String *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(v4 + 72);
  uint64_t v5 = *(void *)(v4 + 80);
  v17[0] = "VideoPresentationManager";
  v17[1] = 25;
  v17[2] = "didExitFullscreen";
  v17[3] = v5;
  uint64_t v16 = a2;
  if (*(unsigned char *)(v6 + 12))
  {
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v17, &v16);
    }
  }
  uint64_t v8 = WebKit::VideoPresentationManager::ensureModelAndInterface((void *)a1, (uint64_t)a2, 1);
  uint64_t v9 = *v8;
  uint64_t v10 = (atomic_uchar *volatile *)(*v8 + 8);
  uint64_t v11 = (WTF::RunLoop *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v10);
  uint64_t v12 = (_DWORD *)v8[1];
  ++v12[4];
  WTF::RunLoop::main(v11);
  ++*(_DWORD *)(a1 + 16);
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v13 = &unk_1EE9E0530;
  v13[1] = a1;
  void v13[2] = a2;
  v17[0] = v13;
  WTF::RunLoop::dispatch();
  uint64_t result = (atomic_uchar *)v17[0];
  v17[0] = 0;
  if (result) {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
  }
  if (v12[4] == 1)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    if (!v9) {
      return result;
    }
  }
  else
  {
    --v12[4];
    if (!v9) {
      return result;
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v10, v14);
}

void sub_198F59798(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v11, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::didCleanupFullscreen(uint64_t a1, WTF::String *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(v4 + 72);
  uint64_t v5 = *(void *)(v4 + 80);
  v25[0] = "VideoPresentationManager";
  v25[1] = 25;
  v25[2] = "didCleanupFullscreen";
  v25[3] = v5;
  uint64_t v24 = a2;
  if (*(unsigned char *)(v6 + 12))
  {
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v25, &v24);
    }
  }
  uint64_t v8 = WebKit::VideoPresentationManager::ensureModelAndInterface((void *)a1, (uint64_t)a2, 1);
  uint64_t v9 = *v8;
  uint64_t v10 = (atomic_uchar *volatile *)(*v8 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v10);
  uint64_t v11 = v8[1];
  ++*(_DWORD *)(v11 + 16);
  uint64_t v12 = *(const void **)(v11 + 64);
  if (v12)
  {
    CFRetain(*(CFTypeRef *)(v11 + 64));
    CFRelease(v12);
    CFTypeRef v23 = 0;
    WebKit::VideoPresentationInterfaceContext::setRootLayer(v11, &v23);
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v11 + 40), 0);
  }
  *(_DWORD *)(v11 + 48) = 0;
  *(unsigned char *)(v11 + 61) = 0;
  int v13 = *(_DWORD *)(v11 + 56);
  char v14 = *(unsigned char *)(v11 + 60);
  int v15 = *(unsigned __int8 *)(v11 + 52);
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v16 = &unk_1EE9E0558;
  v25[0] = v16;
  WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer();
  uint64_t v18 = (WTF::RunLoop *)v25[0];
  v25[0] = 0;
  if (v18) {
    uint64_t v18 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(v9 + 24);
  if (v19)
  {
    *(_DWORD *)(v19 + 28) += 2;
    uint64_t v18 = (WTF::RunLoop *)WebCore::HTMLVideoElement::didExitFullscreenOrPictureInPicture((WebCore::HTMLVideoElement *)v19);
  }
  *(unsigned char *)(v11 + 60) = 0;
  if (*(_DWORD *)(v11 + 56) != 4)
  {
    *(_DWORD *)(v11 + 56) = 0;
    uint64_t v18 = (WTF::RunLoop *)WebKit::VideoPresentationManager::removeClientForContext(a1, (uint64_t)a2);
  }
  if (v19)
  {
    if (v15 && (v13 | 4) != 4)
    {
      WTF::RunLoop::main(v18);
      ++*(_DWORD *)(a1 + 16);
      *(_DWORD *)(v19 + 28) += 2;
      uint64_t v21 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v21 = &unk_1EE9E0580;
      *(void *)(v21 + 8) = a1;
      *(void *)(v21 + 16) = v19;
      *(_DWORD *)(v21 + 24) = v13;
      *(unsigned char *)(v21 + 28) = v14;
      v25[0] = v21;
      WTF::RunLoop::dispatch();
      uint64_t v22 = v25[0];
      v25[0] = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
    else
    {
      *(unsigned char *)(v11 + 52) = 0;
      *(unsigned char *)(a1 + 96) = 0;
    }
    if (*(_DWORD *)(v19 + 28) == 2)
    {
      if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
      }
    }
    else
    {
      *(_DWORD *)(v19 + 28) -= 2;
    }
  }
  else
  {
    *(unsigned char *)(v11 + 52) = 0;
    *(unsigned char *)(a1 + 96) = 0;
  }
  if (*(_DWORD *)(v11 + 16) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  else {
    --*(_DWORD *)(v11 + 16);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v10, v17);
}

void sub_198F59B60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (*(_DWORD *)(v14 + 28) == 2)
  {
    if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
  }
  else
  {
    *(_DWORD *)(v14 + 28) -= 2;
  }
  if (v12[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  else {
    --v12[4];
  }
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v11, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::setVideoLayerGravityEnum(void *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v12 = a3;
  uint64_t v4 = (atomic_uchar *volatile *)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 1);
  uint64_t v5 = a1[5];
  uint64_t v7 = *(void *)(v5 + 72);
  uint64_t v6 = *(void *)(v5 + 80);
  v11[0] = "VideoPresentationManager";
  v11[1] = 25;
  void v11[2] = "setVideoLayerGravityEnum";
  v11[3] = v6;
  uint64_t v10 = WebCore::VideoPresentationModelVideoElement::logIdentifier((WebCore::VideoPresentationModelVideoElement *)v4);
  if (*(unsigned char *)(v7 + 12) && WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*,unsigned int>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v11, (uint64_t)&v10, &v12);
  }
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::setVideoLayerGravity();
  if (v4) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*((atomic_uchar **)v4 + 1), v9);
  }
  return result;
}

void sub_198F59DA8(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManager::fullscreenMayReturnToInline(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v28 = a2;
  uint64_t v3 = *(void *)(result + 32);
  if (!v3 || !*(void *)(v3 + 8)) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *WebKit::VideoPresentationManager::ensureModelAndInterface((void *)result, a2, 1);
  uint64_t v7 = (atomic_uchar **)(v6 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v6 + 8));
  if ((a3 & 1) == 0) {
    WebCore::Element::scrollIntoViewIfNotVisible(*(WebCore::Element **)(v6 + 24));
  }
  uint64_t v9 = *(void *)(v6 + 24);
  if (v9) {
    *(_DWORD *)(v9 + 28) += 2;
  }
  uint64_t v10 = *(void *)(v5 + 32);
  if (v10 && (uint64_t v11 = *(void *)(v10 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v11 - 8));
    char v12 = 0;
    uint64_t v13 = v11 - 16;
  }
  else
  {
    uint64_t v13 = 0;
    char v12 = 1;
  }
  float v14 = WebKit::inlineVideoFrame((WebKit *)v9, v8);
  uint64_t v15 = *(void *)(v13 + 32);
  v27[0] = v14;
  v27[1] = v16;
  _OWORD v27[2] = v17;
  v27[3] = v18;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v13 + 32);
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 1518;
  *((void *)v20 + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  BOOL v29 = v20;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v20, &v28);
  uint64_t v21 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
  if (!v22)
  {
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  *uint64_t v21 = 1;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v20, v27);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v13 + 32) + 32))(v13 + 32, &v29, 0);
  uint64_t v24 = v29;
  BOOL v29 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v23);
    WTF::fastFree(v25, v26);
    if (v12) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if ((v12 & 1) == 0) {
LABEL_14:
  }
    CFRelease(*(CFTypeRef *)(v13 + 8));
LABEL_15:
  if (*(_DWORD *)(v9 + 28) == 2)
  {
    if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 28) -= 2;
  }
  return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v7, v23);
}

void sub_198F59FD8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v12, a2);
  _Unwind_Resume(a1);
}

atomic_uchar *WebKit::VideoPresentationManager::requestRouteSharingPolicyAndContextUID(void *a1, uint64_t a2)
{
  uint64_t v2 = *WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 8));
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::requestRouteSharingPolicyAndContextUID();
  if (v2)
  {
    uint64_t v5 = *(atomic_uchar **)(v2 + 8);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(v5, v4);
  }
  return result;
}

void sub_198F5A0C0(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManager::ensureUpdatedVideoDimensions(void *a1, uint64_t a2, float a3, float a4)
{
  v65[1] = *MEMORY[0x1E4F143B8];
  uint64_t v48 = a2;
  *(float *)uint64_t v47 = a3;
  *(float *)&v47[1] = a4;
  uint64_t v4 = a1[4];
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v5 - 8));
      uint64_t v10 = a1[8];
      uint64_t v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10, a2);
      if (v10) {
        char v12 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4));
      }
      else {
        char v12 = 0;
      }
      if (v12 != v11)
      {
        uint64_t v13 = v11[1];
        float v14 = (atomic_uchar **)(v13 + 8);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v13 + 8));
        float v16 = *(float *)(v13 + 64);
        v46[0] = *(float *)(v13 + 60);
        v46[1] = v16;
        if (v46[0] != a3 || v16 != a4)
        {
          uint64_t v18 = a1[5];
          uint64_t v20 = *(void *)(v18 + 72);
          uint64_t v19 = *(void *)(v18 + 80);
          v45[0] = "VideoPresentationManager";
          v45[1] = 25;
          v45[2] = "ensureUpdatedVideoDimensions";
          v45[3] = v19;
          if (*(unsigned char *)(v20 + 12))
          {
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v54, (WTF::Logger::LogSiteIdentifier *)v45);
            WTF::String::String((WTF::String *)&v53, "existingVideoDimensions=");
            WebCore::FloatSize::toJSONString((uint64_t *)&v52, (WebCore::FloatSize *)v47);
            WTF::String::String((WTF::String *)&v51, ", videoDimensions=");
            WebCore::FloatSize::toJSONString((uint64_t *)&v50, (WebCore::FloatSize *)v46);
            v49[0] = v53;
            unsigned int v58 = v52;
            *(void *)&long long buf = v54;
            int8x8_t v56 = v50;
            long long v57 = v51;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v49, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
            if (!v55)
            {
              __break(0xC471u);
              return;
            }
            uint64_t v22 = v50;
            uint64_t v50 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy(v22, v21);
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
            CFTypeRef v23 = v51;
            uint64_t v51 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2) {
                WTF::StringImpl::destroy(v23, v21);
              }
              else {
                *(_DWORD *)v23 -= 2;
              }
            }
            uint64_t v24 = v52;
            int v52 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2) {
                WTF::StringImpl::destroy(v24, v21);
              }
              else {
                *(_DWORD *)v24 -= 2;
              }
            }
            int v25 = v53;
            uint64_t v53 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v21);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
            int v26 = v54;
            int v54 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2) {
                WTF::StringImpl::destroy(v26, v21);
              }
              else {
                *(_DWORD *)v26 -= 2;
              }
            }
            uint64_t v27 = qword_1EB357E20;
            uint64_t v28 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
            if (v28)
            {
              WTF::String::utf8();
              int v30 = v49[0] ? (char *)v49[0] + 16 : 0;
              LODWORD(buf) = 136446210;
              *(void *)((char *)&buf + 4) = v30;
              _os_log_impl(&dword_1985F2000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              uint64_t v28 = v49[0];
              v49[0] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1) {
                  uint64_t v28 = (WTF *)WTF::fastFree(v28, v29);
                }
                else {
                  --*(_DWORD *)v28;
                }
              }
            }
            if (WebKit2LogFullscreen)
            {
              uint64_t v31 = (atomic_uchar *)MEMORY[0x1E4F30998];
              while (1)
              {
                int v32 = *v31;
                if (v32) {
                  break;
                }
                int v33 = *v31;
                atomic_compare_exchange_strong_explicit(v31, (unsigned __int8 *)&v33, v32 | 1, memory_order_acquire, memory_order_acquire);
                if (v33 == v32)
                {
                  uint64_t v34 = WTF::Logger::observers(v28);
                  uint64_t v35 = *(unsigned int *)(v34 + 12);
                  if (v35)
                  {
                    uint64_t v36 = *(uint64_t **)v34;
                    uint64_t v44 = *(void *)v34 + 8 * v35;
                    do
                    {
                      uint64_t v37 = *v36;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v45);
                      int v60 = 0;
                      WTF::String::String((WTF::String *)v61, "existingVideoDimensions=");
                      v61[2] = 1;
                      WebCore::FloatSize::toJSONString(&v62, (WebCore::FloatSize *)v47);
                      int v63 = 0;
                      WTF::String::String((WTF::String *)v64, ", videoDimensions=");
                      v64[2] = 1;
                      WebCore::FloatSize::toJSONString(v65, (WebCore::FloatSize *)v46);
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v49, (uint64_t)&buf, 5uLL);
                      (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v37 + 16))(v37, &WebKit2LogFullscreen, 0, v49);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v38);
                      for (uint64_t i = 72; i != -8; i -= 16)
                      {
                        int v40 = *(WTF::StringImpl **)((char *)&buf + i);
                        *(void *)((char *)&buf + i) = 0;
                        if (v40)
                        {
                          if (*(_DWORD *)v40 == 2) {
                            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v29);
                          }
                          else {
                            *(_DWORD *)v40 -= 2;
                          }
                        }
                      }
                      ++v36;
                    }
                    while (v36 != (uint64_t *)v44);
                  }
                  int v41 = 1;
                  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v41, 0, memory_order_release, memory_order_relaxed);
                  float v14 = (atomic_uchar **)(v13 + 8);
                  if (v41 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                  break;
                }
              }
            }
            int v42 = v55;
            uint64_t v55 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2) {
                WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v29);
              }
              else {
                *(_DWORD *)v42 -= 2;
              }
            }
          }
          *(void *)&long long buf = &v48;
          *((void *)&buf + 1) = v46;
          uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
          IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoDimensions>(v5 + 16, (uint64_t)&buf, v43);
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v14, v15);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
  }
}

void sub_198F5A5E4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uchar **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  int v34 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a29)
  {
    if (*(_DWORD *)a29 == 2) {
      WTF::StringImpl::destroy(a29, a2);
    }
    else {
      *(_DWORD *)a29 -= 2;
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*a12, a2);
  CFRelease(*(CFTypeRef *)(a13 - 8));
  _Unwind_Resume(a1);
}

atomic_uchar *WebKit::VideoPresentationManager::setVideoLayerFrameFenced(void *a1, WTF::String *a2, unsigned int *a3, float a4, float a5, float a6, float a7)
{
  *(float *)int v32 = a4;
  *(float *)&v32[1] = a5;
  *(float *)&v32[2] = a6;
  *(float *)&v32[3] = a7;
  uint64_t v14 = a1[5];
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v15 = *(void *)(v14 + 80);
  v29.m_location = (IntPoint)"VideoPresentationManager";
  v29.m_size_t size = (IntSize)25;
  int v30 = "setVideoLayerFrameFenced";
  uint64_t v31 = v15;
  uint64_t v28 = a2;
  if (*(unsigned char *)(v16 + 12) && WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)&v29, &v28);
  }
  float v17 = WebKit::VideoPresentationManager::ensureModelAndInterface(a1, (uint64_t)a2, 1);
  uint64_t v18 = (WebCore::VideoPresentationModelVideoElement *)*v17;
  uint64_t v19 = (atomic_uchar *volatile *)(*v17 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v19);
  uint64_t v20 = v17[1];
  ++*(_DWORD *)(v20 + 16);
  uint64_t v21 = *(void *)(v20 + 40);
  if (v21
    && ((uint64_t v22 = *(void **)(v21 + 16)) == 0
      ? (uint64_t v23 = [*(id *)(v21 + 8) layer])
      : (uint64_t v23 = [v22 layer]),
        v23))
  {
    [*(id *)(*(void *)(v20 + 40) + 8) setFencePort:*a3];
    v33.m_location.m_CGFloat x = a4;
    v33.m_location.float m_y = a5;
    v33.m_size.float m_width = a6;
    v33.m_size.float m_height = a7;
    WebCore::VideoPresentationModelVideoElement::setVideoLayerFrame(v18, v33);
  }
  else
  {
    *(float *)&v29.m_location.m_CGFloat x = a6;
    *(float *)&v29.m_location.float m_y = a7;
    WebCore::VideoPresentationModelVideoElement::setVideoSizeFenced();
  }
  v29.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v32, v24);
  v29.m_size_t size = v25;
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::setTextTrackRepresentationBounds(v18, &v29);
  if (*(_DWORD *)(v20 + 16) == 1)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 8))(v20);
    if (!v18) {
      return result;
    }
  }
  else
  {
    --*(_DWORD *)(v20 + 16);
    if (!v18) {
      return result;
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)v19, v27);
}

void sub_198F5AA4C(_Unwind_Exception *exception_object, void *a2)
{
  if (v5)
  {
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
  }
  if (v4[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[4];
  }
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::setVideoFullscreenFrame(void *a1, WTF::String *a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12 = a1[5];
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v13 = *(void *)(v12 + 80);
  v20[0] = "VideoPresentationManager";
  v20[1] = 25;
  void v20[2] = "setVideoFullscreenFrame";
  v20[3] = v13;
  uint64_t v19 = a2;
  if (*(unsigned char *)(v14 + 12))
  {
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v20, &v19);
    }
  }
  uint64_t v16 = (atomic_uchar *volatile *)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, (uint64_t)a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v16 + 1);
  v21.m_location.m_CGFloat x = a3;
  v21.m_location.float m_y = a4;
  v21.m_size.float m_width = a5;
  v21.m_size.float m_height = a6;
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::setVideoFullscreenFrame((WebCore::VideoPresentationModelVideoElement *)v16, v21);
  if (v16) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*((atomic_uchar **)v16 + 1), v18);
  }
  return result;
}

void sub_198F5ABD4(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManager::updateTextTrackRepresentationForVideoElement(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v6 = result;
      ++*(_DWORD *)(result + 56);
      uint64_t v7 = *(void *)(a2 + 304);
      if (v7 && *(void *)(v7 + 8))
      {
        uint64_t v8 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(result + 48), v7);
        uint64_t v9 = *(void *)(v6 + 32);
        uint64_t v15 = v8;
        if (!v9)
        {
          uint64_t v10 = 0;
LABEL_11:
          v14[0] = &v15;
          v14[1] = a3;
          uint64_t v12 = *(void *)(v10 + 32);
          uint64_t v11 = v10 + 32;
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationUpdate>(v11, (uint64_t)v14, v13, 0);
        }
        uint64_t v4 = *(void *)(v9 + 8);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (v4) {
        uint64_t v10 = v4 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t WebKit::VideoPresentationManager::setTextTrackRepresentationContentScaleForVideoElement(uint64_t this, WebCore::HTMLVideoElement *a2, float a3)
{
  uint64_t v3 = *(void *)(this + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v6 = this;
      ++*(_DWORD *)(this + 56);
      uint64_t v7 = *((void *)a2 + 38);
      if (v7 && *(void *)(v7 + 8))
      {
        uint64_t v8 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(this + 48), v7);
        uint64_t v9 = *(void *)(v6 + 32);
        uint64_t v16 = v8;
        if (!v9)
        {
          uint64_t v10 = 0;
LABEL_11:
          uint64_t v14 = &v16;
          float v15 = a3;
          uint64_t v12 = *(void *)(v10 + 32);
          uint64_t v11 = v10 + 32;
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetContentsScale>(v11, (uint64_t)&v14, v13, 0);
        }
        uint64_t v4 = *(void *)(v9 + 8);
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (v4) {
        uint64_t v10 = v4 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      goto LABEL_11;
    }
  }
  return this;
}

uint64_t WebKit::VideoPresentationManager::setTextTrackRepresentationIsHiddenForVideoElement(uint64_t this, WebCore::HTMLVideoElement *a2, char a3)
{
  uint64_t v3 = *(void *)(this + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v6 = this;
      ++*(_DWORD *)(this + 56);
      uint64_t v7 = *((void *)a2 + 38);
      if (v7 && *(void *)(v7 + 8))
      {
        uint64_t v8 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(this + 48), v7);
        uint64_t v9 = *(void *)(v6 + 32);
        uint64_t v12 = v8;
        if (!v9)
        {
LABEL_11:
          uint64_t v10 = &v12;
          char v11 = a3;
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetHidden>(v9 + 32, (uint64_t)&v10);
        }
        uint64_t v4 = *(void *)(v9 + 8);
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (v4) {
        uint64_t v9 = v4 - 16;
      }
      else {
        uint64_t v9 = 0;
      }
      goto LABEL_11;
    }
  }
  return this;
}

uint64_t IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetHidden>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1528;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v5, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198F5AF28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::setRequiresTextTrackRepresentation(void *a1, uint64_t a2)
{
  uint64_t v2 = (atomic_uchar *volatile *)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2 + 1);
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::setRequiresTextTrackRepresentation((WebCore::VideoPresentationModelVideoElement *)v2);
  if (v2)
  {
    uint64_t v5 = (atomic_uchar *)*((void *)v2 + 1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(v5, v4);
  }
  return result;
}

void sub_198F5AFC0(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::VideoPresentationManager::setTextTrackRepresentationBounds(void *a1, uint64_t a2, const IntRect *a3)
{
  uint64_t v4 = (atomic_uchar *volatile *)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 1);
  uint64_t result = (atomic_uchar *)WebCore::VideoPresentationModelVideoElement::setTextTrackRepresentationBounds((WebCore::VideoPresentationModelVideoElement *)v4, a3);
  if (v4)
  {
    uint64_t v7 = (atomic_uchar *)*((void *)v4 + 1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(v7, v6);
  }
  return result;
}

void sub_198F5B04C(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebProcess::bindAccessibilityFrameWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = *(id *)(a1 + 752);
  if (!v8)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v10 = *(const void **)(a1 + 752);
    *(void *)(a1 + 752) = v8;
    if (v10)
    {
      CFRelease(v10);
      id v8 = *(id *)(a1 + 752);
    }
  }
  char v11 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:a5];
  objc_msgSend(v8, "setObject:forKey:", v11, objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", a2));
  if (v11)
  {
    CFRelease(v11);
  }
}

void sub_198F5B134(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::WebProcess::accessibilityFocusedUIElement(WebKit::WebProcess *this)
{
  CFTypeRef cf = 0;
  uint64_t v1 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v1 = &unk_1EE9E0260;
  v1[1] = &cf;
  v1[2] = &v7;
  id v8 = v1;
  WTF::callOnMainThreadAndWait();
  uint64_t v2 = v8;
  id v8 = 0;
  if (v2) {
    (*(void (**)(void *))(*v2 + 8))(v2);
  }
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  CFTypeRef v4 = (id)CFMakeCollectable(v3);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

void sub_198F5B20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::setMediaMIMETypes(WebCore::AVAssetMIMETypeCache *a1, uint64_t a2)
{
  CFTypeRef v3 = (WebCore::MIMETypeCache *)WebCore::AVAssetMIMETypeCache::singleton(a1);
  uint64_t result = WebCore::MIMETypeCache::isEmpty(v3);
  if (result)
  {
    return MEMORY[0x1F416F9E0](v3, a2);
  }
  return result;
}

void WebKit::WebProcess::additionalStateForDiagnosticReport(WebKit::WebProcess *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  WebCore::PerformanceLogging::memoryUsageStatistics();
  char v7 = v31;
  if (HIDWORD(v32))
  {
    do
    {
      id v8 = (const void *)[[NSString alloc] initWithUTF8String:*(void *)v7];
      objc_msgSend(v5, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedLong:", *((void *)v7 + 2)), v8);
      if (v8) {
        CFRelease(v8);
      }
      char v7 = (WTF *)((char *)v7 + 24);
    }
    while (v7 != (WTF *)((char *)v31 + 24 * HIDWORD(v32)));
    char v7 = v31;
  }
  if (v7)
  {
    uint64_t v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v7, v6);
  }
  [v4 setObject:v5 forKey:@"Memory Usage Stats"];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v9 = (WebCore::PerformanceLogging *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  WebCore::PerformanceLogging::javaScriptObjectCounts((uint64_t *)&v31, v9);
  char v11 = v31;
  if (!v31)
  {
    uint64_t v14 = 0;
    uint64_t v12 = 0;
LABEL_56:
    uint64_t v13 = (WTF *)((char *)v31 + 16 * v12);
    goto LABEL_17;
  }
  uint64_t v12 = *((unsigned int *)v31 - 1);
  uint64_t v13 = (WTF *)((char *)v31 + 16 * v12);
  if (!*((_DWORD *)v31 - 3))
  {
    uint64_t v14 = (WTF *)((char *)v31 + 16 * v12);
    goto LABEL_56;
  }
  uint64_t v14 = v31;
  if (v12)
  {
    uint64_t v15 = 16 * v12;
    uint64_t v14 = v31;
    while ((unint64_t)(*(void *)v14 + 1) <= 1)
    {
      uint64_t v14 = (WTF *)((char *)v14 + 16);
      v15 -= 16;
      if (!v15)
      {
        uint64_t v14 = v13;
        break;
      }
    }
  }
LABEL_17:
  if (v31) {
    uint64_t v16 = (WTF *)((char *)v31 + 16 * *((unsigned int *)v31 - 1));
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 != v14)
  {
    do
    {
      float v17 = (const void *)[[NSString alloc] initWithUTF8String:*(void *)v14];
      -[WebCore::PerformanceLogging setObject:forKey:](v9, "setObject:forKey:", [NSNumber numberWithUnsignedInt:*((unsigned int *)v14 + 2)], v17);
      if (v17) {
        CFRelease(v17);
      }
      uint64_t v18 = (WTF *)((char *)v14 + 16);
      uint64_t v14 = v13;
      if (v18 != v13)
      {
        uint64_t v14 = v18;
        while ((unint64_t)(*(void *)v14 + 1) <= 1)
        {
          uint64_t v14 = (WTF *)((char *)v14 + 16);
          if (v14 == v13)
          {
            uint64_t v14 = v13;
            break;
          }
        }
      }
    }
    while (v14 != v16);
    char v11 = v31;
  }
  if (v11) {
    WTF::fastFree((WTF *)((char *)v11 - 16), v10);
  }
  [v4 setObject:v9 forKey:@"JavaScript Object Counts"];
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v19 = (void **)((char *)this + 120);
  uint64_t v20 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v19);
  uint64_t v22 = v21;
  if (*v19) {
    uint64_t v23 = (uint64_t)&(*v19)[2 * *((unsigned int *)*v19 - 1)];
  }
  else {
    uint64_t v23 = 0;
  }
  id v24 = objc_alloc(MEMORY[0x1E4F1CA48]);
  if (*v19) {
    uint64_t v25 = *((unsigned int *)*v19 - 3);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = [v24 initWithCapacity:v25];
  uint64_t v27 = (void *)v26;
  if ((void *)v23 != v20)
  {
    do
    {
      uint64_t v26 = WebKit::WebPage::usesEphemeralSession((WebKit::WebPage *)v20[1]);
      if ((v26 & 1) == 0)
      {
        uint64_t v26 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:*(double *)(v20[1] + 2040)];
        if (v26) {
          uint64_t v26 = [v27 addObject:v26];
        }
      }
      while (1)
      {
        v20 += 2;
        if (v20 == v22) {
          break;
        }
        if ((unint64_t)(*v20 + 1) > 1) {
          goto LABEL_52;
        }
      }
      uint64_t v20 = v22;
LABEL_52:
      ;
    }
    while (v20 != (void *)v23);
  }
  uint64_t v31 = (WTF *)WTF::MemoryPressureHandler::processStateDescription((WTF::MemoryPressureHandler *)v26);
  uint64_t v32 = v28;
  WTF::ASCIILiteral::createNSString((uint64_t *)&cf, (WTF::ASCIILiteral *)&v31);
  [v4 setObject:cf forKey:@"Websam State"];
  if ([v27 count]) {
    [v4 setObject:v27 forKey:@"Page Load Times"];
  }
  *a2 = v4;
  CFTypeRef v29 = cf;
  CFTypeRef cf = 0;
  if (v29) {
    CFRelease(v29);
  }
  if (v27) {
    CFRelease(v27);
  }
}

void sub_198F5B630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12)
{
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198F5B6E4()
{
  if (v0) {
    CFRelease(v0);
  }
  JUMPOUT(0x198F5B6B0);
}

void *WebKit::WebProcess::platformTerminate(WebKit::WebProcess *this)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = WebCore::AVAssetMIMETypeCache::singleton(this);
  v3[3] = 0;
  std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator=[abi:sn180100]((void *)(v1 + 40), (uint64_t)v3);
  return std::__function::__value_func<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::~__value_func[abi:sn180100](v3);
}

CFDataRef WebKit::WebProcess::sourceApplicationAuditData@<X0>(CFDataRef this@<X0>, CFDataRef *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    this = *(CFDataRef *)(v3 + 352);
    if (this)
    {
      xpc_connection_get_audit_token();
      bytes[32] = 1;
      this = CFDataCreate(0, bytes, 32);
    }
    *a2 = this;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::WebProcess::getActivePagesOriginsForTesting(uint64_t a1, uint64_t *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a2);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void sub_198F5B7FC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WebKit::WebProcess::destroyRenderingResources(WebKit::WebProcess *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  WTF::MonotonicTime::now(this);
  double v3 = v2;
  id v4 = (WTF::MonotonicTime *)CABackingStoreCollectBlocking();
  WTF::MonotonicTime::now(v4);
  double v6 = v5;
  char v7 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672)) {
      uint64_t v8 = *((void *)this + 83);
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = 134218496;
    uint64_t v10 = this;
    __int16 v11 = 2048;
    uint64_t v12 = v8;
    __int16 v13 = 2048;
    double v14 = (v6 - v3) * 1000.0;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::destroyRenderingResources: took %.2fms", (uint8_t *)&v9, 0x20u);
  }
}

void WebKit::WebProcess::updateFreezerStatus(WebKit::WebProcess *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 149) < 4u) {
    goto LABEL_11;
  }
  double v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  id v4 = (void *)*((void *)this + 15);
  if (v4) {
    v4 += 2 * *((unsigned int *)v4 - 1);
  }
  if (v4 == v2)
  {
LABEL_11:
    int v5 = 0;
  }
  else
  {
    while (*(unsigned char *)(v2[1] + 2108))
    {
      while (1)
      {
        v2 += 2;
        if (v2 == v3) {
          break;
        }
        if ((unint64_t)(*v2 + 1) > 1) {
          goto LABEL_10;
        }
      }
      double v2 = v3;
LABEL_10:
      if (v2 == v4) {
        goto LABEL_11;
      }
    }
    int v5 = 1;
  }
  getpid();
  int v6 = memorystatus_control();
  char v7 = qword_1EB358348;
  if (v6)
  {
    int v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR))
    {
      if (*((unsigned char *)this + 672)) {
        uint64_t v9 = *((void *)this + 83);
      }
      else {
        uint64_t v9 = 0;
      }
      int v11 = 134218752;
      uint64_t v12 = this;
      __int16 v13 = 2048;
      uint64_t v14 = v9;
      __int16 v15 = 1024;
      int v16 = v5;
      __int16 v17 = 1024;
      int v18 = v8;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] WebProcess::updateFreezerStatus: isFreezable=%d, error=%d", (uint8_t *)&v11, 0x22u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 672)) {
      uint64_t v10 = *((void *)this + 83);
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = 134218496;
    uint64_t v12 = this;
    __int16 v13 = 2048;
    uint64_t v14 = v10;
    __int16 v15 = 1024;
    int v16 = v5;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::updateFreezerStatus: isFreezable=%d, success", (uint8_t *)&v11, 0x1Cu);
  }
}

void WebKit::WebProcess::dispatchSimulatedNotificationsForPreferenceChange(WebKit::WebProcess *this, WTF **a2, const WTF::StringImpl *a3)
{
  if (_MergedGlobals_101 == 1)
  {
    double v3 = (const WTF::StringImpl *)qword_1EB359D98;
  }
  else
  {
    double v3 = (const WTF::StringImpl *)&WebKit::captionProfilePreferenceKey(void)::$_0::operator() const(void)::impl;
    WebKit::captionProfilePreferenceKey(void)::$_0::operator() const(void)::impl += 2;
    qword_1EB359D98 = (uint64_t)&WebKit::captionProfilePreferenceKey(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_101 = 1;
  }
  if (WTF::equal(*a2, v3, a3))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFStringRef MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification = (const __CFString *)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(LocalCenter);
    CFNotificationCenterPostNotification(LocalCenter, MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification, 0, 0, 1u);
  }
}

uint64_t WebKit::WebProcess::handlePreferenceChange(WebKit::WebProcess *this, WTF **a2, const WTF::String *a3, objc_object *a4)
{
  int v8 = (WebKit::AuxiliaryProcess *)MEMORY[0x19972E990](*(void *)a3, "AppleLanguages", 14);
  if (v8)
  {
    int v11 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
    uint64_t v12 = *MEMORY[0x1E4F281D8];
    __int16 v13 = objc_msgSend((id)objc_msgSend(v11, "volatileDomainForName:", *MEMORY[0x1E4F281D8]), "mutableCopy");
    [v13 setValue:a4 forKey:@"AppleLanguages"];
    int v8 = (WebKit::AuxiliaryProcess *)WTF::languageDidChange((WTF *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "setVolatileDomain:forName:", v13, v12));
    if (v13) {
      CFRelease(v13);
    }
  }
  WebKit::AuxiliaryProcess::handleAXPreferenceChange(v8, a2, v9, v10);
  uint64_t v14 = *(uint64_t (**)(WebKit::WebProcess *, const WTF::String *))(*(void *)this + 144);

  return v14(this, a3);
}

void sub_198F5BC8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebProcess::accessibilitySettingsDidChange(WebKit::WebProcess *this)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 15);
  double v3 = result;
  int v5 = v4;
  uint64_t v6 = *((void *)this + 15);
  if (v6) {
    char v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      uint64_t result = (void *)WebCore::Page::accessibilitySettingsDidChange(*(WebCore::Page **)(v3[1] + 48));
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      double v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

const char ***WebKit::WebProcess::grantAccessToAssetServices(const char ***result, uint64_t a2)
{
  if (!*((_DWORD *)result + 175))
  {
    uint64_t v2 = *(unsigned int *)(a2 + 12);
    if (v2)
    {
      double v3 = result;
      id v4 = (uint64_t *)(result + 86);
      int v5 = *(WebKit::SandboxExtensionImpl ***)a2;
      uint64_t v6 = 8 * v2;
      do
      {
        if (*v5)
        {
          uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)uint64_t v7 = 1;
          int v8 = *v5;
          void *v5 = 0;
          uint64_t v12 = (const char ***)v7;
          *(void *)(v7 + 8) = v8;
          *(void *)(v7 + 16) = 1;
          WebKit::SandboxExtensionImpl::consume(v8);
          uint64_t v9 = *((unsigned int *)v3 + 175);
          if (v9 == *((_DWORD *)v3 + 174))
          {
            WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>&>((uint64_t)v4, (unint64_t)&v12);
          }
          else
          {
            uint64_t v10 = *v4;
            int v11 = v12;
            if (v12) {
              ++*(_DWORD *)v12;
            }
            *(void *)(v10 + 8 * v9) = v11;
            *((_DWORD *)v3 + 175) = v9 + 1;
          }
          uint64_t result = v12;
          uint64_t v12 = 0;
          if (result) {
            uint64_t result = WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void sub_198F5BE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const char ***a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::revokeAccessToAssetServices(WebKit::WebProcess *this)
{
  uint64_t v2 = *((unsigned int *)this + 175);
  if (v2)
  {
    double v3 = (uint64_t *)*((void *)this + 86);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3;
      if (*v3) {
        ++*(_DWORD *)v5;
      }
      uint64_t v6 = *(void *)(v5 + 16) - 1;
      *(void *)(v5 + 16) = v6;
      if (!v6)
      {
        *(void *)(*(void *)(v5 + 8) + 8) = 0;
        sandbox_extension_release();
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v5);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }

  return WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 688, 0);
}

void sub_198F5BECC(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::SandboxExtension>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebProcess::switchFromStaticFontRegistryToUserFontRegistry(uint64_t a1, const WebKit::SandboxExtensionHandle *a2)
{
  return WebKit::SandboxExtension::consumePermanently((uint64_t)a2, a2);
}

void *WebKit::WebProcess::setScreenProperties(uint64_t a1)
{
  WebCore::setScreenProperties();
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 120));
  double v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6) {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      uint64_t result = (void *)WebCore::Page::screenPropertiesDidChange(*(WebCore::Page **)(v3[1] + 48));
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      double v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t WebKit::WebProcess::unblockServicesRequiredByAccessibility(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198F5C0CCLL);
    }
    uint64_t v8 = WTF::fastMalloc((WTF *)(8 * v2));
    LODWORD(v15) = v2;
    uint64_t v14 = (WebKit::SandboxExtension **)v8;
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v9)
    {
      LODWORD(v2) = 0;
      uint64_t v10 = *(WebKit::SandboxExtensionImpl ***)a2;
      uint64_t v11 = 8 * v9;
      do
      {
        WebKit::WebProcess::unblockServicesRequiredByAccessibility(WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(&v16, v10);
        if (v16)
        {
          *(void *)(v8 + 8 * v2) = v16;
          LODWORD(v2) = v2 + 1;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
      HIDWORD(v15) = v2;
    }
    else
    {
      LODWORD(v2) = 0;
    }
  }
  WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v14, v2);
  uint64_t v3 = [(id)GSSystemRootDirectory() stringByAppendingPathComponent:@"System/Library/AccessibilityBundles/WebProcessLoader.axbundle"];
  uint64_t v16 = 0;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithPath:", v3), "loadAndReturnError:", &v16);
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithPath:", objc_msgSend((id)GSSystemRootDirectory(), "stringByAppendingPathComponent:", @"System/Library/AccessibilityBundles/WebProcess.axbundle"));
  uint64_t v16 = 0;
  if ([v4 loadAndReturnError:&v16]) {
    objc_msgSend((id)objc_msgSend(v4, "principalClass"), "safeValueForKey:", @"accessibilityInitializeBundle");
  }
  if (HIDWORD(v15))
  {
    uint64_t v12 = v14;
    uint64_t v13 = 8 * HIDWORD(v15);
    do
    {
      WebKit::SandboxExtension::revoke(*v12++);
      v13 -= 8;
    }
    while (v13);
  }
  return WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v5);
}

void sub_198F5C0D8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebProcess::didWriteToPasteboardAsynchronously(WebKit::WebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (uint64_t *)((char *)this + 704);
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 88, a2, a3);
  uint64_t v6 = *((void *)this + 88);
  if (v6) {
    uint64_t v7 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    if (*((_DWORD *)result + 2) != 1)
    {
      --*((_DWORD *)result + 2);
      return result;
    }
    if (v6)
    {
      uint64_t v8 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
      if (v8 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v8 = 0;
    }
    if (v8 != result)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v4, (WTF::StringImpl **)result);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcess::waitForPendingPasteboardWritesToFinish(WebKit::WebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (uint64_t *)((char *)this + 704);
  while (1)
  {
    uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, a2, a3);
    if (!result) {
      break;
    }
    uint64_t v7 = *((void *)this + 5);
    WTF::ApproximateTime::now(result);
    if (IPC::Connection::waitForAndDispatchImmediately<Messages::WebProcess::DidWriteToPasteboardAsynchronously>(v7, 0, 1, v8 + 1.0))
    {
      uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, a2, a3);
      if (*v5)
      {
        uint64_t v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
        if ((WTF::StringImpl *)v9 == result) {
          return result;
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        uint64_t v9 = 0;
      }
      if ((WTF::StringImpl *)v9 != result)
      {
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, (WTF::StringImpl **)result);
      }
      return result;
    }
  }
  return result;
}

uint64_t IPC::Connection::waitForAndDispatchImmediately<Messages::WebProcess::DidWriteToPasteboardAsynchronously>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  IPC::Connection::waitForMessage((atomic_uchar *volatile **)a1, 0xA44u, a2, a3, (uint64_t)&v9, a4);
  int v5 = v10;
  if (!v10)
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 33));
    int v5 = v10;
    if (v7)
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1, v9);
      uint64_t v6 = 0;
      int v5 = v10;
    }
    else
    {
      uint64_t v6 = 1;
    }
    if (v5 == -1) {
      return v6;
    }
    goto LABEL_8;
  }
  if (v10 == 1)
  {
    uint64_t v6 = v9;
LABEL_8:
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v5])(&v11, &v9);
    return v6;
  }
  uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
  return result;
}

void sub_198F5C350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::postObserverNotification(WebKit::WebProcess *this, const WTF::String *a2)
{
  uint64_t v3 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  if (*(void *)a2) {
    uint64_t v4 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1EEA10550;
  }

  return [v3 postNotificationName:v4 object:0];
}

uint64_t WebKit::PlaybackSessionInterfaceContext::ptrCount(WebKit::PlaybackSessionInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionInterfaceContext::ptrCountWithoutThreadCheck(WebKit::PlaybackSessionInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::PlaybackSessionInterfaceContext::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebKit::PlaybackSessionInterfaceContext::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 20);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 20) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebKit::VideoPresentationInterfaceContext::ptrCount(WebKit::VideoPresentationInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::VideoPresentationInterfaceContext::ptrCountWithoutThreadCheck(WebKit::VideoPresentationInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::VideoPresentationInterfaceContext::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebKit::VideoPresentationInterfaceContext::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 20);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 20) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (_DWORD *)-1)
      {
        int v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (v5[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[4];
          }
        }
        uint64_t v6 = (uint64_t)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 32) == 1) {
            (*(void (**)(void))(*(void *)(v6 + 16) + 8))();
          }
          else {
            --*(_DWORD *)(v6 + 32);
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (_DWORD *)-1)
      {
        int v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (v5[4] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[4];
          }
        }
        uint64_t v6 = (uint64_t)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v6) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), a2);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(unsigned int **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      int v5 = *v4;
      if (*v4 != (unsigned int *)-1)
      {
        *uint64_t v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WTF::Detail::CallableWrapper<objc_object * WebCore::Accessibility::retrieveAutoreleasedValueFromMainThread<objc_object *,WebKit::WebProcess::accessibilityFocusedUIElement(void)::$_0::operator() const(void)::{lambda(void)#1}>(WebKit::WebProcess::accessibilityFocusedUIElement(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  uint64_t v2 = WebKit::WebProcess::focusedWebPage((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *(const void ***)(a1 + 8);
  int v5 = *v4;
  *uint64_t v4 = 0;
  if (v5)
  {
    CFRelease(v5);
  }
}

WTF *___ZN6WebKitL15registerLogHookEv_block_invoke(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = (WTF *)qword_1EB359D80;
  if (qword_1EB359D80) {
    uint64_t result = (WTF *)(*(uint64_t (**)(void))(qword_1EB359D80 + 16))();
  }
  if ((a2 & 3) == 0 && *(void *)(a3 + 104) <= 0x400uLL)
  {
    WTF::CString::CString((WTF::CString *)&v29, *(const char **)(a3 + 88));
    WTF::CString::CString((WTF::CString *)&v28, *(const char **)(a3 + 128));
    WTF::CString::CString((WTF::CString *)&v27, *(const char **)(a3 + 136));
    BOOL v6 = a2 != 17;
    if (a2 == 17) {
      char v7 = 16;
    }
    else {
      char v7 = a2;
    }
    unint64_t v8 = *(void *)(a3 + 104);
    if (v8)
    {
      if (HIDWORD(v8)) {
        goto LABEL_35;
      }
      uint64_t v9 = *(void *)(a3 + 96);
      uint64_t v10 = WTF::fastMalloc(*(WTF **)(a3 + 104));
      uint64_t v11 = v10;
      for (uint64_t i = 0; i != v8; ++i)
        *(unsigned char *)(v10 + i) = *(unsigned char *)(v9 + i);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = *(WTF **)(a3 + 120);
    if (!v13)
    {
      uint64_t v16 = 0;
LABEL_16:
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = ___ZN6WebKitL8logQueueEv_block_invoke;
      block[3] = &__block_descriptor_33_e8_32c31_ZTSKZN6WebKitL8logQueueEvE3__0_e5_v8__0l;
      if (qword_1EB359D90 != -1) {
        dispatch_once(&qword_1EB359D90, block);
      }
      uint64_t v18 = qword_1EB359D88;
      (*(void (**)(uint64_t))(*(void *)qword_1EB359D88 + 48))(qword_1EB359D88);
      uint64_t v20 = v28;
      uint64_t v19 = v29;
      uint64_t v28 = 0;
      CFTypeRef v29 = 0;
      FloatRect v21 = v27;
      uint64_t v27 = 0;
      uint64_t v22 = WTF::fastMalloc((WTF *)0x50);
      *(void *)uint64_t v22 = &unk_1EE9E02D8;
      *(void *)(v22 + 8) = v19;
      *(void *)(v22 + 16) = v20;
      *(void *)(v22 + 24) = v21;
      *(unsigned char *)(v22 + 32) = v7;
      *(void *)(v22 + 40) = v11;
      *(_DWORD *)(v22 + 48) = v8;
      *(_DWORD *)(v22 + 52) = v8;
      *(void *)(v22 + 56) = v16;
      *(_DWORD *)(v22 + 64) = v13;
      *(_DWORD *)(v22 + 68) = v13;
      *(_DWORD *)(v22 + 72) = 4 * v6;
      block[0] = v22;
      WTF::WorkQueueBase::dispatchWithQOS();
      uint64_t v23 = block[0];
      block[0] = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      (*(void (**)(uint64_t))(*(void *)v18 + 56))(v18);
      uint64_t v25 = v27;
      uint64_t v27 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          WTF::fastFree(v25, v24);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
      uint64_t v26 = v28;
      uint64_t v28 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v24);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      uint64_t result = v29;
      CFTypeRef v29 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1) {
          return (WTF *)WTF::fastFree(result, v24);
        }
        else {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    if (!((unint64_t)v13 >> 32))
    {
      uint64_t v14 = *(void *)(a3 + 112);
      uint64_t v15 = WTF::fastMalloc(v13);
      uint64_t v16 = v15;
      for (uint64_t j = 0; j != v13; uint64_t j = (WTF *)((char *)j + 1))
        *((unsigned char *)j + v15) = *((unsigned char *)j + v14);
      goto LABEL_16;
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x198F5CA7CLL);
  }
  return result;
}

void sub_198F5CA88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF *a10, WTF *a11, uint64_t a12)
{
  if (v12) {
    WTF::fastFree(v12, a2);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 1) {
      WTF::fastFree(a9, a2);
    }
    else {
      --*(_DWORD *)a9;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 1) {
      WTF::fastFree(a11, a2);
    }
    else {
      --*(_DWORD *)a11;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZN6WebKitL15registerLogHookEvEUb_EN4__20D1Ev(uint64_t a1, void *a2)
{
  uint64_t v3 = *(WTF **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  int v5 = *(WTF **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1) {
      WTF::fastFree(v5, a2);
    }
    else {
      --*(_DWORD *)v5;
    }
  }
  BOOL v6 = *(WTF **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1) {
      WTF::fastFree(v6, a2);
    }
    else {
      --*(_DWORD *)v6;
    }
  }
  char v7 = *(WTF **)a1;
  *(void *)a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1) {
      WTF::fastFree(v7, a2);
    }
    else {
      --*(_DWORD *)v7;
    }
  }
  return a1;
}

uint64_t ___ZN6WebKitL8logQueueEv_block_invoke()
{
  uint64_t result = WTF::WorkQueue::create();
  qword_1EB359D88 = v1;
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKitL15registerLogHookEvEUb_E4__20vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9E02D8;
  _ZZZN6WebKitL15registerLogHookEvEUb_EN4__20D1Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKitL15registerLogHookEvEUb_E4__20vJEED0Ev(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9E02D8;
  _ZZZN6WebKitL15registerLogHookEvEUb_EN4__20D1Ev((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKitL15registerLogHookEvEUb_E4__20vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = (const char *)os_log_copy_message_string();
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    size_t v4 = strlen(v2);
    {
      uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v26);
    }
    uint64_t v5 = WebKit::WebProcess::networkProcessConnectionID((atomic_uchar *)WebKit::WebProcess::singleton(void)::process);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        unint64_t v8 = (const void *)(v7 + 16);
        size_t v9 = *(void *)(v7 + 8) + 1;
      }
      else
      {
        unint64_t v8 = 0;
        size_t v9 = 0;
      }
      uint64_t v10 = *(void *)(a1 + 24);
      if (v10)
      {
        uint64_t v11 = (const void *)(v10 + 16);
        size_t v12 = *(void *)(v10 + 8) + 1;
      }
      else
      {
        uint64_t v11 = 0;
        size_t v12 = 0;
      }
      char v13 = *(unsigned char *)(a1 + 32);
      pid_t v27 = getpid();
      uint64_t v14 = *(unsigned int *)(a1 + 72);
      IPC::Connection::connection(v6, &v28);
      uint64_t v15 = (uint64_t)v28;
      if (v28)
      {
        uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v16 = 249;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 66) = (char *)v16 + 16;
        *((void *)v16 + 67) = 512;
        *((void *)v16 + 68) = 0;
        *((void *)v16 + 70) = 0;
        *((void *)v16 + 69) = 0;
        IPC::Encoder::encodeHeader(v16);
        CFTypeRef v29 = v16;
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v16, v8, v9);
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v16, v11, v12);
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v16, v3, v4 + 1);
        __int16 v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x198F5CFECLL);
        }
        *__int16 v17 = v13;
        uint64_t v19 = (_DWORD *)IPC::Encoder::grow(v16, 4uLL, 4);
        if (v20 <= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198F5D00CLL);
        }
        *uint64_t v19 = v27;
        IPC::Connection::sendMessageImpl(v15, (uint64_t *)&v29, 0, v14 | 0x100000000);
        uint64_t v22 = v29;
        CFTypeRef v29 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v21);
          WTF::fastFree(v24, v25);
        }
        uint64_t v23 = v28;
        uint64_t v28 = 0;
        if (v23) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v23);
        }
      }
    }
    free(v3);
  }
}

void sub_198F5D030(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uchar ***)(v1 - 104);
  *(void *)(v1 - 104) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::PlaybackSessionModelMediaElement,WTF::RawPtrTraits<WebCore::PlaybackSessionModelMediaElement>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionModelMediaElement>>,WTF::Ref<WebKit::PlaybackSessionInterfaceContext,WTF::RawPtrTraits<WebKit::PlaybackSessionInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      size_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            id v24 = (uint64_t *)(v16 + 24 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          uint64_t v25 = v16 + 24 * v23;
          uint64_t v28 = *(_DWORD **)(v25 + 16);
          pid_t v27 = (void *)(v25 + 16);
          uint64_t v26 = v28;
          *pid_t v27 = 0;
          if (v28)
          {
            if (v26[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
            }
            else {
              --v26[4];
            }
          }
          uint64_t v30 = *(v27 - 1);
          *(v27 - 1) = 0;
          if (v30)
          {
            if (*(_DWORD *)(v30 + 32) == 1) {
              (*(void (**)(void))(*(void *)(v30 + 16) + 8))();
            }
            else {
              --*(_DWORD *)(v30 + 32);
            }
          }
          *id v24 = *v12;
          uint64_t v31 = v4 + 24 * v9;
          uint64_t v33 = *(void *)(v31 + 8);
          uint64_t v32 = (uint64_t *)(v31 + 8);
          *uint64_t v32 = 0;
          *(v27 - 1) = v33;
          uint64_t v34 = v32[1];
          v32[1] = 0;
          *pid_t v27 = v34;
          uint64_t v35 = (_DWORD *)v32[1];
          v32[1] = 0;
          if (v35)
          {
            if (v35[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
            }
            else {
              --v35[4];
            }
          }
          uint64_t v36 = *v32;
          *uint64_t v32 = 0;
          if (v36)
          {
            if (*(_DWORD *)(v36 + 32) == 1) {
              (*(void (**)(void))(*(void *)(v36 + 16) + 8))();
            }
            else {
              --*(_DWORD *)(v36 + 32);
            }
          }
          if (v12 == a3) {
            uint64_t v10 = v24;
          }
        }
        else
        {
          uint64_t v14 = v4 + 24 * v9;
          uint64_t v15 = *(_DWORD **)(v14 + 16);
          *(void *)(v14 + 16) = 0;
          if (v15)
          {
            if (v15[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
            }
            else {
              --v15[4];
            }
          }
          uint64_t v29 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v29)
          {
            if (*(_DWORD *)(v29 + 32) == 1) {
              (*(void (**)(void))(*(void *)(v29 + 16) + 8))();
            }
            else {
              --*(_DWORD *)(v29 + 32);
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

unsigned int *WTF::GenericHashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *a1;
  *a1 = v3;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  uint64_t v4 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(v4 + 12));
  uint64_t v5 = *(unsigned int *)(v4 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)v4;
    uint64_t v7 = 24 * v5;
    do
    {
      IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::encode(a1, v6);
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v10 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v8;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PlaybackSessionManager::setSoundStageSize(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::AudioSessionSoundStageSize)::$_0,void,WebCore::PlaybackSessionModel &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 488))(a2);
  if (result > **(unsigned __int8 **)(a1 + 8))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 488))(a2);
    **(unsigned char **)(a1 + 8) = result;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      size_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            id v24 = (uint64_t *)(v16 + 24 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          uint64_t v25 = v16 + 24 * v23;
          uint64_t v28 = *(_DWORD **)(v25 + 16);
          pid_t v27 = (void *)(v25 + 16);
          uint64_t v26 = v28;
          *pid_t v27 = 0;
          if (v28)
          {
            if (v26[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
            }
            else {
              --v26[4];
            }
          }
          uint64_t v30 = *(v27 - 1);
          *(v27 - 1) = 0;
          if (v30) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v30 + 8), v8);
          }
          *id v24 = *v12;
          uint64_t v31 = v4 + 24 * v9;
          uint64_t v33 = *(void *)(v31 + 8);
          uint64_t v32 = (uint64_t *)(v31 + 8);
          *uint64_t v32 = 0;
          *(v27 - 1) = v33;
          uint64_t v34 = v32[1];
          v32[1] = 0;
          *pid_t v27 = v34;
          uint64_t v35 = (_DWORD *)v32[1];
          v32[1] = 0;
          if (v35)
          {
            if (v35[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
            }
            else {
              --v35[4];
            }
          }
          uint64_t v36 = *v32;
          *uint64_t v32 = 0;
          if (v36) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v36 + 8), v8);
          }
          if (v12 == a3) {
            unint64_t v10 = v24;
          }
        }
        else
        {
          uint64_t v14 = v4 + 24 * v9;
          uint64_t v15 = *(_DWORD **)(v14 + 16);
          *(void *)(v14 + 16) = 0;
          if (v15)
          {
            if (v15[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
            }
            else {
              --v15[4];
            }
          }
          uint64_t v29 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v29) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v29 + 8), v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

unsigned int **WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultWeakPtrImpl>::removeNullReferences(unsigned int **result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  if (*result)
  {
    int v4 = *(v3 - 1);
    if (!v4) {
      goto LABEL_19;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t result = (unsigned int **)&v3[4 * v6];
      if ((unint64_t)*result + 1 >= 2 && !*((void *)*result + 1))
      {
        uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    uint64_t v3 = *v2;
    if (v5)
    {
      *(v3 - 4) += v5;
      uint64_t v8 = *v2;
      if (*v2) {
        int v9 = *(v8 - 3);
      }
      else {
        int v9 = 0;
      }
      *(v8 - 3) = v9 - v5;
      uint64_t v3 = *v2;
    }
    if (v3)
    {
      unsigned int v10 = *(v3 - 1);
      uint64_t v11 = *(v3 - 3);
      if (v10 >= 9 && 6 * (int)v11 < v10)
      {
        unsigned int v15 = (v11 - 1) | ((v11 - 1) >> 1) | (((v11 - 1) | ((v11 - 1) >> 1)) >> 2);
        unsigned int v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
        unint64_t v17 = (v16 | HIWORD(v16)) + 1;
        if (v17 > 0x400)
        {
          if (v17 > 2 * v11) {
            goto LABEL_30;
          }
        }
        else if (3 * v17 > 4 * v11)
        {
LABEL_28:
          double v18 = (double)v11;
          double v19 = (double)v17;
          double v20 = 0.604166667;
          goto LABEL_31;
        }
        LODWORD(v17) = 2 * v17;
        if (v17 <= 0x400) {
          goto LABEL_28;
        }
LABEL_30:
        double v18 = (double)v11;
        double v19 = (double)v17;
        double v20 = 0.416666667;
LABEL_31:
        if (v19 * v20 <= v18) {
          LODWORD(v17) = 2 * v17;
        }
        if (v17 <= 8) {
          unsigned int v21 = 8;
        }
        else {
          unsigned int v21 = v17;
        }
        uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v21, 0);
        uint64_t v3 = *v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          unsigned int v13 = 0;
          goto LABEL_23;
        }
LABEL_20:
        unsigned int v13 = *(v3 - 3);
        int v14 = 0x7FFFFFFF;
        if (v13 >= 0x7FFFFFFF) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
LABEL_19:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_20;
    }
  }
  unsigned int v13 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_23:
  int v14 = v13;
LABEL_24:
  *((_DWORD *)v2 + 3) = 2 * v14;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    size_t v12 = 0;
    do
    {
      unsigned int v13 = (unsigned int **)(v6 + 16 * v11);
      if (*v13 != (unsigned int *)-1)
      {
        if (*v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          int v16 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((void *)(v6 + 16 * v11));
          int v17 = 0;
          do
          {
            uint64_t v18 = v16 & v15;
            int v16 = ++v17 + v18;
          }
          while (*(void *)(v14 + 16 * v18));
          double v19 = (unsigned int **)(v14 + 16 * v18);
          *double v19 = 0;
          double v20 = *v13;
          WTF *v13 = 0;
          *double v19 = v20;
          v19[1] = *(unsigned int **)(v6 + 16 * v11 + 8);
          unsigned int v21 = *v13;
          WTF *v13 = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            WTF::fastFree((WTF *)v21, v10);
          }
          if (v13 == a3) {
            size_t v12 = v19;
          }
        }
        else
        {
          WTF *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    size_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::setupRemoteLayerHosting(WebCore::HTMLVideoElement &)::$_0,std::unique_ptr<WebCore::TextTrackRepresentation>,WebCore::TextTrackRepresentationClient &,WebCore::HTMLMediaElement &>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebKit::WebTextTrackRepresentationCocoa::WebTextTrackRepresentationCocoa(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_198F5DBE0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_1,void,unsigned int>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E0350;
  uint64_t v3 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  int v4 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  unsigned int v5 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (v5[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[4];
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  uint64_t v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_1,void,unsigned int>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_1,void,unsigned int>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_1,void,unsigned int>::call(IPC::Encoder *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    int v4 = (IPC::Encoder *)((char *)result + 24);
    float v5 = (float)WebCore::HTMLVideoElement::videoWidth(*((WebCore::HTMLVideoElement **)result + 2));
    unsigned int v6 = WebCore::HTMLVideoElement::videoHeight(*((WebCore::HTMLVideoElement **)v3 + 2));
    v7[0] = v5;
    v7[1] = (float)v6;
    return WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_0::operator()(v4, a2, v7);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  int v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a2);
  for (i = 0; ; int v5 = i + (v5 & v4))
  {
    uint64_t v7 = *(void *)(v2 + 16 * (v5 & v4));
    if (v7 != -1)
    {
      if (!v7) {
        return 0;
      }
      if (v7 == *a2) {
        break;
      }
    }
    ++i;
  }
  return 1;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  int v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  for (i = 0; ; int v5 = i + v7)
  {
    uint64_t v7 = v5 & v4;
    uint64_t result = *(void *)(v2 + 16 * v7);
    if (result != -1)
    {
      if (!result) {
        return result;
      }
      if (result == a2) {
        break;
      }
    }
    ++i;
  }
  return *(void *)(v2 + 16 * v7 + 8);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E0378;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  unsigned int v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E0378;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }
  int v5 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(void *a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 <= 0xFFu)
    {
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v13 = a2[3];
      if (v13 && v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      }
    }
    else if ((_BYTE)v4)
    {
      uint64_t v6 = a1[2];
      uint64_t v7 = a1[3];
      uint64_t v8 = *(void *)(v6 + 88);
      if (v8)
      {
        if (*(void *)(v8 + 8) == v7)
        {
          *(void *)(v6 + 88) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v8);
            WTF::fastFree((WTF *)v8, v5);
          }
        }
      }
      else if (!v7)
      {
        *(void *)(v6 + 88) = 0;
      }
      uint64_t v9 = a1[1];
      uint64_t v10 = a1[4];
      *(unsigned char *)(v10 + 52) = 0;
      *(unsigned char *)(v9 + 96) = 0;
      *(_DWORD *)(v10 + 48) = 2;
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a1 + 5);
}

uint64_t IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoFullscreenMode>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1525;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v15 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::Encoder::operator<<<int>(v8, *(int **)(a2 + 8));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  uint64_t v11 = v15;
  unsigned int v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F5E298(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::ClearVideoFullscreenMode>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1514;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v15 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::Encoder::operator<<<int>(v8, *(int **)(a2 + 8));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  uint64_t v11 = v15;
  unsigned int v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F5E3A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoDimensions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1524;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v6, *(float **)(a2 + 8));
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v11, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_198F5E49C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>(WTF::Logger::LogSiteIdentifier *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v24, a1);
  WTF::LogArgument<void const*>::toString();
  *(void *)long long buf = v24;
  v22[0] = v23;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v22, &v25);
  if (v25)
  {
    unsigned __int16 v4 = v23;
    unsigned int v23 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    int v5 = v24;
    id v24 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = qword_1EB357E20;
    uint64_t v7 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB357E20, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      WTF::String::utf8();
      uint64_t v9 = v22[0] ? (char *)v22[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v7 = v22[0];
      v22[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1) {
          uint64_t v7 = (WTF *)WTF::fastFree(v7, v8);
        }
        else {
          --*(_DWORD *)v7;
        }
      }
    }
    if (WebKit2LogFullscreen && byte_1EB357E10 >= 3u)
    {
      uint64_t v10 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v11 = *v10;
        if (v11) {
          break;
        }
        int v12 = *v10;
        atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v12, v11 | 1, memory_order_acquire, memory_order_acquire);
        if (v12 == v11)
        {
          uint64_t v13 = WTF::Logger::observers(v7);
          uint64_t v14 = *(unsigned int *)(v13 + 12);
          if (v14)
          {
            unsigned int v15 = *(uint64_t **)v13;
            uint64_t v16 = *(void *)v13 + 8 * v14;
            do
            {
              uint64_t v17 = *v15;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], a1);
              int v27 = 0;
              WTF::LogArgument<void const*>::toString();
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v22, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v17 + 16))(v17, &WebKit2LogFullscreen, 3, v22);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v18);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                double v20 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2) {
                    WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v8);
                  }
                  else {
                    *(_DWORD *)v20 -= 2;
                  }
                }
              }
              ++v15;
            }
            while (v15 != (uint64_t *)v16);
          }
          int v21 = 1;
          atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
          if (v21 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198F5E7B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9E03A0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E03A0;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  unsigned __int16 v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *unsigned __int16 v4 = &unk_1EE9E03C8;
  v4[1] = v2;
  void v4[2] = v3;
  uint64_t v6 = v4;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void sub_198F5EA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9E03C8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E03C8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      uint64_t v4 = a1 + 16;
      char v5 = 1;
      IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetHasVideoContentLayer>(v2 + 16, (uint64_t)&v4);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_198F5EC88(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetHasVideoContentLayer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 1521;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198F5ED88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E03F0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  uint64_t v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E03F0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  uint64_t v4 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  char v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9E0418;
  v5[1] = v2;
  uint64_t v5[2] = v3;
  void v5[3] = v4;
  uint64_t v7 = v5;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

void sub_198F5EFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E0418;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  uint64_t v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E0418;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationModel,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v3 = &unk_1EE9E0440;
  v3[1] = v2;
  v3[2] = v1;
  char v5 = v3;
  WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

void sub_198F5F220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9E0440;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E0440;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v4 = &unk_1EE9E0468;
  v4[1] = v2;
  void v4[2] = v3;
  uint64_t v6 = v4;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void sub_198F5F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit24VideoPresentationManager23returnVideoContentLayerENS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEN3__0clEvENUlvE_clEvENUlvE_clEvEUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9E0468;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit24VideoPresentationManager23returnVideoContentLayerENS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEN3__0clEvENUlvE_clEvENUlvE_clEvEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E0468;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit24VideoPresentationManager23returnVideoContentLayerENS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEN3__0clEvENUlvE_clEvENUlvE_clEvEUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      uint64_t v4 = a1 + 16;
      char v5 = 0;
      IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetHasVideoContentLayer>(v2 + 16, (uint64_t)&v4);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_198F5F658(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::willExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E0490;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::willExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E0490;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::willExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  WebCore::HTMLMediaElement::willExitFullscreen(*(WebCore::HTMLMediaElement **)(a1 + 16));
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 56))(v3 + 16);
      char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v5 = 1517;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 70) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v10 = v5;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, (uint64_t *)(a1 + 24));
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 16) + 32))(v3 + 16, &v10, 0);
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      if (v7)
      {
        IPC::Encoder::~Encoder(v7, v6);
        WTF::fastFree(v8, v9);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_198F5F904(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v12, v13);
  }
  CFRelease(*(CFTypeRef *)(v10 - 8));
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::FloatSize>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E04B8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::FloatSize>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E04B8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::FloatSize>)::$_0,void>::call(void *result)
{
  uint64_t v1 = result[1];
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = (WebKit *)result[2];
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v4 = &unk_1EE9E04E0;
    char v5 = v4;
    WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(v1, v3, (uint64_t *)&v5);
    uint64_t result = v5;
    char v5 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_198F5FB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::failedToEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9E0508;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::failedToEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E0508;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::failedToEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      char v5 = (uint64_t *)(a1 + 16);
      IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::CleanupFullscreen>(v2 + 16, &v5);
      uint64_t v4 = *(const void **)(v2 - 8);
      CFRelease(v4);
    }
  }
}

void sub_198F5FD24(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::CleanupFullscreen>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 1513;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, *a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_198F5FE24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9E0530;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9E0530;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      char v5 = (uint64_t *)(a1 + 16);
      IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::CleanupFullscreen>(v2 + 16, &v5);
      uint64_t v4 = *(const void **)(v2 - 8);
      CFRelease(v4);
    }
  }
}

void sub_198F5FFD4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didCleanupFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9E0580;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 28) == 2)
    {
      if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
    }
    else
    {
      *(_DWORD *)(v2 + 28) -= 2;
    }
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didCleanupFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E0580;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didCleanupFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(WTF::StringImpl **)(a1 + 8);
  uint64_t v3 = *((void *)result + 4);
  if (v3)
  {
    if (*(void *)(v3 + 8)) {
      return WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(result, *(WebCore::HTMLVideoElement **)(a1 + 16), *(_DWORD *)(a1 + 24), *(unsigned char *)(a1 + 28));
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*,unsigned int>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, uint64_t a4, unsigned int *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v34, this);
  WTF::LogArgument<void const*>::toString();
  WTF::String::number((WTF::String *)*a5);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v34, (uint64_t *)&v33, (uint64_t *)&v32, &v35);
  uint64_t v6 = v32;
  uint64_t v32 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = v33;
  uint64_t v33 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v34;
  uint64_t v34 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(NSObject **)(a1 + 32);
  uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    WTF::String::utf8();
    int v12 = v31[0] ? (char *)v31[0] + 16 : 0;
    *(_DWORD *)long long buf = 136446210;
    uint64_t v37 = v12;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    uint64_t v10 = v31[0];
    v31[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v14 = *v13;
      if (v14) {
        break;
      }
      int v15 = *v13;
      atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
      if (v15 == v14)
      {
        uint64_t v16 = WTF::Logger::observers(v10);
        uint64_t v17 = *(unsigned int *)(v16 + 12);
        if (v17)
        {
          int v18 = *(uint64_t **)v16;
          uint64_t v19 = *(void *)v16 + 8 * v17;
          do
          {
            uint64_t v20 = *v18;
            *(_DWORD *)long long buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v37 + 4), this);
            int v38 = 0;
            WTF::LogArgument<void const*>::toString();
            int v21 = (WTF::String *)*a5;
            int v39 = 0;
            WTF::String::number(v21);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v20 + 16))(v20, a1, a2, v31);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v22);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              id v24 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2) {
                  WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v11);
                }
                else {
                  *(_DWORD *)v24 -= 2;
                }
              }
            }
            ++v18;
          }
          while (v18 != (uint64_t *)v19);
        }
        int v25 = 1;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
        if (v25 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v35;
  uint64_t v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198F604C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  int v23 = 1;
  atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1529;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v15 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(v8, *(void *)(a2 + 8));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  int v11 = v15;
  int v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F60714(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetContentsScale>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1527;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v15 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v8, *(float *)(a2 + 8));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v15, a4);
  int v11 = v15;
  int v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_198F60820(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::~__func()
{
}

void *std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE9E05A8;
  result[1] = v3;
  return result;
}

IPC::Encoder *std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 40);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2589;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void sub_198F60954(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

float WebKit::currentBacklightLevel(WebKit *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(float *)(WebKit::WebProcess::singleton(void)::process + 640);
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (_DWORD **)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  if (*v3) {
    ++*v6;
  }
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    if (*(unsigned int *)(result + 12) > a2) {
      uint64_t result = (uint64_t)WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((const char ***)result, a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (*(_DWORD *)(v3 + 8))
      {
        *(_DWORD *)(v3 + 8) = a2;
        uint64_t result = WTF::fastRealloc(v4, (void *)(8 * a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = *(unsigned int *)(v3 + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v4) {
        uint64_t result = (uint64_t)memcpy((void *)result, v4, 8 * v5);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

const char ***WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(const char ***result, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *((unsigned int *)result + 3);
  if (v4 != a2)
  {
    uint64_t v5 = (const char ****)&(*result)[a2];
    uint64_t v6 = 8 * v4 - 8 * a2;
    do
    {
      uint64_t result = *v5;
      void *v5 = 0;
      if (result) {
        uint64_t result = WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *((_DWORD *)v3 + 3) = v2;
  return result;
}

uint64_t *WebKit::WebProcess::unblockServicesRequiredByAccessibility(WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(uint64_t *result, WebKit::SandboxExtensionImpl **a2)
{
  int v2 = result;
  if (*a2)
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v4 = 1;
    uint64_t v5 = *a2;
    *a2 = 0;
    *int v2 = v4;
    *(void *)(v4 + 8) = v5;
    *(void *)(v4 + 16) = 1;
    return (uint64_t *)WebKit::SandboxExtensionImpl::consume(v5);
  }
  else
  {
    *uint64_t result = 0;
  }
  return result;
}

void sub_198F60BDC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  WTF::RefCounted<WebKit::SandboxExtension>::deref(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    if (*(unsigned int *)(result + 12) > a2) {
      uint64_t result = (uint64_t)WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((const char ***)result, a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (*(_DWORD *)(v3 + 8))
      {
        *(_DWORD *)(v3 + 8) = a2;
        uint64_t result = WTF::fastRealloc(v4, (void *)(8 * a2));
        *(void *)uint64_t v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = *(unsigned int *)(v3 + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v4) {
        uint64_t result = (uint64_t)memcpy((void *)result, v4, 8 * v5);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = v8 + 16 * (v11 & v9);
    uint64_t v16 = *(WTF **)v15;
    if (*(void *)v15 != -1) {
      break;
    }
    int v12 = (void *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      void *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = (uint64_t)v12;
    }
    uint64_t result = (uint64_t)WTF::String::operator=((uint64_t *)v15, a2);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)a3;
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        uint64_t v15 = result;
        uint64_t v22 = *a1;
        if (*a1) {
          unint64_t v25 = *(unsigned int *)(v22 - 4);
        }
        else {
          unint64_t v25 = 0;
        }
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    uint64_t v27 = v22 + 16 * v25;
    char v26 = 1;
    goto LABEL_33;
  }
  uint64_t result = WTF::equal(v16, *a2, a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v20 = *a1;
  if (*a1) {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
  }
  else {
    uint64_t v21 = 0;
  }
  char v26 = 0;
  uint64_t v27 = v20 + 16 * v21;
LABEL_33:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    do
    {
      if (*(void *)v13 != -1)
      {
        if (*(void *)v13)
        {
          uint64_t v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          uint64_t v15 = *(WTF::StringImpl **)v14;
          *(void *)uint64_t v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v16 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v14 = v16;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v17 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v10);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v14;
          }
        }
        else
        {
          *(void *)uint64_t v13 = 0;
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

WTF::StringImpl *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t result = WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t API::OpenPanelParameters::OpenPanelParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E0600;
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, a2 + 8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 40, a2 + 24);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 56, a2 + 40);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 56);
  return a1;
}

void API::OpenPanelParameters::~OpenPanelParameters(API::OpenPanelParameters *this, void *a2)
{
  *(void *)this = &unk_1EE9E0600;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v4);
}

{
  uint64_t vars8;

  API::OpenPanelParameters::~OpenPanelParameters(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::OpenPanelParameters::allowedMIMETypes@<X0>(uint64_t *a1@<X8>)
{
  WebCore::MIMETypeRegistry::allowedMIMETypes();
  API::Array::createStringArray((uint64_t)v5, a1);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void API::PageConfiguration::Data::createWebProcessPool(API::PageConfiguration::Data *this)
{
  uint64_t v1 = (API::ProcessPoolConfiguration *)API::Object::newObject(0xA8uLL, 90);
  int v2 = API::ProcessPoolConfiguration::ProcessPoolConfiguration(v1);
  WebKit::WebProcessPool::create(v2, v3);
}

void API::PageConfiguration::~PageConfiguration(API::PageConfiguration *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9E0628;
  API::PageConfiguration::Data::~Data((API::PageConfiguration *)((char *)this + 16), a2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE9E0628;
  API::PageConfiguration::Data::~Data((API::PageConfiguration *)((char *)this + 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::PageConfiguration::OpenerInfo::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t result = WebKit::Site::operator==((WTF **)(a1 + 8), (const WTF::StringImpl **)(a2 + 8), a3);
  if (result) {
    return *(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
  }
  return result;
}

unsigned int *API::PageConfiguration::setWeakWebExtensionController(API::PageConfiguration *this, WebKit::WebExtensionController *a2)
{
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = (unsigned int *)*((void *)this + 15);
  *((void *)this + 15) = v4;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

void API::PageConfiguration::setDelaysWebProcessLaunchUntilFirstLoad(API::PageConfiguration *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134218240;
    uint64_t v6 = this;
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::setDelaysWebProcessLaunchUntilFirstLoad(%d)", (uint8_t *)&v5, 0x12u);
  }
  *(_WORD *)((char *)this + 241) = a2 | 0x100;
}

BOOL API::PageConfiguration::isLockdownModeExplicitlySet(API::PageConfiguration *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (!v1) {
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v1 + 8));
  BOOL v2 = *(unsigned char *)(v1 + 161) != 0;
  CFRelease(*(CFTypeRef *)(v1 + 8));
  return v2;
}

uint64_t API::SessionState::create@<X0>(API::SessionState *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = API::Object::newObject(0x60uLL, 19);
  v10[0] = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  v10[1] = v6;
  long long v11 = *((_OWORD *)this + 1);
  WTF::URL::URL((uint64_t)&v12, (uint64_t *)this + 4);
  char v13 = *((unsigned char *)this + 72);
  API::SessionState::SessionState(v5, v10);
  *a2 = v5;
  int v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
}

uint64_t API::SessionState::SessionState(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E0678;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 28) = v4;
  *(void *)(a1 + 32) = a2[2];
  *(void *)(a1 + 40) = a2[3];
  WTF::URL::URL(a1 + 48, a2 + 4);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 72);
  return a1;
}

void API::SessionState::~SessionState(API::SessionState *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t vars8;

  API::SessionState::~SessionState(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::TargetedElementInfo::TargetedElementInfo(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E06A0;
  long long v6 = *a3;
  long long v7 = a3[1];
  long long v8 = a3[2];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v9 = *((void *)a3 + 7);
  *((void *)a3 + 7) = 0;
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *((void *)a3 + 8);
  *((void *)a3 + 8) = 0;
  *(void *)(a1 + 80) = v10;
  uint64_t v11 = *((void *)a3 + 9);
  *((void *)a3 + 9) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v11;
  uint64_t v12 = *((void *)a3 + 10);
  *((void *)a3 + 10) = 0;
  *(void *)(a1 + 96) = v12;
  LODWORD(v12) = *((_DWORD *)a3 + 22);
  *((_DWORD *)a3 + 22) = 0;
  *(_DWORD *)(a1 + 104) = v12;
  LODWORD(v12) = *((_DWORD *)a3 + 23);
  *((_DWORD *)a3 + 23) = 0;
  *(_DWORD *)(a1 + 108) = v12;
  long long v13 = a3[6];
  long long v14 = a3[7];
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a3 + 128);
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v14;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v15 = *((void *)a3 + 17);
  *((void *)a3 + 17) = 0;
  *(void *)(a1 + 152) = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 36);
  *((_DWORD *)a3 + 36) = 0;
  *(_DWORD *)(a1 + 160) = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 37);
  *((_DWORD *)a3 + 37) = 0;
  *(_DWORD *)(a1 + 164) = v15;
  *(void *)(a1 + 168) = 0;
  uint64_t v16 = *((void *)a3 + 19);
  *((void *)a3 + 19) = 0;
  *(void *)(a1 + 168) = v16;
  LODWORD(v16) = *((_DWORD *)a3 + 40);
  *(_WORD *)(a1 + 180) = *((_WORD *)a3 + 82);
  *(_DWORD *)(a1 + 176) = v16;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v17 = *(atomic_uint **)(a2 + 24);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  *(void *)(a1 + 192) = v17;
  return a1;
}

BOOL API::TargetedElementInfo::isSameElement(void *a1, void *a2)
{
  if (a1[2] != a2[2]) {
    return 0;
  }
  BOOL v2 = a1[5] == a2[5] && a1[4] == a2[4];
  if (!v2 || a1[6] != a2[6]) {
    return 0;
  }
  uint64_t v5 = a1[24];
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v5 = v6 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  uint64_t v7 = a2[24];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v7 = v8 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  return v5 == v7;
}

float API::TargetedElementInfo::boundsInWebView(API::TargetedElementInfo *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  float v3 = 0.0;
  if (v2)
  {
    CFRetain(*(CFTypeRef *)(v2 - 8));
    uint64_t v5 = *(void *)(*(void *)(v2 + 24) + 8);
    long long v7 = *((_OWORD *)this + 7);
    float v3 = (*(float (**)(uint64_t, long long *))(*(void *)v5 + 488))(v5, &v7);
    CFRelease(*(CFTypeRef *)(v2 - 8));
  }
  return v3;
}

void API::TargetedElementInfo::childFrames(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 192);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v6 = 1;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    CFRetain(*(CFTypeRef *)(v4 - 8));
    atomic_fetch_add((atomic_uint *volatile)v6, 1u);
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v8 = &unk_1EE9E0748;
    v8[1] = v4 - 16;
    _OWORD v8[2] = v6;
    v8[3] = v7;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v9 = 1;
    *(void *)(v9 + 8) = v8;
    uint64_t v10 = *(unsigned int *)(a1 + 164);
    if (v10)
    {
      uint64_t v11 = *(uint64_t **)(a1 + 152);
      uint64_t v12 = &v11[2 * v10];
      do
      {
        uint64_t v13 = WebKit::WebFrameProxy::webFrame(*v11, v11[1]);
        if (v13)
        {
          uint64_t v14 = v13;
          CFRetain(*(CFTypeRef *)(v13 + 8));
          uint64_t v15 = *(void *)(v14 + 24);
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 8);
            if (v16) {
              BOOL v17 = v16 == v4;
            }
            else {
              BOOL v17 = 0;
            }
            if (v17)
            {
              atomic_fetch_add((atomic_uint *volatile)v9, 1u);
              atomic_fetch_add((atomic_uint *volatile)v6, 1u);
              uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
              *uint64_t v18 = &unk_1EE9E0770;
              v18[1] = v9;
              void v18[2] = v6;
              v23[0] = (uint64_t)v18;
              WebKit::WebFrameProxy::getFrameInfo((uint64_t *)v14, v23);
              uint64_t v19 = v23[0];
              v23[0] = 0;
              if (v19) {
                (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v14 + 8));
        }
        v11 += 2;
      }
      while (v11 != v12);
    }
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v9);
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v20);
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v21 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v21 + 16))(v21, v23);
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v22);
  }
}

void API::TargetedElementInfo::takeSnapshot(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 192);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::WebPageProxy::takeSnapshotForTargetedElement(v4 - 16, a1, a2);
    uint64_t v6 = *(const void **)(v4 - 8);
    CFRelease(v6);
  }
  else
  {
    v8[0] = 0;
    v8[64] = 0;
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 16))(v7, v8);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v8);
  }
}

uint64_t API::TargetedElementRequest::makeRequest@<X0>(API::TargetedElementRequest *this@<X0>, const WebKit::WebPageProxy *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t *)((char *)this + 16);
  *(unsigned char *)a3 = 0;
  *(_DWORD *)(a3 + 16) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1> const&>(a3, (uint64_t)this + 16);
  *(_WORD *)(a3 + 24) = *((_WORD *)this + 20);
  if (!*((_DWORD *)this + 8))
  {
    uint64_t v8 = *((void *)a2 + 5);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
    uint64_t v10 = 0;
    if (!*((_DWORD *)this + 8)) {
      uint64_t v10 = *v6;
    }
    uint64_t v16 = v10;
    float v11 = (*(float (**)(uint64_t, uint64_t *))(*(void *)v9 + 496))(v9, &v16);
    float v13 = v11;
    int v14 = v12;
    uint64_t v15 = *(unsigned int *)(a3 + 16);
    if (v15 != -1)
    {
      if (!v15)
      {
        *(float *)a3 = v11;
        *(_DWORD *)(a3 + 4) = v12;
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1600))(v9);
      }
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v15])(&v17, a3);
    }
    *(float *)a3 = v13;
    *(_DWORD *)(a3 + 4) = v14;
    *(_DWORD *)(a3 + 16) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1600))(v9);
  }
  return result;
}

uint64_t API::UIClient::checkUserMediaPermissionForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return WebKit::UserMediaPermissionCheckProxy::complete(a6);
}

WebKit::UserMediaPermissionRequestManagerProxy *API::UIClient::decidePolicyForUserMediaPermissionRequest(API::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::SecurityOrigin *a4, API::SecurityOrigin *a5, WebKit::UserMediaPermissionRequestProxy *a6)
{
  return WebKit::UserMediaPermissionRequestProxy::doDefaultAction(a6);
}

void API::UIClient::createNewPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = 0;
  uint64_t v6 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v8);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

uint64_t API::UIClient::decidePolicyForMediaKeySystemPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

WebKit *API::UserScript::UserScript(WebKit *a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(a1);
  *(void *)a1 = &unk_1EE9E0720;
  *((void *)a1 + 2) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)a1 = &unk_1EE9E06C8;
  WebCore::UserScript::UserScript((uint64_t)a1 + 24, a2);
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *((void *)a1 + 14) = a3;
  return a1;
}

uint64_t API::ObjectImpl<(API::Object::Type)83>::type()
{
  return 83;
}

uint64_t API::ObjectImpl<(API::Object::Type)87>::type()
{
  return 87;
}

uint64_t API::ObjectImpl<(API::Object::Type)90>::type()
{
  return 90;
}

uint64_t API::ObjectImpl<(API::Object::Type)19>::type()
{
  return 19;
}

uint64_t API::UIClient::takeFocus(API::UIClient *this, WebKit::WebPageProxy *a2)
{
  return 0;
}

uint64_t API::UIClient::focusFromServiceWorker(API::UIClient *this, WebKit::WebPageProxy *a2)
{
  return 0;
}

uint64_t API::UIClient::runJavaScriptAlert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(**(void **)a6 + 16))();
}

uint64_t API::UIClient::runJavaScriptConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return (*(uint64_t (**)(void, void))(*(void *)*a6 + 16))(*a6, 0);
}

WTF::StringImpl *API::UIClient::runJavaScriptPrompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = 0;
  (*(void (**)(void, WTF::StringImpl **))(*(void *)*a7 + 16))(*a7, &v9);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t API::UIClient::runBeforeUnloadConfirmPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a6 + 16))(*a6, 1);
}

uint64_t API::UIClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a11 + 16))(*a11, a7);
}

uint64_t API::UIClient::lockScreenOrientation()
{
  return 0;
}

uint64_t API::UIClient::needsFontAttributes(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::decidePolicyForNotificationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::UIClient::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, 1);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t API::UIClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t API::UIClient::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t API::UIClient::shouldIncludeAppLinkActionsForElement(API::UIClient *this, _WKActivatedElementInfo *a2)
{
  return 1;
}

void API::UIClient::actionsForElement(uint64_t *a1@<X2>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

uint64_t API::UIClient::setShouldKeepScreenAwake(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::presentingViewController(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::dataDetectionReferenceDate(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t API::UIClient::confirmPDFOpening(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t API::UIClient::runWebAuthenticationPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);

  return v7(v6);
}

uint64_t API::UIClient::requestWebAuthenticationConditonalMediationRegistration(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t API::UIClient::queryPermission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void API::TargetedElementInfo::~TargetedElementInfo(API::TargetedElementInfo *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::TargetedElementInfo::~TargetedElementInfo((API::TargetedElementInfo *)((char *)this + 16), (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::TargetedElementInfo::~TargetedElementInfo((API::TargetedElementInfo *)((char *)this + 16), (WTF::StringImpl *)a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)22>::type()
{
  return 22;
}

void API::UserScript::~UserScript(API::UserScript *this, void *a2)
{
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WebCore::UserScript::~UserScript((API::UserScript *)((char *)this + 24), a2);
}

{
  uint64_t v3;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WebCore::UserScript::~UserScript((API::UserScript *)((char *)this + 24), a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)28>::type()
{
  return 28;
}

unsigned int *std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::reset[abi:sn180100](unsigned int *result, WTF::StringImpl *a2)
{
  if (*((unsigned char *)result + 40))
  {
    uint64_t v2 = result;
    uint64_t v3 = (WTF::StringImpl *)*((void *)result + 2);
    *((void *)v2 + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t result = (unsigned int *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (result)
    {
      if (*result == 2) {
        uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *result -= 2;
      }
    }
    uint64_t v4 = *(void *)v2;
    *(void *)uint64_t v2 = 0;
    if (v4) {
      uint64_t result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
    }
    *((unsigned char *)v2 + 40) = 0;
  }
  return result;
}

unsigned int *std::__optional_storage_base<API::PageConfiguration::OpenerInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<API::PageConfiguration::OpenerInfo,false>>(unsigned int *result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*((unsigned char *)result + 40))
    {
      uint64_t v4 = (WTF::StringImpl *)*a2;
      *a2 = 0;
      uint64_t v5 = *(void *)result;
      *(void *)uint64_t result = v4;
      if (v5) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
      }
      WTF::String::operator=((uint64_t *)v3 + 1, (WTF::StringImpl **)a2 + 1);
      uint64_t result = (unsigned int *)WTF::String::operator=((uint64_t *)v3 + 2, (WTF::StringImpl **)a2 + 2);
      *(_OWORD *)(v3 + 6) = *(_OWORD *)(a2 + 3);
    }
  }
  else if (*((unsigned char *)result + 40))
  {
    return std::__optional_destruct_base<API::PageConfiguration::OpenerInfo,false>::reset[abi:sn180100](result, (WTF::StringImpl *)a2);
  }
  else
  {
    uint64_t result = (unsigned int *)std::construct_at[abi:sn180100]<API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo,API::PageConfiguration::OpenerInfo*>((uint64_t)result, a2);
    *((unsigned char *)v3 + 40) = 1;
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = (WTF *)result;
    atomic_store(1u, result);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 2), a2);
    return (unsigned int *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3) {
    *v3 += 2;
  }
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a3);
}

void API::ObjectImpl<(API::Object::Type)28>::~ObjectImpl()
{
}

uint64_t WebCore::UserScript::UserScript(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 64);
  __int16 v7 = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(_WORD *)(a1 + 80) = v7;
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    int v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    WTF::String::operator=(v15, a2);
    uint64_t v17 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t result = (uint64_t *)v15[1];
    v15[1] = v17;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_35:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
        uint64_t v15 = result;
        uint64_t v25 = *a1;
        if (*a1) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_35;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3)) {
    goto LABEL_13;
  }
  uint64_t v19 = *a1;
  if (*a1) {
    uint64_t v20 = *(unsigned int *)(v19 - 4);
  }
  else {
    uint64_t v20 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v19 + 16 * v20;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v21 = v8 + 16 * v14;
  uint64_t v22 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t result = *(uint64_t **)(v21 + 8);
  *(void *)(v21 + 8) = v22;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      uint64_t v29 = *(uint64_t (**)(void))(*result + 8);
      return (uint64_t *)v29();
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E0748;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E0748;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v3 = *(unsigned int *)(v2 + 20);
  if (!v3)
  {
LABEL_7:
    uint64_t v14 = *(void *)(v1 + 24);
    *(void *)(v1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, &v16);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v15);
  }
  if (!(v3 >> 29))
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)(8 * v3));
    LODWORD(v17) = v3;
    uint64_t v16 = v4;
    unsigned int v5 = *(_DWORD *)(v2 + 20);
    if (v5)
    {
      uint64_t v6 = v4;
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(v2 + 8);
      uint64_t v9 = 312 * v5;
      do
      {
        uint64_t v10 = v7;
        uint64_t v11 = *(void *)(v1 + 8);
        uint64_t v12 = API::Object::newObject(0x150uLL, 62);
        uint64_t v13 = API::FrameTreeNode::FrameTreeNode(v12, v8, v11);
        uint64_t v7 = v10 + 1;
        *(void *)(v6 + 8 * v10) = v13;
        v8 += 312;
        v9 -= 312;
      }
      while (v9);
      HIDWORD(v17) = v10 + 1;
    }
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9E0770;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E0770;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

__n128 WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(v3 + 20);
  if (v4 == *(_DWORD *)(v3 + 16))
  {
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>(v3 + 8, a2);
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 8) + 312 * v4;
    *(_WORD *)uint64_t v6 = *(_WORD *)a2;
    WTF::URL::URL(v6 + 8, (uint64_t *)(a2 + 8));
    WTF::URL::URL(v6 + 48, (uint64_t *)(a2 + 48));
    *(void *)(v6 + 88) = *(void *)(a2 + 88);
    uint64_t v7 = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = 0;
    *(void *)(v6 + 104) = 0;
    *(void *)(v6 + 112) = 0;
    *(void *)(v6 + 96) = v7;
    uint64_t v8 = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0;
    *(void *)(v6 + 104) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    *(_DWORD *)(v6 + 112) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    *(_DWORD *)(v6 + 116) = v8;
    *(void *)(v6 + 1++*(_DWORD *)(this + 20) = 0;
    *(void *)(v6 + 128) = 0;
    uint64_t v9 = *(void *)(a2 + 120);
    *(void *)(a2 + 1++*(_DWORD *)(this + 20) = 0;
    *(void *)(v6 + 1++*(_DWORD *)(this + 20) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = 0;
    *(_DWORD *)(v6 + 128) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = 0;
    *(_DWORD *)(v6 + 132) = v9;
    *(void *)(v6 + 136) = 0;
    *(void *)(v6 + 144) = 0;
    uint64_t v10 = *(void *)(a2 + 136);
    *(void *)(a2 + 136) = 0;
    *(void *)(v6 + 136) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(v6 + 144) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *(_DWORD *)(v6 + 148) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 152);
    *(unsigned char *)(v6 + 156) = *(unsigned char *)(a2 + 156);
    *(_DWORD *)(v6 + 152) = v10;
    uint64_t v11 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *(void *)(v6 + 160) = v11;
    uint64_t v12 = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
    *(void *)(v6 + 168) = v12;
    uint64_t v13 = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = 0;
    *(void *)(v6 + 176) = v13;
    uint64_t v14 = *(void *)(a2 + 184);
    *(unsigned char *)(v6 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(v6 + 184) = v14;
    uint64_t v15 = *(void *)(a2 + 200);
    *(void *)(a2 + 200) = 0;
    *(unsigned char *)(v6 + 208) = 0;
    v6 += 208;
    *(void *)(v6 - 8) = v15;
    *(_DWORD *)(v6 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v6, a2 + 208);
    uint64_t v16 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    *(void *)(v6 + 32) = v16;
    __n128 result = *(__n128 *)(a2 + 248);
    long long v17 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v6 + 70) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v6 + 56) = v17;
    *(__n128 *)(v6 + 40) = result;
    *(void *)(v6 + 88) = 0;
    *(void *)(v6 + 96) = 0;
    uint64_t v18 = *(void *)(a2 + 296);
    *(void *)(a2 + 296) = 0;
    *(void *)(v6 + 88) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 304);
    *(_DWORD *)(a2 + 304) = 0;
    *(_DWORD *)(v6 + 96) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 308);
    *(_DWORD *)(a2 + 308) = 0;
    *(_DWORD *)(v6 + 100) = v18;
    ++*(_DWORD *)(v3 + 20);
  }
  return result;
}

WTF *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16) == 2)
  {
    uint64_t v5 = a2[3];
    if (v5)
    {
      uint64_t v6 = *(WTF::StringImpl ****)a2;
      uint64_t v7 = 8 * v5;
      do
      {
        if (*v6) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v6, (WTF::StringImpl *)a2);
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)a2, a3);
  }
  else
  {
    return (WTF *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__emplace[abi:sn180100]<2ul,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__emplace[abi:sn180100]<2ul,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)a1 = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = 2;
  return a1;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<1ul,WTF::String,WTF::String>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *((unsigned int *)result + 4);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    __n128 result = (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v5])(&v7, result);
LABEL_7:
    uint64_t v6 = *a3;
    *a3 = 0;
    *uint64_t v4 = v6;
    *((_DWORD *)v4 + 4) = 1;
    return result;
  }

  return WTF::String::operator=(a2, a3);
}

uint64_t API::UserStyleSheet::UserStyleSheet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E0B58;
  *(void *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)a1 = &unk_1EE9E0A40;
  uint64_t v6 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v6 += 2;
  }
  *(void *)(a1 + 24) = v6;
  char v7 = *(_DWORD **)(a2 + 8);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(a1 + 32) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = v8;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 72, a2 + 48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 88, a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 1++*(_DWORD *)(this + 20) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = v9;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *(void *)(a1 + 128) = a3;
  return a1;
}

void API::WebAuthenticationAssertionResponse::~WebAuthenticationAssertionResponse(API::WebAuthenticationAssertionResponse *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
}

{
  _DWORD *v2;
  uint64_t vars8;

  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }

  JUMPOUT(0x199740C10);
}

void API::WebAuthenticationAssertionResponse::userHandle(API::WebAuthenticationAssertionResponse *this@<X0>, WebKit **a2@<X8>)
{
  *a2 = 0;
  uint64_t v3 = *(JSC::ArrayBuffer **)(*((void *)this + 2) + 136);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    uint64_t v4 = JSC::ArrayBuffer::span(v3);
    uint64_t v6 = v5;
    char v7 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(void *)char v7 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v7);
    *(void *)char v7 = &unk_1EE9B5358;
    *((void *)v7 + 2) = v4;
    *((void *)v7 + 3) = v6;
    *((void *)v7 + 4) = API::WebAuthenticationAssertionResponse::userHandle(void)const::$_0::__invoke;
    *((void *)v7 + 5) = v3;
    *a2 = v7;
  }
}

void API::WebAuthenticationAssertionResponse::credentialID(WebCore::AuthenticatorResponse **this@<X0>, WebKit **a2@<X8>)
{
  *a2 = 0;
  uint64_t v3 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(this[2]);
  if (v3)
  {
    uint64_t v4 = v3;
    *(_DWORD *)v3 += 2;
    uint64_t v5 = JSC::ArrayBuffer::span(v3);
    uint64_t v7 = v6;
    long long v8 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(void *)long long v8 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v8);
    *(void *)long long v8 = &unk_1EE9B5358;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = v7;
    *((void *)v8 + 4) = API::WebAuthenticationAssertionResponse::credentialID(void)const::$_0::__invoke;
    *((void *)v8 + 5) = v4;
    *a2 = v8;
  }
}

uint64_t API::WebAuthenticationPanel::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, _DWORD **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = API::Object::newObject(0x58uLL, 129);
  uint64_t result = API::WebAuthenticationPanel::WebAuthenticationPanel(v12, a1, a2, a3, a4, a5);
  *a6 = result;
  return result;
}

API::WebAuthenticationPanel *API::WebAuthenticationPanel::WebAuthenticationPanel(API::WebAuthenticationPanel *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9E0A90;
  uint64_t v2 = (WebKit::AuthenticatorManager *)WTF::fastMalloc((WTF *)0x358);
  *((void *)this + 3) = WebKit::AuthenticatorManager::AuthenticatorManager(v2);
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
  void *v3 = &unk_1EE9E0B90;
  *((void *)this + 4) = v3;
  *((void *)this + 10) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  WebKit::AuthenticatorManager::enableNativeSupport(*((void *)this + 3));
  return this;
}

uint64_t API::WebAuthenticationPanel::WebAuthenticationPanel(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t *a4, char a5, _DWORD **a6)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E0A90;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)8);
  void *v12 = &unk_1EE9E0B90;
  *(void *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a2 + 8), a2);
  uint64_t v13 = *(atomic_uint **)(a2 + 8);
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
  *(void *)(a1 + 40) = v13;
  uint64_t v14 = *a3;
  if (*a3) {
    *v14 += 2;
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v15 = (void *)(a1 + 56);
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = a5;
  uint64_t v16 = *a6;
  if (*a6) {
    *v16 += 2;
  }
  *(void *)(a1 + 80) = v16;
  uint64_t v17 = WTF::fastMalloc((WTF *)5);
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 56) = v17;
  unsigned __int8 v30 = 0;
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v30))
  {
    char v29 = 0;
    uint64_t v18 = *(unsigned int *)(a1 + 68);
    if (v18 == *(_DWORD *)(a1 + 64))
    {
      uint64_t v19 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, (WTF *)(v18 + 1), (unint64_t)&v29);
      uint64_t v18 = *(unsigned int *)(a1 + 68);
      *(unsigned char *)(*(void *)(a1 + 56) + v18) = *v19;
    }
    else
    {
      *(unsigned char *)(*v15 + v18) = 0;
    }
    *(_DWORD *)(a1 + 68) = v18 + 1;
  }
  unsigned __int8 v28 = 1;
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v28))
  {
    char v27 = 1;
    uint64_t v20 = *(unsigned int *)(a1 + 68);
    if (v20 == *(_DWORD *)(a1 + 64))
    {
      uint64_t v21 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, (WTF *)(v20 + 1), (unint64_t)&v27);
      uint64_t v20 = *(unsigned int *)(a1 + 68);
      *(unsigned char *)(*(void *)(a1 + 56) + v++*(_DWORD *)(this + 20) = *v21;
    }
    else
    {
      *(unsigned char *)(*v15 + v++*(_DWORD *)(this + 20) = 1;
    }
    *(_DWORD *)(a1 + 68) = v20 + 1;
  }
  unsigned __int8 v26 = 3;
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v26))
  {
    char v25 = 3;
    uint64_t v22 = *(unsigned int *)(a1 + 68);
    if (v22 == *(_DWORD *)(a1 + 64))
    {
      uint64_t v23 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, (WTF *)(v22 + 1), (unint64_t)&v25);
      uint64_t v22 = *(unsigned int *)(a1 + 68);
      *(unsigned char *)(*(void *)(a1 + 56) + v22) = *v23;
    }
    else
    {
      *(unsigned char *)(*v15 + v22) = 3;
    }
    *(_DWORD *)(a1 + 68) = v22 + 1;
  }
  return a1;
}

void API::WebAuthenticationPanel::~WebAuthenticationPanel(API::WebAuthenticationPanel *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 2);
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    uint64_t v10 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v10)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  API::WebAuthenticationPanel::~WebAuthenticationPanel(this, a2);

  JUMPOUT(0x199740C10);
}

WTF::RefCountedBase *API::WebAuthenticationPanel::handleRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a1 + 16), a1);
  uint64_t v7 = *(atomic_uint **)(a1 + 16);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v8 = *(unsigned int **)(a2 + 688);
  *(void *)(a2 + 688) = v7;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v6);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 24);

  return WebKit::AuthenticatorManager::handleRequest(v9, a2, a3);
}

uint64_t API::WebAuthenticationPanel::cancel(API::WebAuthenticationPanel *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2 && (uint64_t v3 = *(WebKit::AuthenticatorManager **)(v2 + 8)) != 0) {
    return WebKit::AuthenticatorManager::cancelRequest(v3, this);
  }
  else {
    return WebKit::AuthenticatorManager::cancel(*((WebKit::AuthenticatorManager **)this + 3));
  }
}

WTF *API::WebAuthenticationPanel::setMockConfiguration(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24)))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    return WebKit::MockAuthenticatorManager::setTestConfiguration(v4, a2);
  }
  else
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)0x3F8);
    uint64_t v7 = WebKit::MockAuthenticatorManager::MockAuthenticatorManager(v6, a2);
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v7 = *(void *)(a1 + 24);
    }
    return (WTF *)WebKit::AuthenticatorManager::enableNativeSupport(v7);
  }
}

WTF *WebKit::MockAuthenticatorManager::setTestConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 136);
  *(unsigned char *)(a1 + 856) = *(unsigned char *)a2;
  std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>>((uint64_t *)(a1 + 864), a2 + 8);
  std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>>(a1 + 912, (uint64_t *)(a2 + 56));
  std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>>(a1 + 952, a2 + 96);

  return std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((WTF *)(a1 + 992), v4);
}

API::WebPushDaemonConnection *API::WebPushDaemonConnection::WebPushDaemonConnection(API::WebPushDaemonConnection *this, const WTF::String *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9E0AB8;
  WTF::String::utf8();
  __n128 v16 = 0uLL;
  uint64_t v7 = *a4;
  if (*a4) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v17 = v7;
  uint64_t v8 = *a3;
  if (*a3) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v18 = v8;
  char v19 = 0;
  char v20 = 0;
  uint64_t v9 = (__n128 *)WTF::fastMalloc((WTF *)0x70);
  v9->n128_u64[1] = 0;
  v9[1].n128_u64[0] = 0;
  v9->n128_u64[0] = (unint64_t)&unk_1EE9BB8F0;
  v9[1].n128_u64[1] = (unint64_t)v15;
  v9[2].n128_u64[0] = (unint64_t)&unk_1EE9BB950;
  WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration(v9 + 3, &v16);
  *((void *)this + 2) = v9;
  uint64_t v11 = v18;
  uint64_t v18 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF *)v16.n128_u64[0];
  if (v16.n128_u64[0])
  {
    v16.n128_u64[0] = 0;
    v16.n128_u32[2] = 0;
    WTF::fastFree(v13, v10);
  }
  return this;
}

uint64_t API::WebPushDaemonConnection::getPushPermissionState(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16) + 32;
  WebCore::SecurityOriginData::fromURL(v8, this, this);
  uint64_t v6 = v8;
  uint64_t result = IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushPermissionState,WTF::CompletionHandler<void ()(WebCore::PushPermissionState)>>(v4, (uint64_t *)&v6, a3);
  if (v9 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_7[v9])(&v7, v8);
  }
  return result;
}

uint64_t API::WebPushDaemonConnection::requestPushPermission(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16) + 32;
  WebCore::SecurityOriginData::fromURL(v8, this, this);
  uint64_t v6 = v8;
  uint64_t result = IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::RequestPushPermission,WTF::CompletionHandler<void ()(BOOL)>>(v4, (uint64_t *)&v6, a3);
  if (v9 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_7[v9])(&v7, v8);
  }
  return result;
}

IPC::Encoder *API::WebPushDaemonConnection::setAppBadge(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v4 = *(void **)(a1 + 16);
  WebCore::SecurityOriginData::fromURL(v14, this, this);
  uint64_t v5 = v4[4];
  v4 += 4;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v4);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 681;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v13 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, (uint64_t)v14);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v7, (uint64_t)v12);
  (*(void (**)(void *, IPC::Encoder **))(*v4 + 16))(v4, &v13);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  if (v15 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_7[v15])(&v13, v14);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 685;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, **(const void ***)(a2 + 8), *(unsigned int *)(*(void *)(a2 + 8) + 12));
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v9 = &unk_1EE9E0BE0;
  v9[1] = v8;
  uint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 686;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v7, *(void *)(a2 + 8));
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v9 = &unk_1EE9E0C18;
  v9[1] = v8;
  uint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 672;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *a2);
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v9 = &unk_1EE9E0C50;
  v9[1] = v8;
  uint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 669;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v17 = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v8 = &unk_1EE9E0C88;
  v8[1] = v7;
  uint64_t v16 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v17, &v16);
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

WTF *API::WebPushDaemonConnection::showNotification(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16) + 32;
  uint64_t v6 = 0;
  v7[0] = a2;
  v7[1] = &v6;
  IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::ShowNotification,WTF::CompletionHandler<void ()(void)>>(v3, (uint64_t)v7, a3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(result, v4);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 668;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a2[1]);
  uint64_t v8 = *a3;
  *a3 = 0;
  int v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v9 = &unk_1EE9E0CB0;
  v9[1] = v8;
  uint64_t v17 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void **))(*(void *)a1 + 24))(a1, &v18, &v17);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  return v11;
}

IPC::Encoder *API::WebPushDaemonConnection::cancelNotification(API::WebPushDaemonConnection *this, const WTF::URL *a2, const WTF::UUID *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)*((void *)this + 2);
  WebCore::SecurityOriginData::fromURL(v13, a2, a2);
  uint64_t v5 = v4[4];
  v4 += 4;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v4);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 666;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, (uint64_t)v13);
  IPC::ArgumentCoder<WTF::UUID,void>::encode(v7, (uint64_t *)a3);
  (*(void (**)(void *, IPC::Encoder **))(*v4 + 16))(v4, &v12);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  if (v14 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_7[v14])(&v12, v13);
  }
  return result;
}

uint64_t API::WebsitePolicies::copy@<X0>(API::WebsitePolicies *this@<X0>, API::WebsitePolicies **a2@<X8>)
{
  uint64_t v4 = API::Object::newObject(0xB0uLL, 126);
  uint64_t v5 = API::WebsitePolicies::WebsitePolicies((API::WebsitePolicies *)v4);
  *a2 = v5;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)v5 + 3, (void **)this + 3);
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4 + 32, (uint64_t)this + 32);
  WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4 + 48, (unsigned int *)this + 12);
  WTF::String::operator=((uint64_t *)(v4 + 64), (WTF::StringImpl **)this + 8);
  WTF::String::operator=((uint64_t *)(v4 + 72), (WTF::StringImpl **)this + 9);
  WTF::String::operator=((uint64_t *)(v4 + 80), (WTF::StringImpl **)this + 10);
  WTF::String::operator=((uint64_t *)(v4 + 88), (WTF::StringImpl **)this + 11);
  char v6 = *((unsigned char *)this + 98);
  *(_WORD *)(v4 + 96) = *((_WORD *)this + 48);
  *(unsigned char *)(v4 + 98) = v6;
  *(unsigned char *)(v4 + 104) = *((unsigned char *)this + 104);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(v4 + 112), (void **)this + 14);
  long long v7 = *(_OWORD *)((char *)this + 120);
  *(unsigned char *)(v4 + 136) = *((unsigned char *)this + 136);
  *(_OWORD *)(v4 + 1++*(_DWORD *)(this + 20) = v7;
  uint64_t v8 = *((void *)this + 18);
  if (v8) {
    CFRetain(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v9 = *(void *)(v4 + 144);
  *(void *)(v4 + 144) = v8;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  uint64_t v10 = *((void *)this + 19);
  if (v10) {
    CFRetain(*(CFTypeRef *)(v10 + 8));
  }
  uint64_t v11 = *(void *)(v4 + 152);
  *(void *)(v4 + 152) = v10;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  *(_WORD *)(v4 + 160) = *((_WORD *)this + 80);
  uint64_t v12 = (WebKit::WebPagePreferencesLockdownModeObserver *)WTF::fastMalloc((WTF *)0x18);
  WebKit::WebPagePreferencesLockdownModeObserver::WebPagePreferencesLockdownModeObserver(v12, (API::WebsitePolicies *)v4);
  uint64_t result = *(void *)(v4 + 168);
  *(void *)(v4 + 168) = v12;
  if (result)
  {
    int v14 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v14();
  }
  return result;
}

void API::WebsitePolicies::~WebsitePolicies(API::WebsitePolicies *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  WebKit::WebsitePoliciesData::~WebsitePoliciesData((API::WebsitePolicies *)((char *)this + 24), a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v6);
}

{
  uint64_t vars8;

  API::WebsitePolicies::~WebsitePolicies(this, a2);

  JUMPOUT(0x199740C10);
}

__n128 API::WebsitePolicies::data@<Q0>(API::WebsitePolicies *this@<X0>, __n128 *a2@<X8>)
{
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)a2, (void **)this + 3);
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&a2->n128_i64[1], (uint64_t)this + 32);
  WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&a2[1].n128_i64[1], (uint64_t)this + 48);
  uint64_t v4 = (_DWORD *)*((void *)this + 8);
  if (v4) {
    *v4 += 2;
  }
  a2[2].n128_u64[1] = (unint64_t)v4;
  uint64_t v5 = (_DWORD *)*((void *)this + 9);
  if (v5) {
    *v5 += 2;
  }
  a2[3].n128_u64[0] = (unint64_t)v5;
  char v6 = (_DWORD *)*((void *)this + 10);
  if (v6) {
    *v6 += 2;
  }
  a2[3].n128_u64[1] = (unint64_t)v6;
  long long v7 = (_DWORD *)*((void *)this + 11);
  if (v7) {
    *v7 += 2;
  }
  a2[4].n128_u64[0] = (unint64_t)v7;
  a2[4].n128_u16[4] = *((_WORD *)this + 48);
  a2[4].n128_u8[10] = *((unsigned char *)this + 98);
  a2[5].n128_u8[0] = *((unsigned char *)this + 104);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&a2[5].n128_i64[1], (void **)this + 14);
  __n128 result = *(__n128 *)((char *)this + 120);
  a2[6] = result;
  a2[7].n128_u8[0] = *((unsigned char *)this + 136);
  return result;
}

uint64_t API::WindowFeatures::create@<X0>(API::WindowFeatures *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (_OWORD *)API::Object::newObject(0x60uLL, 127);
  *(void *)uint64_t v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *(void *)uint64_t v5 = &unk_1EE9E0B08;
  long long v6 = *(_OWORD *)this;
  long long v7 = *((_OWORD *)this + 1);
  long long v8 = *((_OWORD *)this + 2);
  *(_OWORD *)((char *)v5 + 58) = *(_OWORD *)((char *)this + 42);
  uint64_t v5[2] = v7;
  void v5[3] = v8;
  v5[1] = v6;
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v5 + 5), (uint64_t)this + 64);
  *a2 = v5;
  return result;
}

void API::WindowFeatures::~WindowFeatures(API::WindowFeatures *this, void *a2)
{
}

{
  uint64_t vars8;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::WebsiteDataRecord::WebsiteDataRecord(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E0B30;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    *(void *)(a1 + 32) = a2[2];
    *(void *)(a1 + 40) = 0;
    uint64_t v5 = a2[3];
    a2[3] = 0;
    *(void *)(a1 + 40) = v5;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = a2[5];
  a2[5] = 0;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = 0;
  uint64_t v7 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = a2[7];
  a2[7] = 0;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = 0;
  uint64_t v9 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = 0;
  uint64_t v10 = a2[9];
  a2[9] = 0;
  *(void *)(a1 + 88) = v10;
  return a1;
}

void API::WebsiteDataRecord::~WebsiteDataRecord(API::WebsiteDataRecord *this, WTF::StringImpl *a2)
{
}

{
  uint64_t vars8;

  WebKit::WebsiteDataRecord::~WebsiteDataRecord((API::WebsiteDataRecord *)((char *)this + 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t WKApplicationCacheManagerGetTypeID()
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)128>::type()
{
  return 128;
}

uint64_t API::ObjectImpl<(API::Object::Type)129>::type()
{
  return 129;
}

uint64_t API::ObjectImpl<(API::Object::Type)126>::type()
{
  return 126;
}

uint64_t API::ObjectImpl<(API::Object::Type)127>::type()
{
  return 127;
}

uint64_t API::ObjectImpl<(API::Object::Type)123>::type()
{
  return 123;
}

void API::UserStyleSheet::~UserStyleSheet(API::UserStyleSheet *this, void *a2)
{
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v4);
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v4);
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)29>::type()
{
  return 29;
}

void API::WebPushDaemonConnection::~WebPushDaemonConnection(API::WebPushDaemonConnection *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)120>::type()
{
  return 120;
}

void API::ObjectImpl<(API::Object::Type)29>::~ObjectImpl()
{
}

uint64_t API::WebAuthenticationAssertionResponse::userHandle(void)const::$_0::__invoke(uint64_t a1, WTF::DeferrableRefCountedBase *a2)
{
  return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a2);
}

uint64_t API::WebAuthenticationAssertionResponse::credentialID(void)const::$_0::__invoke(uint64_t a1, WTF::DeferrableRefCountedBase *a2)
{
  return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a2);
}

uint64_t *std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*((unsigned char *)result + 40))
    {
      *(_WORD *)uint64_t result = *(_WORD *)a2;
      WTF::String::operator=(result + 1, (uint64_t *)(a2 + 8));
      WTF::String::operator=(v3 + 2, (uint64_t *)(a2 + 16));
      WTF::String::operator=(v3 + 3, (uint64_t *)(a2 + 24));
      return WTF::String::operator=(v3 + 4, (uint64_t *)(a2 + 32));
    }
  }
  else if (*((unsigned char *)result + 40))
  {
    return (uint64_t *)std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_WORD *)uint64_t result = *(_WORD *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    result[1] = v4;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    result[2] = v5;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    result[3] = v6;
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    result[4] = v7;
    *((unsigned char *)result + 40) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(result + 32);
    *(void *)(v2 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t result = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v2 + 40) = 0;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v4 = *(unsigned int *)(result + 12);
      if (v4) {
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(void *)result + 8 * v4));
      }
      uint64_t result = (uint64_t)WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v3, a2);
      uint64_t v5 = a2[2];
      *(_DWORD *)(v3 + 23) = *(_DWORD *)((char *)a2 + 23);
      *(void *)(v3 + 16) = v5;
    }
  }
  else if (*(unsigned char *)(result + 32))
  {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    *(unsigned char *)(v3 + 32) = 0;
  }
  else
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v6 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v6;
    uint64_t v7 = a2[2];
    *(_DWORD *)(result + 23) = *(_DWORD *)((char *)a2 + 23);
    *(void *)(result + 16) = v7;
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(result + 32))
    {
      *(unsigned char *)uint64_t result = *(unsigned char *)a2;
      uint64_t v4 = *(unsigned int *)(result + 20);
      if (v4) {
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(result + 8), (WTF::StringImpl *)(*(void *)(result + 8) + 8 * v4));
      }
      uint64_t result = (uint64_t)WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v3 + 8, (_DWORD *)(a2 + 8));
      *(_WORD *)(v3 + 24) = *(_WORD *)(a2 + 24);
    }
  }
  else if (*(unsigned char *)(result + 32))
  {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 8, (void *)a2);
    *(unsigned char *)(v3 + 32) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t result = *(unsigned char *)a2;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(result + 16) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + ++*(_DWORD *)(this + 20) = 0;
    *(_DWORD *)(result + ++*(_DWORD *)(this + 20) = v5;
    *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::CustomHeaderFields>::destruct(*(void *)a1 + 32 * v5, (void *)(*(void *)a1 + 32 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields*>((uint64_t)&v7, *(void *)a2, *(void *)a2 + 32 * v4, *(void *)a1);
    WTF::VectorCopier<false,WebCore::CustomHeaderFields>::uninitializedCopy<WebCore::CustomHeaderFields>(*(void *)a2 + 32 * *(unsigned int *)(a1 + 12), (uint64_t *)(*(void *)a2 + 32 * *(unsigned int *)(a2 + 12)), *(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2)
{
  if (a2 != (unsigned int *)a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = a2[3];
    if (v4 <= v5)
    {
      BOOL v8 = v5 > *(_DWORD *)(a1 + 8);
      LODWORD(v5) = *(_DWORD *)(a1 + 12);
      if (v8)
      {
        WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
        LODWORD(v5) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      uint64_t v6 = *(void *)a1 + 16 * v5;
      uint64_t v7 = 16 * v4 - 16 * v5;
      do
      {
        uint64_t v6 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, (WTF::StringImpl *)a2)+ 16;
        v7 -= 16;
      }
      while (v7);
      *(_DWORD *)(a1 + 12) = v5;
    }
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = *(void *)a1;
    if (v5)
    {
      uint64_t v11 = v9 + 16 * v5;
      do
      {
        if (v9 != v10)
        {
          unint64_t v12 = *(unsigned int *)(v10 + 12);
          unint64_t v13 = *(unsigned int *)(v9 + 12);
          if (v12 <= v13)
          {
            if (v13 > *(unsigned int *)(v10 + 8))
            {
              WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v10, 0);
              WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v10, *(unsigned int *)(v9 + 12));
              unint64_t v12 = *(unsigned int *)(v10 + 12);
            }
          }
          else
          {
            int v14 = (WTF::StringImpl ***)(*(void *)v10 + 8 * v13);
            uint64_t v15 = 8 * v12 - 8 * v13;
            do
            {
              if (*v14) {
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v14, (WTF::StringImpl *)a2);
              }
              ++v14;
              v15 -= 8;
            }
            while (v15);
            *(_DWORD *)(v10 + 12) = v13;
            unint64_t v12 = v13;
          }
          uint64_t v16 = *(void ***)v9;
          uint64_t v17 = *(WTF::StringImpl ****)v10;
          if (v12)
          {
            uint64_t v18 = 8 * v12;
            do
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(v17++, v16++);
              v18 -= 8;
            }
            while (v18);
            uint64_t v16 = *(void ***)v9;
            unint64_t v12 = *(unsigned int *)(v10 + 12);
            uint64_t v17 = *(WTF::StringImpl ****)v10;
          }
          uint64_t v19 = *(unsigned int *)(v9 + 12);
          if (v12 != v19)
          {
            char v20 = (uint64_t *)&v17[v12];
            uint64_t v21 = &v16[v12];
            uint64_t v22 = 8 * v19 - 8 * v12;
            do
            {
              char v20 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v20, v21++)+ 1;
              v22 -= 8;
            }
            while (v22);
            LODWORD(v12) = *(_DWORD *)(v9 + 12);
          }
          *(_DWORD *)(v10 + 12) = v12;
        }
        v9 += 16;
        v10 += 16;
      }
      while (v9 != v11);
      uint64_t v9 = *(void *)a2;
      unsigned int v23 = *(_DWORD *)(a1 + 12);
      uint64_t v10 = *(void *)a1;
    }
    else
    {
      unsigned int v23 = 0;
    }
    uint64_t v24 = a2[3];
    if (v23 != v24)
    {
      uint64_t v25 = v10 + 16 * v23;
      uint64_t v26 = v9 + 16 * v23;
      uint64_t v27 = 16 * v24 - 16 * v23;
      do
      {
        uint64_t v25 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v25, v26)+ 16;
        v26 += 16;
        v27 -= 16;
      }
      while (v27);
      unsigned int v23 = a2[3];
    }
    *(_DWORD *)(a1 + 12) = v23;
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(uint64_t *a1, void **a2)
{
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v6, a2);
  uint64_t v4 = *a1;
  *a1 = v6;
  uint64_t v6 = v4;
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a4, v5);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a4 + 16), v5 + 16);
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct((WTF::StringImpl *)(*(void *)a1 + 16 * v5), (WTF::StringImpl *)(*(void *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    uint64_t v6 = *(WTF::StringImpl ***)a2;
    if (v4)
    {
      uint64_t v7 = &v6[2 * v4];
      BOOL v8 = *(uint64_t **)a1;
      do
      {
        WTF::String::operator=(v8, v6);
        WTF::String::operator=(v8 + 1, v6 + 1);
        v6 += 2;
        v8 += 2;
      }
      while (v6 != v7);
      uint64_t v6 = *(WTF::StringImpl ***)a2;
      unsigned int v9 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      unsigned int v9 = 0;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 12);
    if (v9 != v10)
    {
      uint64_t v11 = (WTF::StringImpl **)(*(void *)a1 + 16 * v9);
      unint64_t v12 = &v6[2 * v9];
      do
      {
        unint64_t v13 = *v12;
        if (*v12) {
          *(_DWORD *)v13 += 2;
        }
        *uint64_t v11 = v13;
        int v14 = v12[1];
        if (v14) {
          *(_DWORD *)v14 += 2;
        }
        v11[1] = v14;
        v12 += 2;
        v11 += 2;
      }
      while (v12 != &v6[2 * v10]);
    }
    *(_DWORD *)(a1 + 12) = v10;
  }
  return a1;
}

WTF::StringImpl *API::WebAuthenticationPanelClient::requestPin(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v6);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t API::WebAuthenticationPanelClient::selectAssertionResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t API::WebAuthenticationPanelClient::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0BE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0BE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::SubscribeToPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>(a2, (uint64_t)v6);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))off_1EE9E0BF8[v7])(&v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::SubscribeToPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>>(uint64_t *a1)
{
  int v4 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, _OWORD *))off_1EE9E0BF8[v4])(&v5, v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0C18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0C18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::UnsubscribeFromPushService &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v6);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))off_1EE9E0C30[v7])(&v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>>(v2);
    }
  }
  else
  {
    char v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::UnsubscribeFromPushService,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>>(uint64_t *a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9E0C30[v4])(&v5, v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0C50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0C50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::GetPushSubscription &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>(a2, v7);
    if (v10)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v10)
      {
        if (v9 != -1) {
          return ((uint64_t (*)(char *, uint64_t *))off_1EE9E0C68[v9])(&v6, &v8);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>>(v2);
    }
  }
  else
  {
    char v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetPushSubscription,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>>(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  v5[80] = 0;
  int v6 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9E0C68[v6])(&v3, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(Messages::PushClientConnection::GetPendingPushMessage &&,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0C88;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(Messages::PushClientConnection::GetPendingPushMessage &&,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0C88;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(Messages::PushClientConnection::GetPendingPushMessage &&,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebKit::WebPushMessage>>>(a2, v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(v2);
    }
  }
  else
  {
    int v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetPendingPushMessage,WTF::CompletionHandler<void ()(std::optional<WebKit::WebPushMessage> const&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[216] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::GetNotifications &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9E0CB0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::GetNotifications &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9E0CB0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL IPC::MessageSender::sendWithAsyncReplyWithoutUsingIPCConnection<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)>>(Messages::PushClientConnection::GetNotifications &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)> &&)::{lambda(IPC::Decoder *)#1},void,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)> &&>::call(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>>(a2, (uint64_t)v6);
    if (v8)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        if (v7 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))off_1EE9E0CC8[v7])(&v9, v6);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)>>(v2);
    }
  }
  else
  {
    char v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::PushClientConnection::GetNotifications,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> const&)>>(uint64_t *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9E0CC8[v4])(&v5, v3);
  }
  return result;
}

uint64_t WKAuthenticationChallengeGetTypeID()
{
  return 2;
}

uint64_t WKAuthenticationChallengeGetDecisionListener(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 464);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKAuthenticationChallengeGetProtectionSpace(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::AuthenticationChallengeProxy::protectionSpace((WebKit::AuthenticationChallengeProxy *)a1);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t WKAuthenticationChallengeGetProposedCredential(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::AuthenticationChallengeProxy::proposedCredential((WebKit::AuthenticationChallengeProxy *)a1);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t WKAuthenticationChallengeGetPreviousFailureCount(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = (WebCore::AuthenticationChallengeBase *)(a1 + 16);
  return WebCore::AuthenticationChallengeBase::previousFailureCount(v2);
}

uint64_t WKAuthenticationDecisionListenerGetTypeID()
{
  return 3;
}

WTF::StringImpl *WKAuthenticationDecisionListenerUseCredential(void *a1, void *a2)
{
  if (!a1)
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_10:
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v12);
    CFTypeRef cf = 0;
    goto LABEL_11;
  }
  uint64_t v3 = [a1 _apiObject];
  if (!a2) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v4 = [a2 _apiObject];
  char v5 = *(WTF::StringImpl **)(v4 + 16);
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  unint64_t v12 = v5;
  int v6 = *(WTF::StringImpl **)(v4 + 24);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  unint64_t v13 = v6;
  char v14 = *(unsigned char *)(v4 + 32);
  int v7 = *(const void **)(v4 + 40);
  CFTypeRef cf = v7;
  if (v7) {
    CFRetain(v7);
  }
LABEL_11:
  WebKit::AuthenticationDecisionListener::completeChallenge(v3);
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  char v10 = v13;
  unint64_t v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKAuthenticationDecisionListenerCancel(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v6);
  CFTypeRef cf = 0;
  WebKit::AuthenticationDecisionListener::completeChallenge(v1);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = v7;
  int v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v6;
  int v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKAuthenticationDecisionListenerRejectProtectionSpaceAndContinue(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v6);
  CFTypeRef cf = 0;
  WebKit::AuthenticationDecisionListener::completeChallenge(v1);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = v7;
  int v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = v6;
  int v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKBackForwardListItemGetTypeID()
{
  return 44;
}

API::URL *WKBackForwardListItemCopyURL(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v2 = (const WTF::String *)(v1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v4, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKBackForwardListItemCopyTitle(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

API::URL *WKBackForwardListItemCopyOriginalURL(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v2 = (const WTF::String *)(v1 + 64);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v4, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKBackForwardListGetTypeID()
{
  return 43;
}

uint64_t WKBackForwardListGetCurrentItem(uint64_t result)
{
  if (result) {
    uint64_t result = [(id)result _apiObject];
  }
  uint64_t v1 = *(void *)(result + 16);
  if (v1 && *(void *)(v1 + 8) && *(unsigned char *)(result + 48))
  {
    unint64_t v2 = *(void *)(result + 40);
    if (v2 >= *(unsigned int *)(result + 36))
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v3 = *(void *)(*(void *)(result + 24) + 8 * v2);
    if (v3) {
      return *(void *)(v3 + 8);
    }
  }
  return 0;
}

uint64_t WKBackForwardListGetBackItem(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::WebBackForwardList::backItem((uint64_t)a1);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t WKBackForwardListGetForwardItem(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::WebBackForwardList::forwardItem((uint64_t)a1);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t WKBackForwardListGetItemAtIndex(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::WebBackForwardList::itemAtIndex((uint64_t)a1, a2);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void WKBackForwardListClear(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  WebKit::WebBackForwardList::clear((WebKit::WebBackForwardList *)a1);
}

uint64_t WKBackForwardListGetBackListCount(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 && *(void *)(v1 + 8) && *(unsigned char *)(a1 + 48)) {
    return *(unsigned int *)(a1 + 40);
  }
  else {
    return 0;
  }
}

uint64_t WKBackForwardListGetForwardListCount(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 && *(void *)(v1 + 8) && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)(a1 + 36) + ~*(_DWORD *)(a1 + 40));
  }
  else {
    return 0;
  }
}

uint64_t WKBackForwardListCopyBackListWithLimit(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebBackForwardList::backListAsAPIArrayWithLimit((WebKit::WebBackForwardList *)a1, a2, &v4);
  if (v4) {
    return *(void *)(v4 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBackForwardListCopyForwardListWithLimit(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebBackForwardList::forwardListAsAPIArrayWithLimit((WebKit::WebBackForwardList *)a1, a2, &v4);
  if (v4) {
    return *(void *)(v4 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKContextGetTypeID()
{
  return 89;
}

void WKContextCreate()
{
  uint64_t v0 = (API::ProcessPoolConfiguration *)API::Object::newObject(0xA8uLL, 90);
  uint64_t v1 = API::ProcessPoolConfiguration::ProcessPoolConfiguration(v0);
  WebKit::InitializeWebKit2(v1);
  unint64_t v2 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  WebKit::WebProcessPool::WebProcessPool(v2, v0);
}

void WKContextCreateWithInjectedBundlePath(void *a1)
{
  unint64_t v2 = (uint64_t *)API::Object::newObject(0xA8uLL, 90);
  API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v2);
  if (a1)
  {
    [a1 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    int v6 = 0;
  }
  WTF::String::operator=(v2 + 2, &v6);
  uint64_t v4 = v6;
  int v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      uint64_t v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebKit::InitializeWebKit2(v4);
  char v5 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  WebKit::WebProcessPool::WebProcessPool(v5, (API::ProcessPoolConfiguration *)v2);
}

void WKContextCreateWithConfiguration(void *a1)
{
  if (a1)
  {
    uint64_t v1 = (CFTypeRef *)[a1 _apiObject];
    unint64_t v2 = (WebKit *)CFRetain(v1[1]);
  }
  else
  {
    uint64_t v1 = (CFTypeRef *)API::Object::newObject(0xA8uLL, 90);
    unint64_t v2 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v1);
  }
  WebKit::InitializeWebKit2(v2);
  uint64_t v3 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  WebKit::WebProcessPool::WebProcessPool(v3, (API::ProcessPoolConfiguration *)v1);
}

_OWORD *WKContextSetClient(char *a1, _OWORD *__src)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  uint64_t result = a1 + 208;
  if (__src)
  {
    if (*(_DWORD *)__src == 4)
    {
      long long v4 = __src[1];
      *uint64_t result = *__src;
      result[1] = v4;
      long long v5 = __src[2];
      long long v6 = __src[3];
      long long v7 = __src[4];
      *((void *)result + 10) = *((void *)__src + 10);
      result[3] = v6;
      result[4] = v7;
      result[2] = v5;
    }
    else
    {
      *((void *)result + 10) = 0;
      result[3] = 0u;
      result[4] = 0u;
      result[1] = 0u;
      result[2] = 0u;
      *uint64_t result = 0u;
      uint64_t v8 = *(unsigned int *)__src;
      if ((int)v8 <= 3)
      {
        if (v8 >= 5)
        {
          __break(1u);
        }
        else
        {
          size_t v9 = constinit_1[v8];
          return memcpy(result, __src, v9);
        }
      }
    }
  }
  else
  {
    *((void *)result + 10) = 0;
    result[3] = 0u;
    result[4] = 0u;
    result[1] = 0u;
    result[2] = 0u;
    *uint64_t result = 0u;
  }
  return result;
}

void *WKContextSetInjectedBundleClient(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  long long v7 = WebKit::WebContextInjectedBundleClient::WebContextInjectedBundleClient(v4, a2);
  WebKit::WebProcessPool::setInjectedBundleClient(v3, &v7);
  uint64_t result = v7;
  if (v7)
  {
    long long v6 = *(uint64_t (**)(void))(*v7 + 8);
    return (void *)v6();
  }
  return result;
}

uint64_t WKContextSetHistoryClient(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(void *)(v4 + 56) = 0;
  *(void *)uint64_t v4 = &unk_1EE9E0CE8;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      __break(1u);
    }
    long long v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[2];
    *(void *)(v4 + 56) = *((void *)a2 + 6);
    *(_OWORD *)(v4 + 24) = v6;
    *(_OWORD *)(v4 + 40) = v7;
    *(_OWORD *)(v4 + 8) = v5;
  }
LABEL_8:
  uint64_t v19 = (uint64_t *)v4;
  WebKit::WebProcessPool::setHistoryClient(v3, &v19);
  if (v19) {
    (*(void (**)(uint64_t *))(*v19 + 8))(v19);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 + 312) + 56))(*(void *)(v3 + 312));
  uint64_t v9 = *(unsigned int *)(v3 + 84);
  if (v9)
  {
    char v10 = result;
    uint64_t v11 = *(WebKit::WebProcessProxy ***)(v3 + 72);
    unint64_t v12 = &v11[v9];
    do
    {
      unint64_t v13 = *v11;
      char v14 = (atomic_uint *)((char *)*v11 + 16);
      atomic_fetch_add(v14, 1u);
      WebKit::WebProcessProxy::pages(v13, (uint64_t)&v19);
      if (v20)
      {
        uint64_t v16 = v19;
        uint64_t v17 = 8 * v20;
        do
        {
          uint64_t v18 = *v16++;
          CFRetain(*(CFTypeRef *)(v18 + 8));
          *(unsigned char *)(v18 + 897) = v10;
          CFRelease(*(CFTypeRef *)(v18 + 8));
          v17 -= 8;
        }
        while (v17);
      }
      uint64_t result = WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v15);
      if (v13) {
        uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v14);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t WKContextSetDownloadClient(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v4 = [a1 _apiObject];
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)0x88);
  *(_OWORD *)(result + 16) = 0u;
  long long v6 = (_OWORD *)(result + 16);
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9E0D38;
  *(void *)(result + 128) = a1;
  if (a2)
  {
    int v7 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      long long v8 = *a2;
      long long v9 = a2[2];
      *(_OWORD *)(result + 32) = a2[1];
      *(_OWORD *)(result + 48) = v9;
      _OWORD *v6 = v8;
      long long v10 = a2[3];
      long long v11 = a2[4];
      long long v12 = a2[5];
      *(_OWORD *)(result + 112) = a2[6];
    }
    else
    {
      if (v7 > 0) {
        goto LABEL_10;
      }
      if (v7)
      {
        __break(1u);
        return result;
      }
      long long v13 = *a2;
      long long v14 = a2[2];
      *(_OWORD *)(result + 32) = a2[1];
      *(_OWORD *)(result + 48) = v14;
      _OWORD *v6 = v13;
      long long v10 = a2[3];
      long long v11 = a2[4];
      long long v12 = a2[5];
      *(void *)(result + 112) = *((void *)a2 + 12);
    }
    *(_OWORD *)(result + 80) = v11;
    *(_OWORD *)(result + 96) = v12;
    *(_OWORD *)(result + 64) = v10;
  }
LABEL_10:
  uint64_t v15 = *(_DWORD **)(v4 + 304);
  *(void *)(v4 + 304) = result;
  if (v15)
  {
    if (v15[2] == 1)
    {
      uint64_t v16 = *(uint64_t (**)(_DWORD *))(*(void *)v15 + 8);
      return v16(v15);
    }
    else
    {
      --v15[2];
    }
  }
  return result;
}

uint64_t WKContextDownloadURLRequest()
{
  return 0;
}

uint64_t WKContextResumeDownload()
{
  return 0;
}

void WKContextSetInitializationUserDataForInjectedBundle(void *a1, CFTypeRef *a2)
{
  unint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2)
  {
LABEL_3:
    unint64_t v2 = (CFTypeRef *)[(CFTypeRef *)v2 _apiObject];
    CFRetain(v2[1]);
  }
LABEL_4:
  uint64_t v4 = *(void *)(v3 + 192);
  *(void *)(v3 + 192) = v2;
  if (v4)
  {
    long long v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

WTF::StringImpl *WKContextPostMessageToInjectedBundle(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    long long v5 = (WebKit::WebProcessPool *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    long long v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  if (a3) {
    long long v6 = (API::Object *)[a3 _apiObject];
  }
  else {
    long long v6 = 0;
  }
  WebKit::WebProcessPool::postMessageToInjectedBundle(v5, (const WTF::String *)&v9, v6);
  uint64_t result = v9;
  long long v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

double WKContextGetGlobalStatistics(uint64_t a1)
{
  double result = *(double *)&WebKit::WebProcessPool::statistics(void)::statistics;
  *(void *)a1 = WebKit::WebProcessPool::statistics(void)::statistics;
  *(_DWORD *)(a1 + 8) = dword_1EB35A740;
  return result;
}

WTF::StringImpl *WKContextAddVisitedLink(void *a1, void *a2)
{
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  double result = v8;
  if (v8)
  {
    if (*((_DWORD *)v8 + 1))
    {
      uint64_t v5 = *(void *)([a1 _apiObject] + 328);
      int v7 = WebCore::computeSharedStringHash((WebCore *)&v8, v6);
      WebKit::SharedStringHashStore::scheduleAddition((WebKit::SharedStringHashStore *)(v5 + 64), v7);
      double result = v8;
      long long v8 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      long long v8 = 0;
    }
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WKContextClearVisitedLinks(void *a1)
{
  uint64_t v1 = *(WebKit::VisitedLinkStore **)([a1 _apiObject] + 328);

  return WebKit::VisitedLinkStore::removeAll(v1);
}

uint64_t WKContextSetCacheModel(uint64_t a1, int a2)
{
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  if (a2 == 2) {
    char v2 = 2;
  }
  else {
    char v2 = a2 == 1;
  }
  return WebKit::LegacyGlobalSettings::setCacheModel(&WebKit::LegacyGlobalSettings::singleton(void)::properties, v2);
}

uint64_t WKContextGetCacheModel()
{
  {
    uint64_t result = WebKit::LegacyGlobalSettings::singleton(void)::properties == 1;
    if (WebKit::LegacyGlobalSettings::singleton(void)::properties != 2) {
      return result;
    }
  }
  else
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    unk_1EB35A6F0 = 0u;
    unk_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  return 2;
}

uint64_t WKContextGetMaximumNumberOfProcesses()
{
  return 0xFFFFFFFFLL;
}

uint64_t WKContextSetAlwaysUsesComplexTextCodePath(unsigned char *a1, char a2)
{
  if (a1) {
    a1 = (unsigned char *)[a1 _apiObject];
  }
  a1[400] = a2;
  char v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>((uint64_t)a1, &v4, 0);
}

uint64_t WKContextSetDisableFontSubpixelAntialiasingForTesting(unsigned char *a1, char a2)
{
  if (a1) {
    a1 = (unsigned char *)[a1 _apiObject];
  }
  a1[401] = a2;
  char v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>((uint64_t)a1, &v4, 0);
}

WTF::StringImpl *WKContextRegisterURLSchemeAsEmptyDocument(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 344), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(v3, v8, 0);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsSecure(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebProcessPool *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::registerURLSchemeAsSecure(v3, &v7, v4);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsBypassingContentSecurityPolicy(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebProcessPool *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::registerURLSchemeAsBypassingContentSecurityPolicy(v3, &v7, v4);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsCachePartitioned(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 384), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(v3, v8, 0);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsCanDisplayOnlyIfCanRequest(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 392), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(v3, v8, 0);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKContextSetDomainRelaxationForbiddenForURLScheme(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 352), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(v3, v8, 0);
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKContextSetPrewarmsProcessesAutomatically(void *a1, __int16 a2)
{
  uint64_t result = [a1 _apiObject];
  *(_WORD *)(*(void *)(result + 48) + 89) = a2 | 0x100;
  return result;
}

uint64_t WKContextSetUsesSingleWebProcess(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(*(void *)(result + 48) + 96) = a2;
  return result;
}

uint64_t WKContextGetUsesSingleWebProcess(void *a1)
{
  return *(unsigned __int8 *)(*(void *)([a1 _apiObject] + 48) + 96);
}

const char *WKContextGetGeolocationManager(uint64_t *a1)
{
  if (a1) {
    a1 = (uint64_t *)[a1 _apiObject];
  }
  v2[0] = "WebGeolocationManagerProxy";
  v2[1] = 27;
  uint64_t result = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(a1 + 57, (WTF::ASCIILiteralHash *)v2);
  if (result) {
    return (const char *)*((void *)result - 1);
  }
  return result;
}

uint64_t WKContextGetIconDatabase()
{
  return 0;
}

const char *WKContextGetNotificationManager(uint64_t *a1)
{
  if (a1) {
    a1 = (uint64_t *)[a1 _apiObject];
  }
  v2[0] = "WebNotificationManagerProxy";
  v2[1] = 28;
  uint64_t result = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(a1 + 57, (WTF::ASCIILiteralHash *)v2);
  if (result) {
    return (const char *)*((void *)result - 1);
  }
  return result;
}

void WKContextStartMemorySampler(void *a1, void *a2)
{
  if (a1) {
    uint64_t v3 = (WebKit::WebProcessPool *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  double v4 = *(double *)([a2 _apiObject] + 16);

  WebKit::WebProcessPool::startMemorySampler(v3, v4);
}

uint64_t WKContextStopMemorySampler(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebProcessPool::stopMemorySampler((WebKit::WebProcessPool *)a1);
}

void WKContextDisableProcessTermination(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  WebKit::WebProcessPool::disableProcessTermination((WebKit::WebProcessPool *)a1);
}

uint64_t WKContextEnableProcessTermination(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebProcessPool::enableProcessTermination((WebKit::WebProcessPool *)a1);
}

uint64_t WKContextSetHTTPPipeliningEnabled(void *a1, WebCore::ResourceRequest *this)
{
  if (a1) {
    [a1 _apiObject];
  }

  return WebCore::ResourceRequest::setHTTPPipeliningEnabled(this);
}

uint64_t WKContextWarmInitialProcess(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebProcessPool::prewarmProcess((uint64_t)a1);
}

uint64_t WKContextJavaScriptConfigurationFileEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 506);
}

uint64_t WKContextSetJavaScriptConfigurationFileEnabled(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 506) = a2;
  return result;
}

uint64_t WKContextGarbageCollectJavaScriptObjects(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  char v2 = 0;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::GarbageCollectJavaScriptObjects>((uint64_t)a1, &v2, 0);
}

uint64_t WKContextSetJavaScriptGarbageCollectorTimerEnabled(void *a1, char a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  char v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>((uint64_t)a1, &v4, 0);
}

uint64_t WKContextCopyPlugInAutoStartOriginHashes()
{
  return 0;
}

void *WKContextSetInvalidMessageFunction(void *result)
{
  WebKit::s_invalidMessageCallback = result;
  return result;
}

uint64_t WKContextSetMemoryCacheDisabled(unsigned char *a1, char a2)
{
  if (a1) {
    a1 = (unsigned char *)[a1 _apiObject];
  }
  a1[505] = a2;
  char v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMemoryCacheDisabled>((uint64_t)a1, &v4, 0);
}

WTF::StringImpl *WKContextSetFontAllowList(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebProcessPool *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      char v4 = (API::Array *)[a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  char v4 = 0;
LABEL_4:

  return WebKit::WebProcessPool::setFontAllowList(v3, v4);
}

void WKContextTerminateGPUProcess()
{
  {
    if (WebKit::singleton(void)::singleton)
    {
      uint64_t v0 = *(WebKit::GPUProcessProxy **)(WebKit::singleton(void)::singleton + 8);
      if (v0) {
        WebKit::GPUProcessProxy::processIsReadyToExit(v0);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
}

void WKContextTerminateServiceWorkers(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  WebKit::WebProcessPool::terminateServiceWorkers((CFTypeRef *)a1);
}

uint64_t WKContextClearCurrentModifierStateForTesting(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  char v2 = 0;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearCurrentModifierStateForTesting>((uint64_t)a1, &v2, 0);
}

uint64_t WKContextSetUseSeparateServiceWorkerProcess(int a1, WebKit::WebProcessPool *this)
{
  return WebKit::WebProcessPool::setUseSeparateServiceWorkerProcess((uint64_t)this);
}

uint64_t WKContextCopyLocalhostAliases()
{
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1EB35A6F0 = 0u;
    *(_OWORD *)&qword_1EB35A700 = 0u;
    qword_1EB35A710 = 0;
  }
  v3[0] = 0;
  v3[1] = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(v3, (uint64_t **)&qword_1EB35A710);
  API::Array::createStringArray((uint64_t)v3, &v4);
  if (v4) {
    uint64_t v1 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v0);
  return v1;
}

uint64_t WKContextSetLocalhostAliases(uint64_t a1, void *a2)
{
  if (a2) {
    char v2 = (unsigned int *)[a2 _apiObject];
  }
  else {
    char v2 = 0;
  }
  API::Array::toStringVector(v2, (uint64_t)&v8);
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v6 = 8 * v9;
    do
    {
      {
        WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
        *(_OWORD *)&qword_1EB35A6F0 = 0u;
        *(_OWORD *)&qword_1EB35A700 = 0u;
        qword_1EB35A710 = 0;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&qword_1EB35A710, v5++, v4, (uint64_t)v10);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

WebCore::GamepadProvider *WKContextClearMockGamepadsForTesting(WebCore::GamepadProvider *a1)
{
  uint64_t v1 = WebCore::GamepadProvider::singleton(a1);
  uint64_t result = (WebCore::GamepadProvider *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)WebCore::GamepadProvider::singleton(result) + 64);
    return (WebCore::GamepadProvider *)v3();
  }
  return result;
}

API::ProcessPoolConfiguration *WKContextConfigurationCreate()
{
  uint64_t v0 = (API::ProcessPoolConfiguration *)API::Object::newObject(0xA8uLL, 90);
  uint64_t result = API::ProcessPoolConfiguration::ProcessPoolConfiguration(v0);
  if (result) {
    return (API::ProcessPoolConfiguration *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKContextConfigurationCopyDiskCacheDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyIndexedDBDatabaseDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyInjectedBundlePath(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKContextConfigurationSetInjectedBundlePath(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WTF::String::operator=((uint64_t *)(v3 + 16), &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKContextConfigurationCopyCustomClassesForParameterCoder()
{
  v3[0] = 0;
  v3[1] = 0;
  API::Array::createStringArray((uint64_t)v3, &v4);
  if (v4) {
    uint64_t v1 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v0);
  return v1;
}

uint64_t WKContextConfigurationCopyLocalStorageDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyWebSQLDatabaseDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyMediaKeysStorageDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyResourceLoadStatisticsDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationFullySynchronousModeIsAllowedForTesting(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 72);
}

uint64_t WKContextConfigurationSetFullySynchronousModeIsAllowedForTesting(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 72) = a2;
  return result;
}

uint64_t WKContextConfigurationIgnoreSynchronousMessagingTimeoutsForTesting(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 73);
}

uint64_t WKContextConfigurationSetIgnoreSynchronousMessagingTimeoutsForTesting(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 73) = a2;
  return result;
}

uint64_t WKContextConfigurationCopyOverrideLanguages()
{
  v3[0] = 0;
  v3[1] = 0;
  API::Array::create(v3, &v2);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v0);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKContextConfigurationSetOverrideLanguages(uint64_t a1, void *a2)
{
  if (a2) {
    uint64_t v2 = (unsigned int *)[a2 _apiObject];
  }
  else {
    uint64_t v2 = 0;
  }
  API::Array::toStringVector(v2, (uint64_t)v5);
  WebKit::setOverrideLanguages(v5);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

uint64_t WKContextConfigurationProcessSwapsOnNavigation(unsigned char *a1)
{
  if (a1) {
    a1 = (unsigned char *)[a1 _apiObject];
  }
  uint64_t v1 = 84;
  if (!a1[85]) {
    uint64_t v1 = 86;
  }
  return a1[v1];
}

uint64_t WKContextConfigurationSetProcessSwapsOnNavigation(void *a1, __int16 a2)
{
  uint64_t result = [a1 _apiObject];
  *(_WORD *)(result + 84) = a2 | 0x100;
  return result;
}

uint64_t WKContextConfigurationPrewarmsProcessesAutomatically(unsigned char *a1)
{
  if (a1) {
    a1 = (unsigned char *)[a1 _apiObject];
  }
  uint64_t v1 = 89;
  if (!a1[90]) {
    uint64_t v1 = 93;
  }
  return a1[v1];
}

uint64_t WKContextConfigurationSetPrewarmsProcessesAutomatically(void *a1, __int16 a2)
{
  uint64_t result = [a1 _apiObject];
  *(_WORD *)(result + 89) = a2 | 0x100;
  return result;
}

uint64_t WKContextConfigurationUsesWebProcessCache(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 91);
}

uint64_t WKContextConfigurationSetUsesWebProcessCache(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 91) = a2;
  return result;
}

uint64_t WKContextConfigurationAlwaysKeepAndReuseSwappedProcesses(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 87);
}

uint64_t WKContextConfigurationSetAlwaysKeepAndReuseSwappedProcesses(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 87) = a2;
  return result;
}

uint64_t WKContextConfigurationDiskCacheSizeOverride()
{
  return 0;
}

uint64_t WKContextConfigurationSetShouldConfigureJSCForTesting(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 94) = a2;
  return result;
}

uint64_t WKContextConfigurationCopyTimeZoneOverride(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKContextConfigurationSetTimeZoneOverride(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WTF::String::operator=((uint64_t *)(v3 + 136), &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKCookieManagerGetTypeID()
{
  return 0;
}

uint64_t WKCredentialGetTypeID()
{
  return 7;
}

uint64_t WKCredentialCreate(void *a1, void *a2)
{
  if (a1) {
    [a1 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebCore::CredentialBase::CredentialBase();
  CFTypeRef cf = 0;
  uint64_t v3 = API::Object::newObject(0x30uLL, 7);
  uint64_t v4 = WebKit::WebCredential::WebCredential(v3, (uint64_t)&v13);
  if (v4) {
    uint64_t v6 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  long long v8 = v14;
  long long v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned int v9 = v13;
  long long v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v5);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v6;
}

uint64_t WKCredentialCreateWithCertificateInfo()
{
  return 0;
}

uint64_t WKCredentialCopyUser(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::CredentialBase::user((WebCore::CredentialBase *)(a1 + 16));
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

void WKContextSetHistoryClient::HistoryClient::didNavigateWithNavigationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v10 = API::Object::newObject(0x1E8uLL, 78);
    API::NavigationData::NavigationData(v10, a4);
    long long v11 = *(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(a1 + 24);
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a3 + 8);
    if (v10)
    {
      v11(v12, v13, *(void *)(v10 + 8), *(void *)(a5 + 8), *(void *)(a1 + 16));
      long long v14 = *(const void **)(v10 + 8);
      CFRelease(v14);
    }
    else
    {
      uint64_t v15 = *(void *)(a5 + 8);
      uint64_t v16 = *(void *)(a1 + 16);
      v11(v12, v13, 0, v15, v16);
    }
  }
}

void WKContextSetHistoryClient::HistoryClient::didPerformClientRedirect(WKContextSetHistoryClient::HistoryClient *this, WebKit::WebProcessPool *a2, WebKit::WebPageProxy *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WebKit::WebFrameProxy *a6)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, void, void, void))*((void *)this + 4);
  if (!v6) {
    return;
  }
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v12 = *a4;
  if (*a4)
  {
    *(_DWORD *)v12 += 2;
    uint64_t v13 = (WebKit *)API::Object::newObject(0x20uLL, 24);
    *(void *)uint64_t v13 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v13);
    *(void *)uint64_t v13 = &unk_1EE9B53A8;
    int v15 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    *((void *)v13 + 2) = v12;
    *((void *)v13 + 3) = 0;
    if (v15) {
      *(_DWORD *)uint64_t v12 = v15;
    }
    else {
      WTF::StringImpl::destroy(v12, v14);
    }
    uint64_t v16 = *((void *)v13 + 1);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = *a5;
  if (!*a5)
  {
    v6(v10, v11, v16, 0, *((void *)a6 + 1), *((void *)this + 2));
    if (!v12) {
      return;
    }
    goto LABEL_12;
  }
  *(_DWORD *)v17 += 2;
  uint64_t v18 = API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v18 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v18);
  *(void *)uint64_t v18 = &unk_1EE9B53A8;
  int v20 = *(_DWORD *)v17;
  *(_DWORD *)v17 += 2;
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = 0;
  if (v20) {
    *(_DWORD *)uint64_t v17 = v20;
  }
  else {
    WTF::StringImpl::destroy(v17, v19);
  }
  v6(v10, v11, v16, *(void *)(v18 + 8), *((void *)a6 + 1), *((void *)this + 2));
  CFRelease(*(CFTypeRef *)(v18 + 8));
  if (v12)
  {
LABEL_12:
    uint64_t v21 = (const void *)*((void *)v13 + 1);
    CFRelease(v21);
  }
}

void WKContextSetHistoryClient::HistoryClient::didPerformServerRedirect(WKContextSetHistoryClient::HistoryClient *this, WebKit::WebProcessPool *a2, WebKit::WebPageProxy *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WebKit::WebFrameProxy *a6)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, void, void, void))*((void *)this + 5);
  if (!v6) {
    return;
  }
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v12 = *a4;
  if (*a4)
  {
    *(_DWORD *)v12 += 2;
    uint64_t v13 = (WebKit *)API::Object::newObject(0x20uLL, 24);
    *(void *)uint64_t v13 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v13);
    *(void *)uint64_t v13 = &unk_1EE9B53A8;
    int v15 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    *((void *)v13 + 2) = v12;
    *((void *)v13 + 3) = 0;
    if (v15) {
      *(_DWORD *)uint64_t v12 = v15;
    }
    else {
      WTF::StringImpl::destroy(v12, v14);
    }
    uint64_t v16 = *((void *)v13 + 1);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v17 = *a5;
  if (!*a5)
  {
    v6(v10, v11, v16, 0, *((void *)a6 + 1), *((void *)this + 2));
    if (!v12) {
      return;
    }
    goto LABEL_12;
  }
  *(_DWORD *)v17 += 2;
  uint64_t v18 = API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v18 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v18);
  *(void *)uint64_t v18 = &unk_1EE9B53A8;
  int v20 = *(_DWORD *)v17;
  *(_DWORD *)v17 += 2;
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = 0;
  if (v20) {
    *(_DWORD *)uint64_t v17 = v20;
  }
  else {
    WTF::StringImpl::destroy(v17, v19);
  }
  v6(v10, v11, v16, *(void *)(v18 + 8), *((void *)a6 + 1), *((void *)this + 2));
  CFRelease(*(CFTypeRef *)(v18 + 8));
  if (v12)
  {
LABEL_12:
    uint64_t v21 = (const void *)*((void *)v13 + 1);
    CFRelease(v21);
  }
}

void WKContextSetHistoryClient::HistoryClient::didUpdateHistoryTitle(WKContextSetHistoryClient::HistoryClient *this, WebKit::WebProcessPool *a2, WebKit::WebPageProxy *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WebKit::WebFrameProxy *a6)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, void, void, void))*((void *)this + 6);
  if (!v6) {
    return;
  }
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v12 = *a4;
  if (*a4) {
    *(_DWORD *)v12 += 2;
  }
  uint64_t v21 = v12;
  API::String::create(&v21, &v22);
  long long v14 = v21;
  int v15 = v22;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      if (v15) {
        goto LABEL_8;
      }
LABEL_13:
      uint64_t v16 = 0;
      goto LABEL_9;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v15) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v16 = *((void *)v15 + 1);
LABEL_9:
  uint64_t v17 = *a5;
  if (!*a5)
  {
    v6(v10, v11, v16, 0, *((void *)a6 + 1), *((void *)this + 2));
    if (!v15) {
      return;
    }
    goto LABEL_16;
  }
  *(_DWORD *)v17 += 2;
  uint64_t v18 = API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v18 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v18);
  *(void *)uint64_t v18 = &unk_1EE9B53A8;
  int v20 = *(_DWORD *)v17;
  *(_DWORD *)v17 += 2;
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = 0;
  if (v20) {
    *(_DWORD *)uint64_t v17 = v20;
  }
  else {
    WTF::StringImpl::destroy(v17, v19);
  }
  v6(v10, v11, v16, *(void *)(v18 + 8), *((void *)a6 + 1), *((void *)this + 2));
  CFRelease(*(CFTypeRef *)(v18 + 8));
  if (v15) {
LABEL_16:
  }
    CFRelease(*((CFTypeRef *)v15 + 1));
}

uint64_t WKContextSetHistoryClient::HistoryClient::populateVisitedLinks(uint64_t this, WebProcessPool *a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(this + 56);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

BOOL WKContextSetHistoryClient::HistoryClient::addsVisitedLinks(WKContextSetHistoryClient::HistoryClient *this)
{
  return *((void *)this + 7) != 0;
}

void *WKContextSetDownloadClient::LegacyDownloadClient::legacyDidStart(void *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t (*)(void, void, void))result[4];
  if (v2) {
    return (void *)v2(result[16], *(void *)(a2 + 8), result[3]);
  }
  return result;
}

void *WKContextSetDownloadClient::LegacyDownloadClient::didReceiveAuthenticationChallenge(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t (*)(void, void, void, void))result[5];
  if (v3) {
    return (void *)v3(result[16], *(void *)(a2 + 8), *(void *)(a3 + 8), result[3]);
  }
  return result;
}

void *WKContextSetDownloadClient::LegacyDownloadClient::didReceiveData(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t (*)(void, void, uint64_t, void))result[7];
  if (v3) {
    return (void *)v3(result[16], *(void *)(a2 + 8), a3, result[3]);
  }
  return result;
}

void WKContextSetDownloadClient::LegacyDownloadClient::decideDestinationWithSuggestedFilename(void *a1, uint64_t a2, const WebCore::ResourceResponse *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  unsigned int v9 = (void (*)(uint64_t, uint64_t, CFTypeRef, void))a1[6];
  if (v9)
  {
    uint64_t v11 = a1[16];
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
    if (API::URLResponse::URLResponse((API::URLResponse *)v13, a3))
    {
      v9(v11, v12, v13[1], a1[3]);
      CFRelease(v13[1]);
    }
    else
    {
      v9(v11, v12, 0, a1[3]);
    }
  }
  long long v14 = (uint64_t (*)(uint64_t, uint64_t, void, unsigned __int8 *, void))a1[9];
  if (!v14)
  {
    char v29 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v29);
    uint64_t v26 = v29;
    char v29 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    return;
  }
  unsigned __int8 v28 = 0;
  uint64_t v15 = a1[16];
  uint64_t v16 = *(void *)(a2 + 8);
  uint64_t v17 = *a4;
  if (*a4) {
    *(_DWORD *)v17 += 2;
  }
  unsigned __int8 v30 = v17;
  API::String::create(&v30, &v31);
  uint64_t v19 = v30;
  int v20 = v31;
  unsigned __int8 v30 = 0;
  uint64_t v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v18);
      if (v20) {
        goto LABEL_11;
      }
LABEL_23:
      uint64_t v21 = (void *)v14(v15, v16, 0, &v28, a1[3]);
      goto LABEL_12;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (!v20) {
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v21 = (void *)v14(v15, v16, *((void *)v20 + 1), &v28, a1[3]);
  CFRelease(*((CFTypeRef *)v20 + 1));
LABEL_12:
  int v22 = v28;
  if (v21)
  {
    [v21 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    uint64_t v27 = 0;
  }
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, v22 != 0, &v27);
  uint64_t v24 = v27;
  uint64_t v27 = 0;
  if (!v24)
  {
LABEL_17:
    if (!v21) {
      return;
    }
LABEL_25:
    CFRelease(*(CFTypeRef *)([v21 _apiObject] + 8));
    return;
  }
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v24, v23);
  if (v21) {
    goto LABEL_25;
  }
}

void WKContextSetDownloadClient::LegacyDownloadClient::didCreateDestination(WKContextSetDownloadClient::LegacyDownloadClient *this, WebKit::DownloadProxy *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (void (*)(uint64_t, uint64_t, void, void))*((void *)this + 10);
  if (v3)
  {
    uint64_t v5 = *((void *)this + 16);
    uint64_t v6 = *((void *)a2 + 1);
    CFTypeRef v7 = *a3;
    if (*a3) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v11 = v7;
    API::String::create(&v11, &v12);
    unsigned int v9 = v11;
    uint64_t v10 = v12;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v8);
        if (v10) {
          goto LABEL_8;
        }
        goto LABEL_11;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (v10)
    {
LABEL_8:
      v3(v5, v6, *((void *)v10 + 1), *((void *)this + 3));
      CFRelease(*((CFTypeRef *)v10 + 1));
      return;
    }
LABEL_11:
    v3(v5, v6, 0, *((void *)this + 3));
  }
}

void *WKContextSetDownloadClient::LegacyDownloadClient::didFinish(void *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t (*)(void, void, void))result[11];
  if (v2) {
    return (void *)v2(result[16], *(void *)(a2 + 8), result[3]);
  }
  return result;
}

void WKContextSetDownloadClient::LegacyDownloadClient::didFail(WKContextSetDownloadClient::LegacyDownloadClient *this, WebKit::DownloadProxy *a2, const WebCore::ResourceError *a3, API::Data *a4)
{
  uint64_t v5 = (void (*)(uint64_t, uint64_t, void, uint64_t))*((void *)this + 12);
  if (v5)
  {
    uint64_t v12 = v5;
    uint64_t v7 = *((void *)this + 16);
    uint64_t v8 = *((void *)a2 + 1);
    unsigned int v9 = (API::Error *)API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v9, a3))
    {
      v12(v7, v8, *((void *)v9 + 1), *((void *)this + 3));
      uint64_t v10 = (const void *)*((void *)v9 + 1);
      CFRelease(v10);
    }
    else
    {
      uint64_t v11 = *((void *)this + 3);
      v12(v7, v8, 0, v11);
    }
  }
}

void *WKContextSetDownloadClient::LegacyDownloadClient::legacyDidCancel(void *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t (*)(void, void, void))result[13];
  if (v2) {
    return (void *)v2(result[16], *(void *)(a2 + 8), result[3]);
  }
  return result;
}

void *WKContextSetDownloadClient::LegacyDownloadClient::processDidCrash(void *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t (*)(void, void, void))result[14];
  if (v2) {
    return (void *)v2(result[16], *(void *)(a2 + 8), result[3]);
  }
  return result;
}

uint64_t WKContextSetDownloadClient::LegacyDownloadClient::willSendRequest(void *a1, uint64_t a2, WebCore::ResourceRequestBase *this, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = (void (*)(uint64_t, uint64_t, void, void))a1[15];
  if (v7)
  {
    uint64_t v9 = a1[16];
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v11 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url(this);
    if (v11)
    {
      *(_DWORD *)v11 += 2;
      uint64_t v12 = API::Object::newObject(0x20uLL, 24);
      *(void *)uint64_t v12 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v12);
      *(void *)uint64_t v12 = &unk_1EE9B53A8;
      int v14 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 2;
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      if (v14) {
        *(_DWORD *)uint64_t v11 = v14;
      }
      else {
        WTF::StringImpl::destroy(v11, v13);
      }
      v7(v9, v10, *(void *)(v12 + 8), a1[3]);
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      v7(v9, v10, 0, a1[3]);
    }
  }
  uint64_t v15 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequestBase *))(*(void *)v15 + 16))(v15, this);
  uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 8);

  return v16(v15);
}

uint64_t WKDownloadGetTypeID()
{
  return 56;
}

uint64_t WKDownloadCopyRequest(String *a1)
{
  if (a1) {
    a1 = (String *)[(String *)a1 _apiObject];
  }
  uint64_t v1 = a1 + 9;
  uint64_t v2 = API::Object::newObject(0xD8uLL, 25);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(void *)uint64_t v2 = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v2 + 16), v1);
  return *(void *)(v2 + 8);
}

uint64_t WKDownloadCancel(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E0E58;
  v6[1] = a2;
  void v6[2] = a3;
  uint64_t v9 = v6;
  WebKit::DownloadProxy::cancel(v5, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

uint64_t WKDownloadGetOriginatingPage(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 288);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(void *)(v2 - 8);
  }
  else {
    return 0;
  }
}

uint64_t WKDownloadGetWasUserInitiated(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 312);
}

uint64_t WKDownloadSetClient(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9E0DC0;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      __break(1u);
    }
    long long v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[3];
    *(_OWORD *)(result + 48) = a2[2];
    *(_OWORD *)(result + 64) = v7;
    *(_OWORD *)(result + 16) = v5;
    *(_OWORD *)(result + 32) = v6;
  }
LABEL_8:
  uint64_t v8 = *(_DWORD **)(v3 + 48);
  *(void *)(v3 + 48) = result;
  if (v8)
  {
    if (v8[2] == 1)
    {
      uint64_t v9 = *(uint64_t (**)(_DWORD *))(*(void *)v8 + 8);
      return v9(v8);
    }
    else
    {
      --v8[2];
    }
  }
  return result;
}

uint64_t WKFeatureGetTypeID()
{
  return 57;
}

uint64_t WKFeatureCopyName(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 16);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  long long v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKFeatureCopyKey(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 24);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  long long v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKFeatureCopyDetails(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 32);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  long long v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKFeatureDefaultValue(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 42);
}

uint64_t WKFeatureIsHidden(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 43);
}

uint64_t WKFormSubmissionListenerGetTypeID()
{
  return 58;
}

uint64_t WKFormSubmissionListenerContinue(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFormSubmissionListenerProxy::continueSubmission((uint64_t)a1);
}

uint64_t WKFrameGetTypeID()
{
  return 59;
}

uint64_t WKFrameIsMainFrame(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 441);
}

uint64_t WKFrameGetFrameLoadState(void *a1)
{
  unsigned int v1 = *(_DWORD *)([a1 _apiObject] + 40);
  if (v1 >= 2) {
    return 2;
  }
  else {
    return v1;
  }
}

API::URL *WKFrameCopyProvisionalURL(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v2 = (const WTF::String *)(v1 + 88);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v4, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

API::URL *WKFrameCopyURL(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v2 = (const WTF::String *)(v1 + 48);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v4, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

API::URL *WKFrameCopyUnreachableURL(void *a1)
{
  if (a1) {
    uint64_t v1 = [a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 128);
  uint64_t v2 = (const WTF::String *)(v1 + 128);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v4, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKFrameCopyMIMEType(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKFrameCopyTitle(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKFrameGetPage(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(void *)(v2 - 8);
  }
  else {
    return 0;
  }
}

uint64_t WKFrameGetCertificateInfo()
{
  return 0;
}

uint64_t WKFrameCanProvideSource(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrameProxy::isDisplayingMarkupDocument((WebKit::WebFrameProxy *)a1);
}

uint64_t WKFrameCanShowMIMEType()
{
  return 0;
}

uint64_t WKFrameIsDisplayingStandaloneImageDocument(char *a1, const WTF::String *a2)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v2 = vars8;
  }
  uint64_t v3 = (WebCore::Image *)(a1 + 224);
  return WebCore::Image::supportsType(v3, a2);
}

uint64_t WKFrameIsDisplayingMarkupDocument(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrameProxy::isDisplayingMarkupDocument((WebKit::WebFrameProxy *)a1);
}

uint64_t WKFrameIsFrameSet()
{
  return 0;
}

uint64_t WKFrameCreateFrameHandle(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  uint64_t v2 = *(void *)(v1 + 272);
  uint64_t v3 = *(void *)(v1 + 280);
  uint64_t v4 = API::Object::newObject(0x28uLL, 11);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(void *)uint64_t v4 = &unk_1EE9B3E30;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  *(unsigned char *)(v4 + 32) = 0;
  return *(void *)(v4 + 8);
}

uint64_t WKFrameCreateFrameInfo()
{
  return 0;
}

uint64_t WKFrameGetMainResourceData(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E0E80;
  v6[1] = a3;
  void v6[2] = a2;
  uint64_t v8 = v6;
  WebKit::WebFrameProxy::getMainResourceData(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKFrameGetResourceData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = a2;
  if (a1)
  {
    uint64_t v7 = [a1 _apiObject];
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  if (a2) {
LABEL_3:
  }
    long long v6 = (void *)[v6 _apiObject];
LABEL_4:
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E0EA8;
  v8[1] = a4;
  _OWORD v8[2] = a3;
  uint64_t v10 = v8;
  WebKit::WebFrameProxy::getResourceData(v7, (uint64_t)v6, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKFrameGetWebArchive(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E0ED0;
  v6[1] = a3;
  void v6[2] = a2;
  uint64_t v8 = v6;
  WebKit::WebFrameProxy::getWebArchive(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKFrameHandleGetTypeID()
{
  return 11;
}

uint64_t WKFrameHandleGetFrameID(void *a1)
{
  return *(void *)([a1 _apiObject] + 16);
}

uint64_t WKFrameInfoGetTypeID()
{
  return 60;
}

uint64_t WKFrameInfoCreateFrameHandleRef(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::FrameInfo::handle((API::FrameInfo *)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKFrameInfoCopySecurityOrigin(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  v4[0] = 0;
  int v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v4, (uint64_t)a1 + 224);
  API::SecurityOrigin::create(&v3);
  if (v3) {
    uint64_t v1 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v5 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1EE9E0E38[v5])(&v3, v4);
  }
  return v1;
}

uint64_t WKFrameInfoGetIsMainFrame(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 16);
}

uint64_t WKFramePolicyListenerGetTypeID()
{
  return 61;
}

void WKFramePolicyListenerUse(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  WebKit::WebFramePolicyListenerProxy::use((uint64_t)a1, 0, 0);
}

void WKFramePolicyListenerUseInNewProcess(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  WebKit::WebFramePolicyListenerProxy::use((uint64_t)a1, 0, 1);
}

void WKFramePolicyListenerUseWithPolicies(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      uint64_t v4 = [a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
LABEL_4:

  WebKit::WebFramePolicyListenerProxy::use(v3, v4, 0);
}

void WKFramePolicyListenerUseInNewProcessWithPolicies(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      uint64_t v4 = [a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
LABEL_4:

  WebKit::WebFramePolicyListenerProxy::use(v3, v4, 1);
}

WTF *WKFramePolicyListenerDownload(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFramePolicyListenerProxy::download((WTF *)a1);
}

WTF *WKFramePolicyListenerIgnore(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFramePolicyListenerProxy::ignore((WTF *)a1, 0);
}

uint64_t WKGeolocationManagerGetTypeID()
{
  return 64;
}

uint64_t WKGeolocationManagerSetProvider(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(void *)(result + 40) = 0;
  *(void *)uint64_t result = &unk_1EE9D96F8;
  if (a2)
  {
    int v5 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      *(void *)(result + 40) = *((void *)a2 + 4);
    }
    else
    {
      if (v5 > 0) {
        goto LABEL_10;
      }
      if (v5)
      {
        __break(1u);
        return result;
      }
      long long v6 = *a2;
      long long v7 = a2[1];
    }
    *(_OWORD *)(result + 8) = v6;
    *(_OWORD *)(result + 24) = v7;
  }
LABEL_10:
  uint64_t v8 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = result;
  if (v8)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
  return result;
}

uint64_t WKGeolocationManagerProviderDidChangePosition(void *a1, void *a2, const WTF::StringImpl *a3)
{
  if (a1)
  {
    uint64_t v4 = (WebKit::WebGeolocationManagerProxy *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      int v5 = (WebKit::WebGeolocationPosition *)[a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  int v5 = 0;
LABEL_4:

  return WebKit::WebGeolocationManagerProxy::providerDidChangePosition(v4, v5, a3);
}

WTF::StringImpl *WKGeolocationManagerProviderDidFailToDeterminePosition(void *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  int v5 = 0;
  WebKit::WebGeolocationManagerProxy::providerDidFailToDeterminePosition((WebKit::WebGeolocationManagerProxy *)a1, (const WTF::String *)&v5, a3);
  uint64_t result = v5;
  int v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKGeolocationManagerProviderDidFailToDeterminePositionWithErrorMessage(void *a1, void *a2, const WTF::StringImpl *a3)
{
  if (a1)
  {
    uint64_t v4 = (WebKit::WebGeolocationManagerProxy *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  long long v7 = 0;
LABEL_4:
  WebKit::WebGeolocationManagerProxy::providerDidFailToDeterminePosition(v4, (const WTF::String *)&v7, a3);
  uint64_t result = v7;
  long long v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKDownloadSetClient::DownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a3 + 8);
    uint64_t v6 = *(void *)(a1 + 24);
    return (WTF::StringImpl *)v3(v4, v5, v6);
  }
  else
  {
    uint64_t v8 = *(void *)(a3 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v12);
    CFTypeRef cf = 0;
    WebKit::AuthenticationDecisionListener::completeChallenge(v8);
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WKDownloadSetClient::DownloadClient::didReceiveData(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void))(result + 56);
  if (v5) {
    return v5(*(void *)(a2 + 8), a3, a4, a5, *(void *)(result + 24));
  }
  return result;
}

void WKDownloadSetClient::DownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, const WebCore::ResourceResponse *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, void))(a1 + 48);
  if (!v6)
  {
    uint64_t v26 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v26);
    unsigned int v23 = v26;
    uint64_t v26 = 0;
    if (!v23) {
      return;
    }
LABEL_23:
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
    return;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
  if (API::URLResponse::URLResponse((API::URLResponse *)v11, a3)) {
    CFTypeRef v12 = v11[1];
  }
  else {
    CFTypeRef v12 = 0;
  }
  uint64_t v13 = *a4;
  if (*a4) {
    *(_DWORD *)v13 += 2;
  }
  uint64_t v27 = v13;
  API::String::create(&v27, &v28);
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  uint64_t v27 = 0;
  unsigned __int8 v28 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v14);
      if (v16) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (v16)
  {
LABEL_10:
    uint64_t v17 = *((void *)v16 + 1);
    goto LABEL_11;
  }
LABEL_26:
  uint64_t v17 = 0;
LABEL_11:
  uint64_t v18 = (void *)v6(v10, v12, v17, *(void *)(a1 + 24));
  if (v18)
  {
    uint64_t v19 = [v18 _apiObject];
    if (!v16) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v19 = 0;
  if (v16) {
LABEL_13:
  }
    CFRelease(*((CFTypeRef *)v16 + 1));
LABEL_14:
  if (v11) {
    CFRelease(v11[1]);
  }
  if (!v19)
  {
    uint64_t v25 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v25);
    unsigned int v23 = v25;
    uint64_t v25 = 0;
    if (!v23) {
      return;
    }
    goto LABEL_23;
  }
  WTF::String::isolatedCopy();
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v24);
  uint64_t v21 = v24;
  uint64_t v24 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v19 + 8));
}

uint64_t WKDownloadSetClient::DownloadClient::didFinish(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(result + 64);
  if (v2) {
    return v2(*(void *)(a2 + 8), *(void *)(result + 24));
  }
  return result;
}

void WKDownloadSetClient::DownloadClient::didFail(WKDownloadSetClient::DownloadClient *this, WebKit::DownloadProxy *a2, const WebCore::ResourceError *a3, API::Data *a4)
{
  uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t, void))*((void *)this + 9);
  if (!v4) {
    return;
  }
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = (API::Error *)API::Object::newObject(0x60uLL, 10);
  if (API::Error::Error(v9, a3))
  {
    uint64_t v10 = *((void *)v9 + 1);
    if (a4)
    {
LABEL_4:
      uint64_t v11 = *((void *)a4 + 1);
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (a4) {
      goto LABEL_4;
    }
  }
  uint64_t v11 = 0;
LABEL_5:
  v4(v8, v10, v11, *((void *)this + 3));
  if (v9)
  {
    CFTypeRef v12 = (const void *)*((void *)v9 + 1);
    CFRelease(v12);
  }
}

WTF::StringImpl *WKDownloadSetClient::DownloadClient::processDidCrash(WKDownloadSetClient::DownloadClient *this, WebKit::DownloadProxy *a2)
{
  uint64_t v4 = *(void *)(MEMORY[0x1E4FB64F8] + 8);
  if (v4)
  {
    if (v4 == 1)
    {
      uint64_t v5 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v5 = v15;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = WebCore::ResourceRequestBase::url((WebKit::DownloadProxy *)((char *)a2 + 72));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v7 = v15;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  uint64_t v15 = v5;
  uint64_t v8 = *(WTF::StringImpl **)v6;
  if (*(void *)v6) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v16 = v8;
  long long v9 = *(_OWORD *)(v6 + 24);
  long long v17 = *(_OWORD *)(v6 + 8);
  long long v18 = v9;
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v19 = v7;
  int v20 = 0;
  __int16 v21 = 1;
  CFTypeRef cf = 0;
  char v23 = 1;
  (*(void (**)(WKDownloadSetClient::DownloadClient *, WebKit::DownloadProxy *, WTF::StringImpl **, void))(*(void *)this + 72))(this, a2, &v15, 0);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  CFTypeRef v12 = v19;
  uint64_t v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v16;
  uint64_t v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (!result)
  {
LABEL_23:
    if (!v7) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_23;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v7) {
    goto LABEL_28;
  }
LABEL_26:
  if (*(_DWORD *)v7 == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v10);
    if (!v5) {
      return result;
    }
    goto LABEL_31;
  }
  *(_DWORD *)v7 -= 2;
LABEL_28:
  if (!v5) {
    return result;
  }
LABEL_31:
  if (*(_DWORD *)v5 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v10);
  }
  *(_DWORD *)v5 -= 2;
  return result;
}

void WKDownloadSetClient::DownloadClient::willSendRequest(uint64_t a1, uint64_t a2, const String *a3, const WebCore::ResourceResponse *a4, uint64_t *a5)
{
  long long v7 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, void))(a1 + 32);
  if (!v7) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  CFTypeRef v11 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
  if (API::URLResponse::URLResponse((API::URLResponse *)v11, a4)) {
    CFTypeRef v12 = v11[1];
  }
  else {
    CFTypeRef v12 = 0;
  }
  uint64_t v13 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
  CFTypeRef *v13 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v13);
  CFTypeRef *v13 = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest(v13 + 2, a3);
  char v14 = v7(v10, v12, v13[1], *(void *)(a1 + 24));
  CFRelease(v13[1]);
  if (v11) {
    CFRelease(v11[1]);
  }
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v19);
    uint64_t v17 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 16))(v17, v19);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    CFTypeRef v18 = cf;
    CFTypeRef cf = 0;
    if (v18) {
      CFRelease(v18);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v19);
  }
  else
  {
LABEL_7:
    uint64_t v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, const String *))(*(void *)v15 + 16))(v15, a3);
    uint64_t v16 = *(void (**)(uint64_t))(*(void *)v15 + 8);
    v16(v15);
  }
}

uint64_t WTF::Detail::CallableWrapper<WKDownloadCancel::$_0,void,API::Data *>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(result + 16);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, *(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKFrameGetMainResourceData::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 16))(v2, 0, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKFrameGetResourceData::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 16))(v2, 0, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKFrameGetWebArchive::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 16))(v2, 0, *(void *)(a1 + 8));
}

uint64_t WKGeolocationPermissionRequestGetTypeID()
{
  return 65;
}

uint64_t WKGeolocationPermissionRequestAllow(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)([a1 _apiObject] + 16) + 16);

  return v1();
}

uint64_t WKGeolocationPermissionRequestDeny(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)([a1 _apiObject] + 16) + 16);

  return v1();
}

uint64_t WKGeolocationPositionGetTypeID()
{
  return 68;
}

uint64_t WKGeolocationPositionCreate(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = API::Object::newObject(0x80uLL, 68);
  *(void *)uint64_t v8 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v8);
  *(void *)uint64_t v8 = &unk_1EE9D15C8;
  *(double *)(v8 + 16) = a1;
  *(double *)(v8 + 24) = a2;
  *(double *)(v8 + 32) = a3;
  *(double *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = 0;
  *(unsigned char *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(unsigned char *)(v8 + 72) = 0;
  *(void *)(v8 + 80) = 0;
  *(unsigned char *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = 0;
  *(unsigned char *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(unsigned char *)(v8 + 1++*(_DWORD *)(this + 20) = 0;
  return *(void *)(v8 + 8);
}

uint64_t WKGeolocationPositionCreate_c(int a1, int a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  char v17 = a5;
  char v18 = a4;
  char v19 = a3;
  char v20 = a2;
  char v21 = a1;
  if (!a1) {
    a10 = 0.0;
  }
  if (!a2) {
    a11 = 0.0;
  }
  if (!a3) {
    a12 = 0.0;
  }
  if (!a4) {
    a13 = 0.0;
  }
  if (!a5) {
    a14 = 0.0;
  }
  uint64_t v30 = API::Object::newObject(0x80uLL, 68);
  *(void *)uint64_t v30 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v30);
  *(void *)uint64_t v30 = &unk_1EE9D15C8;
  *(double *)(v30 + 16) = a6;
  *(double *)(v30 + 24) = a7;
  *(double *)(v30 + 32) = a8;
  *(double *)(v30 + 40) = a9;
  *(double *)(v30 + 48) = a10;
  *(unsigned char *)(v30 + 56) = v21;
  *(double *)(v30 + 64) = a11;
  *(unsigned char *)(v30 + 72) = v20;
  *(double *)(v30 + 80) = a12;
  *(unsigned char *)(v30 + 88) = v19;
  *(double *)(v30 + 96) = a13;
  *(unsigned char *)(v30 + 104) = v18;
  *(double *)(v30 + 112) = a14;
  *(unsigned char *)(v30 + 1++*(_DWORD *)(this + 20) = v17;
  return *(void *)(v30 + 8);
}

uint64_t WKGeolocationPositionCreate_b(int a1, int a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  return WKGeolocationPositionCreate_c(a1, a2, a3, a4, 0, a5, a6, a7, a8, a9, a10, a11, a12, 0.0);
}

uint64_t WKHTTPCookieStoreGetTypeID()
{
  return 66;
}

uint64_t WKHTTPCookieStoreDeleteAllCookies(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E0EF8;
  v6[1] = a2;
  void v6[2] = a3;
  uint64_t v8 = v6;
  API::HTTPCookieStore::deleteAllCookies(v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKHTTPCookieStoreSetHTTPCookieAcceptPolicy(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v7 = [a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  if (a2 >= 4) {
    LOBYTE(a2) = 0;
  }
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E0F20;
  v8[1] = a3;
  _OWORD v8[2] = a4;
  uint64_t v10 = v8;
  API::HTTPCookieStore::setHTTPCookieAcceptPolicy(v7, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKHitTestResultGetTypeID()
{
  return 67;
}

uint64_t WKHitTestResultCopyAbsoluteImageURL(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 16);
  if (!v1) {
    return 0;
  }
  *(_DWORD *)v1 += 2;
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)uint64_t v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

uint64_t WKHitTestResultCopyAbsolutePDFURL(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 24);
  if (!v1) {
    return 0;
  }
  *(_DWORD *)v1 += 2;
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)uint64_t v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

uint64_t WKHitTestResultCopyAbsoluteLinkURL(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 32);
  if (!v1) {
    return 0;
  }
  *(_DWORD *)v1 += 2;
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)uint64_t v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

uint64_t WKHitTestResultCopyAbsoluteMediaURL(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 40);
  if (!v1) {
    return 0;
  }
  *(_DWORD *)v1 += 2;
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)uint64_t v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

uint64_t WKHitTestResultCopyLinkLabel(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 48);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  uint64_t v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKHitTestResultCopyLinkTitle(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 56);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  uint64_t v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKHitTestResultCopyLookupText(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 448);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  uint64_t v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

uint64_t WKHitTestResultIsContentEditable(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 80);
}

double WKHitTestResultGetElementBoundingBox(void *a1)
{
  return (double)*(int *)([a1 _apiObject] + 84);
}

uint64_t WKIconDatabaseGetTypeID()
{
  return 70;
}

uint64_t WKIconDatabaseCopyIconURLForPageURL()
{
  return 0;
}

uint64_t WKIconDatabaseCopyIconDataForPageURL()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetTypeID()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetOriginKey()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetCreationTimeKey()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetModificationTimeKey()
{
  return 0;
}

uint64_t WKMediaKeySystemPermissionCallbackGetTypeID()
{
  return 130;
}

uint64_t WKMediaKeySystemPermissionCallbackComplete(void *a1, uint64_t a2)
{
  uint64_t v3 = [a1 _apiObject];
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WTF::Detail::CallableWrapper<WKHTTPCookieStoreDeleteAllCookies::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKHTTPCookieStoreSetHTTPCookieAcceptPolicy::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 16);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t WKMessageListenerGetTypeID()
{
  return 75;
}

void WKMessageListenerSendReply(void *a1, CFTypeRef *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2)
  {
LABEL_3:
    uint64_t v2 = (CFTypeRef *)[(CFTypeRef *)v2 _apiObject];
    CFRetain(v2[1]);
  }
LABEL_4:
  uint64_t v5 = v2;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()((uint64_t *)(v3 + 16), (uint64_t *)&v5);
  uint64_t v4 = (uint64_t)v5;
  uint64_t v5 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

WTF::StringImpl *WKAddMockMediaDevice(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (a4) {
    [a4 _apiObject];
  }
  WTF::String::isolatedCopy();
  LODWORD(v50) = 44100;
  int v57 = 0;
  if (!MEMORY[0x19972E990](v41, "camera", 6))
  {
    if (MEMORY[0x19972E990](v41, "screen", 6))
    {
      LOBYTE(v42) = 0;
      *(_OWORD *)uint64_t v43 = xmmword_1994F74B0;
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9E0F38[v57])(&v40, &v50);
      int v57 = -1;
      LOBYTE(v50) = (_BYTE)v42;
      WebCore::Color::Color();
      int v52 = v43[1];
      int v57 = 3;
      if (((unint64_t)v43[0] & 0x8000000000000) != 0)
      {
        uint64_t v32 = (unsigned int *)((unint64_t)v43[0] & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v43[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v31);
          if (!a5) {
            goto LABEL_57;
          }
          goto LABEL_49;
        }
      }
    }
    else if (MEMORY[0x19972E990](v41, "speaker", 7))
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9E0F38[v57])(&v42, &v50);
      uint64_t v50 = 0;
      int v51 = 44100;
      int v57 = 1;
    }
    else if (!MEMORY[0x19972E990](v41, "microphone", 10))
    {
      goto LABEL_73;
    }
    if (!a5) {
      goto LABEL_57;
    }
    goto LABEL_49;
  }
  int v39 = a3;
  int v42 = (WTF::StringImpl *)0x403E000000000000;
  LOBYTE(v43[0]) = 1;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v10 = (void *)v9;
  size_t v11 = 0;
  for (uint64_t i = 0; i != 2; ++i)
  {
    *(_OWORD *)(v9 + v11) = xmmword_1994F74D0[v11 / 0x10];
    v11 += 16;
  }
  uint64_t v14 = WTF::fastMalloc((WTF *)0x30);
  uint64_t v44 = 1;
  v43[1] = (WTF::StringImpl *)v14;
  *(void *)uint64_t v14 = 0x1E000000280;
  *(void *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + ++*(_DWORD *)(this + 20) = 2;
  *(void *)(v14 + 8) = 0;
  if (v11)
  {
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(v14 + 16) = 2;
    *(void *)(v14 + 8) = v15;
    memcpy(v15, v10, v11);
  }
  *(_OWORD *)(v14 + 24) = xmmword_1994F74C0;
  *(unsigned char *)(v14 + 40) = 0;
  ++HIDWORD(v44);
  WTF::fastFree((WTF *)v10, v13);
  uint64_t v45 = 0x11040000000000FFLL;
  LODWORD(v47) = 1;
  long long v46 = (WTF *)WTF::fastMalloc((WTF *)1);
  *(unsigned char *)long long v46 = 0;
  HIDWORD(v47) = 1;
  __int16 v48 = 0;
  if (a5)
  {
    char v17 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"facingMode", v16);
    ItemForKey = (void *)WKDictionaryGetItemForKey(a5, v17);
    if (ItemForKey && WKStringIsEqualToUTF8CString(ItemForKey, (WTF::String *)"unknown")) {
      LOBYTE(v43[0]) = 0;
    }
    char v20 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"fillColor", v19);
    char v21 = (void *)WKDictionaryGetItemForKey(a5, v20);
    if (v21 && WKStringIsEqualToUTF8CString(v21, (WTF::String *)"green"))
    {
      uint64_t v40 = 0x1104000000FF00FFLL;
      WebCore::Color::operator=();
    }
    if (v20) {
      CFRelease(*(CFTypeRef *)([v20 _apiObject] + 8));
    }
    if (v17) {
      CFRelease(*(CFTypeRef *)([v17 _apiObject] + 8));
    }
  }
  if (v57 != -1)
  {
    if (v57 == 2)
    {
      uint64_t v50 = v42;
      LOBYTE(v51) = v43[0];
      int v22 = v52;
      if (HIDWORD(v53))
      {
        uint64_t v23 = 48 * HIDWORD(v53);
        uint64_t v24 = (char *)v52 + 8;
        do
        {
          uint64_t v25 = *(WTF **)v24;
          if (*(void *)v24)
          {
            *(void *)uint64_t v24 = 0;
            *((_DWORD *)v24 + 2) = 0;
            WTF::fastFree(v25, v16);
          }
          v24 += 48;
          v23 -= 48;
        }
        while (v23);
        int v22 = v52;
      }
      if (v22)
      {
        int v52 = 0;
        LODWORD(v53) = 0;
        WTF::fastFree(v22, v16);
      }
      int v52 = v43[1];
      uint64_t v26 = v44;
      v43[1] = 0;
      uint64_t v44 = 0;
      uint64_t v53 = v26;
      WebCore::Color::operator=();
      unsigned __int8 v28 = v54;
      if (v54)
      {
        int v54 = 0;
        LODWORD(v55) = 0;
        WTF::fastFree(v28, v27);
      }
      int v54 = v46;
      uint64_t v29 = v47;
      long long v46 = 0;
      uint64_t v47 = 0;
      uint64_t v55 = v29;
      __int16 v56 = v48;
      goto LABEL_39;
    }
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1EE9E0F38[v57])(&v40, &v50);
  }
  int v57 = -1;
  std::__variant_detail::__alt<2ul,WebCore::MockCameraProperties>::__alt[abi:sn180100]<WebCore::MockCameraProperties>((uint64_t)&v50, (uint64_t *)&v42);
  int v57 = 2;
  uint64_t v30 = v46;
  if (v46)
  {
    long long v46 = 0;
    LODWORD(v47) = 0;
    WTF::fastFree(v30, v27);
  }
LABEL_39:
  if ((v45 & 0x8000000000000) != 0)
  {
    int v38 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v38);
      WTF::fastFree((WTF *)v38, v27);
    }
  }
  WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43[1], v27);
  a3 = v39;
  if (!a5) {
    goto LABEL_57;
  }
LABEL_49:
  uint64_t v33 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"invalid", (const char *)v31);
  uint64_t v34 = (void *)WKDictionaryGetItemForKey(a5, v33);
  if (v34)
  {
    if (WKStringIsEqualToUTF8CString(v34, (WTF::String *)"true")) {
      LOBYTE(a5) = 2;
    }
    else {
      LOBYTE(a5) = 0;
    }
    if (!v33) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  LOBYTE(a5) = 0;
  if (v33) {
LABEL_56:
  }
    CFRelease(*(CFTypeRef *)(objc_msgSend(v33, "_apiObject", v39) + 8));
LABEL_57:
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  LOBYTE(v43[1]) = (_BYTE)a5;
  LOBYTE(v44) = 0;
  int v49 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>>((uint64_t)&v44, (uint64_t)&v50);
  WebKit::WebProcessPool::addMockMediaDevice((WebKit::WebProcessPool *)a1, (uint64_t)&v42);
  if (v49 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EE9E0F38[v49])(&v40, &v44);
  }
  int v49 = -1;
  uint64_t v35 = v43[0];
  v43[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v31);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  uint64_t v36 = v42;
  int v42 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v31);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
LABEL_73:
  if (v57 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9E0F38[v57])(&v42, &v50);
  }
  uint64_t result = v41;
  int v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v31);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WKClearMockMediaDevices(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebProcessPool::clearMockMediaDevices((WebKit::WebProcessPool *)a1);
}

WTF::StringImpl *WKRemoveMockMediaDevice(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebProcessPool *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::removeMockMediaDevice(v3, (const WTF::String *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WKResetMockMediaDevices(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebProcessPool::resetMockMediaDevices((WebKit::WebProcessPool *)a1);
}

WTF::StringImpl *WKSetMockMediaDeviceIsEphemeral(void *a1, void *a2, WTF::String *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebProcessPool *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::setMockMediaDeviceIsEphemeral(v5, (const WTF::String *)&v8, a3);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKNavigationActionGetTypeID()
{
  return 77;
}

BOOL WKNavigationActionShouldPerformDownload(void *a1)
{
  return *(void *)([a1 _apiObject] + 376) != 0;
}

uint64_t WKNavigationActionCopyRequest(String *a1)
{
  if (a1) {
    a1 = (String *)[(String *)a1 _apiObject];
  }
  uint64_t v1 = a1 + 5;
  uint64_t v2 = API::Object::newObject(0xD8uLL, 25);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(void *)uint64_t v2 = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v2 + 16), v1);
  return *(void *)(v2 + 8);
}

BOOL WKNavigationActionGetShouldOpenExternalSchemes(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 369) - 1 < 2;
}

uint64_t WKNavigationActionCopyTargetFrameInfo(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  if (!v1) {
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v1 + 8));
  return *(void *)(v1 + 8);
}

uint64_t WKNavigationActionGetNavigationType(void *a1)
{
  unsigned int v1 = *(unsigned __int8 *)([a1 _apiObject] + 304);
  if (v1 >= 5) {
    return 5;
  }
  else {
    return v1;
  }
}

uint64_t WKNavigationDataGetTypeID()
{
  return 78;
}

uint64_t WKNavigationDataCopyTitle(void *a1)
{
  unsigned int v1 = *(WTF::StringImpl **)([a1 _apiObject] + 24);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  uint64_t v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

API::URL *WKNavigationDataCopyURL(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  unsigned int v1 = (const WTF::String *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 32));
  if (!*(void *)v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v3, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKNavigationDataCopyNavigationDestinationURL(void *a1)
{
  unsigned int v1 = *(WTF::StringImpl **)([a1 _apiObject] + 16);
  if (!v1) {
    return 0;
  }
  *(_DWORD *)v1 += 2;
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)unsigned int v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

uint64_t WKNavigationDataCopyOriginalRequest(String *a1)
{
  if (a1) {
    a1 = (String *)[(String *)a1 _apiObject];
  }
  unsigned int v1 = a1 + 4;
  uint64_t v2 = API::Object::newObject(0xD8uLL, 25);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(void *)uint64_t v2 = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v2 + 16), v1);
  return *(void *)(v2 + 8);
}

uint64_t WKNavigationGetTypeID()
{
  return 76;
}

uint64_t WKNavigationResponseGetTypeID()
{
  return 79;
}

uint64_t WKNavigationResponseCanShowMIMEType(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 480);
}

API::URLResponse *WKNavigationResponseCopyResponse(char *a1)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  unsigned int v1 = (const WebCore::ResourceResponse *)(a1 + 224);
  uint64_t v2 = (API::URLResponse *)API::Object::newObject(0x110uLL, 26);
  uint64_t result = API::URLResponse::URLResponse(v2, v1);
  if (result) {
    return (API::URLResponse *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKNavigationResponseCopyFrameInfo(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 16);
  CFRetain(*(CFTypeRef *)(v1 + 8));
  return *(void *)(v1 + 8);
}

uint64_t WKNotificationGetTypeID()
{
  return 80;
}

uint64_t WKNotificationCopyTitle(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKNotificationCopyBody(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKNotificationCopyIconURL(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKNotificationCopyTag(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKNotificationCopyLang(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKNotificationCopyDir(void *a1)
{
  unint64_t v2 = *(char *)([a1 _apiObject] + 112);
  if (v2 >= 3)
  {
    uint64_t result = 79;
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = (WTF::String *)off_1E5813AA8[v2];
    return WKStringCreateWithUTF8CString(v3, v1);
  }
  return result;
}

uint64_t WKNotificationGetSecurityOrigin(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 288);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKNotificationGetID(void *a1)
{
  return *(void *)([a1 _apiObject] + 16);
}

uint64_t WKNotificationCopyDataStoreIdentifier(_OWORD *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1) {
    a1 = (_OWORD *)[a1 _apiObject];
  }
  long long v1 = a1[20];
  v8[0] = a1[19];
  v8[1] = v1;
  if (!(_BYTE)v1) {
    return 0;
  }
  WTF::UUID::toString((uint64_t *)&v6, (WTF::UUID *)v8);
  API::String::create(&v7);
  if (v7) {
    uint64_t v3 = *((void *)v7 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

uint64_t WKNotificationCopyCoreIDForTesting(_OWORD *a1)
{
  if (a1) {
    a1 = (_OWORD *)[a1 _apiObject];
  }
  long long v2 = a1[11];
  API::Data::create((WTF *)0x10, &v2, &v3);
  if (v3) {
    return *((void *)v3 + 1);
  }
  else {
    return 0;
  }
}

BOOL WKNotificationGetIsPersistent(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 128);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t WKNotificationGetAlert(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  if (*(_WORD *)(v1 + 272)) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 4;
  }
  if (*(unsigned __int16 *)(v1 + 272) < 0x100u) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t WKNotificationManagerGetTypeID()
{
  return 81;
}

uint64_t WKNotificationManagerSetProvider(void *a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + 72) = 0;
  *(void *)uint64_t v4 = &unk_1EE9E3D10;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      __break(1u);
    }
    *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 48);
    *(void *)(v4 + 72) = *(void *)(a2 + 64);
    *(_OWORD *)(v4 + 40) = v6;
    *(_OWORD *)(v4 + 56) = v7;
    *(_OWORD *)(v4 + 24) = v5;
  }
LABEL_8:
  uint64_t v10 = v4;
  WebKit::WebNotificationManagerProxy::setProvider(v3, &v10);
  uint64_t result = v10;
  if (v10)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)v10 + 8);
    return v9();
  }
  return result;
}

uint64_t WKNotificationManagerProviderDidShowNotification(void *a1, uint64_t a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  if (a2 == -1)
  {
    uint64_t result = 151;
    __break(0xC471u);
  }
  else
  {
    return WebKit::WebNotificationManagerProxy::providerDidShowNotification((uint64_t)a1, a2);
  }
  return result;
}

void WKNotificationManagerProviderDidClickNotification(void *a1, uint64_t a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  if (a2 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    WebKit::WebNotificationManagerProxy::providerDidClickNotification((uint64_t)a1, a2);
  }
}

void WKNotificationManagerProviderDidClickNotification_b(void *a1, void *a2)
{
  uint64_t v3 = [a2 _apiObject];
  if (*(void *)(v3 + 24) == 16)
  {
    uint64_t v4 = *(long long **)(v3 + 16);
    if (a1) {
      uint64_t v5 = [a1 _apiObject];
    }
    else {
      uint64_t v5 = 0;
    }
    long long v8 = *v4;
    long long v6 = (WebKit *)WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(v5 + 48), (uint64_t *)&v8);
    WebKit::dispatchDidClickNotification(v6, v7);
  }
}

void WKNotificationManagerProviderDidCloseNotifications(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebNotificationManagerProxy *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      uint64_t v4 = (API::Array *)[a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
LABEL_4:

  WebKit::WebNotificationManagerProxy::providerDidCloseNotifications(v3, v4);
}

WTF::StringImpl *WKNotificationManagerProviderDidUpdateNotificationPolicy(void *a1, void *a2, int a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebNotificationManagerProxy *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      long long v6 = (const API::SecurityOrigin *)[a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  long long v6 = 0;
LABEL_4:

  return WebKit::WebNotificationManagerProxy::providerDidUpdateNotificationPolicy(v5, v6, a3);
}

WebKit::WebNotificationManagerProxy *WKNotificationManagerProviderDidRemoveNotificationPolicies(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebNotificationManagerProxy *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      uint64_t v4 = (API::Array *)[a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
LABEL_4:

  return WebKit::WebNotificationManagerProxy::providerDidRemoveNotificationPolicies(v3, v4);
}

uint64_t WKNotificationManagerGetSharedServiceWorkerNotificationManager(WebKit::WebNotificationManagerProxy *a1)
{
  return *((void *)WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(a1) + 1);
}

uint64_t WKNotificationPermissionRequestGetTypeID()
{
  return 82;
}

uint64_t WKNotificationPermissionRequestAllow(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::NotificationPermissionRequest::didReceiveDecision((uint64_t)a1);
}

uint64_t WebKit::NotificationPermissionRequest::didReceiveDecision(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (v1)
  {
    *(void *)(this + 16) = 0;
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return this;
}

uint64_t WKNotificationPermissionRequestDeny(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::NotificationPermissionRequest::didReceiveDecision((uint64_t)a1);
}

uint64_t WKOpenPanelParametersGetTypeID()
{
  return 83;
}

uint64_t WKOpenPanelParametersGetAllowsDirectories(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 16);
}

uint64_t WKOpenPanelParametersGetAllowsMultipleFiles(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 17);
}

uint64_t WKOpenPanelParametersCopyAcceptedMIMETypes(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::Array::createStringArray((uint64_t)a1 + 24, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKOpenPanelParametersCopyAcceptedFileExtensions(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::Array::createStringArray((uint64_t)a1 + 40, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKOpenPanelParametersCopyAllowedMIMETypes(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::OpenPanelParameters::allowedMIMETypes(&v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKOpenPanelParametersCopyCapture()
{
  return 0;
}

BOOL WKOpenPanelParametersGetMediaCaptureType(void *a1)
{
  return *(unsigned char *)([a1 _apiObject] + 72) != 0;
}

uint64_t WKOpenPanelParametersCopySelectedFileNames(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  API::Array::createStringArray((uint64_t)a1 + 56, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKOpenPanelResultListenerGetTypeID()
{
  return 61;
}

uint64_t WKOpenPanelResultListenerChooseMediaFiles(void *a1, void *a2, void *a3, void *a4)
{
  if (a1) {
    uint64_t v7 = [a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  filePathsFromFileURLs((const API::Array *)v14, [a2 _apiObject]);
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (a4) {
    uint64_t v9 = [a4 _apiObject];
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(WTF **)(v7 + 16);
  if (v10) {
    WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(v10, (uint64_t)v14, &v13, v9);
  }
  size_t v11 = v13;
  uint64_t v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
}

void filePathsFromFileURLs(const API::Array *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 28);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v2));
      unint64_t v6 = 0;
      *((_DWORD *)a1 + 2) = v2;
      *(void *)a1 = v5;
      do
      {
        uint64_t v7 = API::Array::at<API::URL>(a2, v6);
        if (v7)
        {
          uint64_t v8 = v7;
          CFRetain(*(CFTypeRef *)(v7 + 8));
          WTF::URL::URL((uint64_t)v16, (WTF::StringImpl **)(v8 + 16));
          WTF::URL::fileSystemPath((uint64_t *)&v17, (WTF::URL *)v16);
          uint64_t v10 = *((unsigned int *)a1 + 3);
          if (v10 == *((_DWORD *)a1 + 2))
          {
            uint64_t v15 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, v10 + 1, (unint64_t)&v17);
            uint64_t v10 = *((unsigned int *)a1 + 3);
            uint64_t v11 = *(void *)a1;
            CFTypeRef v12 = *v15;
            *uint64_t v15 = 0;
          }
          else
          {
            uint64_t v11 = *(void *)a1;
            CFTypeRef v12 = v17;
            char v17 = 0;
          }
          *(void *)(v11 + 8 * v10) = v12;
          *((_DWORD *)a1 + 3) = v10 + 1;
          uint64_t v13 = v17;
          char v17 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v9);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          uint64_t v14 = v16[0];
          v16[0] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v9);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          CFRelease(*(CFTypeRef *)(v8 + 8));
        }
        ++v6;
      }
      while (v2 != v6);
    }
  }
}

uint64_t WKOpenPanelResultListenerChooseFiles(void *a1, void *a2, void *a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  filePathsFromFileURLs((const API::Array *)v12, [a2 _apiObject]);
  if (a3) {
    unint64_t v6 = (unsigned int *)[a3 _apiObject];
  }
  else {
    unint64_t v6 = 0;
  }
  API::Array::toStringVector(v6, (uint64_t)v11);
  uint64_t v8 = *(WTF **)(v5 + 16);
  if (v8) {
    WebKit::WebPageProxy::didChooseFilesForOpenPanel(v8, (uint64_t)v12, (uint64_t)v11);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v7);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
}

void WKOpenPanelResultListenerCancel(void *a1)
{
  uint64_t v1 = *(WebKit::WebPageProxy **)([a1 _apiObject] + 16);
  if (v1)
  {
    WebKit::WebPageProxy::didCancelForOpenPanel(v1, v2);
  }
}

uint64_t WKPageGetTypeID()
{
  return 86;
}

uint64_t WKPageGetContext(void *a1)
{
  return *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)([a1 _apiObject] + 48) + 24))
                   + 8);
}

uint64_t WKPageGetPageGroup()
{
  return 0;
}

uint64_t WKPageCopyPageConfiguration(void *a1)
{
  API::PageConfiguration::copy(*(API::PageConfiguration **)([a1 _apiObject] + 48), &v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKPageLoadURL(void *a1, void *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  if (a2)
  {
    uint64_t v4 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
    if (v4) {
      *(_DWORD *)v4 += 2;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v10 = v4;
  MEMORY[0x19972E890](v11, &v10, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v12, (const String *)v11, 0);
  CFTypeRef cf = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)v3, (WebCore::ResourceRequestBase *)v12, 1, 0, 0, &v14);
  uint64_t v5 = v14;
  uint64_t v14 = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v12);
  uint64_t v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void crashBecausePageIsSuspended(void)
{
}

WTF::StringImpl *WKPageLoadURLWithShouldOpenExternalURLsPolicy(void *a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    if (a3) {
      char v6 = 2;
    }
    else {
      char v6 = 0;
    }
    uint64_t v5 = (void *)[v5 _apiObject];
    if (a2) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  if (a3) {
    char v6 = 2;
  }
  else {
    char v6 = 0;
  }
  if (!a2) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v7 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
LABEL_14:
  uint64_t v13 = v7;
  MEMORY[0x19972E890](v14, &v13, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v15, (const String *)v14, 0);
  CFTypeRef cf = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)v5, (WebCore::ResourceRequestBase *)v15, v6, 0, 0, &v17);
  uint64_t v8 = v17;
  uint64_t v17 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
  uint64_t v11 = v14[0];
  v14[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPageLoadURLWithUserData(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  if (a2)
  {
    char v6 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
    if (v6) {
      *(_DWORD *)v6 += 2;
    }
  }
  else
  {
    char v6 = 0;
  }
  uint64_t v13 = v6;
  MEMORY[0x19972E890](v14, &v13, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v15, (const String *)v14, 0);
  CFTypeRef cf = 0;
  if (a3) {
    uint64_t v7 = (const void *)[a3 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  WebKit::WebPageProxy::loadRequest((uint64_t)v5, (WebCore::ResourceRequestBase *)v15, 0, 0, v7, &v17);
  uint64_t v8 = v17;
  uint64_t v17 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
  uint64_t v11 = v14[0];
  v14[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WKPageLoadURLRequest(void *a1, void *a2)
{
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  if (a2) {
    uint64_t v4 = (const String *)[a2 _apiObject];
  }
  else {
    uint64_t v4 = 0;
  }
  WebCore::ResourceRequest::ResourceRequest(v9, v4 + 2);
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  WebKit::WebPageProxy::loadRequest(v5, (WebCore::ResourceRequestBase *)v9, 1, 0, 0, &v8);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v9);
}

void WKPageLoadURLRequestWithUserData(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  if (a2) {
    uint64_t v6 = (const String *)[a2 _apiObject];
  }
  else {
    uint64_t v6 = 0;
  }
  WebCore::ResourceRequest::ResourceRequest(v11, v6 + 2);
  if (v5) {
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  if (a3) {
    CFTypeRef v7 = (const void *)[a3 _apiObject];
  }
  else {
    CFTypeRef v7 = 0;
  }
  WebKit::WebPageProxy::loadRequest((uint64_t)v5, (WebCore::ResourceRequestBase *)v11, 0, 0, v7, &v10);
  uint64_t v8 = v10;
  uint64_t v10 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

WTF::StringImpl *WKPageLoadFile(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  if (a2)
  {
    uint64_t v6 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
    if (v6) {
      *(_DWORD *)v6 += 2;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v13 = v6;
  if (a3)
  {
    CFTypeRef v7 = *(WTF::StringImpl **)([a3 _apiObject] + 16);
    if (v7) {
      *(_DWORD *)v7 += 2;
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  CFTypeRef v12 = v7;
  WebKit::WebPageProxy::loadFile((WebKit::WebPageProxy *)v5, (const WTF::String *)&v13, (const WTF::String *)&v12, 1, 0);
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  uint64_t v10 = v12;
  CFTypeRef v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPageLoadFileWithUserData(void *a1, void *a2, void *a3, void *a4)
{
  CFTypeRef v7 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    CFTypeRef v7 = (void *)[v7 _apiObject];
  }
  if (a2)
  {
    uint64_t v8 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v15 = v8;
  if (a3)
  {
    uint64_t v9 = *(WTF::StringImpl **)([a3 _apiObject] + 16);
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v14 = v9;
  if (a4) {
    [a4 _apiObject];
  }
  WebKit::WebPageProxy::loadFile((WebKit::WebPageProxy *)v7, (const WTF::String *)&v15, (const WTF::String *)&v14, a4 != 0, 0);
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  CFTypeRef v12 = v14;
  uint64_t v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WKPageLoadData(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v9 = (void *)[v9 _apiObject];
  }
  long long v19 = *(_OWORD *)([a2 _apiObject] + 16);
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v20);
  if (a3)
  {
    [a3 _apiObject];
    WTF::String::isolatedCopy();
    if (a4) {
      goto LABEL_6;
    }
  }
  else
  {
    char v18 = 0;
    if (a4)
    {
LABEL_6:
      [a4 _apiObject];
      WTF::String::isolatedCopy();
      if (a5) {
        goto LABEL_7;
      }
LABEL_11:
      uint64_t v10 = 0;
      goto LABEL_12;
    }
  }
  uint64_t v17 = 0;
  if (!a5) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v10 = *(WTF::StringImpl **)([a5 _apiObject] + 16);
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
LABEL_12:
  uint64_t v16 = v10;
  WebKit::WebPageProxy::loadData((uint64_t)v9, &v20, &v18, &v17, &v16, 0, 0, &v21);
  if (v21) {
    CFRelease(*(CFTypeRef *)(v21 + 8));
  }
  CFTypeRef v12 = v16;
  uint64_t v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v18;
  char v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = (unsigned int *)v20;
  char v20 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v11);
  }
  return result;
}

unsigned int *WKPageLoadDataWithUserData(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v11 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v11 = (void *)[v11 _apiObject];
  }
  long long v22 = *(_OWORD *)([a2 _apiObject] + 16);
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v23);
  if (a3)
  {
    [a3 _apiObject];
    WTF::String::isolatedCopy();
    if (a4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v21 = 0;
    if (a4)
    {
LABEL_6:
      [a4 _apiObject];
      WTF::String::isolatedCopy();
      if (a5) {
        goto LABEL_7;
      }
LABEL_11:
      CFTypeRef v12 = 0;
      goto LABEL_12;
    }
  }
  char v20 = 0;
  if (!a5) {
    goto LABEL_11;
  }
LABEL_7:
  CFTypeRef v12 = *(WTF::StringImpl **)([a5 _apiObject] + 16);
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
LABEL_12:
  long long v19 = v12;
  if (a6) {
    uint64_t v13 = (const void *)[a6 _apiObject];
  }
  else {
    uint64_t v13 = 0;
  }
  WebKit::WebPageProxy::loadData((uint64_t)v11, &v23, &v21, &v20, &v19, v13, 0, &v24);
  if (v24) {
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
  uint64_t v15 = v19;
  long long v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = v20;
  char v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v14);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v21;
  uint64_t v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v14);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  return result;
}

WTF::StringImpl *WKPageLoadHTMLString(void *a1, void *a2, void *a3)
{
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }

  return WKPageLoadHTMLStringWithUserData(a1, a2, a3, 0);
}

WTF::StringImpl *WKPageLoadHTMLStringWithUserData(void *a1, void *a2, void *a3, void *a4)
{
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a3)
  {
    uint64_t v8 = *(WTF::StringImpl **)([a3 _apiObject] + 16);
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  CFTypeRef v12 = v8;
  loadString(a1, a2, &v13, &v12, a4);
  uint64_t v10 = v12;
  CFTypeRef v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *loadString(void *a1, void *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, void *a5)
{
  uint64_t v8 = a1;
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v19 = 0;
  if (a1) {
LABEL_3:
  }
    uint64_t v8 = (void *)[v8 _apiObject];
LABEL_4:
  uint64_t v9 = v19;
  if (v19)
  {
    uint64_t v10 = (WTF::StringImpl *)*((void *)v19 + 1);
    uint64_t v9 = (WTF::StringImpl *)((unint64_t)*((unsigned int *)v19 + 1) << ((*((unsigned char *)v19 + 16) & 4) == 0));
  }
  else
  {
    uint64_t v10 = 0;
  }
  v16[1] = v10;
  void v16[2] = v9;
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v17);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a5) {
    uint64_t v11 = (const void *)[a5 _apiObject];
  }
  else {
    uint64_t v11 = 0;
  }
  WebKit::WebPageProxy::loadData((uint64_t)v8, &v17, a3, v16, a4, v11, 0, &v18);
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  uint64_t v13 = v16[0];
  v16[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (unsigned int *)v17;
  uint64_t v17 = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v12);
  }
  uint64_t result = v19;
  long long v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned char *WKPageLoadAlternateHTMLString(unsigned char *a1, void *a2, void *a3, void *a4)
{
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }

  return WKPageLoadAlternateHTMLStringWithUserData(a1, a2, a3, a4, 0);
}

unsigned char *WKPageLoadAlternateHTMLStringWithUserData(unsigned char *result, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = (unsigned char *)[result _apiObject];
    if (result[1362]) {
      crashBecausePageIsSuspended();
    }
  }
  if (a2)
  {
    [a2 _apiObject];
    uint64_t result = (unsigned char *)WTF::String::isolatedCopy();
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v34 = 0;
  if (v9)
  {
LABEL_5:
    uint64_t result = (unsigned char *)[v9 _apiObject];
    uint64_t v9 = result;
  }
LABEL_6:
  if (v34)
  {
    uint64_t v10 = *(char **)(v34 + 8);
    uint64_t v11 = *(unsigned int *)(v34 + 4);
    unint64_t v12 = v11 << ((*(_DWORD *)(v34 + 16) & 4) == 0);
    uint64_t v30 = 0;
    LODWORD(v31) = 0;
    HIDWORD(v31) = v12;
    if (v11)
    {
      if (HIDWORD(v12))
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v12);
      LODWORD(v31) = v12;
      uint64_t v30 = v13;
      do
      {
        char v14 = *v10++;
        *(unsigned char *)uint64_t v13 = v14;
        uint64_t v13 = (WTF::StringImpl *)((char *)v13 + 1);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  WebCore::DataSegment::create();
  uint64_t v16 = v30;
  if (v30)
  {
    uint64_t v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v16, v15);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a3)
  {
    uint64_t v17 = *(WTF::StringImpl **)([a3 _apiObject] + 16);
    if (v17) {
      *(_DWORD *)v17 += 2;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v29 = v17;
  MEMORY[0x19972E890](&v30, &v29, 0);
  if (a4)
  {
    uint64_t v18 = *(WTF::StringImpl **)([a4 _apiObject] + 16);
    if (v18) {
      *(_DWORD *)v18 += 2;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v27 = v18;
  MEMORY[0x19972E890](v28, &v27, 0);
  if (a5) {
    long long v19 = (const void *)[a5 _apiObject];
  }
  else {
    long long v19 = 0;
  }
  WebKit::WebPageProxy::loadAlternateHTML((uint64_t)v9, &v33, &v32, (uint64_t)&v30, (uint64_t)v28, v19);
  uint64_t v21 = v28[0];
  v28[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  long long v22 = v27;
  uint64_t v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v20);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v23 = v30;
  uint64_t v30 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v20);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = v29;
  uint64_t v29 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v20);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = v32;
  uint64_t v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v20);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = (unsigned int *)v33;
  uint64_t v33 = 0;
  if (v26) {
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v26, v20);
  }
  uint64_t result = (unsigned char *)v34;
  uint64_t v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (unsigned char *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPageLoadPlainTextString(void *a1, void *a2)
{
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }

  return WKPageLoadPlainTextStringWithUserData(a1, a2, 0);
}

WTF::StringImpl *WKPageLoadPlainTextStringWithUserData(void *a1, void *a2, void *a3)
{
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v6 = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  CFTypeRef v7 = (WTF::StringImpl **)WTF::aboutBlankURL(v6);
  loadString(a1, a2, &v10, v7, a3);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WKPageStopLoading(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }

  WebKit::WebPageProxy::stopLoading((WebKit::WebPageProxy *)a1);
}

void WKPageReload(void *a1)
{
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    char v2 = WTF::linkedOnOrAfterSDKWithBehavior();
    uint64_t v3 = [a1 _apiObject];
  }
  else
  {
    char v2 = WTF::linkedOnOrAfterSDKWithBehavior();
    uint64_t v3 = 0;
  }
  WebKit::WebPageProxy::reload(v3, v2, &v5);
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WKPageReloadWithoutContentBlockers(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }
  WebKit::WebPageProxy::reload((uint64_t)a1, 4, &v3);
  uint64_t v2 = v3;
  uint64_t v3 = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

void WKPageReloadFromOrigin(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }
  WebKit::WebPageProxy::reload((uint64_t)a1, 2, &v3);
  uint64_t v2 = v3;
  uint64_t v3 = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

void WKPageReloadExpiredOnly(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }
  WebKit::WebPageProxy::reload((uint64_t)a1, 1, &v3);
  uint64_t v2 = v3;
  uint64_t v3 = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

uint64_t WKPageTryClose(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }

  return WebKit::WebPageProxy::tryClose((WebKit::WebPageProxy *)a1);
}

WTF::StringImpl *WKPagePermissionChanged(void *a1, const WTF::String *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    [a1 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    v11[0] = 0;
  }
  unsigned __int16 v4 = WebCore::Permissions::toPermissionName((WebCore::Permissions *)v11, a2);
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v4 >= 0x100u)
  {
    if (a2)
    {
      [(WTF::String *)a2 _apiObject];
      WTF::String::isolatedCopy();
    }
    else
    {
      uint64_t v9 = 0;
    }
    WebCore::SecurityOrigin::createFromString((uint64_t *)&v10, (WebCore::SecurityOrigin *)&v9, v3);
    LOBYTE(v11[0]) = 0;
    int v12 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v11, (uint64_t)v10 + 8);
    CFTypeRef v7 = v10;
    uint64_t v10 = 0;
    if (v7) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v6);
    }
    uint64_t v8 = v9;
    uint64_t v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t result = (WTF::StringImpl *)WebKit::WebProcessProxy::permissionChanged(v4, (uint64_t)v11);
    if (v12 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1EE9E0F58[v12])(&v10, v11);
    }
  }
  return result;
}

unsigned int *WKPageClose(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPageProxy::close((unsigned int *)a1);
}

uint64_t WKPageIsClosed(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 801);
}

void WKPageGoForward(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }
  WebKit::WebPageProxy::goForward((WebKit::WebPageProxy *)a1, &v3);
  uint64_t v2 = v3;
  uint64_t v3 = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

BOOL WKPageCanGoForward(void *a1)
{
  return WebKit::WebBackForwardList::forwardItem(*(void *)([a1 _apiObject] + 664)) != 0;
}

void WKPageGoBack(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v2 = (WebKit::WebPageProxy *)[a1 _apiObject];
  if ((*(unsigned int (**)(void))(**(void **)(*((void *)v2 + 5) + 8) + 1440))(*(void *)(*((void *)v2 + 5) + 8)))
  {
    WKPageReload(a1);
  }
  else
  {
    WebKit::WebPageProxy::goBack(v2, &v4);
    uint64_t v3 = v4;
    uint64_t v4 = 0;
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
  }
}

BOOL WKPageCanGoBack(void *a1)
{
  return WebKit::WebBackForwardList::backItem(*(void *)([a1 _apiObject] + 664)) != 0;
}

void WKPageGoToBackForwardListItem(void *a1, void *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  WebKit::WebPageProxy::goToBackForwardItem((uint64_t)v3, [a2 _apiObject], 3u, &v5);
  if (v5)
  {
    uint64_t v4 = *(const void **)(v5 + 8);
    CFRelease(v4);
  }
}

void WKPageTryRestoreScrollPosition(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }

  WebKit::WebPageProxy::tryRestoreScrollPosition((WebKit::WebPageProxy *)a1);
}

uint64_t WKPageGetBackForwardList(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 664);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

BOOL WKPageWillHandleHorizontalScrollEvents(void *a1)
{
  return *(unsigned char *)([a1 _apiObject] + 922) == 0;
}

void WKPageUpdateWebsitePolicies(void *a1, void *a2)
{
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  if (a2)
  {
    if (!*(void *)([a2 _apiObject] + 144))
    {
      if (!*(void *)([a2 _apiObject] + 152))
      {
        uint64_t v4 = (API::WebsitePolicies *)[a2 _apiObject];
        goto LABEL_7;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x198F6EF48);
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x198F6EF28);
  }
  if (MEMORY[0x90]) {
    goto LABEL_14;
  }
  if (MEMORY[0x98]) {
    goto LABEL_15;
  }
  uint64_t v4 = 0;
LABEL_7:
  *(void *)&double v5 = API::WebsitePolicies::data(v4, v8).n128_u64[0];
  if (a1) {
    uint64_t v6 = objc_msgSend(a1, "_apiObject", v5);
  }
  else {
    uint64_t v6 = 0;
  }
  WebKit::WebPageProxy::updateWebsitePolicies(v6, (uint64_t)v8);
  WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v8, v7);
}

uint64_t WKPageCopyTitle(void *a1)
{
  [a1 _apiObject];
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKPageGetMainFrame(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 328);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKPageGetFocusedFrame(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 344);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKPageGetFrameSetLargestFrame()
{
  return 0;
}

uint64_t WKPageGetRenderTreeSize(void *a1)
{
  return *(void *)([a1 _apiObject] + 936);
}

uint64_t WKPageGetWebsiteDataStore(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 312);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKPageGetInspector(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  if (*(unsigned char *)(a1 + 801)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 400);
  if (!v2) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8);
  }
}

double WKPageGetEstimatedProgress(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 32);
  double result = *(double *)(v1 + 1144);
  if (*(void *)(v1 + 1016)) {
    return 0.1;
  }
  return result;
}

uint64_t WKPageCopyUserAgent(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKPageCopyApplicationNameForUserAgent(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKPageSetApplicationNameForUserAgent(void *a1, void *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v4 = (void *)[v4 _apiObject];
  }
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  WebKit::WebPageProxy::setApplicationNameForUserAgent((WTF **)v4, &v7, a3);
  double result = v7;
  CFTypeRef v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageCopyCustomUserAgent(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WKPageSetCustomUserAgent(void *a1, void *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v4 = (void *)[v4 _apiObject];
  }
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  WebKit::WebPageProxy::setCustomUserAgent((WTF **)v4, &v7, a3);
  double result = v7;
  CFTypeRef v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageSupportsTextEncoding(void *a1)
{
  uint64_t v2 = *(void *)([a1 _apiObject] + 328);
  if (v2) {
    return WebCore::Image::supportsType((WebCore::Image *)(v2 + 224), v1) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t WKPageCopyCustomTextEncodingName(void *a1)
{
  uint64_t v1 = *(WTF::StringImpl **)([a1 _apiObject] + 384);
  if (v1) {
    *(_DWORD *)v1 += 2;
  }
  double v5 = v1;
  API::String::create(&v6);
  if (v6) {
    uint64_t v3 = *((void *)v6 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v3;
}

WTF::StringImpl *WKPageSetCustomTextEncodingName(void *a1, void *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v4 = (void *)[v4 _apiObject];
  }
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  WebKit::WebPageProxy::setCustomTextEncodingName((WebKit::WebPageProxy *)v4, &v7, a3);
  double result = v7;
  CFTypeRef v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WKPageTerminate(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v2 = *(void *)([a1 _apiObject] + 256);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  double result = WebKit::WebProcessProxy::requestTermination((unsigned int *)v2, 2);
  if (v2)
  {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
  return result;
}

unsigned int *WKPageResetProcessState(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v2 = *(void *)([a1 _apiObject] + 256);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  *(_WORD *)(v2 + 776) = 0;

  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
}

uint64_t WKPageGetSessionHistoryURLValueType()
{
  if (_MergedGlobals_102 != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    API::String::create(&v6, &v7);
    uint64_t v3 = v7;
    CFTypeRef v7 = 0;
    uint64_t v4 = v6;
    uint64_t v5 = (uint64_t)v3;
    uint64_t v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v0 = v5;
    qword_1EB359DA8 = v5;
    _MergedGlobals_102 = 1;
    if (v5) {
      return *(void *)(v0 + 8);
    }
    return 0;
  }
  uint64_t v0 = qword_1EB359DA8;
  if (!qword_1EB359DA8) {
    return 0;
  }
  return *(void *)(v0 + 8);
}

uint64_t WKPageGetSessionBackForwardListItemValueType()
{
  if (byte_1EB359DA1 != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    API::String::create(&v6, &v7);
    uint64_t v3 = v7;
    CFTypeRef v7 = 0;
    uint64_t v4 = v6;
    uint64_t v5 = (uint64_t)v3;
    uint64_t v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v0 = v5;
    qword_1EB359DB0 = v5;
    byte_1EB359DA1 = 1;
    if (v5) {
      return *(void *)(v0 + 8);
    }
    return 0;
  }
  uint64_t v0 = qword_1EB359DB0;
  if (!qword_1EB359DB0) {
    return 0;
  }
  return *(void *)(v0 + 8);
}

uint64_t WKPageCopySessionState(void *a1, uint64_t a2, uint64_t a3)
{
  char v4 = a2;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if (a1) {
    uint64_t v7 = [a1 _apiObject];
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (WebKit *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9E1640;
  *((void *)v8 + 1) = a1;
  *((void *)v8 + 2) = v6;
  *((void *)v8 + 3) = a3;
  uint64_t v26 = v8;
  WebKit::WebPageProxy::sessionState(v7, &v26, (uint64_t)&v27);
  uint64_t v9 = v26;
  uint64_t v26 = 0;
  if (v9) {
    (*(void (**)(WebKit *))(*(void *)v9 + 8))(v9);
  }
  WebKit::encodeLegacySessionState((WebKit *)&v27, &v26);
  if (v4)
  {
    v19[0] = v27;
    uint64_t v12 = v28;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    v19[1] = v12;
    long long v20 = v29;
    uint64_t v13 = v30;
    uint64_t v30 = 0;
    uint64_t v21 = v13;
    long long v22 = v31;
    long long v23 = v32;
    LODWORD(v31) = v31 & 0xFFFFFFFE;
    char v24 = v33;
    API::SessionState::create((API::SessionState *)v19, &v25);
    if (v25) {
      uint64_t v11 = *(void *)(v25 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v15 = v21;
    uint64_t v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v14);
    uint64_t v16 = v26;
    uint64_t v26 = 0;
    if (v16) {
      CFRelease(*((CFTypeRef *)v16 + 1));
    }
  }
  else if (v26)
  {
    uint64_t v11 = *((void *)v26 + 1);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v17 = v30;
  uint64_t v30 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v10);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v10);
  return v11;
}

uint64_t WKPageRestoreFromSessionState(OpaqueWKPage *a1, void *a2)
{
  if (a1 && *(unsigned char *)([(OpaqueWKPage *)a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }

  return restoreFromSessionState(a1, a2, 1);
}

uint64_t restoreFromSessionState(OpaqueWKPage *a1, void *a2, int a3)
{
  BYTE4(v39) = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  LOBYTE(v39) = 0;
  uint64_t v40 = 0;
  WTF::URL::invalidate((WTF::URL *)&v40);
  char v43 = 1;
  uint64_t v6 = [a2 _apiObject];
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v8 = [a2 _apiObject];
  uint64_t v9 = v8;
  if (v7 == 8)
  {
    if ((WebKit::decodeLegacySessionState(*(void *)(v8 + 16), *(void *)(v8 + 24), (uint64_t)&v37) & 1) == 0) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)(v8 + 16);
    if ((BackForwardListItemState **)(v8 + 16) != &v37)
    {
      unsigned int v12 = HIDWORD(v38);
      unsigned int v13 = *(_DWORD *)(v8 + 28);
      if (HIDWORD(v38) <= v13)
      {
        if (v13 > v38)
        {
          WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v37, 0);
          WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v37, *(unsigned int *)(v9 + 28));
          unsigned int v12 = HIDWORD(v38);
        }
      }
      else
      {
        WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct((WTF::StringImpl *)((char *)v37 + 312 * v13), (WTF::StringImpl *)((char *)v37 + 312 * HIDWORD(v38)));
        HIDWORD(v38) = v13;
        unsigned int v12 = v13;
      }
      uint64_t v14 = *v11;
      uint64_t v15 = v37;
      if (v12)
      {
        int v34 = a3;
        uint64_t v16 = v14 + 312 * v12;
        uint64_t v17 = (uint64_t)v37 + 24;
        uint64_t v18 = v14 + 24;
        do
        {
          *(_OWORD *)(v17 - 24) = *(_OWORD *)(v18 - 24);
          uint64_t v19 = v18 - 8;
          WTF::String::operator=((uint64_t *)(v17 - 8), (WTF::StringImpl **)(v18 - 8));
          WebKit::FrameState::operator=(v17, v18);
          *(unsigned char *)(v17 + 248) = *(unsigned char *)(v18 + 248);
          long long v20 = *(atomic_uint **)(v18 + 256);
          if (v20) {
            atomic_fetch_add(v20, 1u);
          }
          uint64_t v21 = *(unsigned int **)(v17 + 256);
          *(void *)(v17 + 256) = v20;
          if (v21) {
            WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v21);
          }
          *(unsigned char *)(v17 + 264) = *(unsigned char *)(v18 + 264);
          *(unsigned char *)(v17 + 272) = *(unsigned char *)(v18 + 272);
          long long v22 = *(_DWORD **)(v18 + 280);
          if (v22) {
            ++*v22;
          }
          long long v23 = *(WebKit::ViewSnapshot **)(v17 + 280);
          *(void *)(v17 + 280) = v22;
          if (v23) {
            WTF::RefCounted<WebKit::ViewSnapshot>::deref(v23);
          }
          v17 += 312;
          v18 += 312;
        }
        while (v19 + 296 != v16);
        uint64_t v14 = *v11;
        unsigned int v24 = HIDWORD(v38);
        uint64_t v15 = v37;
        a3 = v34;
      }
      else
      {
        unsigned int v24 = 0;
      }
      WTF::VectorCopier<false,WebKit::BackForwardListItemState>::uninitializedCopy<WebKit::BackForwardListItemState>((WebKit::FrameState *)(v14 + 312 * v24), (WebKit::FrameState *)(v14 + 312 * *(unsigned int *)(v9 + 28)), (uint64_t)v15 + 312 * v24);
      HIDWORD(v38) = *(_DWORD *)(v9 + 28);
    }
    LODWORD(v39) = *(_DWORD *)(v9 + 32);
    BYTE4(v39) = *(unsigned char *)(v9 + 36);
    *((void *)&v39 + 1) = *(void *)(v9 + 40);
    WTF::String::operator=((uint64_t *)&v40, (WTF::StringImpl **)(v9 + 48));
    long long v25 = *(_OWORD *)(v9 + 56);
    long long v42 = *(_OWORD *)(v9 + 72);
    long long v41 = v25;
    char v43 = *(unsigned char *)(v9 + 88);
  }
  if (a1) {
    uint64_t v26 = (WebKit::WebPageProxy *)[(OpaqueWKPage *)a1 _apiObject];
  }
  else {
    uint64_t v26 = 0;
  }
  v35.backForwardListState.items.m_char buffer = v37;
  uint64_t v27 = v38;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  *(void *)&v35.backForwardListState.items.m_capacity = v27;
  *(_OWORD *)&v35.backForwardListState.currentIndex.var0.__null_state_ = v39;
  uint64_t v28 = (StringImpl *)v40;
  uint64_t v40 = 0;
  v35.provisionalURL.m_string.m_impl.m_ptr = v28;
  *(_OWORD *)((char *)&v35.provisionalURL + 8) = v41;
  *(_OWORD *)&v35.provisionalURL.m_hostEnd = v42;
  LODWORD(v41) = v41 & 0xFFFFFFFE;
  v35.isAppInitiated = v43;
  WebKit::WebPageProxy::restoreFromSessionState(v26, &v35, a3, &v36);
  uint64_t v30 = v36;
  uint64_t v36 = 0;
  if (v30) {
    CFRelease(*(CFTypeRef *)(v30 + 8));
  }
  m_ptr = v35.provisionalURL.m_string.m_impl.m_ptr;
  v35.provisionalURL.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v29);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v29);
LABEL_33:
  long long v32 = v40;
  uint64_t v40 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v10);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v10);
}

uint64_t WKPageRestoreFromSessionStateWithoutNavigation(OpaqueWKPage *a1, void *a2)
{
  if (a1 && *(unsigned char *)([(OpaqueWKPage *)a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }

  return restoreFromSessionState(a1, a2, 0);
}

double WKPageGetTextZoomFactor(void *a1)
{
  return *(double *)([a1 _apiObject] + 696);
}

double WKPageGetBackingScaleFactor(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  uint64_t v2 = 764;
  if (!*(unsigned char *)(v1 + 768)) {
    uint64_t v2 = 760;
  }
  return *(float *)(v1 + v2);
}

uint64_t WKPageSetCustomBackingScaleFactor(void *a1, double a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  float v4 = a2;
  return WebKit::WebPageProxy::setCustomDeviceScaleFactor((uint64_t)a1, v4);
}

uint64_t WKPageSupportsTextZoom(void *a1)
{
  uint64_t v2 = *(void *)([a1 _apiObject] + 328);
  if (v2) {
    return WebCore::Image::supportsType((WebCore::Image *)(v2 + 224), v1) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t WKPageSetTextZoomFactor(void *a1, double a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setTextZoomFactor((uint64_t)a1, a2);
}

double WKPageGetPageZoomFactor(unsigned char *a1)
{
  if (a1) {
    a1 = (unsigned char *)[a1 _apiObject];
  }
  uint64_t v1 = 720;
  if (!a1[929]) {
    uint64_t v1 = 704;
  }
  return *(double *)&a1[v1];
}

unsigned char *WKPageSetPageZoomFactor(unsigned char *result, double a2)
{
  if (!result)
  {
    if (a2 <= 0.0) {
      return result;
    }
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = result;
  double result = (unsigned char *)[result _apiObject];
  if (result[1362]) {
    crashBecausePageIsSuspended();
  }
  if (a2 > 0.0)
  {
    uint64_t v4 = [v3 _apiObject];
LABEL_7:
    return (unsigned char *)WebKit::WebPageProxy::setPageZoomFactor(v4, a2);
  }
  return result;
}

uint64_t WKPageSetPageAndTextZoomFactors(void *a1, double a2, double a3)
{
  if (a1)
  {
    uint64_t v5 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v5 _apiObject];
  }

  return WebKit::WebPageProxy::setPageAndTextZoomFactors((uint64_t)a1, a2, a3);
}

uint64_t WKPageSetScaleFactor(void *a1, double a2, double a3, double a4)
{
  if (a1)
  {
    int v7 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v7 _apiObject];
  }
  unint64_t v9 = (int)a3 | ((unint64_t)(int)a4 << 32);
  return WebKit::WebPageProxy::scalePage((uint64_t)a1, a2, (const WebCore::IntPoint *)&v9);
}

double WKPageGetScaleFactor(unsigned char *a1)
{
  if (a1) {
    a1 = (unsigned char *)[a1 _apiObject];
  }
  uint64_t v1 = 744;
  if (!a1[929]) {
    uint64_t v1 = 712;
  }
  return *(double *)&a1[v1];
}

uint64_t WKPageSetUseFixedLayout(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setUseFixedLayout((uint64_t)a1, a2);
}

uint64_t WKPageSetFixedLayoutSize(void *a1, double a2, double a3)
{
  if (a1)
  {
    uint64_t v5 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v5 _apiObject];
  }
  unint64_t v7 = (int)a2 | ((unint64_t)(int)a3 << 32);
  return WebKit::WebPageProxy::setFixedLayoutSize((uint64_t)a1, (const WebCore::IntSize *)&v7);
}

uint64_t WKPageUseFixedLayout(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 777);
}

double WKPageFixedLayoutSize(void *a1)
{
  return (double)*(int *)(*(void *)([a1 _apiObject] + 32) + 720);
}

uint64_t WKPageListenForLayoutMilestones(void *a1, __int16 a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::listenForLayoutMilestones((uint64_t)a1, a2 & 0x1B7);
}

uint64_t WKPageHasHorizontalScrollbar(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 920);
}

uint64_t WKPageHasVerticalScrollbar(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 921);
}

uint64_t WKPageSetSuppressScrollbarAnimations(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setSuppressScrollbarAnimations((uint64_t)a1, a2);
}

uint64_t WKPageAreScrollbarAnimationsSuppressed(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 780);
}

BOOL WKPageIsPinnedToLeftSide(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 804) != 0;
}

BOOL WKPageIsPinnedToRightSide(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 802) != 0;
}

BOOL WKPageIsPinnedToTopSide(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 801) != 0;
}

BOOL WKPageIsPinnedToBottomSide(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 803) != 0;
}

BOOL WKPageRubberBandsAtLeft(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 1747) != 0;
}

uint64_t WKPageSetRubberBandsAtLeft(void *a1, char a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(*(void *)(result + 32) + 1747) = a2;
  return result;
}

BOOL WKPageRubberBandsAtRight(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 1745) != 0;
}

uint64_t WKPageSetRubberBandsAtRight(void *a1, char a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(*(void *)(result + 32) + 1745) = a2;
  return result;
}

BOOL WKPageRubberBandsAtTop(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 1744) != 0;
}

uint64_t WKPageSetRubberBandsAtTop(void *a1, char a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(*(void *)(result + 32) + 1744) = a2;
  return result;
}

BOOL WKPageRubberBandsAtBottom(void *a1)
{
  return *(unsigned char *)(*(void *)([a1 _apiObject] + 32) + 1746) != 0;
}

uint64_t WKPageSetRubberBandsAtBottom(void *a1, char a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(*(void *)(result + 32) + 1746) = a2;
  return result;
}

uint64_t WKPageVerticalRubberBandingIsEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 924);
}

uint64_t WKPageSetEnableVerticalRubberBanding(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setEnableVerticalRubberBanding((uint64_t)a1, a2);
}

uint64_t WKPageHorizontalRubberBandingIsEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 925);
}

uint64_t WKPageSetEnableHorizontalRubberBanding(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setEnableHorizontalRubberBanding((uint64_t)a1, a2);
}

uint64_t WKPageSetBackgroundExtendsBeyondPage(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setBackgroundExtendsBeyondPage((uint64_t)a1, a2);
}

uint64_t WKPageBackgroundExtendsBeyondPage(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 926);
}

unsigned char *WKPageSetPaginationMode(unsigned char *result, unsigned int a2)
{
  uint64_t v3 = result;
  if (result)
  {
    uint64_t result = (unsigned char *)[result _apiObject];
    if (result[1362]) {
      crashBecausePageIsSuspended();
    }
  }
  if (a2 <= 4)
  {
    if (v3) {
      uint64_t v4 = [v3 _apiObject];
    }
    else {
      uint64_t v4 = 0;
    }
    return (unsigned char *)WebKit::WebPageProxy::setPaginationMode(v4, a2);
  }
  return result;
}

uint64_t WKPageGetPaginationMode(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  if (((*(unsigned char *)(v1 + 781) - 1) & 0xFC) != 0) {
    return 0;
  }
  else {
    return (*(unsigned char *)(v1 + 781) - 1) + 1;
  }
}

uint64_t WKPageSetPaginationBehavesLikeColumns(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setPaginationBehavesLikeColumns((uint64_t)a1, a2);
}

uint64_t WKPageGetPaginationBehavesLikeColumns(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 782);
}

uint64_t WKPageSetPageLength(void *a1, double a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setPageLength((uint64_t)a1, a2);
}

double WKPageGetPageLength(void *a1)
{
  return *(double *)([a1 _apiObject] + 784);
}

uint64_t WKPageSetGapBetweenPages(void *a1, double a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setGapBetweenPages((uint64_t)a1, a2);
}

double WKPageGetGapBetweenPages(void *a1)
{
  return *(double *)([a1 _apiObject] + 792);
}

uint64_t WKPageGetPaginationLineGridEnabled()
{
  return 0;
}

uint64_t WKPageGetPageCount(void *a1)
{
  return *(unsigned int *)([a1 _apiObject] + 932);
}

BOOL WKPageCanDelete(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 32);
  return *(unsigned char *)(v1 + 250) && *(unsigned char *)(v1 + 253) != 0;
}

uint64_t WKPageHasSelectedRange(void *a1)
{
  return *(unsigned __int8 *)(*(void *)([a1 _apiObject] + 32) + 250);
}

uint64_t WKPageIsContentEditable(void *a1)
{
  return *(unsigned __int8 *)(*(void *)([a1 _apiObject] + 32) + 253);
}

uint64_t WKPageSetMaintainsInactiveSelection(void *a1, char a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 672) = a2;
  return result;
}

uint64_t WKPageCenterSelectionInVisibleArea(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v1 _apiObject];
  }

  return WebKit::WebPageProxy::centerSelectionInVisibleArea((uint64_t)a1);
}

WTF::StringImpl *WKPageFindStringMatches(void *a1, void *a2, unsigned __int8 a3, int a4)
{
  unint64_t v7 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    unint64_t v7 = (void *)[v7 _apiObject];
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::findStringMatches((uint64_t)v7, &v10, a3, a4);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageGetImageForFindMatch(void *a1, int a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v4 = [a1 _apiObject];
  int v6 = a2;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GetImageForFindMatch>(*(void *)(v4 + 256), &v6, *(void *)(*(void *)(v4 + 32) + 1928), 0);
}

uint64_t WKPageSelectFindMatch(void *a1, int a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v4 = [a1 _apiObject];
  int v6 = a2;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectFindMatch>(*(void *)(v4 + 256), &v6, *(void *)(*(void *)(v4 + 32) + 1928), 0);
}

WTF::StringImpl *WKPageFindString(void *a1, void *a2, unsigned __int8 a3, int a4)
{
  unint64_t v7 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    unint64_t v7 = (void *)[v7 _apiObject];
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::findString((uint64_t)v7, &v10, a3, a4);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageHideFindUI(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v2 = [a1 _apiObject];
  char v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HideFindUI>(*(void *)(v2 + 256), (uint64_t)&v4, *(void *)(*(void *)(v2 + 32) + 1928), 0);
}

WTF::StringImpl *WKPageCountStringMatches(void *a1, void *a2, unsigned __int8 a3, int a4)
{
  unint64_t v7 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    unint64_t v7 = (void *)[v7 _apiObject];
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::countStringMatches((IPC::Encoder *)v7, &v10, a3, a4);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned char *WKPageSetPageContextMenuClient(unsigned char *result)
{
  if (result)
  {
    uint64_t result = (unsigned char *)[result _apiObject];
    if (result[1362]) {
      crashBecausePageIsSuspended();
    }
  }
  return result;
}

uint64_t WKPageSetPageDiagnosticLoggingClient(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)uint64_t result = &unk_1EE9D9790;
  if (a2)
  {
    int v5 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      *(_OWORD *)(result + 40) = a2[2];
    }
    else
    {
      if (v5 > 0) {
        goto LABEL_10;
      }
      if (v5)
      {
        __break(1u);
        return result;
      }
      long long v6 = *a2;
      long long v7 = a2[1];
      *(void *)(result + 40) = *((void *)a2 + 4);
    }
    *(_OWORD *)(result + 8) = v6;
    *(_OWORD *)(result + 24) = v7;
  }
LABEL_10:
  uint64_t v8 = *(void *)(v3 + 128);
  *(void *)(v3 + 128) = result;
  if (v8)
  {
    unint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v9(v8);
  }
  return result;
}

void *WKPageSetPageFindClient(void *a1, long long *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 40) = 0;
  *(void *)uint64_t v4 = &unk_1EE9E0FA8;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      __break(1u);
    }
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(v4 + 40) = *((void *)a2 + 4);
    *(_OWORD *)(v4 + 8) = v5;
    *(_OWORD *)(v4 + 24) = v6;
  }
LABEL_9:
  unint64_t v9 = (void *)v4;
  WebKit::WebPageProxy::setFindClient((uint64_t)v3, &v9);
  uint64_t result = v9;
  if (v9)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*v9 + 8);
    return (void *)v8();
  }
  return result;
}

void *WKPageSetPageFindMatchesClient(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)uint64_t v4 = &unk_1EE9E0FF0;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      __break(1u);
    }
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 24) = v5;
  }
LABEL_9:
  uint64_t v8 = (void *)v4;
  WebKit::WebPageProxy::setFindMatchesClient((uint64_t)v3, &v8);
  uint64_t result = v8;
  if (v8)
  {
    long long v7 = *(uint64_t (**)(void))(*v8 + 8);
    return (void *)v7();
  }
  return result;
}

WTF *WKPageSetPageInjectedBundleClient(void *a1, int *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setInjectedBundleClient((uint64_t)a1, a2);
}

void *WKPageSetPageFormClient(void *a1, long long *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = 0;
  *uint64_t v4 = &unk_1EE9D8C18;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      __break(1u);
    }
    long long v5 = *a2;
    v4[3] = *((void *)a2 + 2);
    *(_OWORD *)(v4 + 1) = v5;
  }
LABEL_9:
  uint64_t v8 = v4;
  WebKit::WebPageProxy::setFormClient((uint64_t)v3, &v8);
  uint64_t result = v8;
  if (v8)
  {
    long long v7 = *(uint64_t (**)(void))(*v8 + 8);
    return (void *)v7();
  }
  return result;
}

uint64_t WKPageSetPageLoaderClient(void *a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x168);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 1++*(_DWORD *)(this + 20) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(void *)uint64_t v4 = &unk_1EE9E1020;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (v5 == 6)
    {
      long long v6 = a2;
      size_t v7 = 352;
    }
    else
    {
      if ((int)v5 > 5) {
        goto LABEL_11;
      }
      if (v5 >= 7)
      {
        __break(1u);
LABEL_76:
        JUMPOUT(0x198F7121CLL);
      }
      size_t v7 = qword_1994F74F0[v5];
      long long v6 = a2;
    }
    memcpy((void *)(v4 + 8), v6, v7);
  }
LABEL_11:
  if (*(void *)(v4 + 56))
  {
    __break(0xC471u);
    goto LABEL_76;
  }
  if (*(void *)(v4 + 80))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7123CLL);
  }
  if (*(void *)(v4 + 88))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7125CLL);
  }
  if (*(void *)(v4 + 96))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7127CLL);
  }
  if (*(void *)(v4 + 112))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7129CLL);
  }
  if (*(void *)(v4 + 120))
  {
    __break(0xC471u);
    JUMPOUT(0x198F712BCLL);
  }
  if (*(void *)(v4 + 128))
  {
    __break(0xC471u);
    JUMPOUT(0x198F712DCLL);
  }
  if (*(void *)(v4 + 136))
  {
    __break(0xC471u);
    JUMPOUT(0x198F712FCLL);
  }
  if (*(void *)(v4 + 144))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7131CLL);
  }
  if (*(void *)(v4 + 152))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7133CLL);
  }
  if (*(void *)(v4 + 160))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7135CLL);
  }
  if (*(void *)(v4 + 168))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7137CLL);
  }
  if (*(void *)(v4 + 176))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7139CLL);
  }
  if (*(void *)(v4 + 184))
  {
    __break(0xC471u);
    JUMPOUT(0x198F713BCLL);
  }
  if (*(void *)(v4 + 208))
  {
    __break(0xC471u);
    JUMPOUT(0x198F713DCLL);
  }
  if (*(void *)(v4 + 216))
  {
    __break(0xC471u);
    JUMPOUT(0x198F713FCLL);
  }
  if (*(void *)(v4 + 224))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7141CLL);
  }
  if (*(void *)(v4 + 232))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7143CLL);
  }
  if (*(void *)(v4 + 240))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7145CLL);
  }
  if (*(void *)(v4 + 248))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7147CLL);
  }
  if (*(void *)(v4 + 256))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7149CLL);
  }
  if (*(void *)(v4 + 264))
  {
    __break(0xC471u);
    JUMPOUT(0x198F714BCLL);
  }
  if (*(void *)(v4 + 272))
  {
    __break(0xC471u);
    JUMPOUT(0x198F714DCLL);
  }
  if (*(void *)(v4 + 288))
  {
    __break(0xC471u);
    JUMPOUT(0x198F714FCLL);
  }
  if (*(void *)(v4 + 296))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7151CLL);
  }
  if (*(void *)(v4 + 304))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7153CLL);
  }
  if (*(void *)(v4 + 336))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7155CLL);
  }
  if (*(void *)(v4 + 344))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7157CLL);
  }
  if (*(void *)(v4 + 352))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7159CLL);
  }
  __int16 v11 = 0;
  if (*(void *)(v4 + 104))
  {
    __int16 v11 = 2;
    uint64_t v8 = v3[32];
    uint64_t v10 = &v11;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ListenForLayoutMilestones>(v8, &v10, *(void *)(v3[4] + 1928), 0);
  }
  uint64_t result = v3[7];
  v3[7] = v4;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageSetPagePolicyClient(void *a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)(v4 + 8) = 0u;
  uint64_t v5 = (_OWORD *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)(v4 + 72) = 0;
  *(void *)uint64_t v4 = &unk_1EE9E1098;
  if (a2)
  {
    uint64_t v6 = *a2;
    if (v6 == 2)
    {
      _OWORD *v5 = *(_OWORD *)a2;
      long long v7 = *((_OWORD *)a2 + 1);
      long long v8 = *((_OWORD *)a2 + 2);
      long long v9 = *((_OWORD *)a2 + 3);
      *(void *)(v4 + 72) = *((void *)a2 + 8);
      *(_OWORD *)(v4 + 40) = v8;
      *(_OWORD *)(v4 + 56) = v9;
      *(_OWORD *)(v4 + 24) = v7;
    }
    else if ((int)v6 <= 1)
    {
      if (v6 >= 3)
      {
        __break(1u);
LABEL_19:
        JUMPOUT(0x198F716FCLL);
      }
      memcpy(v5, a2, constinit_16[v6]);
    }
  }
  if (*(void *)(v4 + 48))
  {
    __break(0xC471u);
    goto LABEL_19;
  }
  uint64_t result = v3[8];
  v3[8] = v4;
  if (result)
  {
    __int16 v11 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v11();
  }
  return result;
}

uint64_t WKPageRunBeforeUnloadConfirmPanelResultListenerGetTypeID()
{
  return 97;
}

uint64_t WKPageRunBeforeUnloadConfirmPanelResultListenerCall(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)([a1 _apiObject] + 16) + 16);

  return v1();
}

uint64_t WKPageRunJavaScriptAlertResultListenerGetTypeID()
{
  return 98;
}

uint64_t WKPageRunJavaScriptAlertResultListenerCall(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)([a1 _apiObject] + 16) + 16);

  return v1();
}

uint64_t WKPageRunJavaScriptConfirmResultListenerGetTypeID()
{
  return 99;
}

uint64_t WKPageRunJavaScriptConfirmResultListenerCall(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)([a1 _apiObject] + 16) + 16);

  return v1();
}

uint64_t WKPageRunJavaScriptPromptResultListenerGetTypeID()
{
  return 100;
}

WTF::StringImpl *WKPageRunJavaScriptPromptResultListenerCall(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  (*(void (**)(void, WTF::StringImpl **))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageRequestStorageAccessConfirmResultListenerGetTypeID()
{
  return 93;
}

uint64_t WKPageRequestStorageAccessConfirmResultListenerCall(void *a1, uint64_t a2)
{
  uint64_t v3 = [a1 _apiObject];
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void WKPageSetPageUIClient(void *a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x288);
  bzero(v4 + 1, 0x280uLL);
  *uint64_t v4 = &unk_1EE9E10D0;
  if (!a2) {
    goto LABEL_11;
  }
  uint64_t v5 = *a2;
  if (v5 == 19)
  {
    uint64_t v6 = v4 + 1;
    long long v7 = a2;
    size_t v8 = 640;
  }
  else
  {
    if ((int)v5 > 18) {
      goto LABEL_11;
    }
    if (v5 >= 0x14)
    {
      __break(1u);
      return;
    }
    size_t v8 = qword_1994F7540[v5];
    uint64_t v6 = v4 + 1;
    long long v7 = a2;
  }
  memcpy(v6, v7, v8);
LABEL_11:
  uint64_t v10 = v4;
  WebKit::WebPageProxy::setUIClient((uint64_t)v3, (uint64_t *)&v10);
  uint64_t v9 = (uint64_t)v10;
  uint64_t v10 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

void *WKPageSetPageNavigationClient(void *a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0xF0);
  *(_OWORD *)(v4 + 8) = 0u;
  uint64_t result = (void *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 1++*(_DWORD *)(this + 20) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(void *)(v4 + 232) = 0;
  *(void *)uint64_t v4 = &unk_1EE9E1668;
  if (a2)
  {
    uint64_t v6 = *a2;
    if (v6 == 3)
    {
      long long v7 = *(_OWORD *)a2;
      long long v8 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 24) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v4 + 40) = v8;
      *(_OWORD *)uint64_t result = v7;
      long long v9 = *((_OWORD *)a2 + 3);
      long long v10 = *((_OWORD *)a2 + 4);
      long long v11 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 88) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 104) = v11;
      *(_OWORD *)(v4 + 56) = v9;
      *(_OWORD *)(v4 + 72) = v10;
      long long v12 = *((_OWORD *)a2 + 7);
      long long v13 = *((_OWORD *)a2 + 8);
      long long v14 = *((_OWORD *)a2 + 10);
      *(_OWORD *)(v4 + 152) = *((_OWORD *)a2 + 9);
      *(_OWORD *)(v4 + 168) = v14;
      *(_OWORD *)(v4 + 1++*(_DWORD *)(this + 20) = v12;
      *(_OWORD *)(v4 + 136) = v13;
      long long v15 = *((_OWORD *)a2 + 11);
      long long v16 = *((_OWORD *)a2 + 12);
      long long v17 = *((_OWORD *)a2 + 13);
      *(void *)(v4 + 232) = *((void *)a2 + 28);
      *(_OWORD *)(v4 + 200) = v16;
      *(_OWORD *)(v4 + 216) = v17;
      *(_OWORD *)(v4 + 184) = v15;
    }
    else if ((int)v6 <= 2)
    {
      if (v6 >= 4)
      {
        __break(1u);
        return result;
      }
      memcpy(result, a2, constinit_102[v6]);
    }
  }
  uint64_t result = (void *)v3[9];
  v3[9] = v4;
  if (result)
  {
    uint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (void *)v18();
  }
  return result;
}

unsigned int *WKPageSetPageStateClient(void *a1, long long *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  if (!a2) {
    goto LABEL_8;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0xC8);
  uint64_t v5 = (_OWORD *)(v4 + 16);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 1++*(_DWORD *)(this + 20) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(void *)uint64_t v4 = &unk_1EE9E1530;
  if (*(_DWORD *)a2)
  {
    *(void *)(v4 + 192) = 0;
    *(_OWORD *)(v4 + 160) = 0uLL;
    *(_OWORD *)(v4 + 176) = 0uLL;
    *(_OWORD *)(v4 + 128) = 0uLL;
    *(_OWORD *)(v4 + 144) = 0uLL;
    *(_OWORD *)(v4 + 96) = 0uLL;
    *(_OWORD *)(v4 + 112) = 0uLL;
    *(_OWORD *)(v4 + 64) = 0uLL;
    *(_OWORD *)(v4 + 80) = 0uLL;
    *(_OWORD *)(v4 + 32) = 0uLL;
    *(_OWORD *)(v4 + 48) = 0uLL;
    _OWORD *v5 = 0uLL;
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      __break(1u);
LABEL_8:
      long long v16 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[3];
    *(_OWORD *)(v4 + 48) = a2[2];
    *(_OWORD *)(v4 + 64) = v8;
    _OWORD *v5 = v6;
    *(_OWORD *)(v4 + 32) = v7;
    long long v9 = a2[4];
    long long v10 = a2[5];
    long long v11 = a2[7];
    *(_OWORD *)(v4 + 112) = a2[6];
    *(_OWORD *)(v4 + 128) = v11;
    *(_OWORD *)(v4 + 80) = v9;
    *(_OWORD *)(v4 + 96) = v10;
    long long v12 = a2[8];
    long long v13 = a2[9];
    long long v14 = a2[10];
    *(void *)(v4 + 192) = *((void *)a2 + 22);
    *(_OWORD *)(v4 + 160) = v13;
    *(_OWORD *)(v4 + 176) = v14;
    *(_OWORD *)(v4 + 144) = v12;
  }
  long long v16 = (unsigned int *)v4;
LABEL_11:
  WebKit::WebPageProxy::setPageLoadStateObserver((uint64_t)v3, &v16);
  uint64_t result = v16;
  if (v16) {
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v16 + 8))(v16);
  }
  return result;
}

WTF::StringImpl *WKPageEvaluateJavaScriptInMainFrame(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  long long v7 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    long long v7 = (void *)[v7 _apiObject];
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  uint64_t v18 = 0;
  WTF::URL::invalidate((WTF::URL *)&v18);
  long long v8 = v21;
  uint64_t v21 = 0;
  long long v22 = v8;
  char v23 = 0;
  long long v9 = v18;
  uint64_t v18 = 0;
  unsigned int v24 = v9;
  long long v25 = v19;
  long long v26 = v20;
  LODWORD(v19) = v19 & 0xFFFFFFFE;
  char v27 = 0;
  LOBYTE(v28) = 0;
  char v29 = 0;
  __int16 v30 = 257;
  long long v10 = (API::ContentWorld *)WTF::fastMalloc((WTF *)0x18);
  *(void *)long long v10 = &unk_1EE9E17F0;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 2) = a4;
  long long v17 = v10;
  v31[0] = 0;
  v31[16] = 0;
  long long v11 = API::ContentWorld::pageContentWorld(v10);
  WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld((uint64_t)v7, (uint64_t)&v22, (uint64_t)v31, (uint64_t)v11, (uint64_t *)&v17);
  if (v17) {
    (*(void (**)(API::ContentWorld *))(*(void *)v17 + 8))(v17);
  }
  if (v29 && v28) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v12);
  }
  long long v13 = v24;
  unsigned int v24 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  long long v14 = v22;
  long long v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = v18;
  uint64_t v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageRenderTreeExternalRepresentation(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1618;
  v6[1] = a2;
  void v6[2] = a3;
  long long v8 = v6;
  char v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[32], (uint64_t)&v9, (uint64_t *)&v8, *(void *)(v5[4] + 1928), 0, 1);
  uint64_t result = (uint64_t)v8;
  long long v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageGetSourceForFrame(void *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v7 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    long long v7 = (void *)[v7 _apiObject];
  }
  if (a2) {
    a2 = (_OWORD *)[a2 _apiObject];
  }
  long long v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v8 = &unk_1EE9E1618;
  v8[1] = a3;
  _OWORD v8[2] = a4;
  long long v10 = v8;
  long long v11 = a2[17];
  long long v12 = &v11;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(v7[32], (uint64_t **)&v12, (uint64_t *)&v10, *(void *)(v7[4] + 1928), 0, 1);
  uint64_t result = (uint64_t)v10;
  long long v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageGetContentsAsString(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1618;
  v6[1] = a2;
  void v6[2] = a3;
  long long v8 = v6;
  char v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[32], &v9, (uint64_t *)&v8, *(void *)(v5[4] + 1928), 0, 1);
  uint64_t result = (uint64_t)v8;
  long long v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageGetBytecodeProfile(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1618;
  v6[1] = a2;
  void v6[2] = a3;
  long long v8 = v6;
  char v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[32], (uint64_t)&v9, (uint64_t *)&v8, *(void *)(v5[4] + 1928), 0, 1);
  uint64_t result = (uint64_t)v8;
  long long v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageGetSamplingProfilerOutput(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1618;
  v6[1] = a2;
  void v6[2] = a3;
  long long v8 = v6;
  char v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[32], (uint64_t)&v9, (uint64_t *)&v8, *(void *)(v5[4] + 1928), 0, 1);
  uint64_t result = (uint64_t)v8;
  long long v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageGetSelectionAsWebArchiveData(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1818;
  v6[1] = a2;
  void v6[2] = a3;
  long long v8 = v6;
  WebKit::WebPageProxy::getSelectionAsWebArchiveData((uint64_t)v5, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  long long v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

unsigned char *WKPageGetContentsAsMHTMLData(unsigned char *result)
{
  if (result)
  {
    uint64_t result = (unsigned char *)[result _apiObject];
    if (result[1362]) {
      crashBecausePageIsSuspended();
    }
  }
  return result;
}

uint64_t WKPageForceRepaint(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1840;
  v6[1] = a2;
  void v6[2] = a3;
  char v9 = v6;
  WebKit::WebPageProxy::updateRenderingWithForcedRepaint((uint64_t)v5, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    long long v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

API::URL *WKPageCopyPendingAPIRequestURL(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 32);
  if (!*(void *)(v1 + 1016)) {
    return 0;
  }
  uint64_t v2 = (const WTF::String *)(v1 + 1016);
  uint64_t v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v3, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKPageCopyActiveURL(void *a1)
{
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)([a1 _apiObject] + 32) + 1000), &v7);
  uint64_t v1 = v7;
  if (!v7) {
    return 0;
  }
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)uint64_t v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

API::URL *WKPageCopyProvisionalURL(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 32);
  if (!*(void *)(v1 + 1024)) {
    return 0;
  }
  uint64_t v2 = (const WTF::String *)(v1 + 1024);
  uint64_t v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v3, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

API::URL *WKPageCopyCommittedURL(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 32);
  if (!*(void *)(v1 + 1032)) {
    return 0;
  }
  uint64_t v2 = (const WTF::String *)(v1 + 1032);
  uint64_t v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v3, v2);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKPageCopyStandardUserAgentWithApplicationName(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebCore::standardUserAgentWithApplicationName();
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v1);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v1);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v2;
}

WTF::StringImpl *WKPageValidateCommand(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  long long v7 = a1;
  if (a1 && *(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  if (v7) {
    long long v7 = (void *)[v7 _apiObject];
  }
  long long v8 = v14;
  if (v14) {
    *(_DWORD *)v14 += 2;
  }
  char v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *char v9 = &unk_1EE9E1868;
  v9[1] = a3;
  void v9[2] = a4;
  v9[3] = v8;
  long long v13 = v9;
  WebKit::WebPageProxy::validateCommand((uint64_t)v7, (uint64_t *)&v14, (uint64_t *)&v13);
  uint64_t v11 = (uint64_t)v13;
  long long v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPageExecuteCommand(void *a1, void *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v3 = (void *)[v3 _apiObject];
  }
  if (a2) {
    [a2 _apiObject];
  }
  WTF::String::isolatedCopy();
  long long v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)v3, &v8, &v7);
  uint64_t v5 = v7;
  long long v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageComputePagesForPrinting(void *a1, void *a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7)
{
  long long v13 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    long long v13 = (void *)[v13 _apiObject];
  }
  uint64_t v14 = [a2 _apiObject];
  uint64_t v15 = *(void *)(v14 + 272);
  uint64_t v16 = *(void *)(v14 + 280);
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  char v23 = 0;
  *(float *)long long v20 = a5;
  *(float *)&v20[1] = a6;
  *(float *)&void v20[2] = a7;
  long long v17 = (void *)WTF::fastMalloc((WTF *)0x18);
  *long long v17 = &unk_1EE9E1890;
  v17[1] = a4;
  v17[2] = a3;
  long long v19 = v17;
  WebKit::WebPageProxy::computePagesForPrinting((uint64_t)v13, v15, v16, (uint64_t)v20, (uint64_t)&v19);
  uint64_t result = (uint64_t)v19;
  long long v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageDrawPagesToPDF(void *a1, void *a2, int a3, int a4, uint64_t a5, uint64_t a6, float a7, float a8, float a9)
{
  long long v17 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    long long v17 = (void *)[v17 _apiObject];
  }
  if (a2) {
    a2 = (void *)[a2 _apiObject];
  }
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  char v24 = 0;
  *(float *)uint64_t v21 = a7;
  *(float *)&v21[1] = a8;
  *(float *)&void v21[2] = a9;
  uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v18 = &unk_1EE9E18B8;
  v18[1] = a6;
  void v18[2] = a5;
  long long v20 = v18;
  WebKit::WebPageProxy::drawPagesToPDF((uint64_t)v17, (uint64_t)a2, (uint64_t)v21, a3, a4, (uint64_t *)&v20);
  uint64_t result = (uint64_t)v20;
  long long v20 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WKPageBeginPrinting(void *a1, void *a2, float a3, float a4, float a5)
{
  char v9 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    char v9 = (void *)[v9 _apiObject];
  }
  if (a2) {
    long long v10 = (WebKit::WebFrameProxy *)[a2 _apiObject];
  }
  else {
    long long v10 = 0;
  }
  memset(&v11.margin, 0, 17);
  v11.pageSetupScaleFactor = a3;
  v11.availablePaperWidth = a4;
  v11.availablePaperHeight = a5;
  WebKit::WebPageProxy::beginPrinting((WebKit::WebPageProxy *)v9, v10, &v11);
}

uint64_t WKPageEndPrinting(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v1 = (void *)[v1 _apiObject];
  }
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9E18E0;
  int v4 = v2;
  WebKit::WebPageProxy::endPrinting((uint64_t)v1, (uint64_t *)&v4);
  uint64_t result = (uint64_t)v4;
  int v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageGetIsControlledByAutomation(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 898);
}

unsigned int *WKPageSetControlledByAutomation(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setControlledByAutomation((unsigned int *)a1, a2);
}

Inspector::RemoteInspectionTarget *WKPageGetAllowsRemoteInspection(void *a1)
{
  uint64_t result = *(Inspector::RemoteInspectionTarget **)([a1 _apiObject] + 1152);
  if (result)
  {
    return (Inspector::RemoteInspectionTarget *)Inspector::RemoteInspectionTarget::inspectable(result);
  }
  return result;
}

void WKPageSetAllowsRemoteInspection(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  WebKit::WebPageProxy::setInspectable((WebKit::WebPageProxy *)a1, a2);
}

uint64_t WKPageSetMediaVolume(void *a1, float a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setMediaVolume((uint64_t)a1, a2);
}

uint64_t WKPageSetMuted(void *a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }
  int v4 = a2 & 1;
  if ((a2 & 2) != 0) {
    int v4 = a2 & 1 | 6;
  }
  int v5 = (a2 >> 1) & 4 | (8 * ((a2 >> 2) & 1)) | (a2 >> 3) & 2 | v4;
  if ((a2 & 0x20) != 0) {
    LOBYTE(v5) = (a2 >> 1) & 4 | (a2 >> 3) & 2 | v4 & 7;
  }
  if ((a2 & 0x40) != 0) {
    LOBYTE(v5) = v5 & 0xFB;
  }
  if ((a2 & 0x80) != 0) {
    LOBYTE(v5) = v5 & 0xFD;
  }

  return WebKit::WebPageProxy::setMuted((uint64_t)a1, v5);
}

unsigned char *WKPageSetMediaCaptureEnabled(unsigned char *a1, char a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (unsigned char *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setMediaCaptureEnabled(a1, a2);
}

uint64_t WKPageGetMediaCaptureEnabled(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 962);
}

unsigned char *WKPageDidAllowPointerLock(unsigned char *result)
{
  if (result)
  {
    uint64_t result = (unsigned char *)[result _apiObject];
    if (result[1362]) {
      crashBecausePageIsSuspended();
    }
  }
  return result;
}

void WKPageClearUserMediaState(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v2 = *(WebKit::UserMediaPermissionRequestManagerProxy **)([a1 _apiObject] + 560);
  if (v2)
  {
    WebKit::UserMediaPermissionRequestManagerProxy::clearCachedState(v2);
  }
}

unsigned char *WKPageDidDenyPointerLock(unsigned char *result)
{
  if (result)
  {
    uint64_t result = (unsigned char *)[result _apiObject];
    if (result[1362]) {
      crashBecausePageIsSuspended();
    }
  }
  return result;
}

WTF::StringImpl *WKPagePostMessageToInjectedBundle(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    int v5 = (WebKit::WebPageProxy *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    int v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  if (a3) {
    long long v6 = (CFTypeRef *)[a3 _apiObject];
  }
  else {
    long long v6 = 0;
  }
  WebKit::WebPageProxy::postMessageToInjectedBundle(v5, &v9, v6);
  uint64_t result = v9;
  char v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageCopyRelatedPages(void *a1)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)([a1 _apiObject] + 256), (uint64_t)&v13);
  if (v14)
  {
    uint64_t v3 = v13;
    uint64_t v4 = 8 * v14;
    do
    {
      uint64_t v5 = *(void *)v3;
      CFRetain(*(CFTypeRef *)(*(void *)v3 + 8));
      if (v5 == [a1 _apiObject])
      {
        CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      else
      {
        uint64_t v6 = HIDWORD(v16);
        if (HIDWORD(v16) == v16)
        {
          unint64_t v7 = HIDWORD(v16) + ((unint64_t)HIDWORD(v16) >> 2);
          if (v7 >= 0x10) {
            unint64_t v8 = v7 + 1;
          }
          else {
            unint64_t v8 = 16;
          }
          if (v8 <= (unint64_t)HIDWORD(v16) + 1) {
            unint64_t v9 = HIDWORD(v16) + 1;
          }
          else {
            unint64_t v9 = v8;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v9);
          uint64_t v6 = HIDWORD(v16);
        }
        *(void *)(v15 + 8 * v6) = v5;
        HIDWORD(v16) = v6 + 1;
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v2);
  API::Array::create(&v15, &v13);
  if (v13) {
    uint64_t v11 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v10);
  return v11;
}

uint64_t WKPageLookUpFrameFromHandle(void *a1, void *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = [a2 _apiObject];
  uint64_t result = WebKit::WebFrameProxy::webFrame(*(void *)(v4 + 16), *(void *)(v4 + 24));
  if (result)
  {
    uint64_t v6 = *(void *)(result + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v6 = v7 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    if (v6 == v3) {
      return *(void *)(result + 8);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WKPageSetMayStartMediaWhenInWindow(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setMayStartMediaWhenInWindow((uint64_t)a1, a2);
}

unsigned char *WKPageSelectContextMenuItem(unsigned char *result)
{
  if (result)
  {
    uint64_t result = (unsigned char *)[result _apiObject];
    if (result[1362]) {
      crashBecausePageIsSuspended();
    }
  }
  return result;
}

uint64_t WKPageGetScrollPinningBehavior(void *a1)
{
  int v1 = *(unsigned __int8 *)(*(void *)([a1 _apiObject] + 32) + 1760);
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

uint64_t WKPageSetScrollPinningBehavior(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    if (a2 == 2) {
      unsigned __int8 v4 = 2;
    }
    else {
      unsigned __int8 v4 = a2 == 1;
    }
    a1 = (void *)[v3 _apiObject];
  }
  else if (a2 == 2)
  {
    unsigned __int8 v4 = 2;
  }
  else
  {
    unsigned __int8 v4 = a2 == 1;
  }

  return WebKit::WebPageProxy::setScrollPinningBehavior((uint64_t)a1, v4);
}

uint64_t WKPageGetAddsVisitedLinks(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 897);
}

uint64_t WKPageSetAddsVisitedLinks(void *a1, char a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 897) = a2;
  return result;
}

uint64_t WKPageIsPlayingAudio(void *a1)
{
  return *(_DWORD *)(*(void *)([a1 _apiObject] + 32) + 824) & 1;
}

uint64_t WKPageGetMediaState(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 32);
  return (*(_DWORD *)(v1 + 1704) >> 12) & 0xC0 | (*(_DWORD *)(v1 + 1704) >> 9) & 0x3C | (*(_DWORD *)(v1 + 1704) >> 13) & 0x300 | (*(_DWORD *)(v1 + 824) | *(_DWORD *)(v1 + 1704)) & 3u;
}

IPC::Encoder *WKPageClearWheelEventTestMonitor(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = *(IPC::Encoder **)([a1 _apiObject] + 1520);
  if (result)
  {
    return WebKit::WebPageProxyTesting::clearWheelEventTestMonitor(result);
  }
  return result;
}

uint64_t WKPageCallAfterNextPresentationUpdate(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1908;
  v6[1] = a2;
  void v6[2] = a3;
  unint64_t v9 = v6;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate((uint64_t)v5, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    unint64_t v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

uint64_t WKPageSetIgnoresViewportScaleLimits(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v3 _apiObject];
  }

  return WebKit::WebPageProxy::setForceAlwaysUserScalable((uint64_t)a1, a2);
}

uint64_t WKPageGetProcessIdentifier(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  if (*(unsigned char *)(a1 + 801)) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 256) + 136);
  if (!v2) {
    return 0;
  }
  else {
    return *(unsigned int *)(v2 + 108);
  }
}

uint64_t WKPageGetGPUProcessIdentifier(void *a1)
{
  uint64_t v1 = *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)([a1 _apiObject] + 48) + 24))
                 + 176);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 136)) != 0) {
    return *(unsigned int *)(v2 + 108);
  }
  else {
    return 0;
  }
}

uint64_t WKPageGetApplicationManifest(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1930;
  v6[1] = a3;
  void v6[2] = a2;
  unint64_t v8 = v6;
  char v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(v5[32], (uint64_t)&v9, (uint64_t *)&v8, *(void *)(v5[4] + 1928), 0, 1);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageDumpPrivateClickMeasurement(void *a1, uint64_t (*a2)(void, uint64_t), uint64_t a3)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v5 = *(void *)([a1 _apiObject] + 1520);
  if (v5)
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9E1958;
    v6[1] = a3;
    void v6[2] = a2;
    char v9 = v6;
    WebKit::WebPageProxyTesting::dumpPrivateClickMeasurement(v5, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    char v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a2(0, a3);
  }
  return result;
}

uint64_t WKPageClearPrivateClickMeasurement(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v5 = *(void *)([a1 _apiObject] + 1520);
  if (v5)
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9E1980;
    v6[1] = a3;
    void v6[2] = a2;
    char v9 = v6;
    WebKit::WebPageProxyTesting::clearPrivateClickMeasurement(v5, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    char v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a2(a3);
  }
  return result;
}

uint64_t WKPageSetPrivateClickMeasurementOverrideTimerForTesting(void *a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v7 = *(void *)([a1 _apiObject] + 1520);
  if (v7)
  {
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v8 = &unk_1EE9E19A8;
    v8[1] = a4;
    _OWORD v8[2] = a3;
    uint64_t v11 = v8;
    WebKit::WebPageProxyTesting::setPrivateClickMeasurementOverrideTimer(v7, a2, (uint64_t *)&v11);
    uint64_t result = (uint64_t)v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a3(a4);
  }
  return result;
}

uint64_t WKPageMarkAttributedPrivateClickMeasurementsAsExpiredForTesting(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v5 = *(void *)([a1 _apiObject] + 1520);
  if (v5)
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9E19D0;
    v6[1] = a3;
    void v6[2] = a2;
    char v9 = v6;
    WebKit::WebPageProxyTesting::markAttributedPrivateClickMeasurementsAsExpired(v5, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    char v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a2(a3);
  }
  return result;
}

uint64_t WKPageSetPrivateClickMeasurementEphemeralMeasurementForTesting(void *a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v7 = *(void *)([a1 _apiObject] + 1520);
  if (v7)
  {
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v8 = &unk_1EE9E19F8;
    v8[1] = a4;
    _OWORD v8[2] = a3;
    uint64_t v11 = v8;
    WebKit::WebPageProxyTesting::setPrivateClickMeasurementEphemeralMeasurement(v7, a2, (uint64_t *)&v11);
    uint64_t result = (uint64_t)v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a3(a4);
  }
  return result;
}

uint64_t WKPageSimulatePrivateClickMeasurementSessionRestart(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v5 = *(void *)([a1 _apiObject] + 1520);
  if (v5)
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9E1A20;
    v6[1] = a3;
    void v6[2] = a2;
    char v9 = v6;
    WebKit::WebPageProxyTesting::simulatePrivateClickMeasurementSessionRestart(v5, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    char v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a2(a3);
  }
  return result;
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting(void *a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v7 = *(void *)([a1 _apiObject] + 1520);
  if (v7)
  {
    if (a2)
    {
      unint64_t v8 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
      if (v8) {
        *(_DWORD *)v8 += 2;
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t v16 = v8;
    MEMORY[0x19972E890](v17, &v16, 0);
    long long v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v10 = &unk_1EE9E1A48;
    v10[1] = a4;
    uint64_t v10[2] = a3;
    uint64_t v15 = v10;
    WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenPublicKeyURL(v7, (uint64_t *)v17, (uint64_t *)&v15);
    uint64_t v12 = (uint64_t)v15;
    uint64_t v15 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = v17[0];
    v17[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    return (WTF::StringImpl *)a3(a4);
  }
  return result;
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting(void *a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v7 = *(void *)([a1 _apiObject] + 1520);
  if (v7)
  {
    if (a2)
    {
      unint64_t v8 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
      if (v8) {
        *(_DWORD *)v8 += 2;
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t v16 = v8;
    MEMORY[0x19972E890](v17, &v16, 0);
    long long v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v10 = &unk_1EE9E1A70;
    v10[1] = a4;
    uint64_t v10[2] = a3;
    uint64_t v15 = v10;
    WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenSignatureURL(v7, (uint64_t *)v17, (uint64_t *)&v15);
    uint64_t v12 = (uint64_t)v15;
    uint64_t v15 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = v17[0];
    v17[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    return (WTF::StringImpl *)a3(a4);
  }
  return result;
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting(void *a1, void *a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v9 = *(void *)([a1 _apiObject] + 1520);
  if (v9)
  {
    if (a2)
    {
      long long v10 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
      if (v10) {
        *(_DWORD *)v10 += 2;
      }
    }
    else
    {
      long long v10 = 0;
    }
    uint64_t v23 = v10;
    MEMORY[0x19972E890](v24, &v23, 0);
    if (a3)
    {
      uint64_t v12 = *(WTF::StringImpl **)([a3 _apiObject] + 16);
      if (v12) {
        *(_DWORD *)v12 += 2;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v21 = v12;
    MEMORY[0x19972E890](v22, &v21, 0);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9E1A98;
    v13[1] = a5;
    void v13[2] = a4;
    long long v20 = v13;
    WebKit::WebPageProxyTesting::setPrivateClickMeasurementAttributionReportURLs(v9, (uint64_t *)v24, (uint64_t *)v22, (uint64_t *)&v20);
    uint64_t v15 = (uint64_t)v20;
    long long v20 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v22[0];
    v22[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    long long v17 = v21;
    uint64_t v21 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v24[0];
    v24[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    return (WTF::StringImpl *)a4(a5);
  }
  return result;
}

uint64_t WKPageMarkPrivateClickMeasurementsAsExpiredForTesting(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v5 = *(void *)([a1 _apiObject] + 1520);
  if (v5)
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v6 = &unk_1EE9E1AC0;
    v6[1] = a3;
    void v6[2] = a2;
    uint64_t v9 = v6;
    WebKit::WebPageProxyTesting::markPrivateClickMeasurementsAsExpired(v5, (uint64_t *)&v9);
    uint64_t result = (uint64_t)v9;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a2(a3);
  }
  return result;
}

WTF::StringImpl *WKPageSetPCMFraudPreventionValuesForTesting(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v13 = *(void *)([a1 _apiObject] + 1520);
  if (v13)
  {
    if (a2)
    {
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      if (a3) {
        goto LABEL_5;
      }
    }
    else
    {
      long long v26 = 0;
      if (a3)
      {
LABEL_5:
        [a3 _apiObject];
        WTF::String::isolatedCopy();
        if (a4) {
          goto LABEL_6;
        }
        goto LABEL_33;
      }
    }
    long long v25 = 0;
    if (a4)
    {
LABEL_6:
      [a4 _apiObject];
      WTF::String::isolatedCopy();
      if (a5)
      {
LABEL_7:
        [a5 _apiObject];
        WTF::String::isolatedCopy();
LABEL_8:
        unsigned int v14 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v14 = &unk_1EE9E1AE8;
        v14[1] = a7;
        void v14[2] = a6;
        uint64_t v22 = v14;
        WebKit::WebPageProxyTesting::setPCMFraudPreventionValues(v13, (uint64_t *)&v26, (uint64_t *)&v25, (uint64_t *)&v24, (uint64_t *)&v23, (uint64_t *)&v22);
        uint64_t v16 = (uint64_t)v22;
        uint64_t v22 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        long long v17 = v23;
        uint64_t v23 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v15);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        long long v19 = v24;
        char v24 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v15);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        long long v20 = v25;
        long long v25 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v15);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        uint64_t result = v26;
        long long v26 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        return result;
      }
LABEL_34:
      uint64_t v23 = 0;
      goto LABEL_8;
    }
LABEL_33:
    char v24 = 0;
    if (a5) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  return (WTF::StringImpl *)a6(a7);
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementAppBundleIDForTesting(void *a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v7 = *(void *)([a1 _apiObject] + 1520);
  if (v7)
  {
    if (a2)
    {
      [a2 _apiObject];
      WTF::String::isolatedCopy();
    }
    else
    {
      unsigned int v14 = 0;
    }
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v8 = &unk_1EE9E1B10;
    v8[1] = a4;
    _OWORD v8[2] = a3;
    uint64_t v13 = v8;
    WebKit::WebPageProxyTesting::setPrivateClickMeasurementAppBundleID(v7, (uint64_t *)&v14, (uint64_t *)&v13);
    uint64_t v10 = (uint64_t)v13;
    uint64_t v13 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = v14;
    unsigned int v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    return (WTF::StringImpl *)a3(a4);
  }
  return result;
}

unsigned int *WKPageSetMockCameraOrientation(void *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
  {
    unsigned __int8 v4 = a1;
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    a1 = (void *)[v4 _apiObject];
  }

  return WebKit::WebPageProxy::setOrientationForMediaCapture((unsigned int *)a1, a2, a3);
}

uint64_t WKPageSetMockCaptureDevicesInterrupted(void *a1, char a2, char a3)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v6 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)([a1 _apiObject] + 48) + 24));
  uint64_t v7 = WebKit::WebProcessPool::ensureGPUProcess(v6);
  v9[0] = a2;
  v9[1] = a3;
  return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesInterrupted>(v7, v9, 0, 0);
}

uint64_t WKPageTriggerMockCaptureConfigurationChange(void *a1, char a2, char a3)
{
  if (a1)
  {
    uint64_t v6 = (WebCore::MockRealtimeMediaSourceCenter *)[a1 _apiObject];
    if (*((unsigned char *)v6 + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v7 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v6);
    WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(v7);
    unint64_t v8 = (WebKit::WebProcessPool *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)([a1 _apiObject] + 48) + 24));
    uint64_t v9 = WebKit::WebProcessPool::ensureGPUProcess(v8);
    v12[0] = a2;
    v12[1] = a3;
    return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::TriggerMockCaptureConfigurationChange>(v9, v12, 0, 0);
  }
  else
  {
    uint64_t v11 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(0);
    uint64_t result = WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(v11);
    __break(1u);
  }
  return result;
}

uint64_t WKPageLoadedSubresourceDomains(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (*(unsigned char *)([a1 _apiObject] + 1362)) {
      crashBecausePageIsSuspended();
    }
    uint64_t v5 = (void *)[v5 _apiObject];
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9E1B38;
  v6[1] = a3;
  void v6[2] = a2;
  unint64_t v8 = v6;
  char v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v5[32], (uint64_t)&v9, (uint64_t *)&v8, *(void *)(v5[4] + 1928), 0, 1);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WKPageClearLoadedSubresourceDomains(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t v2 = [a1 _apiObject];
  char v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearLoadedSubresourceDomains>(*(void *)(v2 + 256), (uint64_t)&v4, *(void *)(*(void *)(v2 + 32) + 1928), 0);
}

uint64_t WKPageSetMediaCaptureReportingDelayForTesting(void *a1, double a2)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = [a1 _apiObject];
  *(double *)(result + 1064) = a2;
  return result;
}

WebKit::WebPageProxyTesting *WKPageDispatchActivityStateUpdateForTesting(void *a1)
{
  if (*(unsigned char *)([a1 _apiObject] + 1362)) {
    crashBecausePageIsSuspended();
  }
  uint64_t result = *(WebKit::WebPageProxyTesting **)([a1 _apiObject] + 1520);
  if (result)
  {
    return (WebKit::WebPageProxyTesting *)WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(result);
  }
  return result;
}

IPC::Encoder *WKPageClearNotificationPermissionState(void *a1, void *a2)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v2 = vars8;
  }
  return WebKit::WebPageProxy::clearNotificationPermissionState((WebKit::WebPageProxy *)a1, a2);
}

WTF::StringImpl *WKPageExecuteCommandForTesting(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPageProxy *)[a1 _apiObject];
    if (a2) {
LABEL_3:
    }
      [a2 _apiObject];
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  WTF::String::isolatedCopy();
  if (a3) {
    [a3 _apiObject];
  }
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::executeEditCommand(v5, &v10, &v9);
  uint64_t v7 = v9;
  char v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::WebPageProxyTesting *WKPageIsEditingCommandEnabledForTesting(void *a1, void *a2)
{
  isEditingCommandEnabled = *(WebKit::WebPageProxyTesting **)([a1 _apiObject] + 1520);
  if (isEditingCommandEnabled)
  {
    if (a2) {
      [a2 _apiObject];
    }
    WTF::String::isolatedCopy();
    isEditingCommandEnabled = (WebKit::WebPageProxyTesting *)WebKit::WebPageProxyTesting::isEditingCommandEnabled(isEditingCommandEnabled, (const WTF::String *)&v7);
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return isEditingCommandEnabled;
}

WTF::StringImpl *WKPageSetPermissionLevelForTesting(void *a1, void *a2, char a3)
{
  uint64_t result = (WTF::StringImpl *)[a1 _apiObject];
  uint64_t v6 = (WebKit::WebPageProxyTesting *)*((void *)result + 190);
  if (v6)
  {
    if (a2) {
      [a2 _apiObject];
    }
    WTF::String::isolatedCopy();
    WebKit::WebPageProxyTesting::setPermissionLevel(v6, (const WTF::String *)&v8, a3);
    uint64_t result = v8;
    unint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WKPageSetTopContentInsetForTesting(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), float a4)
{
  uint64_t v6 = *(void *)([a1 _apiObject] + 1520);
  if (v6)
  {
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v7 = &unk_1EE9E1B60;
    v7[1] = a2;
    void v7[2] = a3;
    uint64_t v11 = v7;
    float v12 = a4;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
    IPC::MessageSender::sendWithAsyncReply<Messages::WebPageTesting::SetTopContentInset,WTF::CompletionHandler<void ()(void)>>(v6, &v12, (uint64_t *)&v11, v8, 0);
    uint64_t result = (uint64_t)v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a3(a2);
  }
  return result;
}

uint64_t WKPageSetPageScaleFactorForTesting(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), float a4, double a5, double a6)
{
  uint64_t v10 = *(void *)([a1 _apiObject] + 1520);
  if (v10)
  {
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v11 = &unk_1EE9E1B88;
    v11[1] = a2;
    void v11[2] = a3;
    uint64_t v15 = v11;
    WebKit::WebPageProxyTesting::setPageScaleFactor(v10, (int)a5 | ((unint64_t)(int)a6 << 32), (uint64_t *)&v15, a4);
    uint64_t result = (uint64_t)v15;
    if (v15)
    {
      uint64_t v13 = *(uint64_t (**)(void))(*v15 + 8);
      return v13();
    }
  }
  else
  {
    return a3(a2);
  }
  return result;
}

uint64_t WKPageConfigurationGetTypeID()
{
  return 87;
}

API::PageConfiguration *WKPageConfigurationCreate()
{
  uint64_t v0 = (API::PageConfiguration *)API::Object::newObject(0x218uLL, 87);
  uint64_t result = API::PageConfiguration::PageConfiguration(v0);
  if (result) {
    return (API::PageConfiguration *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKPageConfigurationGetContext(uint64_t *a1)
{
  if (a1) {
    a1 = (uint64_t *)[a1 _apiObject];
  }
  return *(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(a1 + 3)
                   + 8);
}

void WKPageConfigurationSetContext(void *a1, CFTypeRef *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2)
  {
LABEL_3:
    uint64_t v2 = (CFTypeRef *)[(CFTypeRef *)v2 _apiObject];
    CFRetain(v2[1]);
  }
LABEL_4:
  uint64_t v4 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = v2;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

uint64_t WKPageConfigurationGetPageGroup()
{
  return 0;
}

uint64_t WKPageConfigurationGetUserContentController(WebKit::WebUserContentControllerProxy **a1)
{
  if (a1) {
    a1 = (WebKit::WebUserContentControllerProxy **)[a1 _apiObject];
  }
  return *((void *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get(a1 + 4)
         + 1);
}

void WKPageConfigurationSetUserContentController(void *a1, CFTypeRef *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2)
  {
LABEL_3:
    uint64_t v2 = (CFTypeRef *)[(CFTypeRef *)v2 _apiObject];
    CFRetain(v2[1]);
  }
LABEL_4:
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = v2;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

uint64_t WKPageConfigurationGetPreferences(WebKit::WebPreferences **a1)
{
  if (a1) {
    a1 = (WebKit::WebPreferences **)[a1 _apiObject];
  }
  return *((void *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(a1 + 5)
         + 1);
}

void WKPageConfigurationSetPreferences(void *a1, CFTypeRef *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2)
  {
LABEL_3:
    uint64_t v2 = (CFTypeRef *)[(CFTypeRef *)v2 _apiObject];
    CFRetain(v2[1]);
  }
LABEL_4:
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

uint64_t WKPageConfigurationGetRelatedPage(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 136);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(void *)(v2 - 8);
  }
  else {
    return 0;
  }
}

unsigned int *WKPageConfigurationSetRelatedPage(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = [a2 _apiObject];
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 24), v4 + 16);
  uint64_t v5 = *(atomic_uint **)(v4 + 24);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
LABEL_5:
  uint64_t result = *(unsigned int **)(v3 + 136);
  *(void *)(v3 + 136) = v5;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WKPageConfigurationGetWebsiteDataStore(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return *((void *)API::PageConfiguration::websiteDataStore((API::PageConfiguration *)a1) + 1);
}

void WKPageConfigurationSetWebsiteDataStore(void *a1, CFTypeRef *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = 0;
  if (a2)
  {
LABEL_3:
    uint64_t v2 = (CFTypeRef *)[(CFTypeRef *)v2 _apiObject];
    CFRetain(v2[1]);
  }
LABEL_4:
  uint64_t v4 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = v2;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

uint64_t WKPageConfigurationSetInitialCapitalizationEnabled(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 236) = a2;
  return result;
}

uint64_t WKPageConfigurationSetBackgroundCPULimit(void *a1, double a2)
{
  uint64_t result = [a1 _apiObject];
  *(double *)(result + 248) = a2;
  *(unsigned char *)(result + 256) = 1;
  return result;
}

uint64_t WKPageConfigurationSetAllowTestOnlyIPC(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 240) = a2;
  return result;
}

uint64_t WKPageConfigurationSetPortsForUpgradingInsecureSchemeForTesting(uint64_t result, int a2, int a3)
{
  if (result) {
    uint64_t result = [(id)result _apiObject];
  }
  if (*(unsigned char *)(result + 268))
  {
    *(_WORD *)(result + 264) = a2;
    *(_WORD *)(result + 266) = a3;
  }
  else
  {
    *(_DWORD *)(result + 264) = a2 | (a3 << 16);
    *(unsigned char *)(result + 268) = 1;
  }
  return result;
}

uint64_t WKPageGroupGetTypeID()
{
  return 0;
}

uint64_t WKPageGroupCreateWithIdentifier()
{
  return 0;
}

uint64_t WKPageGroupGetPreferences()
{
  return 0;
}

uint64_t WKPageGroupGetUserContentController()
{
  return 0;
}

uint64_t WKPreferencesGetTypeID()
{
  return 92;
}

uint64_t WKPreferencesCreate()
{
  uint64_t v6 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebPreferences::createWithLegacyDefaults((WebKit::WebPreferences *)&v6, (const WTF::String *)&v5, (const WTF::String *)&v4, &v7);
  uint64_t v1 = v4;
  uint64_t v4 = 0;
  if (v1)
  {
    if (*(_DWORD *)v1 == 2) {
      WTF::StringImpl::destroy(v1, v0);
    }
    else {
      *(_DWORD *)v1 -= 2;
    }
  }
  uint64_t v2 = v5;
  uint64_t v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v0);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  if (v7) {
    return *((void *)v7 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKPreferencesCreateWithIdentifier(void *a1)
{
  if (a1)
  {
    [a1 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    uint64_t v8 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebPreferences::createWithLegacyDefaults((WebKit::WebPreferences *)&v8, (const WTF::String *)&v7, (const WTF::String *)&v6, &v9);
  uint64_t v2 = v6;
  uint64_t v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v1);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  uint64_t v3 = v7;
  uint64_t v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = v8;
  uint64_t v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v1);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (v9) {
    return *((void *)v9 + 1);
  }
  else {
    return 0;
  }
}

WebKit::WebPreferences *WKPreferencesCreateCopy(void *a1)
{
  if (a1) {
    uint64_t v1 = (const WebKit::WebPreferences *)[a1 _apiObject];
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = (WebKit::WebPreferences *)API::Object::newObject(0x70uLL, 92);
  uint64_t result = WebKit::WebPreferences::WebPreferences(v2, v1);
  if (result) {
    return (WebKit::WebPreferences *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKPreferencesStartBatchingUpdates(uint64_t result)
{
  if (result) {
    uint64_t result = [(id)result _apiObject];
  }
  int v1 = *(_DWORD *)(result + 104);
  if (!v1) {
    *(unsigned char *)(result + 108) = 0;
  }
  *(_DWORD *)(result + 104) = v1 + 1;
  return result;
}

void *WKPreferencesEndBatchingUpdates(void *result)
{
  if (result) {
    uint64_t result = (void *)[result _apiObject];
  }
  int v1 = *((_DWORD *)result + 26) - 1;
  *((_DWORD *)result + 26) = v1;
  if (!v1 && *((unsigned char *)result + 108))
  {
    return WebKit::WebPreferences::update(result);
  }
  return result;
}

uint64_t WKPreferencesCopyExperimentalFeatures(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  int v1 = WebKit::WebPreferences::experimentalFeatures((WebKit::WebPreferences *)a1);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v6, (uint64_t)v1);
  API::Array::create(v6, &v5);
  if (v5) {
    uint64_t v3 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v2);
  return v3;
}

void *WKPreferencesEnableAllExperimentalFeatures(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPreferences::enableAllExperimentalFeatures((WebKit::WebPreferences *)a1);
}

WTF::StringImpl *WKPreferencesSetExperimentalFeatureForKey(void *a1, char a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a3)
    {
LABEL_3:
      [a3 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setFeatureEnabledForKey(v5, (const WTF::String *)&v8, a2);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyInternalDebugFeatures(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = WebKit::WebPreferences::internalDebugFeatures((WebKit::WebPreferences *)a1);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v6, (uint64_t)v1);
  API::Array::create(v6, &v5);
  if (v5) {
    uint64_t v3 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v2);
  return v3;
}

void *WKPreferencesResetAllInternalDebugFeatures(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPreferences::resetAllInternalDebugFeatures((WebKit::WebPreferences *)a1);
}

WTF::StringImpl *WKPreferencesSetInternalDebugFeatureForKey(void *a1, char a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a3)
    {
LABEL_3:
      [a3 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setFeatureEnabledForKey(v5, (const WTF::String *)&v8, a2);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetBoolValueForKeyForTesting(void *a1, const WTF::StringImpl *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a3)
    {
LABEL_3:
      [a3 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setBoolValueForKey(v5, &v8, a2, 1);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetDoubleValueForKeyForTesting(void *a1, void *a2, double a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setBoolValueForKey(v5, &v8, (const WTF::StringImpl *)(a3 != 0.0), 1);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetUInt32ValueForKeyForTesting(void *a1, unsigned int a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a3)
    {
LABEL_3:
      [a3 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setUInt32ValueForKey(v5, &v8, a2);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetStringValueForKeyForTesting(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a3) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v10 = 0;
    if (a2) {
      goto LABEL_4;
    }
    goto LABEL_16;
  }
  uint64_t v5 = 0;
  if (!a3) {
    goto LABEL_15;
  }
LABEL_3:
  [a3 _apiObject];
  WTF::String::isolatedCopy();
  if (a2)
  {
LABEL_4:
    [a2 _apiObject];
    WTF::String::isolatedCopy();
    goto LABEL_5;
  }
LABEL_16:
  char v9 = 0;
LABEL_5:
  WebKit::WebPreferences::setStringValueForKey(v5, &v10, &v9);
  uint64_t v7 = v9;
  char v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WKPreferencesResetTestRunnerOverrides(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPreferences::update(a1);
}

void *WKPreferencesSetJavaScriptEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setJavaScriptEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, a3);
}

void *WKPreferencesSetJavaScriptMarkupEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setJavaScriptMarkupEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptMarkupEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, a3);
}

void *WKPreferencesSetLoadsImagesAutomatically(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLoadsImagesAutomatically((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLoadsImagesAutomatically(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, a3);
}

void *WKPreferencesSetLocalStorageEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLocalStorageEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLocalStorageEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, a3);
}

void *WKPreferencesSetDatabasesEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDatabasesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDatabasesEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, a3);
}

void *WKPreferencesSetJavaScriptCanOpenWindowsAutomatically(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setJavaScriptCanOpenWindowsAutomatically((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptCanOpenWindowsAutomatically(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, a3);
}

void *WKPreferencesSetHyperlinkAuditingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setHyperlinkAuditingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHyperlinkAuditingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, a3);
}

WTF::StringImpl *WKPreferencesSetStandardFontFamily(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setStandardFontFamily(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyStandardFontFamily(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetFixedFontFamily(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setFixedFontFamily(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyFixedFontFamily(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetSerifFontFamily(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setSerifFontFamily(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopySerifFontFamily(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetSansSerifFontFamily(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setSansSerifFontFamily(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopySansSerifFontFamily(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetCursiveFontFamily(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setCursiveFontFamily(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyCursiveFontFamily(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetFantasyFontFamily(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setFantasyFontFamily(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyFantasyFontFamily(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetPictographFontFamily(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setPictographFontFamily(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyPictographFontFamily(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKPreferencesSetDefaultFontSize(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  double v4 = (double)a2;
  return WebKit::WebPreferences::setDefaultFontSize((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetDefaultFontSize(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key);
}

uint64_t WKPreferencesSetDefaultFixedFontSize(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  double v4 = (double)a2;
  return WebKit::WebPreferences::setDefaultFixedFontSize((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetDefaultFixedFontSize(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key);
}

uint64_t WKPreferencesSetMinimumFontSize(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  double v4 = (double)a2;
  return WebKit::WebPreferences::setMinimumFontSize((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetMinimumFontSize(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key);
}

void *WKPreferencesSetCookieEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCookieEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCookieEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetEditableLinkBehavior(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  if (a2 >= 4) {
    unsigned int v3 = 4;
  }
  else {
    unsigned int v3 = a2;
  }
  unsigned int v5 = v3;
  return WebKit::WebPreferences::setEditableLinkBehavior((WebKit::WebPreferences *)a1, &v5);
}

uint64_t WKPreferencesGetEditableLinkBehavior(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  unsigned int v1 = WebKit::valueForKey<unsigned int>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key);
  if (v1 >= 5) {
    return 4;
  }
  else {
    return v1;
  }
}

WTF::StringImpl *WKPreferencesSetDefaultTextEncodingName(void *a1, void *a2)
{
  if (a1)
  {
    unsigned int v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setDefaultTextEncodingName(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyDefaultTextEncodingName(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  unsigned int v3 = v5;
  unsigned int v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

void *WKPreferencesSetDeveloperExtrasEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDeveloperExtrasEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDeveloperExtrasEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetJavaScriptRuntimeFlags(void *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setJavaScriptRuntimeFlags((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptRuntimeFlags(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<unsigned int>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key);
}

void *WKPreferencesSetTextAreasAreResizable(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setTextAreasAreResizable((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTextAreasAreResizable(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, a3);
}

void *WKPreferencesSetAcceleratedDrawingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAcceleratedDrawingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAcceleratedDrawingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetCanvasUsesAcceleratedDrawing(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCanvasUsesAcceleratedDrawing((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCanvasUsesAcceleratedDrawing(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, a3);
}

void *WKPreferencesSetAcceleratedCompositingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAcceleratedCompositingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAcceleratedCompositingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetCompositingBordersVisible(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCompositingBordersVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCompositingBordersVisible(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, a3);
}

void *WKPreferencesSetCompositingRepaintCountersVisible(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCompositingRepaintCountersVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCompositingRepaintCountersVisible(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, a3);
}

void *WKPreferencesSetTiledScrollingIndicatorVisible(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setTiledScrollingIndicatorVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTiledScrollingIndicatorVisible(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, a3);
}

void *WKPreferencesSetWebGLEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWebGLEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebGLEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, a3);
}

void *WKPreferencesSetNeedsSiteSpecificQuirks(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setNeedsSiteSpecificQuirks((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetNeedsSiteSpecificQuirks(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, a3);
}

void *WKPreferencesSetForceFTPDirectoryListings(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setForceFTPDirectoryListings((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetForceFTPDirectoryListings(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, a3);
}

WTF::StringImpl *WKPreferencesSetFTPDirectoryTemplatePath(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setFTPDirectoryTemplatePath(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyFTPDirectoryTemplatePath(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  unsigned int v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

void *WKPreferencesSetTabsToLinks(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setTabsToLinks((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTabsToLinks(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, a3);
}

void *WKPreferencesSetDNSPrefetchingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDNSPrefetchingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDNSPrefetchingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetAuthorAndUserStylesEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAuthorAndUserStylesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAuthorAndUserStylesEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, a3);
}

void *WKPreferencesSetShouldPrintBackgrounds(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldPrintBackgrounds((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldPrintBackgrounds(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, a3);
}

void *WKPreferencesSetDOMTimersThrottlingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDOMTimersThrottlingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDOMTimersThrottlingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetWebArchiveDebugModeEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWebArchiveDebugModeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebArchiveDebugModeEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, a3);
}

void *WKPreferencesSetLocalFileContentSniffingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLocalFileContentSniffingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLocalFileContentSniffingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetPageCacheEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setUsesBackForwardCache((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPageCacheEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, a3);
}

void *WKPreferencesSetDOMPasteAllowed(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDOMPasteAllowed((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDOMPasteAllowed(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, a3);
}

void *WKPreferencesSetJavaScriptCanAccessClipboard(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setJavaScriptCanAccessClipboard((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptCanAccessClipboard(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, a3);
}

void *WKPreferencesSetFullScreenEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setFullScreenEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetFullScreenEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, a3);
}

void *WKPreferencesSetAsynchronousSpellCheckingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAsynchronousSpellCheckingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAsynchronousSpellCheckingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetAVFoundationEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAVFoundationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAVFoundationEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, a3);
}

void *WKPreferencesSetWebSecurityEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWebSecurityEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebSecurityEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, a3);
}

void *WKPreferencesSetUniversalAccessFromFileURLsAllowed(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAllowUniversalAccessFromFileURLs((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetUniversalAccessFromFileURLsAllowed(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, a3);
}

void *WKPreferencesSetFileAccessFromFileURLsAllowed(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAllowFileAccessFromFileURLs((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetFileAccessFromFileURLsAllowed(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, a3);
}

void *WKPreferencesSetTopNavigationToDataURLsAllowed(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAllowTopNavigationToDataURLs((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTopNavigationToDataURLsAllowed(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, a3);
}

void *WKPreferencesSetNeedsStorageAccessFromFileURLsQuirk(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setNeedsStorageAccessFromFileURLsQuirk((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetNeedsStorageAccessFromFileURLsQuirk(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, a3);
}

void *WKPreferencesSetMediaPlaybackRequiresUserGesture(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setRequiresUserGestureForMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaPlaybackRequiresUserGesture(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, a3);
}

void *WKPreferencesSetVideoPlaybackRequiresUserGesture(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setRequiresUserGestureForVideoPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetVideoPlaybackRequiresUserGesture(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, a3);
}

void *WKPreferencesSetAudioPlaybackRequiresUserGesture(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setRequiresUserGestureForAudioPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAudioPlaybackRequiresUserGesture(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, a3);
}

void *WKPreferencesSetMainContentUserGestureOverrideEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMainContentUserGestureOverrideEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMainContentUserGestureOverrideEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetManagedMediaSourceLowThreshold(void *a1, double a2)
{
  double v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setManagedMediaSourceLowThreshold((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetManagedMediaSourceLowThreshold(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<double>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key);
}

uint64_t WKPreferencesSetManagedMediaSourceHighThreshold(void *a1, double a2)
{
  double v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setManagedMediaSourceHighThreshold((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetManagedMediaSourceHighThreshold(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<double>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key);
}

void *WKPreferencesSetMediaPlaybackAllowsInline(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAllowsInlineMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaPlaybackAllowsInline(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, a3);
}

void *WKPreferencesSetInlineMediaPlaybackRequiresPlaysInlineAttribute(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setInlineMediaPlaybackRequiresPlaysInlineAttribute((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetInlineMediaPlaybackRequiresPlaysInlineAttribute(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, a3);
}

void *WKPreferencesSetBeaconAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setBeaconAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetBeaconAPIEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, a3);
}

void *WKPreferencesSetDirectoryUploadEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDirectoryUploadEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDirectoryUploadEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, a3);
}

void *WKPreferencesSetMediaControlsScaleWithPageZoom(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaControlsScaleWithPageZoom((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaControlsScaleWithPageZoom(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, a3);
}

void *WKPreferencesSetWebAuthenticationEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWebAuthenticationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebAuthenticationEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, a3);
}

void *WKPreferencesSetInvisibleMediaAutoplayPermitted(void *a1, char a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  BOOL v4 = a2 ^ 1;
  return WebKit::WebPreferences::setInvisibleAutoplayNotPermitted((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetInvisibleMediaAutoplayPermitted(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, a3) ^ 1;
}

void *WKPreferencesSetShowsToolTipOverTruncatedText(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShowsToolTipOverTruncatedText((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShowsToolTipOverTruncatedText(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, a3);
}

void *WKPreferencesSetMockScrollbarsEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMockScrollbarsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMockScrollbarsEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, a3);
}

void *WKPreferencesSetAttachmentElementEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAttachmentElementEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAttachmentElementEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3);
}

void *WKPreferencesSetWebAudioEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWebAudioEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebAudioEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, a3);
}

void *WKPreferencesSetSuppressesIncrementalRendering(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setSuppressesIncrementalRendering((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSuppressesIncrementalRendering(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, a3);
}

void *WKPreferencesSetBackspaceKeyNavigationEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setBackspaceKeyNavigationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetBackspaceKeyNavigationEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, a3);
}

void *WKPreferencesSetCaretBrowsingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCaretBrowsingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaretBrowsingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetShouldDisplaySubtitles(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldDisplaySubtitles((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldDisplaySubtitles(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, a3);
}

void *WKPreferencesSetShouldDisplayCaptions(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldDisplayCaptions((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldDisplayCaptions(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, a3);
}

void *WKPreferencesSetShouldDisplayTextDescriptions(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldDisplayTextDescriptions((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldDisplayTextDescriptions(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, a3);
}

void *WKPreferencesSetNotificationsEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setNotificationsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetNotificationsEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, a3);
}

void *WKPreferencesSetShouldRespectImageOrientation(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldRespectImageOrientation((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldRespectImageOrientation(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, a3);
}

uint64_t WKPreferencesSetStorageBlockingPolicy(void *a1, int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  unsigned int v3 = a2 == 1;
  if (a2 == 2) {
    unsigned int v3 = 2;
  }
  unsigned int v5 = v3;
  return WebKit::WebPreferences::setStorageBlockingPolicy((WebKit::WebPreferences *)a1, &v5);
}

uint64_t WKPreferencesGetStorageBlockingPolicy(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  int v1 = WebKit::valueForKey<unsigned int>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key);
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

void *WKPreferencesSetDiagnosticLoggingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDiagnosticLoggingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDiagnosticLoggingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetInteractiveFormValidationEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setInteractiveFormValidationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetInteractiveFormValidationEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, a3);
}

void *WKPreferencesSetScrollingPerformanceLoggingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setScrollingPerformanceTestingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetScrollingPerformanceLoggingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetPDFPluginEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setPDFPluginEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPDFPluginEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, a3);
}

void *WKPreferencesSetEncodingDetectorEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setUsesEncodingDetector((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetEncodingDetectorEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, a3);
}

void *WKPreferencesSetTextAutosizingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setTextAutosizingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTextAutosizingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetTextAutosizingUsesIdempotentMode(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setTextAutosizingUsesIdempotentMode((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTextAutosizingUsesIdempotentMode(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, a3);
}

void *WKPreferencesSetAggressiveTileRetentionEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAggressiveTileRetentionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAggressiveTileRetentionEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, a3);
}

void *WKPreferencesSetLogsPageMessagesToSystemConsoleEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLogsPageMessagesToSystemConsoleEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLogsPageMessagesToSystemConsoleEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, a3);
}

void *WKPreferencesSetPageVisibilityBasedProcessSuppressionEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setPageVisibilityBasedProcessSuppressionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPageVisibilityBasedProcessSuppressionEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, a3);
}

void *WKPreferencesSetSmartInsertDeleteEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setSmartInsertDeleteEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSmartInsertDeleteEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, a3);
}

void *WKPreferencesSetSelectTrailingWhitespaceEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setSelectTrailingWhitespaceEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSelectTrailingWhitespaceEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, a3);
}

void *WKPreferencesSetShowsURLsInToolTipsEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShowsURLsInToolTipsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShowsURLsInToolTipsEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, a3);
}

void *WKPreferencesSetHiddenPageDOMTimerThrottlingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingEnabled((WebKit::WebPreferences *)a1, &v3);
}

void *WKPreferencesSetHiddenPageDOMTimerThrottlingAutoIncreases(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingAutoIncreases((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHiddenPageDOMTimerThrottlingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesGetHiddenPageDOMTimerThrottlingAutoIncreases(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, a3);
}

void *WKPreferencesSetHiddenPageCSSAnimationSuspensionEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setHiddenPageCSSAnimationSuspensionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHiddenPageCSSAnimationSuspensionEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetIncrementalRenderingSuppressionTimeout(void *a1, double a2)
{
  double v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setIncrementalRenderingSuppressionTimeout((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetIncrementalRenderingSuppressionTimeout(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<double>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key);
}

void *WKPreferencesSetThreadedScrollingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setThreadedScrollingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetThreadedScrollingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetLegacyLineLayoutVisualCoverageEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLegacyLineLayoutVisualCoverageEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLegacyLineLayoutVisualCoverageEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, a3);
}

void *WKPreferencesSetContentChangeObserverEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setContentChangeObserverEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetContentChangeObserverEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, a3);
}

void *WKPreferencesSetUseGiantTiles(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setUseGiantTiles((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetUseGiantTiles(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, a3);
}

void *WKPreferencesSetMediaDevicesEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaDevicesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaDevicesEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, a3);
}

void *WKPreferencesSetMediaStreamEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaStreamEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaStreamEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, a3);
}

void *WKPreferencesSetPeerConnectionEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setPeerConnectionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPeerConnectionEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, a3);
}

void *WKPreferencesSetSpatialNavigationEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setSpatialNavigationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSpatialNavigationEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, a3);
}

void *WKPreferencesSetMediaSourceEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaSourceEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaSourceEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, a3);
}

void *WKPreferencesSetSourceBufferChangeTypeEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setSourceBufferChangeTypeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSourceBufferChangeTypeEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, a3);
}

void *WKPreferencesSetViewGestureDebuggingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setViewGestureDebuggingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetViewGestureDebuggingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetShouldConvertPositionStyleOnCopy(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldConvertPositionStyleOnCopy((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldConvertPositionStyleOnCopy(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, a3);
}

void *WKPreferencesSetTelephoneNumberParsingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setTelephoneNumberParsingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTelephoneNumberParsingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetEnableInheritURIQueryComponent(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setEnableInheritURIQueryComponent((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetEnableInheritURIQueryComponent(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, a3);
}

void *WKPreferencesSetServiceControlsEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setServiceControlsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetServiceControlsEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, a3);
}

void *WKPreferencesSetImageControlsEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setImageControlsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetImageControlsEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key, a3);
}

void *WKPreferencesSetGamepadsEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setGamepadsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetGamepadsEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, a3);
}

void *WKPreferencesSetHighlightAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setHighlightAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHighlightAPIEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetMinimumZoomFontSize(void *a1, double a2)
{
  double v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMinimumZoomFontSize((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetMinimumZoomFontSize(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<double>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key);
}

uint64_t WKPreferencesSetVisibleDebugOverlayRegions(void *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setVisibleDebugOverlayRegions((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetVisibleDebugOverlayRegions(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<unsigned int>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key);
}

void *WKPreferencesSetMetaRefreshEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setHTTPEquivEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMetaRefreshEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, a3);
}

void *WKPreferencesSetHTTPEquivEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setHTTPEquivEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHTTPEquivEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, a3);
}

void *WKPreferencesSetAllowsAirPlayForMediaPlayback(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAllowsAirPlayForMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAllowsAirPlayForMediaPlayback(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, a3);
}

uint64_t WKPreferencesSetUserInterfaceDirectionPolicy(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  unsigned int v4 = a2;
  return WebKit::WebPreferences::setUserInterfaceDirectionPolicy((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetUserInterfaceDirectionPolicy(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<unsigned int>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key);
}

void *WKPreferencesSetResourceUsageOverlayVisible(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setResourceUsageOverlayVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetResourceUsageOverlayVisible(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, a3);
}

void *WKPreferencesSetMockCaptureDevicesEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMockCaptureDevicesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMockCaptureDevicesEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

void *WKPreferencesSetGetUserMediaRequiresFocus(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setGetUserMediaRequiresFocus((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetGetUserMediaRequiresFocus(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, a3);
}

void *WKPreferencesSetICECandidateFilteringEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setICECandidateFilteringEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetICECandidateFilteringEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, a3);
}

void *WKPreferencesSetEnumeratingAllNetworkInterfacesEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setEnumeratingAllNetworkInterfacesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetEnumeratingAllNetworkInterfacesEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, a3);
}

void *WKPreferencesSetMediaCaptureRequiresSecureConnection(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaCaptureRequiresSecureConnection((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaCaptureRequiresSecureConnection(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, a3);
}

uint64_t WKPreferencesSetInactiveMediaCaptureStreamRepromptIntervalInMinutes(void *a1, double a2)
{
  double v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setInactiveMediaCaptureStreamRepromptIntervalInMinutes((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetInactiveMediaCaptureStreamRepromptIntervalInMinutes(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v1 = (uint64_t)a1 + 64;
  uint64_t v2 = (uint64_t)a1 + 40;

  return WebKit::valueForKey<double>(v2, v1, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key);
}

void *WKPreferencesSetDataTransferItemsEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDataTransferItemsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDataTransferItemsEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, a3);
}

void *WKPreferencesSetCustomPasteboardDataEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCustomPasteboardDataEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCustomPasteboardDataEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, a3);
}

void *WKPreferencesSetWriteRichTextDataWhenCopyingOrDragging(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWriteRichTextDataWhenCopyingOrDragging((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWriteRichTextDataWhenCopyingOrDragging(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, a3);
}

void *WKPreferencesSetWebShareEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWebShareEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebShareEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, a3);
}

void *WKPreferencesSetDownloadAttributeEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setDownloadAttributeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDownloadAttributeEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, a3);
}

void *WKPreferencesSetWebRTCPlatformCodecsInGPUProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setWebRTCPlatformCodecsInGPUProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebRTCPlatformCodecsInGPUProcessEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, a3);
}

void *WKPreferencesSetIsAccessibilityIsolatedTreeEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setIsAccessibilityIsolatedTreeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetIsAccessibilityIsolatedTreeEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, a3);
}

void *WKPreferencesSetAllowsPictureInPictureMediaPlayback(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAllowsPictureInPictureMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAllowsPictureInPictureMediaPlayback(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, a3);
}

uint64_t WKPreferencesGetApplePayEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, a3);
}

void *WKPreferencesSetApplePayEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setApplePayEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetApplePayCapabilityDisclosureAllowed(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, a3);
}

void *WKPreferencesSetApplePayCapabilityDisclosureAllowed(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setApplePayCapabilityDisclosureAllowed((WebKit::WebPreferences *)a1, &v3);
}

void *WKPreferencesSetLinkPreloadEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLinkPreloadEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLinkPreloadEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, a3);
}

void *WKPreferencesSetMediaPreloadingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaPreloadingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaPreloadingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetExposeSpeakersEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setExposeSpeakersEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetExposeSpeakersEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, a3);
}

void *WKPreferencesSetLargeImageAsyncDecodingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLargeImageAsyncDecodingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLargeImageAsyncDecodingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetAnimatedImageAsyncDecodingEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAnimatedImageAsyncDecodingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAnimatedImageAsyncDecodingEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, a3);
}

void *WKPreferencesSetShouldSuppressKeyboardInputDuringProvisionalNavigation(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldSuppressTextInputFromEditingDuringProvisionalNavigation((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldSuppressKeyboardInputDuringProvisionalNavigation(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, a3);
}

void *WKPreferencesSetMediaUserGestureInheritsFromDocument(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaUserGestureInheritsFromDocument((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaUserGestureInheritsFromDocument(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, a3);
}

WTF::StringImpl *WKPreferencesSetMediaContentTypesRequiringHardwareSupport(void *a1, void *a2)
{
  if (a1)
  {
    BOOL v3 = (WebKit::WebPreferences *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setMediaContentTypesRequiringHardwareSupport(v3, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPreferencesCopyMediaContentTypesRequiringHardwareSupport(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = v5;
  unsigned int v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKPreferencesGetLegacyEncryptedMediaAPIEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, a3);
}

void *WKPreferencesSetLegacyEncryptedMediaAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setLegacyEncryptedMediaAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAllowMediaContentTypesRequiringHardwareSupportAsFallback(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, a3);
}

void *WKPreferencesSetAllowMediaContentTypesRequiringHardwareSupportAsFallback(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setAllowMediaContentTypesRequiringHardwareSupportAsFallback((WebKit::WebPreferences *)a1, &v3);
}

void *WKPreferencesSetCSSOMViewScrollingAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCSSOMViewScrollingAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCSSOMViewScrollingAPIEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, a3);
}

void *WKPreferencesSetShouldAllowUserInstalledFonts(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldAllowUserInstalledFonts((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldAllowUserInstalledFonts(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, a3);
}

void *WKPreferencesSetMediaCapabilitiesEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setMediaCapabilitiesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaCapabilitiesEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, a3);
}

void *WKPreferencesSetRestrictedHTTPResponseAccess(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setRestrictedHTTPResponseAccess((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetRestrictedHTTPResponseAccess(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, a3);
}

void *WKPreferencesSetColorFilterEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setColorFilterEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetColorFilterEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, a3);
}

void *WKPreferencesSetProcessSwapOnNavigationEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setProcessSwapOnCrossSiteNavigationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetProcessSwapOnNavigationEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, a3);
}

void *WKPreferencesSetPunchOutWhiteBackgroundsInDarkMode(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setPunchOutWhiteBackgroundsInDarkMode((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPunchOutWhiteBackgroundsInDarkMode(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, a3);
}

void *WKPreferencesSetCaptureAudioInUIProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCaptureAudioInUIProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureAudioInUIProcessEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, a3);
}

void *WKPreferencesSetCaptureAudioInGPUProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCaptureAudioInGPUProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureAudioInGPUProcessEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, a3);
}

void *WKPreferencesSetCaptureVideoInUIProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCaptureVideoInUIProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureVideoInUIProcessEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, a3);
}

void *WKPreferencesSetCaptureVideoInGPUProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setCaptureVideoInGPUProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureVideoInGPUProcessEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, a3);
}

void *WKPreferencesSetVP9DecoderEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setVP9DecoderEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetVP9DecoderEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesGetRemotePlaybackEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, a3);
}

void *WKPreferencesSetRemotePlaybackEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setRemotePlaybackEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldUseServiceWorkerShortTimeout(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, a3);
}

void *WKPreferencesSetShouldUseServiceWorkerShortTimeout(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setShouldUseServiceWorkerShortTimeout((WebKit::WebPreferences *)a1, &v3);
}

void *WKPreferencesSetRequestVideoFrameCallbackEnabled(void *a1, BOOL a2)
{
  BOOL v3 = a2;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return WebKit::WebPreferences::setRequestVideoFrameCallbackEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetRequestVideoFrameCallbackEnabled(char *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    a1 = (char *)[a1 _apiObject];
  }
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BOOL v3 = (WebKit::WebPreferencesStore *)(a1 + 40);

  return WebKit::WebPreferencesStore::getBoolValueForKey(v3, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesGetPluginsEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetSubpixelAntialiasedLayerTextEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPageCacheSupportsPlugins()
{
  return 0;
}

uint64_t WKPreferencesGetAsynchronousPluginInitializationEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetAsynchronousPluginInitializationEnabledForAllPlugins()
{
  return 0;
}

uint64_t WKPreferencesGetArtificialPluginInitializationDelayEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPlugInSnapshottingEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPluginSandboxProfilesEnabledForAllPlugins()
{
  return 0;
}

uint64_t WKPreferencesGetSnapshotAllPlugIns()
{
  return 0;
}

uint64_t WKPreferencesGetAutostartOriginPlugInSnapshottingEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPrimaryPlugInSnapshotDetectionEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetAllowCrossOriginSubresourcesToAskForCredentials()
{
  return 0;
}

uint64_t WKPreferencesGetPaintTimingEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetRequestAnimationFrameEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetAVFoundationNSURLSessionEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetStorageAccessAPIEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetPrivateBrowsingEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetIgnoreViewportScalingConstraints()
{
  return 0;
}

uint64_t WKPreferencesGetKeygenElementEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetNewBlockInsideInlineModelEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetLongMousePressEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetAntialiasedFontDilationEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetHixie76WebSocketProtocolEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetFetchAPIEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetFetchAPIKeepAliveEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetIntersectionObserverEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetIsSecureContextAttributeEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetUserTimingEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetResourceTimingEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetCrossOriginResourcePolicyEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetSubpixelCSSOMElementMetricsEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetWebSQLDisabled()
{
  return 1;
}

uint64_t WKPreferencesGetXSSAuditorEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetJavaEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPaginateDuringLayoutEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetLoadsSiteIconsIgnoringImageLoadingPreference()
{
  return 0;
}

uint64_t WKPreferencesGetOfflineWebApplicationCacheEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetMenuItemElementEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetSyntheticEditingCommandsEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetReferrerPolicyAttributeEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetServerTimingEnabled()
{
  return 1;
}

uint64_t WKProtectionSpaceGetTypeID()
{
  return 14;
}

uint64_t WKProtectionSpaceCopyHost(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKProtectionSpaceGetPort(void *a1)
{
  return *(unsigned int *)([a1 _apiObject] + 32);
}

uint64_t WKProtectionSpaceCopyRealm(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKProtectionSpaceGetIsProxy(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = (WebCore::ProtectionSpaceBase *)(a1 + 16);
  return WebCore::ProtectionSpaceBase::isProxy(v2);
}

uint64_t WKProtectionSpaceGetServerType(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  if (*(unsigned __int8 *)(v1 + 36) - 2 >= 7) {
    return 1;
  }
  else {
    return (*(unsigned char *)(v1 + 36) - 2) + 2;
  }
}

uint64_t WKProtectionSpaceGetReceivesCredentialSecurely(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = a1 + 16;
  return MEMORY[0x1F4174D40](v2);
}

uint64_t WKProtectionSpaceGetAuthenticationScheme(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  if (*(unsigned __int8 *)(v1 + 37) - 1 < 9) {
    return (*(unsigned char *)(v1 + 37) - 1) + 1;
  }
  else {
    return 100;
  }
}

uint64_t API::Array::at<API::URL>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 28) <= a2) {
    goto LABEL_8;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 8 * a2);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16))(result) == 24)
    {
      if (*(unsigned int *)(a1 + 28) > a2) {
        return *(void *)(*(void *)(a1 + 16) + 8 * a2);
      }
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198F7CAD0);
    }
    return 0;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 48);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      WTF::String::operator=((uint64_t *)a2, (WTF::StringImpl **)a3);
      char v7 = *(unsigned char *)(a3 + 40);
      __n128 result = *(__n128 *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(__n128 *)(a2 + 24) = result;
      *(unsigned char *)(a2 + 40) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EE9E0F68[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 48) = -1;
  char v9 = *(WTF::StringImpl **)a3;
  if (*(void *)a3) {
    *(_DWORD *)v9 += 2;
  }
  *(void *)uint64_t v4 = v9;
  __n128 result = *(__n128 *)(a3 + 8);
  long long v10 = *(_OWORD *)(a3 + 24);
  *(unsigned char *)(v4 + 40) = *(unsigned char *)(a3 + 40);
  *(_OWORD *)(v4 + 24) = v10;
  *(__n128 *)(v4 + 8) = result;
  *(_DWORD *)(v4 + 48) = 1;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t *a2, WTF::StringImpl **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(*a1, a2, a3);
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 48)) {
    return (unsigned int *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__emplace[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a3);
  }
  else {
    return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__emplace[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9E0F68[v4])(&v8, a1);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v5 = (WTF *)*(unsigned int *)(a2 + 12);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  if (v5)
  {
    uint64_t v6 = (void *)WTF::fastMalloc(v5);
    *(_DWORD *)(a1 + 8) = v5;
    *(void *)a1 = v6;
    memcpy(v6, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    return WTF::String::operator=(a2, a3);
  }
  else
  {
    v4[0] = a1;
    v4[1] = a3;
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(std::__variant_detail::__alt<2ul,WTF::String> &,WTF::String const&)::{unnamed type#1}::operator()[abi:sn180100](v4);
  }
}

void *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(std::__variant_detail::__alt<2ul,WTF::String> &,WTF::String const&)::{unnamed type#1}::operator()[abi:sn180100](void *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = (_DWORD **)result[1];
  uint64_t v3 = *(unsigned int *)(*result + 48);
  if (v3 != -1) {
    __n128 result = (void *)((uint64_t (*)(char *, uint64_t))off_1EE9E0F68[v3])(&v5, v1);
  }
  uint64_t v4 = *v2;
  if (*v2) {
    *v4 += 2;
  }
  *(void *)uint64_t v1 = v4;
  *(_DWORD *)(v1 + 48) = 2;
  return result;
}

void WKPageSetPageFindClient::FindClient::didCountStringMatches(WKPageSetPageFindClient::FindClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v4 = (void (*)(uint64_t, void, uint64_t, void))*((void *)this + 5);
  if (v4)
  {
    if (a2) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
    char v8 = *a3;
    if (*a3) {
      *(_DWORD *)v8 += 2;
    }
    float v12 = v8;
    API::String::create(&v12, &v13);
    long long v10 = v12;
    char v11 = v13;
    float v12 = 0;
    uint64_t v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11) {
          goto LABEL_10;
        }
        goto LABEL_13;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11)
    {
LABEL_10:
      v4(v7, *((void *)v11 + 1), a4, *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v11 + 1));
      return;
    }
LABEL_13:
    v4(v7, 0, a4, *((void *)this + 2));
  }
}

void WKPageSetPageFindClient::FindClient::didFindString(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  char v5 = *(void (**)(uint64_t, void, uint64_t, void))(a1 + 24);
  if (v5)
  {
    if (a2) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    char v9 = *a3;
    if (*a3) {
      *(_DWORD *)v9 += 2;
    }
    uint64_t v13 = v9;
    API::String::create(&v13, &v14);
    char v11 = v13;
    float v12 = v14;
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v10);
        if (v12) {
          goto LABEL_10;
        }
        goto LABEL_13;
      }
      *(_DWORD *)v11 -= 2;
    }
    if (v12)
    {
LABEL_10:
      v5(v8, *((void *)v12 + 1), a5, *(void *)(a1 + 16));
      CFRelease(*((CFTypeRef *)v12 + 1));
      return;
    }
LABEL_13:
    v5(v8, 0, a5, *(void *)(a1 + 16));
  }
}

void WKPageSetPageFindClient::FindClient::didFailToFindString(WKPageSetPageFindClient::FindClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (void (*)(uint64_t, void, void))*((void *)this + 4);
  if (v3)
  {
    if (a2) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *a3;
    if (*a3) {
      *(_DWORD *)v6 += 2;
    }
    long long v10 = v6;
    API::String::create(&v10, &v11);
    uint64_t v8 = v10;
    char v9 = v11;
    long long v10 = 0;
    char v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9) {
          goto LABEL_10;
        }
        goto LABEL_13;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_10:
      v3(v5, *((void *)v9 + 1), *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_13:
    v3(v5, 0, *((void *)this + 2));
  }
}

uint64_t WKPageSetPageFindMatchesClient::FindMatchesClient::didFindStringMatches(uint64_t result, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(result + 24)) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v10 = *(unsigned int *)(a4 + 12);
  if (!v10) {
    goto LABEL_14;
  }
  if (v10 >> 29)
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x198F7D5FCLL);
  }
  uint64_t v11 = WTF::fastMalloc((WTF *)(8 * v10));
  LODWORD(v41) = v10;
  uint64_t v40 = v11;
  if (!*(_DWORD *)(a4 + 12)) {
    goto LABEL_14;
  }
  uint64_t v12 = v11;
  uint64_t v38 = a3;
  unsigned int v39 = a5;
  uint64_t v13 = 0;
  do
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)a4 + 16 * v13;
    long long v42 = 0;
    uint64_t v43 = 0;
    uint64_t v16 = *(unsigned int *)(v15 + 12);
    if (!v16) {
      goto LABEL_12;
    }
    if (v16 >> 29)
    {
      __break(0xC471u);
      goto LABEL_34;
    }
    long long v17 = (WebKit *)WTF::fastMalloc((WTF *)(8 * v16));
    LODWORD(v43) = v16;
    long long v42 = v17;
    if (*(_DWORD *)(v15 + 12))
    {
      uint64_t v18 = v17;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = v20;
        uint64_t v22 = (int *)(*(void *)v15 + v19);
        double v23 = (double)*v22;
        double v24 = (double)v22[1];
        double v25 = (double)v22[2];
        double v26 = (double)v22[3];
        char v27 = (double *)API::Object::newObject(0x30uLL, 38);
        *(void *)char v27 = &unk_1EE9D1E28;
        WebKit::InitializeWebKit2((WebKit *)v27);
        *(void *)char v27 = &unk_1EE9B3EA8;
        _OWORD v27[2] = v23;
        v27[3] = v24;
        float v27[4] = v25;
        v27[5] = v26;
        uint64_t v20 = v21 + 1;
        *((void *)v18 + v21) = v27;
        v19 += 16;
      }
      while (v21 + 1 < (unint64_t)*(unsigned int *)(v15 + 12));
      HIDWORD(v43) = v21 + 1;
    }
LABEL_12:
    API::Array::create((uint64_t *)&v42, (uint64_t *)&v44);
    uint64_t v28 = v44;
    WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v29);
    uint64_t v13 = v14 + 1;
    *(void *)(v12 + 8 * v14) = v28;
  }
  while (v14 + 1 < (unint64_t)*(unsigned int *)(a4 + 12));
  HIDWORD(v41) = v14 + 1;
  a5 = v39;
  a3 = v38;
LABEL_14:
  if (a2) {
    a2 = *(void *)(a2 + 8);
  }
  __int16 v30 = *(void (**)(uint64_t, uint64_t, void, uint64_t, void))(v9 + 24);
  long long v31 = *a3;
  if (*a3) {
    *(_DWORD *)v31 += 2;
  }
  uint64_t v44 = v31;
  API::String::create(&v44, &v42);
  char v33 = v42;
  long long v42 = 0;
  int v34 = v44;
  uint64_t v44 = 0;
  if (!v34)
  {
LABEL_21:
    if (!v33) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v34, v32);
  if (v33)
  {
LABEL_22:
    uint64_t v35 = *((void *)v33 + 1);
    goto LABEL_23;
  }
LABEL_29:
  uint64_t v35 = 0;
LABEL_23:
  API::Array::create(&v40, (uint64_t *)&v42);
  uint64_t v36 = v42;
  if (v42)
  {
    v30(a2, v35, *((void *)v42 + 1), a5, *(void *)(v9 + 16));
    CFRelease(*((CFTypeRef *)v36 + 1));
    if (v33) {
      goto LABEL_25;
    }
  }
  else
  {
    v30(a2, v35, 0, a5, *(void *)(v9 + 16));
    if (v33) {
LABEL_25:
    }
      CFRelease(*((CFTypeRef *)v33 + 1));
  }
  return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v37);
}

uint64_t WKPageSetPageFindMatchesClient::FindMatchesClient::didGetImageForMatchResult(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebImage *a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 32);
  if (v4)
  {
    if (a2)
    {
      uint64_t v5 = *((void *)a2 + 1);
      if (a3)
      {
LABEL_4:
        uint64_t v6 = *((void *)a3 + 1);
        return v4(v5, v6, a4, *(void *)(this + 16));
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (a3) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = 0;
    return v4(v5, v6, a4, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didStartProvisionalLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *((void *)a3 + 1);
    if (a5) {
      uint64_t v8 = *((void *)a5 + 1);
    }
    else {
      uint64_t v8 = 0;
    }
    return v5(v6, v7, v8, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didReceiveServerRedirectForProvisionalLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 32);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *((void *)a3 + 1);
    if (a5) {
      uint64_t v8 = *((void *)a5 + 1);
    }
    else {
      uint64_t v8 = 0;
    }
    return v5(v6, v7, v8, *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPageLoaderClient::LoaderClient::didFailProvisionalLoadWithErrorForFrame(WKPageSetPageLoaderClient::LoaderClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, const WebCore::ResourceError *a5, API::Object *a6)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))*((void *)this + 5);
  if (!v6) {
    return;
  }
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v12 = (API::Error *)API::Object::newObject(0x60uLL, 10);
  if (API::Error::Error(v12, a5))
  {
    uint64_t v13 = *((void *)v12 + 1);
    if (a6)
    {
LABEL_4:
      uint64_t v14 = *((void *)a6 + 1);
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (a6) {
      goto LABEL_4;
    }
  }
  uint64_t v14 = 0;
LABEL_5:
  v6(v10, v11, v13, v14, *((void *)this + 2));
  if (v12)
  {
    uint64_t v15 = (const void *)*((void *)v12 + 1);
    CFRelease(v15);
  }
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didFinishLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 64);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *((void *)a3 + 1);
    if (a5) {
      uint64_t v8 = *((void *)a5 + 1);
    }
    else {
      uint64_t v8 = 0;
    }
    return v5(v6, v7, v8, *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPageLoaderClient::LoaderClient::didFailLoadWithErrorForFrame(WKPageSetPageLoaderClient::LoaderClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, const WebCore::ResourceError *a5, API::Object *a6)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))*((void *)this + 9);
  if (!v6) {
    return;
  }
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v12 = (API::Error *)API::Object::newObject(0x60uLL, 10);
  if (API::Error::Error(v12, a5))
  {
    uint64_t v13 = *((void *)v12 + 1);
    if (a6)
    {
LABEL_4:
      uint64_t v14 = *((void *)a6 + 1);
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (a6) {
      goto LABEL_4;
    }
  }
  uint64_t v14 = 0;
LABEL_5:
  v6(v10, v11, v13, v14, *((void *)this + 2));
  if (v12)
  {
    uint64_t v15 = (const void *)*((void *)v12 + 1);
    CFRelease(v15);
  }
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didFirstVisuallyNonEmptyLayoutForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::Object *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 104);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *((void *)a3 + 1);
    if (a4) {
      uint64_t v7 = *((void *)a4 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
    return v4(v5, v6, v7, *(void *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didReachLayoutMilestone(uint64_t result, uint64_t a2, __int16 a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void, void))(result + 280);
  if (v3)
  {
    int v4 = (a3 & 1) != 0;
    if ((a3 & 2) != 0) {
      v4 |= 2u;
    }
    if ((a3 & 4) != 0) {
      v4 |= 4u;
    }
    if ((a3 & 0x10) != 0) {
      v4 |= 0x10u;
    }
    if ((a3 & 0x20) != 0) {
      v4 |= 0x20u;
    }
    if ((a3 & 0x80) != 0) {
      v4 |= 0x80u;
    }
    return v3(*(void *)(a2 + 8), v4 | a3 & 0x100u, 0, *(void *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::shouldKeepCurrentBackForwardListItemInList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void))(a1 + 328);
  if (v3) {
    return v3(*(void *)(a2 + 8), *(void *)(a3 + 8), *(void *)(a1 + 16));
  }
  else {
    return 1;
  }
}

BOOL WKPageSetPageLoaderClient::LoaderClient::processDidCrash(WKPageSetPageLoaderClient::LoaderClient *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2 = (void (*)(void, void))*((void *)this + 24);
  if (v2) {
    v2(*((void *)a2 + 1), *((void *)this + 2));
  }
  return v2 != 0;
}

void WKPageSetPageLoaderClient::LoaderClient::didChangeBackForwardList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 200);
  if (v4)
  {
    uint64_t v9 = *((unsigned int *)a4 + 3);
    if (v9)
    {
      uint64_t v22 = 0;
      if (v9 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v10 = WTF::fastMalloc((WTF *)(8 * v9));
      LODWORD(v22) = v9;
      uint64_t v21 = v10;
      uint64_t v11 = *((unsigned int *)a4 + 3);
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *a4;
        uint64_t v14 = 8 * v11;
        do
        {
          uint64_t v15 = *(void *)(v13 + 8 * v12);
          *(void *)(v13 + 8 * v12) = 0;
          *(void *)(v10 + 8 * v12++) = v15;
          v14 -= 8;
        }
        while (v14);
        HIDWORD(v22) = v12;
      }
      API::Array::create(&v21, &v20);
      uint64_t v16 = v20;
      WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v17);
      int v4 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 200);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v18 = *(void *)(a2 + 8);
    if (a3)
    {
      uint64_t v19 = *(void *)(a3 + 8);
      if (v16)
      {
LABEL_12:
        v4(v18, v19, *(void *)(v16 + 8), *(void *)(a1 + 16));
        CFRelease(*(CFTypeRef *)(v16 + 8));
        return;
      }
    }
    else
    {
      uint64_t v19 = 0;
      if (v16) {
        goto LABEL_12;
      }
    }
    v4(v18, v19, 0, *(void *)(a1 + 16));
  }
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didCommitLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(this + 48);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *((void *)a3 + 1);
    if (a5) {
      uint64_t v8 = *((void *)a5 + 1);
    }
    else {
      uint64_t v8 = 0;
    }
    return v5(v6, v7, v8, *(void *)(this + 16));
  }
  return this;
}

void WKPageSetPagePolicyClient::PolicyClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, const String *a6, const String *a7, uint64_t *a8)
{
  if (*(void *)(a1 + 24) || *(void *)(a1 + 56) || *(void *)(a1 + 72))
  {
    uint64_t v16 = API::Object::newObject(0xD8uLL, 25);
    *(void *)uint64_t v16 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v16);
    *(void *)uint64_t v16 = &unk_1EE9D1E50;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v16 + 16), a6);
    long long v17 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *long long v17 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v17);
    *long long v17 = &unk_1EE9D1E50;
    WebCore::ResourceRequest::ResourceRequest(v17 + 2, a7);
    uint64_t v18 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, void, void))(a1 + 24);
    if (v18)
    {
      if (a3) {
        uint64_t v19 = *(void *)(a3 + 8);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *a4;
      if (*(unsigned __int8 *)(*a4 + 304) >= 5u) {
        uint64_t v21 = 5;
      }
      else {
        uint64_t v21 = *(unsigned __int8 *)(*a4 + 304);
      }
      uint64_t v22 = *(unsigned char *)(v20 + 305) & 0x1F;
      unsigned int v23 = *(unsigned __int8 *)(v20 + 306);
      if (v23 >= 3) {
        uint64_t v24 = 4294967294;
      }
      else {
        uint64_t v24 = v23;
      }
      if (*a8) {
        uint64_t v25 = *(void *)(*a8 + 8);
      }
      else {
        uint64_t v25 = 0;
      }
      v18(*(void *)(a2 + 8), v19, v21, v22, v24, v17[1], v25, 0, *(void *)(a1 + 16));
    }
    else
    {
      double v26 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, void, void))(a1 + 56);
      if (v26)
      {
        if (a3) {
          uint64_t v27 = *(void *)(a3 + 8);
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = *a4;
        if (*(unsigned __int8 *)(*a4 + 304) >= 5u) {
          uint64_t v29 = 5;
        }
        else {
          uint64_t v29 = *(unsigned __int8 *)(*a4 + 304);
        }
        uint64_t v30 = *(unsigned char *)(v28 + 305) & 0x1F;
        unsigned int v31 = *(unsigned __int8 *)(v28 + 306);
        if (v31 >= 3) {
          uint64_t v32 = 4294967294;
        }
        else {
          uint64_t v32 = v31;
        }
        if (a5) {
          uint64_t v33 = *(void *)(a5 + 8);
        }
        else {
          uint64_t v33 = 0;
        }
        if (*a8) {
          uint64_t v34 = *(void *)(*a8 + 8);
        }
        else {
          uint64_t v34 = 0;
        }
        v26(*(void *)(a2 + 8), v27, v29, v30, v32, v33, v17[1], v34, 0, *(void *)(a1 + 16));
      }
      else
      {
        if (a3) {
          uint64_t v35 = *(void *)(a3 + 8);
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v36 = *a4;
        if (*(unsigned __int8 *)(*a4 + 304) >= 5u) {
          uint64_t v37 = 5;
        }
        else {
          uint64_t v37 = *(unsigned __int8 *)(*a4 + 304);
        }
        uint64_t v38 = *(unsigned char *)(v36 + 305) & 0x1F;
        unsigned int v39 = *(unsigned __int8 *)(v36 + 306);
        if (v39 >= 3) {
          uint64_t v40 = 4294967294;
        }
        else {
          uint64_t v40 = v39;
        }
        if (a5) {
          uint64_t v41 = *(void *)(a5 + 8);
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v42 = *a8;
        if (*a8) {
          uint64_t v42 = *(void *)(v42 + 8);
        }
        (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, CFTypeRef, uint64_t, void, void))(a1 + 72))(*(void *)(a2 + 8), v35, v37, v38, v40, v41, *(void *)(v16 + 8), v17[1], v42, 0, *(void *)(a1 + 16));
      }
    }
    CFRelease(v17[1]);
    uint64_t v43 = *(const void **)(v16 + 8);
    CFRelease(v43);
  }
  else
  {
    uint64_t v44 = *a8;
    WebKit::WebFramePolicyListenerProxy::use(v44, 0, 0);
  }
}

void WKPageSetPagePolicyClient::PolicyClient::decidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const String *a5, WTF::StringImpl **a6, uint64_t *a7)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v14 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    CFTypeRef *v14 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v14);
    CFTypeRef *v14 = &unk_1EE9D1E50;
    WebCore::ResourceRequest::ResourceRequest(v14 + 2, a5);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, CFTypeRef, uint64_t, uint64_t, void, void))(a1 + 32);
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v16 = *(void *)(a3 + 8);
    uint64_t v17 = *a4;
    if (*(unsigned __int8 *)(*a4 + 304) >= 5u) {
      uint64_t v18 = 5;
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(*a4 + 304);
    }
    char v19 = *(unsigned char *)(v17 + 305);
    unsigned int v20 = *(unsigned __int8 *)(v17 + 306);
    if (v20 >= 3) {
      uint64_t v21 = 4294967294;
    }
    else {
      uint64_t v21 = v20;
    }
    CFTypeRef v22 = v14[1];
    unsigned int v23 = *a6;
    if (*a6) {
      *(_DWORD *)v23 += 2;
    }
    unsigned int v31 = v23;
    API::String::create(&v31, &v32);
    uint64_t v25 = v31;
    double v26 = v32;
    unsigned int v31 = 0;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v24);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (v26) {
      uint64_t v28 = *((void *)v26 + 1);
    }
    else {
      uint64_t v28 = 0;
    }
    if (*a7) {
      uint64_t v29 = *(void *)(*a7 + 8);
    }
    else {
      uint64_t v29 = 0;
    }
    v30(v15, v16, v18, v19 & 0x1F, v21, v22, v28, v29, 0, *(void *)(a1 + 16));
    if (v26) {
      CFRelease(*((CFTypeRef *)v26 + 1));
    }
    CFRelease(v14[1]);
  }
  else
  {
    uint64_t v27 = *a7;
    WebKit::WebFramePolicyListenerProxy::use(v27, 0, 0);
  }
}

void WKPageSetPagePolicyClient::PolicyClient::decidePolicyForResponse(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceResponse *a4, const String *a5, uint64_t a6, uint64_t *a7)
{
  if (*(void *)(a1 + 40) || *(void *)(a1 + 64))
  {
    uint64_t v14 = (API::URLResponse *)API::Object::newObject(0x110uLL, 26);
    API::URLResponse::URLResponse(v14, a4);
    uint64_t v15 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *uint64_t v15 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v15);
    *uint64_t v15 = &unk_1EE9D1E50;
    WebCore::ResourceRequest::ResourceRequest(v15 + 2, a5);
    uint64_t v16 = *(void (**)(void, void, uint64_t, CFTypeRef, uint64_t, void, void))(a1 + 40);
    if (v16)
    {
      if (v14) {
        uint64_t v17 = *((void *)v14 + 1);
      }
      else {
        uint64_t v17 = 0;
      }
      if (*a7) {
        uint64_t v18 = *(void *)(*a7 + 8);
      }
      else {
        uint64_t v18 = 0;
      }
      v16(*(void *)(a2 + 8), *(void *)(a3 + 8), v17, v15[1], v18, 0, *(void *)(a1 + 16));
    }
    else
    {
      if (v14) {
        uint64_t v19 = *((void *)v14 + 1);
      }
      else {
        uint64_t v19 = 0;
      }
      if (*a7) {
        uint64_t v20 = *(void *)(*a7 + 8);
      }
      else {
        uint64_t v20 = 0;
      }
      (*(void (**)(void, void, uint64_t, CFTypeRef, uint64_t, uint64_t, void, void))(a1 + 64))(*(void *)(a2 + 8), *(void *)(a3 + 8), v19, v15[1], a6, v20, 0, *(void *)(a1 + 16));
    }
    CFRelease(v15[1]);
    if (v14)
    {
      CFTypeRef v22 = (const void *)*((void *)v14 + 1);
      CFRelease(v22);
    }
  }
  else
  {
    uint64_t v21 = *a7;
    WebKit::WebFramePolicyListenerProxy::use(v21, 0, 0);
  }
}

void WKPageSetPageUIClient::UIClient::createNewPage(uint64_t a1, uint64_t a2, uint64_t a3, API::WindowFeatures *this, const String **a5, uint64_t *a6)
{
  if (*(void *)(a1 + 480))
  {
    API::WindowFeatures::create(this, v96);
    if (*(void *)a3)
    {
      uint64_t v12 = *(void *)(*(void *)a3 + 8);
      goto LABEL_4;
    }
LABEL_156:
    uint64_t v12 = 0;
LABEL_4:
    if (*a5) {
      m_ptr = (*a5)[1].m_impl.m_ptr;
    }
    else {
      m_ptr = 0;
    }
    uint64_t v14 = v96[0];
    if (v96[0]) {
      uint64_t v15 = *(void *)(v96[0] + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (void *)(*(uint64_t (**)(void, uint64_t, StringImpl *, uint64_t, void))(a1 + 480))(*(void *)(a2 + 8), v12, m_ptr, v15, *(void *)(a1 + 16));
    if (v16) {
      uint64_t v16 = (void *)[v16 _apiObject];
    }
    uint64_t v99 = (uint64_t)v16;
    uint64_t v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, &v99);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    uint64_t v18 = v99;
    uint64_t v99 = 0;
    if (v18) {
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    if (v14)
    {
      uint64_t v19 = *(const void **)(v14 + 8);
LABEL_14:
      CFRelease(v19);
      return;
    }
    return;
  }
  if (*(void *)(a1 + 336) || *(void *)(a1 + 24))
  {
    uint64_t v99 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v98 = (WTF::StringImpl *)v96[0];
    BOOL v20 = WebCore::WindowFeatures::wantsPopup(this);
    uint64_t v21 = (WebKit *)API::Object::newObject(0x18uLL, 32);
    *((unsigned char *)v21 + 16) = v20;
    *(void *)uint64_t v21 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v21);
    *(void *)uint64_t v21 = &unk_1EE9B3ED0;
    float v97 = v21;
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
    if (v97) {
      CFRelease(*((CFTypeRef *)v97 + 1));
    }
    unsigned int v23 = v98;
    uint64_t v98 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v22);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v98 = (WTF::StringImpl *)v96[0];
    char v24 = *(unsigned char *)this;
    uint64_t v25 = (WebKit *)API::Object::newObject(0x18uLL, 32);
    *((unsigned char *)v25 + 16) = v24;
    *(void *)uint64_t v25 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2(v25);
    *(void *)uint64_t v25 = &unk_1EE9B3ED0;
    float v97 = v25;
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
    if (v97) {
      CFRelease(*((CFTypeRef *)v97 + 1));
    }
    uint64_t v27 = v98;
    uint64_t v98 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v26);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    if (*((unsigned char *)this + 8))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 8)) {
        goto LABEL_155;
      }
      double v28 = *((float *)this + 1);
      uint64_t v29 = (double *)API::Object::newObject(0x18uLL, 33);
      void v29[2] = v28;
      *(void *)uint64_t v29 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v29);
      *(void *)uint64_t v29 = &unk_1EE9B5380;
      float v97 = (WebKit *)v29;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      unsigned int v31 = v98;
      uint64_t v98 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v30);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 16))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 16)) {
        goto LABEL_155;
      }
      double v32 = *((float *)this + 3);
      uint64_t v33 = (double *)API::Object::newObject(0x18uLL, 33);
      v33[2] = v32;
      *(void *)uint64_t v33 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v33);
      *(void *)uint64_t v33 = &unk_1EE9B5380;
      float v97 = (WebKit *)v33;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      uint64_t v35 = v98;
      uint64_t v98 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v34);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 24))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 24)) {
        goto LABEL_155;
      }
      double v36 = *((float *)this + 5);
      uint64_t v37 = (double *)API::Object::newObject(0x18uLL, 33);
      v37[2] = v36;
      *(void *)uint64_t v37 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v37);
      *(void *)uint64_t v37 = &unk_1EE9B5380;
      float v97 = (WebKit *)v37;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      unsigned int v39 = v98;
      uint64_t v98 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, v38);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 32))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 32)) {
        goto LABEL_155;
      }
      double v40 = *((float *)this + 7);
      uint64_t v41 = (double *)API::Object::newObject(0x18uLL, 33);
      uint64_t v41[2] = v40;
      *(void *)uint64_t v41 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v41);
      *(void *)uint64_t v41 = &unk_1EE9B5380;
      float v97 = (WebKit *)v41;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      uint64_t v43 = v98;
      uint64_t v98 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v42);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 37))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 37)) {
        goto LABEL_155;
      }
      char v44 = *((unsigned char *)this + 36);
      uint64_t v45 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v45 + 16) = v44;
      *(void *)uint64_t v45 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v45);
      *(void *)uint64_t v45 = &unk_1EE9B3ED0;
      float v97 = v45;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      uint64_t v47 = v98;
      uint64_t v98 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2) {
          WTF::StringImpl::destroy(v47, v46);
        }
        else {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 39))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 39)) {
        goto LABEL_155;
      }
      char v48 = *((unsigned char *)this + 38);
      int v49 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v49 + 16) = v48;
      *(void *)int v49 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v49);
      *(void *)int v49 = &unk_1EE9B3ED0;
      float v97 = v49;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      int v51 = v98;
      uint64_t v98 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2) {
          WTF::StringImpl::destroy(v51, v50);
        }
        else {
          *(_DWORD *)v51 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 41))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 41)) {
        goto LABEL_155;
      }
      char v52 = *((unsigned char *)this + 40);
      uint64_t v53 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v53 + 16) = v52;
      *(void *)uint64_t v53 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v53);
      *(void *)uint64_t v53 = &unk_1EE9B3ED0;
      float v97 = v53;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      uint64_t v55 = v98;
      uint64_t v98 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2) {
          WTF::StringImpl::destroy(v55, v54);
        }
        else {
          *(_DWORD *)v55 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 43))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 43)) {
        goto LABEL_155;
      }
      char v56 = *((unsigned char *)this + 42);
      int v57 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v57 + 16) = v56;
      *(void *)int v57 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v57);
      *(void *)int v57 = &unk_1EE9B3ED0;
      float v97 = v57;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      uint64_t v59 = v98;
      uint64_t v98 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2) {
          WTF::StringImpl::destroy(v59, v58);
        }
        else {
          *(_DWORD *)v59 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 45))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 45)) {
        goto LABEL_155;
      }
      char v60 = *((unsigned char *)this + 44);
      int v61 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v61 + 16) = v60;
      *(void *)int v61 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v61);
      *(void *)int v61 = &unk_1EE9B3ED0;
      float v97 = v61;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      int v63 = v98;
      uint64_t v98 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2) {
          WTF::StringImpl::destroy(v63, v62);
        }
        else {
          *(_DWORD *)v63 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 47))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 47)) {
        goto LABEL_155;
      }
      char v64 = *((unsigned char *)this + 46);
      int8x8_t v65 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v65 + 16) = v64;
      *(void *)int8x8_t v65 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v65);
      *(void *)int8x8_t v65 = &unk_1EE9B3ED0;
      float v97 = v65;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      unint64_t v67 = v98;
      uint64_t v98 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2) {
          WTF::StringImpl::destroy(v67, v66);
        }
        else {
          *(_DWORD *)v67 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 49))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 49)) {
        goto LABEL_155;
      }
      char v68 = *((unsigned char *)this + 48);
      FloatRect v69 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v69 + 16) = v68;
      *(void *)FloatRect v69 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v69);
      *(void *)FloatRect v69 = &unk_1EE9B3ED0;
      float v97 = v69;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      int v71 = v98;
      uint64_t v98 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2) {
          WTF::StringImpl::destroy(v71, v70);
        }
        else {
          *(_DWORD *)v71 -= 2;
        }
      }
    }
    if (*((unsigned char *)this + 51))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v98 = (WTF::StringImpl *)v96[0];
      if (!*((unsigned char *)this + 51)) {
        goto LABEL_155;
      }
      char v72 = *((unsigned char *)this + 50);
      int v73 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v73 + 16) = v72;
      *(void *)int v73 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v73);
      *(void *)int v73 = &unk_1EE9B3ED0;
      float v97 = v73;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      uint64_t v75 = v98;
      uint64_t v98 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2) {
          WTF::StringImpl::destroy(v75, v74);
        }
        else {
          *(_DWORD *)v75 -= 2;
        }
      }
    }
    if (!*((unsigned char *)this + 53)) {
      goto LABEL_133;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (*((unsigned char *)this + 53))
    {
      char v76 = *((unsigned char *)this + 52);
      long long v77 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((unsigned char *)v77 + 16) = v76;
      *(void *)long long v77 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v77);
      *(void *)long long v77 = &unk_1EE9B3ED0;
      float v97 = v77;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97) {
        CFRelease(*((CFTypeRef *)v97 + 1));
      }
      uint64_t v79 = v98;
      uint64_t v98 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2) {
          WTF::StringImpl::destroy(v79, v78);
        }
        else {
          *(_DWORD *)v79 -= 2;
        }
      }
LABEL_133:
      uint64_t v80 = API::Object::newObject(0x18uLL, 9);
      *(void *)uint64_t v80 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v80);
      *(void *)uint64_t v80 = &unk_1EE9D1E00;
      uint64_t v81 = v99;
      uint64_t v99 = 0;
      *(void *)(v80 + 16) = v81;
      if (*(void *)(a1 + 336))
      {
        uint64_t v82 = *a5 + 5;
        uint64_t v83 = API::Object::newObject(0xD8uLL, 25);
        *(void *)uint64_t v83 = &unk_1EE9D1E28;
        WebKit::InitializeWebKit2((WebKit *)v83);
        *(void *)uint64_t v83 = &unk_1EE9D1E50;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v83 + 16), v82);
        if (BYTE2((*a5)[38].m_impl.m_ptr) >= 3u) {
          uint64_t v84 = 4294967294;
        }
        else {
          uint64_t v84 = BYTE2((*a5)[38].m_impl.m_ptr);
        }
        FloatRect v85 = (void *)(*(uint64_t (**)(void, void, void, void, uint64_t, void))(a1 + 336))(*(void *)(a2 + 8), *(void *)(v83 + 8), *(void *)(v80 + 8), BYTE1((*a5)[38].m_impl.m_ptr) & 0x1F, v84, *(void *)(a1 + 16));
        if (v85) {
          FloatRect v85 = (void *)[v85 _apiObject];
        }
        v96[0] = v85;
        uint64_t v86 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v86 + 16))(v86, v96);
        (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
        uint64_t v87 = v96[0];
        v96[0] = 0;
        if (v87) {
          CFRelease(*(CFTypeRef *)(v87 + 8));
        }
        int v88 = *(const void **)(v83 + 8);
      }
      else
      {
        if (BYTE2((*a5)[38].m_impl.m_ptr) >= 3u) {
          uint64_t v89 = 4294967294;
        }
        else {
          uint64_t v89 = BYTE2((*a5)[38].m_impl.m_ptr);
        }
        char v90 = (void *)(*(uint64_t (**)(void, void, void, uint64_t, void))(a1 + 24))(*(void *)(a2 + 8), *(void *)(v80 + 8), BYTE1((*a5)[38].m_impl.m_ptr) & 0x1F, v89, *(void *)(a1 + 16));
        if (v90) {
          char v90 = (void *)[v90 _apiObject];
        }
        v96[0] = v90;
        uint64_t v91 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, void *))(*(void *)v91 + 16))(v91, v96);
        (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
        uint64_t v92 = v96[0];
        v96[0] = 0;
        if (!v92) {
          goto LABEL_150;
        }
        int v88 = *(const void **)(v92 + 8);
      }
      CFRelease(v88);
LABEL_150:
      CFRelease(*(CFTypeRef *)(v80 + 8));
      if (v99) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v99, v93);
      }
      return;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v96[0] = 0;
  uint64_t v94 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v94 + 16))(v94, v96);
  (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
  uint64_t v95 = v96[0];
  v96[0] = 0;
  if (v95)
  {
    uint64_t v19 = *(const void **)(v95 + 8);
    goto LABEL_14;
  }
}