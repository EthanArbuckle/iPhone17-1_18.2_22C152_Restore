void sub_19898E12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIScripting::updateContentScripts(WebKit::JSWebExtensionAPIScripting *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  v11 = WebKit::toWebExtensionAPIScripting(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_26;
  }
  v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      v26 = "argument";
    }
    else {
      v26 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v37;
    WTF::String::utf8();
    if (v36) {
      v27 = (char *)v36 + 16;
    }
    else {
      v27 = 0;
    }
    *(_DWORD *)buf = 134349570;
    *(void *)&buf[4] = a4;
    __int16 v39 = 2082;
    v40 = v26;
    __int16 v41 = 2082;
    v42 = v27;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function scripting.updateContentScripts() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    v29 = v36;
    v36 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1) {
        WTF::fastFree(v29, v28);
      }
      else {
        --*(_DWORD *)v29;
      }
    }
    v30 = resolve;
    JSObjectRef resolve = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    if (!v17) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.updateContentScripts()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v31 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  if (JSValueIsObject(this, *(JSValueRef *)(a5 + 8))
    && (v18 = JSValueToObject(this, *(JSValueRef *)(a5 + 8), 0), JSObjectIsFunction(this, v18))
    || JSValueIsNull(this, *(JSValueRef *)(a5 + 8))
    || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
  {
    v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    v20 = *(const OpaqueJSContext **)(a5 + 8);
    v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
    v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v17)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.updateContentScripts()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_26;
    }
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_20;
    }
LABEL_19:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    v37 = resolve;
    *(void *)buf = this;
    v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    v15 = v33;
LABEL_20:
    *(void *)buf = v15;
    id v32 = 0;
    WebKit::WebExtensionAPIScripting::updateContentScripts(v12, v17, (uint64_t *)buf, &v32);
    v23 = (NSString *)v32;
    v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)buf = 0;
    if (v24) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    }
    if (v23)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.updateContentScripts()", 0, v23, v22);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"scripting.updateContentScripts()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v31 = JSValueMakeUndefined(this);
LABEL_47:
  JSValueRef Undefined = v31;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19898E6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIStorage *WebKit::toWebExtensionAPIStorage(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  result = 0;
  if (this)
  {
    if (a2)
    {
      result = WebKit::JSWebExtensionAPIStorage::storageClass(0);
      if (result)
      {
        v6 = WebKit::JSWebExtensionAPIStorage::storageClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIStorage *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIStorage::storageClass(WebKit::JSWebExtensionAPIStorage *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIStorage::storageClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIStorage::storageClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Storage";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIStorage::staticValues(void)::values;
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIStorage::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIStorage::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIStorage::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIStorage::storageClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIStorage::getPropertyNames(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, v18);
    uint64_t v10 = v18[0];
    if (v18[0])
    {
      uint64_t v11 = *(void *)(v18[0] + 24);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        v16 = 0;
      }
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
    else
    {
      v16 = 0;
    }
    v18[0] = "session";
    v18[1] = 8;
    if (WebKit::WebExtensionAPIStorage::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)v18, (WebKit::WebPage *)v16))
    {
      v17 = JSStringCreateWithUTF8CString("session");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17) {
        JSStringRelease(v17);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_19898EABC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::JSWebExtensionAPIStorage::hasProperty(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, v19);
  uint64_t v10 = v19[0];
  if (v19[0])
  {
    uint64_t v11 = *(void *)(v19[0] + 24);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      v16 = 0;
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  else
  {
    v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "session"))
  {
    v19[0] = "session";
    v19[1] = 8;
    BOOL isPropertyAllowed = WebKit::WebExtensionAPIStorage::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)v19, (WebKit::WebPage *)v16);
  }
  else
  {
    BOOL isPropertyAllowed = 0;
  }
  if (v16) {
    CFRelease(v16[1]);
  }
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return isPropertyAllowed;
}

void sub_19898ECBC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::getProperty(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    ++*(_DWORD *)(v8 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v11, &buf);
    uint64_t v12 = buf;
    if ((void)buf)
    {
      uint64_t v13 = *(void *)(buf + 24);
      if (v13
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void *)(v14 + 24)) != 0
        && (uint64_t v16 = *(void *)(v15 + 8)) != 0
        && (v17 = *(void **)(*(void *)(v16 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v17 + 1368))(v17) & 1) == 0))
      {
        v18 = *(CFTypeRef **)(v17[2] + 8);
        if (v18)
        {
          CFRetain(*(v18 - 1));
          v18 -= 2;
        }
      }
      else
      {
        v18 = 0;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      v18 = 0;
    }
    if (JSStringIsEqualToUTF8CString(a3, "session")
      && (*(void *)&long long buf = "session",
          *((void *)&buf + 1) = 8,
          WebKit::WebExtensionAPIStorage::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))&& (uint64_t v20 = WebKit::toWebExtensionAPIStorage(this, a2, v19), (v21 = v20) != 0))
    {
      ++*(_DWORD *)(v20 + 48);
      v22 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v28) {
          v26 = (char *)v28 + 16;
        }
        else {
          v26 = 0;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v26;
        _os_log_debug_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEBUG, "Called getter storage.session in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v28)
        {
          if (*(_DWORD *)v28 == 1) {
            WTF::fastFree(v28, v27);
          }
          else {
            --*(_DWORD *)v28;
          }
        }
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v27);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
      }

      uint64_t v23 = WebKit::WebExtensionAPIStorage::session((WebKit::WebExtensionAPIStorage *)v21);
      JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v23 + 40));
      if (*(_DWORD *)(v21 + 48) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)(v21 + 40) + 8))(v21 + 40);
        if (!v18) {
          goto LABEL_21;
        }
      }
      else
      {
        --*(_DWORD *)(v21 + 48);
        if (!v18) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      JSValueRef Undefined = JSValueMakeUndefined(this);
      if (!v18)
      {
LABEL_21:
        if (*(_DWORD *)(v9 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v9 + 40) + 8))(v9 + 40);
        }
        else {
          --*(_DWORD *)(v9 + 48);
        }
        return Undefined;
      }
    }
    CFRelease(v18[1]);
    goto LABEL_21;
  }

  return JSValueMakeUndefined(this);
}

void sub_19898F0E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::local(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter storage.local in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIStorage::local(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_19898F43C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::sync(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter storage.sync in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIStorage::sync(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_19898F728(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorage::onChanged(WebKit::JSWebExtensionAPIStorage *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIStorage(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter storage.onChanged in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIStorage::onChanged(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_19898FA14(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIStorageArea *WebKit::toWebExtensionAPIStorageArea(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIStorageArea *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(WebKit::JSWebExtensionAPIStorageArea *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "StorageArea";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIStorageArea::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIStorageArea::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIStorageArea::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIStorageArea::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIStorageArea::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIStorageArea::storageAreaClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIStorageArea::getPropertyNames(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v22);
    uint64_t v10 = v22;
    if (v22)
    {
      uint64_t v11 = *((void *)v22 + 3);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (!*(unsigned char *)(v7 + 8))
    {
      v22 = "setAccessLevel";
      uint64_t v23 = 15;
      if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
      {
        v17 = JSStringCreateWithUTF8CString("setAccessLevel");
        JSPropertyNameAccumulatorAddName(a3, v17);
        if (v17) {
          JSStringRelease(v17);
        }
      }
    }
    v22 = "QUOTA_BYTES_PER_ITEM";
    uint64_t v23 = 21;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      uint64_t v18 = JSStringCreateWithUTF8CString("QUOTA_BYTES_PER_ITEM");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18) {
        JSStringRelease(v18);
      }
    }
    v22 = "MAX_ITEMS";
    uint64_t v23 = 10;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      v19 = JSStringCreateWithUTF8CString("MAX_ITEMS");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19) {
        JSStringRelease(v19);
      }
    }
    v22 = "MAX_WRITE_OPERATIONS_PER_HOUR";
    uint64_t v23 = 30;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      uint64_t v20 = JSStringCreateWithUTF8CString("MAX_WRITE_OPERATIONS_PER_HOUR");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20) {
        JSStringRelease(v20);
      }
    }
    v22 = "MAX_WRITE_OPERATIONS_PER_MINUTE";
    uint64_t v23 = 32;
    if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v22, (WebKit::WebPage *)v16))
    {
      uint64_t v21 = JSStringCreateWithUTF8CString("MAX_WRITE_OPERATIONS_PER_MINUTE");
      JSPropertyNameAccumulatorAddName(a3, v21);
      if (v21) {
        JSStringRelease(v21);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_19898FEB4(_Unwind_Exception *exception_object)
{
  if (v3) {
    JSStringRelease(v3);
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

void sub_19898FF5C()
{
}

BOOL WebKit::JSWebExtensionAPIStorageArea::hasProperty(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v21);
  uint64_t v10 = v21;
  if (v21)
  {
    uint64_t v11 = *((void *)v21 + 3);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    uint64_t v16 = 0;
  }
  int v17 = *(unsigned __int8 *)(v7 + 8);
  if (!JSStringIsEqualToUTF8CString(a3, "setAccessLevel"))
  {
    if (JSStringIsEqualToUTF8CString(a3, "QUOTA_BYTES_PER_ITEM"))
    {
      uint64_t v21 = "QUOTA_BYTES_PER_ITEM";
      uint64_t v22 = 21;
      BOOL isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
    else if (JSStringIsEqualToUTF8CString(a3, "MAX_ITEMS"))
    {
      uint64_t v21 = "MAX_ITEMS";
      uint64_t v22 = 10;
      BOOL isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
    else if (JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_HOUR"))
    {
      uint64_t v21 = "MAX_WRITE_OPERATIONS_PER_HOUR";
      uint64_t v22 = 30;
      BOOL isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_MINUTE")) {
        goto LABEL_14;
      }
      uint64_t v21 = "MAX_WRITE_OPERATIONS_PER_MINUTE";
      uint64_t v22 = 32;
      BOOL isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    }
LABEL_24:
    BOOL v18 = isPropertyAllowed;
    goto LABEL_25;
  }
  if (!v17)
  {
    uint64_t v21 = "setAccessLevel";
    uint64_t v22 = 15;
    BOOL isPropertyAllowed = WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16);
    goto LABEL_24;
  }
LABEL_14:
  BOOL v18 = 0;
LABEL_25:
  if (v16) {
    CFRelease(v16[1]);
  }
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return v18;
}

void sub_1989901C4(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::getProperty(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    ++*(_DWORD *)(v8 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v11, &buf);
    uint64_t v12 = buf;
    if ((void)buf)
    {
      uint64_t v13 = *(void *)(buf + 24);
      if (v13
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void *)(v14 + 24)) != 0
        && (uint64_t v16 = *(void *)(v15 + 8)) != 0
        && (int v17 = *(void **)(*(void *)(v16 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v17 + 1368))(v17) & 1) == 0))
      {
        BOOL v18 = *(CFTypeRef **)(v17[2] + 8);
        if (v18)
        {
          CFRetain(*(v18 - 1));
          v18 -= 2;
        }
      }
      else
      {
        BOOL v18 = 0;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      BOOL v18 = 0;
    }
    int v19 = *(unsigned __int8 *)(v9 + 8);
    if (JSStringIsEqualToUTF8CString(a3, "QUOTA_BYTES_PER_ITEM"))
    {
      *(void *)&long long buf = "QUOTA_BYTES_PER_ITEM";
      *((void *)&buf + 1) = 21;
      if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
      {
        uint64_t v21 = WebKit::toWebExtensionAPIStorageArea(this, a2, v20);
        uint64_t v22 = v21;
        if (v21)
        {
          ++*(_DWORD *)(v21 + 48);
          uint64_t v23 = (id)qword_1EB357DF8;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::String::utf8();
            if (v45) {
              v37 = (char *)v45 + 16;
            }
            else {
              v37 = 0;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v37;
            _os_log_debug_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEBUG, "Called getter storageArea.QUOTA_BYTES_PER_ITEM in %{public}s world", (uint8_t *)&buf, 0xCu);
            if (v45)
            {
              if (*(_DWORD *)v45 == 1) {
                WTF::fastFree(v45, v38);
              }
              else {
                --*(_DWORD *)v45;
              }
            }
            if (v46)
            {
              if (*(_DWORD *)v46 == 2) {
                WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v38);
              }
              else {
                *(_DWORD *)v46 -= 2;
              }
            }
          }

          JSValueRef Number = JSValueMakeNumber(this, 8192.0);
          goto LABEL_32;
        }
        goto LABEL_39;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "MAX_ITEMS"))
    {
      *(void *)&long long buf = "MAX_ITEMS";
      *((void *)&buf + 1) = 10;
      if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
      {
        uint64_t v26 = WebKit::toWebExtensionAPIStorageArea(this, a2, v25);
        uint64_t v22 = v26;
        if (v26)
        {
          ++*(_DWORD *)(v26 + 48);
          v27 = (id)qword_1EB357DF8;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WTF::String::utf8();
            if (v45) {
              __int16 v39 = (char *)v45 + 16;
            }
            else {
              __int16 v39 = 0;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v39;
            _os_log_debug_impl(&dword_1985F2000, v27, OS_LOG_TYPE_DEBUG, "Called getter storageArea.MAX_ITEMS in %{public}s world", (uint8_t *)&buf, 0xCu);
            if (v45)
            {
              if (*(_DWORD *)v45 == 1) {
                WTF::fastFree(v45, v40);
              }
              else {
                --*(_DWORD *)v45;
              }
            }
            if (v46)
            {
              if (*(_DWORD *)v46 == 2) {
                WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v40);
              }
              else {
                *(_DWORD *)v46 -= 2;
              }
            }
          }

          JSValueRef Number = JSValueMakeNumber(this, 512.0);
          goto LABEL_32;
        }
LABEL_39:
        JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_40:
        JSValueRef v34 = Undefined;
        if (!v18)
        {
LABEL_42:
          if (*(_DWORD *)(v9 + 48) == 1) {
            (*(void (**)(uint64_t))(*(void *)(v9 + 40) + 8))(v9 + 40);
          }
          else {
            --*(_DWORD *)(v9 + 48);
          }
          return v34;
        }
LABEL_41:
        CFRelease(v18[1]);
        goto LABEL_42;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_HOUR")
      && (*(void *)&long long buf = "MAX_WRITE_OPERATIONS_PER_HOUR",
          *((void *)&buf + 1) = 30,
          WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18)))
    {
      uint64_t v29 = WebKit::toWebExtensionAPIStorageArea(this, a2, v28);
      uint64_t v22 = v29;
      if (!v29) {
        goto LABEL_39;
      }
      ++*(_DWORD *)(v29 + 48);
      v30 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v45) {
          __int16 v41 = (char *)v45 + 16;
        }
        else {
          __int16 v41 = 0;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v41;
        _os_log_debug_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEBUG, "Called getter storageArea.MAX_WRITE_OPERATIONS_PER_HOUR in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v45)
        {
          if (*(_DWORD *)v45 == 1) {
            WTF::fastFree(v45, v42);
          }
          else {
            --*(_DWORD *)v45;
          }
        }
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v42);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
      }

      JSValueRef Number = JSValueMakeNumber(this, 1800.0);
    }
    else
    {
      if (!JSStringIsEqualToUTF8CString(a3, "MAX_WRITE_OPERATIONS_PER_MINUTE")
        || (*(void *)&long long buf = "MAX_WRITE_OPERATIONS_PER_MINUTE",
            *((void *)&buf + 1) = 32,
            !WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18)))
      {
        if (!v19 && JSStringIsEqualToUTF8CString(a3, "setAccessLevel"))
        {
          *(void *)&long long buf = "setAccessLevel";
          *((void *)&buf + 1) = 15;
          if (WebKit::WebExtensionAPIStorageArea::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v9, (const WTF::ASCIILiteral *)&buf, (WebKit::WebPage *)v18))
          {
            JSValueRef Undefined = JSObjectMakeFunctionWithCallback(this, a3, (JSObjectCallAsFunctionCallback)WebKit::JSWebExtensionAPIStorageArea::setAccessLevel);
            goto LABEL_40;
          }
        }
        goto LABEL_39;
      }
      uint64_t v32 = WebKit::toWebExtensionAPIStorageArea(this, a2, v31);
      uint64_t v22 = v32;
      if (!v32) {
        goto LABEL_39;
      }
      ++*(_DWORD *)(v32 + 48);
      v33 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v45) {
          uint64_t v43 = (char *)v45 + 16;
        }
        else {
          uint64_t v43 = 0;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v43;
        _os_log_debug_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEBUG, "Called getter storageArea.MAX_WRITE_OPERATIONS_PER_MINUTE in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v45)
        {
          if (*(_DWORD *)v45 == 1) {
            WTF::fastFree(v45, v44);
          }
          else {
            --*(_DWORD *)v45;
          }
        }
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v44);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
      }

      JSValueRef Number = JSValueMakeNumber(this, 120.0);
    }
LABEL_32:
    JSValueRef v34 = Number;
    if (*(_DWORD *)(v22 + 48) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)(v22 + 40) + 8))(v22 + 40);
      if (!v18) {
        goto LABEL_42;
      }
    }
    else
    {
      --*(_DWORD *)(v22 + 48);
      if (!v18) {
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }

  return JSValueMakeUndefined(this);
}

void sub_198990B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::get(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        v40 = "argument";
      }
      else {
        v40 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSObjectRef resolve = v50;
      WTF::String::utf8();
      if (v49) {
        __int16 v41 = (char *)v49 + 16;
      }
      else {
        __int16 v41 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v52 = 2082;
      v53 = v40;
      __int16 v54 = 2082;
      v55 = v41;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function storageArea.get() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      uint64_t v43 = v49;
      v49 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1) {
          WTF::fastFree(v43, v42);
        }
        else {
          --*(_DWORD *)v43;
        }
      }
      v44 = resolve;
      JSObjectRef resolve = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsObject(this, *(JSValueRef *)a5)
        || (int v19 = JSValueToObject(this, *(JSValueRef *)a5, 0), !JSObjectIsFunction(this, v19)))
      {
        if (!JSValueIsNull(this, *(JSValueRef *)a5) && !JSValueIsUndefined(this, *(JSValueRef *)a5))
        {
          uint64_t v16 = WebKit::toNSObject(this, *(void *)a5, 0, 1, 1);
          goto LABEL_22;
        }
      }
      if (JSValueIsObject(this, *(JSValueRef *)a5)
        && (uint64_t v20 = JSValueToObject(this, *(JSValueRef *)a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *(JSValueRef *)a5)
        || JSValueIsUndefined(this, *(JSValueRef *)a5))
      {
        uint64_t v21 = *(const OpaqueJSContext **)a5;
        uint64_t v22 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v21, v22, buf);
        uint64_t v16 = 0;
LABEL_19:
        uint64_t v23 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(void *)buf)
        {
          JSObjectRef DeferredPromise = 0;
          goto LABEL_23;
        }
LABEL_22:
        JSObjectRef reject = 0;
        JSObjectRef resolve = 0;
        JSObjectRef DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v50 = resolve;
        *(void *)long long buf = this;
        v49 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v50, &v49, &v46);
        uint64_t v23 = v46;
LABEL_23:
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
        uint64_t v27 = *(void *)buf;
        if (*(void *)buf)
        {
          uint64_t v28 = *(void *)(*(void *)buf + 24);
          if (v28)
          {
            uint64_t v29 = *(void *)(v28 + 8);
            if (v29)
            {
              uint64_t v30 = *(void *)(v29 + 24);
              if (v30)
              {
                uint64_t v31 = *(void *)(v30 + 8);
                if (v31)
                {
                  uint64_t v32 = *(void **)(*(void *)(v31 + 48) + 16);
                  if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
                  {
                    uint64_t v33 = *(void *)(v32[2] + 8);
                    if (v33)
                    {
                      CFRetain(*(CFTypeRef *)(v33 - 8));
                      CFRelease(*(CFTypeRef *)(v27 + 8));
                      *(void *)long long buf = v23;
                      id v45 = 0;
                      WebKit::WebExtensionAPIStorageArea::get(v12, v33 - 16, v16, (WebKit::WebExtensionCallbackHandler **)buf, &v45);
                      v35 = (NSString *)v45;
                      v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(void *)long long buf = 0;
                      if (v36) {
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                      }
                      if (v35)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.get()", 0, v35, v34);
                      }
                      else if (DeferredPromise)
                      {
LABEL_35:

                        CFRelease(*(CFTypeRef *)(v33 - 8));
LABEL_43:

                        if (*(_DWORD *)(v12 + 48) == 1) {
                          (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
                        }
                        else {
                          --*(_DWORD *)(v12 + 48);
                        }
                        return DeferredPromise;
                      }
                      JSObjectRef DeferredPromise = JSValueMakeUndefined(this);
                      goto LABEL_35;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v27 + 8));
        }
        v37 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (DeferredPromise)
          {
LABEL_39:
            JSObjectRef DeferredPromise = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"storageArea.get()", 0, &cfstr_AnUnknownError.isa, v38);
            if (DeferredPromise) {
              goto LABEL_41;
            }
          }
        }
        else if (DeferredPromise)
        {
          goto LABEL_39;
        }
        JSObjectRef DeferredPromise = JSValueMakeUndefined(this);
LABEL_41:
        if (v23) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v23);
        }
        goto LABEL_43;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)2)
      {
        uint64_t v16 = 0;
        goto LABEL_22;
      }
      if (JSValueIsObject(this, *(JSValueRef *)(a5 + 8))
        && (uint64_t v14 = JSValueToObject(this, *(JSValueRef *)(a5 + 8), 0), JSObjectIsFunction(this, v14))
        || JSValueIsNull(this, *(JSValueRef *)(a5 + 8))
        || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
      {
        uint64_t v16 = WebKit::toNSObject(this, *(void *)a5, 0, 1, 1);
        int v17 = *(const OpaqueJSContext **)(a5 + 8);
        BOOL v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
        goto LABEL_19;
      }
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.get()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
    JSObjectRef DeferredPromise = JSValueMakeUndefined(this);
    uint64_t v16 = 0;
    goto LABEL_43;
  }

  return JSValueMakeUndefined(this);
}

void sub_198991400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::getBytesInUse(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        v40 = "argument";
      }
      else {
        v40 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSObjectRef resolve = v50;
      WTF::String::utf8();
      if (v49) {
        __int16 v41 = (char *)v49 + 16;
      }
      else {
        __int16 v41 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v52 = 2082;
      v53 = v40;
      __int16 v54 = 2082;
      v55 = v41;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function storageArea.getBytesInUse() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      uint64_t v43 = v49;
      v49 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 1) {
          WTF::fastFree(v43, v42);
        }
        else {
          --*(_DWORD *)v43;
        }
      }
      v44 = resolve;
      JSObjectRef resolve = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsObject(this, *(JSValueRef *)a5)
        || (int v19 = JSValueToObject(this, *(JSValueRef *)a5, 0), !JSObjectIsFunction(this, v19)))
      {
        if (!JSValueIsNull(this, *(JSValueRef *)a5) && !JSValueIsUndefined(this, *(JSValueRef *)a5))
        {
          uint64_t v16 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
          goto LABEL_22;
        }
      }
      if (JSValueIsObject(this, *(JSValueRef *)a5)
        && (uint64_t v20 = JSValueToObject(this, *(JSValueRef *)a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *(JSValueRef *)a5)
        || JSValueIsUndefined(this, *(JSValueRef *)a5))
      {
        uint64_t v21 = *(const OpaqueJSContext **)a5;
        uint64_t v22 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v21, v22, buf);
        uint64_t v16 = 0;
LABEL_19:
        uint64_t v23 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (*(void *)buf)
        {
          JSObjectRef DeferredPromise = 0;
          goto LABEL_23;
        }
LABEL_22:
        JSObjectRef reject = 0;
        JSObjectRef resolve = 0;
        JSObjectRef DeferredPromise = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v50 = resolve;
        *(void *)long long buf = this;
        v49 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v50, &v49, &v46);
        uint64_t v23 = v46;
LABEL_23:
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
        uint64_t v27 = *(void *)buf;
        if (*(void *)buf)
        {
          uint64_t v28 = *(void *)(*(void *)buf + 24);
          if (v28)
          {
            uint64_t v29 = *(void *)(v28 + 8);
            if (v29)
            {
              uint64_t v30 = *(void *)(v29 + 24);
              if (v30)
              {
                uint64_t v31 = *(void *)(v30 + 8);
                if (v31)
                {
                  uint64_t v32 = *(void **)(*(void *)(v31 + 48) + 16);
                  if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
                  {
                    uint64_t v33 = *(void *)(v32[2] + 8);
                    if (v33)
                    {
                      CFRetain(*(CFTypeRef *)(v33 - 8));
                      CFRelease(*(CFTypeRef *)(v27 + 8));
                      *(void *)long long buf = v23;
                      id v45 = 0;
                      WebKit::WebExtensionAPIStorageArea::getBytesInUse(v12, v33 - 16, v16, (uint64_t *)buf, &v45);
                      v35 = (NSString *)v45;
                      v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(void *)long long buf = 0;
                      if (v36) {
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                      }
                      if (v35)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.getBytesInUse()", 0, v35, v34);
                      }
                      else if (DeferredPromise)
                      {
LABEL_35:

                        CFRelease(*(CFTypeRef *)(v33 - 8));
LABEL_43:

                        if (*(_DWORD *)(v12 + 48) == 1) {
                          (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
                        }
                        else {
                          --*(_DWORD *)(v12 + 48);
                        }
                        return DeferredPromise;
                      }
                      JSObjectRef DeferredPromise = JSValueMakeUndefined(this);
                      goto LABEL_35;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v27 + 8));
        }
        v37 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (DeferredPromise)
          {
LABEL_39:
            JSObjectRef DeferredPromise = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"storageArea.getBytesInUse()", 0, &cfstr_AnUnknownError.isa, v38);
            if (DeferredPromise) {
              goto LABEL_41;
            }
          }
        }
        else if (DeferredPromise)
        {
          goto LABEL_39;
        }
        JSObjectRef DeferredPromise = JSValueMakeUndefined(this);
LABEL_41:
        if (v23) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v23);
        }
        goto LABEL_43;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)2)
      {
        uint64_t v16 = 0;
        goto LABEL_22;
      }
      if (JSValueIsObject(this, *(JSValueRef *)(a5 + 8))
        && (uint64_t v14 = JSValueToObject(this, *(JSValueRef *)(a5 + 8), 0), JSObjectIsFunction(this, v14))
        || JSValueIsNull(this, *(JSValueRef *)(a5 + 8))
        || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
      {
        uint64_t v16 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
        int v17 = *(const OpaqueJSContext **)(a5 + 8);
        uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
        goto LABEL_19;
      }
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.getBytesInUse()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
    JSObjectRef DeferredPromise = JSValueMakeUndefined(this);
    uint64_t v16 = 0;
    goto LABEL_43;
  }

  return JSValueMakeUndefined(this);
}

void sub_198991B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::set(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        v50 = "argument";
      }
      else {
        v50 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSObjectRef resolve = v62;
      WTF::String::utf8();
      if (v61) {
        v51 = (char *)v61 + 16;
      }
      else {
        v51 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v64 = 2082;
      v65 = v50;
      __int16 v66 = 2082;
      v67 = v51;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function storageArea.set() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      v53 = v61;
      v61 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1) {
          WTF::fastFree(v53, v52);
        }
        else {
          --*(_DWORD *)v53;
        }
      }
      __int16 v54 = resolve;
      JSObjectRef resolve = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v52);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      uint64_t v18 = *a5;
      if (*a5)
      {
        int v19 = (void *)MEMORY[0x1E4F30938];
        uint64_t v20 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v21 = [v19 valueWithJSValueRef:v18 inContext:v20];

        uint64_t v22 = (void *)v21;
      }
      else
      {
        uint64_t v22 = 0;
      }
      char v28 = [v22 _isDictionary];

      if (v28)
      {
        int v17 = WebKit::toNSDictionary(this, *a5, 1, 1);
        if (!v17)
        {
LABEL_6:
          uint64_t v15 = 0;
LABEL_7:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.set()", &cfstr_Items.isa, &cfstr_AnObjectIsExpe.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          int v17 = 0;
          goto LABEL_44;
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)2)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.set()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_48;
        }
        goto LABEL_6;
      }
      uint64_t v23 = *a5;
      if (*a5)
      {
        v24 = (void *)MEMORY[0x1E4F30938];
        v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v26 = [v24 valueWithJSValueRef:v23 inContext:v25];

        uint64_t v27 = (void *)v26;
      }
      else
      {
        uint64_t v27 = 0;
      }
      char v30 = [v27 _isDictionary];

      if (v30)
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          int v17 = WebKit::toNSDictionary(this, *a5, 1, 1);
          uint64_t v32 = a5[1];
          uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
          uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!v17) {
            goto LABEL_7;
          }
          if (*(void *)buf)
          {
            JSValueRef Undefined = 0;
            goto LABEL_26;
          }
LABEL_25:
          JSObjectRef reject = 0;
          JSObjectRef resolve = 0;
          JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          v62 = resolve;
          *(void *)long long buf = this;
          v61 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v62, &v61, &v58);
          uint64_t v15 = v58;
LABEL_26:
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
          uint64_t v36 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v37 = *(void *)(*(void *)buf + 24);
            if (v37)
            {
              uint64_t v38 = *(void *)(v37 + 8);
              if (v38)
              {
                uint64_t v39 = *(void *)(v38 + 24);
                if (v39)
                {
                  uint64_t v40 = *(void *)(v39 + 8);
                  if (v40)
                  {
                    __int16 v41 = *(void **)(*(void *)(v40 + 48) + 16);
                    if (((*(uint64_t (**)(void *))(*v41 + 1368))(v41) & 1) == 0)
                    {
                      uint64_t v42 = *(void *)(v41[2] + 8);
                      if (v42)
                      {
                        CFRetain(*(CFTypeRef *)(v42 - 8));
                        CFRelease(*(CFTypeRef *)(v36 + 8));
                        *(void *)long long buf = v15;
                        id v57 = 0;
                        WebKit::WebExtensionAPIStorageArea::set(v12, v42 - 16, v17, (JSObjectRef **)buf, &v57);
                        v44 = (NSString *)v57;
                        id v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
                        *(void *)long long buf = 0;
                        if (v45) {
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
                        }
                        if (v44)
                        {
                          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.set()", 0, v44, v43);
                        }
                        else if (Undefined)
                        {
LABEL_38:

                          CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_46:
                          uint64_t v48 = v17;
LABEL_47:

LABEL_48:
                          if (*(_DWORD *)(v12 + 48) == 1) {
                            (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
                          }
                          else {
                            --*(_DWORD *)(v12 + 48);
                          }
                          return Undefined;
                        }
                        JSValueRef Undefined = JSValueMakeUndefined(this);
                        goto LABEL_38;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*(CFTypeRef *)(v36 + 8));
          }
          v46 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
            if (Undefined)
            {
LABEL_42:
              JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"storageArea.set()", 0, &cfstr_AnUnknownError.isa, v47);
              if (Undefined) {
                goto LABEL_44;
              }
            }
          }
          else if (Undefined)
          {
            goto LABEL_42;
          }
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_44:
          if (v15) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
          }
          goto LABEL_46;
        }
        v55 = @"a function is expected";
        uint64_t v56 = @"callback";
LABEL_74:
        uint64_t v48 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.set()", &v56->isa, &v55->isa, v29);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_47;
      }
    }
    v55 = @"an object is expected";
    uint64_t v56 = @"items";
    goto LABEL_74;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989923DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::remove(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v38 = "argument";
      }
      else {
        uint64_t v38 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSObjectRef resolve = v48;
      WTF::String::utf8();
      if (v47) {
        uint64_t v39 = (char *)v47 + 16;
      }
      else {
        uint64_t v39 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v50 = 2082;
      v51 = v38;
      __int16 v52 = 2082;
      v53 = v39;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function storageArea.remove() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v41 = v47;
      v47 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1) {
          WTF::fastFree(v41, v40);
        }
        else {
          --*(_DWORD *)v41;
        }
      }
      uint64_t v42 = resolve;
      JSObjectRef resolve = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      int v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
      if (!v17)
      {
LABEL_6:
        uint64_t v15 = 0;
LABEL_7:
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.remove()", &cfstr_Keys.isa, &cfstr_AnObjectIsExpe.isa, v14);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        int v17 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)2)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.remove()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_40;
        }
        goto LABEL_6;
      }
      if (!JSValueIsObject(this, *(JSValueRef *)(a5 + 8))
        || (uint64_t v18 = JSValueToObject(this, *(JSValueRef *)(a5 + 8), 0), !JSObjectIsFunction(this, v18)))
      {
        if (!JSValueIsNull(this, *(JSValueRef *)(a5 + 8)) && !JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
        {
          uint64_t v36 = 0;
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.remove()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v19);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_39;
        }
      }
      int v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
      uint64_t v20 = *(const OpaqueJSContext **)(a5 + 8);
      uint64_t v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
      uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
      if (!v17) {
        goto LABEL_7;
      }
      if (*(void *)buf)
      {
        JSValueRef Undefined = 0;
        goto LABEL_18;
      }
    }
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v48 = resolve;
    *(void *)long long buf = this;
    v47 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v48, &v47, &v44);
    uint64_t v15 = v44;
LABEL_18:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v23, buf);
    uint64_t v24 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v25 = *(void *)(*(void *)buf + 24);
      if (v25)
      {
        uint64_t v26 = *(void *)(v25 + 8);
        if (v26)
        {
          uint64_t v27 = *(void *)(v26 + 24);
          if (v27)
          {
            uint64_t v28 = *(void *)(v27 + 8);
            if (v28)
            {
              uint64_t v29 = *(void **)(*(void *)(v28 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v29 + 1368))(v29) & 1) == 0)
              {
                uint64_t v30 = *(void *)(v29[2] + 8);
                if (v30)
                {
                  CFRetain(*(CFTypeRef *)(v30 - 8));
                  CFRelease(*(CFTypeRef *)(v24 + 8));
                  *(void *)long long buf = v15;
                  id v43 = 0;
                  WebKit::WebExtensionAPIStorageArea::remove(v12, v30 - 16, v17, (uint64_t *)buf, &v43);
                  uint64_t v32 = (NSString *)v43;
                  uint64_t v33 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v33) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v33);
                  }
                  if (v32)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.remove()", 0, v32, v31);
                  }
                  else if (Undefined)
                  {
LABEL_30:

                    CFRelease(*(CFTypeRef *)(v30 - 8));
LABEL_38:
                    uint64_t v36 = v17;
LABEL_39:

LABEL_40:
                    if (*(_DWORD *)(v12 + 48) == 1) {
                      (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
                    }
                    else {
                      --*(_DWORD *)(v12 + 48);
                    }
                    return Undefined;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_30;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    JSValueRef v34 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v34, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_34:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"storageArea.remove()", 0, &cfstr_AnUnknownError.isa, v35);
        if (Undefined) {
          goto LABEL_36;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_34;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_36:
    if (v15) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
    }
    goto LABEL_38;
  }

  return JSValueMakeUndefined(this);
}

void sub_198992B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::clear(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v33 = "argument";
      }
      else {
        uint64_t v33 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSObjectRef resolve = v42;
      WTF::String::utf8();
      if (v41) {
        JSValueRef v34 = (char *)v41 + 16;
      }
      else {
        JSValueRef v34 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v44 = 2082;
      id v45 = v33;
      __int16 v46 = 2082;
      v47 = v34;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function storageArea.clear() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      uint64_t v36 = v41;
      __int16 v41 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1) {
          WTF::fastFree(v36, v35);
        }
        else {
          --*(_DWORD *)v36;
        }
      }
      uint64_t v37 = resolve;
      JSObjectRef resolve = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
    }

    if (a4 != (OpaqueJSValue *)1) {
      goto LABEL_10;
    }
    if (!JSValueIsObject(this, *a5) || (uint64_t v14 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v14)))
    {
      if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.clear()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
        JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_30:
        if (*(_DWORD *)(v12 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
        }
        else {
          --*(_DWORD *)(v12 + 48);
        }
        return Undefined;
      }
    }
    uint64_t v16 = *a5;
    int v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
    uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
    }
    else
    {
LABEL_10:
      JSObjectRef reject = 0;
      JSObjectRef resolve = 0;
      JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
      uint64_t v42 = resolve;
      *(void *)long long buf = this;
      __int16 v41 = reject;
      WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v42, &v41, &v38);
      uint64_t v18 = v38;
    }
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v21, buf);
    uint64_t v22 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v23 = *(void *)(*(void *)buf + 24);
      if (v23)
      {
        uint64_t v24 = *(void *)(v23 + 8);
        if (v24)
        {
          uint64_t v25 = *(void *)(v24 + 24);
          if (v25)
          {
            uint64_t v26 = *(void *)(v25 + 8);
            if (v26)
            {
              uint64_t v27 = *(void **)(*(void *)(v26 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v27 + 1368))(v27) & 1) == 0)
              {
                uint64_t v28 = *(void *)(v27[2] + 8);
                if (v28)
                {
                  CFRetain(*(CFTypeRef *)(v28 - 8));
                  CFRelease(*(CFTypeRef *)(v22 + 8));
                  *(void *)long long buf = v18;
                  WebKit::WebExtensionAPIStorageArea::clear(v12, v28 - 16, (uint64_t *)buf);
                  uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v29) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
                  }
                  if (!Undefined) {
                    JSValueRef Undefined = JSValueMakeUndefined(this);
                  }
                  CFRelease(*(CFTypeRef *)(v28 - 8));
                  goto LABEL_30;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v22 + 8));
    }
    uint64_t v30 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v30, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_26:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"storageArea.clear()", 0, &cfstr_AnUnknownError.isa, v31);
        if (Undefined) {
          goto LABEL_28;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_26;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_28:
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    }
    goto LABEL_30;
  }

  return JSValueMakeUndefined(this);
}

void sub_19899316C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  CFRelease(*(CFTypeRef *)(v16 - 8));
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::onChanged(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter storageArea.onChanged in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIStorageArea::onChanged(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1989934B4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::quotaBytes(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIStorageArea(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      int v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter storageArea.QUOTA_BYTES in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    double v9 = 0.0;
    if ((*((unsigned char *)v7 + 52) - 1) <= 3u) {
      double v9 = dbl_1994F5EE8[(char)(*((unsigned char *)v7 + 52) - 1)];
    }
    JSValueRef Number = JSValueMakeNumber(this, v9);
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return Number;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1989937BC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIStorageArea::setAccessLevel(WebKit::JSWebExtensionAPIStorageArea *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIStorageArea(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*(_DWORD *)(v11 + 48);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v50 = "argument";
      }
      else {
        __int16 v50 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSObjectRef resolve = v62;
      WTF::String::utf8();
      if (v61) {
        v51 = (char *)v61 + 16;
      }
      else {
        v51 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v64 = 2082;
      v65 = v50;
      __int16 v66 = 2082;
      v67 = v51;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function storageArea.setAccessLevel() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      v53 = v61;
      v61 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1) {
          WTF::fastFree(v53, v52);
        }
        else {
          --*(_DWORD *)v53;
        }
      }
      uint64_t v54 = resolve;
      JSObjectRef resolve = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v52);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      uint64_t v18 = *a5;
      if (*a5)
      {
        int v19 = (void *)MEMORY[0x1E4F30938];
        uint64_t v20 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v21 = [v19 valueWithJSValueRef:v18 inContext:v20];

        uint64_t v22 = (void *)v21;
      }
      else
      {
        uint64_t v22 = 0;
      }
      char v28 = [v22 _isDictionary];

      if (v28)
      {
        int v17 = WebKit::toNSDictionary(this, *a5, 0, 0);
        if (!v17)
        {
LABEL_6:
          uint64_t v15 = 0;
LABEL_7:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.setAccessLevel()", &cfstr_Accessoptions.isa, &cfstr_AnObjectIsExpe.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          int v17 = 0;
          goto LABEL_44;
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)2)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.setAccessLevel()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_48;
        }
        goto LABEL_6;
      }
      uint64_t v23 = *a5;
      if (*a5)
      {
        uint64_t v24 = (void *)MEMORY[0x1E4F30938];
        uint64_t v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v26 = [v24 valueWithJSValueRef:v23 inContext:v25];

        uint64_t v27 = (void *)v26;
      }
      else
      {
        uint64_t v27 = 0;
      }
      char v30 = [v27 _isDictionary];

      if (v30)
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          int v17 = WebKit::toNSDictionary(this, *a5, 0, 0);
          uint64_t v32 = a5[1];
          uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
          uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!v17) {
            goto LABEL_7;
          }
          if (*(void *)buf)
          {
            JSValueRef Undefined = 0;
            goto LABEL_26;
          }
LABEL_25:
          JSObjectRef reject = 0;
          JSObjectRef resolve = 0;
          JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          v62 = resolve;
          *(void *)long long buf = this;
          v61 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v62, &v61, &v58);
          uint64_t v15 = v58;
LABEL_26:
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
          uint64_t v36 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v37 = *(void *)(*(void *)buf + 24);
            if (v37)
            {
              uint64_t v38 = *(void *)(v37 + 8);
              if (v38)
              {
                uint64_t v39 = *(void *)(v38 + 24);
                if (v39)
                {
                  uint64_t v40 = *(void *)(v39 + 8);
                  if (v40)
                  {
                    __int16 v41 = *(void **)(*(void *)(v40 + 48) + 16);
                    if (((*(uint64_t (**)(void *))(*v41 + 1368))(v41) & 1) == 0)
                    {
                      uint64_t v42 = *(void *)(v41[2] + 8);
                      if (v42)
                      {
                        CFRetain(*(CFTypeRef *)(v42 - 8));
                        CFRelease(*(CFTypeRef *)(v36 + 8));
                        *(void *)long long buf = v15;
                        id v57 = 0;
                        WebKit::WebExtensionAPIStorageArea::setAccessLevel(v12, v42 - 16, v17, (uint64_t *)buf, &v57);
                        __int16 v44 = (NSString *)v57;
                        id v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
                        *(void *)long long buf = 0;
                        if (v45) {
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
                        }
                        if (v44)
                        {
                          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.setAccessLevel()", 0, v44, v43);
                        }
                        else if (Undefined)
                        {
LABEL_38:

                          CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_46:
                          uint64_t v48 = v17;
LABEL_47:

LABEL_48:
                          if (*(_DWORD *)(v12 + 48) == 1) {
                            (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
                          }
                          else {
                            --*(_DWORD *)(v12 + 48);
                          }
                          return Undefined;
                        }
                        JSValueRef Undefined = JSValueMakeUndefined(this);
                        goto LABEL_38;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*(CFTypeRef *)(v36 + 8));
          }
          __int16 v46 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
            if (Undefined)
            {
LABEL_42:
              JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"storageArea.setAccessLevel()", 0, &cfstr_AnUnknownError.isa, v47);
              if (Undefined) {
                goto LABEL_44;
              }
            }
          }
          else if (Undefined)
          {
            goto LABEL_42;
          }
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_44:
          if (v15) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
          }
          goto LABEL_46;
        }
        v55 = @"a function is expected";
        uint64_t v56 = @"callback";
LABEL_74:
        uint64_t v48 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"storageArea.setAccessLevel()", &v56->isa, &v55->isa, v29);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_47;
      }
    }
    v55 = @"an object is expected";
    uint64_t v56 = @"accessOptions";
    goto LABEL_74;
  }

  return JSValueMakeUndefined(this);
}

void sub_198993F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPITabs *WebKit::toWebExtensionAPITabs(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPITabs::tabsClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPITabs::tabsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPITabs *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPITabs::tabsClass(WebKit::JSWebExtensionAPITabs *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPITabs::tabsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPITabs::tabsClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Tabs";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPITabs::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPITabs::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPITabs::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPITabs::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPITabs::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPITabs::tabsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPITabs::getPropertyNames(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v21);
    uint64_t v10 = v21;
    if (v21)
    {
      uint64_t v11 = *((void *)v21 + 3);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v21 = "getSelected";
    uint64_t v22 = 12;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      int v17 = JSStringCreateWithUTF8CString("getSelected");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17) {
        JSStringRelease(v17);
      }
    }
    uint64_t v21 = "executeScript";
    uint64_t v22 = 14;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      uint64_t v18 = JSStringCreateWithUTF8CString("executeScript");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18) {
        JSStringRelease(v18);
      }
    }
    uint64_t v21 = "insertCSS";
    uint64_t v22 = 10;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      int v19 = JSStringCreateWithUTF8CString("insertCSS");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19) {
        JSStringRelease(v19);
      }
    }
    uint64_t v21 = "removeCSS";
    uint64_t v22 = 10;
    if (WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v21, (WebKit::WebPage *)v16))
    {
      uint64_t v20 = JSStringCreateWithUTF8CString("removeCSS");
      JSPropertyNameAccumulatorAddName(a3, v20);
      if (v20) {
        JSStringRelease(v20);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_19899447C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

void sub_198994518()
{
}

BOOL WebKit::JSWebExtensionAPITabs::hasProperty(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v20);
  uint64_t v10 = v20;
  if (v20)
  {
    uint64_t v11 = *((void *)v20 + 3);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "getSelected"))
  {
    uint64_t v20 = "getSelected";
    uint64_t v21 = 12;
    BOOL isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_20;
  }
  if (JSStringIsEqualToUTF8CString(a3, "executeScript"))
  {
    uint64_t v20 = "executeScript";
    uint64_t v21 = 14;
    BOOL isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_20;
  }
  if (JSStringIsEqualToUTF8CString(a3, "insertCSS"))
  {
    uint64_t v20 = "insertCSS";
    uint64_t v21 = 10;
    BOOL isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_20;
  }
  if (JSStringIsEqualToUTF8CString(a3, "removeCSS"))
  {
    uint64_t v20 = "removeCSS";
    uint64_t v21 = 10;
    BOOL isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
LABEL_20:
    BOOL v18 = isPropertyAllowed;
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  BOOL v18 = 0;
  if (v16) {
LABEL_21:
  }
    CFRelease(v16[1]);
LABEL_22:
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return v18;
}

void sub_198994740(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getProperty(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v7 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    ++*(_DWORD *)(v7 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v10, &v26);
    uint64_t v11 = v26;
    if (v26)
    {
      uint64_t v12 = *((void *)v26 + 3);
      if (v12
        && (uint64_t v13 = *(void *)(v12 + 8)) != 0
        && (uint64_t v14 = *(void *)(v13 + 24)) != 0
        && (uint64_t v15 = *(void *)(v14 + 8)) != 0
        && (uint64_t v16 = *(void **)(*(void *)(v15 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v16 + 1368))(v16) & 1) == 0))
      {
        int v17 = *(CFTypeRef **)(v16[2] + 8);
        if (v17)
        {
          CFRetain(*(v17 - 1));
          v17 -= 2;
        }
      }
      else
      {
        int v17 = 0;
      }
      CFRelease(*((CFTypeRef *)v11 + 1));
    }
    else
    {
      int v17 = 0;
    }
    if (JSStringIsEqualToUTF8CString(a3, "getSelected"))
    {
      uint64_t v26 = "getSelected";
      uint64_t v27 = 12;
      BOOL isPropertyAllowed = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v26, (WebKit::WebPage *)v17);
      int v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::getSelected;
      if (isPropertyAllowed) {
        goto LABEL_20;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "executeScript"))
    {
      uint64_t v26 = "executeScript";
      uint64_t v27 = 14;
      BOOL v20 = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v26, (WebKit::WebPage *)v17);
      int v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::executeScript;
      if (v20) {
        goto LABEL_20;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "insertCSS"))
    {
      uint64_t v26 = "insertCSS";
      uint64_t v27 = 10;
      BOOL v21 = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v26, (WebKit::WebPage *)v17);
      int v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::insertCSS;
      if (v21) {
        goto LABEL_20;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "removeCSS")
      && (uint64_t v26 = "removeCSS",
          uint64_t v27 = 10,
          BOOL v22 = WebKit::WebExtensionAPITabs::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v26, (WebKit::WebPage *)v17), v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPITabs::removeCSS, v22))
    {
LABEL_20:
      JSObjectRef FunctionWithCallback = JSObjectMakeFunctionWithCallback(this, a3, v19);
    }
    else
    {
      JSObjectRef FunctionWithCallback = JSValueMakeUndefined(this);
    }
    JSObjectRef v24 = FunctionWithCallback;
    if (v17) {
      CFRelease(v17[1]);
    }
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v8 + 40) + 8))(v8 + 40);
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
    return v24;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_198994A48(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::create(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_49;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v50 = "argument";
    }
    else {
      __int16 v50 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v62;
    WTF::String::utf8();
    if (v61) {
      v51 = (char *)v61 + 16;
    }
    else {
      v51 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v64 = 2082;
    v65 = v50;
    __int16 v66 = 2082;
    v67 = v51;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.create() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    v53 = v61;
    v61 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 1) {
        WTF::fastFree(v53, v52);
      }
      else {
        --*(_DWORD *)v53;
      }
    }
    uint64_t v54 = resolve;
    JSObjectRef resolve = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2) {
        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v52);
      }
      else {
        *(_DWORD *)v54 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    BOOL v18 = *a5;
    if (*a5)
    {
      int v19 = (void *)MEMORY[0x1E4F30938];
      BOOL v20 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v21 = [v19 valueWithJSValueRef:v18 inContext:v20];

      BOOL v22 = (void *)v21;
    }
    else
    {
      BOOL v22 = 0;
    }
    char v28 = [v22 _isDictionary];

    if (v28)
    {
      int v17 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v17) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
    goto LABEL_73;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    uint64_t v23 = *a5;
    if (*a5)
    {
      JSObjectRef v24 = (void *)MEMORY[0x1E4F30938];
      uint64_t v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v26 = [v24 valueWithJSValueRef:v23 inContext:v25];

      uint64_t v27 = (void *)v26;
    }
    else
    {
      uint64_t v27 = 0;
    }
    char v30 = [v27 _isDictionary];

    if (v30)
    {
      if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        int v17 = WebKit::toNSDictionary(this, *a5, 0, 0);
        uint64_t v32 = a5[1];
        uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
        uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17) {
          goto LABEL_8;
        }
        if (*(void *)buf)
        {
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
LABEL_26:
        JSObjectRef reject = 0;
        JSObjectRef resolve = 0;
        JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v62 = resolve;
        *(void *)long long buf = this;
        v61 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v62, &v61, &v58);
        uint64_t v15 = v58;
LABEL_27:
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
        uint64_t v36 = *(void *)buf;
        if (*(void *)buf)
        {
          uint64_t v37 = *(void *)(*(void *)buf + 24);
          if (v37)
          {
            uint64_t v38 = *(void *)(v37 + 8);
            if (v38)
            {
              uint64_t v39 = *(void *)(v38 + 24);
              if (v39)
              {
                uint64_t v40 = *(void *)(v39 + 8);
                if (v40)
                {
                  __int16 v41 = *(void **)(*(void *)(v40 + 48) + 16);
                  if (((*(uint64_t (**)(void *))(*v41 + 1368))(v41) & 1) == 0)
                  {
                    uint64_t v42 = *(void *)(v41[2] + 8);
                    if (v42)
                    {
                      CFRetain(*(CFTypeRef *)(v42 - 8));
                      CFRelease(*(CFTypeRef *)(v36 + 8));
                      *(void *)long long buf = v15;
                      id v57 = 0;
                      WebKit::WebExtensionAPITabs::createTab(v12, v42 - 16, v17, (uint64_t *)buf, &v57);
                      __int16 v44 = (NSString *)v57;
                      id v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(void *)long long buf = 0;
                      if (v45) {
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
                      }
                      if (v44)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.create()", 0, v44, v43);
                      }
                      else if (Undefined)
                      {
LABEL_39:

                        CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_47:
                        uint64_t v48 = v17;
LABEL_48:

                        goto LABEL_49;
                      }
                      JSValueRef Undefined = JSValueMakeUndefined(this);
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v36 + 8));
        }
        __int16 v46 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (Undefined)
          {
LABEL_43:
            JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.create()", 0, &cfstr_AnUnknownError.isa, v47);
            if (Undefined) {
              goto LABEL_45;
            }
          }
        }
        else if (Undefined)
        {
          goto LABEL_43;
        }
        JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
        if (v15) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        }
        goto LABEL_47;
      }
      v55 = @"a function is expected";
      uint64_t v56 = @"callback";
LABEL_74:
      uint64_t v48 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.create()", &v56->isa, &v55->isa, v29);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      goto LABEL_48;
    }
LABEL_73:
    v55 = @"an object is expected";
    uint64_t v56 = @"properties";
    goto LABEL_74;
  }
  if (a4)
  {
LABEL_7:
    uint64_t v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.create()", &cfstr_Properties.isa, &cfstr_AnObjectIsExpe.isa, v14);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    int v17 = 0;
    goto LABEL_45;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.create()", 0, &cfstr_ARequiredArgum.isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_49:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989951D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::query(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_49;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v50 = "argument";
    }
    else {
      __int16 v50 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v62;
    WTF::String::utf8();
    if (v61) {
      v51 = (char *)v61 + 16;
    }
    else {
      v51 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v64 = 2082;
    v65 = v50;
    __int16 v66 = 2082;
    v67 = v51;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.query() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    v53 = v61;
    v61 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 1) {
        WTF::fastFree(v53, v52);
      }
      else {
        --*(_DWORD *)v53;
      }
    }
    uint64_t v54 = resolve;
    JSObjectRef resolve = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2) {
        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v52);
      }
      else {
        *(_DWORD *)v54 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    BOOL v18 = *a5;
    if (*a5)
    {
      int v19 = (void *)MEMORY[0x1E4F30938];
      BOOL v20 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v21 = [v19 valueWithJSValueRef:v18 inContext:v20];

      BOOL v22 = (void *)v21;
    }
    else
    {
      BOOL v22 = 0;
    }
    char v28 = [v22 _isDictionary];

    if (v28)
    {
      int v17 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v17) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
    goto LABEL_73;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    uint64_t v23 = *a5;
    if (*a5)
    {
      JSObjectRef v24 = (void *)MEMORY[0x1E4F30938];
      uint64_t v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v26 = [v24 valueWithJSValueRef:v23 inContext:v25];

      uint64_t v27 = (void *)v26;
    }
    else
    {
      uint64_t v27 = 0;
    }
    char v30 = [v27 _isDictionary];

    if (v30)
    {
      if (JSValueIsObject(this, a5[1]) && (uint64_t v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        int v17 = WebKit::toNSDictionary(this, *a5, 0, 0);
        uint64_t v32 = a5[1];
        uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
        uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
        if (!v17) {
          goto LABEL_8;
        }
        if (*(void *)buf)
        {
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
LABEL_26:
        JSObjectRef reject = 0;
        JSObjectRef resolve = 0;
        JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
        v62 = resolve;
        *(void *)long long buf = this;
        v61 = reject;
        WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v62, &v61, &v58);
        uint64_t v15 = v58;
LABEL_27:
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v35, buf);
        uint64_t v36 = *(void *)buf;
        if (*(void *)buf)
        {
          uint64_t v37 = *(void *)(*(void *)buf + 24);
          if (v37)
          {
            uint64_t v38 = *(void *)(v37 + 8);
            if (v38)
            {
              uint64_t v39 = *(void *)(v38 + 24);
              if (v39)
              {
                uint64_t v40 = *(void *)(v39 + 8);
                if (v40)
                {
                  __int16 v41 = *(void **)(*(void *)(v40 + 48) + 16);
                  if (((*(uint64_t (**)(void *))(*v41 + 1368))(v41) & 1) == 0)
                  {
                    uint64_t v42 = *(void *)(v41[2] + 8);
                    if (v42)
                    {
                      CFRetain(*(CFTypeRef *)(v42 - 8));
                      CFRelease(*(CFTypeRef *)(v36 + 8));
                      *(void *)long long buf = v15;
                      id v57 = 0;
                      WebKit::WebExtensionAPITabs::query(v12, v42 - 16, v17, (uint64_t *)buf, &v57);
                      __int16 v44 = (NSString *)v57;
                      id v45 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(void *)long long buf = 0;
                      if (v45) {
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v45);
                      }
                      if (v44)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.query()", 0, v44, v43);
                      }
                      else if (Undefined)
                      {
LABEL_39:

                        CFRelease(*(CFTypeRef *)(v42 - 8));
LABEL_47:
                        uint64_t v48 = v17;
LABEL_48:

                        goto LABEL_49;
                      }
                      JSValueRef Undefined = JSValueMakeUndefined(this);
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v36 + 8));
        }
        __int16 v46 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (Undefined)
          {
LABEL_43:
            JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.query()", 0, &cfstr_AnUnknownError.isa, v47);
            if (Undefined) {
              goto LABEL_45;
            }
          }
        }
        else if (Undefined)
        {
          goto LABEL_43;
        }
        JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
        if (v15) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        }
        goto LABEL_47;
      }
      v55 = @"a function is expected";
      uint64_t v56 = @"callback";
LABEL_74:
      uint64_t v48 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.query()", &v56->isa, &v55->isa, v29);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      goto LABEL_48;
    }
LABEL_73:
    v55 = @"an object is expected";
    uint64_t v56 = @"info";
    goto LABEL_74;
  }
  if (a4)
  {
LABEL_7:
    uint64_t v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.query()", &cfstr_Info.isa, &cfstr_AnObjectIsExpe.isa, v14);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    int v17 = 0;
    goto LABEL_45;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.query()", 0, &cfstr_ARequiredArgum.isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_49:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198995A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::get(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_26;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v27 = "argument";
    }
    else {
      uint64_t v27 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v40;
    WTF::String::utf8();
    if (v39) {
      char v28 = (char *)v39 + 16;
    }
    else {
      char v28 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v42 = 2082;
    id v43 = v27;
    __int16 v44 = 2082;
    id v45 = v28;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.get() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    char v30 = v39;
    uint64_t v39 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1) {
        WTF::fastFree(v30, v29);
      }
      else {
        --*(_DWORD *)v30;
      }
    }
    uint64_t v31 = resolve;
    JSObjectRef resolve = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsNumber(this, *a5))
    {
      double v17 = JSValueToNumber(this, *a5, 0);
      uint64_t v16 = 0;
      goto LABEL_16;
    }
    goto LABEL_50;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsNumber(this, *a5))
    {
      if (JSValueIsObject(this, a5[1]) && (int v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        double v17 = JSValueToNumber(this, *a5, 0);
        BOOL v20 = a5[1];
        uint64_t v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        uint64_t v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_16:
        if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.get()", &cfstr_Tabid_0.isa, &cfstr_ANumberIsExpec.isa, v15);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          if (v16) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
          }
          goto LABEL_26;
        }
        if (v16)
        {
          JSValueRef Undefined = 0;
        }
        else
        {
          JSObjectRef reject = 0;
          JSObjectRef resolve = 0;
          JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          uint64_t v40 = resolve;
          *(void *)long long buf = this;
          uint64_t v39 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v40, &v39, &v36);
          uint64_t v16 = v36;
        }
        *(void *)long long buf = v16;
        id v35 = 0;
        WebKit::WebExtensionAPITabs::get(v12, (uint64_t *)buf, &v35, v14, v17);
        JSObjectRef v24 = (NSString *)v35;
        uint64_t v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
        *(void *)long long buf = 0;
        if (v25) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
        }
        if (v24)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.get()", 0, v24, v23);
        }
        else if (Undefined)
        {
LABEL_25:

          goto LABEL_26;
        }
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_25;
      }
      uint64_t v33 = @"a function is expected";
      JSValueRef v34 = @"callback";
LABEL_51:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.get()", &v34->isa, &v33->isa, v18);
      JSValueRef v32 = JSValueMakeUndefined(this);
      goto LABEL_52;
    }
LABEL_50:
    uint64_t v33 = @"a number is expected";
    JSValueRef v34 = @"tabID";
    goto LABEL_51;
  }
  if (a4)
  {
    uint64_t v16 = 0;
    double v17 = NAN;
    goto LABEL_16;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.get()", 0, &cfstr_ARequiredArgum.isa, v15);
  JSValueRef v32 = JSValueMakeUndefined(this);
LABEL_52:
  JSValueRef Undefined = v32;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198996058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v16) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
  }
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getCurrent(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_31;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v33 = "argument";
    }
    else {
      uint64_t v33 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v42;
    WTF::String::utf8();
    if (v41) {
      JSValueRef v34 = (char *)v41 + 16;
    }
    else {
      JSValueRef v34 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v44 = 2082;
    id v45 = v33;
    __int16 v46 = 2082;
    v47 = v34;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.getCurrent() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v36 = v41;
    __int16 v41 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1) {
        WTF::fastFree(v36, v35);
      }
      else {
        --*(_DWORD *)v36;
      }
    }
    uint64_t v37 = resolve;
    JSObjectRef resolve = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1) {
    goto LABEL_11;
  }
  if (JSValueIsObject(this, *a5) && (uint64_t v14 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v14))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    uint64_t v16 = *a5;
    double v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v16, v17, buf);
    BOOL v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_12;
    }
LABEL_11:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v42 = resolve;
    *(void *)long long buf = this;
    __int16 v41 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v42, &v41, &v38);
    BOOL v18 = v38;
LABEL_12:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v21, buf);
    uint64_t v22 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v23 = *(void *)(*(void *)buf + 24);
      if (v23)
      {
        uint64_t v24 = *(void *)(v23 + 8);
        if (v24)
        {
          uint64_t v25 = *(void *)(v24 + 24);
          if (v25)
          {
            uint64_t v26 = *(void *)(v25 + 8);
            if (v26)
            {
              uint64_t v27 = *(void **)(*(void *)(v26 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v27 + 1368))(v27) & 1) == 0)
              {
                uint64_t v28 = *(void *)(v27[2] + 8);
                if (v28)
                {
                  CFRetain(*(CFTypeRef *)(v28 - 8));
                  CFRelease(*(CFTypeRef *)(v22 + 8));
                  *(void *)long long buf = v18;
                  WebKit::WebExtensionAPITabs::getCurrent(v12, v28 - 16, (uint64_t *)buf);
                  uint64_t v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v29) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
                  }
                  if (!Undefined) {
                    JSValueRef Undefined = JSValueMakeUndefined(this);
                  }
                  CFRelease(*(CFTypeRef *)(v28 - 8));
                  goto LABEL_31;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v22 + 8));
    }
    char v30 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v30, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_27:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.getCurrent()", 0, &cfstr_AnUnknownError.isa, v31);
        if (Undefined) {
          goto LABEL_29;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_27;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_29:
    if (v18) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
    }
    goto LABEL_31;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.getCurrent()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v15);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_31:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198996620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::duplicate(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_54;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      v47 = "argument";
    }
    else {
      v47 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v60;
    WTF::String::utf8();
    if (v59) {
      v49 = (char *)v59 + 16;
    }
    else {
      v49 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v62 = 2082;
    v63 = v47;
    __int16 v64 = 2082;
    v65 = v49;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.duplicate() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    v51 = v59;
    v59 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1) {
        WTF::fastFree(v51, v50);
      }
      else {
        --*(_DWORD *)v51;
      }
    }
    __int16 v52 = resolve;
    JSObjectRef resolve = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v50);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5))
    {
      JSValueRef v23 = a5[1];
      if (v23)
      {
        uint64_t v24 = (void *)MEMORY[0x1E4F30938];
        uint64_t v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v26 = [v24 valueWithJSValueRef:v23 inContext:v25];

        uint64_t v27 = (void *)v26;
      }
      else
      {
        uint64_t v27 = 0;
      }
      char v30 = [v27 _isDictionary];

      if ((v30 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (uint64_t v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v29 = JSValueToNumber(this, *a5, 0);
          JSValueRef v32 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          uint64_t v33 = a5[2];
          JSValueRef v34 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v33, v34, buf);
          int v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          uint64_t v28 = v32;
          if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (!*(void *)buf)
            {
LABEL_46:
              JSObjectRef reject = 0;
              JSObjectRef resolve = 0;
              JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v60 = resolve;
              *(void *)long long buf = this;
              v59 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v60, &v59, &v56);
              int v19 = v56;
LABEL_47:
              *(void *)long long buf = v19;
              id v55 = 0;
              WebKit::WebExtensionAPITabs::duplicate(v12, v32, (uint64_t *)buf, &v55, v29);
              id v43 = (NSString *)v55;
              __int16 v44 = *(WebKit::WebExtensionCallbackHandler **)buf;
              *(void *)long long buf = 0;
              if (v44) {
                WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v44);
              }
              if (v43)
              {
                *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.duplicate()", 0, v43, v42);
              }
              else if (Undefined)
              {
LABEL_52:

                id v45 = v32;
LABEL_53:

                goto LABEL_54;
              }
              JSValueRef Undefined = JSValueMakeUndefined(this);
              goto LABEL_52;
            }
LABEL_28:
            JSValueRef Undefined = 0;
            goto LABEL_47;
          }
          goto LABEL_63;
        }
        v53 = @"a function is expected";
        uint64_t v54 = @"callback";
      }
      else
      {
        v53 = @"an object is expected";
        uint64_t v54 = @"properties";
      }
    }
    else
    {
      v53 = @"a number is expected";
      uint64_t v54 = @"tabID";
    }
    id v45 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.duplicate()", &v54->isa, &v53->isa, v22);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_53;
  }
  if (a4)
  {
    unint64_t v15 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      uint64_t v28 = 0;
      int v19 = 0;
      double v29 = NAN;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        int v19 = 0;
        unint64_t v20 = 0;
        unint64_t v21 = 0;
      }
      else
      {
        uint64_t v16 = a5[v15];
        if (v16
          && (JSValueIsObject(this, a5[v15]) && (double v17 = JSValueToObject(this, v16, 0), JSObjectIsFunction(this, v17))
           || JSValueIsNull(this, v16)
           || JSValueIsUndefined(this, v16)))
        {
          BOOL v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v16, v18, buf);
          int v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          unint64_t v20 = (unint64_t)a4 - 2;
          unint64_t v21 = 1;
        }
        else
        {
          int v19 = 0;
          unint64_t v21 = 0;
          unint64_t v20 = (unint64_t)a4 - 1;
        }
      }
      if (v21 >= v15) {
        goto LABEL_38;
      }
      uint64_t v36 = a5[v20];
      if (!v36) {
        goto LABEL_38;
      }
      uint64_t v37 = (void *)MEMORY[0x1E4F30938];
      uint64_t v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v39 = [v37 valueWithJSValueRef:v36 inContext:v38];

      LOBYTE(v38) = [v39 _isDictionary];
      if ((v38 & 1) != 0 || JSValueIsNull(this, v36) || JSValueIsUndefined(this, v36))
      {
        uint64_t v40 = WebKit::toNSDictionary(this, v36, 0, 0);
        if (!v20)
        {
          uint64_t v28 = (void *)v40;
          goto LABEL_63;
        }
        --v20;
        uint64_t v28 = (void *)v40;
      }
      else
      {
LABEL_38:
        uint64_t v28 = 0;
      }
      __int16 v41 = a5[v20];
      if (v41)
      {
        if (!JSValueIsNumber(this, v41)) {
          goto LABEL_63;
        }
        double v29 = JSValueToNumber(this, v41, 0);
        unint64_t v15 = v20 - 1;
      }
      else
      {
        double v29 = NAN;
        unint64_t v15 = v20;
      }
    }
    if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if ((v15 & 0x8000000000000000) != 0)
      {
        JSValueRef v32 = v28;
        if (!v19) {
          goto LABEL_46;
        }
        goto LABEL_28;
      }
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.duplicate()", 0, &cfstr_AnUnknownArgum.isa, v14);
      JSValueRef v48 = JSValueMakeUndefined(this);
LABEL_64:
      JSValueRef Undefined = v48;
      if (v19) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
      }
      id v45 = v28;
      goto LABEL_53;
    }
LABEL_63:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.duplicate()", &cfstr_Tabid_0.isa, &cfstr_ANumberIsExpec.isa, v14);
    JSValueRef v48 = JSValueMakeUndefined(this);
    goto LABEL_64;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.duplicate()", 0, &cfstr_ARequiredArgum.isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_54:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198996FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::update(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((unsigned char *)v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_86;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v41 = "argument";
    }
    else {
      __int16 v41 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v71;
    WTF::String::utf8();
    if (v70) {
      __int16 v42 = (char *)v70 + 16;
    }
    else {
      __int16 v42 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v73 = 2082;
    v74 = v41;
    __int16 v75 = 2082;
    v76 = v42;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function tabs.update() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v44 = v70;
    v70 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    JSObjectRef resolve = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v22 = a5[1];
      if (v22)
      {
        JSValueRef v23 = (void *)MEMORY[0x1E4F30938];
        uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

        uint64_t v26 = (void *)v25;
      }
      else
      {
        uint64_t v26 = 0;
      }
      int v30 = [v26 _isDictionary];

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (uint64_t v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v32 = JSValueToNumber(this, *a5, 0);
          uint64_t v33 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          JSValueRef v34 = a5[2];
          id v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          BOOL v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(void *)buf)
            {
LABEL_62:
              JSObjectRef reject = 0;
              JSObjectRef resolve = 0;
              JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              v71 = resolve;
              *(void *)long long buf = this;
              v70 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v71, &v70, &v67);
              BOOL v18 = v67;
LABEL_63:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v47, buf);
              uint64_t v48 = *(void *)buf;
              if (*(void *)buf)
              {
                uint64_t v49 = *(void *)(*(void *)buf + 24);
                if (v49)
                {
                  uint64_t v50 = *(void *)(v49 + 8);
                  if (v50)
                  {
                    uint64_t v51 = *(void *)(v50 + 24);
                    if (v51)
                    {
                      uint64_t v52 = *(void *)(v51 + 8);
                      if (v52)
                      {
                        v53 = *(void **)(*(void *)(v52 + 48) + 16);
                        if (((*(uint64_t (**)(void *))(*v53 + 1368))(v53) & 1) == 0)
                        {
                          uint64_t v54 = *(void *)(v53[2] + 8);
                          if (v54)
                          {
                            CFRetain(*(CFTypeRef *)(v54 - 8));
                            CFRelease(*(CFTypeRef *)(v48 + 8));
                            *(void *)long long buf = v18;
                            id v66 = 0;
                            WebKit::WebExtensionAPITabs::update(v11, v54 - 16, v33, (uint64_t *)buf, &v66, v32);
                            uint64_t v56 = (NSString *)v66;
                            id v57 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(void *)long long buf = 0;
                            if (v57) {
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v57);
                            }
                            if (v56)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.update()", 0, v56, v55);
                            }
                            else if (Undefined)
                            {
LABEL_75:

                              CFRelease(*(CFTypeRef *)(v54 - 8));
                              v58 = v33;
LABEL_85:

                              goto LABEL_86;
                            }
                            JSValueRef Undefined = JSValueMakeUndefined(this);
                            goto LABEL_75;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*(CFTypeRef *)(v48 + 8));
              }
              v59 = qword_1EB357DF8;
              if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl(&dword_1985F2000, v59, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined) {
                  goto LABEL_80;
                }
              }
              else if (!Undefined)
              {
                goto LABEL_80;
              }
              JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.update()", 0, &cfstr_AnUnknownError.isa, v60);
              if (Undefined)
              {
LABEL_81:
                uint64_t v27 = (uint64_t)v33;
                goto LABEL_82;
              }
LABEL_80:
              JSValueRef Undefined = JSValueMakeUndefined(this);
              goto LABEL_81;
            }
LABEL_30:
            JSValueRef Undefined = 0;
            goto LABEL_63;
          }
          goto LABEL_20;
        }
        __int16 v62 = @"a function is expected";
        v63 = @"callback";
      }
      else
      {
        __int16 v62 = @"an object is expected";
        v63 = @"properties";
      }
    }
    else
    {
      __int16 v62 = @"a number is expected";
      v63 = @"tabID";
    }
    v58 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.update()", &v63->isa, &v62->isa, v21);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_85;
  }
  if (a4)
  {
    unint64_t v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      BOOL v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        BOOL v18 = 0;
        unint64_t v19 = 0;
        unint64_t v20 = 0;
      }
      else
      {
        uint64_t v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (uint64_t v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          double v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          BOOL v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          unint64_t v19 = (unint64_t)a4 - 2;
          unint64_t v20 = 1;
        }
        else
        {
          BOOL v18 = 0;
          unint64_t v20 = 0;
          unint64_t v19 = (unint64_t)a4 - 1;
        }
      }
      uint64_t v36 = a5[v19];
      if (v36)
      {
        unint64_t v64 = v20;
        uint64_t v37 = (void *)MEMORY[0x1E4F30938];
        uint64_t v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v39 = [v37 valueWithJSValueRef:v36 inContext:v38];

        LOBYTE(v38) = [v39 _isDictionary];
        if ((v38 & 1) == 0) {
          goto LABEL_20;
        }
        WebKit::toNSDictionary(this, v36, 0, 0);
        uint64_t v27 = --v19;
        unint64_t v20 = v64;
      }
      else
      {
        uint64_t v27 = 0;
      }
      double v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        uint64_t v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          double v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          double v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          uint64_t v33 = (void *)v27;
          if (!v18) {
            goto LABEL_62;
          }
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.update()", 0, &cfstr_AnUnknownArgum.isa, v13);
        JSValueRef v28 = JSValueMakeUndefined(this);
LABEL_21:
        JSValueRef Undefined = v28;
LABEL_82:
        if (v18) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        }
        v58 = (void *)v27;
        goto LABEL_85;
      }
    }
LABEL_20:
    uint64_t v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.update()", &cfstr_Properties.isa, &cfstr_AnObjectIsExpe.isa, v13);
    JSValueRef v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.update()", 0, &cfstr_ARequiredArgum.isa, v13);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_86:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_198997A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(_DWORD *)(v17 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
  }
  else {
    --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::remove(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_26;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v26 = "argument";
    }
    else {
      uint64_t v26 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v37;
    WTF::String::utf8();
    if (v36) {
      uint64_t v27 = (char *)v36 + 16;
    }
    else {
      uint64_t v27 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v39 = 2082;
    uint64_t v40 = v26;
    __int16 v41 = 2082;
    __int16 v42 = v27;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.remove() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    double v29 = v36;
    uint64_t v36 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1) {
        WTF::fastFree(v29, v28);
      }
      else {
        --*(_DWORD *)v29;
      }
    }
    int v30 = resolve;
    JSObjectRef resolve = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    if (!v17) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.remove()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v31 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  if (JSValueIsObject(this, *(JSValueRef *)(a5 + 8))
    && (BOOL v18 = JSValueToObject(this, *(JSValueRef *)(a5 + 8), 0), JSObjectIsFunction(this, v18))
    || JSValueIsNull(this, *(JSValueRef *)(a5 + 8))
    || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
  {
    uint64_t v17 = WebKit::toNSObject(this, *(void *)a5, 0, 0, 0);
    unint64_t v20 = *(const OpaqueJSContext **)(a5 + 8);
    unint64_t v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v17)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.remove()", &cfstr_Tabids.isa, &cfstr_AnObjectIsExpe.isa, v14);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_26;
    }
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_20;
    }
LABEL_19:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v37 = resolve;
    *(void *)long long buf = this;
    uint64_t v36 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v37, &v36, &v33);
    uint64_t v15 = v33;
LABEL_20:
    *(void *)long long buf = v15;
    id v32 = 0;
    WebKit::WebExtensionAPITabs::remove(v12, v17, (uint64_t *)buf, &v32);
    JSValueRef v23 = (NSString *)v32;
    uint64_t v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)long long buf = 0;
    if (v24) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    }
    if (v23)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.remove()", 0, v23, v22);
    }
    else if (Undefined)
    {
LABEL_25:

      goto LABEL_26;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_25;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.remove()", &cfstr_Callback.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v31 = JSValueMakeUndefined(this);
LABEL_47:
  JSValueRef Undefined = v31;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989980AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::reload(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((unsigned char *)v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_53;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v56 = "argument";
    }
    else {
      uint64_t v56 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v69;
    WTF::String::utf8();
    if (v68) {
      id v57 = (char *)v68 + 16;
    }
    else {
      id v57 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v71 = 2082;
    v72 = v56;
    __int16 v73 = 2082;
    v74 = v57;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function tabs.reload() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    v59 = v68;
    uint64_t v68 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1) {
        WTF::fastFree(v59, v58);
      }
      else {
        --*(_DWORD *)v59;
      }
    }
    v60 = resolve;
    JSObjectRef resolve = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v15 = a5[1];
      if (v15)
      {
        uint64_t v16 = (void *)MEMORY[0x1E4F30938];
        uint64_t v17 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v18 = [v16 valueWithJSValueRef:v15 inContext:v17];

        unint64_t v19 = (void *)v18;
      }
      else
      {
        unint64_t v19 = 0;
      }
      char v27 = [v19 _isDictionary];

      if ((v27 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (JSValueRef v28 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v28))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v26 = JSValueToNumber(this, *a5, 0);
          uint64_t v25 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          double v29 = a5[2];
          int v30 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v29, v30, buf);
          uint64_t v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
          goto LABEL_28;
        }
        v61 = @"a function is expected";
        __int16 v62 = @"callback";
      }
      else
      {
        v61 = @"an object is expected";
        __int16 v62 = @"properties";
      }
    }
    else
    {
      v61 = @"a number is expected";
      __int16 v62 = @"tabID";
    }
    __int16 v44 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.reload()", &v62->isa, &v61->isa, v14);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_52;
  }
  unint64_t v20 = (char *)a4 - 1;
  if ((uint64_t)a4 - 1 < 0)
  {
    uint64_t v25 = 0;
    double v26 = NAN;
    goto LABEL_30;
  }
  unint64_t v21 = a5[(void)v20];
  if (v21
    && (JSValueIsObject(this, a5[(void)v20]) && (JSValueRef v22 = JSValueToObject(this, v21, 0), JSObjectIsFunction(this, v22))
     || JSValueIsNull(this, v21)
     || JSValueIsUndefined(this, v21)))
  {
    JSValueRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    WebKit::toJSCallbackHandler((uint64_t)this, v21, v23, buf);
    uint64_t v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    unint64_t v20 = (char *)a4 - 2;
    if ((uint64_t)a4 - 2 < 0)
    {
      uint64_t v25 = 0;
LABEL_71:
      double v26 = NAN;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v49 = a5[(void)v20];
  if (!v49) {
    goto LABEL_64;
  }
  uint64_t v50 = (void *)MEMORY[0x1E4F30938];
  uint64_t v51 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
  uint64_t v52 = [v50 valueWithJSValueRef:v49 inContext:v51];

  LOBYTE(v51) = [v52 _isDictionary];
  if ((v51 & 1) != 0 || JSValueIsNull(this, v49) || JSValueIsUndefined(this, v49))
  {
    uint64_t v53 = WebKit::toNSDictionary(this, v49, 0, 0);
    uint64_t v25 = (void *)v53;
    if (!v20) {
      goto LABEL_71;
    }
    --v20;
    v47 = (void *)v53;
  }
  else
  {
LABEL_64:
    v47 = 0;
  }
  uint64_t v54 = a5[(void)v20];
  if (!v54
    || !JSValueIsNumber(this, v54) && !JSValueIsNull(this, v54) && !JSValueIsUndefined(this, v54)
    || (double v55 = JSValueToNumber(this, v54, 0), v20))
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.reload()", 0, &cfstr_AnUnknownArgum.isa, v13);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v24) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  double v26 = v55;
  uint64_t v25 = v47;
LABEL_28:
  if (v24)
  {
    JSValueRef Undefined = 0;
    goto LABEL_31;
  }
LABEL_30:
  JSObjectRef reject = 0;
  JSObjectRef resolve = 0;
  JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v69 = resolve;
  *(void *)long long buf = this;
  uint64_t v68 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v69, &v68, &v65);
  uint64_t v24 = v65;
LABEL_31:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
  uint64_t v34 = *(void *)buf;
  if (!*(void *)buf) {
    goto LABEL_45;
  }
  uint64_t v35 = *(void *)(*(void *)buf + 24);
  if (!v35
    || (uint64_t v36 = *(void *)(v35 + 8)) == 0
    || (uint64_t v37 = *(void *)(v36 + 24)) == 0
    || (uint64_t v38 = *(void *)(v37 + 8)) == 0
    || (__int16 v39 = *(void **)(*(void *)(v38 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v39 + 1368))(v39) & 1) != 0)
    || (uint64_t v40 = *(void *)(v39[2] + 8)) == 0)
  {
    CFRelease(*(CFTypeRef *)(v34 + 8));
LABEL_45:
    id v45 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v45, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_47:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.reload()", 0, &cfstr_AnUnknownError.isa, v46);
        if (Undefined) {
          goto LABEL_49;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_47;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_49:
    v47 = v25;
    if (!v24)
    {
LABEL_51:
      __int16 v44 = v47;
      goto LABEL_52;
    }
LABEL_50:
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    goto LABEL_51;
  }
  CFRetain(*(CFTypeRef *)(v40 - 8));
  CFRelease(*(CFTypeRef *)(v34 + 8));
  *(void *)long long buf = v24;
  id v64 = 0;
  WebKit::WebExtensionAPITabs::reload(v11, v40 - 16, v25, (uint64_t *)buf, &v64, v26);
  __int16 v42 = (NSString *)v64;
  uint64_t v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)long long buf = 0;
  if (v43) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
  }
  if (v42)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.reload()", 0, v42, v41);
    goto LABEL_42;
  }
  if (!Undefined) {
LABEL_42:
  }
    JSValueRef Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v40 - 8));
  __int16 v44 = v25;
LABEL_52:

LABEL_53:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_198998AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
    }
    else {
      --*(_DWORD *)(v17 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::goBack(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v40 = "argument";
    }
    else {
      uint64_t v40 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v52;
    WTF::String::utf8();
    if (v51) {
      __int16 v41 = (char *)v51 + 16;
    }
    else {
      __int16 v41 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v54 = 2082;
    double v55 = v40;
    __int16 v56 = 2082;
    id v57 = v41;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.goBack() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v43 = v51;
    uint64_t v51 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1) {
        WTF::fastFree(v43, v42);
      }
      else {
        --*(_DWORD *)v43;
      }
    }
    __int16 v44 = resolve;
    JSObjectRef resolve = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (JSValueRef v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_75;
      }
LABEL_76:
      id v45 = @"a number is expected";
      __int16 v46 = @"tabID";
      goto LABEL_77;
    }
    double v16 = NAN;
LABEL_26:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v52 = resolve;
    *(void *)long long buf = this;
    uint64_t v51 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v52, &v51, &v48);
    unint64_t v19 = v48;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v28 = *(void *)(*(void *)buf + 24);
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              id v32 = *(void **)(*(void *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
              {
                uint64_t v33 = *(void *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*(CFTypeRef *)(v27 + 8));
                  *(void *)long long buf = v19;
                  NSString v47 = 0;
                  WebKit::WebExtensionAPITabs::goBack(v12, v33 - 16, (uint64_t *)buf, &v47, v16);
                  uint64_t v35 = v47;
                  uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v36) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  }
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.goBack()", 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
    uint64_t v37 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.goBack()", 0, &cfstr_AnUnknownError.isa, v38);
        if (Undefined) {
          goto LABEL_45;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (unint64_t v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_76;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (unint64_t v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    JSValueRef v22 = *a5;
    JSValueRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_75:
  id v45 = @"a function is expected";
  __int16 v46 = @"callback";
LABEL_77:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.goBack()", &v46->isa, &v45->isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989992F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::goForward(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v40 = "argument";
    }
    else {
      uint64_t v40 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v52;
    WTF::String::utf8();
    if (v51) {
      __int16 v41 = (char *)v51 + 16;
    }
    else {
      __int16 v41 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v54 = 2082;
    double v55 = v40;
    __int16 v56 = 2082;
    id v57 = v41;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.goForward() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v43 = v51;
    uint64_t v51 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1) {
        WTF::fastFree(v43, v42);
      }
      else {
        --*(_DWORD *)v43;
      }
    }
    __int16 v44 = resolve;
    JSObjectRef resolve = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_75;
      }
LABEL_76:
      id v45 = @"a number is expected";
      __int16 v46 = @"tabID";
      goto LABEL_77;
    }
    double v16 = NAN;
LABEL_26:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v52 = resolve;
    *(void *)long long buf = this;
    uint64_t v51 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v52, &v51, &v48);
    unint64_t v19 = v48;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v28 = *(void *)(*(void *)buf + 24);
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              id v32 = *(void **)(*(void *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
              {
                uint64_t v33 = *(void *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*(CFTypeRef *)(v27 + 8));
                  *(void *)long long buf = v19;
                  NSString v47 = 0;
                  WebKit::WebExtensionAPITabs::goForward(v12, v33 - 16, (uint64_t *)buf, &v47, v16);
                  uint64_t v35 = v47;
                  uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v36) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  }
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.goForward()", 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
    uint64_t v37 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.goForward()", 0, &cfstr_AnUnknownError.isa, v38);
        if (Undefined) {
          goto LABEL_45;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (unint64_t v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_76;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (unint64_t v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    JSValueRef v22 = *a5;
    JSValueRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_75:
  id v45 = @"a function is expected";
  __int16 v46 = @"callback";
LABEL_77:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.goForward()", &v46->isa, &v45->isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_198999AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getZoom(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v40 = "argument";
    }
    else {
      uint64_t v40 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v52;
    WTF::String::utf8();
    if (v51) {
      __int16 v41 = (char *)v51 + 16;
    }
    else {
      __int16 v41 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v54 = 2082;
    double v55 = v40;
    __int16 v56 = 2082;
    id v57 = v41;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.getZoom() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v43 = v51;
    uint64_t v51 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1) {
        WTF::fastFree(v43, v42);
      }
      else {
        --*(_DWORD *)v43;
      }
    }
    __int16 v44 = resolve;
    JSObjectRef resolve = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_75;
      }
LABEL_76:
      id v45 = @"a number is expected";
      __int16 v46 = @"tabID";
      goto LABEL_77;
    }
    double v16 = NAN;
LABEL_26:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    uint64_t v52 = resolve;
    *(void *)long long buf = this;
    uint64_t v51 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v52, &v51, &v48);
    unint64_t v19 = v48;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v28 = *(void *)(*(void *)buf + 24);
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              id v32 = *(void **)(*(void *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
              {
                uint64_t v33 = *(void *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*(CFTypeRef *)(v27 + 8));
                  *(void *)long long buf = v19;
                  NSString v47 = 0;
                  WebKit::WebExtensionAPITabs::getZoom(v12, v33 - 16, (uint64_t *)buf, &v47, v16);
                  uint64_t v35 = v47;
                  uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v36) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  }
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.getZoom()", 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
    uint64_t v37 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.getZoom()", 0, &cfstr_AnUnknownError.isa, v38);
        if (Undefined) {
          goto LABEL_45;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (unint64_t v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_76;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (unint64_t v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    JSValueRef v22 = *a5;
    JSValueRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_75:
  id v45 = @"a function is expected";
  __int16 v46 = @"callback";
LABEL_77:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.getZoom()", &v46->isa, &v45->isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19899A2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::setZoom(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_80;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v30 = "argument";
    }
    else {
      uint64_t v30 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v60;
    WTF::String::utf8();
    if (v59) {
      uint64_t v31 = (char *)v59 + 16;
    }
    else {
      uint64_t v31 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v62 = 2082;
    v63 = v30;
    __int16 v64 = 2082;
    v65 = v31;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.setZoom() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1) {
        WTF::fastFree(v33, v32);
      }
      else {
        --*(_DWORD *)v33;
      }
    }
    uint64_t v34 = resolve;
    JSObjectRef resolve = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsNumber(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (JSValueRef v23 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v23))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v24 = JSValueToNumber(this, *a5, 0);
          double v25 = JSValueToNumber(this, a5[1], 0);
          double v26 = a5[2];
          uint64_t v27 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v26, v27, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
            goto LABEL_56;
          }
          goto LABEL_93;
        }
        uint64_t v53 = @"a function is expected";
        __int16 v54 = @"callback";
      }
      else
      {
        uint64_t v53 = @"a number is expected";
        __int16 v54 = @"zoomFactor";
      }
    }
    else
    {
      uint64_t v53 = @"a number is expected";
      __int16 v54 = @"tabID";
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.setZoom()", &v54->isa, &v53->isa, v22);
    JSValueRef v52 = JSValueMakeUndefined(this);
  }
  else
  {
    if (a4)
    {
      unint64_t v15 = (unint64_t)a4 - 1;
      if ((uint64_t)a4 - 1 < 0)
      {
        unint64_t v19 = 0;
        double v24 = NAN;
        double v25 = NAN;
        goto LABEL_54;
      }
      if (a4 == (OpaqueJSValue *)1)
      {
        unint64_t v19 = 0;
        unint64_t v20 = 0;
        unint64_t v21 = 0;
      }
      else
      {
        double v16 = a5[v15];
        if (v16
          && (JSValueIsObject(this, a5[v15]) && (uint64_t v17 = JSValueToObject(this, v16, 0), JSObjectIsFunction(this, v17))
           || JSValueIsNull(this, v16)
           || JSValueIsUndefined(this, v16)))
        {
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v16, v18, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          unint64_t v20 = (unint64_t)a4 - 2;
          unint64_t v21 = 1;
        }
        else
        {
          unint64_t v19 = 0;
          unint64_t v21 = 0;
          unint64_t v20 = (unint64_t)a4 - 1;
        }
      }
      uint64_t v28 = a5[v20];
      if (v28)
      {
        if (!JSValueIsNumber(this, a5[v20])) {
          goto LABEL_93;
        }
        double v25 = JSValueToNumber(this, v28, 0);
        --v20;
      }
      else
      {
        double v25 = NAN;
      }
      double v24 = NAN;
      if (v21 < v15 && (v20 & 0x8000000000000000) == 0)
      {
        uint64_t v29 = a5[v20];
        if (v29 && (JSValueIsNumber(this, v29) || JSValueIsNull(this, v29) || JSValueIsUndefined(this, v29)))
        {
          double v24 = JSValueToNumber(this, v29, 0);
          unint64_t v15 = v20 - 1;
          goto LABEL_54;
        }
        double v24 = NAN;
      }
      unint64_t v15 = v20;
LABEL_54:
      if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if ((v15 & 0x8000000000000000) == 0)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.setZoom()", 0, &cfstr_AnUnknownArgum.isa, v14);
          JSValueRef v50 = JSValueMakeUndefined(this);
          goto LABEL_77;
        }
LABEL_56:
        if (v19)
        {
          JSValueRef Undefined = 0;
        }
        else
        {
          JSObjectRef reject = 0;
          JSObjectRef resolve = 0;
          JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          v60 = resolve;
          *(void *)long long buf = this;
          v59 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v60, &v59, &v56);
          unint64_t v19 = v56;
        }
        GlobalContext = JSContextGetGlobalContext(this);
        WebKit::WebFrame::frameForContext(GlobalContext, v37, buf);
        uint64_t v38 = *(void *)buf;
        if (*(void *)buf)
        {
          uint64_t v39 = *(void *)(*(void *)buf + 24);
          if (v39)
          {
            uint64_t v40 = *(void *)(v39 + 8);
            if (v40)
            {
              uint64_t v41 = *(void *)(v40 + 24);
              if (v41)
              {
                uint64_t v42 = *(void *)(v41 + 8);
                if (v42)
                {
                  uint64_t v43 = *(void **)(*(void *)(v42 + 48) + 16);
                  if (((*(uint64_t (**)(void *))(*v43 + 1368))(v43) & 1) == 0)
                  {
                    uint64_t v44 = *(void *)(v43[2] + 8);
                    if (v44)
                    {
                      CFRetain(*(CFTypeRef *)(v44 - 8));
                      CFRelease(*(CFTypeRef *)(v38 + 8));
                      *(void *)long long buf = v19;
                      NSString v55 = 0;
                      WebKit::WebExtensionAPITabs::setZoom(v12, v44 - 16, (uint64_t *)buf, &v55, v24, v25);
                      __int16 v46 = v55;
                      NSString v47 = *(WebKit::WebExtensionCallbackHandler **)buf;
                      *(void *)long long buf = 0;
                      if (v47) {
                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v47);
                      }
                      if (v46)
                      {
                        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.setZoom()", 0, v46, v45);
                      }
                      else if (Undefined)
                      {
LABEL_71:

                        CFRelease(*(CFTypeRef *)(v44 - 8));
                        goto LABEL_80;
                      }
                      JSValueRef Undefined = JSValueMakeUndefined(this);
                      goto LABEL_71;
                    }
                  }
                }
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v38 + 8));
        }
        uint64_t v48 = qword_1EB357DF8;
        if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1985F2000, v48, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          if (Undefined)
          {
LABEL_75:
            JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.setZoom()", 0, &cfstr_AnUnknownError.isa, v49);
            if (Undefined) {
              goto LABEL_78;
            }
          }
        }
        else if (Undefined)
        {
          goto LABEL_75;
        }
        JSValueRef v50 = JSValueMakeUndefined(this);
LABEL_77:
        JSValueRef Undefined = v50;
LABEL_78:
        if (v19) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
        }
        goto LABEL_80;
      }
LABEL_93:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.setZoom()", &cfstr_Zoomfactor.isa, &cfstr_ANumberIsExpec.isa, v14);
      JSValueRef v50 = JSValueMakeUndefined(this);
      goto LABEL_77;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.setZoom()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v52 = JSValueMakeUndefined(this);
  }
  JSValueRef Undefined = v52;
LABEL_80:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19899AC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::detectLanguage(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v40 = "argument";
    }
    else {
      uint64_t v40 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v52;
    WTF::String::utf8();
    if (v51) {
      uint64_t v41 = (char *)v51 + 16;
    }
    else {
      uint64_t v41 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v54 = 2082;
    NSString v55 = v40;
    __int16 v56 = 2082;
    id v57 = v41;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.detectLanguage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v43 = v51;
    uint64_t v51 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1) {
        WTF::fastFree(v43, v42);
      }
      else {
        --*(_DWORD *)v43;
      }
    }
    uint64_t v44 = resolve;
    JSObjectRef resolve = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_75;
      }
LABEL_76:
      id v45 = @"a number is expected";
      __int16 v46 = @"tabID";
      goto LABEL_77;
    }
    double v16 = NAN;
LABEL_26:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    JSValueRef v52 = resolve;
    *(void *)long long buf = this;
    uint64_t v51 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v52, &v51, &v48);
    unint64_t v19 = v48;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v28 = *(void *)(*(void *)buf + 24);
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              id v32 = *(void **)(*(void *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
              {
                uint64_t v33 = *(void *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*(CFTypeRef *)(v27 + 8));
                  *(void *)long long buf = v19;
                  NSString v47 = 0;
                  WebKit::WebExtensionAPITabs::detectLanguage(v12, v33 - 16, (uint64_t *)buf, &v47, v16);
                  uint64_t v35 = v47;
                  uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v36) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  }
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.detectLanguage()", 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
    uint64_t v37 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.detectLanguage()", 0, &cfstr_AnUnknownError.isa, v38);
        if (Undefined) {
          goto LABEL_45;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (unint64_t v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_76;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (unint64_t v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    JSValueRef v22 = *a5;
    JSValueRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_75:
  id v45 = @"a function is expected";
  __int16 v46 = @"callback";
LABEL_77:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.detectLanguage()", &v46->isa, &v45->isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19899B424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::toggleReaderMode(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v40 = "argument";
    }
    else {
      uint64_t v40 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v52;
    WTF::String::utf8();
    if (v51) {
      uint64_t v41 = (char *)v51 + 16;
    }
    else {
      uint64_t v41 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v54 = 2082;
    NSString v55 = v40;
    __int16 v56 = 2082;
    id v57 = v41;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.toggleReaderMode() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v43 = v51;
    uint64_t v51 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1) {
        WTF::fastFree(v43, v42);
      }
      else {
        --*(_DWORD *)v43;
      }
    }
    uint64_t v44 = resolve;
    JSObjectRef resolve = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_75;
      }
LABEL_76:
      id v45 = @"a number is expected";
      __int16 v46 = @"tabID";
      goto LABEL_77;
    }
    double v16 = NAN;
LABEL_26:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    JSValueRef v52 = resolve;
    *(void *)long long buf = this;
    uint64_t v51 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v52, &v51, &v48);
    unint64_t v19 = v48;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v28 = *(void *)(*(void *)buf + 24);
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              id v32 = *(void **)(*(void *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
              {
                uint64_t v33 = *(void *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*(CFTypeRef *)(v27 + 8));
                  *(void *)long long buf = v19;
                  NSString v47 = 0;
                  WebKit::WebExtensionAPITabs::toggleReaderMode(v12, v33 - 16, (uint64_t *)buf, &v47, v16);
                  uint64_t v35 = v47;
                  uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v36) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  }
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.toggleReaderMode()", 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
    uint64_t v37 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.toggleReaderMode()", 0, &cfstr_AnUnknownError.isa, v38);
        if (Undefined) {
          goto LABEL_45;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (unint64_t v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_76;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (unint64_t v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    JSValueRef v22 = *a5;
    JSValueRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_75:
  id v45 = @"a function is expected";
  __int16 v46 = @"callback";
LABEL_77:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.toggleReaderMode()", &v46->isa, &v45->isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19899BC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::captureVisibleTab(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((unsigned char *)v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_53;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v56 = "argument";
    }
    else {
      __int16 v56 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v69;
    WTF::String::utf8();
    if (v68) {
      id v57 = (char *)v68 + 16;
    }
    else {
      id v57 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v71 = 2082;
    v72 = v56;
    __int16 v73 = 2082;
    v74 = v57;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function tabs.captureVisibleTab() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    v59 = v68;
    uint64_t v68 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1) {
        WTF::fastFree(v59, v58);
      }
      else {
        --*(_DWORD *)v59;
      }
    }
    v60 = resolve;
    JSObjectRef resolve = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v58);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v15 = a5[1];
      if (v15)
      {
        double v16 = (void *)MEMORY[0x1E4F30938];
        uint64_t v17 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v18 = [v16 valueWithJSValueRef:v15 inContext:v17];

        unint64_t v19 = (void *)v18;
      }
      else
      {
        unint64_t v19 = 0;
      }
      char v27 = [v19 _isDictionary];

      if ((v27 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (uint64_t v28 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v28))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v26 = JSValueToNumber(this, *a5, 0);
          double v25 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          uint64_t v29 = a5[2];
          uint64_t v30 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v29, v30, buf);
          double v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
          goto LABEL_28;
        }
        v61 = @"a function is expected";
        __int16 v62 = @"callback";
      }
      else
      {
        v61 = @"an object is expected";
        __int16 v62 = @"options";
      }
    }
    else
    {
      v61 = @"a number is expected";
      __int16 v62 = @"windowID";
    }
    uint64_t v44 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.captureVisibleTab()", &v62->isa, &v61->isa, v14);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_52;
  }
  unint64_t v20 = (char *)a4 - 1;
  if ((uint64_t)a4 - 1 < 0)
  {
    double v25 = 0;
    double v26 = NAN;
    goto LABEL_30;
  }
  unint64_t v21 = a5[(void)v20];
  if (v21
    && (JSValueIsObject(this, a5[(void)v20]) && (JSValueRef v22 = JSValueToObject(this, v21, 0), JSObjectIsFunction(this, v22))
     || JSValueIsNull(this, v21)
     || JSValueIsUndefined(this, v21)))
  {
    JSValueRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    WebKit::toJSCallbackHandler((uint64_t)this, v21, v23, buf);
    double v24 = *(WebKit::WebExtensionCallbackHandler **)buf;
    unint64_t v20 = (char *)a4 - 2;
    if ((uint64_t)a4 - 2 < 0)
    {
      double v25 = 0;
LABEL_71:
      double v26 = NAN;
      goto LABEL_28;
    }
  }
  else
  {
    double v24 = 0;
  }
  uint64_t v49 = a5[(void)v20];
  if (!v49) {
    goto LABEL_64;
  }
  JSValueRef v50 = (void *)MEMORY[0x1E4F30938];
  uint64_t v51 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
  JSValueRef v52 = [v50 valueWithJSValueRef:v49 inContext:v51];

  LOBYTE(v51) = [v52 _isDictionary];
  if ((v51 & 1) != 0 || JSValueIsNull(this, v49) || JSValueIsUndefined(this, v49))
  {
    uint64_t v53 = WebKit::toNSDictionary(this, v49, 0, 0);
    double v25 = (void *)v53;
    if (!v20) {
      goto LABEL_71;
    }
    --v20;
    NSString v47 = (void *)v53;
  }
  else
  {
LABEL_64:
    NSString v47 = 0;
  }
  __int16 v54 = a5[(void)v20];
  if (!v54
    || !JSValueIsNumber(this, v54) && !JSValueIsNull(this, v54) && !JSValueIsUndefined(this, v54)
    || (double v55 = JSValueToNumber(this, v54, 0), v20))
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.captureVisibleTab()", 0, &cfstr_AnUnknownArgum.isa, v13);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v24) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  double v26 = v55;
  double v25 = v47;
LABEL_28:
  if (v24)
  {
    JSValueRef Undefined = 0;
    goto LABEL_31;
  }
LABEL_30:
  JSObjectRef reject = 0;
  JSObjectRef resolve = 0;
  JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  v69 = resolve;
  *(void *)long long buf = this;
  uint64_t v68 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v69, &v68, &v65);
  double v24 = v65;
LABEL_31:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
  uint64_t v34 = *(void *)buf;
  if (!*(void *)buf) {
    goto LABEL_45;
  }
  uint64_t v35 = *(void *)(*(void *)buf + 24);
  if (!v35
    || (uint64_t v36 = *(void *)(v35 + 8)) == 0
    || (uint64_t v37 = *(void *)(v36 + 24)) == 0
    || (uint64_t v38 = *(void *)(v37 + 8)) == 0
    || (uint64_t v39 = *(void **)(*(void *)(v38 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v39 + 1368))(v39) & 1) != 0)
    || (uint64_t v40 = *(void *)(v39[2] + 8)) == 0)
  {
    CFRelease(*(CFTypeRef *)(v34 + 8));
LABEL_45:
    id v45 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v45, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_47:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.captureVisibleTab()", 0, &cfstr_AnUnknownError.isa, v46);
        if (Undefined) {
          goto LABEL_49;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_47;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_49:
    NSString v47 = v25;
    if (!v24)
    {
LABEL_51:
      uint64_t v44 = v47;
      goto LABEL_52;
    }
LABEL_50:
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
    goto LABEL_51;
  }
  CFRetain(*(CFTypeRef *)(v40 - 8));
  CFRelease(*(CFTypeRef *)(v34 + 8));
  *(void *)long long buf = v24;
  id v64 = 0;
  WebKit::WebExtensionAPITabs::captureVisibleTab(v11, v40 - 16, v25, (uint64_t *)buf, &v64, v26);
  uint64_t v42 = (NSString *)v64;
  uint64_t v43 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)long long buf = 0;
  if (v43) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
  }
  if (v42)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.captureVisibleTab()", 0, v42, v41);
    goto LABEL_42;
  }
  if (!Undefined) {
LABEL_42:
  }
    JSValueRef Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v40 - 8));
  uint64_t v44 = v25;
LABEL_52:

LABEL_53:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_19899C63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
    }
    else {
      --*(_DWORD *)(v17 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::sendMessage(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, unint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  exception = a6;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((unsigned char *)v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_67;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == 1) {
      double v55 = "argument";
    }
    else {
      double v55 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = *(JSObjectRef *)v74;
    WTF::String::utf8();
    if (v73) {
      __int16 v56 = (char *)v73 + 16;
    }
    else {
      __int16 v56 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v76 = 2082;
    uint64_t v77 = v55;
    __int16 v78 = 2082;
    v79 = v56;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function tabs.sendMessage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v58 = v73;
    __int16 v73 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1) {
        WTF::fastFree(v58, v57);
      }
      else {
        --*(_DWORD *)v58;
      }
    }
    v59 = resolve;
    JSObjectRef resolve = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v57);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
  }

  unint64_t v14 = a4 - 1;
  if (a4 > 1)
  {
    if (a4 == 2)
    {
      JSValueRef v22 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      if (a4 == 4)
      {
        if (JSValueIsNumber(this, *a5))
        {
          if (JSValueIsNull(this, a5[1])
            || JSValueIsUndefined(this, a5[1])
            || (double v16 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v16)))
          {
            v60 = @"an object is expected";
            v61 = @"message";
          }
          else
          {
            JSValueRef v17 = a5[2];
            if (v17)
            {
              uint64_t v18 = (void *)MEMORY[0x1E4F30938];
              unint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
              uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

              unint64_t v21 = (void *)v20;
            }
            else
            {
              unint64_t v21 = 0;
            }
            char v40 = objc_msgSend(v21, "_isDictionary", exception);

            if ((v40 & 1) != 0 || JSValueIsNull(this, a5[2]) || JSValueIsUndefined(this, a5[2]))
            {
              if (JSValueIsObject(this, a5[3])
                && (uint64_t v41 = JSValueToObject(this, a5[3], 0), JSObjectIsFunction(this, v41))
                || JSValueIsNull(this, a5[3])
                || JSValueIsUndefined(this, a5[3]))
              {
                double v29 = JSValueToNumber(this, *a5, 0);
                uint64_t v43 = WebKit::serializeJSObject(this, a5[1], exception, v42);
                uint64_t v44 = WebKit::toNSDictionary(this, a5[2], 0, 0);
                id v45 = a5[3];
                __int16 v46 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
                WebKit::toJSCallbackHandler((uint64_t)this, v45, v46, buf);
                JSValueRef v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
                unint64_t v33 = 4;
                a4 = 4;
                uint64_t v34 = (void *)v43;
                uint64_t v35 = (void *)v44;
                goto LABEL_47;
              }
              v60 = @"a function is expected";
              v61 = @"callback";
            }
            else
            {
              v60 = @"an object is expected";
              v61 = @"options";
            }
          }
        }
        else
        {
          v60 = @"a number is expected";
          v61 = @"tabID";
        }
        uint64_t v53 = 0;
        *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.sendMessage()", &v61->isa, &v60->isa, v15);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        uint64_t v34 = 0;
LABEL_66:

        goto LABEL_67;
      }
      double v24 = a5[v14];
      if (v24
        && (JSValueIsObject(this, a5[v14]) && (double v25 = JSValueToObject(this, v24, 0), JSObjectIsFunction(this, v25))
         || JSValueIsNull(this, v24)
         || JSValueIsUndefined(this, v24)))
      {
        double v26 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
        WebKit::toJSCallbackHandler((uint64_t)this, v24, v26, buf);
        JSValueRef v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
        uint64_t v23 = a4 - 3;
        --a4;
      }
      else
      {
        JSValueRef v22 = 0;
        uint64_t v23 = 1;
      }
    }
    char v27 = *a5;
    if (*a5)
    {
      if (JSValueIsNumber(this, *a5))
      {
        double v29 = JSValueToNumber(this, v27, 0);
        uint64_t v30 = a5[1];
        if (!v30)
        {
          uint64_t v34 = 0;
          unint64_t v33 = 1;
          goto LABEL_30;
        }
        if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, v30))
        {
          uint64_t v31 = JSValueToObject(this, v30, 0);
          if (!JSObjectIsFunction(this, v31))
          {
            WebKit::serializeJSObject(this, v30, exception, v32);
            uint64_t v34 = v33 = 2;
LABEL_30:
            uint64_t v35 = 0;
            if (v23 && v33 < a4)
            {
              uint64_t v36 = a5[v33];
              if (!v36) {
                goto LABEL_37;
              }
              uint64_t v37 = (void *)MEMORY[0x1E4F30938];
              uint64_t v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
              uint64_t v39 = [v37 valueWithJSValueRef:v36 inContext:v38];

              LOBYTE(v38) = [v39 _isDictionary];
              if ((v38 & 1) != 0 || JSValueIsNull(this, v36) || JSValueIsUndefined(this, v36))
              {
                uint64_t v35 = WebKit::toNSDictionary(this, v36, 0, 0);
                ++v33;
              }
              else
              {
LABEL_37:
                uint64_t v35 = 0;
              }
            }
LABEL_47:
            if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              JSObjectRef v62 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.sendMessage()", &cfstr_Tabid_0.isa, &cfstr_ANumberIsExpec.isa, v13);
            }
            else
            {
              if (*exception)
              {
LABEL_93:
                JSValueRef v63 = JSValueMakeUndefined(this);
                goto LABEL_94;
              }
              if (!v34)
              {
                uint64_t v34 = 0;
                *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.sendMessage()", &cfstr_Message.isa, &cfstr_AJsonSerializa.isa, v13);
                JSValueRef v63 = JSValueMakeUndefined(this);
LABEL_94:
                JSValueRef Undefined = v63;
LABEL_63:
                if (v22) {
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
                }
                uint64_t v53 = v35;
                goto LABEL_66;
              }
              if (v33 >= a4)
              {
                if (v22)
                {
                  JSValueRef Undefined = 0;
                }
                else
                {
                  JSObjectRef reject = 0;
                  JSObjectRef resolve = 0;
                  JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                  *(void *)long long buf = this;
                  __int16 v73 = reject;
                  *(void *)v74 = resolve;
                  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v74, &v73, &v70);
                  JSValueRef v22 = v70;
                }
                GlobalContext = JSContextGetGlobalContext(this);
                WebKit::WebFrame::frameForContext(GlobalContext, v49, buf);
                if (*(void *)buf)
                {
                  *(void *)v74 = v22;
                  id v69 = 0;
                  WebKit::WebExtensionAPITabs::sendMessage(v11, *(WebKit::WebFrame **)buf, v34, v35, (uint64_t *)v74, &v69, v29);
                  uint64_t v51 = (NSString *)v69;
                  JSValueRef v52 = *(WebKit::WebExtensionCallbackHandler **)v74;
                  *(void *)v74 = 0;
                  if (v52) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                  }
                  if (v51)
                  {
                    *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.sendMessage()", 0, v51, v50);
                  }
                  else if (Undefined)
                  {
LABEL_60:

                    if (*(void *)buf) {
                      CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
                    }
                    JSValueRef v22 = 0;
                    goto LABEL_63;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_60;
                }
                id v64 = qword_1EB357DF8;
                if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v74 = 0;
                  _os_log_error_impl(&dword_1985F2000, v64, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v74, 2u);
                  if (Undefined)
                  {
LABEL_97:
                    JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.sendMessage()", 0, &cfstr_AnUnknownError.isa, v65);
                    if (Undefined) {
                      goto LABEL_63;
                    }
                  }
                }
                else if (Undefined)
                {
                  goto LABEL_97;
                }
                JSValueRef v63 = JSValueMakeUndefined(this);
                goto LABEL_94;
              }
              JSObjectRef v62 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.sendMessage()", 0, &cfstr_AnUnknownArgum.isa, v13);
            }
            *exception = v62;
            goto LABEL_93;
          }
        }
        uint64_t v66 = @"an object is expected";
        v67 = @"message";
      }
      else
      {
        uint64_t v66 = @"a number is expected";
        v67 = @"tabID";
      }
      uint64_t v34 = 0;
      *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.sendMessage()", &v67->isa, &v66->isa, v28);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      uint64_t v35 = 0;
      goto LABEL_63;
    }
    unint64_t v33 = 0;
    uint64_t v34 = 0;
    double v29 = NAN;
    goto LABEL_30;
  }
  *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.sendMessage()", 0, &cfstr_ARequiredArgum.isa, v13);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_67:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_19899D270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    CFRelease(*(CFTypeRef *)(a17 + 8));
  }
  if (v18) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
  }

  if (*(_DWORD *)(v17 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
  }
  else {
    --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITabs::connect(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_31;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      id v32 = "argument";
    }
    else {
      id v32 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v42 = *(WTF::StringImpl **)v44;
    WTF::String::utf8();
    if (v43) {
      unint64_t v33 = (char *)v43 + 16;
    }
    else {
      unint64_t v33 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v46 = 2082;
    NSString v47 = v32;
    __int16 v48 = 2082;
    uint64_t v49 = v33;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.connect() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v35 = v43;
    uint64_t v43 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1) {
        WTF::fastFree(v35, v34);
      }
      else {
        --*(_DWORD *)v35;
      }
    }
    uint64_t v36 = v42;
    uint64_t v42 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v34);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsNumber(this, *a5))
    {
      JSValueRef v15 = 0;
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_18;
    }
    goto LABEL_57;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsNumber(this, *a5))
    {
      JSValueRef v18 = a5[1];
      if (v18)
      {
        unint64_t v19 = (void *)MEMORY[0x1E4F30938];
        uint64_t v20 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        unint64_t v21 = [v19 valueWithJSValueRef:v18 inContext:v20];
      }
      else
      {
        unint64_t v21 = 0;
      }
      char v22 = [v21 _isDictionary];

      if ((v22 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        double v16 = JSValueToNumber(this, *a5, 0);
        JSValueRef v15 = WebKit::toNSDictionary(this, a5[1], 0, 0);
LABEL_18:
        if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.connect()", &cfstr_Tabid_0.isa, &cfstr_ANumberIsExpec.isa, v14);
          JSValueRef v37 = JSValueMakeUndefined(this);
        }
        else
        {
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v24, buf);
          uint64_t v25 = *(void *)buf;
          if (*(void *)buf)
          {
            id v41 = 0;
            WebKit::WebExtensionAPITabs::connect(v12, *(WebKit::WebFrame **)buf, this, v15, &v41, (uint64_t *)v44, v16);
            double v26 = (NSString *)v41;
            if (*(void *)v44) {
              char v27 = (void *)(*(void *)v44 + 40);
            }
            else {
              char v27 = 0;
            }
            JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, v27);
            uint64_t v30 = *(WTF::StringImpl **)v44;
            *(void *)uint64_t v44 = 0;
            if (v30)
            {
              if (*((_DWORD *)v30 + 12) == 1)
              {
                (*(void (**)(void))(*((void *)v30 + 5) + 8))();
                if (v26)
                {
LABEL_56:
                  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.connect()", 0, v26, v28);
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                }
LABEL_29:

                CFRelease(*(CFTypeRef *)(v25 + 8));
LABEL_30:

                goto LABEL_31;
              }
              --*((_DWORD *)v30 + 12);
            }
            if (v26) {
              goto LABEL_56;
            }
            goto LABEL_29;
          }
          uint64_t v38 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v44 = 0;
            _os_log_error_impl(&dword_1985F2000, v38, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v44, 2u);
          }
          JSValueRef v37 = JSValueMakeUndefined(this);
        }
LABEL_59:
        JSValueRef Undefined = v37;
        goto LABEL_30;
      }
      uint64_t v39 = @"an object is expected";
      char v40 = @"options";
LABEL_58:
      JSValueRef v15 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.connect()", &v40->isa, &v39->isa, v17);
      JSValueRef v37 = JSValueMakeUndefined(this);
      goto LABEL_59;
    }
LABEL_57:
    uint64_t v39 = @"a number is expected";
    char v40 = @"tabID";
    goto LABEL_58;
  }
  if (a4)
  {
    JSValueRef v15 = 0;
    double v16 = NAN;
    goto LABEL_18;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.connect()", 0, &cfstr_ARequiredArgum.isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_31:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19899D980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITabs::tabIdentifierNone(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v13) {
        uint64_t v11 = (char *)v13 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      double v16 = v11;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.TAB_ID_NONE in %{public}s world", buf, 0xCu);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }

    JSValueRef Undefined = JSValueMakeNumber(this, -1.0);
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899DCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onActivated(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onActivated in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onActivated(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899DFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onAttached(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onAttached in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onAttached(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899E28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onCreated(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onCreated in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onCreated(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899E560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onDetached(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onDetached in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onDetached(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899E834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onHighlighted(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onHighlighted in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onHighlighted(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899EB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onMoved(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onMoved in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onMoved(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899EDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onRemoved(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onRemoved in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onRemoved(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899F0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onReplaced(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onReplaced in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onReplaced(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899F384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::onUpdated(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPITabs(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter tabs.onUpdated in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPITabs::onUpdated(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_19899F658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::getSelected(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(unsigned char *)(v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      char v40 = "argument";
    }
    else {
      char v40 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v52;
    WTF::String::utf8();
    if (v51) {
      id v41 = (char *)v51 + 16;
    }
    else {
      id v41 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v54 = 2082;
    double v55 = v40;
    __int16 v56 = 2082;
    id v57 = v41;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function tabs.getSelected() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v43 = v51;
    uint64_t v51 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1) {
        WTF::fastFree(v43, v42);
      }
      else {
        --*(_DWORD *)v43;
      }
    }
    uint64_t v44 = resolve;
    JSObjectRef resolve = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }

  if (a4 != (OpaqueJSValue *)1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
      {
        if (JSValueIsObject(this, a5[1]) && (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15))
          || JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, a5[1]))
        {
          double v16 = JSValueToNumber(this, *a5, 0);
          uint64_t v17 = a5[1];
          uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
          unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (!*(void *)buf) {
            goto LABEL_26;
          }
LABEL_24:
          JSValueRef Undefined = 0;
          goto LABEL_27;
        }
        goto LABEL_75;
      }
LABEL_76:
      id v45 = @"a number is expected";
      __int16 v46 = @"windowID";
      goto LABEL_77;
    }
    double v16 = NAN;
LABEL_26:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    JSValueRef v52 = resolve;
    *(void *)long long buf = this;
    uint64_t v51 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v52, &v51, &v48);
    unint64_t v19 = v48;
LABEL_27:
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v28 = *(void *)(*(void *)buf + 24);
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + 8);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 24);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              id v32 = *(void **)(*(void *)(v31 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) == 0)
              {
                uint64_t v33 = *(void *)(v32[2] + 8);
                if (v33)
                {
                  CFRetain(*(CFTypeRef *)(v33 - 8));
                  CFRelease(*(CFTypeRef *)(v27 + 8));
                  *(void *)long long buf = v19;
                  NSString v47 = 0;
                  WebKit::WebExtensionAPITabs::getSelected(v12, v33 - 16, (uint64_t *)buf, &v47, v16);
                  uint64_t v35 = v47;
                  uint64_t v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
                  *(void *)long long buf = 0;
                  if (v36) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
                  }
                  if (v35)
                  {
                    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.getSelected()", 0, v35, v34);
                  }
                  else if (Undefined)
                  {
LABEL_39:

                    CFRelease(*(CFTypeRef *)(v33 - 8));
                    goto LABEL_47;
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  goto LABEL_39;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
    JSValueRef v37 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_43:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.getSelected()", 0, &cfstr_AnUnknownError.isa, v38);
        if (Undefined) {
          goto LABEL_45;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_43;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_45:
    if (v19) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
    goto LABEL_47;
  }
  if (!JSValueIsObject(this, *a5) || (uint64_t v20 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v20)))
  {
    if (!JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
    {
      if (!JSValueIsNumber(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
        goto LABEL_76;
      }
      double v16 = JSValueToNumber(this, *a5, 0);
      goto LABEL_26;
    }
  }
  if (JSValueIsObject(this, *a5) && (unint64_t v21 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v21))
    || JSValueIsNull(this, *a5)
    || JSValueIsUndefined(this, *a5))
  {
    char v22 = *a5;
    uint64_t v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
    unint64_t v19 = *(WebKit::WebExtensionCallbackHandler **)buf;
    double v16 = NAN;
    if (*(void *)buf) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
LABEL_75:
  id v45 = @"a function is expected";
  __int16 v46 = @"callback";
LABEL_77:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.getSelected()", &v46->isa, &v45->isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_19899FDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::executeScript(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v11 = v10;
  if (!v10 || (++*(_DWORD *)(v10 + 48), *(unsigned char *)(v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_86;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      id v41 = "argument";
    }
    else {
      id v41 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v71;
    WTF::String::utf8();
    if (v70) {
      uint64_t v42 = (char *)v70 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v73 = 2082;
    v74 = v41;
    __int16 v75 = 2082;
    __int16 v76 = v42;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function tabs.executeScript() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v70;
    v70 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    JSObjectRef resolve = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v22 = a5[1];
      if (v22)
      {
        uint64_t v23 = (void *)MEMORY[0x1E4F30938];
        double v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

        double v26 = (void *)v25;
      }
      else
      {
        double v26 = 0;
      }
      int v30 = [v26 _isDictionary];

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (uint64_t v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v32 = JSValueToNumber(this, *a5, 0);
          uint64_t v33 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          uint64_t v34 = a5[2];
          uint64_t v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(void *)buf)
            {
LABEL_62:
              JSObjectRef reject = 0;
              JSObjectRef resolve = 0;
              JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              __int16 v71 = resolve;
              *(void *)long long buf = this;
              v70 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v71, &v70, &v67);
              uint64_t v18 = v67;
LABEL_63:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v47, buf);
              uint64_t v48 = *(void *)buf;
              if (*(void *)buf)
              {
                uint64_t v49 = *(void *)(*(void *)buf + 24);
                if (v49)
                {
                  uint64_t v50 = *(void *)(v49 + 8);
                  if (v50)
                  {
                    uint64_t v51 = *(void *)(v50 + 24);
                    if (v51)
                    {
                      uint64_t v52 = *(void *)(v51 + 8);
                      if (v52)
                      {
                        uint64_t v53 = *(void **)(*(void *)(v52 + 48) + 16);
                        if (((*(uint64_t (**)(void *))(*v53 + 1368))(v53) & 1) == 0)
                        {
                          uint64_t v54 = *(void *)(v53[2] + 8);
                          if (v54)
                          {
                            CFRetain(*(CFTypeRef *)(v54 - 8));
                            CFRelease(*(CFTypeRef *)(v48 + 8));
                            *(void *)long long buf = v18;
                            id v66 = 0;
                            WebKit::WebExtensionAPITabs::executeScript(v11, v54 - 16, v33, (uint64_t *)buf, &v66, v32);
                            __int16 v56 = (NSString *)v66;
                            id v57 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(void *)long long buf = 0;
                            if (v57) {
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v57);
                            }
                            if (v56)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.executeScript()", 0, v56, v55);
                            }
                            else if (Undefined)
                            {
LABEL_75:

                              CFRelease(*(CFTypeRef *)(v54 - 8));
                              uint64_t v58 = v33;
LABEL_85:

                              goto LABEL_86;
                            }
                            JSValueRef Undefined = JSValueMakeUndefined(this);
                            goto LABEL_75;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*(CFTypeRef *)(v48 + 8));
              }
              v59 = qword_1EB357DF8;
              if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl(&dword_1985F2000, v59, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined) {
                  goto LABEL_80;
                }
              }
              else if (!Undefined)
              {
                goto LABEL_80;
              }
              JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.executeScript()", 0, &cfstr_AnUnknownError.isa, v60);
              if (Undefined)
              {
LABEL_81:
                uint64_t v27 = (uint64_t)v33;
                goto LABEL_82;
              }
LABEL_80:
              JSValueRef Undefined = JSValueMakeUndefined(this);
              goto LABEL_81;
            }
LABEL_30:
            JSValueRef Undefined = 0;
            goto LABEL_63;
          }
          goto LABEL_20;
        }
        JSObjectRef v62 = @"a function is expected";
        JSValueRef v63 = @"callback";
      }
      else
      {
        JSObjectRef v62 = @"an object is expected";
        JSValueRef v63 = @"details";
      }
    }
    else
    {
      JSObjectRef v62 = @"a number is expected";
      JSValueRef v63 = @"tabID";
    }
    uint64_t v58 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.executeScript()", &v63->isa, &v62->isa, v21);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_85;
  }
  if (a4)
  {
    unint64_t v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        unint64_t v20 = 0;
      }
      else
      {
        uint64_t v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (double v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          unint64_t v19 = (unint64_t)a4 - 2;
          unint64_t v20 = 1;
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v20 = 0;
          unint64_t v19 = (unint64_t)a4 - 1;
        }
      }
      uint64_t v36 = a5[v19];
      if (v36)
      {
        unint64_t v64 = v20;
        JSValueRef v37 = (void *)MEMORY[0x1E4F30938];
        uint64_t v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v39 = [v37 valueWithJSValueRef:v36 inContext:v38];

        LOBYTE(v38) = [v39 _isDictionary];
        if ((v38 & 1) == 0) {
          goto LABEL_20;
        }
        WebKit::toNSDictionary(this, v36, 0, 0);
        uint64_t v27 = --v19;
        unint64_t v20 = v64;
      }
      else
      {
        uint64_t v27 = 0;
      }
      double v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        char v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          double v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          double v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          uint64_t v33 = (void *)v27;
          if (!v18) {
            goto LABEL_62;
          }
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.executeScript()", 0, &cfstr_AnUnknownArgum.isa, v13);
        JSValueRef v28 = JSValueMakeUndefined(this);
LABEL_21:
        JSValueRef Undefined = v28;
LABEL_82:
        if (v18) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        }
        uint64_t v58 = (void *)v27;
        goto LABEL_85;
      }
    }
LABEL_20:
    uint64_t v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.executeScript()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v13);
    JSValueRef v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.executeScript()", 0, &cfstr_ARequiredArgum.isa, v13);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_86:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_1989A0890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(_DWORD *)(v17 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
  }
  else {
    --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::insertCSS(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v11 = v10;
  if (!v10 || (++*(_DWORD *)(v10 + 48), *(unsigned char *)(v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_86;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      id v41 = "argument";
    }
    else {
      id v41 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v71;
    WTF::String::utf8();
    if (v70) {
      uint64_t v42 = (char *)v70 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v73 = 2082;
    v74 = v41;
    __int16 v75 = 2082;
    __int16 v76 = v42;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function tabs.insertCSS() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v70;
    v70 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    JSObjectRef resolve = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v22 = a5[1];
      if (v22)
      {
        uint64_t v23 = (void *)MEMORY[0x1E4F30938];
        double v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

        double v26 = (void *)v25;
      }
      else
      {
        double v26 = 0;
      }
      int v30 = [v26 _isDictionary];

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (uint64_t v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v32 = JSValueToNumber(this, *a5, 0);
          uint64_t v33 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          uint64_t v34 = a5[2];
          uint64_t v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(void *)buf)
            {
LABEL_62:
              JSObjectRef reject = 0;
              JSObjectRef resolve = 0;
              JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              __int16 v71 = resolve;
              *(void *)long long buf = this;
              v70 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v71, &v70, &v67);
              uint64_t v18 = v67;
LABEL_63:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v47, buf);
              uint64_t v48 = *(void *)buf;
              if (*(void *)buf)
              {
                uint64_t v49 = *(void *)(*(void *)buf + 24);
                if (v49)
                {
                  uint64_t v50 = *(void *)(v49 + 8);
                  if (v50)
                  {
                    uint64_t v51 = *(void *)(v50 + 24);
                    if (v51)
                    {
                      uint64_t v52 = *(void *)(v51 + 8);
                      if (v52)
                      {
                        uint64_t v53 = *(void **)(*(void *)(v52 + 48) + 16);
                        if (((*(uint64_t (**)(void *))(*v53 + 1368))(v53) & 1) == 0)
                        {
                          uint64_t v54 = *(void *)(v53[2] + 8);
                          if (v54)
                          {
                            CFRetain(*(CFTypeRef *)(v54 - 8));
                            CFRelease(*(CFTypeRef *)(v48 + 8));
                            *(void *)long long buf = v18;
                            id v66 = 0;
                            WebKit::WebExtensionAPITabs::insertCSS(v11, v54 - 16, v33, (uint64_t *)buf, &v66, v32);
                            __int16 v56 = (NSString *)v66;
                            id v57 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(void *)long long buf = 0;
                            if (v57) {
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v57);
                            }
                            if (v56)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.insertCSS()", 0, v56, v55);
                            }
                            else if (Undefined)
                            {
LABEL_75:

                              CFRelease(*(CFTypeRef *)(v54 - 8));
                              uint64_t v58 = v33;
LABEL_85:

                              goto LABEL_86;
                            }
                            JSValueRef Undefined = JSValueMakeUndefined(this);
                            goto LABEL_75;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*(CFTypeRef *)(v48 + 8));
              }
              v59 = qword_1EB357DF8;
              if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl(&dword_1985F2000, v59, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined) {
                  goto LABEL_80;
                }
              }
              else if (!Undefined)
              {
                goto LABEL_80;
              }
              JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.insertCSS()", 0, &cfstr_AnUnknownError.isa, v60);
              if (Undefined)
              {
LABEL_81:
                uint64_t v27 = (uint64_t)v33;
                goto LABEL_82;
              }
LABEL_80:
              JSValueRef Undefined = JSValueMakeUndefined(this);
              goto LABEL_81;
            }
LABEL_30:
            JSValueRef Undefined = 0;
            goto LABEL_63;
          }
          goto LABEL_20;
        }
        JSObjectRef v62 = @"a function is expected";
        JSValueRef v63 = @"callback";
      }
      else
      {
        JSObjectRef v62 = @"an object is expected";
        JSValueRef v63 = @"details";
      }
    }
    else
    {
      JSObjectRef v62 = @"a number is expected";
      JSValueRef v63 = @"tabID";
    }
    uint64_t v58 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.insertCSS()", &v63->isa, &v62->isa, v21);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_85;
  }
  if (a4)
  {
    unint64_t v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        unint64_t v20 = 0;
      }
      else
      {
        uint64_t v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (double v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          unint64_t v19 = (unint64_t)a4 - 2;
          unint64_t v20 = 1;
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v20 = 0;
          unint64_t v19 = (unint64_t)a4 - 1;
        }
      }
      uint64_t v36 = a5[v19];
      if (v36)
      {
        unint64_t v64 = v20;
        JSValueRef v37 = (void *)MEMORY[0x1E4F30938];
        uint64_t v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v39 = [v37 valueWithJSValueRef:v36 inContext:v38];

        LOBYTE(v38) = [v39 _isDictionary];
        if ((v38 & 1) == 0) {
          goto LABEL_20;
        }
        WebKit::toNSDictionary(this, v36, 0, 0);
        uint64_t v27 = --v19;
        unint64_t v20 = v64;
      }
      else
      {
        uint64_t v27 = 0;
      }
      double v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        char v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          double v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          double v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          uint64_t v33 = (void *)v27;
          if (!v18) {
            goto LABEL_62;
          }
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.insertCSS()", 0, &cfstr_AnUnknownArgum.isa, v13);
        JSValueRef v28 = JSValueMakeUndefined(this);
LABEL_21:
        JSValueRef Undefined = v28;
LABEL_82:
        if (v18) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        }
        uint64_t v58 = (void *)v27;
        goto LABEL_85;
      }
    }
LABEL_20:
    uint64_t v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.insertCSS()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v13);
    JSValueRef v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.insertCSS()", 0, &cfstr_ARequiredArgum.isa, v13);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_86:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_1989A139C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(_DWORD *)(v17 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
  }
  else {
    --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITabs::removeCSS(WebKit::JSWebExtensionAPITabs *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITabs(this, a3, a3);
  uint64_t v11 = v10;
  if (!v10 || (++*(_DWORD *)(v10 + 48), *(unsigned char *)(v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_86;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      id v41 = "argument";
    }
    else {
      id v41 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v71;
    WTF::String::utf8();
    if (v70) {
      uint64_t v42 = (char *)v70 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v73 = 2082;
    v74 = v41;
    __int16 v75 = 2082;
    __int16 v76 = v42;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function tabs.removeCSS() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v70;
    v70 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    id v45 = resolve;
    JSObjectRef resolve = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5) || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      JSValueRef v22 = a5[1];
      if (v22)
      {
        uint64_t v23 = (void *)MEMORY[0x1E4F30938];
        double v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

        double v26 = (void *)v25;
      }
      else
      {
        double v26 = 0;
      }
      int v30 = [v26 _isDictionary];

      if (v30)
      {
        if (JSValueIsObject(this, a5[2]) && (uint64_t v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v32 = JSValueToNumber(this, *a5, 0);
          uint64_t v33 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          uint64_t v34 = a5[2];
          uint64_t v35 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v34, v35, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          if (v33)
          {
            if (!*(void *)buf)
            {
LABEL_62:
              JSObjectRef reject = 0;
              JSObjectRef resolve = 0;
              JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              __int16 v71 = resolve;
              *(void *)long long buf = this;
              v70 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v71, &v70, &v67);
              uint64_t v18 = v67;
LABEL_63:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v47, buf);
              uint64_t v48 = *(void *)buf;
              if (*(void *)buf)
              {
                uint64_t v49 = *(void *)(*(void *)buf + 24);
                if (v49)
                {
                  uint64_t v50 = *(void *)(v49 + 8);
                  if (v50)
                  {
                    uint64_t v51 = *(void *)(v50 + 24);
                    if (v51)
                    {
                      uint64_t v52 = *(void *)(v51 + 8);
                      if (v52)
                      {
                        uint64_t v53 = *(void **)(*(void *)(v52 + 48) + 16);
                        if (((*(uint64_t (**)(void *))(*v53 + 1368))(v53) & 1) == 0)
                        {
                          uint64_t v54 = *(void *)(v53[2] + 8);
                          if (v54)
                          {
                            CFRetain(*(CFTypeRef *)(v54 - 8));
                            CFRelease(*(CFTypeRef *)(v48 + 8));
                            *(void *)long long buf = v18;
                            id v66 = 0;
                            WebKit::WebExtensionAPITabs::removeCSS(v11, v54 - 16, v33, (uint64_t *)buf, &v66, v32);
                            __int16 v56 = (NSString *)v66;
                            id v57 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(void *)long long buf = 0;
                            if (v57) {
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v57);
                            }
                            if (v56)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.removeCSS()", 0, v56, v55);
                            }
                            else if (Undefined)
                            {
LABEL_75:

                              CFRelease(*(CFTypeRef *)(v54 - 8));
                              uint64_t v58 = v33;
LABEL_85:

                              goto LABEL_86;
                            }
                            JSValueRef Undefined = JSValueMakeUndefined(this);
                            goto LABEL_75;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*(CFTypeRef *)(v48 + 8));
              }
              v59 = qword_1EB357DF8;
              if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl(&dword_1985F2000, v59, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (!Undefined) {
                  goto LABEL_80;
                }
              }
              else if (!Undefined)
              {
                goto LABEL_80;
              }
              JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"tabs.removeCSS()", 0, &cfstr_AnUnknownError.isa, v60);
              if (Undefined)
              {
LABEL_81:
                uint64_t v27 = (uint64_t)v33;
                goto LABEL_82;
              }
LABEL_80:
              JSValueRef Undefined = JSValueMakeUndefined(this);
              goto LABEL_81;
            }
LABEL_30:
            JSValueRef Undefined = 0;
            goto LABEL_63;
          }
          goto LABEL_20;
        }
        JSObjectRef v62 = @"a function is expected";
        JSValueRef v63 = @"callback";
      }
      else
      {
        JSObjectRef v62 = @"an object is expected";
        JSValueRef v63 = @"details";
      }
    }
    else
    {
      JSObjectRef v62 = @"a number is expected";
      JSValueRef v63 = @"tabID";
    }
    uint64_t v58 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.removeCSS()", &v63->isa, &v62->isa, v21);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_85;
  }
  if (a4)
  {
    unint64_t v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        unint64_t v20 = 0;
      }
      else
      {
        uint64_t v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (double v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          unint64_t v19 = (unint64_t)a4 - 2;
          unint64_t v20 = 1;
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v20 = 0;
          unint64_t v19 = (unint64_t)a4 - 1;
        }
      }
      uint64_t v36 = a5[v19];
      if (v36)
      {
        unint64_t v64 = v20;
        JSValueRef v37 = (void *)MEMORY[0x1E4F30938];
        uint64_t v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v39 = [v37 valueWithJSValueRef:v36 inContext:v38];

        LOBYTE(v38) = [v39 _isDictionary];
        if ((v38 & 1) == 0) {
          goto LABEL_20;
        }
        WebKit::toNSDictionary(this, v36, 0, 0);
        uint64_t v27 = --v19;
        unint64_t v20 = v64;
      }
      else
      {
        uint64_t v27 = 0;
      }
      double v32 = NAN;
      if (v20 < v14 && (v19 & 0x8000000000000000) == 0)
      {
        char v40 = a5[v19];
        if (v40 && (JSValueIsNumber(this, v40) || JSValueIsNull(this, v40) || JSValueIsUndefined(this, v40)))
        {
          double v32 = JSValueToNumber(this, v40, 0);
          --v19;
        }
        else
        {
          double v32 = NAN;
        }
      }
      if (v27)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          uint64_t v33 = (void *)v27;
          if (!v18) {
            goto LABEL_62;
          }
          goto LABEL_30;
        }
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.removeCSS()", 0, &cfstr_AnUnknownArgum.isa, v13);
        JSValueRef v28 = JSValueMakeUndefined(this);
LABEL_21:
        JSValueRef Undefined = v28;
LABEL_82:
        if (v18) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
        }
        uint64_t v58 = (void *)v27;
        goto LABEL_85;
      }
    }
LABEL_20:
    uint64_t v27 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.removeCSS()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v13);
    JSValueRef v28 = JSValueMakeUndefined(this);
    goto LABEL_21;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"tabs.removeCSS()", 0, &cfstr_ARequiredArgum.isa, v13);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_86:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_1989A1EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(_DWORD *)(v17 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
  }
  else {
    --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPITest *WebKit::toWebExtensionAPITest(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPITest::testClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPITest::testClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPITest *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPITest::testClass(WebKit::JSWebExtensionAPITest *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPITest::testClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPITest::testClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "Test";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPITest::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPITest::testClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPITest::notifyFail(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        unint64_t v19 = "argument";
      }
      else {
        unint64_t v19 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v22) {
        unint64_t v20 = (char *)v22 + 16;
      }
      else {
        unint64_t v20 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v25 = a4;
      __int16 v26 = 2082;
      uint64_t v27 = v19;
      __int16 v28 = 2082;
      uint64_t v29 = v20;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.notifyFail() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v22)
      {
        if (*(_DWORD *)v22 == 1) {
          WTF::fastFree(v22, v21);
        }
        else {
          --*(_DWORD *)v22;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        uint64_t v15 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.notifyFail()", &cfstr_Message.isa, &cfstr_AStringIsExpec.isa, v14);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_10;
      }
      WebKit::toNSString(this, *a5, 2);
      uint64_t v15 = (NSString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v15 = 0;
    }
    WebKit::WebExtensionAPITest::notifyFail(v12, this, v15);
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_10:
    JSValueRef v17 = Undefined;

    if (*((_DWORD *)v12 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
    }
    else {
      --*((_DWORD *)v12 + 12);
    }
    return v17;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A2460(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::notifyPass(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        unint64_t v19 = "argument";
      }
      else {
        unint64_t v19 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v22) {
        unint64_t v20 = (char *)v22 + 16;
      }
      else {
        unint64_t v20 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v25 = a4;
      __int16 v26 = 2082;
      uint64_t v27 = v19;
      __int16 v28 = 2082;
      uint64_t v29 = v20;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.notifyPass() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v22)
      {
        if (*(_DWORD *)v22 == 1) {
          WTF::fastFree(v22, v21);
        }
        else {
          --*(_DWORD *)v22;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        uint64_t v15 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.notifyPass()", &cfstr_Message.isa, &cfstr_AStringIsExpec.isa, v14);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_10;
      }
      WebKit::toNSString(this, *a5, 2);
      uint64_t v15 = (NSString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v15 = 0;
    }
    WebKit::WebExtensionAPITest::notifyPass(v12, this, v15);
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_10:
    JSValueRef v17 = Undefined;

    if (*((_DWORD *)v12 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
    }
    else {
      --*((_DWORD *)v12 + 12);
    }
    return v17;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A2844(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::yield(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        unint64_t v19 = "argument";
      }
      else {
        unint64_t v19 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v22) {
        unint64_t v20 = (char *)v22 + 16;
      }
      else {
        unint64_t v20 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v25 = a4;
      __int16 v26 = 2082;
      uint64_t v27 = v19;
      __int16 v28 = 2082;
      uint64_t v29 = v20;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.yield() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v22)
      {
        if (*(_DWORD *)v22 == 1) {
          WTF::fastFree(v22, v21);
        }
        else {
          --*(_DWORD *)v22;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        uint64_t v15 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.yield()", &cfstr_Message.isa, &cfstr_AStringIsExpec.isa, v14);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_10;
      }
      WebKit::toNSString(this, *a5, 2);
      uint64_t v15 = (NSString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v15 = 0;
    }
    WebKit::WebExtensionAPITest::yield(v12, this, v15);
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_10:
    JSValueRef v17 = Undefined;

    if (*((_DWORD *)v12 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
    }
    else {
      --*((_DWORD *)v12 + 12);
    }
    return v17;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A2C28(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::log(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        unint64_t v20 = "argument";
      }
      else {
        unint64_t v20 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v23) {
        unint64_t v21 = (char *)v23 + 16;
      }
      else {
        unint64_t v21 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      __int16 v26 = a4;
      __int16 v27 = 2082;
      __int16 v28 = v20;
      __int16 v29 = 2082;
      uint64_t v30 = v21;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.log() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v22);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }

    if (a4)
    {
      uint64_t v15 = *a5;
      if (*a5)
      {
        double v16 = (void *)MEMORY[0x1E4F30938];
        JSValueRef v17 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v15 = [v16 valueWithJSValueRef:v15 inContext:v17];
      }
      WebKit::WebExtensionAPITest::log(v12, this, v15);
      JSValueRef Undefined = JSValueMakeUndefined(this);
    }
    else
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.log()", 0, &cfstr_ARequiredArgum.isa, v14);
      JSValueRef Undefined = JSValueMakeUndefined(this);
    }
    if (*((_DWORD *)v12 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
    }
    else {
      --*((_DWORD *)v12 + 12);
    }
    return Undefined;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1989A2FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::fail(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        unint64_t v20 = "argument";
      }
      else {
        unint64_t v20 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v23) {
        unint64_t v21 = (char *)v23 + 16;
      }
      else {
        unint64_t v21 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      __int16 v26 = a4;
      __int16 v27 = 2082;
      __int16 v28 = v20;
      __int16 v29 = 2082;
      uint64_t v30 = v21;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.fail() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v22);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        double v16 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.fail()", &cfstr_Message.isa, &cfstr_AStringIsExpec.isa, v15);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_10;
      }
      WebKit::toNSString(this, *a5, 2);
      unint64_t v14 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
      double v16 = (NSString *)v14;
    }
    else
    {
      double v16 = 0;
    }
    WebKit::WebExtensionAPITest::assertTrue(v14, this, 0, v16);
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_10:
    JSValueRef v18 = Undefined;

    if (*((_DWORD *)v12 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
    }
    else {
      --*((_DWORD *)v12 + 12);
    }
    return v18;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A33F4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::succeed(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        unint64_t v20 = "argument";
      }
      else {
        unint64_t v20 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v23) {
        unint64_t v21 = (char *)v23 + 16;
      }
      else {
        unint64_t v21 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      __int16 v26 = a4;
      __int16 v27 = 2082;
      __int16 v28 = v20;
      __int16 v29 = 2082;
      uint64_t v30 = v21;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.succeed() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v22);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)1)
    {
      if (!JSValueIsString(this, *a5) && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5))
      {
        double v16 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.succeed()", &cfstr_Message.isa, &cfstr_AStringIsExpec.isa, v15);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_10;
      }
      WebKit::toNSString(this, *a5, 2);
      unint64_t v14 = (WebKit::WebExtensionAPITest *)objc_claimAutoreleasedReturnValue();
      double v16 = (NSString *)v14;
    }
    else
    {
      double v16 = 0;
    }
    WebKit::WebExtensionAPITest::assertTrue(v14, this, 1, v16);
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_10:
    JSValueRef v18 = Undefined;

    if (*((_DWORD *)v12 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
    }
    else {
      --*((_DWORD *)v12 + 12);
    }
    return v18;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A37D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertTrue(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        unint64_t v21 = "argument";
      }
      else {
        unint64_t v21 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v26) {
        JSValueRef v22 = (char *)v26 + 16;
      }
      else {
        JSValueRef v22 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      __int16 v29 = a4;
      __int16 v30 = 2082;
      uint64_t v31 = v21;
      __int16 v32 = 2082;
      uint64_t v33 = v22;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.assertTrue() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v23);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v23);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsBoolean(this, *a5))
      {
        if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          char v15 = JSValueToBoolean(this, *a5);
          WebKit::toNSString(this, a5[1], 2);
          double v16 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_14:
          WebKit::WebExtensionAPITest::assertTrue(v12, this, v15, v16);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_15:
          JSValueRef v19 = Undefined;

LABEL_16:
          if (*((_DWORD *)v12 + 12) == 1) {
            (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
          }
          else {
            --*((_DWORD *)v12 + 12);
          }
          return v19;
        }
        double v24 = @"a string is expected";
        uint64_t v25 = @"message";
LABEL_39:
        double v16 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertTrue()", &v25->isa, &v24->isa, v17);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)1)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertTrue()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef v19 = JSValueMakeUndefined(this);
          goto LABEL_16;
        }
        char v15 = 0;
        double v16 = 0;
        goto LABEL_14;
      }
      if (JSValueIsBoolean(this, *a5))
      {
        double v16 = 0;
        char v15 = JSValueToBoolean(this, *a5);
        goto LABEL_14;
      }
    }
    double v24 = @"a BOOLean is expected";
    uint64_t v25 = @"actualValue";
    goto LABEL_39;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A3C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertFalse(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        JSValueRef v22 = "argument";
      }
      else {
        JSValueRef v22 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v27) {
        uint64_t v23 = (char *)v27 + 16;
      }
      else {
        uint64_t v23 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      __int16 v30 = a4;
      __int16 v31 = 2082;
      __int16 v32 = v22;
      __int16 v33 = 2082;
      uint64_t v34 = v23;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.assertFalse() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v27)
      {
        if (*(_DWORD *)v27 == 1) {
          WTF::fastFree(v27, v24);
        }
        else {
          --*(_DWORD *)v27;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v24);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsBoolean(this, *a5))
      {
        if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          BOOL v16 = JSValueToBoolean(this, *a5);
          uint64_t v14 = WebKit::toNSString(this, a5[1], 2);
          JSValueRef v17 = (NSString *)v14;
LABEL_14:
          WebKit::WebExtensionAPITest::assertTrue((WebKit::WebExtensionAPITest *)v14, this, !v16, v17);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_15:
          JSValueRef v20 = Undefined;

LABEL_16:
          if (*((_DWORD *)v12 + 12) == 1) {
            (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
          }
          else {
            --*((_DWORD *)v12 + 12);
          }
          return v20;
        }
        uint64_t v25 = @"a string is expected";
        __int16 v26 = @"message";
LABEL_39:
        JSValueRef v17 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertFalse()", &v26->isa, &v25->isa, v18);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_15;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)1)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertFalse()", 0, &cfstr_ARequiredArgum.isa, v15);
          JSValueRef v20 = JSValueMakeUndefined(this);
          goto LABEL_16;
        }
        BOOL v16 = 0;
        JSValueRef v17 = 0;
        goto LABEL_14;
      }
      if (JSValueIsBoolean(this, *a5))
      {
        JSValueRef v17 = 0;
        uint64_t v14 = JSValueToBoolean(this, *a5);
        BOOL v16 = v14;
        goto LABEL_14;
      }
    }
    uint64_t v25 = @"a BOOLean is expected";
    __int16 v26 = @"actualValue";
    goto LABEL_39;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A4104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertDeepEq(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v34 = "argument";
      }
      else {
        uint64_t v34 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v37) {
        uint64_t v35 = (char *)v37 + 16;
      }
      else {
        uint64_t v35 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      char v40 = a4;
      __int16 v41 = 2082;
      uint64_t v42 = v34;
      __int16 v43 = 2082;
      uint64_t v44 = v35;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.assertDeepEq() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v37)
      {
        if (*(_DWORD *)v37 == 1) {
          WTF::fastFree(v37, v36);
        }
        else {
          --*(_DWORD *)v37;
        }
      }
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
    }

    if ((unint64_t)a4 <= 1)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertDeepEq()", 0, &cfstr_ARequiredArgum.isa, v14);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      goto LABEL_26;
    }
    if (a4 == (OpaqueJSValue *)2)
    {
      uint64_t v21 = *a5;
      if (*a5)
      {
        JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
        uint64_t v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        JSValueRef v20 = [v22 valueWithJSValueRef:v21 inContext:v23];
      }
      else
      {
        JSValueRef v20 = 0;
      }
      uint64_t v24 = a5[1];
      if (v24)
      {
        uint64_t v25 = (void *)MEMORY[0x1E4F30938];
        __int16 v26 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        __int16 v27 = [v25 valueWithJSValueRef:v24 inContext:v26];

LABEL_18:
        __int16 v28 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      if (a4 == (OpaqueJSValue *)3)
      {
        if (!JSValueIsString(this, (JSValueRef)a5[2])
          && !JSValueIsNull(this, (JSValueRef)a5[2])
          && !JSValueIsUndefined(this, (JSValueRef)a5[2]))
        {
          JSValueRef v20 = 0;
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertDeepEq()", &cfstr_Message.isa, &cfstr_AStringIsExpec.isa, v15);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          __int16 v27 = 0;
          __int16 v28 = 0;
          goto LABEL_25;
        }
        uint64_t v16 = *a5;
        unint64_t v17 = 0x1E4F30000uLL;
        if (*a5)
        {
          JSValueRef v18 = (void *)MEMORY[0x1E4F30938];
          JSValueRef v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          JSValueRef v20 = [v18 valueWithJSValueRef:v16 inContext:v19];

          unint64_t v17 = 0x1E4F30000;
        }
        else
        {
          JSValueRef v20 = 0;
        }
        uint64_t v29 = a5[1];
        if (v29)
        {
          __int16 v30 = (void *)MEMORY[0x1E4F30938];
          __int16 v31 = [*(id *)(v17 + 2336) contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          __int16 v27 = [v30 valueWithJSValueRef:v29 inContext:v31];
        }
        else
        {
          __int16 v27 = 0;
        }
        WebKit::toNSString(this, (JSValueRef)a5[2], 2);
        __int16 v28 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_24:
        WebKit::WebExtensionAPITest::assertDeepEq(v12, this, v20, v27, v28);
        JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_25:

LABEL_26:
        if (*((_DWORD *)v12 + 12) == 1) {
          (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
        }
        else {
          --*((_DWORD *)v12 + 12);
        }
        return Undefined;
      }
      JSValueRef v20 = 0;
    }
    __int16 v27 = 0;
    goto LABEL_18;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A473C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertEq(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v34 = "argument";
      }
      else {
        uint64_t v34 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v37) {
        uint64_t v35 = (char *)v37 + 16;
      }
      else {
        uint64_t v35 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      char v40 = a4;
      __int16 v41 = 2082;
      uint64_t v42 = v34;
      __int16 v43 = 2082;
      uint64_t v44 = v35;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.assertEq() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v37)
      {
        if (*(_DWORD *)v37 == 1) {
          WTF::fastFree(v37, v36);
        }
        else {
          --*(_DWORD *)v37;
        }
      }
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
    }

    if ((unint64_t)a4 <= 1)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertEq()", 0, &cfstr_ARequiredArgum.isa, v14);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      goto LABEL_26;
    }
    if (a4 == (OpaqueJSValue *)2)
    {
      uint64_t v21 = *a5;
      if (*a5)
      {
        JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
        uint64_t v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        JSValueRef v20 = [v22 valueWithJSValueRef:v21 inContext:v23];
      }
      else
      {
        JSValueRef v20 = 0;
      }
      uint64_t v24 = a5[1];
      if (v24)
      {
        uint64_t v25 = (void *)MEMORY[0x1E4F30938];
        __int16 v26 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        __int16 v27 = [v25 valueWithJSValueRef:v24 inContext:v26];

LABEL_18:
        __int16 v28 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      if (a4 == (OpaqueJSValue *)3)
      {
        if (!JSValueIsString(this, (JSValueRef)a5[2])
          && !JSValueIsNull(this, (JSValueRef)a5[2])
          && !JSValueIsUndefined(this, (JSValueRef)a5[2]))
        {
          JSValueRef v20 = 0;
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertEq()", &cfstr_Message.isa, &cfstr_AStringIsExpec.isa, v15);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          __int16 v27 = 0;
          __int16 v28 = 0;
          goto LABEL_25;
        }
        uint64_t v16 = *a5;
        unint64_t v17 = 0x1E4F30000uLL;
        if (*a5)
        {
          JSValueRef v18 = (void *)MEMORY[0x1E4F30938];
          JSValueRef v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          JSValueRef v20 = [v18 valueWithJSValueRef:v16 inContext:v19];

          unint64_t v17 = 0x1E4F30000;
        }
        else
        {
          JSValueRef v20 = 0;
        }
        uint64_t v29 = a5[1];
        if (v29)
        {
          __int16 v30 = (void *)MEMORY[0x1E4F30938];
          __int16 v31 = [*(id *)(v17 + 2336) contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          __int16 v27 = [v30 valueWithJSValueRef:v29 inContext:v31];
        }
        else
        {
          __int16 v27 = 0;
        }
        WebKit::toNSString(this, (JSValueRef)a5[2], 2);
        __int16 v28 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_24:
        WebKit::WebExtensionAPITest::assertEq(v12, this, v20, v27, v28);
        JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_25:

LABEL_26:
        if (*((_DWORD *)v12 + 12) == 1) {
          (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
        }
        else {
          --*((_DWORD *)v12 + 12);
        }
        return Undefined;
      }
      JSValueRef v20 = 0;
    }
    __int16 v27 = 0;
    goto LABEL_18;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A4DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertRejects(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    ++*((_DWORD *)v10 + 12);
    uint64_t v12 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v38 = "argument";
      }
      else {
        uint64_t v38 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v47) {
        uint64_t v39 = (char *)v47 + 16;
      }
      else {
        uint64_t v39 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v50 = a4;
      __int16 v51 = 2082;
      uint64_t v52 = v38;
      __int16 v53 = 2082;
      uint64_t v54 = v39;
      _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function test.assertRejects() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v47)
      {
        if (*(_DWORD *)v47 == 1) {
          WTF::fastFree(v47, v40);
        }
        else {
          --*(_DWORD *)v47;
        }
      }
      if (v48)
      {
        if (*(_DWORD *)v48 == 2) {
          WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v40);
        }
        else {
          *(_DWORD *)v48 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)3)
    {
      if (JSValueIsObject(this, *(JSValueRef *)a5))
      {
        if (JSValueIsString(this, *(JSValueRef *)(a5 + 16))
          || JSValueIsNull(this, *(JSValueRef *)(a5 + 16))
          || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 16)))
        {
          JSValueRef v21 = *(JSValueRef *)a5;
          if (*(void *)a5)
          {
            JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
            uint64_t v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            JSValueRef v18 = [v22 valueWithJSValueRef:v21 inContext:v23];
          }
          else
          {
            JSValueRef v18 = 0;
          }
          uint64_t v28 = *(void *)(a5 + 8);
          if (v28)
          {
            uint64_t v29 = (void *)MEMORY[0x1E4F30938];
            __int16 v30 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            __int16 v26 = [v29 valueWithJSValueRef:v28 inContext:v30];
          }
          else
          {
            __int16 v26 = 0;
          }
          WebKit::toNSString(this, *(JSValueRef *)(a5 + 16), 2);
          __int16 v31 = v19 = 3;
          if (!v18) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        uint64_t v42 = @"a string is expected";
        __int16 v43 = @"message";
      }
      else
      {
        uint64_t v42 = @"an object is expected";
        __int16 v43 = @"promise";
      }
      JSValueRef v18 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertRejects()", &v43->isa, &v42->isa, v20);
      JSValueRef Undefined = JSValueMakeUndefined(this);
    }
    else
    {
      if (!a4)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertRejects()", 0, &cfstr_ARequiredArgum.isa, v13);
        JSValueRef v36 = JSValueMakeUndefined(this);
        goto LABEL_42;
      }
      JSValueRef v14 = *(JSValueRef *)a5;
      if (!*(void *)a5)
      {
        unint64_t v19 = 0;
        JSValueRef v18 = 0;
        goto LABEL_15;
      }
      if (JSValueIsObject(this, *(JSValueRef *)a5))
      {
        uint64_t v16 = (void *)MEMORY[0x1E4F30938];
        unint64_t v17 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        JSValueRef v18 = [v16 valueWithJSValueRef:v14 inContext:v17];

        unint64_t v19 = 1;
LABEL_15:
        if (v19 >= (unint64_t)a4)
        {
          __int16 v26 = 0;
          unint64_t v27 = 0;
          unint64_t v19 = 1;
        }
        else if (a4 == (OpaqueJSValue *)1 || (uint64_t v24 = *(void *)(a5 + 8 * v19)) == 0)
        {
          __int16 v26 = 0;
          unint64_t v27 = 0;
        }
        else
        {
          uint64_t v45 = (void *)MEMORY[0x1E4F30938];
          uint64_t v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          __int16 v26 = [v45 valueWithJSValueRef:v24 inContext:v25];

          ++v19;
          unint64_t v27 = 1;
        }
        __int16 v31 = 0;
        if (v19 >= (unint64_t)a4 || v27 >= (unint64_t)a4 - 1)
        {
LABEL_34:
          if (!v18) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        __int16 v32 = *(const OpaqueJSValue **)(a5 + 8 * v19);
        if (v32 && (JSValueIsString(this, v32) || JSValueIsNull(this, v32) || JSValueIsUndefined(this, v32)))
        {
          __int16 v31 = WebKit::toNSString(this, v32, 2);
          ++v19;
          goto LABEL_34;
        }
        __int16 v31 = 0;
        if (!v18) {
          goto LABEL_36;
        }
LABEL_35:
        if (![(JSValue *)v18 isObject])
        {
          __int16 v41 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertRejects()", &cfstr_Promise.isa, &cfstr_AnObjectIsExpe.isa, v13);
LABEL_68:
          *a6 = v41;
          JSValueRef v36 = JSValueMakeUndefined(this);
LABEL_41:

LABEL_42:
          if (*((_DWORD *)v11 + 12) == 1) {
            (*(void (**)(uint64_t))(*((void *)v11 + 5) + 8))((uint64_t)v11 + 40);
          }
          else {
            --*((_DWORD *)v11 + 12);
          }
          return v36;
        }
LABEL_36:
        if (v19 >= (unint64_t)a4)
        {
          WebKit::WebExtensionAPITest::assertRejects(v11, this, v18, v26, (NSString *)v31);
          uint64_t v34 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
          if (v34) {
            JSValueRef Null = WebKit::toJSValueRef(this, v34, v33);
          }
          else {
            JSValueRef Null = JSValueMakeNull(this);
          }
          JSValueRef v36 = Null;

          goto LABEL_41;
        }
        __int16 v41 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertRejects()", 0, &cfstr_AnUnknownArgum.isa, v13);
        goto LABEL_68;
      }
      JSValueRef v18 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertRejects()", &cfstr_Promise.isa, &cfstr_AnObjectIsExpe.isa, v15);
      JSValueRef Undefined = JSValueMakeUndefined(this);
    }
    JSValueRef v36 = Undefined;
    __int16 v26 = 0;
    __int16 v31 = 0;
    goto LABEL_41;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A55C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertResolves(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v30 = "argument";
      }
      else {
        __int16 v30 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v35) {
        __int16 v31 = (char *)v35 + 16;
      }
      else {
        __int16 v31 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v38 = a4;
      __int16 v39 = 2082;
      char v40 = v30;
      __int16 v41 = 2082;
      uint64_t v42 = v31;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.assertResolves() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v35)
      {
        if (*(_DWORD *)v35 == 1) {
          WTF::fastFree(v35, v32);
        }
        else {
          --*(_DWORD *)v35;
        }
      }
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v32);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsObject(this, *a5))
      {
        if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          JSValueRef v17 = *a5;
          if (*a5)
          {
            JSValueRef v18 = (void *)MEMORY[0x1E4F30938];
            unint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            JSValueRef v20 = [v18 valueWithJSValueRef:v17 inContext:v19];
          }
          else
          {
            JSValueRef v20 = 0;
          }
          uint64_t v24 = WebKit::toNSString(this, a5[1], 2);
          if (!v20) {
            goto LABEL_21;
          }
LABEL_20:
          if ([(JSValue *)v20 isObject]) {
            goto LABEL_21;
          }
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertResolves()", &cfstr_Promise.isa, &cfstr_AnObjectIsExpe.isa, v25);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_25:

          goto LABEL_26;
        }
        __int16 v33 = @"a string is expected";
        uint64_t v34 = @"message";
LABEL_48:
        JSValueRef v20 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertResolves()", &v34->isa, &v33->isa, v16);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        uint64_t v24 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)1)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertResolves()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_26:
          if (*((_DWORD *)v12 + 12) == 1) {
            (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
          }
          else {
            --*((_DWORD *)v12 + 12);
          }
          return Undefined;
        }
        goto LABEL_17;
      }
      if (JSValueIsObject(this, *a5))
      {
        JSValueRef v21 = *a5;
        if (!v21)
        {
LABEL_17:
          uint64_t v24 = 0;
          JSValueRef v20 = 0;
LABEL_21:
          WebKit::WebExtensionAPITest::assertResolves(v12, this, v20, (NSString *)v24);
          unint64_t v27 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
          if (v27) {
            JSValueRef Null = WebKit::toJSValueRef(this, v27, v26);
          }
          else {
            JSValueRef Null = JSValueMakeNull(this);
          }
          JSValueRef Undefined = Null;

          goto LABEL_25;
        }
        JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
        uint64_t v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        JSValueRef v20 = [v22 valueWithJSValueRef:v21 inContext:v23];

        uint64_t v24 = 0;
        if (!v20) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    __int16 v33 = @"an object is expected";
    uint64_t v34 = @"promise";
    goto LABEL_48;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A5C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertThrows(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    ++*((_DWORD *)v10 + 12);
    uint64_t v12 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        uint64_t v35 = "argument";
      }
      else {
        uint64_t v35 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v44) {
        JSValueRef v36 = (char *)v44 + 16;
      }
      else {
        JSValueRef v36 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      NSString v47 = a4;
      __int16 v48 = 2082;
      uint64_t v49 = v35;
      __int16 v50 = 2082;
      __int16 v51 = v36;
      _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function test.assertThrows() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v44)
      {
        if (*(_DWORD *)v44 == 1) {
          WTF::fastFree(v44, v37);
        }
        else {
          --*(_DWORD *)v44;
        }
      }
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v37);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)3)
    {
      if (JSValueIsObject(this, *(JSValueRef *)a5))
      {
        if (JSValueIsString(this, *(JSValueRef *)(a5 + 16))
          || JSValueIsNull(this, *(JSValueRef *)(a5 + 16))
          || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 16)))
        {
          JSValueRef v21 = *(JSValueRef *)a5;
          if (*(void *)a5)
          {
            JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
            uint64_t v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            JSValueRef v18 = [v22 valueWithJSValueRef:v21 inContext:v23];
          }
          else
          {
            JSValueRef v18 = 0;
          }
          uint64_t v28 = *(void *)(a5 + 8);
          if (v28)
          {
            uint64_t v29 = (void *)MEMORY[0x1E4F30938];
            __int16 v30 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            __int16 v26 = [v29 valueWithJSValueRef:v28 inContext:v30];
          }
          else
          {
            __int16 v26 = 0;
          }
          WebKit::toNSString(this, *(JSValueRef *)(a5 + 16), 2);
          unint64_t v19 = 3;
          __int16 v31 = (NSString *)objc_claimAutoreleasedReturnValue();
          if (!v18) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        __int16 v39 = @"a string is expected";
        char v40 = @"message";
      }
      else
      {
        __int16 v39 = @"an object is expected";
        char v40 = @"function";
      }
      JSValueRef v18 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertThrows()", &v40->isa, &v39->isa, v20);
      JSValueRef Undefined = JSValueMakeUndefined(this);
    }
    else
    {
      if (!a4)
      {
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertThrows()", 0, &cfstr_ARequiredArgum.isa, v13);
        JSValueRef v33 = JSValueMakeUndefined(this);
        goto LABEL_40;
      }
      JSValueRef v14 = *(JSValueRef *)a5;
      if (!*(void *)a5)
      {
        unint64_t v19 = 0;
        JSValueRef v18 = 0;
        goto LABEL_15;
      }
      if (JSValueIsObject(this, *(JSValueRef *)a5))
      {
        uint64_t v16 = (void *)MEMORY[0x1E4F30938];
        JSValueRef v17 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        JSValueRef v18 = [v16 valueWithJSValueRef:v14 inContext:v17];

        unint64_t v19 = 1;
LABEL_15:
        if (v19 >= (unint64_t)a4)
        {
          __int16 v26 = 0;
          unint64_t v27 = 0;
          unint64_t v19 = 1;
        }
        else if (a4 == (OpaqueJSValue *)1 || (uint64_t v24 = *(void *)(a5 + 8 * v19)) == 0)
        {
          __int16 v26 = 0;
          unint64_t v27 = 0;
        }
        else
        {
          uint64_t v42 = (void *)MEMORY[0x1E4F30938];
          uint64_t v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          __int16 v26 = [v42 valueWithJSValueRef:v24 inContext:v25];

          ++v19;
          unint64_t v27 = 1;
        }
        __int16 v31 = 0;
        if (v19 >= (unint64_t)a4 || v27 >= (unint64_t)a4 - 1)
        {
LABEL_34:
          if (!v18) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        __int16 v32 = *(const OpaqueJSValue **)(a5 + 8 * v19);
        if (v32 && (JSValueIsString(this, v32) || JSValueIsNull(this, v32) || JSValueIsUndefined(this, v32)))
        {
          WebKit::toNSString(this, v32, 2);
          __int16 v31 = (NSString *)objc_claimAutoreleasedReturnValue();
          ++v19;
          goto LABEL_34;
        }
        __int16 v31 = 0;
        if (!v18) {
          goto LABEL_36;
        }
LABEL_35:
        if (![(JSValue *)v18 isObject])
        {
          uint64_t v38 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertThrows()", &cfstr_Function.isa, &cfstr_AnObjectIsExpe.isa, v13);
          goto LABEL_66;
        }
LABEL_36:
        if (v19 >= (unint64_t)a4)
        {
          WebKit::WebExtensionAPITest::assertThrows(v11, this, v18, v26, v31);
LABEL_38:
          JSValueRef v33 = JSValueMakeUndefined(this);
LABEL_39:

LABEL_40:
          if (*((_DWORD *)v11 + 12) == 1) {
            (*(void (**)(uint64_t))(*((void *)v11 + 5) + 8))((uint64_t)v11 + 40);
          }
          else {
            --*((_DWORD *)v11 + 12);
          }
          return v33;
        }
        uint64_t v38 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertThrows()", 0, &cfstr_AnUnknownArgum.isa, v13);
LABEL_66:
        *a6 = v38;
        goto LABEL_38;
      }
      JSValueRef v18 = 0;
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertThrows()", &cfstr_Function.isa, &cfstr_AnObjectIsExpe.isa, v15);
      JSValueRef Undefined = JSValueMakeUndefined(this);
    }
    JSValueRef v33 = Undefined;
    __int16 v26 = 0;
    __int16 v31 = 0;
    goto LABEL_39;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A63F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertSafe(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v30 = "argument";
      }
      else {
        __int16 v30 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v35) {
        __int16 v31 = (char *)v35 + 16;
      }
      else {
        __int16 v31 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v38 = a4;
      __int16 v39 = 2082;
      char v40 = v30;
      __int16 v41 = 2082;
      uint64_t v42 = v31;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.assertSafe() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v35)
      {
        if (*(_DWORD *)v35 == 1) {
          WTF::fastFree(v35, v32);
        }
        else {
          --*(_DWORD *)v35;
        }
      }
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v32);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsObject(this, *a5))
      {
        if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          JSValueRef v17 = *a5;
          if (*a5)
          {
            JSValueRef v18 = (void *)MEMORY[0x1E4F30938];
            unint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            JSValueRef v20 = [v18 valueWithJSValueRef:v17 inContext:v19];
          }
          else
          {
            JSValueRef v20 = 0;
          }
          uint64_t v24 = WebKit::toNSString(this, a5[1], 2);
          if (!v20) {
            goto LABEL_21;
          }
LABEL_20:
          if ([(JSValue *)v20 isObject]) {
            goto LABEL_21;
          }
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertSafe()", &cfstr_Function.isa, &cfstr_AnObjectIsExpe.isa, v25);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_25:

          goto LABEL_26;
        }
        JSValueRef v33 = @"a string is expected";
        uint64_t v34 = @"message";
LABEL_48:
        JSValueRef v20 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertSafe()", &v34->isa, &v33->isa, v16);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        uint64_t v24 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)1)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertSafe()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_26:
          if (*((_DWORD *)v12 + 12) == 1) {
            (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
          }
          else {
            --*((_DWORD *)v12 + 12);
          }
          return Undefined;
        }
        goto LABEL_17;
      }
      if (JSValueIsObject(this, *a5))
      {
        JSValueRef v21 = *a5;
        if (!v21)
        {
LABEL_17:
          uint64_t v24 = 0;
          JSValueRef v20 = 0;
LABEL_21:
          WebKit::WebExtensionAPITest::assertSafe(v12, this, v20, (NSString *)v24);
          unint64_t v27 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
          if (v27) {
            JSValueRef Null = WebKit::toJSValueRef(this, v27, v26);
          }
          else {
            JSValueRef Null = JSValueMakeNull(this);
          }
          JSValueRef Undefined = Null;

          goto LABEL_25;
        }
        JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
        uint64_t v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        JSValueRef v20 = [v22 valueWithJSValueRef:v21 inContext:v23];

        uint64_t v24 = 0;
        if (!v20) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    JSValueRef v33 = @"an object is expected";
    uint64_t v34 = @"function";
    goto LABEL_48;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A6A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPITest::assertSafeResolve(WebKit::JSWebExtensionAPITest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPITest(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        __int16 v30 = "argument";
      }
      else {
        __int16 v30 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v35) {
        __int16 v31 = (char *)v35 + 16;
      }
      else {
        __int16 v31 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      uint64_t v38 = a4;
      __int16 v39 = 2082;
      char v40 = v30;
      __int16 v41 = 2082;
      uint64_t v42 = v31;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function test.assertSafeResolve() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      if (v35)
      {
        if (*(_DWORD *)v35 == 1) {
          WTF::fastFree(v35, v32);
        }
        else {
          --*(_DWORD *)v35;
        }
      }
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v32);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsObject(this, *a5))
      {
        if (JSValueIsString(this, a5[1]) || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          JSValueRef v17 = *a5;
          if (*a5)
          {
            JSValueRef v18 = (void *)MEMORY[0x1E4F30938];
            unint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
            JSValueRef v20 = [v18 valueWithJSValueRef:v17 inContext:v19];
          }
          else
          {
            JSValueRef v20 = 0;
          }
          uint64_t v24 = WebKit::toNSString(this, a5[1], 2);
          if (!v20) {
            goto LABEL_21;
          }
LABEL_20:
          if ([(JSValue *)v20 isObject]) {
            goto LABEL_21;
          }
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertSafeResolve()", &cfstr_Function.isa, &cfstr_AnObjectIsExpe.isa, v25);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_25:

          goto LABEL_26;
        }
        JSValueRef v33 = @"a string is expected";
        uint64_t v34 = @"message";
LABEL_48:
        JSValueRef v20 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertSafeResolve()", &v34->isa, &v33->isa, v16);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        uint64_t v24 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)1)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"test.assertSafeResolve()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_26:
          if (*((_DWORD *)v12 + 12) == 1) {
            (*(void (**)(uint64_t))(*((void *)v12 + 5) + 8))((uint64_t)v12 + 40);
          }
          else {
            --*((_DWORD *)v12 + 12);
          }
          return Undefined;
        }
        goto LABEL_17;
      }
      if (JSValueIsObject(this, *a5))
      {
        JSValueRef v21 = *a5;
        if (!v21)
        {
LABEL_17:
          uint64_t v24 = 0;
          JSValueRef v20 = 0;
LABEL_21:
          WebKit::WebExtensionAPITest::assertSafeResolve(v12, this, v20, (NSString *)v24);
          unint64_t v27 = (const OpaqueJSContext *)(id)objc_claimAutoreleasedReturnValue();
          if (v27) {
            JSValueRef Null = WebKit::toJSValueRef(this, v27, v26);
          }
          else {
            JSValueRef Null = JSValueMakeNull(this);
          }
          JSValueRef Undefined = Null;

          goto LABEL_25;
        }
        JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
        uint64_t v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        JSValueRef v20 = [v22 valueWithJSValueRef:v21 inContext:v23];

        uint64_t v24 = 0;
        if (!v20) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    JSValueRef v33 = @"an object is expected";
    uint64_t v34 = @"function";
    goto LABEL_48;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989A7030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebNavigation *WebKit::toWebExtensionAPIWebNavigation(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWebNavigation *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(WebKit::JSWebExtensionAPIWebNavigation *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "WebNavigation";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWebNavigation::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebNavigation::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWebNavigation::webNavigationClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::getFrame(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebNavigation(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    __int16 v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function webNavigation.getFrame() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    JSObjectRef resolve = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    JSValueRef v17 = *a5;
    if (*a5)
    {
      JSValueRef v18 = (void *)MEMORY[0x1E4F30938];
      unint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      char v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getFrame()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  JSValueRef v22 = *a5;
  if (*a5)
  {
    uint64_t v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    __int16 v26 = (void *)v25;
  }
  else
  {
    __int16 v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    uint64_t v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (__int16 v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    __int16 v32 = a5[1];
    JSValueRef v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    char v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getFrame()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v51 = resolve;
    *(void *)long long buf = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    char v15 = v47;
LABEL_28:
    *(void *)long long buf = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIWebNavigation::getFrame(v12, v29, (uint64_t *)buf, &v46);
    uint64_t v35 = (NSString *)v46;
    JSValueRef v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)long long buf = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getFrame()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  uint64_t v45 = @"callback";
LABEL_56:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getFrame()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  JSValueRef Undefined = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989A77C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::getAllFrames(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, const OpaqueJSValue **a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebNavigation(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_34;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v38 = "argument";
    }
    else {
      uint64_t v38 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v51;
    WTF::String::utf8();
    if (v50) {
      __int16 v39 = (char *)v50 + 16;
    }
    else {
      __int16 v39 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v53 = 2082;
    uint64_t v54 = v38;
    __int16 v55 = 2082;
    __int16 v56 = v39;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function webNavigation.getAllFrames() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v41 = v50;
    __int16 v50 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1) {
        WTF::fastFree(v41, v40);
      }
      else {
        --*(_DWORD *)v41;
      }
    }
    uint64_t v42 = resolve;
    JSObjectRef resolve = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v40);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    JSValueRef v17 = *a5;
    if (*a5)
    {
      JSValueRef v18 = (void *)MEMORY[0x1E4F30938];
      unint64_t v19 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v20 = [v18 valueWithJSValueRef:v17 inContext:v19];

      JSValueRef v21 = (void *)v20;
    }
    else
    {
      JSValueRef v21 = 0;
    }
    char v27 = [v21 _isDictionary];

    if (v27)
    {
      uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
    goto LABEL_55;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    if (a4)
    {
LABEL_7:
      uint64_t v15 = 0;
      goto LABEL_8;
    }
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getAllFrames()", 0, &cfstr_ARequiredArgum.isa, v14);
    JSValueRef v43 = JSValueMakeUndefined(this);
    goto LABEL_57;
  }
  JSValueRef v22 = *a5;
  if (*a5)
  {
    uint64_t v23 = (void *)MEMORY[0x1E4F30938];
    uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

    __int16 v26 = (void *)v25;
  }
  else
  {
    __int16 v26 = 0;
  }
  int v30 = [v26 _isDictionary];

  if (!v30)
  {
LABEL_55:
    uint64_t v44 = @"an object is expected";
    uint64_t v45 = @"details";
    goto LABEL_56;
  }
  if (JSValueIsObject(this, a5[1]) && (__int16 v31 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v31))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v29 = WebKit::toNSDictionary(this, *a5, 0, 0);
    __int16 v32 = a5[1];
    JSValueRef v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
    uint64_t v15 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (!v29)
    {
LABEL_8:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getAllFrames()", &cfstr_Details.isa, &cfstr_AnObjectIsExpe.isa, v14);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      if (v15) {
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
      }
      goto LABEL_34;
    }
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_28;
    }
LABEL_27:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    __int16 v51 = resolve;
    *(void *)long long buf = this;
    __int16 v50 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v51, &v50, &v47);
    uint64_t v15 = v47;
LABEL_28:
    *(void *)long long buf = v15;
    id v46 = 0;
    WebKit::WebExtensionAPIWebNavigation::getAllFrames(v12, v29, (uint64_t *)buf, &v46);
    uint64_t v35 = (NSString *)v46;
    JSValueRef v36 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)long long buf = 0;
    if (v36) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v36);
    }
    if (v35)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getAllFrames()", 0, v35, v34);
    }
    else if (Undefined)
    {
LABEL_33:

      goto LABEL_34;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v44 = @"a function is expected";
  uint64_t v45 = @"callback";
LABEL_56:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webNavigation.getAllFrames()", &v45->isa, &v44->isa, v28);
  JSValueRef v43 = JSValueMakeUndefined(this);
LABEL_57:
  JSValueRef Undefined = v43;
LABEL_34:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989A7E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onBeforeNavigate(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webNavigation.onBeforeNavigate in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebNavigation::onBeforeNavigate(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989A81E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onCommitted(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webNavigation.onCommitted in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebNavigation::onCommitted(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989A84B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onDOMContentLoaded(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webNavigation.onDOMContentLoaded in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebNavigation::onDOMContentLoaded(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989A8788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onCompleted(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webNavigation.onCompleted in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebNavigation::onCompleted(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989A8A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigation::onErrorOccurred(WebKit::JSWebExtensionAPIWebNavigation *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebNavigation(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webNavigation.onErrorOccurred in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebNavigation::onErrorOccurred(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989A8D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebNavigationEvent *WebKit::toWebExtensionAPIWebNavigationEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWebNavigationEvent *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(WebKit::JSWebExtensionAPIWebNavigationEvent *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WebNavigationEvent";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebNavigationEvent::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWebNavigationEvent::webNavigationEventClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigationEvent::addListener(WebKit::JSWebExtensionAPIWebNavigationEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebNavigationEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_40;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      id v46 = "argument";
    }
    else {
      id v46 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v55 = v57;
    WTF::String::utf8();
    if (v56) {
      NSString v47 = (char *)v56 + 16;
    }
    else {
      NSString v47 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v59 = 2082;
    v60 = v46;
    __int16 v61 = 2082;
    JSObjectRef v62 = v47;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function addListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v49 = v56;
    __int16 v56 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1) {
        WTF::fastFree(v49, v48);
      }
      else {
        --*(_DWORD *)v49;
      }
    }
    __int16 v50 = v55;
    __int16 v55 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v48);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5))
    {
      unint64_t v19 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v19))
      {
        uint64_t v20 = *a5;
        JSValueRef v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        uint64_t v15 = 0;
        JSValueRef v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
        goto LABEL_22;
      }
    }
    goto LABEL_60;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsObject(this, *a5))
    {
      uint64_t v23 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v23))
      {
        JSValueRef v24 = a5[1];
        if (v24)
        {
          uint64_t v25 = (void *)MEMORY[0x1E4F30938];
          __int16 v26 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          uint64_t v27 = [v25 valueWithJSValueRef:v24 inContext:v26];

          uint64_t v28 = (void *)v27;
        }
        else
        {
          uint64_t v28 = 0;
        }
        char v29 = [v28 _isDictionary];

        if ((v29 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          int v30 = *a5;
          __int16 v31 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v30, v31, buf);
          JSValueRef v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
          uint64_t v15 = WebKit::toNSDictionary(this, a5[1], 0, 0);
LABEL_22:
          if (!v22) {
            goto LABEL_8;
          }
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
          uint64_t v34 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v35 = *(void *)(*(void *)buf + 24);
            if (v35)
            {
              uint64_t v36 = *(void *)(v35 + 8);
              if (v36)
              {
                uint64_t v37 = *(void *)(v36 + 24);
                if (v37)
                {
                  uint64_t v38 = *(void *)(v37 + 8);
                  if (v38)
                  {
                    __int16 v39 = *(void **)(*(void *)(v38 + 48) + 16);
                    if (((*(uint64_t (**)(void *))(*v39 + 1368))(v39) & 1) == 0)
                    {
                      uint64_t v40 = *(void *)(v39[2] + 8);
                      if (v40)
                      {
                        CFRetain(*(CFTypeRef *)(v40 - 8));
                        CFRelease(*(CFTypeRef *)(v34 + 8));
                        ++*(_DWORD *)v22;
                        id v53 = 0;
                        uint64_t v54 = v22;
                        WebKit::WebExtensionAPIWebNavigationEvent::addListener(v12, v40 - 16, &v54, v15, (uint64_t)&v53);
                        uint64_t v42 = (NSString *)v53;
                        JSValueRef v43 = v54;
                        uint64_t v54 = 0;
                        if (v43) {
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
                        }
                        if (v42) {
                          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", 0, v42, v41);
                        }
                        JSValueRef Undefined = JSValueMakeUndefined(this);

                        CFRelease(*(CFTypeRef *)(v40 - 8));
LABEL_39:

                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
                        goto LABEL_40;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*(CFTypeRef *)(v34 + 8));
          }
          uint64_t v44 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1985F2000, v44, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          }
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_39;
        }
        __int16 v51 = @"an object is expected";
        uint64_t v52 = @"filter";
LABEL_61:
        uint64_t v15 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", &v52->isa, &v51->isa, v18);
        JSValueRef v16 = JSValueMakeUndefined(this);
        goto LABEL_9;
      }
    }
LABEL_60:
    __int16 v51 = @"a function is expected";
    uint64_t v52 = @"listener";
    goto LABEL_61;
  }
  if (a4)
  {
    uint64_t v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v14);
    JSValueRef v16 = JSValueMakeUndefined(this);
LABEL_9:
    JSValueRef Undefined = v16;

    goto LABEL_40;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", 0, &cfstr_ARequiredArgum.isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_40:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989A9560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigationEvent::removeListener(WebKit::JSWebExtensionAPIWebNavigationEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebNavigationEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_23;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v34 = "argument";
    }
    else {
      uint64_t v34 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v42 = v44;
    WTF::String::utf8();
    if (v43) {
      uint64_t v35 = (char *)v43 + 16;
    }
    else {
      uint64_t v35 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v46 = 2082;
    NSString v47 = v34;
    __int16 v48 = 2082;
    uint64_t v49 = v35;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function removeListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v37 = v43;
    JSValueRef v43 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1) {
        WTF::fastFree(v37, v36);
      }
      else {
        --*(_DWORD *)v37;
      }
    }
    uint64_t v38 = v42;
    uint64_t v42 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }

  if (!a4)
  {
    __int16 v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    goto LABEL_45;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    __int16 v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
LABEL_45:
    *a6 = v39;
    JSValueRef v40 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  JSValueRef v17 = *a5;
  uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v44);
  uint64_t v20 = v44;
  if (v44)
  {
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
    uint64_t v23 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v24 = *(void *)(*(void *)buf + 24);
      if (v24)
      {
        uint64_t v25 = *(void *)(v24 + 8);
        if (v25)
        {
          uint64_t v26 = *(void *)(v25 + 24);
          if (v26)
          {
            uint64_t v27 = *(void *)(v26 + 8);
            if (v27)
            {
              uint64_t v28 = *(void **)(*(void *)(v27 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v28 + 1368))(v28) & 1) == 0)
              {
                uint64_t v29 = *(void *)(v28[2] + 8);
                if (v29)
                {
                  CFRetain(*(CFTypeRef *)(v29 - 8));
                  CFRelease(*(CFTypeRef *)(v23 + 8));
                  ++*(_DWORD *)v20;
                  __int16 v41 = v20;
                  WebKit::WebExtensionAPIWebNavigationEvent::removeListener(v12, v29 - 16, &v41);
                  int v30 = v41;
                  __int16 v41 = 0;
                  if (v30) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_22:
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
                  goto LABEL_23;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    __int16 v32 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_22;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v40 = JSValueMakeUndefined(this);
LABEL_47:
  JSValueRef Undefined = v40;
LABEL_23:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989A9B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebNavigationEvent::hasListener(WebKit::JSWebExtensionAPIWebNavigationEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebNavigationEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_9;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v24 = "argument";
    }
    else {
      uint64_t v24 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v32 = v34;
    WTF::String::utf8();
    if (v33) {
      uint64_t v25 = (char *)v33 + 16;
    }
    else {
      uint64_t v25 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v36 = 2082;
    uint64_t v37 = v24;
    __int16 v38 = 2082;
    __int16 v39 = v25;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function hasListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v27 = v33;
    JSValueRef v33 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1) {
        WTF::fastFree(v27, v26);
      }
      else {
        --*(_DWORD *)v27;
      }
    }
    uint64_t v28 = v32;
    __int16 v32 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }

  if (!a4)
  {
    uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    goto LABEL_31;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
LABEL_31:
    *a6 = v29;
    JSValueRef v30 = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  JSValueRef v17 = *a5;
  uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
  uint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    ++**(_DWORD **)buf;
    __int16 v31 = v20;
    BOOL hasListener = WebKit::WebExtensionAPIWebNavigationEvent::hasListener(v12, &v31);
    JSValueRef Undefined = JSValueMakeBoolean(this, hasListener);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    goto LABEL_9;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v30 = JSValueMakeUndefined(this);
LABEL_33:
  JSValueRef Undefined = v30;
LABEL_9:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989A9FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebPageNamespace *WebKit::toWebExtensionAPIWebPageNamespace(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWebPageNamespace *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(WebKit::JSWebExtensionAPIWebPageNamespace *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "WebPageNamespace";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWebPageNamespace::staticValues(void)::values;
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIWebPageNamespace::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIWebPageNamespace::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIWebPageNamespace::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWebPageNamespace::webPageNamespaceClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIWebPageNamespace::getPropertyNames(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, v19);
    uint64_t v10 = v19[0];
    if (v19[0])
    {
      uint64_t v11 = *((void *)v19[0] + 3);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        JSValueRef v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        JSValueRef v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      JSValueRef v16 = 0;
    }
    v19[0] = "test";
    v19[1] = (const char *)5;
    if (WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed((WebKit::WebExtensionAPIWebPageNamespace *)v7, v19, (WebKit::WebPage *)v16))
    {
      JSValueRef v17 = JSStringCreateWithUTF8CString("test");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17) {
        JSStringRelease(v17);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1)
    {
      uint64_t v18 = *(void (**)(uint64_t))(*(void *)(v7 + 40) + 8);
      v18(v7 + 40);
    }
    else
    {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_1989AA360(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::JSWebExtensionAPIWebPageNamespace::hasProperty(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, v19);
  uint64_t v10 = v19[0];
  if (v19[0])
  {
    uint64_t v11 = *((void *)v19[0] + 3);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      JSValueRef v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      JSValueRef v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    JSValueRef v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "test"))
  {
    v19[0] = "test";
    v19[1] = (const char *)5;
    BOOL isPropertyAllowed = WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed((WebKit::WebExtensionAPIWebPageNamespace *)v7, v19, (WebKit::WebPage *)v16);
  }
  else
  {
    BOOL isPropertyAllowed = 0;
  }
  if (v16) {
    CFRelease(v16[1]);
  }
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return isPropertyAllowed;
}

void sub_1989AA55C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebPageNamespace::getProperty(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    ++*(_DWORD *)(v8 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v11, &buf);
    uint64_t v12 = buf;
    if ((void)buf)
    {
      uint64_t v13 = *(void *)(buf + 24);
      if (v13
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void *)(v14 + 24)) != 0
        && (uint64_t v16 = *(void *)(v15 + 8)) != 0
        && (JSValueRef v17 = *(void **)(*(void *)(v16 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v17 + 1368))(v17) & 1) == 0))
      {
        uint64_t v18 = *(CFTypeRef **)(v17[2] + 8);
        if (v18)
        {
          CFRetain(*(v18 - 1));
          v18 -= 2;
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (JSStringIsEqualToUTF8CString(a3, "test")
      && (*(void *)&long long buf = "test",
          *((void *)&buf + 1) = 5,
          WebKit::WebExtensionAPIWebPageNamespace::isPropertyAllowed((WebKit::WebExtensionAPIWebPageNamespace *)v9, (const char **)&buf, (WebKit::WebPage *)v18))&& (uint64_t v20 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, v19), (v21 = v20) != 0))
    {
      ++*(_DWORD *)(v20 + 48);
      JSValueRef v22 = (id)qword_1EB357DF8;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::utf8();
        if (v28) {
          uint64_t v26 = (char *)v28 + 16;
        }
        else {
          uint64_t v26 = 0;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v26;
        _os_log_debug_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEBUG, "Called getter browser.test in %{public}s world", (uint8_t *)&buf, 0xCu);
        if (v28)
        {
          if (*(_DWORD *)v28 == 1) {
            WTF::fastFree(v28, v27);
          }
          else {
            --*(_DWORD *)v28;
          }
        }
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v27);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
      }

      uint64_t v23 = WebKit::WebExtensionAPIWebPageNamespace::test((WebKit::WebExtensionAPIWebPageNamespace *)v21);
      JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v23 + 40));
      if (*(_DWORD *)(v21 + 48) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)(v21 + 40) + 8))(v21 + 40);
        if (!v18) {
          goto LABEL_21;
        }
      }
      else
      {
        --*(_DWORD *)(v21 + 48);
        if (!v18) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      JSValueRef Undefined = JSValueMakeUndefined(this);
      if (!v18)
      {
LABEL_21:
        if (*(_DWORD *)(v9 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v9 + 40) + 8))(v9 + 40);
        }
        else {
          --*(_DWORD *)(v9 + 48);
        }
        return Undefined;
      }
    }
    CFRelease(v18[1]);
    goto LABEL_21;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989AA984(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebPageNamespace::runtime(WebKit::JSWebExtensionAPIWebPageNamespace *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIWebPageNamespace(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*((_DWORD *)v6 + 12);
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter browser.runtime in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = (*(uint64_t (**)(WebKit::JSWebExtensionAPIWebPageNamespace *))(*(void *)v7 + 32))(v7);
    JSValueRef v10 = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
    if (*((_DWORD *)v7 + 12) == 1) {
      (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
    }
    else {
      --*((_DWORD *)v7 + 12);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1989AACF4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }

  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIWebPageRuntime *WebKit::toWebExtensionAPIWebPageRuntime(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWebPageRuntime *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(WebKit::JSWebExtensionAPIWebPageRuntime *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WebPageRuntime";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebPageRuntime::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWebPageRuntime::webPageRuntimeClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebPageRuntime::sendMessage(WebKit::JSWebExtensionAPIWebPageRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, unint64_t a4, JSValueRef *a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  exception = a6;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = WebKit::toWebExtensionAPIWebPageRuntime(this, a3, a3);
  if (v9)
  {
    uint64_t v65 = (uint64_t)v9;
    ++*((_DWORD *)v9 + 12);
    uint64_t v10 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == 1) {
        uint64_t v54 = "argument";
      }
      else {
        uint64_t v54 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSObjectRef resolve = *(JSObjectRef *)v72;
      WTF::String::utf8();
      if (v71) {
        __int16 v55 = (char *)v71 + 16;
      }
      else {
        __int16 v55 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v74 = 2082;
      __int16 v75 = v54;
      __int16 v76 = 2082;
      uint64_t v77 = v55;
      _os_log_debug_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEBUG, "Called function webPageRuntime.sendMessage() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      uint64_t v57 = v71;
      __int16 v71 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 1) {
          WTF::fastFree(v57, v56);
        }
        else {
          --*(_DWORD *)v57;
        }
      }
      uint64_t v58 = resolve;
      JSObjectRef resolve = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v56);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
    }

    unint64_t v12 = a4 - 1;
    if (a4 <= 1)
    {
      *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", 0, &cfstr_ARequiredArgum.isa, v11);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      goto LABEL_67;
    }
    uint64_t v13 = this;
    if (a4 == 2)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      if (a4 == 4)
      {
        if (JSValueIsString(this, *a5))
        {
          if (JSValueIsNull(this, a5[1])
            || JSValueIsUndefined(this, a5[1])
            || (uint64_t v15 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v15)))
          {
            __int16 v59 = @"an object is expected";
            v60 = @"message";
          }
          else
          {
            JSValueRef v16 = a5[2];
            if (v16)
            {
              JSValueRef v17 = (void *)MEMORY[0x1E4F30938];
              uint64_t v18 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
              uint64_t v19 = [v17 valueWithJSValueRef:v16 inContext:v18];

              uint64_t v20 = (void *)v19;
            }
            else
            {
              uint64_t v20 = 0;
            }
            char v40 = objc_msgSend(v20, "_isDictionary", exception);

            if ((v40 & 1) != 0 || JSValueIsNull(this, a5[2]) || JSValueIsUndefined(this, a5[2]))
            {
              if (JSValueIsObject(this, a5[3])
                && (__int16 v41 = JSValueToObject(this, a5[3], 0), JSObjectIsFunction(this, v41))
                || JSValueIsNull(this, a5[3])
                || JSValueIsUndefined(this, a5[3]))
              {
                uint64_t v42 = WebKit::toNSString(this, *a5, 2);
                uint64_t v44 = WebKit::serializeJSObject(this, a5[1], exception, v43);
                uint64_t v45 = WebKit::toNSDictionary(this, a5[2], 0, 0);
                WebKit::toJSCallbackHandler((uint64_t)this, a5[3], (const OpaqueJSValue *)(v65 + 40), buf);
                unint64_t v32 = 4;
                uint64_t v21 = *(WebKit::WebExtensionCallbackHandler **)buf;
                a4 = 4;
                uint64_t v27 = (void *)v42;
                JSValueRef v33 = (void *)v44;
                uint64_t v34 = (void *)v45;
                goto LABEL_46;
              }
              __int16 v59 = @"a function is expected";
              v60 = @"callback";
            }
            else
            {
              __int16 v59 = @"an object is expected";
              v60 = @"options";
            }
          }
        }
        else
        {
          __int16 v59 = @"a string is expected";
          v60 = @"extensionId";
        }
        uint64_t v52 = 0;
        *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", &v60->isa, &v59->isa, v14);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        JSValueRef v33 = 0;
        uint64_t v27 = 0;
LABEL_66:

LABEL_67:
        if (*(_DWORD *)(v65 + 48) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v65 + 40) + 8))(v65 + 40);
        }
        else {
          --*(_DWORD *)(v65 + 48);
        }
        return Undefined;
      }
      uint64_t v23 = a5[v12];
      if (v23
        && (JSValueIsObject(this, a5[v12]) && (uint64_t v24 = JSValueToObject(this, v23, 0), JSObjectIsFunction(this, v24))
         || JSValueIsNull(this, v23)
         || JSValueIsUndefined(this, v23)))
      {
        WebKit::toJSCallbackHandler((uint64_t)this, v23, (const OpaqueJSValue *)(v65 + 40), buf);
        uint64_t v21 = *(WebKit::WebExtensionCallbackHandler **)buf;
        uint64_t v22 = a4 - 3;
        --a4;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 1;
      }
    }
    uint64_t v25 = *a5;
    if (*a5)
    {
      if (!JSValueIsString(this, *a5))
      {
        uint64_t v27 = 0;
        *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", &cfstr_Extensionid_0.isa, &cfstr_AStringIsExpec.isa, v26);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        JSValueRef v33 = 0;
        uint64_t v34 = 0;
        goto LABEL_63;
      }
      uint64_t v27 = WebKit::toNSString(this, v25, 2);
      uint64_t v28 = a5[1];
      if (v28)
      {
        if (JSValueIsNull(this, a5[1])
          || JSValueIsUndefined(this, v28)
          || (JSValueRef v30 = JSValueToObject(this, v28, 0), JSObjectIsFunction(this, v30)))
        {
          JSValueRef v33 = 0;
          *exception = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", &cfstr_Message.isa, &cfstr_AnObjectIsExpe.isa, v29);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          uint64_t v34 = 0;
          goto LABEL_63;
        }
        WebKit::serializeJSObject(this, v28, exception, v31);
        v33 = unint64_t v32 = 2;
      }
      else
      {
        JSValueRef v33 = 0;
        unint64_t v32 = 1;
      }
    }
    else
    {
      uint64_t v27 = 0;
      unint64_t v32 = 0;
      JSValueRef v33 = 0;
    }
    uint64_t v34 = 0;
    if (v22 && v32 < a4)
    {
      uint64_t v35 = a5[v32];
      __int16 v36 = v13;
      if (!v35) {
        goto LABEL_36;
      }
      uint64_t v37 = (void *)MEMORY[0x1E4F30938];
      uint64_t v38 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(v13)];
      __int16 v39 = [v37 valueWithJSValueRef:v35 inContext:v38];

      __int16 v36 = v13;
      LOBYTE(v38) = [v39 _isDictionary];

      if ((v38 & 1) == 0)
      {
        __int16 v36 = v13;
        if (!JSValueIsNull(v13, v35))
        {
          __int16 v36 = v13;
          if (!JSValueIsUndefined(v13, v35))
          {
LABEL_36:
            uint64_t v34 = 0;
            goto LABEL_47;
          }
        }
      }
      uint64_t v34 = WebKit::toNSDictionary(v36, v35, 0, 0);
      ++v32;
    }
LABEL_46:
    __int16 v36 = v13;
LABEL_47:
    if (v27)
    {
      if (*exception)
      {
LABEL_93:
        JSValueRef v61 = JSValueMakeUndefined(v36);
        goto LABEL_98;
      }
      if (v33)
      {
        if (v32 >= a4)
        {
          if (v21)
          {
            JSValueRef Undefined = 0;
          }
          else
          {
            JSObjectRef reject = 0;
            JSObjectRef resolve = 0;
            JSValueRef Undefined = JSObjectMakeDeferredPromise(v36, &resolve, &reject, 0);
            *(void *)long long buf = v36;
            __int16 v71 = reject;
            *(void *)v72 = resolve;
            WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, (OpaqueJSValue **)v72, &v71, &v68);
            uint64_t v21 = v68;
          }
          GlobalContext = JSContextGetGlobalContext(v36);
          WebKit::WebFrame::frameForContext(GlobalContext, v48, buf);
          if (*(void *)buf)
          {
            *(void *)v72 = v21;
            id v67 = 0;
            WebKit::WebExtensionAPIWebPageRuntime::sendMessage(v65, *(WebKit::WebFrame **)buf, v27, v33, v34, (uint64_t *)v72, &v67);
            uint64_t v50 = (NSString *)v67;
            __int16 v51 = *(WebKit::WebExtensionCallbackHandler **)v72;
            *(void *)v72 = 0;
            if (v51) {
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v51);
            }
            if (v50)
            {
              *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", 0, v50, v49);
            }
            else if (Undefined)
            {
LABEL_60:

              if (*(void *)buf) {
                CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
              }
              uint64_t v21 = 0;
              goto LABEL_63;
            }
            JSValueRef Undefined = JSValueMakeUndefined(v36);
            goto LABEL_60;
          }
          JSObjectRef v62 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v72 = 0;
            _os_log_error_impl(&dword_1985F2000, v62, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v72, 2u);
            if (Undefined)
            {
LABEL_96:
              JSValueRef Undefined = WebKit::toJSRejectedPromise(v36, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", 0, &cfstr_AnUnknownError.isa, v63);
              if (Undefined)
              {
LABEL_63:
                if (v21) {
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v21);
                }
                uint64_t v52 = v34;
                goto LABEL_66;
              }
            }
          }
          else if (Undefined)
          {
            goto LABEL_96;
          }
          JSValueRef v61 = JSValueMakeUndefined(v36);
          goto LABEL_98;
        }
        *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", 0, &cfstr_AnUnknownArgum.isa, v11);
        __int16 v36 = v13;
        goto LABEL_93;
      }
      JSValueRef v33 = 0;
      *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", &cfstr_Message.isa, &cfstr_AJsonSerializa.isa, v11);
      JSValueRef v61 = JSValueMakeUndefined(v13);
    }
    else
    {
      uint64_t v27 = 0;
      *exception = WebKit::toJSError(v36, (const OpaqueJSContext *)@"webPageRuntime.sendMessage()", &cfstr_Extensionid_0.isa, &cfstr_AStringIsExpec.isa, v11);
      JSValueRef v61 = JSValueMakeUndefined(v13);
    }
LABEL_98:
    JSValueRef Undefined = v61;
    goto LABEL_63;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989ABA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    CFRelease(*(CFTypeRef *)(a19 + 8));
  }
  if (v20) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
  }

  if (*(_DWORD *)(a10 + 48) == 1) {
    (*(void (**)(void))(*(void *)(a10 + 40) + 8))();
  }
  else {
    --*(_DWORD *)(a10 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebPageRuntime::connect(WebKit::JSWebExtensionAPIWebPageRuntime *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebPageRuntime(this, a3, a3);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    ++*((_DWORD *)v11 + 12);
    uint64_t v13 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      if (a4 == (OpaqueJSValue *)1) {
        JSValueRef v33 = "argument";
      }
      else {
        JSValueRef v33 = "arguments";
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v42 = *(WTF::StringImpl **)v44;
      WTF::String::utf8();
      if (v43) {
        uint64_t v34 = (char *)v43 + 16;
      }
      else {
        uint64_t v34 = 0;
      }
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = a4;
      __int16 v46 = 2082;
      NSString v47 = v33;
      __int16 v48 = 2082;
      uint64_t v49 = v34;
      _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function webPageRuntime.connect() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
      __int16 v36 = v43;
      JSValueRef v43 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1) {
          WTF::fastFree(v36, v35);
        }
        else {
          --*(_DWORD *)v36;
        }
      }
      uint64_t v37 = v42;
      uint64_t v42 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
    }

    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsString(this, *a5))
      {
        JSValueRef v20 = a5[1];
        if (v20)
        {
          uint64_t v21 = (void *)MEMORY[0x1E4F30938];
          uint64_t v22 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          uint64_t v23 = [v21 valueWithJSValueRef:v20 inContext:v22];
        }
        else
        {
          uint64_t v23 = 0;
        }
        char v24 = [v23 _isDictionary];

        if ((v24 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          JSValueRef v17 = WebKit::toNSString(this, *a5, 2);
          uint64_t v18 = WebKit::toNSDictionary(this, a5[1], 0, 0);
LABEL_18:
          if (!v17)
          {
            uint64_t v15 = v18;
LABEL_7:
            *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.connect()", &cfstr_Extensionid_0.isa, &cfstr_AStringIsExpec.isa, v14);
            JSValueRef Undefined = JSValueMakeUndefined(this);
            JSValueRef v17 = 0;
            uint64_t v18 = v15;
LABEL_30:

LABEL_31:
            if (*(_DWORD *)(v12 + 48) == 1) {
              (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
            }
            else {
              --*(_DWORD *)(v12 + 48);
            }
            return Undefined;
          }
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v26, buf);
          uint64_t v27 = *(void *)buf;
          if (!*(void *)buf)
          {
            char v40 = qword_1EB357DF8;
            if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t v44 = 0;
              _os_log_error_impl(&dword_1985F2000, v40, OS_LOG_TYPE_ERROR, "Frame could not be found for JSContextRef", v44, 2u);
            }
            JSValueRef Undefined = JSValueMakeUndefined(this);
            goto LABEL_30;
          }
          id v41 = 0;
          WebKit::WebExtensionAPIWebPageRuntime::connect(v12, *(WebKit::WebFrame **)buf, this, v17, v18, &v41, (uint64_t *)v44);
          uint64_t v28 = (NSString *)v41;
          if (*(void *)v44) {
            uint64_t v29 = (void *)(*(void *)v44 + 40);
          }
          else {
            uint64_t v29 = 0;
          }
          JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, v29);
          uint64_t v31 = *(WTF::StringImpl **)v44;
          *(void *)uint64_t v44 = 0;
          if (v31)
          {
            if (*((_DWORD *)v31 + 12) == 1)
            {
              (*(void (**)(void))(*((void *)v31 + 5) + 8))();
              if (v28)
              {
LABEL_58:
                *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.connect()", 0, v28, v30);
                JSValueRef Undefined = JSValueMakeUndefined(this);
              }
LABEL_29:

              CFRelease(*(CFTypeRef *)(v27 + 8));
              goto LABEL_30;
            }
            --*((_DWORD *)v31 + 12);
          }
          if (v28) {
            goto LABEL_58;
          }
          goto LABEL_29;
        }
        uint64_t v38 = @"an object is expected";
        __int16 v39 = @"options";
LABEL_54:
        uint64_t v18 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.connect()", &v39->isa, &v38->isa, v19);
        JSValueRef Undefined = JSValueMakeUndefined(this);
        JSValueRef v17 = 0;
        goto LABEL_30;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)1)
      {
        if (!a4)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"webPageRuntime.connect()", 0, &cfstr_ARequiredArgum.isa, v14);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_31;
        }
        uint64_t v15 = 0;
        goto LABEL_7;
      }
      if (JSValueIsString(this, *a5))
      {
        uint64_t v18 = 0;
        JSValueRef v17 = WebKit::toNSString(this, *a5, 2);
        goto LABEL_18;
      }
    }
    uint64_t v38 = @"a string is expected";
    __int16 v39 = @"extensionId";
    goto LABEL_54;
  }

  return JSValueMakeUndefined(this);
}

void sub_1989AC1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(a1);
}

WebKit::JSWebExtensionAPIWebRequest *WebKit::toWebExtensionAPIWebRequest(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWebRequest::webRequestClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIWebRequest::webRequestClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWebRequest *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebRequest::webRequestClass(WebKit::JSWebExtensionAPIWebRequest *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWebRequest::webRequestClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebRequest::webRequestClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "WebRequest";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWebRequest::staticValues(void)::values;
    v6.staticFunctions = 0;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWebRequest::webRequestClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onBeforeRequest(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onBeforeRequest in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onBeforeRequest(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989AC67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onBeforeSendHeaders(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onBeforeSendHeaders in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onBeforeSendHeaders(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989AC950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onSendHeaders(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onSendHeaders in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onSendHeaders(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989ACC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onHeadersReceived(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onHeadersReceived in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onHeadersReceived(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989ACEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onAuthRequired(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onAuthRequired in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onAuthRequired(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989AD1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onBeforeRedirect(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onBeforeRedirect in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onBeforeRedirect(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989AD4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onResponseStarted(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onResponseStarted in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onResponseStarted(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989AD774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onCompleted(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onCompleted in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onCompleted(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989ADA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequest::onErrorOccurred(WebKit::JSWebExtensionAPIWebRequest *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  JSClassDefinition v6 = WebKit::toWebExtensionAPIWebRequest(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      JSValueRef v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter webRequest.onErrorOccurred in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWebRequest::onErrorOccurred(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989ADD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWebRequestEvent *WebKit::toWebExtensionAPIWebRequestEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWebRequestEvent *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(WebKit::JSWebExtensionAPIWebRequestEvent *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WebRequestEvent";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWebRequestEvent::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWebRequestEvent::webRequestEventClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWebRequestEvent::addListener(WebKit::JSWebExtensionAPIWebRequestEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, uint64_t a5, const OpaqueJSValue **a6, const OpaqueJSValue **a7)
{
  id v66 = a6;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPIWebRequestEvent(this, a3, a3);
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((unsigned char *)v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_64;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v58 = "argument";
    }
    else {
      uint64_t v58 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    id v69 = v71;
    WTF::String::utf8();
    if (v70) {
      v60 = (char *)v70 + 16;
    }
    else {
      v60 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v73 = 2082;
    __int16 v74 = v58;
    __int16 v75 = 2082;
    __int16 v76 = v60;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function addListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    JSObjectRef v62 = v70;
    v70 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 1) {
        WTF::fastFree(v62, v61);
      }
      else {
        --*(_DWORD *)v62;
      }
    }
    uint64_t v63 = v69;
    id v69 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2) {
        WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v61);
      }
      else {
        *(_DWORD *)v63 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsObject(this, *(JSValueRef *)a5)
      && (uint64_t v22 = JSValueToObject(this, *(JSValueRef *)a5, 0), JSObjectIsFunction(this, v22)))
    {
      uint64_t v23 = *(void *)(a5 + 8);
      if (v23)
      {
        char v24 = (void *)MEMORY[0x1E4F30938];
        uint64_t v25 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v26 = [v24 valueWithJSValueRef:v23 inContext:v25];

        uint64_t v27 = (void *)v26;
      }
      else
      {
        uint64_t v27 = 0;
      }
      char v29 = objc_msgSend(v27, "_isDictionary", v66);

      if ((v29 & 1) != 0
        || JSValueIsNull(this, *(JSValueRef *)(a5 + 8))
        || JSValueIsUndefined(this, *(JSValueRef *)(a5 + 8)))
      {
        JSValueRef v30 = *(const OpaqueJSContext **)a5;
        uint64_t v31 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
        WebKit::toJSCallbackHandler((uint64_t)this, v30, v31, buf);
        unint64_t v32 = *(WebKit::WebExtensionCallbackHandler **)buf;
        uint64_t v28 = WebKit::toNSDictionary(this, *(const OpaqueJSValue **)(a5 + 8), 0, 0);
        uint64_t v33 = *(void *)(a5 + 16);
        uint64_t v34 = objc_opt_class();
        JSValueRef v20 = WebKit::toNSObject(this, v33, v34, 0, 0);
        if (v32) {
          goto LABEL_39;
        }
        goto LABEL_62;
      }
      unint64_t v64 = @"an object is expected";
      uint64_t v65 = @"filter";
    }
    else
    {
      unint64_t v64 = @"a function is expected";
      uint64_t v65 = @"listener";
    }
    uint64_t v28 = 0;
    *id v66 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", &v65->isa, &v64->isa, v21);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    JSValueRef v20 = 0;
    goto LABEL_63;
  }
  if (a4)
  {
    unint64_t v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      JSValueRef v20 = 0;
      uint64_t v28 = 0;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        uint64_t v18 = 0;
        JSValueRef v20 = 0;
        unint64_t v19 = 0;
      }
      else
      {
        uint64_t v15 = *(const OpaqueJSValue **)(a5 + 8 * v14);
        if (v15
          && (JSValueIsArray(this, *(JSValueRef *)(a5 + 8 * v14))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          uint64_t v16 = objc_opt_class();
          uint64_t v17 = WebKit::toNSObject(this, (uint64_t)v15, v16, 0, 0);
          uint64_t v18 = (char *)a4 - 2;
          unint64_t v19 = 1;
          JSValueRef v20 = (void *)v17;
        }
        else
        {
          JSValueRef v20 = 0;
          unint64_t v19 = 0;
          uint64_t v18 = (char *)a4 - 1;
        }
      }
      if (v19 >= v14) {
        goto LABEL_33;
      }
      uint64_t v35 = *(const OpaqueJSValue **)(a5 + 8 * (void)v18);
      if (!v35) {
        goto LABEL_33;
      }
      __int16 v36 = (void *)MEMORY[0x1E4F30938];
      uint64_t v37 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v38 = [v36 valueWithJSValueRef:v35 inContext:v37];

      LOBYTE(v36) = [v38 _isDictionary];
      if ((v36 & 1) == 0 && !JSValueIsNull(this, v35) && !JSValueIsUndefined(this, v35))
      {
LABEL_33:
        uint64_t v28 = 0;
        goto LABEL_34;
      }
      uint64_t v39 = WebKit::toNSDictionary(this, v35, 0, 0);
      if (v18)
      {
        --v18;
        uint64_t v28 = (void *)v39;
LABEL_34:
        char v40 = *(const OpaqueJSValue **)(a5 + 8 * (void)v18);
        if (v40)
        {
          if (JSValueIsObject(this, v40))
          {
            id v41 = JSValueToObject(this, v40, 0);
            if (JSObjectIsFunction(this, v41))
            {
              uint64_t v42 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
              WebKit::toJSCallbackHandler((uint64_t)this, v40, v42, buf);
              unint64_t v32 = *(WebKit::WebExtensionCallbackHandler **)buf;
              if (*(void *)buf)
              {
                if (v18)
                {
                  *id v66 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", 0, &cfstr_AnUnknownArgum.isa, v13);
                  JSValueRef v57 = JSValueMakeUndefined(this);
                  goto LABEL_55;
                }
LABEL_39:
                GlobalContext = JSContextGetGlobalContext(this);
                WebKit::WebFrame::frameForContext(GlobalContext, v44, buf);
                uint64_t v45 = *(void *)buf;
                if (*(void *)buf)
                {
                  uint64_t v46 = *(void *)(*(void *)buf + 24);
                  if (v46)
                  {
                    uint64_t v47 = *(void *)(v46 + 8);
                    if (v47)
                    {
                      uint64_t v48 = *(void *)(v47 + 24);
                      if (v48)
                      {
                        uint64_t v49 = *(void *)(v48 + 8);
                        if (v49)
                        {
                          uint64_t v50 = *(void **)(*(void *)(v49 + 48) + 16);
                          if (((*(uint64_t (**)(void *))(*v50 + 1368))(v50) & 1) == 0)
                          {
                            uint64_t v51 = *(void *)(v50[2] + 8);
                            if (v51)
                            {
                              CFRetain(*(CFTypeRef *)(v51 - 8));
                              CFRelease(*(CFTypeRef *)(v45 + 8));
                              ++*(_DWORD *)v32;
                              id v67 = 0;
                              uint64_t v68 = v32;
                              WebKit::WebExtensionAPIWebRequestEvent::addListener(v11, v51 - 16, &v68, v28, v20, (uint64_t)&v67);
                              id v53 = (NSString *)v67;
                              uint64_t v54 = v68;
                              uint64_t v68 = 0;
                              if (v54) {
                                WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v54);
                              }
                              if (v53) {
                                *id v66 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", 0, v53, v52);
                              }
                              JSValueRef Undefined = JSValueMakeUndefined(this);

                              CFRelease(*(CFTypeRef *)(v51 - 8));
                              goto LABEL_56;
                            }
                          }
                        }
                      }
                    }
                  }
                  CFRelease(*(CFTypeRef *)(v45 + 8));
                }
                __int16 v56 = qword_1EB357DF8;
                if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_error_impl(&dword_1985F2000, v56, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                }
                JSValueRef v57 = JSValueMakeUndefined(this);
LABEL_55:
                JSValueRef Undefined = v57;
LABEL_56:

                WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v32);
                goto LABEL_64;
              }
            }
          }
        }
        goto LABEL_62;
      }
      uint64_t v28 = (void *)v39;
    }
LABEL_62:
    *id v66 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v13);
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_63:

    goto LABEL_64;
  }
  *id v66 = WebKit::toJSError(this, (const OpaqueJSContext *)@"addListener()", 0, &cfstr_ARequiredArgum.isa, v13);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_64:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_1989AE7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  _Unwind_Resume(a1);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequestEvent::removeListener(WebKit::JSWebExtensionAPIWebRequestEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebRequestEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_23;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v34 = "argument";
    }
    else {
      uint64_t v34 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v42 = v44;
    WTF::String::utf8();
    if (v43) {
      uint64_t v35 = (char *)v43 + 16;
    }
    else {
      uint64_t v35 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v46 = 2082;
    uint64_t v47 = v34;
    __int16 v48 = 2082;
    uint64_t v49 = v35;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function removeListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v37 = v43;
    JSValueRef v43 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1) {
        WTF::fastFree(v37, v36);
      }
      else {
        --*(_DWORD *)v37;
      }
    }
    uint64_t v38 = v42;
    uint64_t v42 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }

  if (!a4)
  {
    uint64_t v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    goto LABEL_45;
  }
  if (!JSValueIsObject(this, *a5) || (uint64_t v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    uint64_t v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
LABEL_45:
    *a6 = v39;
    JSValueRef v40 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  uint64_t v17 = *a5;
  uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v44);
  JSValueRef v20 = v44;
  if (v44)
  {
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
    uint64_t v23 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v24 = *(void *)(*(void *)buf + 24);
      if (v24)
      {
        uint64_t v25 = *(void *)(v24 + 8);
        if (v25)
        {
          uint64_t v26 = *(void *)(v25 + 24);
          if (v26)
          {
            uint64_t v27 = *(void *)(v26 + 8);
            if (v27)
            {
              uint64_t v28 = *(void **)(*(void *)(v27 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v28 + 1368))(v28) & 1) == 0)
              {
                uint64_t v29 = *(void *)(v28[2] + 8);
                if (v29)
                {
                  CFRetain(*(CFTypeRef *)(v29 - 8));
                  CFRelease(*(CFTypeRef *)(v23 + 8));
                  ++*(_DWORD *)v20;
                  id v41 = v20;
                  WebKit::WebExtensionAPIWebRequestEvent::removeListener(v12, v29 - 16, &v41);
                  JSValueRef v30 = v41;
                  id v41 = 0;
                  if (v30) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_22:
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
                  goto LABEL_23;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    unint64_t v32 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_22;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v40 = JSValueMakeUndefined(this);
LABEL_47:
  JSValueRef Undefined = v40;
LABEL_23:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989AEDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWebRequestEvent::hasListener(WebKit::JSWebExtensionAPIWebRequestEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWebRequestEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_9;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v24 = "argument";
    }
    else {
      uint64_t v24 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unint64_t v32 = v34;
    WTF::String::utf8();
    if (v33) {
      uint64_t v25 = (char *)v33 + 16;
    }
    else {
      uint64_t v25 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v36 = 2082;
    uint64_t v37 = v24;
    __int16 v38 = 2082;
    uint64_t v39 = v25;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function hasListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v27 = v33;
    uint64_t v33 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1) {
        WTF::fastFree(v27, v26);
      }
      else {
        --*(_DWORD *)v27;
      }
    }
    uint64_t v28 = v32;
    unint64_t v32 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }

  if (!a4)
  {
    uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    goto LABEL_31;
  }
  if (!JSValueIsObject(this, *a5) || (uint64_t v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
LABEL_31:
    *a6 = v29;
    JSValueRef v30 = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  uint64_t v17 = *a5;
  uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
  JSValueRef v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    ++**(_DWORD **)buf;
    uint64_t v31 = v20;
    BOOL hasListener = WebKit::WebExtensionAPIWebRequestEvent::hasListener(v12, &v31);
    JSValueRef Undefined = JSValueMakeBoolean(this, hasListener);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    goto LABEL_9;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v30 = JSValueMakeUndefined(this);
LABEL_33:
  JSValueRef Undefined = v30;
LABEL_9:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989AF25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWindows *WebKit::toWebExtensionAPIWindows(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWindows::windowsClass(0);
      if (result)
      {
        JSClassDefinition v6 = WebKit::JSWebExtensionAPIWindows::windowsClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWindows *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWindows::windowsClass(WebKit::JSWebExtensionAPIWindows *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWindows::windowsClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWindows::windowsClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v6.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v6.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 48);
    *(_OWORD *)&v6.staticFunctions = *(_OWORD *)(MEMORY[0x1E4F309C8] + 32);
    *(_OWORD *)&v6.finalize = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v6.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v6.deleteProperty = v4;
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v6.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v6.hasInstance = v5;
    v6.className = "Windows";
    v6.parentClass = 0;
    v6.staticValues = (const JSStaticValue *)&WebKit::JSWebExtensionAPIWindows::staticValues(void)::values;
    v6.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWindows::staticFunctions(void)::functions;
    v6.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v6.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    v6.getPropertyNames = (JSObjectGetPropertyNamesCallback)WebKit::JSWebExtensionAPIWindows::getPropertyNames;
    v6.hasProperty = (JSObjectHasPropertyCallback)WebKit::JSWebExtensionAPIWindows::hasProperty;
    v6.getProperty = (JSObjectGetPropertyCallback)WebKit::JSWebExtensionAPIWindows::getProperty;
    JSClassRef result = JSClassCreate(&v6);
    WebKit::JSWebExtensionAPIWindows::windowsClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

void WebKit::JSWebExtensionAPIWindows::getPropertyNames(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSPropertyNameAccumulator *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    ++*(_DWORD *)(v6 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v9, &v20);
    uint64_t v10 = v20;
    if (v20)
    {
      uint64_t v11 = *((void *)v20 + 3);
      if (v11
        && (uint64_t v12 = *(void *)(v11 + 8)) != 0
        && (uint64_t v13 = *(void *)(v12 + 24)) != 0
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
      {
        uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
        if (v16)
        {
          CFRetain(*(v16 - 1));
          v16 -= 2;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
    else
    {
      uint64_t v16 = 0;
    }
    JSValueRef v20 = "create";
    uint64_t v21 = 7;
    if (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16))
    {
      uint64_t v17 = JSStringCreateWithUTF8CString("create");
      JSPropertyNameAccumulatorAddName(a3, v17);
      if (v17) {
        JSStringRelease(v17);
      }
    }
    JSValueRef v20 = "update";
    uint64_t v21 = 7;
    if (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16))
    {
      uint64_t v18 = JSStringCreateWithUTF8CString("update");
      JSPropertyNameAccumulatorAddName(a3, v18);
      if (v18) {
        JSStringRelease(v18);
      }
    }
    JSValueRef v20 = "remove";
    uint64_t v21 = 7;
    if (WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16))
    {
      unint64_t v19 = JSStringCreateWithUTF8CString("remove");
      JSPropertyNameAccumulatorAddName(a3, v19);
      if (v19) {
        JSStringRelease(v19);
      }
    }
    if (v16) {
      CFRelease(v16[1]);
    }
    if (*(_DWORD *)(v7 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
    }
    else {
      --*(_DWORD *)(v7 + 48);
    }
  }
}

void sub_1989AF688(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(a1);
}

void sub_1989AF718()
{
}

uint64_t WebKit::JSWebExtensionAPIWindows::hasProperty(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4)
{
  uint64_t v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  ++*(_DWORD *)(v6 + 48);
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v9, &v20);
  uint64_t v10 = v20;
  if (v20)
  {
    uint64_t v11 = *((void *)v20 + 3);
    if (v11
      && (uint64_t v12 = *(void *)(v11 + 8)) != 0
      && (uint64_t v13 = *(void *)(v12 + 24)) != 0
      && (uint64_t v14 = *(void *)(v13 + 8)) != 0
      && (uint64_t v15 = *(void **)(*(void *)(v14 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0))
    {
      uint64_t v16 = *(CFTypeRef **)(v15[2] + 8);
      if (v16)
      {
        CFRetain(*(v16 - 1));
        v16 -= 2;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (JSStringIsEqualToUTF8CString(a3, "create"))
  {
    JSValueRef v20 = "create";
    uint64_t v21 = 7;
    uint64_t isPropertyAllowed = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_18;
  }
  if (JSStringIsEqualToUTF8CString(a3, "update"))
  {
    JSValueRef v20 = "update";
    uint64_t v21 = 7;
    uint64_t isPropertyAllowed = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
    goto LABEL_18;
  }
  if (JSStringIsEqualToUTF8CString(a3, "remove"))
  {
    JSValueRef v20 = "remove";
    uint64_t v21 = 7;
    uint64_t isPropertyAllowed = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v7, (const WTF::ASCIILiteral *)&v20, (WebKit::WebPage *)v16);
LABEL_18:
    uint64_t v18 = isPropertyAllowed;
    if (!v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v18 = 0;
  if (v16) {
LABEL_19:
  }
    CFRelease(v16[1]);
LABEL_20:
  if (*(_DWORD *)(v7 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v7 + 40) + 8))(v7 + 40);
  }
  else {
    --*(_DWORD *)(v7 + 48);
  }
  return v18;
}

void sub_1989AF90C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getProperty(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v7 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    ++*(_DWORD *)(v7 + 48);
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v10, &v25);
    uint64_t v11 = v25;
    if (v25)
    {
      uint64_t v12 = *((void *)v25 + 3);
      if (v12
        && (uint64_t v13 = *(void *)(v12 + 8)) != 0
        && (uint64_t v14 = *(void *)(v13 + 24)) != 0
        && (uint64_t v15 = *(void *)(v14 + 8)) != 0
        && (uint64_t v16 = *(void **)(*(void *)(v15 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v16 + 1368))(v16) & 1) == 0))
      {
        uint64_t v17 = *(CFTypeRef **)(v16[2] + 8);
        if (v17)
        {
          CFRetain(*(v17 - 1));
          v17 -= 2;
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      CFRelease(*((CFTypeRef *)v11 + 1));
    }
    else
    {
      uint64_t v17 = 0;
    }
    if (JSStringIsEqualToUTF8CString(a3, "create"))
    {
      uint64_t v25 = "create";
      uint64_t v26 = 7;
      char isPropertyAllowed = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v25, (WebKit::WebPage *)v17);
      unint64_t v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIWindows::create;
      if (isPropertyAllowed) {
        goto LABEL_18;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "update"))
    {
      uint64_t v25 = "update";
      uint64_t v26 = 7;
      char v20 = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v25, (WebKit::WebPage *)v17);
      unint64_t v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIWindows::update;
      if (v20) {
        goto LABEL_18;
      }
    }
    if (JSStringIsEqualToUTF8CString(a3, "remove")
      && (uint64_t v25 = "remove",
          uint64_t v26 = 7,
          int v21 = WebKit::WebExtensionAPIWindows::isPropertyAllowed((WebKit::WebExtensionContextProxy **)v8, (const WTF::ASCIILiteral *)&v25, (WebKit::WebPage *)v17), v19 = (JSValueRef (__cdecl *)(JSContextRef, JSObjectRef, JSObjectRef, size_t, const JSValueRef[], JSValueRef *))WebKit::JSWebExtensionAPIWindows::remove, v21))
    {
LABEL_18:
      JSObjectRef FunctionWithCallback = JSObjectMakeFunctionWithCallback(this, a3, v19);
    }
    else
    {
      JSObjectRef FunctionWithCallback = JSValueMakeUndefined(this);
    }
    JSObjectRef v23 = FunctionWithCallback;
    if (v17) {
      CFRelease(v17[1]);
    }
    if (*(_DWORD *)(v8 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v8 + 40) + 8))(v8 + 40);
    }
    else {
      --*(_DWORD *)(v8 + 48);
    }
    return v23;
  }
  else
  {
    return JSValueMakeUndefined(this);
  }
}

void sub_1989AFBD0(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (*(_DWORD *)(v1 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v1 + 40) + 8))(v1 + 40);
  }
  else {
    --*(_DWORD *)(v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::get(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (++*((_DWORD *)v10 + 12), *((unsigned char *)v10 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v11) {
      return Undefined;
    }
    goto LABEL_69;
  }
  uint64_t v12 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      JSValueRef v57 = "argument";
    }
    else {
      JSValueRef v57 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v71;
    WTF::String::utf8();
    if (v70) {
      __int16 v59 = (char *)v70 + 16;
    }
    else {
      __int16 v59 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v73 = 2082;
    __int16 v74 = v57;
    __int16 v75 = 2082;
    __int16 v76 = v59;
    _os_log_debug_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEBUG, "Called function windows.get() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    JSValueRef v61 = v70;
    v70 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1) {
        WTF::fastFree(v61, v60);
      }
      else {
        --*(_DWORD *)v61;
      }
    }
    JSObjectRef v62 = resolve;
    JSObjectRef resolve = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v60);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)3)
  {
    if (JSValueIsNumber(this, *a5))
    {
      JSValueRef v22 = a5[1];
      if (v22)
      {
        JSObjectRef v23 = (void *)MEMORY[0x1E4F30938];
        uint64_t v24 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
        uint64_t v25 = [v23 valueWithJSValueRef:v22 inContext:v24];

        uint64_t v26 = (void *)v25;
      }
      else
      {
        uint64_t v26 = 0;
      }
      char v29 = [v26 _isDictionary];

      if ((v29 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
      {
        if (JSValueIsObject(this, a5[2]) && (JSValueRef v30 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v30))
          || JSValueIsNull(this, a5[2])
          || JSValueIsUndefined(this, a5[2]))
        {
          double v28 = JSValueToNumber(this, *a5, 0);
          uint64_t v31 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          unint64_t v32 = a5[2];
          uint64_t v33 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v32, v33, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          uint64_t v27 = v31;
          if ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (!*(void *)buf)
            {
LABEL_46:
              JSObjectRef reject = 0;
              JSObjectRef resolve = 0;
              JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
              __int16 v71 = resolve;
              *(void *)long long buf = this;
              v70 = reject;
              WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v71, &v70, &v67);
              uint64_t v18 = v67;
LABEL_47:
              GlobalContext = JSContextGetGlobalContext(this);
              WebKit::WebFrame::frameForContext(GlobalContext, v42, buf);
              uint64_t v43 = *(void *)buf;
              if (*(void *)buf)
              {
                uint64_t v44 = *(void *)(*(void *)buf + 24);
                if (v44)
                {
                  uint64_t v45 = *(void *)(v44 + 8);
                  if (v45)
                  {
                    uint64_t v46 = *(void *)(v45 + 24);
                    if (v46)
                    {
                      uint64_t v47 = *(void *)(v46 + 8);
                      if (v47)
                      {
                        __int16 v48 = *(void **)(*(void *)(v47 + 48) + 16);
                        if (((*(uint64_t (**)(void *))(*v48 + 1368))(v48) & 1) == 0)
                        {
                          uint64_t v49 = *(void *)(v48[2] + 8);
                          if (v49)
                          {
                            CFRetain(*(CFTypeRef *)(v49 - 8));
                            CFRelease(*(CFTypeRef *)(v43 + 8));
                            *(void *)long long buf = v18;
                            id v66 = 0;
                            WebKit::WebExtensionAPIWindows::get(v11, v49 - 16, v31, (uint64_t *)buf, &v66, v28);
                            uint64_t v51 = (NSString *)v66;
                            uint64_t v52 = *(WebKit::WebExtensionCallbackHandler **)buf;
                            *(void *)long long buf = 0;
                            if (v52) {
                              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v52);
                            }
                            if (v51)
                            {
                              *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.get()", 0, v51, v50);
                            }
                            else if (Undefined)
                            {
LABEL_59:

                              CFRelease(*(CFTypeRef *)(v49 - 8));
                              id v53 = v31;
LABEL_68:

                              goto LABEL_69;
                            }
                            JSValueRef Undefined = JSValueMakeUndefined(this);
                            goto LABEL_59;
                          }
                        }
                      }
                    }
                  }
                }
                CFRelease(*(CFTypeRef *)(v43 + 8));
              }
              uint64_t v54 = qword_1EB357DF8;
              if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl(&dword_1985F2000, v54, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
                if (Undefined)
                {
LABEL_63:
                  JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"windows.get()", 0, &cfstr_AnUnknownError.isa, v55);
                  if (Undefined) {
                    goto LABEL_65;
                  }
                }
              }
              else if (Undefined)
              {
                goto LABEL_63;
              }
              JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_65:
              uint64_t v27 = v31;
              if (!v18)
              {
LABEL_67:
                id v53 = v27;
                goto LABEL_68;
              }
LABEL_66:
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v18);
              goto LABEL_67;
            }
LABEL_28:
            JSValueRef Undefined = 0;
            goto LABEL_47;
          }
          goto LABEL_80;
        }
        uint64_t v63 = @"a function is expected";
        unint64_t v64 = @"callback";
      }
      else
      {
        uint64_t v63 = @"an object is expected";
        unint64_t v64 = @"properties";
      }
    }
    else
    {
      uint64_t v63 = @"a number is expected";
      unint64_t v64 = @"windowID";
    }
    id v53 = 0;
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.get()", &v64->isa, &v63->isa, v21);
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_68;
  }
  if (a4)
  {
    unint64_t v14 = (unint64_t)a4 - 1;
    if ((uint64_t)a4 - 1 < 0)
    {
      uint64_t v27 = 0;
      uint64_t v18 = 0;
      double v28 = NAN;
    }
    else
    {
      if (a4 == (OpaqueJSValue *)1)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        unint64_t v20 = 0;
      }
      else
      {
        uint64_t v15 = a5[v14];
        if (v15
          && (JSValueIsObject(this, a5[v14]) && (uint64_t v16 = JSValueToObject(this, v15, 0), JSObjectIsFunction(this, v16))
           || JSValueIsNull(this, v15)
           || JSValueIsUndefined(this, v15)))
        {
          uint64_t v17 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
          WebKit::toJSCallbackHandler((uint64_t)this, v15, v17, buf);
          uint64_t v18 = *(WebKit::WebExtensionCallbackHandler **)buf;
          unint64_t v19 = (unint64_t)a4 - 2;
          unint64_t v20 = 1;
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v20 = 0;
          unint64_t v19 = (unint64_t)a4 - 1;
        }
      }
      if (v20 >= v14) {
        goto LABEL_38;
      }
      uint64_t v35 = a5[v19];
      if (!v35) {
        goto LABEL_38;
      }
      __int16 v36 = (void *)MEMORY[0x1E4F30938];
      uint64_t v37 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      __int16 v38 = [v36 valueWithJSValueRef:v35 inContext:v37];

      LOBYTE(v37) = [v38 _isDictionary];
      if ((v37 & 1) != 0 || JSValueIsNull(this, v35) || JSValueIsUndefined(this, v35))
      {
        uint64_t v39 = WebKit::toNSDictionary(this, v35, 0, 0);
        if (!v19)
        {
          uint64_t v27 = (void *)v39;
          goto LABEL_80;
        }
        --v19;
        uint64_t v27 = (void *)v39;
      }
      else
      {
LABEL_38:
        uint64_t v27 = 0;
      }
      uint64_t v40 = a5[v19];
      if (v40)
      {
        if (!JSValueIsNumber(this, v40)) {
          goto LABEL_80;
        }
        double v28 = JSValueToNumber(this, v40, 0);
        unint64_t v14 = v19 - 1;
      }
      else
      {
        double v28 = NAN;
        unint64_t v14 = v19;
      }
    }
    if ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if ((v14 & 0x8000000000000000) != 0)
      {
        uint64_t v31 = v27;
        if (!v18) {
          goto LABEL_46;
        }
        goto LABEL_28;
      }
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.get()", 0, &cfstr_AnUnknownArgum.isa, v13);
      JSValueRef v58 = JSValueMakeUndefined(this);
LABEL_81:
      JSValueRef Undefined = v58;
      if (!v18) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
LABEL_80:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.get()", &cfstr_Windowid_0.isa, &cfstr_ANumberIsExpec.isa, v13);
    JSValueRef v58 = JSValueMakeUndefined(this);
    goto LABEL_81;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.get()", 0, &cfstr_ARequiredArgum.isa, v13);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_69:
  if (*(_DWORD *)(v11 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v11 + 40) + 8))(v11 + 40);
  }
  else {
    --*(_DWORD *)(v11 + 48);
  }
  return Undefined;
}

void sub_1989B0620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (*(_DWORD *)(v17 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v17 + 40) + 8))(v17 + 40);
  }
  else {
    --*(_DWORD *)(v17 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getCurrent(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_62;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v36 = "argument";
    }
    else {
      __int16 v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v64;
    WTF::String::utf8();
    if (v63) {
      id v53 = (char *)v63 + 16;
    }
    else {
      id v53 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v66 = 2082;
    id v67 = v36;
    __int16 v68 = 2082;
    id v69 = v53;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windows.getCurrent() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    __int16 v55 = v63;
    uint64_t v63 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 1) {
        WTF::fastFree(v55, v54);
      }
      else {
        --*(_DWORD *)v55;
      }
    }
    __int16 v56 = resolve;
    JSObjectRef resolve = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v54);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (unint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (unint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        JSValueRef v22 = *a5;
        JSObjectRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_82;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      unint64_t v32 = (void *)MEMORY[0x1E4F30938];
      uint64_t v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      uint64_t v35 = (void *)v34;
    }
    else
    {
      uint64_t v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
      goto LABEL_40;
    }
LABEL_83:
    JSValueRef v57 = @"an object is expected";
    JSValueRef v58 = @"info";
    goto LABEL_84;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    uint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_83;
  }
  if (!JSValueIsObject(this, a5[1]) || (uint64_t v26 = JSValueToObject(this, a5[1], 0), !JSObjectIsFunction(this, v26)))
  {
    if (!JSValueIsNull(this, a5[1]) && !JSValueIsUndefined(this, a5[1]))
    {
LABEL_82:
      JSValueRef v57 = @"a function is expected";
      JSValueRef v58 = @"callback";
LABEL_84:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.getCurrent()", &v58->isa, &v57->isa, v21);
      JSValueRef Undefined = JSValueMakeUndefined(this);
      uint64_t v24 = 0;
      goto LABEL_61;
    }
  }
  uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
  uint64_t v27 = a5[1];
  double v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
  char v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    JSValueRef Undefined = 0;
    goto LABEL_41;
  }
LABEL_40:
  JSObjectRef reject = 0;
  JSObjectRef resolve = 0;
  JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
  unint64_t v64 = resolve;
  *(void *)long long buf = this;
  uint64_t v63 = reject;
  WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v64, &v63, &v60);
  char v29 = v60;
LABEL_41:
  GlobalContext = JSContextGetGlobalContext(this);
  WebKit::WebFrame::frameForContext(GlobalContext, v39, buf);
  uint64_t v40 = *(void *)buf;
  if (!*(void *)buf) {
    goto LABEL_55;
  }
  uint64_t v41 = *(void *)(*(void *)buf + 24);
  if (!v41
    || (uint64_t v42 = *(void *)(v41 + 8)) == 0
    || (uint64_t v43 = *(void *)(v42 + 24)) == 0
    || (uint64_t v44 = *(void *)(v43 + 8)) == 0
    || (uint64_t v45 = *(void **)(*(void *)(v44 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v45 + 1368))(v45) & 1) != 0)
    || (uint64_t v46 = *(void *)(v45[2] + 8)) == 0)
  {
    CFRelease(*(CFTypeRef *)(v40 + 8));
LABEL_55:
    uint64_t v50 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v50, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
      if (Undefined)
      {
LABEL_57:
        JSValueRef Undefined = WebKit::toJSRejectedPromise(this, (const OpaqueJSContext *)@"windows.getCurrent()", 0, &cfstr_AnUnknownError.isa, v51);
        if (Undefined) {
          goto LABEL_59;
        }
      }
    }
    else if (Undefined)
    {
      goto LABEL_57;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_59:
    if (v29) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
    }
    goto LABEL_61;
  }
  CFRetain(*(CFTypeRef *)(v46 - 8));
  CFRelease(*(CFTypeRef *)(v40 + 8));
  *(void *)long long buf = v29;
  id v59 = 0;
  WebKit::WebExtensionAPIWindows::getCurrent(v12, v46 - 16, v24, (uint64_t *)buf, &v59);
  __int16 v48 = (NSString *)v59;
  uint64_t v49 = *(WebKit::WebExtensionCallbackHandler **)buf;
  *(void *)long long buf = 0;
  if (v49) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v49);
  }
  if (v48)
  {
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.getCurrent()", 0, v48, v47);
    goto LABEL_52;
  }
  if (!Undefined) {
LABEL_52:
  }
    JSValueRef Undefined = JSValueMakeUndefined(this);

  CFRelease(*(CFTypeRef *)(v46 - 8));
LABEL_61:

LABEL_62:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B0F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getLastFocused(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v36 = "argument";
    }
    else {
      __int16 v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v53;
    WTF::String::utf8();
    if (v52) {
      uint64_t v42 = (char *)v52 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v55 = 2082;
    __int16 v56 = v36;
    __int16 v57 = 2082;
    JSValueRef v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windows.getLastFocused() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    uint64_t v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    uint64_t v45 = resolve;
    JSObjectRef resolve = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (unint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (unint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        JSValueRef v22 = *a5;
        JSObjectRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      unint64_t v32 = (void *)MEMORY[0x1E4F30938];
      uint64_t v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      uint64_t v35 = (void *)v34;
    }
    else
    {
      uint64_t v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
      goto LABEL_40;
    }
LABEL_66:
    uint64_t v46 = @"an object is expected";
    uint64_t v47 = @"info";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    uint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v27 = a5[1];
    double v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    char v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_41;
    }
LABEL_40:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    id v53 = resolve;
    *(void *)long long buf = this;
    uint64_t v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    char v29 = v49;
LABEL_41:
    *(void *)long long buf = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIWindows::getLastFocused(v12, v24, (uint64_t *)buf, &v48);
    uint64_t v39 = (NSString *)v48;
    uint64_t v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)long long buf = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.getLastFocused()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  uint64_t v46 = @"a function is expected";
  uint64_t v47 = @"callback";
LABEL_67:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.getLastFocused()", &v47->isa, &v46->isa, v21);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B168C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::getAll(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v36 = "argument";
    }
    else {
      __int16 v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v53;
    WTF::String::utf8();
    if (v52) {
      uint64_t v42 = (char *)v52 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v55 = 2082;
    __int16 v56 = v36;
    __int16 v57 = 2082;
    JSValueRef v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windows.getAll() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    uint64_t v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    uint64_t v45 = resolve;
    JSObjectRef resolve = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (unint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (unint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        JSValueRef v22 = *a5;
        JSObjectRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      unint64_t v32 = (void *)MEMORY[0x1E4F30938];
      uint64_t v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      uint64_t v35 = (void *)v34;
    }
    else
    {
      uint64_t v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
      goto LABEL_40;
    }
LABEL_66:
    uint64_t v46 = @"an object is expected";
    uint64_t v47 = @"info";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    uint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v27 = a5[1];
    double v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    char v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_41;
    }
LABEL_40:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    id v53 = resolve;
    *(void *)long long buf = this;
    uint64_t v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    char v29 = v49;
LABEL_41:
    *(void *)long long buf = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIWindows::getAll(v12, v24, (uint64_t *)buf, &v48);
    uint64_t v39 = (NSString *)v48;
    uint64_t v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)long long buf = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.getAll()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  uint64_t v46 = @"a function is expected";
  uint64_t v47 = @"callback";
LABEL_67:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.getAll()", &v47->isa, &v46->isa, v21);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B1DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::windowIdentifierNone(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v13) {
        uint64_t v11 = (char *)v13 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v16 = v11;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter windows.WINDOW_ID_NONE in %{public}s world", buf, 0xCu);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }

    JSValueRef Undefined = JSValueMakeNumber(this, -1.0);
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989B2124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::windowIdentifierCurrent(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v13) {
        uint64_t v11 = (char *)v13 + 16;
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v16 = v11;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter windows.WINDOW_ID_CURRENT in %{public}s world", buf, 0xCu);
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }

    JSValueRef Undefined = JSValueMakeNumber(this, -2.0);
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989B23F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::onCreated(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter windows.onCreated in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWindows::onCreated(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989B26C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::onRemoved(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter windows.onRemoved in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWindows::onRemoved(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989B2998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::onFocusChanged(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSString *a4, const OpaqueJSValue **a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WebKit::toWebExtensionAPIWindows(this, a2, a3);
  uint64_t v7 = v6;
  if (!v6 || (++*((_DWORD *)v6 + 12), *((unsigned char *)v6 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v7) {
      return Undefined;
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1EB357DF8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::String::utf8();
      if (v14) {
        uint64_t v12 = (char *)v14 + 16;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v12;
      _os_log_debug_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEBUG, "Called getter windows.onFocusChanged in %{public}s world", buf, 0xCu);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1) {
          WTF::fastFree(v14, v13);
        }
        else {
          --*(_DWORD *)v14;
        }
      }
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }

    uint64_t v9 = WebKit::WebExtensionAPIWindows::onFocusChanged(v7);
    JSValueRef Undefined = WebKit::JSWebExtensionWrapper::wrap(this, (void *)(v9 + 40));
  }
  if (*((_DWORD *)v7 + 12) == 1) {
    (*(void (**)(uint64_t))(*((void *)v7 + 5) + 8))((uint64_t)v7 + 40);
  }
  else {
    --*((_DWORD *)v7 + 12);
  }
  return Undefined;
}

void sub_1989B2C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
    }
    else {
      --*(_DWORD *)(v10 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::create(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  uint64_t v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(unsigned char *)(v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_47;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      __int16 v36 = "argument";
    }
    else {
      __int16 v36 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v53;
    WTF::String::utf8();
    if (v52) {
      uint64_t v42 = (char *)v52 + 16;
    }
    else {
      uint64_t v42 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v55 = 2082;
    __int16 v56 = v36;
    __int16 v57 = 2082;
    JSValueRef v58 = v42;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windows.create() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v44 = v52;
    uint64_t v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1) {
        WTF::fastFree(v44, v43);
      }
      else {
        --*(_DWORD *)v44;
      }
    }
    uint64_t v45 = resolve;
    JSObjectRef resolve = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5) && (unint64_t v19 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v19))
      || JSValueIsNull(this, *a5)
      || JSValueIsUndefined(this, *a5))
    {
      if (JSValueIsObject(this, *a5) && (unint64_t v20 = JSValueToObject(this, *a5, 0), JSObjectIsFunction(this, v20))
        || JSValueIsNull(this, *a5)
        || JSValueIsUndefined(this, *a5))
      {
        JSValueRef v22 = *a5;
        JSObjectRef v23 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v22, v23, buf);
        uint64_t v24 = 0;
        goto LABEL_27;
      }
      goto LABEL_65;
    }
    JSValueRef v31 = *a5;
    if (*a5)
    {
      unint64_t v32 = (void *)MEMORY[0x1E4F30938];
      uint64_t v33 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
      uint64_t v34 = [v32 valueWithJSValueRef:v31 inContext:v33];

      uint64_t v35 = (void *)v34;
    }
    else
    {
      uint64_t v35 = 0;
    }
    char v37 = [v35 _isDictionary];

    if ((v37 & 1) != 0 || JSValueIsNull(this, *a5) || JSValueIsUndefined(this, *a5))
    {
      uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
      goto LABEL_40;
    }
LABEL_66:
    uint64_t v46 = @"an object is expected";
    uint64_t v47 = @"info";
    goto LABEL_67;
  }
  if (a4 != (OpaqueJSValue *)2)
  {
    uint64_t v24 = 0;
    goto LABEL_40;
  }
  JSValueRef v14 = *a5;
  if (*a5)
  {
    uint64_t v15 = (void *)MEMORY[0x1E4F30938];
    uint64_t v16 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
    uint64_t v17 = [v15 valueWithJSValueRef:v14 inContext:v16];

    uint64_t v18 = (void *)v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  char v25 = [v18 _isDictionary];

  if ((v25 & 1) == 0 && !JSValueIsNull(this, *a5) && !JSValueIsUndefined(this, *a5)) {
    goto LABEL_66;
  }
  if (JSValueIsObject(this, a5[1]) && (uint64_t v26 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v26))
    || JSValueIsNull(this, a5[1])
    || JSValueIsUndefined(this, a5[1]))
  {
    uint64_t v24 = WebKit::toNSDictionary(this, *a5, 0, 0);
    uint64_t v27 = a5[1];
    double v28 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    WebKit::toJSCallbackHandler((uint64_t)this, v27, v28, buf);
LABEL_27:
    char v29 = *(WebKit::WebExtensionCallbackHandler **)buf;
    if (*(void *)buf)
    {
      JSValueRef Undefined = 0;
      goto LABEL_41;
    }
LABEL_40:
    JSObjectRef reject = 0;
    JSObjectRef resolve = 0;
    JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
    id v53 = resolve;
    *(void *)long long buf = this;
    uint64_t v52 = reject;
    WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v53, &v52, &v49);
    char v29 = v49;
LABEL_41:
    *(void *)long long buf = v29;
    id v48 = 0;
    WebKit::WebExtensionAPIWindows::createWindow(v12, v24, (uint64_t *)buf, &v48);
    uint64_t v39 = (NSString *)v48;
    uint64_t v40 = *(WebKit::WebExtensionCallbackHandler **)buf;
    *(void *)long long buf = 0;
    if (v40) {
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v40);
    }
    if (v39)
    {
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.create()", 0, v39, v38);
    }
    else if (Undefined)
    {
LABEL_46:

      goto LABEL_47;
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_46;
  }
LABEL_65:
  uint64_t v46 = @"a function is expected";
  uint64_t v47 = @"callback";
LABEL_67:
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.create()", &v47->isa, &v46->isa, v21);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_47:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B3368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
    }
    else {
      --*(_DWORD *)(v15 + 48);
    }
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::update(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  uint64_t v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(unsigned char *)(v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_39;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v40 = "argument";
    }
    else {
      uint64_t v40 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v52;
    WTF::String::utf8();
    if (v51) {
      uint64_t v41 = (char *)v51 + 16;
    }
    else {
      uint64_t v41 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v54 = 2082;
    __int16 v55 = v40;
    __int16 v56 = 2082;
    __int16 v57 = v41;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windows.update() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v43 = v51;
    uint64_t v51 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1) {
        WTF::fastFree(v43, v42);
      }
      else {
        --*(_DWORD *)v43;
      }
    }
    uint64_t v44 = resolve;
    JSObjectRef resolve = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v42);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
  }

  if ((unint64_t)a4 > 1)
  {
    if (a4 == (OpaqueJSValue *)2)
    {
      if (JSValueIsNumber(this, *a5))
      {
        JSValueRef v21 = a5[1];
        if (v21)
        {
          JSValueRef v22 = (void *)MEMORY[0x1E4F30938];
          JSObjectRef v23 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          uint64_t v24 = [v22 valueWithJSValueRef:v21 inContext:v23];

          char v25 = (void *)v24;
        }
        else
        {
          char v25 = 0;
        }
        char v35 = [v25 _isDictionary];

        if (v35)
        {
          double v32 = JSValueToNumber(this, *a5, 0);
          uint64_t v26 = WebKit::toNSDictionary(this, a5[1], 0, 0);
          uint64_t v27 = 0;
LABEL_27:
          if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (v26)
            {
              if (v27)
              {
                JSValueRef Undefined = 0;
              }
              else
              {
                JSObjectRef reject = 0;
                JSObjectRef resolve = 0;
                JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
                uint64_t v52 = resolve;
                *(void *)long long buf = this;
                uint64_t v51 = reject;
                WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v52, &v51, &v48);
                uint64_t v27 = v48;
              }
              *(void *)long long buf = v27;
              id v47 = 0;
              WebKit::WebExtensionAPIWindows::update(v12, v26, (uint64_t *)buf, &v47, v32);
              char v37 = (NSString *)v47;
              __int16 v38 = *(WebKit::WebExtensionCallbackHandler **)buf;
              *(void *)long long buf = 0;
              if (v38) {
                WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v38);
              }
              if (v37)
              {
                *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.update()", 0, v37, v36);
              }
              else if (Undefined)
              {
LABEL_37:

LABEL_38:
                goto LABEL_39;
              }
              JSValueRef Undefined = JSValueMakeUndefined(this);
              goto LABEL_37;
            }
            uint64_t v26 = 0;
            *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.update()", &cfstr_Properties.isa, &cfstr_AnObjectIsExpe.isa, v14);
            JSValueRef v28 = JSValueMakeUndefined(this);
LABEL_15:
            JSValueRef Undefined = v28;
            if (v27) {
              WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v27);
            }
            goto LABEL_38;
          }
LABEL_14:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.update()", &cfstr_Windowid_0.isa, &cfstr_ANumberIsExpec.isa, v14);
          JSValueRef v28 = JSValueMakeUndefined(this);
          goto LABEL_15;
        }
        goto LABEL_61;
      }
    }
    else
    {
      if (a4 != (OpaqueJSValue *)3)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        goto LABEL_14;
      }
      if (JSValueIsNumber(this, *a5))
      {
        JSValueRef v16 = a5[1];
        if (v16)
        {
          uint64_t v17 = (void *)MEMORY[0x1E4F30938];
          uint64_t v18 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          uint64_t v19 = [v17 valueWithJSValueRef:v16 inContext:v18];

          unint64_t v20 = (void *)v19;
        }
        else
        {
          unint64_t v20 = 0;
        }
        int v30 = [v20 _isDictionary];

        if (v30)
        {
          if (JSValueIsObject(this, a5[2]) && (JSValueRef v31 = JSValueToObject(this, a5[2], 0), JSObjectIsFunction(this, v31))
            || JSValueIsNull(this, a5[2])
            || JSValueIsUndefined(this, a5[2]))
          {
            double v32 = JSValueToNumber(this, *a5, 0);
            uint64_t v26 = WebKit::toNSDictionary(this, a5[1], 0, 0);
            uint64_t v33 = a5[2];
            uint64_t v34 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
            WebKit::toJSCallbackHandler((uint64_t)this, v33, v34, buf);
            uint64_t v27 = *(WebKit::WebExtensionCallbackHandler **)buf;
            goto LABEL_27;
          }
          uint64_t v45 = @"a function is expected";
          uint64_t v46 = @"callback";
LABEL_62:
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.update()", &v46->isa, &v45->isa, v15);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          uint64_t v26 = 0;
          goto LABEL_38;
        }
LABEL_61:
        uint64_t v45 = @"an object is expected";
        uint64_t v46 = @"properties";
        goto LABEL_62;
      }
    }
    uint64_t v45 = @"a number is expected";
    uint64_t v46 = @"windowID";
    goto LABEL_62;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.update()", 0, &cfstr_ARequiredArgum.isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_39:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B3ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindows::remove(WebKit::JSWebExtensionAPIWindows *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindows(this, a3, a3);
  uint64_t v12 = v11;
  if (!v11 || (++*(_DWORD *)(v11 + 48), *(unsigned char *)(v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_26;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v27 = "argument";
    }
    else {
      uint64_t v27 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSObjectRef resolve = v40;
    WTF::String::utf8();
    if (v39) {
      JSValueRef v28 = (char *)v39 + 16;
    }
    else {
      JSValueRef v28 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v42 = 2082;
    uint64_t v43 = v27;
    __int16 v44 = 2082;
    uint64_t v45 = v28;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windows.remove() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    int v30 = v39;
    uint64_t v39 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1) {
        WTF::fastFree(v30, v29);
      }
      else {
        --*(_DWORD *)v30;
      }
    }
    JSValueRef v31 = resolve;
    JSObjectRef resolve = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsNumber(this, *a5))
    {
      double v17 = JSValueToNumber(this, *a5, 0);
      JSValueRef v16 = 0;
      goto LABEL_16;
    }
    goto LABEL_50;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsNumber(this, *a5))
    {
      if (JSValueIsObject(this, a5[1]) && (uint64_t v19 = JSValueToObject(this, a5[1], 0), JSObjectIsFunction(this, v19))
        || JSValueIsNull(this, a5[1])
        || JSValueIsUndefined(this, a5[1]))
      {
        double v17 = JSValueToNumber(this, *a5, 0);
        unint64_t v20 = a5[1];
        JSValueRef v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        JSValueRef v16 = *(WebKit::WebExtensionCallbackHandler **)buf;
LABEL_16:
        if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.remove()", &cfstr_Windowid_0.isa, &cfstr_ANumberIsExpec.isa, v15);
          JSValueRef Undefined = JSValueMakeUndefined(this);
          if (v16) {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
          }
          goto LABEL_26;
        }
        if (v16)
        {
          JSValueRef Undefined = 0;
        }
        else
        {
          JSObjectRef reject = 0;
          JSObjectRef resolve = 0;
          JSValueRef Undefined = JSObjectMakeDeferredPromise(this, &resolve, &reject, 0);
          uint64_t v40 = resolve;
          *(void *)long long buf = this;
          uint64_t v39 = reject;
          WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,OpaqueJSValue *&>((JSContextRef *)buf, &v40, &v39, &v36);
          JSValueRef v16 = v36;
        }
        *(void *)long long buf = v16;
        id v35 = 0;
        WebKit::WebExtensionAPIWindows::remove(v12, (uint64_t *)buf, &v35, v14, v17);
        uint64_t v24 = (NSString *)v35;
        char v25 = *(WebKit::WebExtensionCallbackHandler **)buf;
        *(void *)long long buf = 0;
        if (v25) {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v25);
        }
        if (v24)
        {
          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.remove()", 0, v24, v23);
        }
        else if (Undefined)
        {
LABEL_25:

          goto LABEL_26;
        }
        JSValueRef Undefined = JSValueMakeUndefined(this);
        goto LABEL_25;
      }
      uint64_t v33 = @"a function is expected";
      uint64_t v34 = @"callback";
LABEL_51:
      *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.remove()", &v34->isa, &v33->isa, v18);
      JSValueRef v32 = JSValueMakeUndefined(this);
      goto LABEL_52;
    }
LABEL_50:
    uint64_t v33 = @"a number is expected";
    uint64_t v34 = @"windowID";
    goto LABEL_51;
  }
  if (a4)
  {
    JSValueRef v16 = 0;
    double v17 = NAN;
    goto LABEL_16;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windows.remove()", 0, &cfstr_ARequiredArgum.isa, v15);
  JSValueRef v32 = JSValueMakeUndefined(this);
LABEL_52:
  JSValueRef Undefined = v32;
LABEL_26:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B40EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v16) {
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
  }
  if (*(_DWORD *)(v15 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 8))(v15 + 40);
  }
  else {
    --*(_DWORD *)(v15 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::JSWebExtensionAPIWindowsEvent *WebKit::toWebExtensionAPIWindowsEvent(WebKit *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  JSClassRef result = 0;
  if (this)
  {
    if (a2)
    {
      JSClassRef result = WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(0);
      if (result)
      {
        uint64_t v6 = WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(result);
        if (JSValueIsObjectOfClass(this, a2, v6))
        {
          uint64_t v7 = JSValueToObject(this, a2, 0);
          Private = (char *)JSObjectGetPrivate(v7);
          if (Private) {
            return (WebKit::JSWebExtensionAPIWindowsEvent *)(Private - 40);
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

JSClassRef WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(WebKit::JSWebExtensionAPIWindowsEvent *this)
{
  JSClassRef result = (JSClassRef)WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(void)::jsClass;
  if (!WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(void)::jsClass)
  {
    long long v2 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 16);
    *(_OWORD *)&v5.version = *MEMORY[0x1E4F309C8];
    *(_OWORD *)&v5.parentClass = v2;
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 80);
    *(_OWORD *)&v5.getProperty = *(_OWORD *)(MEMORY[0x1E4F309C8] + 64);
    *(_OWORD *)&v5.deleteProperty = v3;
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F309C8] + 112);
    *(_OWORD *)&v5.callAsFunction = *(_OWORD *)(MEMORY[0x1E4F309C8] + 96);
    *(_OWORD *)&v5.hasInstance = v4;
    v5.hasProperty = *(JSObjectHasPropertyCallback *)(MEMORY[0x1E4F309C8] + 56);
    *(_OWORD *)&v5.parentClass = 0uLL;
    v5.className = "WindowsEvent";
    v5.staticFunctions = (const JSStaticFunction *)&WebKit::JSWebExtensionAPIWindowsEvent::staticFunctions(void)::functions;
    v5.initialize = (JSObjectInitializeCallback)WebKit::JSWebExtensionWrapper::initialize;
    v5.finalize = (JSObjectFinalizeCallback)WebKit::JSWebExtensionWrapper::finalize;
    JSClassRef result = JSClassCreate(&v5);
    WebKit::JSWebExtensionAPIWindowsEvent::windowsEventClass(void)::jsClass = (uint64_t)result;
  }
  return result;
}

JSValueRef WebKit::JSWebExtensionAPIWindowsEvent::addListener(WebKit::JSWebExtensionAPIWindowsEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindowsEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_40;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v46 = "argument";
    }
    else {
      uint64_t v46 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v55 = v57;
    WTF::String::utf8();
    if (v56) {
      id v47 = (char *)v56 + 16;
    }
    else {
      id v47 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v59 = 2082;
    v60 = v46;
    __int16 v61 = 2082;
    JSObjectRef v62 = v47;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windowsEvent.addListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v49 = v56;
    __int16 v56 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1) {
        WTF::fastFree(v49, v48);
      }
      else {
        --*(_DWORD *)v49;
      }
    }
    uint64_t v50 = v55;
    __int16 v55 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v48);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
  }

  if (a4 == (OpaqueJSValue *)1)
  {
    if (JSValueIsObject(this, *a5))
    {
      uint64_t v19 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v19))
      {
        unint64_t v20 = *a5;
        JSValueRef v21 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
        WebKit::toJSCallbackHandler((uint64_t)this, v20, v21, buf);
        uint64_t v15 = 0;
        JSValueRef v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
        goto LABEL_22;
      }
    }
    goto LABEL_60;
  }
  if (a4 == (OpaqueJSValue *)2)
  {
    if (JSValueIsObject(this, *a5))
    {
      JSObjectRef v23 = JSValueToObject(this, *a5, 0);
      if (JSObjectIsFunction(this, v23))
      {
        JSValueRef v24 = a5[1];
        if (v24)
        {
          char v25 = (void *)MEMORY[0x1E4F30938];
          uint64_t v26 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(this)];
          uint64_t v27 = [v25 valueWithJSValueRef:v24 inContext:v26];

          JSValueRef v28 = (void *)v27;
        }
        else
        {
          JSValueRef v28 = 0;
        }
        char v29 = [v28 _isDictionary];

        if ((v29 & 1) != 0 || JSValueIsNull(this, a5[1]) || JSValueIsUndefined(this, a5[1]))
        {
          int v30 = *a5;
          JSValueRef v31 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
          WebKit::toJSCallbackHandler((uint64_t)this, v30, v31, buf);
          JSValueRef v22 = *(WebKit::WebExtensionCallbackHandler **)buf;
          uint64_t v15 = WebKit::toNSDictionary(this, a5[1], 0, 0);
LABEL_22:
          if (!v22) {
            goto LABEL_8;
          }
          GlobalContext = JSContextGetGlobalContext(this);
          WebKit::WebFrame::frameForContext(GlobalContext, v33, buf);
          uint64_t v34 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v35 = *(void *)(*(void *)buf + 24);
            if (v35)
            {
              uint64_t v36 = *(void *)(v35 + 8);
              if (v36)
              {
                uint64_t v37 = *(void *)(v36 + 24);
                if (v37)
                {
                  uint64_t v38 = *(void *)(v37 + 8);
                  if (v38)
                  {
                    uint64_t v39 = *(void **)(*(void *)(v38 + 48) + 16);
                    if (((*(uint64_t (**)(void *))(*v39 + 1368))(v39) & 1) == 0)
                    {
                      uint64_t v40 = *(void *)(v39[2] + 8);
                      if (v40)
                      {
                        CFRetain(*(CFTypeRef *)(v40 - 8));
                        CFRelease(*(CFTypeRef *)(v34 + 8));
                        ++*(_DWORD *)v22;
                        id v53 = 0;
                        __int16 v54 = v22;
                        WebKit::WebExtensionAPIWindowsEvent::addListener(v12, v40 - 16, &v54, v15, &v53);
                        __int16 v42 = (NSString *)v53;
                        uint64_t v43 = v54;
                        __int16 v54 = 0;
                        if (v43) {
                          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v43);
                        }
                        if (v42) {
                          *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.addListener()", 0, v42, v41);
                        }
                        JSValueRef Undefined = JSValueMakeUndefined(this);

                        CFRelease(*(CFTypeRef *)(v40 - 8));
LABEL_39:

                        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v22);
                        goto LABEL_40;
                      }
                    }
                  }
                }
              }
            }
            CFRelease(*(CFTypeRef *)(v34 + 8));
          }
          __int16 v44 = qword_1EB357DF8;
          if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_1985F2000, v44, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
          }
          JSValueRef Undefined = JSValueMakeUndefined(this);
          goto LABEL_39;
        }
        uint64_t v51 = @"an object is expected";
        uint64_t v52 = @"filter";
LABEL_61:
        uint64_t v15 = 0;
        *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.addListener()", &v52->isa, &v51->isa, v18);
        JSValueRef v16 = JSValueMakeUndefined(this);
        goto LABEL_9;
      }
    }
LABEL_60:
    uint64_t v51 = @"a function is expected";
    uint64_t v52 = @"listener";
    goto LABEL_61;
  }
  if (a4)
  {
    uint64_t v15 = 0;
LABEL_8:
    *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.addListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v14);
    JSValueRef v16 = JSValueMakeUndefined(this);
LABEL_9:
    JSValueRef Undefined = v16;

    goto LABEL_40;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.addListener()", 0, &cfstr_ARequiredArgum.isa, v14);
  JSValueRef Undefined = JSValueMakeUndefined(this);
LABEL_40:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B4960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindowsEvent::removeListener(WebKit::JSWebExtensionAPIWindowsEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindowsEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_23;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v34 = "argument";
    }
    else {
      uint64_t v34 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    __int16 v42 = v44;
    WTF::String::utf8();
    if (v43) {
      uint64_t v35 = (char *)v43 + 16;
    }
    else {
      uint64_t v35 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v46 = 2082;
    id v47 = v34;
    __int16 v48 = 2082;
    uint64_t v49 = v35;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windowsEvent.removeListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v37 = v43;
    uint64_t v43 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1) {
        WTF::fastFree(v37, v36);
      }
      else {
        --*(_DWORD *)v37;
      }
    }
    uint64_t v38 = v42;
    __int16 v42 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v36);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }

  if (!a4)
  {
    uint64_t v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.removeListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    goto LABEL_45;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    uint64_t v39 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
LABEL_45:
    *a6 = v39;
    JSValueRef v40 = JSValueMakeUndefined(this);
    goto LABEL_47;
  }
  double v17 = *a5;
  uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, &v44);
  unint64_t v20 = v44;
  if (v44)
  {
    GlobalContext = JSContextGetGlobalContext(this);
    WebKit::WebFrame::frameForContext(GlobalContext, v22, buf);
    uint64_t v23 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v24 = *(void *)(*(void *)buf + 24);
      if (v24)
      {
        uint64_t v25 = *(void *)(v24 + 8);
        if (v25)
        {
          uint64_t v26 = *(void *)(v25 + 24);
          if (v26)
          {
            uint64_t v27 = *(void *)(v26 + 8);
            if (v27)
            {
              JSValueRef v28 = *(void **)(*(void *)(v27 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v28 + 1368))(v28) & 1) == 0)
              {
                uint64_t v29 = *(void *)(v28[2] + 8);
                if (v29)
                {
                  CFRetain(*(CFTypeRef *)(v29 - 8));
                  CFRelease(*(CFTypeRef *)(v23 + 8));
                  ++*(_DWORD *)v20;
                  uint64_t v41 = v20;
                  WebKit::WebExtensionAPIWindowsEvent::removeListener(v12, v29 - 16, &v41);
                  int v30 = v41;
                  uint64_t v41 = 0;
                  if (v30) {
                    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v30);
                  }
                  JSValueRef Undefined = JSValueMakeUndefined(this);
                  CFRelease(*(CFTypeRef *)(v29 - 8));
LABEL_22:
                  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
                  goto LABEL_23;
                }
              }
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    JSValueRef v32 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Page could not be found for JSContextRef", buf, 2u);
    }
    JSValueRef Undefined = JSValueMakeUndefined(this);
    goto LABEL_22;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.removeListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v40 = JSValueMakeUndefined(this);
LABEL_47:
  JSValueRef Undefined = v40;
LABEL_23:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B4F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

JSValueRef WebKit::JSWebExtensionAPIWindowsEvent::hasListener(WebKit::JSWebExtensionAPIWindowsEvent *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSObjectRef *a6, const OpaqueJSValue **a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = WebKit::toWebExtensionAPIWindowsEvent(this, a3, a3);
  uint64_t v12 = (uint64_t)v11;
  if (!v11 || (++*((_DWORD *)v11 + 12), *((unsigned char *)v11 + 8)))
  {
    JSValueRef Undefined = JSValueMakeUndefined(this);
    if (!v12) {
      return Undefined;
    }
    goto LABEL_9;
  }
  uint64_t v13 = (id)qword_1EB357DF8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a4 == (OpaqueJSValue *)1) {
      uint64_t v24 = "argument";
    }
    else {
      uint64_t v24 = "arguments";
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSValueRef v32 = v34;
    WTF::String::utf8();
    if (v33) {
      uint64_t v25 = (char *)v33 + 16;
    }
    else {
      uint64_t v25 = 0;
    }
    *(_DWORD *)long long buf = 134349570;
    *(void *)&uint8_t buf[4] = a4;
    __int16 v36 = 2082;
    uint64_t v37 = v24;
    __int16 v38 = 2082;
    uint64_t v39 = v25;
    _os_log_debug_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEBUG, "Called function windowsEvent.hasListener() (%{public}lu %{public}s) in %{public}s world", buf, 0x20u);
    uint64_t v27 = v33;
    uint64_t v33 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1) {
        WTF::fastFree(v27, v26);
      }
      else {
        --*(_DWORD *)v27;
      }
    }
    JSValueRef v28 = v32;
    JSValueRef v32 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }

  if (!a4)
  {
    uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.hasListener()", 0, &cfstr_ARequiredArgum.isa, v14);
    goto LABEL_31;
  }
  if (!JSValueIsObject(this, *a5) || (JSValueRef v16 = JSValueToObject(this, *a5, 0), !JSObjectIsFunction(this, v16)))
  {
    uint64_t v29 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v15);
LABEL_31:
    *a6 = v29;
    JSValueRef v30 = JSValueMakeUndefined(this);
    goto LABEL_33;
  }
  double v17 = *a5;
  uint64_t v18 = (const OpaqueJSValue *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
  WebKit::toJSCallbackHandler((uint64_t)this, v17, v18, buf);
  unint64_t v20 = *(WebKit::WebExtensionCallbackHandler **)buf;
  if (*(void *)buf)
  {
    ++**(_DWORD **)buf;
    JSValueRef v31 = v20;
    BOOL hasListener = WebKit::WebExtensionAPIWindowsEvent::hasListener(v12, &v31);
    JSValueRef Undefined = JSValueMakeBoolean(this, hasListener);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v20);
    goto LABEL_9;
  }
  *a6 = WebKit::toJSError(this, (const OpaqueJSContext *)@"windowsEvent.hasListener()", &cfstr_Listener.isa, &cfstr_AFunctionIsExp.isa, v19);
  JSValueRef v30 = JSValueMakeUndefined(this);
LABEL_33:
  JSValueRef Undefined = v30;
LABEL_9:
  if (*(_DWORD *)(v12 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v12 + 40) + 8))(v12 + 40);
  }
  else {
    --*(_DWORD *)(v12 + 48);
  }
  return Undefined;
}

void sub_1989B53B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*(_DWORD *)(v10 + 48) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v10 + 40) + 8))(v10 + 40);
  }
  else {
    --*(_DWORD *)(v10 + 48);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(WebKit::WebExtensionCallbackHandler *this, JSValue *a2)
{
  long long v3 = a2;
  *(_DWORD *)this = 1;
  long long v4 = [(JSValue *)v3 context];
  JSObjectRef v5 = JSValueToObject((JSContextRef)[v4 JSGlobalContextRef], -[JSValue JSValueRef](v3, "JSValueRef"), 0);

  *((void *)this + 1) = v5;
  *((void *)this + 2) = 0;
  uint64_t v6 = [(JSValue *)v3 context];
  uint64_t v7 = (OpaqueJSContext *)[v6 JSGlobalContextRef];
  *((void *)this + 3) = v7;
  if (v7) {
    JSGlobalContextRetain(v7);
  }

  *((void *)this + 4) = 0;
  JSValueProtect(*((JSContextRef *)this + 3), *((JSValueRef *)this + 1));

  return this;
}

void sub_1989B5524(_Unwind_Exception *a1)
{
  long long v4 = *(_DWORD **)(v2 + 32);
  *(void *)(v2 + 32) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  JSObjectRef v5 = *(OpaqueJSContext **)(v2 + 24);
  if (v5) {
    JSGlobalContextRelease(v5);
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(uint64_t a1, JSContextRef ctx, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  GlobalContext = JSContextGetGlobalContext(ctx);
  *(void *)(a1 + 24) = GlobalContext;
  if (GlobalContext)
  {
    JSGlobalContextRetain(GlobalContext);
    GlobalContext = *(OpaqueJSContext **)(a1 + 24);
  }
  ++*(_DWORD *)(a4 + 8);
  *(void *)(a1 + 32) = a4;
  JSValueProtect(GlobalContext, *(JSValueRef *)(a1 + 8));
  return a1;
}

void sub_1989B5604(_Unwind_Exception *exception_object)
{
  long long v3 = *(_DWORD **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  long long v4 = *(OpaqueJSContext **)(v1 + 24);
  if (v4) {
    JSGlobalContextRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(uint64_t a1, JSContextRef ctx, uint64_t a3)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  GlobalContext = JSContextGetGlobalContext(ctx);
  *(void *)(a1 + 24) = GlobalContext;
  if (GlobalContext) {
    JSGlobalContextRetain(GlobalContext);
  }
  ++*(_DWORD *)(a3 + 8);
  *(void *)(a1 + 32) = a3;
  return a1;
}

WebKit::WebExtensionCallbackHandler *WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(WebKit::WebExtensionCallbackHandler *this, JSContextRef ctx, OpaqueJSValue *a3, OpaqueJSValue *a4)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  GlobalContext = JSContextGetGlobalContext(ctx);
  *((void *)this + 3) = GlobalContext;
  if (GlobalContext)
  {
    JSGlobalContextRetain(GlobalContext);
    GlobalContext = (OpaqueJSContext *)*((void *)this + 3);
  }
  *((void *)this + 4) = 0;
  JSValueProtect(GlobalContext, *((JSValueRef *)this + 1));
  JSValueProtect(*((JSContextRef *)this + 3), *((JSValueRef *)this + 2));
  return this;
}

void sub_1989B5714(_Unwind_Exception *exception_object)
{
  long long v3 = *(_DWORD **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  long long v4 = *(OpaqueJSContext **)(v1 + 24);
  if (v4) {
    JSGlobalContextRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionCallbackHandler::~WebExtensionCallbackHandler(WebKit::WebExtensionCallbackHandler *this)
{
  uint64_t v2 = (const OpaqueJSValue *)*((void *)this + 1);
  if (v2) {
    JSValueUnprotect(*((JSContextRef *)this + 3), v2);
  }
  long long v3 = (const OpaqueJSValue *)*((void *)this + 2);
  if (v3) {
    JSValueUnprotect(*((JSContextRef *)this + 3), v3);
  }
  long long v4 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  JSObjectRef v5 = (OpaqueJSContext *)*((void *)this + 3);
  if (v5) {
    JSGlobalContextRelease(v5);
  }
}

void sub_1989B5804(_Unwind_Exception *exception_object)
{
  long long v3 = *(_DWORD **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  long long v4 = *(OpaqueJSContext **)(v1 + 24);
  if (v4) {
    JSGlobalContextRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionCallbackHandler::callbackFunction(WebKit::WebExtensionCallbackHandler *this)
{
  if (*((void *)this + 3))
  {
    uint64_t v1 = (void *)*((void *)this + 1);
    if (v1)
    {
      uint64_t v2 = (void *)MEMORY[0x1E4F30938];
      long long v3 = objc_msgSend(MEMORY[0x1E4F30920], "contextWithJSGlobalContextRef:");
      uint64_t v1 = [v2 valueWithJSValueRef:v1 inContext:v3];
    }
  }
  else
  {
    uint64_t v1 = 0;
  }

  return v1;
}

void sub_1989B58E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionCallbackHandler::reportError(WebKit::WebExtensionCallbackHandler *this, NSString *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v3 = a2;
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    JSObjectRef v5 = (WebKit::WebExtensionAPIRuntimeBase *)*((void *)this + 4);
    if (v5)
    {
      id v6 = WebKit::WebExtensionAPIRuntimeBase::reportError(v5, v3, this);
    }
    else if (*((void *)this + 2))
    {
      uint64_t v7 = qword_1EB357DF8;
      if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)JSValueRef v14 = 138543362;
        *(void *)&v14[4] = v3;
        _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Promise rejected: %{public}@", v14, 0xCu);
        uint64_t v4 = *((void *)this + 3);
      }
      uint64_t v8 = (void *)MEMORY[0x1E4F30938];
      uint64_t v9 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:v4];
      uint64_t v10 = [v8 valueWithNewErrorFromMessage:v3 inContext:v9];

      uint64_t v11 = (OpaqueJSValue *)*((void *)this + 2);
      *(void *)JSValueRef v14 = WebKit::toJSValueRef(*((WebKit **)this + 3), v10, v12);
      id v13 = WebKit::callWithArguments<1ul>(v11, (JSContextRef *)this + 3, (JSValueRef *)v14);
    }
  }
}

void sub_1989B5A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::callWithArguments<1ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  JSObjectRef v5 = 0;
  if (object)
  {
    id v6 = *a2;
    if (*a2)
    {
      JSValueRef v7 = JSObjectCallAsFunction(*a2, object, 0, 1uLL, arguments, 0);
      JSObjectRef v5 = WebKit::toNSObject(v6, (uint64_t)v7, 0, 0, 0);
    }
    uint64_t v3 = vars8;
  }
  return v5;
}

id WebKit::WebExtensionCallbackHandler::call(JSObjectRef *this)
{
  uint64_t v1 = WebKit::callWithArguments<0ul>(this[1], this + 3);

  return v1;
}

id WebKit::callWithArguments<0ul>(JSObjectRef object, JSContextRef *a2)
{
  uint64_t v4 = 0;
  if (object)
  {
    JSObjectRef v5 = *a2;
    if (*a2)
    {
      JSValueRef v6 = JSObjectCallAsFunction(*a2, object, 0, 0, 0, 0);
      uint64_t v4 = WebKit::toNSObject(v5, (uint64_t)v6, 0, 0, 0);
    }
    uint64_t v2 = vars8;
  }
  return v4;
}

id WebKit::WebExtensionCallbackHandler::call(WebKit::WebExtensionCallbackHandler *this, objc_object *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = (OpaqueJSValue *)*((void *)this + 1);
  JSValueRef arguments = WebKit::toJSValueRef(*((WebKit **)this + 3), (const OpaqueJSContext *)v3, v5);
  JSValueRef v6 = WebKit::callWithArguments<1ul>(v4, (JSContextRef *)this + 3, &arguments);

  return v6;
}

void sub_1989B5C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionCallbackHandler::call(WebKit::WebExtensionCallbackHandler *this, objc_object *a2, objc_object *a3)
{
  JSObjectRef v5 = a2;
  JSValueRef v6 = a3;
  JSValueRef v7 = (OpaqueJSValue *)*((void *)this + 1);
  uint64_t v8 = (WebKit *)*((void *)this + 3);
  this = (WebKit::WebExtensionCallbackHandler *)((char *)this + 24);
  v13[0] = WebKit::toJSValueRef(v8, (const OpaqueJSContext *)v5, v9);
  v13[1] = WebKit::toJSValueRef(*(WebKit **)this, (const OpaqueJSContext *)v6, v10);
  uint64_t v11 = WebKit::callWithArguments<2ul>(v7, (JSContextRef *)this, v13);

  return v11;
}

void sub_1989B5CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::callWithArguments<2ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  JSObjectRef v5 = 0;
  if (object)
  {
    JSValueRef v6 = *a2;
    if (*a2)
    {
      JSValueRef v7 = JSObjectCallAsFunction(*a2, object, 0, 2uLL, arguments, 0);
      JSObjectRef v5 = WebKit::toNSObject(v6, (uint64_t)v7, 0, 0, 0);
    }
    uint64_t v3 = vars8;
  }
  return v5;
}

id WebKit::WebExtensionCallbackHandler::call(WebKit::WebExtensionCallbackHandler *this, objc_object *a2, objc_object *a3, objc_object *a4)
{
  JSValueRef v7 = a2;
  uint64_t v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = (OpaqueJSValue *)*((void *)this + 1);
  uint64_t v11 = (WebKit *)*((void *)this + 3);
  this = (WebKit::WebExtensionCallbackHandler *)((char *)this + 24);
  arguments[0] = WebKit::toJSValueRef(v11, (const OpaqueJSContext *)v7, v12);
  arguments[1] = WebKit::toJSValueRef(*(WebKit **)this, (const OpaqueJSContext *)v8, v13);
  arguments[2] = WebKit::toJSValueRef(*(WebKit **)this, (const OpaqueJSContext *)v9, v14);
  uint64_t v15 = WebKit::callWithArguments<3ul>(v10, (JSContextRef *)this, arguments);

  return v15;
}

void sub_1989B5E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::callWithArguments<3ul>(JSObjectRef object, JSContextRef *a2, JSValueRef *arguments)
{
  JSObjectRef v5 = 0;
  if (object)
  {
    JSValueRef v6 = *a2;
    if (*a2)
    {
      JSValueRef v7 = JSObjectCallAsFunction(*a2, object, 0, 3uLL, arguments, 0);
      JSObjectRef v5 = WebKit::toNSObject(v6, (uint64_t)v7, 0, 0, 0);
    }
    uint64_t v3 = vars8;
  }
  return v5;
}

id WebKit::toNSObject(const OpaqueJSContext *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v12 = 0;
    goto LABEL_27;
  }
  uint64_t v10 = (void *)MEMORY[0x1E4F30938];
  uint64_t v11 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(a1)];
  uint64_t v12 = [v10 valueWithJSValueRef:a2 inContext:v11];

  if ([v12 isArray])
  {
    id v13 = [v12 objectForKeyedSubscript:@"length"];
    unsigned int v14 = [v13 toUInt32];
    uint64_t v15 = v14;

    JSValueRef v16 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v14];
    if (v14)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = [v12 valueAtIndex:v17];
        uint64_t v19 = v18;
        if (a5 && (([v18 isArray] & 1) != 0 || objc_msgSend(v19, "_isDictionary")))
        {
          if (v19) {
            [v16 addObject:v19];
          }
        }
        else
        {
          unint64_t v20 = WebKit::toNSObject(a1, [v19 JSValueRef], 0, a4, 0);
          if (v20) {
            [v16 addObject:v20];
          }
        }
        ++v17;
      }
      while (v15 != v17);
    }
    JSValueRef v21 = (void *)[v16 copy];
    if (a3 && objc_opt_class() != a3)
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = ___ZN6WebKit10toNSObjectEPK15OpaqueJSContextPK13OpaqueJSValueP10objc_classNS_15NullValuePolicyENS_11ValuePolicyE_block_invoke;
      v25[3] = &__block_descriptor_40_e11_B24__0_8_16lu32l8;
      v25[4] = a3;
      uint64_t v22 = WebKit::filterObjects<NSArray>(v21, v25);

      JSValueRef v21 = (void *)v22;
    }

    goto LABEL_26;
  }
  if ([v12 _isDictionary])
  {
    uint64_t v23 = WebKit::toNSDictionary(a1, a2, a4, a5);
LABEL_25:
    JSValueRef v21 = (void *)v23;
LABEL_26:

    uint64_t v12 = v21;
    goto LABEL_27;
  }
  if (![v12 isObject]
    || ([v12 isDate] & 1) != 0
    || [v12 isNull])
  {
    uint64_t v23 = [v12 toObject];
    goto LABEL_25;
  }
LABEL_27:

  return v12;
}

void sub_1989B615C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit10toNSObjectEPK15OpaqueJSContextPK13OpaqueJSValueP10objc_classNS_15NullValuePolicyENS_11ValuePolicyE_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id WebKit::toNSDictionary(const OpaqueJSContext *a1, const OpaqueJSValue *a2, uint64_t a3, char a4)
{
  if (JSValueIsObject(a1, a2) && (object = JSValueToObject(a1, a2, 0)) != 0)
  {
    JSValueRef v7 = (void *)MEMORY[0x1E4F30938];
    uint64_t v8 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(a1)];
    uint64_t v9 = [v7 valueWithJSValueRef:a2 inContext:v8];

    uint64_t v26 = v9;
    if ([v9 _isDictionary])
    {
      uint64_t v10 = JSObjectCopyPropertyNames(a1, object);
      size_t Count = JSPropertyNameArrayGetCount(v10);
      uint64_t v12 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:Count];
      JSValueRef v28 = v12;
      if (Count)
      {
        for (size_t i = 0; Count != i; ++i)
        {
          unsigned int v14 = v10;
          NameAtIndex = JSPropertyNameArrayGetNameAtIndex(v10, i);
          JSValueRef v16 = NameAtIndex;
          if (NameAtIndex) {
            JSStringRetain(NameAtIndex);
          }
          Property = JSObjectGetProperty(a1, object, v16, 0);
          if ((a3 & 1) == 0 && JSValueIsNull(a1, Property)) {
            goto LABEL_24;
          }
          uint64_t v19 = WebKit::toNSString(v16, v17);
          if (Property)
          {
            unint64_t v20 = (void *)MEMORY[0x1E4F30938];
            JSValueRef v21 = [MEMORY[0x1E4F30920] contextWithJSGlobalContextRef:JSContextGetGlobalContext(a1)];
            uint64_t v22 = [v20 valueWithJSValueRef:Property inContext:v21];

            if (a4)
            {
              uint64_t v9 = v26;
              if (v22) {
                [v28 setObject:v22 forKeyedSubscript:v19];
              }
              goto LABEL_23;
            }
            uint64_t v9 = v26;
          }
          else
          {
            uint64_t v22 = 0;
            if (a4) {
              goto LABEL_23;
            }
          }
          if ([v22 _isDictionary])
          {
            uint64_t v23 = WebKit::toNSDictionary(a1, Property, a3, 0);
            if (v23) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v23 = WebKit::toNSObject(a1, (uint64_t)Property, 0, 0, 0);
            if (v23) {
LABEL_21:
            }
              [v28 setObject:v23 forKeyedSubscript:v19];
          }

LABEL_23:
          uint64_t v12 = v28;
LABEL_24:
          if (v16) {
            JSStringRelease(v16);
          }
          uint64_t v10 = v14;
        }
      }
      JSPropertyNameArrayRelease(v10);
      uint64_t v24 = (void *)[v12 copy];
    }
    else
    {
      uint64_t v24 = 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }

  return v24;
}

void sub_1989B64A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

__CFString *WebKit::toNSString(JSContextRef ctx, JSValueRef value, int a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      if (a3 != 2) {
        goto LABEL_10;
      }
      if (JSValueIsUndefined(ctx, value)) {
        goto LABEL_9;
      }
    }
    if (JSValueIsNull(ctx, value)) {
      goto LABEL_9;
    }
  }
  if (!JSValueIsString(ctx, value))
  {
LABEL_9:
    uint64_t v3 = 0;
  }
  else
  {
    JSValueRef v6 = JSValueToStringCopy(ctx, value, 0);
    uint64_t v3 = (__CFString *)JSStringCopyCFString(0, v6);
    if (v6) {
      JSStringRelease(v6);
    }
  }
LABEL_10:

  return v3;
}

void sub_1989B65F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

JSStringRef WebKit::toNSString(JSStringRef string, OpaqueJSString *a2)
{
  if (string)
  {
    string = (JSStringRef)JSStringCopyCFString(0, string);
    uint64_t v2 = vars8;
  }
  return string;
}

JSValueRef WebKit::toJSValueRef(const OpaqueJSContext *a1, void *a2, char a3)
{
  CFStringRef v5 = a2;
  JSValueRef v6 = (__CFString *)v5;
  if (v5 || (a3 & 1) != 0)
  {
    if (!v5) {
      CFStringRef v5 = &stru_1EEA10550;
    }
    uint64_t v8 = JSStringCreateWithCFString(v5);
    JSValueRef String = JSValueMakeString(a1, v8);
    if (v8) {
      JSStringRelease(v8);
    }
  }
  else
  {
    JSValueRef String = JSValueMakeNull(a1);
  }

  return String;
}

{
  void *v5;
  void *v6;
  JSValueRef v7;

  CFStringRef v5 = [a2 absoluteURL];
  JSValueRef v6 = [v5 absoluteString];
  JSValueRef v7 = WebKit::toJSValueRef(a1, v6, a3);

  return v7;
}

void sub_1989B66CC(_Unwind_Exception *a1)
{
  if (v2) {
    JSStringRelease(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1989B675C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::toJSCallbackHandler@<X0>(uint64_t this@<X0>, const OpaqueJSContext *a2@<X1>, const OpaqueJSValue *a3@<X2>, void *a4@<X8>)
{
  JSContextRef v10 = (JSContextRef)this;
  if (a2
    && (JSValueRef v7 = (const OpaqueJSContext *)this,
        this = (uint64_t)JSValueToObject((JSContextRef)this, a2, 0),
        (uint64_t v9 = this) != 0)
    && (this = JSObjectIsFunction(v7, (JSObjectRef)this), (this & 1) != 0))
  {
    this = WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,WebKit::WebExtensionAPIRuntimeBase &>(&v10, &v9, (uint64_t)a3, &v8);
    *a4 = v8;
  }
  else
  {
    *a4 = 0;
  }
  return this;
}

uint64_t WebKit::WebExtensionCallbackHandler::create<OpaqueJSContext const*&,OpaqueJSValue *&,WebKit::WebExtensionAPIRuntimeBase &>@<X0>(JSContextRef *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(v8, *a1, *a2, a3);
  *a4 = v8;
  return result;
}

void sub_1989B6858(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

id WebKit::serializeJSObject(WebKit *this, const OpaqueJSContext *a2, JSValueRef *exception, const OpaqueJSValue **a4)
{
  if (a2)
  {
    JSONJSValueRef String = JSValueCreateJSONString(this, a2, 0, exception);
    JSValueRef v6 = WebKit::toNSString(JSONString, v5);
    if (JSONString) {
      JSStringRelease(JSONString);
    }
  }
  else
  {
    JSValueRef v6 = 0;
  }

  return v6;
}

void sub_1989B68D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    JSStringRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1989B695C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1989B6A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1989B6B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1989B6BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1989B6CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1989B6D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1989B6F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::BinarySemaphore::waitFor(WTF::MonotonicTime *a1)
{
  return WTF::BinarySemaphore::waitUntil();
}

void WebKit::LaunchServicesDatabaseManager::~LaunchServicesDatabaseManager(WebKit::LaunchServicesDatabaseManager *this)
{
  *(void *)this = &unk_1EE9B6D88;
  uint64_t v1 = (void *)*((void *)this + 2);
  if (v1) {
}
  }

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE9B6D88;
  uint64_t v1 = (void *)*((void *)this + 2);
  if (v1) {

  }
  JUMPOUT(0x199740C10);
}

void WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver(WebKit::LaunchServicesDatabaseObserver *this, void *a2)
{
  *(void *)this = &unk_1EE9B6DB8;
  *((void *)this + 3) = &unk_1EE9B6E00;
  uint64_t v3 = *((unsigned int *)this + 15);
  uint64_t v4 = (id *)*((void *)this + 6);
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    do
    {
      if (*v4) {

      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
    uint64_t v4 = (id *)*((void *)this + 6);
  }
  if (v4)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  JSValueRef v6 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    CFRelease(v6);
  }
  *(void *)this = &unk_1EE9B6E50;
  JSValueRef v7 = (void *)*((void *)this + 2);
  if (v7) {

  }
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8) {
}
  }

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver(WebKit::LaunchServicesDatabaseObserver *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LaunchServicesDatabaseObserver::~LaunchServicesDatabaseObserver((WebKit::LaunchServicesDatabaseObserver *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

char *WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 8 * a2;
  if (*(void *)v4)
  {

    uint64_t v3 = *a1;
  }
  uint64_t result = WTF::VectorMover<false,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>>::moveOverlapping((char *)(v4 + 8), (char *)(v3 + 8 * *((unsigned int *)a1 + 3)), (char *)v4);
  --*((_DWORD *)a1 + 3);
  return result;
}

void WebKit::LaunchServicesDatabaseObserver::initializeConnection(xpc_object_t *this, _xpc_connection_s **a2)
{
}

char *WTF::VectorMover<false,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>>::moveOverlapping(char *result, char *a2, char *a3)
{
  if (result <= a3)
  {
    if (a2 != result)
    {
      uint64_t v3 = &a3[((a2 - result) & 0xFFFFFFFFFFFFFFF8) - 8];
      do
      {
        uint64_t v4 = *((void *)a2 - 1);
        a2 -= 8;
        *(void *)uint64_t v3 = v4;
        v3 -= 8;
        *(void *)a2 = 0;
      }
      while (a2 != result);
    }
  }
  else
  {
    while (result != a2)
    {
      *(void *)a3 = *(void *)result;
      a3 += 8;
      *(void *)uint64_t result = 0;
      result += 8;
    }
  }
  return result;
}

void WebKit::LegacyCustomProtocolManager::didReceiveMessage(WebKit::LegacyCustomProtocolManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 'o':
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v6) {
        goto LABEL_69;
      }
      JSValueRef v7 = (WTF::StringImpl *)v5;
      IPC::Decoder::decode<WebCore::ResourceError>(a3, (uint64_t)v83);
      if (!BYTE8(v86))
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v83, v8);
        goto LABEL_69;
      }
      uint64_t v58 = v7;
      long long v9 = *(_OWORD *)v83;
      *(void *)v83 = 0;
      *(void *)&v83[8] = 0;
      *(_OWORD *)__int16 v59 = v9;
      *(_OWORD *)&v59[16] = *(_OWORD *)&v83[16];
      *(_OWORD *)&v59[32] = *(_OWORD *)&v83[32];
      *(_DWORD *)&v83[16] &= ~1u;
      v60 = v84;
      LODWORD(v61[0]) = v85;
      WORD2(v61[0]) = WORD2(v85);
      JSContextRef v10 = (const void *)*((void *)&v85 + 1);
      v84 = 0;
      *((void *)&v85 + 1) = 0;
      v61[1] = v10;
      LOBYTE(v62) = v86;
      BYTE8(v62) = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v83, v8);
      WebKit::LegacyCustomProtocolManager::didFailWithError((uint64_t)this, (uint64_t)v7, (WebCore::ResourceError *)v59);
      if (BYTE8(v62))
      {
        CFTypeRef v12 = v61[1];
        v61[1] = 0;
        if (v12) {
          CFRelease(v12);
        }
        id v13 = v60;
        v60 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v11);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        id v47 = *(WTF::StringImpl **)&v59[8];
        *(void *)&v59[8] = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v11);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
        uint64_t v35 = *(WTF::StringImpl **)v59;
        *(void *)__int16 v59 = 0;
        if (v35) {
          goto LABEL_34;
        }
      }
      return;
    case 'p':
      uint64_t v33 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v34)
      {
        WebKit::LegacyCustomProtocolManager::didFinishLoading((uint64_t)this, v33);
      }
      return;
    case 'q':
      uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v15) {
        goto LABEL_69;
      }
      uint64_t v16 = v14;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)&v58);
      if (!v59[8]) {
        goto LABEL_69;
      }
      WebKit::LegacyCustomProtocolManager::didLoadData((uint64_t)this, v16, (uint64_t)v58, *(uint64_t *)v59);
      return;
    case 'r':
      uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v18) {
        goto LABEL_69;
      }
      uint64_t v19 = (WTF::StringImpl *)v17;
      IPC::Decoder::decode<WebCore::ResourceResponse>(a3, v83);
      if (!v101) {
        goto LABEL_68;
      }
      unint64_t v21 = *((void *)a3 + 1);
      unint64_t v20 = *(WTF::StringImpl **)a3;
      unint64_t v22 = *((void *)a3 + 2) - *(void *)a3;
      if (v21 <= v22)
      {
        uint64_t v43 = 0;
        uint64_t v41 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v52 = *((void *)a3 + 3);
        if (v52)
        {
          if (v21)
          {
            (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
            uint64_t v41 = *(void *)a3;
            uint64_t v43 = *((void *)a3 + 1);
          }
          else
          {
            uint64_t v43 = 0;
            uint64_t v41 = 0;
          }
        }
      }
      else
      {
        uint64_t v23 = (unsigned __int8 *)v20 + v22;
        *((void *)a3 + 2) = v23 + 1;
        if (v20)
        {
          unsigned int v24 = *v23;
          if (v24 >= 3) {
            goto LABEL_67;
          }
          *(_OWORD *)&v59[8] = *(_OWORD *)&v83[8];
          *(_OWORD *)&v59[24] = *(_OWORD *)&v83[24];
          long long v25 = v85;
          long long v85 = 0u;
          long long v26 = v86;
          long long v86 = 0u;
          uint64_t v27 = *(void *)&v83[40];
          uint64_t v58 = v19;
          *(void *)__int16 v59 = *(void *)v83;
          *(void *)v83 = 0;
          *(_DWORD *)&v83[8] &= ~1u;
          *(void *)&v83[40] = 0;
          *(void *)&v59[40] = v27;
          v60 = v84;
          *(_OWORD *)__int16 v61 = v25;
          long long v62 = v26;
          *(void *)&long long v25 = v87;
          uint64_t v87 = 0;
          uint64_t v63 = v25;
          uint64_t v28 = v88;
          uint64_t v88 = 0;
          uint64_t v64 = v28;
          *(void *)&long long v25 = v89;
          uint64_t v89 = 0;
          uint64_t v65 = v25;
          uint64_t v29 = v90;
          uint64_t v90 = 0;
          uint64_t v66 = v29;
          LOBYTE(v67) = 0;
          char v68 = 0;
          if (v92)
          {
            uint64_t v48 = v91;
            uint64_t v91 = 0;
            uint64_t v67 = v48;
            char v68 = 1;
          }
          long long v73 = v97;
          *(_OWORD *)__int16 v74 = *(_OWORD *)v98;
          *(_DWORD *)&v74[15] = *(_DWORD *)&v98[15];
          long long v69 = v93;
          long long v70 = v94;
          *(_OWORD *)v72 = v96;
          long long v71 = v95;
          JSValueRef v30 = v99;
          v99 = 0;
          CFTypeRef v75 = v30;
          char v76 = v100;
          char v77 = v24;
          char v78 = 1;
          std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v83, v20);
          WebKit::LegacyCustomProtocolManager::didReceiveResponse((uint64_t)this, (uint64_t)v58, (WebCore::ResourceResponse *)v59, v24);
          if (v78)
          {
            CFTypeRef v32 = v75;
            CFTypeRef v75 = 0;
            if (v32) {
              CFRelease(v32);
            }
            WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v59, v31);
          }
          return;
        }
        uint64_t v43 = v21;
        uint64_t v41 = 0;
      }
      unint64_t v21 = 0;
      unint64_t v20 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v39 = *((void *)a3 + 3);
      if (v39) {
        goto LABEL_78;
      }
      goto LABEL_67;
    case 's':
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v58);
      if (!v59[0]) {
        return;
      }
      WebKit::LegacyCustomProtocolManager::registerScheme(this, &v58);
      goto LABEL_32;
    case 't':
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v58);
      if (!v59[0]) {
        return;
      }
      WebKit::LegacyCustomProtocolManager::unregisterScheme((atomic_uchar *)this, &v58);
LABEL_32:
      if (v59[0])
      {
        uint64_t v35 = v58;
        uint64_t v58 = 0;
        if (v35)
        {
LABEL_34:
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, v11);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      return;
    case 'u':
      uint64_t v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v37)
      {
        LOBYTE(v58) = 0;
        char v80 = 0;
        goto LABEL_61;
      }
      __int16 v38 = (WTF::StringImpl *)v36;
      IPC::Decoder::decode<WebCore::ResourceRequest>(a3, (uint64_t)v81);
      if (!v82)
      {
        LOBYTE(v58) = 0;
        char v80 = 0;
        goto LABEL_46;
      }
      IPC::Decoder::decode<WebCore::ResourceResponse>(a3, v83);
      char v42 = v101;
      if (!v101)
      {
        LOBYTE(v58) = 0;
        goto LABEL_45;
      }
      uint64_t v43 = v82;
      if (v82)
      {
        uint64_t v58 = v38;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v59, (uint64_t)v81);
        std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v73, (uint64_t)v83);
        char v42 = 1;
LABEL_45:
        char v80 = v42;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v83, v40);
LABEL_46:
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v81);
        if (v80)
        {
LABEL_47:
          WebKit::LegacyCustomProtocolManager::wasRedirectedToRequest((uint64_t)this, (uint64_t)v58, (uint64_t)v59, (WebCore::ResourceResponse *)&v73);
          if (v80)
          {
            CFTypeRef v45 = cf;
            CFTypeRef cf = 0;
            if (v45) {
              CFRelease(v45);
            }
            WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v73, v44);
            CFTypeRef v46 = v72[1];
            v72[1] = 0;
            if (v46) {
              CFRelease(v46);
            }
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v59);
          }
          return;
        }
LABEL_61:
        uint64_t v49 = *(void *)a3;
        uint64_t v50 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v51 = *((void *)a3 + 3);
        if (!v51) {
          return;
        }
        if (!v50) {
          return;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v49);
        if (!v80) {
          return;
        }
        goto LABEL_47;
      }
      __break(1u);
LABEL_78:
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v41, v43);
        unint64_t v20 = *(WTF::StringImpl **)a3;
        unint64_t v21 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v21 = 0;
        unint64_t v20 = 0;
      }
LABEL_67:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v53 = *((void *)a3 + 3);
      if (v53 && v21) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v20);
      }
LABEL_68:
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v83, v20);
LABEL_69:
      uint64_t v54 = *(void *)a3;
      uint64_t v55 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v56 = *((void *)a3 + 3);
      if (v56) {
        BOOL v57 = v55 == 0;
      }
      else {
        BOOL v57 = 1;
      }
      if (!v57) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 16))(v56, v54);
      }
      return;
    default:
      return;
  }
}

void non-virtual thunk to'WebKit::LegacyCustomProtocolManager::didReceiveMessage(WebKit::LegacyCustomProtocolManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

void WebKit::LegacyCustomProtocolManagerProxy::didReceiveMessage(WebKit::LegacyCustomProtocolManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 != 110)
  {
    if (v5 != 109) {
      return;
    }
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (v7)
    {
      uint64_t v8 = v6;
      IPC::Decoder::decode<WebCore::ResourceRequest>(a3, (uint64_t)v22);
      char v9 = v23;
      if (v23)
      {
        uint64_t v18 = v8;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v19, (uint64_t)v22);
        char v9 = 1;
      }
      else
      {
        LOBYTE(v18) = 0;
      }
      char v21 = v9;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v22);
      if (v21)
      {
LABEL_12:
        WebKit::LegacyCustomProtocolManagerProxy::startLoading((uint64_t)this, v18, (uint64_t)v19);
        if (v21)
        {
          CFTypeRef v14 = cf;
          CFTypeRef cf = 0;
          if (v14) {
            CFRelease(v14);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v19);
        }
        return;
      }
    }
    else
    {
      LOBYTE(v18) = 0;
      char v21 = 0;
    }
    uint64_t v15 = *(void *)a3;
    uint64_t v16 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v17 = *((void *)a3 + 3);
    if (!v17) {
      return;
    }
    if (!v16) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    if (!v21) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v10 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
  if (v11)
  {
    uint64_t v12 = *(void *)(*((void *)this + 2) + 8);
    id v13 = (unsigned int *)(v12 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v12 + 16), 1u);
    (*(void (**)(void, WebKit::LegacyCustomProtocolManagerProxy *, uint64_t))(**(void **)(v12 + 424) + 24))(*(void *)(v12 + 424), this, v10);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v13);
  }
}

void WebKit::LibWebRTCCodecsProxy::~LibWebRTCCodecsProxy(WebKit::LibWebRTCCodecsProxy *this)
{
  uint64_t v4 = (WTF *)*((void *)this + 10);
  uint64_t v2 = (void *)((char *)this + 80);
  unsigned __int8 v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v2, v3);
  }
  uint64_t v5 = *((void *)this + 8);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, v3);
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, v3);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::LibWebRTCCodecsProxy *)((char *)this + 48));
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 16), v7);
  }
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 56))(v9);
  }
  uint64_t v10 = (atomic_uchar **)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v10);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::LibWebRTCCodecsProxy::~LibWebRTCCodecsProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(uint64_t a1, uint64_t *a2)
{
  IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(a1 + 24), 0x15u, 0);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9B6FE8;
  v6[1] = a1;
  v6[2] = v5;
  uint64_t v8 = v6;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v8);
  uint64_t result = (uint64_t)v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1989B7D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LibWebRTCCodecsProxy::createDecoder(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5, int a6, uint64_t *a7)
{
  if (!*a4) {
    goto LABEL_19;
  }
  if (a3 == 3)
  {
    if (!WTF::StringImpl::startsWith()) {
      return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
    }
    uint64_t v14 = *a4;
    if (!*a4 || *(_DWORD *)(v14 + 4) < 7u) {
      return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if ((*(unsigned char *)(v14 + 16) & 4) != 0)
    {
      if (*(unsigned __int8 *)(v15 + 5) - 48 > 2) {
        return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
      }
      int v16 = *(unsigned __int8 *)(v15 + 6);
    }
    else
    {
      if (*(unsigned __int16 *)(v15 + 10) - 48 >= 3) {
        return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
      }
      int v16 = *(unsigned __int16 *)(v15 + 12);
    }
    if (v16 == 46) {
      goto LABEL_19;
    }
  }
  else
  {
    if (a3 != 1)
    {
      if (!a3)
      {
        unsigned int v12 = WebCore::parseAVCCodecParameters();
        if (!HIBYTE(v12) || v12 > 0x64u || BYTE2(v12) >= 0x35u) {
          return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
        }
      }
LABEL_19:
      if (a5)
      {
        uint64_t v20 = *(void *)(a1 + 40);
        if (v20) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v20 + 16));
        }
        if (a6) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v20 = 0;
        if (a6)
        {
LABEL_23:
          uint64_t v21 = WTF::fastMalloc((WTF *)0x3F8);
          unint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v22 = &unk_1EE9B6EC8;
          v22[1] = a2;
          *(void *)uint64_t v21 = v22;
          *(_OWORD *)(v21 + 8) = 0u;
          *(void *)(v21 + 24) = v21 + 40;
          *(void *)(v21 + 32) = 120;
          *(_OWORD *)(v21 + 1000) = 0u;
          goto LABEL_26;
        }
      }
      uint64_t v21 = 0;
LABEL_26:
      char v23 = *(atomic_uchar **)(a1 + 16);
      if (v23) {
        char v23 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v23);
      }
      v70[0] = (WTF::ThreadSafeWeakPtrControlBlock *)v23;
      v70[1] = (WTF::ThreadSafeWeakPtrControlBlock *)a1;
      *(void *)&long long v71 = a2;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v71 + 1, (uint64_t **)(a1 + 24));
      WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v72, (const WTF::MachSendRight *)(a1 + 48));
      *(void *)&uint8_t v72[8] = v20;
      *(void *)&v72[16] = v21;
      long long v24 = *(_OWORD *)v70;
      v70[0] = 0;
      v70[1] = 0;
      *(_OWORD *)long long v73 = v24;
      uint64_t v25 = *((void *)&v71 + 1);
      *((void *)&v71 + 1) = 0;
      *(void *)&long long v74 = a2;
      *((void *)&v74 + 1) = v25;
      WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v75, (const WTF::MachSendRight *)v72);
      long long v26 = *(_OWORD *)&v72[8];
      *(void *)&uint8_t v72[8] = 0;
      *(void *)&v72[16] = 0;
      long long v76 = v26;
      uint64_t v27 = (char *)malloc_type_malloc(0x58uLL, 0x10E0040D754263EuLL);
      *(void *)uint64_t v27 = MEMORY[0x1E4F14398];
      *((void *)v27 + 1) = 50331650;
      *((void *)v27 + 2) = WTF::BlockPtr<void ()(__CVBuffer *,long long,long long,BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1)::{lambda(void *,__CVBuffer *,long long,long long,BOOL)#1}::__invoke;
      *((void *)v27 + 3) = &WTF::BlockPtr<void ()(__CVBuffer *,long long,long long,BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1)::descriptor;
      long long v28 = *(_OWORD *)v73;
      v73[0] = 0;
      v73[1] = 0;
      *((_OWORD *)v27 + 2) = v28;
      uint64_t v29 = *((void *)&v74 + 1);
      *((void *)&v74 + 1) = 0;
      *((void *)v27 + 6) = v74;
      *((void *)v27 + 7) = v29;
      WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v27 + 64), (const WTF::MachSendRight *)&v75);
      *(_OWORD *)(v27 + 72) = v76;
      long long v76 = 0uLL;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v75);
      JSValueRef v31 = (atomic_uchar **)*((void *)&v74 + 1);
      *((void *)&v74 + 1) = 0;
      if (v31) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v31);
      }
      CFTypeRef v32 = (atomic_uchar *)v73[0];
      v73[0] = 0;
      if (v32) {
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v32, v30);
      }
      WebCore::WebRTCVideoDecoder::create();
      _Block_release(v27);
      char v34 = *(WTF **)&v72[16];
      *(void *)&v72[16] = 0;
      if (v34) {
        std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100](v34, v33);
      }
      uint64_t v35 = *(void *)&v72[8];
      *(void *)&uint8_t v72[8] = 0;
      if (v35) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v35 + 16), v33);
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v72);
      char v37 = (atomic_uchar **)*((void *)&v71 + 1);
      *((void *)&v71 + 1) = 0;
      if (v37) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v37);
      }
      __int16 v38 = (atomic_uchar *)v70[0];
      v70[0] = 0;
      if (v38) {
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v38, v36);
      }
      uint64_t v39 = v69;
      if (!v69)
      {
        WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
        return 0;
      }
      if (a6)
      {
        uint64_t v40 = WTF::fastMalloc((WTF *)0x3F8);
        uint64_t v41 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v41 = &unk_1EE9B6F38;
        v41[1] = a2;
        *(void *)uint64_t v40 = v41;
        *(_OWORD *)(v40 + 8) = 0u;
        *(void *)(v40 + 24) = v40 + 40;
        *(void *)(v40 + 32) = 120;
        *(_OWORD *)(v40 + 1000) = 0u;
        uint64_t v39 = v69;
      }
      else
      {
        uint64_t v40 = 0;
      }
      v70[0] = v39;
      v70[1] = (WTF::ThreadSafeWeakPtrControlBlock *)v40;
      long long v71 = 0u;
      *(_OWORD *)v72 = 0u;
      uint64_t v43 = (uint64_t *)(a1 + 56);
      uint64_t v42 = *(void *)(a1 + 56);
      if (v42
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 56)),
            (uint64_t v42 = *v43) != 0))
      {
        int v44 = *(_DWORD *)(v42 - 8);
      }
      else
      {
        int v44 = 0;
      }
      unint64_t v45 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
      unint64_t v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
      unsigned int v48 = v44 & ((v47 >> 31) ^ v47);
      uint64_t v49 = (uint64_t *)(v42 + 56 * v48);
      uint64_t v50 = *v49;
      if (*v49)
      {
        uint64_t v51 = 0;
        int v52 = 1;
        while (v50 != a2)
        {
          if (v50 == -1) {
            uint64_t v51 = v49;
          }
          unsigned int v48 = (v48 + v52) & v44;
          uint64_t v49 = (uint64_t *)(v42 + 56 * v48);
          uint64_t v50 = *v49;
          ++v52;
          if (!*v49)
          {
            if (v51)
            {
              v51[6] = 0;
              *((_OWORD *)v51 + 1) = 0u;
              *((_OWORD *)v51 + 2) = 0u;
              *(_OWORD *)uint64_t v51 = 0u;
              --*(_DWORD *)(*v43 - 16);
              uint64_t v49 = v51;
            }
            goto LABEL_56;
          }
        }
        goto LABEL_67;
      }
LABEL_56:
      uint64_t *v49 = a2;
      uint64_t v53 = v70[0];
      uint64_t v54 = v70[1];
      long long v68 = v71;
      *(_OWORD *)long long v70 = 0u;
      long long v71 = 0u;
      uint64_t v55 = *(void *)v72;
      *(void *)v72 = 0;
      int v56 = *(_DWORD *)&v72[8];
      *(_DWORD *)&uint8_t v72[8] = 0;
      *(void *)&long long v76 = 0;
      v73[0] = 0;
      uint64_t v57 = v49[1];
      v49[1] = (uint64_t)v53;
      if (v57) {
        (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
      }
      v73[1] = 0;
      uint64_t v58 = (WTF *)v49[2];
      v49[2] = (uint64_t)v54;
      if (v58) {
        std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100](v58, v36);
      }
      long long v59 = *(_OWORD *)(v49 + 3);
      *(_OWORD *)(v49 + 3) = v68;
      long long v74 = v59;
      uint64_t v60 = v49[5];
      v49[5] = v55;
      uint64_t v75 = v60;
      LODWORD(v60) = *((_DWORD *)v49 + 12);
      *((_DWORD *)v49 + 12) = v56;
      LODWORD(v76) = v60;
      WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder((WebKit::LibWebRTCCodecsProxy::Decoder *)v73, v36);
      uint64_t v61 = *v43;
      if (*v43) {
        int v62 = *(_DWORD *)(v61 - 12) + 1;
      }
      else {
        int v62 = 1;
      }
      *(_DWORD *)(v61 - 12) = v62;
      uint64_t v63 = *v43;
      if (*v43) {
        int v64 = *(_DWORD *)(v63 - 12);
      }
      else {
        int v64 = 0;
      }
      uint64_t v65 = (*(_DWORD *)(v63 - 16) + v64);
      unint64_t v66 = *(unsigned int *)(v63 - 4);
      if (v66 > 0x400)
      {
        if (v66 > 2 * v65) {
          goto LABEL_67;
        }
      }
      else if (3 * v66 > 4 * v65)
      {
LABEL_67:
        WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder((WebKit::LibWebRTCCodecsProxy::Decoder *)v70, v36);
        atomic_store(1u, (unsigned __int8 *)(a1 + 72));
        WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
        return 0;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 56));
      goto LABEL_67;
    }
    WebCore::parseHEVCCodecParameters();
    if (BYTE8(v76))
    {
      unsigned int v18 = WebCore::validateHEVCParameters();
      std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v73, v19);
      if (HIBYTE(v18)) {
        goto LABEL_19;
      }
    }
    else
    {
      std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v73, v17);
    }
  }
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a7);
}

void sub_1989B842C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::ThreadSafeWeakPtrControlBlock *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, uint64_t a20,WTF::ThreadSafeWeakPtrControlBlock *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27)
{
}

void WebKit::LibWebRTCCodecsProxy::releaseDecoder(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (uint64_t *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a2);
  uint64_t v6 = v5;
  if (v4) {
    char v7 = (uint64_t *)(v4 + 56 * *(unsigned int *)(v4 - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 == v5) {
    return;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v5[3];
  uint64_t v10 = v5[4];
  v5[3] = 0;
  v5[4] = 0;
  uint64_t v11 = v5[5];
  v5[5] = 0;
  int v12 = *((_DWORD *)v5 + 12);
  *((_DWORD *)v5 + 12) = 0;
  id v13 = (void *)WTF::fastMalloc((WTF *)0x28);
  v13[3] = v11;
  v13[4] = 0;
  void *v13 = &unk_1EE9B7010;
  v13[1] = v9;
  JSValueRef v13[2] = v10;
  *((_DWORD *)v13 + 8) = v12;
  long long v24 = v13;
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, &v24);
  uint64_t v15 = v24;
  long long v24 = 0;
  if (v15) {
    (*(void (**)(void *))(*v15 + 8))(v15);
  }
  if (*v3)
  {
    uint64_t v16 = *v3 + 56 * *(unsigned int *)(*v3 - 4);
    if ((uint64_t *)v16 != v6) {
      goto LABEL_9;
    }
  }
  else if (v6)
  {
    uint64_t v16 = 0;
LABEL_9:
    if ((uint64_t *)v16 != v6)
    {
      uint64_t *v6 = -1;
      WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder((WebKit::LibWebRTCCodecsProxy::Decoder *)(v6 + 1), v14);
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v17 = *v3;
      int v18 = *v3 ? *(_DWORD *)(v17 - 12) - 1 : -1;
      *(_DWORD *)(v17 - 12) = v18;
      uint64_t v19 = *v3;
      if (*v3)
      {
        unsigned int v22 = 6 * *(_DWORD *)(v19 - 12);
        unsigned int v23 = *(_DWORD *)(v19 - 4);
        if (v22 < v23 && v23 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v23 >> 1);
        }
      }
    }
  }
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20 && *(_DWORD *)(v20 - 12))
  {
    LOBYTE(v21) = 1;
  }
  else
  {
    uint64_t v21 = *v3;
    if (*v3) {
      LOBYTE(v21) = *(_DWORD *)(v21 - 12) != 0;
    }
  }
  atomic_store(v21, (unsigned __int8 *)(a1 + 72));
}

void sub_1989B87FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LibWebRTCCodecsProxy::flushDecoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9B7038;
  v6[1] = a1;
  v6[2] = a3;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(*(void *)(a1 + 56), a2, (uint64_t)v6);
  char v7 = *(uint64_t (**)(void *))(*v6 + 8);

  return v7(v6);
}

void sub_1989B89F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::LibWebRTCCodecsProxy::doDecoderTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2);
  if (a1) {
    uint64_t v6 = (uint64_t *)(a1 + 56 * *(unsigned int *)(a1 - 4));
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    char v7 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 16);
    return (uint64_t *)v7(a3, result + 1);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecsProxy::setDecoderFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6)
{
  v12[0] = a3;
  v12[1] = a4;
  __int16 v11 = a5;
  __int16 v10 = a6;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9B7060;
  v8[1] = v12;
  v8[2] = &v11;
  v8[3] = &v10;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(*(void *)(a1 + 56), a2, (uint64_t)v8);
  return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
}

void sub_1989B8B60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LibWebRTCCodecsProxy::decodeFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v12[1] = a5;
  uint64_t v13 = a2;
  uint64_t v11 = a3;
  v12[0] = a4;
  uint64_t v8 = *a6;
  *a6 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x30);
  void *v9 = &unk_1EE9B7088;
  v9[1] = v8;
  v9[2] = &v11;
  v9[3] = v12;
  v9[4] = a1;
  v9[5] = &v13;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(*(void *)(a1 + 56), a2, (uint64_t)v9);
  return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
}

void sub_1989B8C4C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LibWebRTCCodecsProxy::setFrameSize(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  __int16 v9 = a3;
  __int16 v8 = a4;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9B70B0;
  v6[1] = &v9;
  v6[2] = &v8;
  WebKit::LibWebRTCCodecsProxy::doDecoderTask(*(void *)(a1 + 56), a2, (uint64_t)v6);
  return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
}

void sub_1989B8D5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::LibWebRTCCodecsProxy::createEncoder(uint64_t a1, WTF::ThreadSafeWeakPtrControlBlock *a2, unsigned int a3, void *a4, uint64_t *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  long long v86 = 0;
  uint64_t v87 = 0;
  long long v85 = &v86;
  uint64_t v10 = *((unsigned int *)a5 + 3);
  if (v10)
  {
    uint64_t v11 = *a5;
    uint64_t v12 = *a5 + 16 * v10;
    do
    {
      WTF::String::utf8();
      if (__p) {
        uint64_t v13 = (char *)__p + 16;
      }
      else {
        uint64_t v13 = 0;
      }
      WTF::String::utf8();
      if (v84) {
        uint64_t v14 = (char *)v84 + 16;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (char **)operator new(0x50uLL);
      v88[0] = (WTF::ThreadSafeWeakPtrControlBlock *)v15;
      v88[1] = (WTF::ThreadSafeWeakPtrControlBlock *)&v86;
      LOBYTE(v89) = 0;
      std::string::basic_string[abi:sn180100]<0>(v15 + 4, v13);
      std::string::basic_string[abi:sn180100]<0>(v15 + 7, v14);
      LOBYTE(v89) = 1;
      uint64_t v16 = (uint64_t *)v88[0];
      uint64_t v17 = &v86;
      int v18 = &v86;
      uint64_t v19 = v86;
      if (!v86) {
        goto LABEL_18;
      }
      uint64_t v17 = &v86;
      while (1)
      {
        while (1)
        {
          int v18 = (uint64_t **)v19;
          uint64_t v20 = v19 + 4;
          if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, (void **)v19 + 4) & 0x80) == 0)break; {
          uint64_t v19 = *v18;
          }
          uint64_t v17 = v18;
          if (!*v18) {
            goto LABEL_18;
          }
        }
        if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (void **)v16 + 4) & 0x80) == 0)break; {
        uint64_t v17 = v18 + 1;
        }
        uint64_t v19 = v18[1];
        if (!v19) {
          goto LABEL_18;
        }
      }
      if (!*v17)
      {
LABEL_18:
        uint64_t *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v18;
        void *v17 = v16;
        if (*v85)
        {
          long long v85 = (uint64_t **)*v85;
          uint64_t v16 = *v17;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v86, v16);
        ++v87;
        v88[0] = 0;
      }
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:sn180100]((uint64_t)v88, 0);
      unsigned int v22 = v84;
      v84 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1) {
          WTF::fastFree(v22, v21);
        }
        else {
          --*(_DWORD *)v22;
        }
      }
      unsigned int v23 = (WTF *)__p;
      __p = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v21);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      v11 += 16;
    }
    while (v11 != v12);
  }
  if (a3 > 1) {
    goto LABEL_31;
  }
  if (a3 != 1)
  {
    int v24 = a6;
    if (a8 != 1) {
      int v24 = 1;
    }
    if (a8 > 1) {
      goto LABEL_31;
    }
    if (!v24) {
      goto LABEL_31;
    }
    if (*a4)
    {
      unsigned int v25 = WebCore::parseAVCCodecParameters();
      if (!HIBYTE(v25) || v25 > 0x64u || BYTE2(v25) >= 0x35u) {
        goto LABEL_31;
      }
    }
LABEL_46:
    uint64_t v29 = *(atomic_uchar **)(a1 + 16);
    if (v29) {
      JSValueRef v30 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v29);
    }
    else {
      JSValueRef v30 = 0;
    }
    uint64_t v31 = *(void *)(a1 + 32);
    (*(void (**)(uint64_t))(*(void *)v31 + 48))(v31);
    CFTypeRef v32 = malloc_type_malloc(0x40uLL, 0x10E004036D99432uLL);
    *CFTypeRef v32 = MEMORY[0x1E4F14398];
    v32[1] = 50331650;
    v32[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v32[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v32[4] = v30;
    v32[5] = a1;
    v32[6] = v31;
    v32[7] = a2;
    uint64_t v33 = *(atomic_uchar **)(a1 + 16);
    if (v33) {
      uint64_t v33 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v33);
    }
    v88[0] = (WTF::ThreadSafeWeakPtrControlBlock *)v33;
    v88[1] = (WTF::ThreadSafeWeakPtrControlBlock *)a1;
    uint64_t v34 = *(void *)(a1 + 32);
    (*(void (**)(uint64_t))(*(void *)v34 + 48))(v34);
    *(void *)&long long v89 = v34;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89 + 1, (uint64_t **)(a1 + 24));
    uint64_t v90 = a2;
    long long v74 = *(_OWORD *)v88;
    long long v35 = v89;
    *(_OWORD *)uint64_t v88 = 0u;
    long long v89 = 0u;
    char v37 = malloc_type_malloc(0x48uLL, 0x10E00405AF79D43uLL);
    void *v37 = MEMORY[0x1E4F14398];
    v37[1] = 50331650;
    v37[2] = WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)#1}::__invoke;
    v37[3] = &WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::descriptor;
    *((_OWORD *)v37 + 2) = v74;
    *((_OWORD *)v37 + 3) = v35;
    v37[8] = a2;
    __int16 v38 = (atomic_uchar **)*((void *)&v89 + 1);
    *((void *)&v89 + 1) = 0;
    if (v38) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v38);
    }
    uint64_t v39 = v89;
    *(void *)&long long v89 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 56))(v39);
    }
    uint64_t v40 = (atomic_uchar *)v88[0];
    v88[0] = 0;
    if (v40) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v40, v36);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v88, (uint64_t **)(a1 + 24));
    uint64_t v41 = v88[0];
    v88[0] = 0;
    v88[1] = a2;
    uint64_t v42 = malloc_type_malloc(0x30uLL, 0x10E0040AA5B57ACuLL);
    void *v42 = MEMORY[0x1E4F14398];
    v42[1] = 50331650;
    v42[2] = WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::{lambda(void *,unsigned char const*,unsigned long)#1}::__invoke;
    v42[3] = &WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::descriptor;
    v42[4] = v41;
    v42[5] = a2;
    uint64_t v43 = (atomic_uchar **)v88[0];
    v88[0] = 0;
    if (v43) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v43);
    }
    if (a3) {
      int v44 = "H265";
    }
    else {
      int v44 = "H264";
    }
    std::string::basic_string[abi:sn180100]<0>((char **)&__p, v44);
    webrtc::SdpVideoFormat::SdpVideoFormat();
    LocalEncoder = (webrtc *)webrtc::createLocalEncoder();
    webrtc::SdpVideoFormat::~SdpVideoFormat((webrtc::SdpVideoFormat *)v88);
    if (SBYTE7(v82) < 0)
    {
      operator delete(__p);
      if (LocalEncoder) {
        goto LABEL_63;
      }
    }
    else if (LocalEncoder)
    {
LABEL_63:
      webrtc::setLocalEncoderLowLatency(LocalEncoder, (void *)a6);
      __p = LocalEncoder;
      uint64_t v46 = *(void *)(a1 + 40);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v46 + 16));
      uint64_t v47 = WTF::fastMalloc((WTF *)0x50);
      unsigned int v48 = (uint64_t *)(a1 + 64);
      *(void *)uint64_t v47 = v46;
      WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v47 + 8), (const WTF::MachSendRight *)(a1 + 48));
      *(unsigned char *)(v47 + 12) = 1;
      *(unsigned char *)(v47 + 16) = 0;
      *(unsigned char *)(v47 + 24) = 0;
      *(void *)(v47 + 72) = 0;
      *(_OWORD *)(v47 + 32) = 0u;
      *(_OWORD *)(v47 + 48) = 0u;
      *(_DWORD *)(v47 + 64) = 0;
      v81 = (WebKit::SharedVideoFrameReader *)v47;
      long long v82 = 0u;
      long long v83 = 0u;
      uint64_t v50 = *(void *)(a1 + 64);
      if (v50
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v48),
            (uint64_t v50 = *v48) != 0))
      {
        int v51 = *(_DWORD *)(v50 - 8);
      }
      else
      {
        int v51 = 0;
      }
      unint64_t v52 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
      unint64_t v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
      unint64_t v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
      unsigned int v55 = v51 & ((v54 >> 31) ^ v54);
      uint64_t v56 = v50 + 56 * v55;
      uint64_t v57 = *(WTF::ThreadSafeWeakPtrControlBlock **)v56;
      if (*(void *)v56)
      {
        uint64_t v58 = 0;
        int v59 = 1;
        while (v57 != a2)
        {
          if (v57 == (WTF::ThreadSafeWeakPtrControlBlock *)-1) {
            uint64_t v58 = v56;
          }
          unsigned int v55 = (v55 + v59) & v51;
          uint64_t v56 = v50 + 56 * v55;
          uint64_t v57 = *(WTF::ThreadSafeWeakPtrControlBlock **)v56;
          ++v59;
          if (!*(void *)v56)
          {
            if (v58)
            {
              *(void *)(v58 + 48) = 0;
              *(_OWORD *)(v58 + 16) = 0u;
              *(_OWORD *)(v58 + 32) = 0u;
              *(_OWORD *)uint64_t v58 = 0u;
              --*(_DWORD *)(*v48 - 16);
              uint64_t v56 = v58;
            }
            goto LABEL_74;
          }
        }
        goto LABEL_81;
      }
LABEL_74:
      *(void *)uint64_t v56 = a2;
      uint64_t v61 = (WTF::ThreadSafeWeakPtrControlBlock *)__p;
      uint64_t v60 = v81;
      uint64_t v91 = 0;
      long long v78 = v82;
      v81 = 0;
      long long v82 = 0uLL;
      uint64_t v62 = v83;
      *(void *)&long long v83 = 0;
      int v63 = DWORD2(v83);
      DWORD2(v83) = 0;
      *(void *)(v56 + 8) = __p;
      v88[0] = v61;
      v88[1] = 0;
      std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)(v56 + 16), v60);
      long long v64 = *(_OWORD *)(v56 + 24);
      *(_OWORD *)(v56 + 24) = v78;
      long long v89 = v64;
      uint64_t v65 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v56 + 40);
      *(void *)(v56 + 40) = v62;
      uint64_t v90 = v65;
      LODWORD(v65) = *(_DWORD *)(v56 + 48);
      *(_DWORD *)(v56 + 48) = v63;
      LODWORD(v91) = v65;
      WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)v88, v66);
      uint64_t v67 = *v48;
      if (*v48) {
        int v68 = *(_DWORD *)(v67 - 12) + 1;
      }
      else {
        int v68 = 1;
      }
      *(_DWORD *)(v67 - 12) = v68;
      uint64_t v69 = *v48;
      if (*v48) {
        int v70 = *(_DWORD *)(v69 - 12);
      }
      else {
        int v70 = 0;
      }
      uint64_t v71 = (*(_DWORD *)(v69 - 16) + v70);
      unint64_t v72 = *(unsigned int *)(v69 - 4);
      if (v72 > 0x400)
      {
        if (v72 > 2 * v71) {
          goto LABEL_81;
        }
      }
      else if (3 * v72 > 4 * v71)
      {
LABEL_81:
        WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)&__p, v49);
        atomic_store(1u, (unsigned __int8 *)(a1 + 72));
        WTF::CompletionHandler<void ()(BOOL)>::operator()(a9);
LABEL_84:
        _Block_release(v42);
        _Block_release(v37);
        _Block_release(v32);
        goto LABEL_85;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v48);
      goto LABEL_81;
    }
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a9);
    goto LABEL_84;
  }
  if (!a8)
  {
    if (!*a4) {
      goto LABEL_46;
    }
    WebCore::parseHEVCCodecParameters();
    if (v92)
    {
      unsigned int v27 = WebCore::validateHEVCParameters();
      std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v88, v28);
      if (HIBYTE(v27)) {
        goto LABEL_46;
      }
    }
    else
    {
      std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v88, v26);
    }
  }
LABEL_31:
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a9);
LABEL_85:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v85, v86);
}

void sub_1989B9604(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,char a26,void *a27,uint64_t a28,WTF::ThreadSafeWeakPtrControlBlock *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
}

void WebKit::LibWebRTCCodecsProxy::releaseEncoder(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (uint64_t *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a2);
  if (v4) {
    char v7 = (uint64_t *)(v4 + 56 * *(unsigned int *)(v4 - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 == v5)
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    *(_OWORD *)int v24 = 0u;
    long long v25 = 0u;
    WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)v27, v6);
    goto LABEL_18;
  }
  long long v8 = *(_OWORD *)(v5 + 1);
  v5[2] = 0;
  *((void *)&v26 + 1) = 0;
  long long v9 = *(_OWORD *)(v5 + 3);
  *(_OWORD *)int v24 = v8;
  long long v25 = v9;
  v5[3] = 0;
  v5[4] = 0;
  *(void *)&long long v26 = v5[5];
  v5[5] = 0;
  DWORD2(v26) = *((_DWORD *)v5 + 12);
  *((_DWORD *)v5 + 12) = 0;
  if (*v3)
  {
    uint64_t v10 = *v3 + 56 * *(unsigned int *)(*v3 - 4);
    if ((uint64_t *)v10 == v5) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!v5) {
      goto LABEL_18;
    }
    uint64_t v10 = 0;
  }
  if ((uint64_t *)v10 != v5)
  {
    *uint64_t v5 = -1;
    WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)(v5 + 1), v6);
    ++*(_DWORD *)(*v3 - 16);
    uint64_t v11 = *v3;
    int v12 = *v3 ? *(_DWORD *)(v11 - 12) - 1 : -1;
    *(_DWORD *)(v11 - 12) = v12;
    uint64_t v13 = *v3;
    if (*v3)
    {
      unsigned int v14 = 6 * *(_DWORD *)(v13 - 12);
      unsigned int v15 = *(_DWORD *)(v13 - 4);
      if (v14 < v15 && v15 >= 9) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v15 >> 1);
      }
    }
  }
LABEL_18:
  if (v24[0])
  {
    webrtc::releaseLocalEncoder(v24[0], v6);
    uint64_t v17 = *(void *)(a1 + 32);
    long long v18 = v25;
    long long v25 = 0uLL;
    uint64_t v19 = v26;
    *(void *)&long long v26 = 0;
    int v20 = DWORD2(v26);
    DWORD2(v26) = 0;
    uint64_t v21 = WTF::fastMalloc((WTF *)0x28);
    *(void *)(v21 + 24) = v19;
    *(void *)(v21 + 32) = 0;
    *(void *)uint64_t v21 = &unk_1EE9B70D8;
    *(_OWORD *)(v21 + 8) = v18;
    *(_DWORD *)(v21 + 32) = v20;
    *(void *)&v27[0] = v21;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 32))(v17, v27);
    uint64_t v22 = *(void *)&v27[0];
    *(void *)&v27[0] = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    if (*v3 && *(_DWORD *)(*v3 - 12))
    {
      LOBYTE(v23) = 1;
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 56);
      if (v23) {
        LOBYTE(v23) = *(_DWORD *)(v23 - 12) != 0;
      }
    }
    atomic_store(v23, (unsigned __int8 *)(a1 + 72));
  }
  WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)v24, v6);
}

void sub_1989B9AC8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *WebKit::LibWebRTCCodecsProxy::initializeEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v14, a2);
  if (v14) {
    uint64_t v16 = (uint64_t *)(v14 + 56 * *(unsigned int *)(v14 - 4));
  }
  else {
    uint64_t v16 = 0;
  }
  if (v16 != result)
  {
    uint64_t v17 = result[1];
    return (uint64_t *)MEMORY[0x1F416B898](v17, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

void WebKit::LibWebRTCCodecsProxy::encodeFrame(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a1[8];
  int v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v11, a2);
  uint64_t v13 = v12;
  if (v11) {
    uint64_t v14 = (uint64_t *)(v11 + 56 * *(unsigned int *)(v11 - 4));
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 != v12)
  {
    ((void (*)(CFTypeRef *__return_ptr, uint64_t, uint64_t))WebKit::SharedVideoFrameReader::readBuffer)(&v29, v12[2], a3 + 24);
    if (v29)
    {
      unsigned int v15 = (WebCore *)((uint64_t (*)(void))*MEMORY[0x1E4FB6518])();
      if (v15 != 1111970369)
      {
LABEL_11:
        WTF::Deque<WTF::CompletionHandler<void ()(BOOL)>,0ul>::append((uint64_t)(v13 + 3), a8);
        WTF::MediaTime::toDouble((WTF::MediaTime *)a3);
        webrtc::encodeLocalEncoderFrame();
        goto LABEL_22;
      }
      long long v18 = (WebCore::PixelBufferConformerCV *)a1[10];
      uint64_t v16 = (WTF **)(a1 + 10);
      uint64_t v17 = v18;
      if (!v18)
      {
        uint64_t CoreVideo_kCVPixelBufferPixelFormatTypeKey = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(v15);
        v32[0] = &unk_1EEA52DB0;
        CFDictionaryRef v19 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&CoreVideo_kCVPixelBufferPixelFormatTypeKey count:1];
        uint64_t v17 = (WebCore::PixelBufferConformerCV *)WTF::fastMalloc((WTF *)8);
        WebCore::PixelBufferConformerCV::PixelBufferConformerCV(v17, v19);
        int v20 = *v16;
        uint64_t *v16 = v17;
        if (v20)
        {
          std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v16, v20);
          uint64_t v17 = *v16;
        }
      }
      WebCore::PixelBufferConformerCV::convert((uint64_t *)&cf, v17, (__CVBuffer *)v29);
      CFTypeRef v22 = cf;
      CFTypeRef v21 = v29;
      CFTypeRef cf = 0;
      CFTypeRef v29 = v22;
      if (v21)
      {
        CFRelease(v21);
        CFTypeRef v26 = cf;
        CFTypeRef cf = 0;
        if (v26) {
          CFRelease(v26);
        }
        if (v29) {
          goto LABEL_11;
        }
      }
      else if (v22)
      {
        goto LABEL_11;
      }
    }
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a8);
LABEL_22:
    CFTypeRef v27 = v29;
    CFTypeRef v29 = 0;
    if (v27) {
      CFRelease(v27);
    }
    return;
  }
  if (*(_DWORD *)(a3 + 40) == 1)
  {
    uint64_t v23 = a1[5] + 32;
    WTF::ApproximateTime::now((WTF::ApproximateTime *)v12);
    IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read(v23, (_OWORD *)(a3 + 24), &v30, v24 + 0.0);
    long long v25 = v30;
    JSValueRef v30 = 0;
    if (v25)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25 + 2);
        (*(void (**)(unsigned int *))(*(void *)v25 + 8))(v25);
      }
    }
  }
  WTF::CompletionHandler<void ()(BOOL)>::operator()(a8);
}

void sub_1989B9FBC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  WTF::fastFree(v10, a2);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Deque<WTF::CompletionHandler<void ()(BOOL)>,0ul>::append(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (!*(void *)result)
  {
    uint64_t v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1) {
        goto LABEL_20;
      }
    }
    else if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_20;
    }
LABEL_9:
    uint64_t v6 = v5;
    unint64_t v7 = ((unint64_t)v5 >> 2) + v5;
    if (v7 <= 0xF) {
      unint64_t v7 = 15;
    }
    if (v7 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return result;
    }
    long long v8 = *(WTF **)(result + 16);
    int v9 = v7 + 1;
    uint64_t v10 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
    *(_DWORD *)(v3 + 24) = v9;
    *(void *)(v3 + 16) = v10;
    unint64_t v11 = *(void *)(v3 + 8);
    if (*(void *)v3 <= v11)
    {
      uint64_t result = WTF::VectorMover<false,WTF::CompletionHandler<void ()(BOOL)>>::move((uint64_t)v8 + 8 * *(void *)v3, (uint64_t *)v8 + v11, &v10[*(void *)v3]);
      if (v8)
      {
LABEL_16:
        if (*(WTF **)(v3 + 16) == v8)
        {
          *(void *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        uint64_t result = WTF::fastFree(v8, v13);
      }
    }
    else
    {
      WTF::VectorMover<false,WTF::CompletionHandler<void ()(BOOL)>>::move((uint64_t)v8, (uint64_t *)v8 + v11, v10);
      uint64_t v12 = *(void *)v3 - v6 + *(unsigned int *)(v3 + 24);
      uint64_t result = WTF::VectorMover<false,WTF::CompletionHandler<void ()(BOOL)>>::move((uint64_t)v8 + 8 * *(void *)v3, (uint64_t *)v8 + v6, (uint64_t *)(*(void *)(v3 + 16) + 8 * v12));
      *(void *)uint64_t v3 = v12;
      if (v8) {
        goto LABEL_16;
      }
    }
    uint64_t v4 = *(void *)(v3 + 8);
    goto LABEL_20;
  }
  if (v4 + 1 == *(void *)result)
  {
    LODWORD(v5) = *(_DWORD *)(result + 24);
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v15 = *a2;
  *a2 = 0;
  *(void *)(v14 + 8 * v4) = v15;
  if (v4 == *(unsigned int *)(v3 + 24) - 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v4 + 1;
  }
  *(void *)(v3 + 8) = v16;
  return result;
}

uint64_t WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(atomic_uchar **)(a1 + 16);
  if (v7) {
    long long v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
  }
  else {
    long long v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v9 = &unk_1EE9B7100;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = a1;
  *(void *)(v9 + 32) = a2;
  *(unsigned char *)(v9 + 40) = a3;
  uint64_t v11 = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, &v11);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1989BA248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LibWebRTCCodecsProxy::flushEncoder(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, a2);
  if (v5) {
    unint64_t v7 = (uint64_t *)(v5 + 56 * *(unsigned int *)(v5 - 4));
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7 != v6) {
    MEMORY[0x19972F370](v6[1]);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v10, a3);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 32))(v8, &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1989BA370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LibWebRTCCodecsProxy::setEncodeRates(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, a2);
  if (v7) {
    uint64_t v9 = (uint64_t *)(v7 + 56 * *(unsigned int *)(v7 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v8) {
    webrtc::setLocalEncoderRates((webrtc *)v8[1], a3);
  }

  return WTF::CompletionHandler<void ()(void)>::operator()(a5);
}

void sub_1989BA430(_Unwind_Exception *a1)
{
  WTF::CompletionHandler<void ()(void)>::operator()(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameSemaphore(uint64_t a1, uint64_t a2, IPC::Semaphore *a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a2);
  if (v4) {
    uint64_t v6 = (uint64_t *)(v4 + 56 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != result)
  {
    uint64_t v7 = (IPC::Semaphore *)(result[2] + 16);
    return (uint64_t *)std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>(v7, a3);
  }
  return result;
}

uint64_t *WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v2, a2);
  if (v2) {
    uint64_t v4 = (uint64_t *)(v2 + 56 * *(unsigned int *)(v2 - 4));
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 != result)
  {
    uint64_t v5 = result[2];
    return (uint64_t *)WebKit::SharedVideoFrameReader::setSharedMemory(v5);
  }
  return result;
}

uint64_t IPC::MessageReceiver::didReceiveSyncMessage()
{
  return 0;
}

void IPC::WorkQueueMessageReceiver::~WorkQueueMessageReceiver(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;
  uint64_t vars8;

  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  WTF::fastFree((WTF *)this, v3);
}

void IPC::MessageReceiver::~MessageReceiver(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  uint64_t vars8;

  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::LibWebRTCCodecsProxy::Decoder *)(a1 + 8);
    do
    {
      if (*((void *)v4 - 1) != -1) {
        WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder(v4, a2);
      }
      uint64_t v4 = (WebKit::LibWebRTCCodecsProxy::Decoder *)((char *)v4 + 56);
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = *(const void **)this;
    *(void *)this = 0;
    if (v3) {
      CFRelease(v3);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::LibWebRTCCodecsProxy::Encoder *)(a1 + 8);
    do
    {
      if (*((void *)v4 - 1) != -1) {
        WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder(v4, a2);
      }
      uint64_t v4 = (WebKit::LibWebRTCCodecsProxy::Encoder *)((char *)v4 + 56);
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_0,void,WebCore::FrameRateMonitor::LateFrameInfo>::call(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  long long v6 = a2[1];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v3 = &unk_1EE9B6EF0;
  *(void *)(v3 + 8) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  uint64_t v7 = v3;
  WTF::callOnMainRunLoop();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_1989BA820(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

double _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20LibWebRTCCodecsProxy21createDecoderCallbackENS_23ObjectIdentifierGenericINS2_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbbENK3__0clIN7WebCore16FrameRateMonitor13LateFrameInfoEEEDaT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(double *)(a1 + 16);
    double v4 = *(double *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 134219264;
    uint64_t v10 = v6;
    __int16 v11 = 2048;
    double v12 = v5;
    __int16 v13 = 2048;
    double v14 = v4;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    double v18 = (v5 - v4) * 1000.0;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "LibWebRTCCodecsProxy decoder %llu generated a video frame at %f, previous frame was at %f, observed frame rate is %f, delay since last frame is %f ms, frame count is %lu", (uint8_t *)&v9, 0x3Eu);
  }
  return result;
}

uint64_t std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 3);
  if ((WTF *)((char *)this + 40) != v3 && v3 != 0)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::BlockPtr<void ()(__CVBuffer *,long long,long long,BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = (WTF *)a1[10];
  a1[10] = 0;
  if (v3) {
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100](v3, a2);
  }
  uint64_t v4 = a1[9];
  a1[9] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
  uint64_t v6 = (atomic_uchar **)a1[7];
  a1[7] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v6);
  }
  double result = (atomic_uchar *)a1[4];
  a1[4] = 0;
  if (result)
  {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v5);
  }
  return result;
}

uint64_t **WTF::BlockPtr<void ()(__CVBuffer *,long long,long long,BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1>(WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1)::{lambda(void *,__CVBuffer *,long long,long long,BOOL)#1}::__invoke(void *a1, CFTypeRef a2, uint64_t a3, uint64_t a4, char a5)
{
  CFTypeRef v40 = a2;
  char v39 = a5;
  uint64_t v8 = (atomic_uchar *)a1[4];
  if (v8)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v38, v8, a1[5]);
    a2 = v40;
  }
  else
  {
    uint64_t v38 = 0;
  }
  int v9 = a1 + 6;
  v36[0] = &v38;
  v36[1] = (uint64_t *)&v40;
  v36[2] = (uint64_t *)&v39;
  v36[3] = a1 + 6;
  char v37 = 1;
  if (a2)
  {
    uint64_t v10 = (WebCore::FrameRateMonitor *)a1[10];
    if (v10)
    {
      WebCore::FrameRateMonitor::update(v10);
      a2 = v40;
      uint64_t v41 = (void *)v40;
      if (!v40)
      {
LABEL_12:
        LOBYTE(v33) = 0;
        char v34 = 0;
        WebCore::VideoFrameCV::create();
        double v12 = v41;
        uint64_t v41 = 0;
        if (v12) {
          CFRelease(v12);
        }
        if (WebCore::ProcessIdentity::operator BOOL()) {
          WebCore::VideoFrameCV::setOwnershipIdentity();
        }
        uint64_t v13 = a1[9];
        if (v13)
        {
          uint64_t v14 = (uint64_t)v35;
          long long v35 = 0;
          uint64_t v41 = (void *)v14;
          WebKit::RemoteVideoFrameObjectHeap::add(v13, (uint64_t *)&v41, (uint64_t)&v33);
          __int16 v15 = (unsigned int *)v41;
          uint64_t v41 = 0;
          if (v15 && atomic_fetch_add((atomic_uint *volatile)v15 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15 + 2);
            (*(void (**)(unsigned int *))(*(void *)v15 + 8))(v15);
          }
          uint64_t v16 = a1[7];
          __int16 v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)__int16 v17 = 133;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 66) = (char *)v17 + 16;
          *((void *)v17 + 67) = 512;
          *((void *)v17 + 68) = 0;
          *((void *)v17 + 70) = 0;
          *((void *)v17 + 69) = 0;
          IPC::Encoder::encodeHeader(v17);
          uint64_t v41 = v17;
          IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v17, v9);
          IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v17, a3);
          IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v17, a4);
          IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(v17, (uint64_t)&v33);
          IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v41, 0, 0);
          __int16 v19 = (IPC::Encoder *)v41;
          uint64_t v41 = 0;
          if (v19)
          {
            IPC::Encoder::~Encoder(v19, v18);
            WTF::fastFree(v20, v21);
          }
          goto LABEL_26;
        }
        uint64_t v22 = a1[7];
        CFTypeRef v23 = v40;
        if (v40) {
          CFRetain(v40);
        }
        double v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)double v24 = 134;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 66) = (char *)v24 + 16;
        *((void *)v24 + 67) = 512;
        *((void *)v24 + 68) = 0;
        *((void *)v24 + 70) = 0;
        *((void *)v24 + 69) = 0;
        IPC::Encoder::encodeHeader(v24);
        uint64_t v33 = v24;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v24, v9);
        IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v24, a3);
        IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v24, a4);
        IPC::ArgumentCoder<__CVBuffer *,void>::encode((uint64_t)v24, v23);
        IPC::Connection::sendMessageImpl(v22, (uint64_t *)&v33, 0, 0);
        CFTypeRef v26 = v33;
        uint64_t v33 = 0;
        if (v26)
        {
          IPC::Encoder::~Encoder(v26, v25);
          WTF::fastFree(v31, v32);
          if (!v23) {
            goto LABEL_26;
          }
        }
        else if (!v23)
        {
LABEL_26:
          CFTypeRef v27 = v35;
          long long v35 = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v27 + 2);
            (*(void (**)(unsigned int *))(*(void *)v27 + 8))(v27);
          }
          goto LABEL_29;
        }
        CFRelease(v23);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v41 = (void *)a2;
    }
    CFRetain(a2);
    goto LABEL_12;
  }
  if (!v39)
  {
    uint64_t v11 = a1[7];
    uint64_t v33 = (IPC::Encoder *)(a1 + 6);
    IPC::Connection::send<Messages::LibWebRTCCodecs::FailedDecoding>(v11, (uint64_t **)&v33);
  }
LABEL_29:
  double result = WTF::ScopeExit<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1::operator()(__CVBuffer *,long long,long long,BOOL)::{lambda(void)#1}>::~ScopeExit(v36);
  uint64_t v30 = v38;
  uint64_t v38 = 0;
  if (v30) {
    return (uint64_t **)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v30 + 16), v29);
  }
  return result;
}

void sub_1989BADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  WTF::ScopeExit<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1::operator()(__CVBuffer *,long long,long long,BOOL)::{lambda(void)#1}>::~ScopeExit((uint64_t **)va);
  uint64_t v13 = *(void *)(v10 - 80);
  *(void *)(v10 - 80) = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v13 + 16), v12);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCCodecs::FailedDecoding>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 136;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v9 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  double result = v9;
  int v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void sub_1989BAF40(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t **WTF::ScopeExit<WebKit::LibWebRTCCodecsProxy::createDecoderCallback(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL)::$_1::operator()(__CVBuffer *,long long,long long,BOOL)::{lambda(void)#1}>::~ScopeExit(uint64_t **a1)
{
  if (*((unsigned char *)a1 + 32))
  {
    uint64_t v2 = **a1;
    if (v2)
    {
      if (*a1[1])
      {
        if (*(unsigned char *)a1[2]) {
          return a1;
        }
        BOOL v3 = 1;
      }
      else
      {
        BOOL v3 = *(unsigned char *)a1[2] != 0;
      }
      uint64_t v4 = *a1[3];
      uint64_t v5 = *(void *)(v2 + 32);
      uint64_t v6 = *(atomic_uchar **)(v2 + 16);
      if (v6) {
        uint64_t v7 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
      *(void *)uint64_t v8 = &unk_1EE9B7128;
      *(void *)(v8 + 8) = v2;
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = v2;
      *(void *)(v8 + 32) = v4;
      *(unsigned char *)(v8 + 40) = v3;
      uint64_t v11 = v8;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, &v11);
      uint64_t v9 = v11;
      uint64_t v11 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
  }
  return a1;
}

void sub_1989BB084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebCore::HEVCParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    BOOL v3 = *(WTF **)(a1 + 16);
    if ((WTF *)(a1 + 32) != v3 && v3 != 0)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::createDecoder(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,BOOL,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::FrameRateMonitor::LateFrameInfo>::call(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  long long v6 = a2[1];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v3 = &unk_1EE9B6F60;
  *(void *)(v3 + 8) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  uint64_t v7 = v3;
  WTF::callOnMainRunLoop();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_1989BB1C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

double _ZN3WTF6Detail15CallableWrapperIZZN6WebKit20LibWebRTCCodecsProxy13createDecoderENS_23ObjectIdentifierGenericINS2_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEENK3__0clINSA_16FrameRateMonitor13LateFrameInfoEEEDaT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(double *)(a1 + 16);
    double v4 = *(double *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 134219264;
    uint64_t v10 = v6;
    __int16 v11 = 2048;
    double v12 = v5;
    __int16 v13 = 2048;
    double v14 = v4;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    double v18 = (v5 - v4) * 1000.0;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "LibWebRTCCodecsProxy decoder %llu received a compressed frame at %f, previous frame was at %f, observed frame rate is %f, delay since last frame is %f ms, frame count is %lu", (uint8_t *)&v9, 0x3Eu);
  }
  return result;
}

void WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder(WebKit::LibWebRTCCodecsProxy::Decoder *this, void *a2)
{
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  double v5 = (WTF *)*((void *)this + 4);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_16;
    }
    uint64_t v8 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v9 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v10 = *v8;
      *uint64_t v8 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)v5;
        *(void *)double v5 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        double v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      double v5 = (WTF *)*((void *)this + 4);
      unint64_t v3 = *((void *)this + 2);
    }
    uint64_t v11 = *((unsigned int *)this + 10);
    if (v3 != v11)
    {
      double v14 = (uint64_t *)((char *)v5 + 8 * v3);
      uint64_t v15 = 8 * v11 - 8 * v3;
      do
      {
        uint64_t v16 = *v14;
        uint64_t *v14 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  double v5 = (WTF *)*((void *)this + 4);
LABEL_16:
  if (v5)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v5, a2);
  }
  double v12 = (WTF *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v12) {
    std::default_delete<WebCore::FrameRateMonitor>::operator()[abi:sn180100](v12, a2);
  }
  uint64_t v13 = *(void *)this;
  *(void *)this = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
}

atomic_uchar *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  double result = *(atomic_uchar **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  }
  return result;
}

atomic_uchar *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(atomic_uchar *result, char a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)result + 4);
  if (v3)
  {
    unint64_t v4 = result;
    double result = (atomic_uchar *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v8, v3, *((void *)result + 5));
    uint64_t v5 = v8;
    if (v8)
    {
      WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(v8, *((void *)v4 + 7), a2);
      uint64_t v7 = *(atomic_uchar **)(v5 + 16);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(v7, v6);
    }
  }
  return result;
}

void sub_1989BB58C(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 16), a2);
  _Unwind_Resume(a1);
}

atomic_uchar *WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void const*)#1}::__invoke(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar **)a1[7];
  a1[7] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  double result = (atomic_uchar *)a1[4];
  a1[4] = 0;
  if (result)
  {
    return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, a2);
  }
  return result;
}

IPC::Encoder *WTF::BlockPtr<void ()(unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1)::{lambda(void *,unsigned char const*,unsigned long,webrtc::WebKitEncodedFrameInfo const&)#1}::__invoke(void *a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8 = a1[7];
  uint64_t v9 = a1 + 8;
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 135;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  double v18 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, v9);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, a2, a3);
  IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::encode(v10, a4);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v18, 0, 0);
  double result = v18;
  double v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    double result = (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  uint64_t v13 = (atomic_uchar *)a1[4];
  if (v13)
  {
    double result = (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v13, a1[5]);
    double v14 = v18;
    if (v18)
    {
      WebKit::LibWebRTCCodecsProxy::notifyEncoderResult((uint64_t)v18, *v9, 1);
      return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*((atomic_uchar **)v14 + 2), v15);
    }
  }
  return result;
}

void sub_1989BB744(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 16), a2);
  _Unwind_Resume(a1);
}

atomic_uchar *WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::{lambda(void const*)#1}::__invoke(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar **)*((void *)result + 4);
  *((void *)result + 4) = 0;
  if (v1) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v1);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(unsigned char const*,unsigned long)>::fromCallable<WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2>(WebKit::LibWebRTCCodecsProxy::createEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::VideoCodecType,WTF::String const&,WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::CompletionHandler<void ()(BOOL)> &&)::$_2)::{lambda(void *,unsigned char const*,unsigned long)#1}::__invoke(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (uint64_t *)(a1 + 40);
  uint64_t v14 = 0x101010101020100;
  char v15 = 1;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 137;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v16 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, v6);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, a2, a3);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = 1;
    IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(v7, (char *)&v14);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v16, 0, 0);
    uint64_t result = (uint64_t)v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_1989BB8AC(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

char **std::string::basic_string[abi:sn180100]<0>(char **a1, char *__s)
{
  if (!__s) {
    goto LABEL_15;
  }
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_16;
  }
  size_t v5 = v4;
  if (v4 > 0x16)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (char *)operator new(v7 + 1);
    a1[1] = (char *)v5;
    a1[2] = (char *)(v8 | 0x8000000000000000);
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = (char *)a1;
  }
  uint64_t v9 = &v6[v5];
  if (v6 <= __s && v9 > __s)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    abort();
  }
  if (v5) {
    memmove(v6, __s, v5);
  }
  char *v9 = 0;
  return a1;
}

void WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder(WebKit::LibWebRTCCodecsProxy::Encoder *this, void *a2)
{
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  size_t v5 = (WTF *)*((void *)this + 4);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_16;
    }
    uint64_t v8 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v9 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v10 = *v8;
      *uint64_t v8 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)v5;
        *(void *)size_t v5 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        size_t v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      size_t v5 = (WTF *)*((void *)this + 4);
      unint64_t v3 = *((void *)this + 2);
    }
    uint64_t v11 = *((unsigned int *)this + 10);
    if (v3 != v11)
    {
      double v12 = (uint64_t *)((char *)v5 + 8 * v3);
      uint64_t v13 = 8 * v11 - 8 * v3;
      do
      {
        uint64_t v14 = *v12;
        *double v12 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  size_t v5 = (WTF *)*((void *)this + 4);
LABEL_16:
  if (v5)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v5, a2);
  }
  std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100]((WebKit::SharedVideoFrameReader **)this + 1, 0);
}

IPC::Semaphore *std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>(IPC::Semaphore *a1, IPC::Semaphore *a2)
{
  if (*((unsigned char *)a1 + 8)) {
    return IPC::Semaphore::operator=(a1, a2);
  }
  uint64_t result = (IPC::Semaphore *)WTF::MachSendRight::MachSendRight();
  int v4 = *((_DWORD *)a2 + 1);
  *((_DWORD *)a2 + 1) = 0;
  *((_DWORD *)result + 1) = v4;
  *((unsigned char *)result + 8) = 1;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B6FE8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B6FE8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0::operator()(*(void *)(a1 + 8));
}

void *WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(WTF::Ref<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>> &&)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v2);
  size_t v5 = v3;
  uint64_t v6 = v4;
  uint64_t v7 = 0;
  if (v2) {
    uint64_t v7 = &v2[7 * *((unsigned int *)v2 - 1)];
  }
  if (v7 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v14 = v5[3];
        if (v14 == v5[4]) {
          break;
        }
        uint64_t v15 = v5[5];
        uint64_t v16 = *(void *)(v15 + 8 * v14);
        *(void *)(v15 + 8 * v14) = 0;
        CFTypeRef v27 = (void *)v16;
        uint64_t v17 = v5[5];
        uint64_t v18 = *(void *)(v17 + 8 * v14);
        *(void *)(v17 + 8 * v14) = 0;
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          uint64_t v14 = v5[3];
        }
        if (v14 == *((unsigned int *)v5 + 12) - 1) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v14 + 1;
        }
        v5[3] = v19;
        WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)&v27);
        uint64_t v20 = (uint64_t)v27;
        CFTypeRef v27 = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
      }
      while (1)
      {
        v5 += 7;
        if (v5 == v6) {
          break;
        }
        if ((unint64_t)(*v5 + 1) > 1) {
          goto LABEL_24;
        }
      }
      size_t v5 = v6;
LABEL_24:
      ;
    }
    while (v5 != v7);
  }
  if (v2) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)v2, v4);
  }
  uint64_t v8 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v8);
  uint64_t v11 = result;
  double v12 = v10;
  uint64_t v13 = 0;
  if (v8) {
    uint64_t v13 = &v8[7 * *((unsigned int *)v8 - 1)];
  }
  if (v13 != result)
  {
    do
    {
      uint64_t result = (void *)webrtc::releaseLocalEncoder((webrtc *)v11[1], v10);
      while (1)
      {
        uint64_t v21 = v11[3];
        if (v21 == v11[4]) {
          break;
        }
        uint64_t v22 = v11[5];
        uint64_t v23 = *(void *)(v22 + 8 * v21);
        *(void *)(v22 + 8 * v21) = 0;
        CFTypeRef v27 = (void *)v23;
        uint64_t v24 = v11[5];
        uint64_t v25 = *(void *)(v24 + 8 * v21);
        *(void *)(v24 + 8 * v21) = 0;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          uint64_t v21 = v11[3];
        }
        if (v21 == *((unsigned int *)v11 + 12) - 1) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = v21 + 1;
        }
        v11[3] = v26;
        WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)&v27);
        uint64_t result = v27;
        CFTypeRef v27 = 0;
        if (result) {
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
      while (1)
      {
        v11 += 7;
        if (v11 == v12) {
          break;
        }
        if ((unint64_t)(*v11 + 1) > 1) {
          goto LABEL_39;
        }
      }
      uint64_t v11 = v12;
LABEL_39:
      ;
    }
    while (v11 != v13);
  }
  if (v8) {
    return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)v8, v10);
  }
  return result;
}

void sub_1989BBE78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(void *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[7 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[7 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 56 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 7;
      v4 -= 56;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v3 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v2 = v3 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v3));
  }
  else {
    unsigned int v2 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 56 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      double v12 = (uint64_t *)(v4 + 56 * i);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = (uint64_t *)(v14 + 56 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          uint64_t v23 = v14 + 56 * v21;
          WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder((WebKit::LibWebRTCCodecsProxy::Decoder *)(v23 + 8), v8);
          uint64_t *v22 = *v12;
          uint64_t v24 = v4 + 56 * i;
          uint64_t v25 = *(void *)(v24 + 8);
          v24 += 8;
          *(void *)uint64_t v24 = 0;
          *(void *)(v23 + 8) = v25;
          uint64_t v26 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v23 + 16) = v26;
          *(_OWORD *)(v23 + 24) = 0u;
          *(_OWORD *)(v23 + 40) = 0u;
          *(void *)(v23 + 24) = *(void *)(v24 + 16);
          *(void *)(v24 + 16) = 0;
          uint64_t v27 = *(void *)(v23 + 32);
          uint64_t v28 = *(void *)(v24 + 32);
          *(void *)(v23 + 32) = *(void *)(v24 + 24);
          *(void *)(v23 + 40) = v28;
          *(void *)(v24 + 24) = v27;
          *(void *)(v24 + 32) = 0;
          *(_DWORD *)(v23 + 48) = *(_DWORD *)(v24 + 40);
          *(_DWORD *)(v24 + 40) = 0;
          WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder((WebKit::LibWebRTCCodecsProxy::Decoder *)v24, v29);
        }
        else
        {
          WebKit::LibWebRTCCodecsProxy::Decoder::~Decoder((WebKit::LibWebRTCCodecsProxy::Decoder *)(v4 + 56 * i + 8), v8);
        }
      }
    }
  }
  else if (!v4)
  {
    return;
  }

  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = (uint64_t *)(a1 + 56 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v9) & v2;
      uint64_t v7 = (uint64_t *)(a1 + 56 * v6);
      uint64_t v8 = *v7;
      ++v9;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 56 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseDecoder(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9B7010;
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(WTF **)(a1 + 24);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_16;
    }
    uint64_t v8 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v9 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v10 = *v8;
      *uint64_t v8 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)v5;
        *(void *)unint64_t v5 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        unint64_t v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      unint64_t v5 = *(WTF **)(a1 + 24);
      unint64_t v3 = *(void *)(a1 + 8);
    }
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    if (v3 != v11)
    {
      uint64_t v13 = (uint64_t *)((char *)v5 + 8 * v3);
      uint64_t v14 = 8 * v11 - 8 * v3;
      do
      {
        uint64_t v15 = *v13;
        uint64_t *v13 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  unint64_t v5 = *(WTF **)(a1 + 24);
LABEL_16:
  if (v5)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseDecoder(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B7010;
  unint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  unint64_t v5 = (WTF *)*((void *)this + 3);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_16;
    }
    uint64_t v8 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v9 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v10 = *v8;
      *uint64_t v8 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)v5;
        *(void *)unint64_t v5 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        unint64_t v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      unint64_t v5 = (WTF *)*((void *)this + 3);
      unint64_t v3 = *((void *)this + 1);
    }
    uint64_t v11 = *((unsigned int *)this + 8);
    if (v3 != v11)
    {
      uint64_t v13 = (uint64_t *)((char *)v5 + 8 * v3);
      uint64_t v14 = 8 * v11 - 8 * v3;
      do
      {
        uint64_t v15 = *v13;
        uint64_t *v13 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  unint64_t v5 = (WTF *)*((void *)this + 3);
LABEL_16:
  if (v5)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseDecoder(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(void *result)
{
  uint64_t v1 = result[1];
  if (v1 != result[2])
  {
    int v2 = result;
    do
    {
      uint64_t v3 = v2[3];
      uint64_t v4 = *(void *)(v3 + 8 * v1);
      *(void *)(v3 + 8 * v1) = 0;
      uint64_t v8 = (void *)v4;
      uint64_t v5 = v2[3];
      uint64_t v6 = *(void *)(v5 + 8 * v1);
      *(void *)(v5 + 8 * v1) = 0;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        uint64_t v1 = v2[1];
      }
      if (v1 == *((unsigned int *)v2 + 8) - 1) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v1 + 1;
      }
      v2[1] = v7;
      WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)&v8);
      uint64_t result = v8;
      uint64_t v8 = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v1 = v2[1];
    }
    while (v1 != v2[2]);
  }
  return result;
}

void sub_1989BC648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::flushDecoder(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  (*(void (**)(void))(**(void **)a2 + 16))();
  uint64_t v4 = *(void *)(v3 + 32);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v6, *(uint64_t **)(a1 + 16));
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1989BC754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::setDecoderFormatDescription(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,unsigned short,unsigned short)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)*a2 + 24))(*a2, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), **(unsigned __int16 **)(a1 + 16), **(unsigned __int16 **)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::decodeFrame(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,long long,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9B7088;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::decodeFrame(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,long long,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9B7088;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::decodeFrame(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,long long,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (WebCore::FrameRateMonitor *)a2[1];
  if (v6) {
    WebCore::FrameRateMonitor::update(v6);
  }
  if ((*(unsigned int (**)(void, void, void, void))(*(void *)*a2 + 32))(*a2, **(void **)(a1 + 16), **(void **)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 8)))
  {
    uint64_t v7 = *(void *)(v5 + 24);
    uint64_t v9 = *(uint64_t **)(a1 + 40);
    IPC::Connection::send<Messages::LibWebRTCCodecs::FailedDecoding>(v7, &v9);
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(v4);
  }
  else
  {
    return WTF::Deque<WTF::CompletionHandler<void ()(BOOL)>,0ul>::append((uint64_t)(a2 + 2), v4);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::setFrameSize(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned short,unsigned short)::$_0,void,WebKit::LibWebRTCCodecsProxy::Decoder &>::call(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)*a2 + 40))(*a2, **(unsigned __int16 **)(a1 + 8), **(unsigned __int16 **)(a1 + 16));
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:sn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:sn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (a1)
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v2 = *(void **)a1;
      operator delete(v2);
    }
  }
  else
  {
    __break(1u);
  }
}

void *std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(void *result, void **__s2)
{
  if (*((char *)result + 23) < 0)
  {
    size_t v3 = result[1];
    if ((v3 & 0x8000000000000000) != 0) {
      goto LABEL_15;
    }
    uint64_t result = (void *)*result;
    if (v3 && result == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    size_t v3 = *((unsigned __int8 *)result + 23);
  }
  if ((*((char *)__s2 + 23) & 0x80000000) == 0)
  {
    size_t v5 = *((unsigned __int8 *)__s2 + 23);
    return (void *)std::operator<=>[abi:sn180100]<char,std::char_traits<char>>(result, v3, __s2, v5);
  }
  size_t v5 = (size_t)__s2[1];
  if ((v5 & 0x8000000000000000) == 0)
  {
    __s2 = (void **)*__s2;
    if (!v5 || __s2) {
      return (void *)std::operator<=>[abi:sn180100]<char,std::char_traits<char>>(result, v3, __s2, v5);
    }
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t std::operator<=>[abi:sn180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      size_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              size_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            v2[2] = (uint64_t)v9;
            size_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *size_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            size_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          size_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:sn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v3 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v2 = v3 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v3));
  }
  else {
    unsigned int v2 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Encoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Encoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 56 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v12 = (uint64_t *)(v4 + 56 * i);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = (uint64_t *)(v14 + 56 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          uint64_t v23 = v14 + 56 * v21;
          WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)(v23 + 8), v8);
          uint64_t *v22 = *v12;
          uint64_t v24 = v4 + 56 * i;
          uint64_t v25 = *(void *)(v24 + 8);
          v24 += 8;
          *(void *)(v23 + 8) = v25;
          uint64_t v26 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v23 + 16) = v26;
          *(_OWORD *)(v23 + 24) = 0u;
          *(_OWORD *)(v23 + 40) = 0u;
          *(void *)(v23 + 24) = *(void *)(v24 + 16);
          *(void *)(v24 + 16) = 0;
          uint64_t v27 = *(void *)(v23 + 32);
          uint64_t v28 = *(void *)(v24 + 32);
          *(void *)(v23 + 32) = *(void *)(v24 + 24);
          *(void *)(v23 + 40) = v28;
          *(void *)(v24 + 24) = v27;
          *(void *)(v24 + 32) = 0;
          *(_DWORD *)(v23 + 48) = *(_DWORD *)(v24 + 40);
          *(_DWORD *)(v24 + 40) = 0;
          WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)v24, v29);
        }
        else
        {
          WebKit::LibWebRTCCodecsProxy::Encoder::~Encoder((WebKit::LibWebRTCCodecsProxy::Encoder *)(v4 + 56 * i + 8), v8);
        }
      }
    }
  }
  else if (!v4)
  {
    return;
  }

  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9B70D8;
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(WTF **)(a1 + 24);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_16;
    }
    int v8 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v9 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v10 = *v8;
      *int v8 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)v5;
        *(void *)int v5 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        int v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      int v5 = *(WTF **)(a1 + 24);
      unint64_t v3 = *(void *)(a1 + 8);
    }
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    if (v3 != v11)
    {
      uint64_t v13 = (uint64_t *)((char *)v5 + 8 * v3);
      uint64_t v14 = 8 * v11 - 8 * v3;
      do
      {
        uint64_t v15 = *v13;
        uint64_t *v13 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  int v5 = *(WTF **)(a1 + 24);
LABEL_16:
  if (v5)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B70D8;
  unint64_t v3 = *((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  int v5 = (WTF *)*((void *)this + 3);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_16;
    }
    int v8 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v9 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v10 = *v8;
      *int v8 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)v5;
        *(void *)int v5 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        int v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      int v5 = (WTF *)*((void *)this + 3);
      unint64_t v3 = *((void *)this + 1);
    }
    uint64_t v11 = *((unsigned int *)this + 8);
    if (v3 != v11)
    {
      uint64_t v13 = (uint64_t *)((char *)v5 + 8 * v3);
      uint64_t v14 = 8 * v11 - 8 * v3;
      do
      {
        uint64_t v15 = *v13;
        uint64_t *v13 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  int v5 = (WTF *)*((void *)this + 3);
LABEL_16:
  if (v5)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::releaseEncoder(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(void *result)
{
  uint64_t v1 = result[1];
  if (v1 != result[2])
  {
    unsigned int v2 = result;
    do
    {
      uint64_t v3 = v2[3];
      uint64_t v4 = *(void *)(v3 + 8 * v1);
      *(void *)(v3 + 8 * v1) = 0;
      int v8 = (void *)v4;
      uint64_t v5 = v2[3];
      uint64_t v6 = *(void *)(v5 + 8 * v1);
      *(void *)(v5 + 8 * v1) = 0;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        uint64_t v1 = v2[1];
      }
      if (v1 == *((unsigned int *)v2 + 8) - 1) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v1 + 1;
      }
      v2[1] = v7;
      WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)&v8);
      uint64_t result = v8;
      int v8 = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v1 = v2[1];
    }
    while (v1 != v2[2]);
  }
  return result;
}

void sub_1989BD374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B7100;
  uint64_t v3 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B7100;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyEncoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(atomic_uchar **)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8);
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v1, *(void *)(result + 24));
    uint64_t v4 = v18;
    if (v18)
    {
      uint64_t v5 = *(void *)(v3 + 64);
      uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, *(void *)(v2 + 32));
      int v8 = v6;
      if (v5) {
        uint64_t v9 = (uint64_t *)(v5 + 56 * *(unsigned int *)(v5 - 4));
      }
      else {
        uint64_t v9 = 0;
      }
      if (v9 != v6)
      {
        uint64_t v10 = v6[3];
        if (v10 == v6[4])
        {
          uint64_t result = 80;
          __break(0xC471u);
          return result;
        }
        uint64_t v11 = v6[5];
        uint64_t v12 = *(void *)(v11 + 8 * v10);
        *(void *)(v11 + 8 * v10) = 0;
        uint64_t v17 = v12;
        uint64_t v13 = v6[5];
        uint64_t v14 = *(void *)(v13 + 8 * v10);
        *(void *)(v13 + 8 * v10) = 0;
        if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          uint64_t v10 = v8[3];
        }
        if (v10 == *((unsigned int *)v8 + 12) - 1) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v10 + 1;
        }
        v8[3] = v15;
        WTF::CompletionHandler<void ()(BOOL)>::operator()(&v17);
        uint64_t v16 = v17;
        uint64_t v17 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), v7);
    }
  }
  return result;
}

void sub_1989BD5BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 16), a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyDecoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B7128;
  uint64_t v3 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyDecoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B7128;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecsProxy::notifyDecoderResult(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(atomic_uchar **)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8);
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v18, v1, *(void *)(result + 24));
    uint64_t v4 = v18;
    if (v18)
    {
      uint64_t v5 = *(void *)(v3 + 56);
      uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, *(void *)(v2 + 32));
      int v8 = v6;
      if (v5) {
        uint64_t v9 = (uint64_t *)(v5 + 56 * *(unsigned int *)(v5 - 4));
      }
      else {
        uint64_t v9 = 0;
      }
      if (v9 != v6)
      {
        uint64_t v10 = v6[3];
        if (v10 == v6[4])
        {
          uint64_t result = 80;
          __break(0xC471u);
          return result;
        }
        uint64_t v11 = v6[5];
        uint64_t v12 = *(void *)(v11 + 8 * v10);
        *(void *)(v11 + 8 * v10) = 0;
        uint64_t v17 = v12;
        uint64_t v13 = v6[5];
        uint64_t v14 = *(void *)(v13 + 8 * v10);
        *(void *)(v13 + 8 * v10) = 0;
        if (v14)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          uint64_t v10 = v8[3];
        }
        if (v10 == *((unsigned int *)v8 + 12) - 1) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v10 + 1;
        }
        v8[3] = v15;
        WTF::CompletionHandler<void ()(BOOL)>::operator()(&v17);
        uint64_t v16 = v17;
        uint64_t v17 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), v7);
    }
  }
  return result;
}

void sub_1989BD80C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 16), a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v5 = *a2;
  *a2 = 0;
  *uint64_t v4 = &unk_1EE9B7150;
  v4[1] = v5;
  if (v5)
  {
    *a1 = v4;
    return (uint64_t)a1;
  }
  else
  {
    uint64_t result = 139;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9B7150;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9B7150;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

void WebKit::LibWebRTCNetwork::didReceiveMessage(WebKit::LibWebRTCNetwork *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x8A:
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v6) {
        goto LABEL_67;
      }
      uint64_t v7 = (void *)v5;
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v71);
      if (!v75) {
        goto LABEL_67;
      }
      *(_OWORD *)long long v64 = v71;
      *(void *)uint64_t v65 = v72;
      *(_OWORD *)&v65[8] = v73;
      unint64_t v66 = v74;
      LOBYTE(v67) = 1;
      WebKit::LibWebRTCNetwork::signalAddressReady((uint64_t)this, v7, (WebKit::RTC::Network::SocketAddress *)v64);
      if ((_BYTE)v67)
      {
        uint64_t v9 = v64[1];
        if (v64[1])
        {
          v64[1] = 0;
          *(_DWORD *)uint64_t v65 = 0;
          WTF::fastFree(v9, v8);
        }
      }
      return;
    case 0x8B:
      uint64_t v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v34) {
        goto LABEL_53;
      }
      unint64_t v35 = *((void *)a3 + 1);
      uint64_t v36 = *(void *)a3;
      unint64_t v37 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v35 < v37 || v35 - v37 <= 3)
      {
        unint64_t v46 = 0;
        uint64_t v47 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v48 = *((void *)a3 + 3);
        if (v48)
        {
          if (v35)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v48 + 16))(v48, v36, v35);
            uint64_t v47 = *(void *)a3;
            unint64_t v46 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v46 = 0;
            uint64_t v47 = 0;
          }
        }
        goto LABEL_52;
      }
      char v39 = (int *)(v36 + v37);
      *((void *)a3 + 2) = v39 + 1;
      if (!v36)
      {
        unint64_t v46 = v35;
        uint64_t v47 = 0;
LABEL_52:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v49 = *((void *)a3 + 3);
        if (v49 && v46) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
        }
        goto LABEL_53;
      }
      int v40 = *v39;
      WebKit::LibWebRTCNetwork::signalClose((uint64_t)this, v33, v40);
      return;
    case 0x8C:
      uint64_t v15 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v16)
      {
        WebKit::LibWebRTCNetwork::signalConnect((uint64_t)this, v15);
      }
      return;
    case 0x8D:
      uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v18) {
        goto LABEL_67;
      }
      unsigned int v19 = (void *)v17;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)&v69);
      if (!v70) {
        goto LABEL_67;
      }
      IPC::Decoder::decode<WebKit::RTC::Network::IPAddress>((uint64_t *)a3, (uint64_t)&v71);
      if (!BYTE4(v72)) {
        goto LABEL_67;
      }
      int v20 = (_DWORD *)*((void *)a3 + 1);
      uint64_t v21 = *(void *)a3;
      unint64_t v22 = ((*((void *)a3 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)a3;
      if ((unint64_t)v20 < v22 || (unint64_t)v20 - v22 <= 1) {
        goto LABEL_61;
      }
      uint64_t v24 = (__int16 *)(v21 + v22);
      *((void *)a3 + 2) = v24 + 1;
      if (!v21)
      {
        unint64_t v28 = (unint64_t)v20;
        uint64_t v29 = 0;
        goto LABEL_66;
      }
      __int16 v25 = *v24;
      unint64_t v26 = IPC::Decoder::decode<long long>(a3);
      if (!v27) {
        goto LABEL_67;
      }
      unint64_t v28 = *((void *)a3 + 1);
      uint64_t v29 = *(void *)a3;
      unint64_t v30 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v28 < v30 || v28 - v30 <= 3)
      {
        unint64_t v56 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v57 = *((void *)a3 + 3);
        if (v57)
        {
          if (v28)
          {
            (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
            unint64_t v56 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v56 = 0;
          }
        }
LABEL_65:
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v58 = *((void *)a3 + 3);
        if (!v58) {
          goto LABEL_66;
        }
        if (v56)
        {
          unsigned int v55 = *(void (**)(void))(*(void *)v58 + 16);
          goto LABEL_81;
        }
        goto LABEL_88;
      }
      uint64_t v31 = (int *)(v29 + v30);
      int v20 = v31 + 1;
      *((void *)a3 + 2) = v31 + 1;
      if (!v29)
      {
        unint64_t v56 = v28;
        goto LABEL_65;
      }
      int v32 = *v31;
      if (*v31 < 4)
      {
        if (v70 && BYTE4(v72))
        {
          *(_OWORD *)long long v64 = v69;
          *(_OWORD *)uint64_t v65 = v71;
          *(_DWORD *)&v65[16] = v72;
          *(_WORD *)&v65[20] = v25;
          unint64_t v66 = v26;
          int v67 = v32;
          char v68 = 1;
          WebKit::LibWebRTCNetwork::signalReadPacket((uint64_t)this, v19, v69, *((uint64_t *)&v69 + 1), (int *)v65);
          return;
        }
        __break(1u);
LABEL_61:
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v54 = *((void *)a3 + 3);
        if (v54)
        {
          if (v20)
          {
            unsigned int v55 = *(void (**)(void))(*(void *)v54 + 16);
LABEL_81:
            v55();
            uint64_t v29 = *(void *)a3;
            unint64_t v28 = *((void *)a3 + 1);
            goto LABEL_66;
          }
LABEL_88:
          unint64_t v28 = 0;
          uint64_t v29 = 0;
        }
      }
LABEL_66:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v59 = *((void *)a3 + 3);
      if (v59 && v28) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 16))(v59, v29);
      }
LABEL_67:
      uint64_t v60 = *(void *)a3;
      uint64_t v61 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v62 = *((void *)a3 + 3);
      if (v62) {
        BOOL v63 = v61 == 0;
      }
      else {
        BOOL v63 = 1;
      }
      if (!v63) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 16))(v62, v60);
      }
      return;
    case 0x8E:
      uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v11 && (uint64_t v12 = v10, IPC::Decoder::decode<long long>(a3), v13) && (IPC::Decoder::decode<long long>(a3), v14))
      {
        WebKit::LibWebRTCNetwork::signalSentPacket((uint64_t)this, v12);
      }
      else
      {
LABEL_53:
        uint64_t v50 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v51 = *((void *)a3 + 3);
        if (v51) {
          BOOL v52 = v50 == 0;
        }
        else {
          BOOL v52 = 1;
        }
        if (!v52)
        {
          unint64_t v53 = *(void (**)(void))(*(void *)v51 + 16);
          v53();
        }
      }
      return;
    case 0x8F:
      uint64_t v41 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v42) {
        goto LABEL_67;
      }
      uint64_t v43 = v41;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v71);
      if (!BYTE8(v71)) {
        goto LABEL_67;
      }
      v64[0] = (WTF::StringImpl *)v71;
      LOBYTE(v64[1]) = 1;
      WebKit::LibWebRTCNetwork::signalUsedInterface((uint64_t)this, v43);
      unint64_t v45 = v64[0];
      v64[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v44);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      return;
    default:
      return;
  }
}

void non-virtual thunk to'WebKit::LibWebRTCNetwork::didReceiveMessage(WebKit::LibWebRTCNetwork *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

WTF *IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

uint64_t ___ZN6WebKit26LocalAuthenticationLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication", 2);
  WebKit::LocalAuthenticationLibrary(BOOL)::frameworkLibrary = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 30;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initLAContext(WebKit *this)
{
  if (qword_1EB358DD0 != -1) {
    dispatch_once(&qword_1EB358DD0, &__block_literal_global_6);
  }
  return qword_1EB358DD8;
}

uint64_t ___ZN6WebKitL13initLAContextEv_block_invoke()
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit26LocalAuthenticationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v2 = 0;
  if (_MergedGlobals_50 != -1) {
    dispatch_once(&_MergedGlobals_50, block);
  }
  uint64_t result = (uint64_t)objc_getClass("LAContext");
  qword_1EB358DD8 = result;
  if (result)
  {
    WebKit::getLAContextClass = WebKit::LAContextFunction;
  }
  else
  {
    uint64_t result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::LAContextFunction(WebKit *this)
{
  return qword_1EB358DD8;
}

void WebKit::MediaPlayerPrivateRemote::didReceiveMessage(WebKit::MediaPlayerPrivateRemote *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v205 = *MEMORY[0x1E4F143B8];
  BOOL v3 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x90:
      WebKit::MediaPlayerPrivateRemote::activeSourceBuffersChanged(this);
      return;
    case 0x91:
      unint64_t v21 = *((void *)a3 + 1);
      uint64_t v22 = *(void *)a3;
      unint64_t v68 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v21 < v68 || v21 - v68 <= 7) {
        goto LABEL_287;
      }
      char v70 = (unint64_t *)(v22 + v68);
      *((void *)a3 + 2) = v70 + 1;
      if (!v22) {
        goto LABEL_370;
      }
      unint64_t v71 = *v70;
      IPC::Decoder::decode<WTF::MediaTime>(a3, (uint64_t)&v187);
      if (!v188) {
        goto LABEL_245;
      }
      IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)&v191);
      if (!(_BYTE)v192) {
        goto LABEL_245;
      }
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v3, (uint64_t)v196);
      if (!v196[16]) {
        goto LABEL_245;
      }
      if (!v188 || !(_BYTE)v192) {
        goto LABEL_291;
      }
      *(void *)v180 = v71;
      *(_OWORD *)&v180[8] = v187;
      *(_OWORD *)&v180[24] = v191;
      *(_OWORD *)&v180[40] = *(_OWORD *)v196;
      v180[56] = 1;
      WebKit::MediaPlayerPrivateRemote::addDataCue((uint64_t)this, v71, (uint64_t)&v180[8], (uint64_t)&v180[24], *(uint64_t *)v196, *(uint64_t *)&v196[8]);
      return;
    case 0x92:
      unint64_t v58 = *((void *)a3 + 1);
      uint64_t v59 = *(void *)a3;
      unint64_t v60 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v58 < v60 || v58 - v60 <= 7)
      {
        unint64_t v153 = 0;
        uint64_t v154 = 0;
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v155 = *((void *)v3 + 3);
        if (v155)
        {
          if (v58)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v155 + 16))(v155, v59, v58);
            uint64_t v154 = *(void *)v3;
            unint64_t v153 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v153 = 0;
            uint64_t v154 = 0;
          }
        }
        goto LABEL_318;
      }
      uint64_t v62 = (uint64_t *)(v59 + v60);
      *((void *)a3 + 2) = v62 + 1;
      if (!v59)
      {
        unint64_t v153 = v58;
        uint64_t v154 = 0;
LABEL_318:
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v156 = *((void *)v3 + 3);
        if (v156 && v153) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v156 + 16))(v156, v154);
        }
        goto LABEL_319;
      }
      uint64_t v63 = *v62;
      IPC::Decoder::decode<WTF::MediaTime>(a3, (uint64_t)&v187);
      if (!v188
        || (IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)&v191), !(_BYTE)v192)
        || (IPC::Decoder::decode<WebCore::SerializedPlatformDataCueValue>(v196, (uint64_t *)v3), !v196[56]))
      {
LABEL_319:
        v180[0] = 0;
        v180[104] = 0;
        goto LABEL_320;
      }
      IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v189);
      int v65 = v190;
      if (v190)
      {
        if (!v188 || !(_BYTE)v192 || !v196[56]) {
          goto LABEL_291;
        }
        *(void *)v180 = v63;
        *(_OWORD *)&v180[8] = v187;
        *(_OWORD *)&v180[24] = v191;
        v180[40] = 0;
        v180[88] = 0;
        if (v196[48])
        {
          std::construct_at[abi:sn180100]<WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data*>((uint64_t)&v180[40], (uint64_t *)v196);
          int v65 = 1;
          v180[88] = 1;
          *(void *)&v180[96] = v189;
        }
        else
        {
          *(void *)&v180[96] = v189;
          int v65 = 1;
        }
      }
      else
      {
        v180[0] = 0;
      }
      v180[104] = v65;
      if (v196[56])
      {
        std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v196, v64);
        int v65 = v180[104];
      }
      if (v65) {
        goto LABEL_282;
      }
LABEL_320:
      uint64_t v157 = *(void *)v3;
      uint64_t v158 = *((void *)v3 + 1);
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v159 = *((void *)v3 + 3);
      if (!v159) {
        return;
      }
      if (!v158) {
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v159 + 16))(v159, v157);
      if (!v180[104]) {
        return;
      }
LABEL_282:
      WebKit::MediaPlayerPrivateRemote::addDataCueWithType((uint64_t)this, *(unint64_t *)v180, (uint64_t)&v180[8], (uint64_t)&v180[24], (uint64_t)&v180[40], (uint64_t)&v180[96]);
      if (v180[104])
      {
        v134 = *(WTF::StringImpl **)&v180[96];
        *(void *)&v180[96] = 0;
        if (v134)
        {
          if (*(_DWORD *)v134 == 2) {
            WTF::StringImpl::destroy(v134, v38);
          }
          else {
            *(_DWORD *)v134 -= 2;
          }
        }
        goto LABEL_176;
      }
      return;
    case 0x93:
      IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>((uint64_t)v180, a3);
      if (v180[144])
      {
        WebKit::MediaPlayerPrivateRemote::addGenericCue((uint64_t)this, *(unint64_t *)v180, (long long *)&v180[8]);
        goto LABEL_183;
      }
      return;
    case 0x94:
      IPC::Decoder::decode<WebKit::AudioTrackPrivateRemoteConfiguration>((uint64_t)v180, a3);
      if (!v180[72])
      {
        v121 = v180;
        goto LABEL_240;
      }
      *(void *)v196 = *(void *)v180;
      long long v46 = *(_OWORD *)&v180[8];
      *(void *)&v180[8] = 0;
      *(void *)&v180[16] = 0;
      *(_OWORD *)&v196[8] = v46;
      *(_OWORD *)&v196[24] = *(_OWORD *)&v180[24];
      *(_DWORD *)&v196[40] = *(_DWORD *)&v180[40];
      *(_WORD *)&v196[44] = *(_WORD *)&v180[44];
      uint64_t v47 = *(void *)&v180[48];
      *(void *)&v180[48] = 0;
      *(void *)&v196[48] = v47;
      *(_OWORD *)&v196[56] = *(_OWORD *)&v180[56];
      v196[72] = 1;
      std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v180, v27);
      WebKit::MediaPlayerPrivateRemote::addRemoteAudioTrack((uint64_t)this, (unint64_t *)v196);
      if (v196[72]) {
        goto LABEL_161;
      }
      return;
    case 0x95:
      IPC::Decoder::decode<WebKit::TextTrackPrivateRemoteConfiguration>((uint64_t)v180, a3);
      if (!v180[64])
      {
        v122 = v180;
        goto LABEL_242;
      }
      long long v79 = *(_OWORD *)&v180[8];
      memset(&v180[8], 0, 24);
      *(_OWORD *)&v196[8] = v79;
      *(void *)v196 = *(void *)v180;
      *(void *)&v196[24] = *(void *)&v180[24];
      *(_OWORD *)&v196[32] = *(_OWORD *)&v180[32];
      *(_OWORD *)&v196[44] = *(_OWORD *)&v180[44];
      v196[64] = 1;
      std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v180, v78);
      WebKit::MediaPlayerPrivateRemote::addRemoteTextTrack((uint64_t)this, (unint64_t *)v196);
      if (v196[64])
      {
        char v80 = *(WTF::StringImpl **)&v196[24];
        *(void *)&v196[24] = 0;
        if (v80) {
          goto LABEL_162;
        }
        goto LABEL_249;
      }
      return;
    case 0x96:
      IPC::Decoder::decode<WebKit::VideoTrackPrivateRemoteConfiguration>((uint64_t)v180, (uint64_t)a3);
      if (!v180[112])
      {
        v123 = v180;
        goto LABEL_244;
      }
      *(void *)v196 = *(void *)v180;
      long long v88 = *(_OWORD *)&v180[8];
      *(void *)&v180[8] = 0;
      *(void *)&v180[16] = 0;
      *(_OWORD *)&v196[8] = v88;
      *(_OWORD *)&v196[24] = *(_OWORD *)&v180[24];
      *(_DWORD *)&v196[40] = *(_DWORD *)&v180[40];
      *(_WORD *)&v196[44] = *(_WORD *)&v180[44];
      uint64_t v89 = *(void *)&v180[48];
      *(void *)&v180[48] = 0;
      *(void *)&v196[48] = v89;
      *(void *)&v196[101] = *(void *)&v180[101];
      *(_OWORD *)&v196[88] = *(_OWORD *)&v180[88];
      *(_OWORD *)&v196[72] = *(_OWORD *)&v180[72];
      *(_OWORD *)&v196[56] = *(_OWORD *)&v180[56];
      char v197 = 1;
      std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v180, v87);
      WebKit::MediaPlayerPrivateRemote::addRemoteVideoTrack((uint64_t)this, (unint64_t *)v196);
      if (v197)
      {
LABEL_161:
        char v80 = *(WTF::StringImpl **)&v196[48];
        *(void *)&v196[48] = 0;
        if (v80)
        {
LABEL_162:
          if (*(_DWORD *)v80 == 2) {
            WTF::StringImpl::destroy(v80, v30);
          }
          else {
            *(_DWORD *)v80 -= 2;
          }
        }
LABEL_249:
        v127 = *(WTF::StringImpl **)&v196[16];
        *(void *)&v196[16] = 0;
        if (v127)
        {
          if (*(_DWORD *)v127 == 2) {
            WTF::StringImpl::destroy(v127, v30);
          }
          else {
            *(_DWORD *)v127 -= 2;
          }
        }
        unint64_t v66 = *(WTF::StringImpl **)&v196[8];
        *(void *)&v196[8] = 0;
        if (v66) {
          goto LABEL_275;
        }
      }
      return;
    case 0x97:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v180, a3);
      if (LOBYTE(v185[0])) {
        WebKit::MediaPlayerPrivateRemote::characteristicChanged((uint64_t)this, (uint64_t *)v180);
      }
      goto LABEL_193;
    case 0x98:
      uint64_t v91 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v92)
      {
        *(void *)v180 = v91;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v180[8], a2);
        uint64_t v93 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v93 = &unk_1EE9B7258;
        v93[1] = *(void *)v180;
        uint64_t v94 = *(void *)&v180[8];
        *(void *)&v180[8] = 0;
        v93[2] = v94;
        *(void *)v196 = v93;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v180[8]);
        WebKit::AuxiliaryProcess::mainThreadPing((uint64_t)this, (uint64_t *)v196);
        uint64_t v95 = *(void *)v196;
        *(void *)v196 = 0;
        if (v95) {
          (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
        }
      }
      return;
    case 0x99:
      unsigned __int16 v53 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v53 <= 0xFFu) {
        goto LABEL_292;
      }
      WebKit::MediaPlayerPrivateRemote::currentPlaybackTargetIsWirelessChanged(this, v53 != 0);
      return;
    case 0x9A:
      IPC::Decoder::decode<std::tuple<WebKit::MediaTimeUpdateData>>((uint64_t)v180, a3);
      if (v180[32]) {
        WebKit::MediaPlayerPrivateRemote::currentTimeChanged((atomic_uchar *)this, (WTF::MediaTime *)v180);
      }
      return;
    case 0x9B:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v180, a3);
      if (LOBYTE(v185[0])) {
        WebKit::MediaPlayerPrivateRemote::durationChanged((uint64_t)this, (uint64_t *)v180);
      }
      goto LABEL_193;
    case 0x9C:
      unint64_t v51 = IPC::Decoder::decode<std::tuple<long long>>(a3);
      if (v52)
      {
        WebKit::MediaPlayerPrivateRemote::engineFailedToLoad(this, v51);
      }
      return;
    case 0x9D:
      WebKit::MediaPlayerPrivateRemote::firstVideoFrameAvailable(this);
      return;
    case 0x9E:
      IPC::Decoder::decode<std::tuple<WTF::URL>>(a3, v180);
      if (!v180[40]) {
        return;
      }
      uint64_t v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v30) {
        goto LABEL_68;
      }
      *(void *)v196 = v39;
      BOOL v3 = (IPC::Decoder *)&v196[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v196[8], a2);
      int v40 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v40 = &unk_1EE9B7230;
      v40[1] = *(void *)v196;
      uint64_t v41 = *(void *)&v196[8];
      *(void *)&v196[8] = 0;
      v40[2] = v41;
      *(void *)&long long v191 = v40;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v196[8]);
      if (!v180[40]) {
        goto LABEL_291;
      }
      WebKit::MediaPlayerPrivateRemote::getRawCookies((uint64_t)this);
      uint64_t v42 = v191;
      *(void *)&long long v191 = 0;
      if (v42) {
        goto LABEL_67;
      }
      goto LABEL_68;
    case 0x9F:
      IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>(a3, v180);
      if (v180[24])
      {
        WebKit::MediaPlayerPrivateRemote::initializationDataEncountered((uint64_t)this);
        if (v180[24]) {
          goto LABEL_107;
        }
      }
      return;
    case 0xA0:
      uint64_t v33 = IPC::Decoder::decode<std::optional<unsigned int>>(a3);
      if (!v34) {
        goto LABEL_334;
      }
      uint64_t v35 = v33;
      uint64_t v36 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v3);
      if (v37)
      {
        *(void *)v180 = v35;
        *(void *)&v180[8] = v36;
        v180[16] = 1;
        WebKit::MediaPlayerPrivateRemote::layerHostingContextIdChanged((uint64_t)this, (unsigned int *)v180, (const WebCore::FloatSize *)&v180[8]);
        return;
      }
      uint64_t v170 = *(void *)v3;
      uint64_t v171 = *((void *)v3 + 1);
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v172 = *((void *)v3 + 3);
      if (v172 && v171) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v172 + 16))(v172, v170);
      }
LABEL_334:
      uint64_t v124 = *(void *)v3;
      uint64_t v173 = *((void *)v3 + 1);
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v126 = *((void *)v3 + 3);
      if (v126) {
        BOOL v174 = v173 == 0;
      }
      else {
        BOOL v174 = 1;
      }
      if (!v174) {
        goto LABEL_247;
      }
      return;
    case 0xA1:
      IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v180);
      if (v180[16]) {
        WebKit::MediaPlayerPrivateRemote::mediaPlayerKeyNeeded((uint64_t)this, *(uint64_t *)v180, *(uint64_t *)&v180[8]);
      }
      return;
    case 0xA2:
      unsigned __int16 v90 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v90 <= 0xFFu) {
        goto LABEL_292;
      }
      WebKit::MediaPlayerPrivateRemote::muteChanged(this, v90 != 0);
      return;
    case 0xA3:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v180, a3);
      if (LOBYTE(v185[0])) {
        WebKit::MediaPlayerPrivateRemote::networkStateChanged((uint64_t)this, (uint64_t *)v180);
      }
      goto LABEL_193;
    case 0xA4:
      unint64_t v21 = *((void *)a3 + 1);
      uint64_t v22 = *(void *)a3;
      unint64_t v74 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v21 < v74 || v21 - v74 <= 7) {
        goto LABEL_287;
      }
      long long v76 = (unint64_t *)(v22 + v74);
      *((void *)a3 + 2) = v76 + 1;
      if (!v22) {
        goto LABEL_370;
      }
      unint64_t v77 = *v76;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)v180);
      if (!v180[16]) {
        goto LABEL_245;
      }
      WebKit::MediaPlayerPrivateRemote::parseWebVTTCueData((uint64_t)this, v77, *(uint64_t *)v180, *(uint64_t *)&v180[8]);
      return;
    case 0xA5:
      unint64_t v81 = *((void *)a3 + 1);
      uint64_t v82 = *(void *)a3;
      unint64_t v83 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v81 < v83 || v81 - v83 <= 7)
      {
        unint64_t v160 = 0;
        uint64_t v161 = 0;
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v162 = *((void *)v3 + 3);
        if (v162)
        {
          if (v81)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v162 + 16))(v162, v82, v81);
            uint64_t v161 = *(void *)v3;
            unint64_t v160 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v160 = 0;
            uint64_t v161 = 0;
          }
        }
        goto LABEL_325;
      }
      long long v85 = (uint64_t *)(v82 + v83);
      *((void *)a3 + 2) = v85 + 1;
      if (!v82)
      {
        unint64_t v160 = v81;
        uint64_t v161 = 0;
LABEL_325:
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v163 = *((void *)v3 + 3);
        if (v163 && v160) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v163 + 16))(v163, v161);
        }
        goto LABEL_329;
      }
      uint64_t v86 = *v85;
      IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::decode(a3, v196);
      if (v197
        || (uint64_t v164 = *(void *)v3,
            uint64_t v165 = *((void *)v3 + 1),
            *(void *)BOOL v3 = 0,
            *((void *)v3 + 1) = 0,
            (uint64_t v166 = *((void *)v3 + 3)) != 0)
        && v165
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v166 + 16))(v166, v164), v197))
      {
        *(void *)v180 = v86;
        WebCore::ISOWebVTTCue::ISOWebVTTCue();
        v180[120] = 1;
        if (v197) {
          MEMORY[0x199730B40](v196);
        }
        goto LABEL_154;
      }
LABEL_329:
      v180[0] = 0;
      v180[120] = 0;
      uint64_t v167 = *(void *)v3;
      uint64_t v168 = *((void *)v3 + 1);
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v169 = *((void *)v3 + 3);
      if (!v169) {
        return;
      }
      if (!v168) {
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v169 + 16))(v169, v167);
      if (!v180[120]) {
        return;
      }
LABEL_154:
      WebKit::MediaPlayerPrivateRemote::parseWebVTTCueDataStruct((uint64_t)this, *(unint64_t *)v180, (uint64_t)&v180[8]);
      if (v180[120]) {
        MEMORY[0x199730B40](&v180[8]);
      }
      return;
    case 0xA6:
      IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String>>(a3, v180);
      if (!v180[16]) {
        return;
      }
      WebKit::MediaPlayerPrivateRemote::parseWebVTTFileHeader((uint64_t)this, *(unint64_t *)v180, (uint64_t)&v180[8]);
      if (!v180[16]) {
        return;
      }
      unint64_t v66 = *(WTF::StringImpl **)&v180[8];
      *(void *)&v180[8] = 0;
      if (!v66) {
        return;
      }
      goto LABEL_275;
    case 0xA7:
      unint64_t v101 = *((void *)a3 + 1);
      uint64_t v102 = *(void *)v3;
      unint64_t v103 = *((void *)v3 + 2) - *(void *)v3;
      if (v101 <= v103)
      {
        unint64_t v149 = 0;
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v150 = *((void *)v3 + 3);
        if (v150)
        {
          if (v101)
          {
            (*(void (**)(uint64_t))(*(void *)v150 + 16))(v150);
            unint64_t v149 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v149 = 0;
          }
        }
      }
      else
      {
        v104 = (unsigned __int8 *)(v102 + v103);
        *((void *)v3 + 2) = v104 + 1;
        if (v102)
        {
          unsigned int v105 = *v104;
          if (v105 >= 2) {
            goto LABEL_288;
          }
          IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)v196, v3);
          if (v196[32])
          {
            *(_OWORD *)&v180[8] = *(_OWORD *)v196;
            *(_OWORD *)&v180[24] = *(_OWORD *)&v196[16];
            v180[0] = v105 != 0;
            v180[40] = 1;
            WebKit::MediaPlayerPrivateRemote::playbackStateChanged((uint64_t)this, v105 != 0, (WTF::MediaTime *)&v180[8]);
            return;
          }
          goto LABEL_245;
        }
        unint64_t v149 = v101;
      }
      unint64_t v101 = 0;
      uint64_t v102 = 0;
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v151 = *((void *)v3 + 3);
      if (!v151) {
        goto LABEL_288;
      }
      if (v149)
      {
        v152 = *(void (**)(void))(*(void *)v151 + 16);
        goto LABEL_352;
      }
      goto LABEL_375;
    case 0xA8:
      IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::decode(a3, (uint64_t)v196);
      if (!v196[96])
      {
        uint64_t v145 = *(void *)v3;
        uint64_t v146 = *((void *)v3 + 1);
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v147 = *((void *)v3 + 3);
        if (!v147 || v146 == 0) {
          goto LABEL_245;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v147 + 16))(v147, v145);
        if (!v196[96]) {
          goto LABEL_245;
        }
      }
      IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>((uint64_t *)v3, (uint64_t)&v191);
      if (!v195) {
        goto LABEL_245;
      }
      if (!v196[96]) {
        goto LABEL_291;
      }
      *(_OWORD *)&v180[32] = *(_OWORD *)&v196[32];
      *(_OWORD *)&v180[48] = *(_OWORD *)&v196[48];
      *(_OWORD *)&v180[64] = *(_OWORD *)&v196[64];
      *(_OWORD *)&v180[80] = *(_OWORD *)&v196[80];
      *(_OWORD *)v180 = *(_OWORD *)v196;
      *(_OWORD *)&v180[16] = *(_OWORD *)&v196[16];
      *(void *)&v180[144] = v194;
      *(_OWORD *)&v180[112] = v192;
      *(_OWORD *)&v180[128] = v193;
      *(_OWORD *)&v180[96] = v191;
      LOBYTE(v181) = 1;
      WebKit::MediaPlayerPrivateRemote::pushVideoFrameMetadata((uint64_t)this, v180, (uint64_t)&v180[96]);
      return;
    case 0xA9:
      unint64_t v21 = *((void *)a3 + 1);
      uint64_t v22 = *(void *)a3;
      unint64_t v54 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v21 < v54 || v21 - v54 <= 7) {
        goto LABEL_287;
      }
      unint64_t v56 = (double *)(v22 + v54);
      *((void *)a3 + 2) = v56 + 1;
      if (!v22) {
        goto LABEL_370;
      }
      double v57 = *v56;
      IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)v196, a3);
      if (!v196[32]) {
        goto LABEL_245;
      }
      *(double *)v180 = v57;
      *(_OWORD *)&v180[8] = *(_OWORD *)v196;
      *(_OWORD *)&v180[24] = *(_OWORD *)&v196[16];
      v180[40] = 1;
      WebKit::MediaPlayerPrivateRemote::rateChanged((uint64_t)this, (WTF::MediaTime *)&v180[8], v57);
      return;
    case 0xAA:
      IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>((uint64_t)v196, a3);
      if (!v204) {
        goto LABEL_232;
      }
      unsigned __int16 ready = IPC::Decoder::decode<WebCore::MediaPlayerReadyState>((uint64_t *)v3);
      if (ready < 0x100u) {
        goto LABEL_232;
      }
      if (!v204) {
        goto LABEL_291;
      }
      char v129 = ready;
      *(_OWORD *)&v180[32] = *(_OWORD *)&v196[32];
      *(_OWORD *)&v180[48] = *(_OWORD *)&v196[48];
      *(_OWORD *)&v180[61] = *(_OWORD *)&v196[61];
      *(_OWORD *)v180 = *(_OWORD *)v196;
      *(_OWORD *)&v180[16] = *(_OWORD *)&v196[16];
      long long v130 = *(_OWORD *)&v196[80];
      *(_OWORD *)&v196[80] = 0uLL;
      *(_OWORD *)&v180[80] = v130;
      v180[96] = 0;
      v180[112] = 0;
      if (v197)
      {
        *(void *)&v180[96] = *(void *)&v196[96];
        uint64_t v131 = *(void *)&v196[104];
        *(void *)&v196[96] = 0;
        *(void *)&v196[104] = 0;
        *(void *)&v180[104] = v131;
        v180[112] = 1;
      }
      long long v182 = v201;
      long long v183 = v202;
      *(_OWORD *)CFTypeRef cf = v203[0];
      *(_OWORD *)&cf[10] = *(_OWORD *)((char *)v203 + 10);
      *(_OWORD *)&v180[120] = v198;
      *(_OWORD *)&v180[136] = v199;
      long long v181 = v200;
      LOBYTE(v185[0]) = ready;
      BYTE8(v185[0]) = 1;
      std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v196, v98);
      WebKit::MediaPlayerPrivateRemote::readyStateChanged((uint64_t)this, (uint64_t *)v180, v129);
      if (BYTE8(v185[0])) {
        goto LABEL_266;
      }
      return;
    case 0xAB:
      unint64_t v21 = *((void *)a3 + 1);
      uint64_t v22 = *(void *)a3;
      unint64_t v23 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v21 < v23 || v21 - v23 <= 7) {
        goto LABEL_287;
      }
      __int16 v25 = (unint64_t *)(v22 + v23);
      *((void *)a3 + 2) = v25 + 1;
      if (!v22) {
        goto LABEL_370;
      }
      unint64_t v26 = *v25;
      IPC::Decoder::decode<WebKit::AudioTrackPrivateRemoteConfiguration>((uint64_t)v196, a3);
      if (!v196[72])
      {
        v121 = v196;
LABEL_240:
        std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v121, v27);
        goto LABEL_245;
      }
      *(void *)v180 = v26;
      *(void *)&v180[8] = *(void *)v196;
      long long v28 = *(_OWORD *)&v196[8];
      *(void *)&v196[8] = 0;
      *(void *)&v196[16] = 0;
      *(_OWORD *)&v180[16] = v28;
      *(_OWORD *)&v180[32] = *(_OWORD *)&v196[24];
      *(_DWORD *)&v180[48] = *(_DWORD *)&v196[40];
      *(_WORD *)&v180[52] = *(_WORD *)&v196[44];
      uint64_t v29 = *(void *)&v196[48];
      *(void *)&v196[48] = 0;
      *(void *)&v180[56] = v29;
      *(_OWORD *)&v180[64] = *(_OWORD *)&v196[56];
      v180[80] = 1;
      std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v196, v27);
      WebKit::MediaPlayerPrivateRemote::remoteAudioTrackConfigurationChanged((uint64_t)this, v26, (uint64_t *)&v180[8]);
      if (v180[80]) {
        goto LABEL_224;
      }
      return;
    case 0xAC:
      unint64_t v21 = *((void *)a3 + 1);
      uint64_t v22 = *(void *)a3;
      unint64_t v106 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v21 < v106 || v21 - v106 <= 7) {
        goto LABEL_287;
      }
      v108 = (unint64_t *)(v22 + v106);
      *((void *)a3 + 2) = v108 + 1;
      if (!v22) {
        goto LABEL_370;
      }
      unint64_t v109 = *v108;
      IPC::Decoder::decode<WebKit::TextTrackPrivateRemoteConfiguration>((uint64_t)v196, a3);
      if (!v196[64])
      {
        v122 = v196;
LABEL_242:
        std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v122, v78);
        goto LABEL_245;
      }
      uint64_t v110 = *(void *)&v196[24];
      *(void *)v180 = v109;
      *(void *)&v180[8] = *(void *)v196;
      long long v111 = *(_OWORD *)&v196[8];
      memset(&v196[8], 0, 24);
      *(_OWORD *)&v180[16] = v111;
      *(void *)&v180[32] = v110;
      *(_OWORD *)&v180[40] = *(_OWORD *)&v196[32];
      *(_OWORD *)&v180[52] = *(_OWORD *)&v196[44];
      v180[72] = 1;
      std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v196, v78);
      WebKit::MediaPlayerPrivateRemote::remoteTextTrackConfigurationChanged((uint64_t)this, v109, (uint64_t *)&v180[8]);
      if (!v180[72]) {
        return;
      }
      v112 = *(WTF::StringImpl **)&v180[32];
      *(void *)&v180[32] = 0;
      if (!v112) {
        goto LABEL_256;
      }
      goto LABEL_225;
    case 0xAD:
      unint64_t v21 = *((void *)a3 + 1);
      uint64_t v22 = *(void *)a3;
      unint64_t v113 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v21 < v113 || v21 - v113 <= 7)
      {
LABEL_287:
        unint64_t v101 = 0;
        uint64_t v102 = 0;
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v135 = *((void *)v3 + 3);
        if (v135)
        {
          if (v21)
          {
            v152 = *(void (**)(void))(*(void *)v135 + 16);
LABEL_352:
            v152();
            uint64_t v102 = *(void *)v3;
            unint64_t v101 = *((void *)v3 + 1);
          }
          else
          {
LABEL_375:
            unint64_t v101 = 0;
            uint64_t v102 = 0;
          }
        }
        goto LABEL_288;
      }
      v115 = (unint64_t *)(v22 + v113);
      *((void *)a3 + 2) = v115 + 1;
      if (!v22)
      {
LABEL_370:
        unint64_t v101 = v21;
        uint64_t v102 = v22;
LABEL_288:
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v136 = *((void *)v3 + 3);
        if (v136 && v101) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v136 + 16))(v136, v102);
        }
        goto LABEL_245;
      }
      unint64_t v116 = *v115;
      IPC::Decoder::decode<WebKit::VideoTrackPrivateRemoteConfiguration>((uint64_t)v196, (uint64_t)a3);
      if (v197)
      {
        *(void *)v180 = v116;
        *(void *)&v180[8] = *(void *)v196;
        long long v117 = *(_OWORD *)&v196[8];
        *(void *)&v196[8] = 0;
        *(void *)&v196[16] = 0;
        *(_OWORD *)&v180[16] = v117;
        *(_OWORD *)&v180[32] = *(_OWORD *)&v196[24];
        *(_DWORD *)&v180[48] = *(_DWORD *)&v196[40];
        *(_WORD *)&v180[52] = *(_WORD *)&v196[44];
        uint64_t v118 = *(void *)&v196[48];
        *(void *)&v196[48] = 0;
        *(void *)&v180[56] = v118;
        *(void *)&v180[109] = *(void *)&v196[101];
        *(_OWORD *)&v180[80] = *(_OWORD *)&v196[72];
        *(_OWORD *)&v180[96] = *(_OWORD *)&v196[88];
        *(_OWORD *)&v180[64] = *(_OWORD *)&v196[56];
        v180[120] = 1;
        std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v196, v87);
        WebKit::MediaPlayerPrivateRemote::remoteVideoTrackConfigurationChanged((uint64_t)this, v116, (uint64_t *)&v180[8]);
        if (!v180[120]) {
          return;
        }
LABEL_224:
        v112 = *(WTF::StringImpl **)&v180[56];
        *(void *)&v180[56] = 0;
        if (v112)
        {
LABEL_225:
          if (*(_DWORD *)v112 == 2) {
            WTF::StringImpl::destroy(v112, v30);
          }
          else {
            *(_DWORD *)v112 -= 2;
          }
        }
LABEL_256:
        v128 = *(WTF::StringImpl **)&v180[24];
        *(void *)&v180[24] = 0;
        if (v128)
        {
          if (*(_DWORD *)v128 == 2) {
            WTF::StringImpl::destroy(v128, v30);
          }
          else {
            *(_DWORD *)v128 -= 2;
          }
        }
        unint64_t v66 = *(WTF::StringImpl **)&v180[16];
        *(void *)&v180[16] = 0;
        if (v66)
        {
LABEL_275:
          if (*(_DWORD *)v66 == 2) {
            WTF::StringImpl::destroy(v66, v30);
          }
          else {
            *(_DWORD *)v66 -= 2;
          }
        }
      }
      else
      {
        v123 = v196;
LABEL_244:
        std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v123, v87);
LABEL_245:
        uint64_t v124 = *(void *)v3;
        uint64_t v125 = *((void *)v3 + 1);
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v126 = *((void *)v3 + 3);
        if (v126 && v125) {
LABEL_247:
        }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v126 + 16))(v126, v124);
      }
      return;
    case 0xAE:
      IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime,WTF::MediaTime,WebCore::SerializedPlatformDataCueValue>>((uint64_t)v180, (WTF::StringImpl **)a3);
      if (!v180[96]) {
        return;
      }
      WebKit::MediaPlayerPrivateRemote::removeDataCue((uint64_t)this, *(unint64_t *)v180, (uint64_t)&v180[8], (uint64_t)&v180[24], (uint64_t)&v180[40]);
      goto LABEL_175;
    case 0xAF:
      IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>((uint64_t)v180, a3);
      if (!v180[144]) {
        return;
      }
      WebKit::MediaPlayerPrivateRemote::removeGenericCue((uint64_t)this, *(unint64_t *)v180, (long long *)&v180[8]);
      goto LABEL_183;
    case 0xB0:
      unint64_t v96 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
      if (v97)
      {
        WebKit::MediaPlayerPrivateRemote::removeRemoteAudioTrack(this, v96);
      }
      return;
    case 0xB1:
      unint64_t v43 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
      if (v44)
      {
        WebKit::MediaPlayerPrivateRemote::removeRemoteTextTrack(this, v43);
      }
      return;
    case 0xB2:
      unint64_t v31 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
      if (v32)
      {
        WebKit::MediaPlayerPrivateRemote::removeRemoteVideoTrack(this, v31);
      }
      return;
    case 0xB3:
      uint64_t v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v20)
      {
        WebKit::MediaPlayerPrivateRemote::removeResource((uint64_t)this, v19);
        return;
      }
      uint64_t v142 = *((void *)v3 + 1);
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v138 = *((void *)v3 + 3);
      if (v138) {
        BOOL v143 = v142 == 0;
      }
      else {
        BOOL v143 = 1;
      }
      if (v143) {
        return;
      }
      goto LABEL_304;
    case 0xB4:
      WebKit::MediaPlayerPrivateRemote::renderingModeChanged(this);
      return;
    case 0xB5:
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v8)
      {
        v180[0] = 0;
        cf[16] = 0;
        goto LABEL_296;
      }
      uint64_t v9 = v7;
      IPC::Decoder::decode<WebCore::ResourceRequest>(v3, (uint64_t)v196);
      char v10 = v203[0];
      if (!LOBYTE(v203[0])) {
        goto LABEL_342;
      }
      unint64_t v11 = *((void *)v3 + 1);
      uint64_t v12 = *(void *)v3;
      unint64_t v13 = ((*((void *)v3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v3;
      if (v11 >= v13 && v11 - v13 > 3)
      {
        uint64_t v15 = (int *)(v12 + v13);
        *((void *)v3 + 2) = v15 + 1;
        if (v12)
        {
          int v16 = *v15;
          *(void *)v180 = v9;
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v180[8], (uint64_t)v196);
          *(_DWORD *)&cf[8] = v16;
          char v10 = 1;
          goto LABEL_343;
        }
        unint64_t v175 = v11;
        uint64_t v176 = 0;
      }
      else
      {
        unint64_t v175 = 0;
        uint64_t v176 = 0;
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v177 = *((void *)v3 + 3);
        if (v177)
        {
          if (v11)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v177 + 16))(v177, v12, v11);
            uint64_t v176 = *(void *)v3;
            unint64_t v175 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v175 = 0;
            uint64_t v176 = 0;
          }
        }
      }
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v178 = *((void *)v3 + 3);
      if (v178 && v175) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v178 + 16))(v178, v176);
      }
      char v10 = 0;
LABEL_342:
      v180[0] = 0;
LABEL_343:
      cf[16] = v10;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v196);
      if (cf[16]) {
        goto LABEL_344;
      }
LABEL_296:
      uint64_t v139 = *(void *)v3;
      uint64_t v140 = *((void *)v3 + 1);
      *(void *)BOOL v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v141 = *((void *)v3 + 3);
      if (!v141) {
        return;
      }
      if (!v140) {
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v141 + 16))(v141, v139);
      if (!cf[16]) {
        return;
      }
LABEL_344:
      WebKit::MediaPlayerPrivateRemote::requestResource((uint64_t)this, *(uint64_t *)v180);
      if (cf[16])
      {
        v179 = *(const void **)cf;
        *(void *)CFTypeRef cf = 0;
        if (v179) {
          CFRelease(v179);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v180[8]);
      }
      return;
    case 0xB6:
      WebKit::MediaPlayerPrivateRemote::resourceNotSupported(this);
      return;
    case 0xB7:
      IPC::Decoder::decode<std::tuple<WebKit::MediaTimeUpdateData>>((uint64_t)v180, a3);
      if (v180[32]) {
        WebKit::MediaPlayerPrivateRemote::seeked((uint64_t)this, (WTF::MediaTime *)v180);
      }
      return;
    case 0xB8:
      IPC::Decoder::decode<std::tuple<WTF::URL>>(a3, v180);
      if (!v180[40]) {
        return;
      }
      uint64_t v48 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v30) {
        goto LABEL_68;
      }
      *(void *)v196 = v48;
      BOOL v3 = (IPC::Decoder *)&v196[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v196[8], a2);
      uint64_t v49 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v49 = &unk_1EE9B7208;
      v49[1] = *(void *)v196;
      uint64_t v50 = *(void *)&v196[8];
      *(void *)&v196[8] = 0;
      v49[2] = v50;
      *(void *)&long long v191 = v49;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v196[8]);
      if (!v180[40]) {
        goto LABEL_291;
      }
      WebKit::MediaPlayerPrivateRemote::sendH2Ping((uint64_t)this);
      uint64_t v42 = v191;
      *(void *)&long long v191 = 0;
      if (v42) {
LABEL_67:
      }
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
LABEL_68:
      if (!v180[40]) {
        return;
      }
LABEL_107:
      unint64_t v66 = *(WTF::StringImpl **)v180;
      *(void *)v180 = 0;
      if (!v66) {
        return;
      }
      goto LABEL_275;
    case 0xB9:
      uint64_t v72 = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>((unint64_t *)a3);
      if (v73)
      {
        WebKit::MediaPlayerPrivateRemote::sizeChanged((uint64_t)this, *(float *)&v72, *((float *)&v72 + 1));
      }
      return;
    case 0xBA:
      IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>((uint64_t)v196, a3);
      if (!v204 || (IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)&v191, v3), !(_BYTE)v193))
      {
LABEL_232:
        std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v196, v98);
        goto LABEL_245;
      }
      if (!v204)
      {
LABEL_291:
        __break(1u);
LABEL_292:
        uint64_t v137 = *((void *)v3 + 1);
        *(void *)BOOL v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v138 = *((void *)v3 + 3);
        if (v138 && v137)
        {
LABEL_304:
          v144 = *(void (**)(void))(*(void *)v138 + 16);
          v144();
        }
        return;
      }
      *(_OWORD *)&v180[32] = *(_OWORD *)&v196[32];
      *(_OWORD *)&v180[48] = *(_OWORD *)&v196[48];
      *(_OWORD *)&v180[61] = *(_OWORD *)&v196[61];
      *(_OWORD *)v180 = *(_OWORD *)v196;
      *(_OWORD *)&v180[16] = *(_OWORD *)&v196[16];
      long long v99 = *(_OWORD *)&v196[80];
      *(_OWORD *)&v196[80] = 0uLL;
      *(_OWORD *)&v180[80] = v99;
      v180[96] = 0;
      v180[112] = 0;
      if (v197)
      {
        *(void *)&v180[96] = *(void *)&v196[96];
        uint64_t v100 = *(void *)&v196[104];
        *(void *)&v196[96] = 0;
        *(void *)&v196[104] = 0;
        *(void *)&v180[104] = v100;
        v180[112] = 1;
      }
      long long v182 = v201;
      long long v183 = v202;
      *(_OWORD *)CFTypeRef cf = v203[0];
      *(_OWORD *)&cf[10] = *(_OWORD *)((char *)v203 + 10);
      *(_OWORD *)&v180[120] = v198;
      *(_OWORD *)&v180[136] = v199;
      long long v181 = v200;
      v185[0] = v191;
      v185[1] = v192;
      char v186 = 1;
      std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v196, v98);
      WebKit::MediaPlayerPrivateRemote::timeChanged((uint64_t)this, (uint64_t *)v180, (WTF::MediaTime *)v185);
      if (!v186) {
        return;
      }
LABEL_266:
      if (v180[112])
      {
        v132 = *(WTF **)&v180[96];
        if (*(void *)&v180[96])
        {
          *(void *)&v180[96] = 0;
          *(_DWORD *)&v180[104] = 0;
          WTF::fastFree(v132, v30);
        }
      }
      v133 = *(WTF::StringImpl **)&v180[88];
      *(void *)&v180[88] = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2) {
          WTF::StringImpl::destroy(v133, v30);
        }
        else {
          *(_DWORD *)v133 -= 2;
        }
      }
      unint64_t v66 = *(WTF::StringImpl **)&v180[80];
      *(void *)&v180[80] = 0;
      if (!v66) {
        return;
      }
      goto LABEL_275;
    case 0xBB:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>((uint64_t)v180, a3);
      if (LOBYTE(v185[0])) {
        WebKit::MediaPlayerPrivateRemote::updateCachedState((uint64_t)this, (uint64_t *)v180);
      }
LABEL_193:
      std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v180, v6);
      return;
    case 0xBC:
      IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime,WTF::MediaTime,WebCore::SerializedPlatformDataCueValue>>((uint64_t)v180, (WTF::StringImpl **)a3);
      if (!v180[96]) {
        return;
      }
      WebKit::MediaPlayerPrivateRemote::updateDataCue((uint64_t)this, *(unint64_t *)v180, (uint64_t)&v180[8], (uint64_t)&v180[24], (uint64_t)&v180[40]);
LABEL_175:
      if (v180[96]) {
LABEL_176:
      }
        std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v180[40], v38);
      return;
    case 0xBD:
      IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>((uint64_t)v180, a3);
      if (!v180[144]) {
        return;
      }
      WebKit::MediaPlayerPrivateRemote::updateGenericCue((uint64_t)this, *(unint64_t *)v180, (long long *)&v180[8]);
LABEL_183:
      if (v180[144]) {
        WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)&v180[8], v67);
      }
      return;
    case 0xBE:
      IPC::Decoder::decode<WebCore::VideoPlaybackQualityMetrics>(a3, (uint64_t)v180);
      if (!v180[32]) {
        goto LABEL_334;
      }
      *(_OWORD *)v196 = *(_OWORD *)&v180[1];
      *(_OWORD *)&v196[15] = *(_OWORD *)&v180[16];
      int v120 = *((unsigned __int8 *)this + 424);
      *((unsigned char *)this + 392) = v180[0];
      *(_OWORD *)((char *)this + 393) = *(_OWORD *)v196;
      if (v120)
      {
        *(_OWORD *)((char *)this + 404) = *(_OWORD *)&v196[11];
      }
      else
      {
        *(_OWORD *)((char *)this + 408) = *(_OWORD *)&v196[15];
        *((unsigned char *)this + 424) = 1;
      }
      return;
    case 0xBF:
      double v17 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v18)
      {
        WebKit::MediaPlayerPrivateRemote::volumeChanged(this, v17);
      }
      return;
    case 0xC0:
      unsigned __int16 v45 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v45 <= 0xFFu) {
        goto LABEL_292;
      }
      WebKit::MediaPlayerPrivateRemote::waitingForKeyChanged(this, v45 != 0);
      return;
    default:
      return;
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteMediaPlayerState>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>((uint64_t)v13, a2);
  if (v25)
  {
    long long v5 = v14[0];
    *(_OWORD *)(a1 + 32) = v13[2];
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 61) = *(_OWORD *)((char *)v14 + 13);
    long long v6 = v13[1];
    *(_OWORD *)a1 = v13[0];
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = v15;
    long long v15 = 0uLL;
    *(_OWORD *)(a1 + 80) = v7;
    *(unsigned char *)(a1 + 96) = 0;
    *(unsigned char *)(a1 + 112) = 0;
    if (v18)
    {
      *(void *)(a1 + 96) = v16;
      uint64_t v8 = v17;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      *(void *)(a1 + 104) = v8;
      *(unsigned char *)(a1 + 112) = 1;
    }
    *(_OWORD *)(a1 + 168) = v22;
    *(_OWORD *)(a1 + 184) = v23;
    *(_OWORD *)(a1 + 200) = v24[0];
    *(_OWORD *)(a1 + 210) = *(_OWORD *)((char *)v24 + 10);
    *(_OWORD *)(a1 + 120) = v19;
    *(_OWORD *)(a1 + 136) = v20;
    *(_OWORD *)(a1 + 152) = v21;
    *(unsigned char *)(a1 + 232) = 1;
    return std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 232) = 0;
    std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v12();
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::RemoteMediaPlayerState>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 232))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::RemoteMediaPlayerState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 232))
  {
    if (*(unsigned char *)(a1 + 112))
    {
      BOOL v3 = *(WTF **)(a1 + 96);
      if (v3)
      {
        *(void *)(a1 + 96) = 0;
        *(_DWORD *)(a1 + 104) = 0;
        WTF::fastFree(v3, a2);
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::MediaPlayerReadyState>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MediaPlayerReadyState,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::MediaPlayerReadyState,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 5)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::MediaTimeUpdateData>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WebKit::MediaTimeUpdateData>((uint64_t)v9, a2);
  if (v10)
  {
    long long v5 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::MediaTimeUpdateData>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<long long>>(IPC::Decoder *a1)
{
  unint64_t result = IPC::Decoder::decode<long long>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7 && v6 != 0)
    {
      unint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      unint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::AudioTrackPrivateRemoteConfiguration>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::AudioTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    unsigned __int8 v3 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::VideoTrackPrivateRemoteConfiguration>(uint64_t a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::decode((WTF::StringImpl **)a2, a1);
  if (!*(unsigned char *)(a1 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t result = *(void *)(a2 + 24);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::VideoTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    unsigned __int8 v3 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::TextTrackPrivateRemoteConfiguration>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::TextTrackPrivateRemoteConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unsigned __int8 v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    uint64_t v6 = (void *)(v3 + v4);
    *((void *)a1 + 2) = v6 + 1;
    if (v3)
    {
      v14[0] = *v6;
      v14[1] = 1;
      return IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String>,void>::decode<IPC::Decoder,unsigned long long>(a1, (uint64_t)v14, (uint64_t)a2);
    }
    unint64_t v8 = v2;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (v10)
    {
      BOOL v11 = a1;
      unint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v9 = *(void *)v11;
        unint64_t v8 = *((void *)v11 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
  if (result)
  {
    if (v8)
    {
      uint64_t v12 = a2;
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String>,void>::decode<IPC::Decoder,unsigned long long>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  char v6 = v9;
  if (!v9)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v7 = v8;
    *(void *)a3 = *(void *)a2;
    *(void *)(a3 + 8) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SerializedPlatformDataCueValue>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SerializedPlatformDataCueValue,void>::decode(a2, a1);
  if (!a1[56])
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data*>(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v3;
    *(void *)(result + 8) = 0;
    uint64_t v4 = a2[1];
    a2[1] = 0;
    *(void *)(result + 8) = v4;
    uint64_t v5 = a2[2];
    a2[2] = 0;
    *(void *)(result + 16) = v5;
    uint64_t v6 = a2[3];
    a2[3] = 0;
    *(void *)(result + 24) = v6;
    *(unsigned char *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDate>,WTF::RetainPtr<NSNumber>,WTF::RetainPtr<NSData>>,(std::__variant_detail::_Trait)1>>(result + 32, (uint64_t)(a2 + 4));
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime,WTF::MediaTime,WebCore::SerializedPlatformDataCueValue>>(uint64_t a1, WTF::StringImpl **a2)
{
  unint64_t v4 = (unint64_t)a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = (((unint64_t)a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    uint64_t v12 = 0;
    BOOL v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    long long v15 = a2[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v15 + 16))(v15, v5, v4);
        BOOL v11 = *a2;
        uint64_t v12 = a2[1];
      }
      else
      {
        uint64_t v12 = 0;
        BOOL v11 = 0;
      }
    }
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v10 = (uint64_t)a2[3];
    if (!v10)
    {
LABEL_20:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 96) = 0;
LABEL_21:
      uint64_t v16 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = (uint64_t)a2[3];
      if (result && v16)
      {
        uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v17();
      }
      return result;
    }
LABEL_28:
    if (v12) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v10 + 16))(v10, v11);
    }
    goto LABEL_20;
  }
  uint64_t v8 = (uint64_t *)((char *)v5 + v6);
  a2[2] = (WTF::StringImpl *)(v8 + 1);
  if (!v5)
  {
    uint64_t v12 = (WTF::StringImpl *)v4;
    BOOL v11 = 0;
    goto LABEL_19;
  }
  uint64_t v9 = *v8;
  IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)a2, (uint64_t)&v18);
  if (!v19) {
    goto LABEL_20;
  }
  IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)a2, (uint64_t)&v20);
  if (!v21) {
    goto LABEL_20;
  }
  uint64_t v10 = IPC::Decoder::decode<WebCore::SerializedPlatformDataCueValue>(v22, (uint64_t *)a2);
  if (!v24) {
    goto LABEL_20;
  }
  if (!v19 || !v21)
  {
    __break(1u);
    goto LABEL_28;
  }
  *(void *)a1 = v9;
  *(_OWORD *)(a1 + 8) = v18;
  *(_OWORD *)(a1 + 24) = v20;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (v23)
  {
    uint64_t result = std::construct_at[abi:sn180100]<WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data,WebCore::SerializedPlatformDataCueValue::Data*>(a1 + 40, v22);
    *(unsigned char *)(a1 + 88) = 1;
    int v14 = v24;
    *(unsigned char *)(a1 + 96) = 1;
    if (!v14) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 96) = 1;
  }
  uint64_t result = std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v11);
  if (!*(unsigned char *)(a1 + 96)) {
    goto LABEL_21;
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<unsigned long long,WebCore::GenericCueData>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5, v4);
        uint64_t v15 = *(void *)a2;
        unint64_t v14 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v8 = (uint64_t *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v14 = v4;
    uint64_t v15 = 0;
LABEL_12:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17 && v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
    goto LABEL_16;
  }
  uint64_t v9 = *v8;
  IPC::ArgumentCoder<WebCore::GenericCueData,void>::decode(a2, (uint64_t)&v24);
  if (v33
    || (uint64_t v18 = *(void *)a2,
        uint64_t v19 = *((void *)a2 + 1),
        *(void *)a2 = 0,
        *((void *)a2 + 1) = 0,
        (uint64_t v20 = *((void *)a2 + 3)) != 0)
    && v19
    && ((*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18), v33))
  {
    long long v10 = *(_OWORD *)v25;
    *(_OWORD *)(a1 + 8) = v24;
    *(_OWORD *)(a1 + 24) = v10;
    *(_OWORD *)(a1 + 48) = v26;
    long long v11 = v28;
    *(_OWORD *)(a1 + 88) = v29;
    *(void *)a1 = v9;
    *(void *)(a1 + 37) = *(void *)&v25[13];
    long long v26 = 0uLL;
    uint64_t v12 = v27;
    uint64_t v27 = 0;
    *(void *)(a1 + 64) = v12;
    *(void *)(a1 + 104) = v30;
    *(_OWORD *)(a1 + 72) = v11;
    WebCore::Color::Color();
    WebCore::Color::Color();
    WebCore::Color::Color();
    *(_WORD *)(a1 + 136) = v31;
    *(unsigned char *)(a1 + 138) = v32;
    *(unsigned char *)(a1 + 144) = 1;
    if (!v33) {
      return;
    }
    WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)&v24, v13);
    if (*(unsigned char *)(a1 + 144)) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 144) = 0;
LABEL_17:
  uint64_t v21 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v22 = *((void *)a2 + 3);
  if (v22 && v21)
  {
    char v23 = *(void (**)(void))(*(void *)v22 + 16);
    v23();
  }
}

void IPC::Decoder::decode<std::tuple<WTF::URL>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, v6);
  if (v7)
  {
    WTF::URL::URL((uint64_t)a2, (uint64_t *)v6);
    int v4 = v7;
    a2[40] = 1;
    if (v4)
    {
      uint64_t v5 = v6[0];
      v6[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v3);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote10SendH2PingEN6WebKit24MediaPlayerPrivateRemoteES8_FvRKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7208;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote10SendH2PingEN6WebKit24MediaPlayerPrivateRemoteES8_FvRKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7208;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote10SendH2PingEN6WebKit24MediaPlayerPrivateRemoteES8_FvRKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2905;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, WebCore::ResourceError *a2)
{
  int v4 = *((_DWORD *)a2 + 20);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C1404);
    }
    *uint64_t v5 = 0;
    if (*((_DWORD *)a2 + 20) == 1)
    {
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, a2);
      return;
    }
LABEL_14:
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote13GetRawCookiesEN6WebKit24MediaPlayerPrivateRemoteES8_KFvRKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(v8);
    return;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C1424);
  }
  *uint64_t v5 = 1;
  if (*((_DWORD *)a2 + 20)) {
    goto LABEL_14;
  }
  double v7 = *(double *)a2;

  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v7);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote13GetRawCookiesEN6WebKit24MediaPlayerPrivateRemoteES8_KFvRKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7230;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote13GetRawCookiesEN6WebKit24MediaPlayerPrivateRemoteES8_KFvRKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7230;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote13GetRawCookiesEN6WebKit24MediaPlayerPrivateRemoteES8_KFvRKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2904;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 136 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebCore::Cookie,void>::encode(a1, v6);
      v6 += 136;
      v7 -= 136;
    }
    while (v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote21CommitAllTransactionsEN6WebKit24MediaPlayerPrivateRemoteES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7258;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote21CommitAllTransactionsEN6WebKit24MediaPlayerPrivateRemoteES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7258;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24MediaPlayerPrivateRemote21CommitAllTransactionsEN6WebKit24MediaPlayerPrivateRemoteES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2903;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WebKit::MediaSourcePrivateRemote *WebKit::MediaSourcePrivateRemote::MessageReceiver::didReceiveMessage(WebKit::MediaSourcePrivateRemote *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v5 = this;
  int v6 = *((unsigned __int16 *)a3 + 25);
  switch(v6)
  {
    case 193:
      this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v10)
      {
        uint64_t v16 = (uint64_t)this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, a2);
        long long v11 = (WebKit::MediaSourcePrivateRemote *)WTF::fastMalloc((WTF *)0x18);
        *(void *)long long v11 = &unk_1EE9B7308;
        *((void *)v11 + 1) = v16;
        uint64_t v12 = v17;
        uint64_t v17 = 0;
        *((void *)v11 + 2) = v12;
        uint64_t v20 = v11;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
        WebKit::MediaSourcePrivateRemote::MessageReceiver::mediaSourcePrivateShuttingDown(v5, (uint64_t *)&v20);
        this = v20;
        uint64_t v20 = 0;
        if (this) {
          return (WebKit::MediaSourcePrivateRemote *)(*(uint64_t (**)(WebKit::MediaSourcePrivateRemote *))(*(void *)this + 8))(this);
        }
      }
      break;
    case 194:
      this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(a3, (uint64_t)&v16);
      if (v18)
      {
        this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v13)
        {
          uint64_t v20 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a2);
          unint64_t v14 = (WebKit::MediaSourcePrivateRemote *)WTF::fastMalloc((WTF *)0x18);
          *(void *)unint64_t v14 = &unk_1EE9B72E0;
          *((void *)v14 + 1) = v20;
          uint64_t v15 = v21;
          uint64_t v21 = 0;
          *((void *)v14 + 2) = v15;
          uint64_t v22 = v14;
          this = (WebKit::MediaSourcePrivateRemote *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
          if (!v18) {
            goto LABEL_18;
          }
          WebKit::MediaSourcePrivateRemote::MessageReceiver::proxySeekToTime(v5, (uint64_t)&v16, (uint64_t *)&v22);
          this = v22;
          uint64_t v22 = 0;
          if (this) {
            return (WebKit::MediaSourcePrivateRemote *)(*(uint64_t (**)(WebKit::MediaSourcePrivateRemote *))(*(void *)this + 8))(this);
          }
        }
      }
      break;
    case 195:
      this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>(a3, (uint64_t)&v16);
      if (v19)
      {
        this = (WebKit::MediaSourcePrivateRemote *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v7)
        {
          uint64_t v20 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a2);
          uint64_t v8 = (WebKit::MediaSourcePrivateRemote *)WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v8 = &unk_1EE9B72B8;
          *((void *)v8 + 1) = v20;
          uint64_t v9 = v21;
          uint64_t v21 = 0;
          *((void *)v8 + 2) = v9;
          uint64_t v22 = v8;
          this = (WebKit::MediaSourcePrivateRemote *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
          if (v19)
          {
            WebKit::MediaSourcePrivateRemote::MessageReceiver::proxyWaitForTarget(v5, (uint64_t)&v16, (uint64_t *)&v22);
            this = v22;
            uint64_t v22 = 0;
            if (this) {
              return (WebKit::MediaSourcePrivateRemote *)(*(uint64_t (**)(WebKit::MediaSourcePrivateRemote *))(*(void *)this + 8))(this);
            }
            return this;
          }
LABEL_18:
          __break(1u);
        }
      }
      break;
  }
  return this;
}

void WebKit::MediaSourcePrivateRemote::MessageReceiver::~MessageReceiver(WebKit::MediaSourcePrivateRemote::MessageReceiver *this, void *a2)
{
  *(void *)this = &unk_1EE9B7280;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  atomic_uchar *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9B7280;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

int64_t IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = IPC::Decoder::decode<WebCore::SeekTarget>(a1, (uint64_t)v9);
  if (v10)
  {
    long long v5 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v9[2];
    *(unsigned char *)(a2 + 48) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(int64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

int64_t IPC::Decoder::decode<WebCore::SeekTarget>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = IPC::ArgumentCoder<WebCore::SeekTarget,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver18ProxyWaitForTargetEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENSA_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B72B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver18ProxyWaitForTargetEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENSA_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B72B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver18ProxyWaitForTargetEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENSA_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2908;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  int64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

int64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C1E48);
    }
    *uint64_t v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      char v7 = *(unsigned char *)a2;
      return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v7);
    }
LABEL_14:
    uint64_t v9 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(v9, v10);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C1E68);
  }
  *uint64_t v5 = 1;
  if (*(_DWORD *)(a2 + 16)) {
    goto LABEL_14;
  }

  return IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2);
}

int64_t IPC::Decoder::decode<std::tuple<WTF::MediaTime>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(int64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver15ProxySeekToTimeEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B72E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver15ProxySeekToTimeEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B72E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver15ProxySeekToTimeEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2907;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  int64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 1);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)unint64_t result = 1;
      return result;
    }
    goto LABEL_11;
  }
  if (!v6)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  *(unsigned char *)unint64_t result = 0;
  if (!*(unsigned char *)(a2 + 1))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    unint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  char v7 = *(unsigned char *)a2;

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v7);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver30MediaSourcePrivateShuttingDownEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7308;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver30MediaSourcePrivateShuttingDownEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7308;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39MediaSourcePrivateRemoteMessageReceiver30MediaSourcePrivateShuttingDownEN6WebKit24MediaSourcePrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2906;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WebPushD::MockPushServiceConnection *WebPushD::MockPushServiceConnection::MockPushServiceConnection(WebPushD::MockPushServiceConnection *this)
{
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1EE9B7330;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  qmemcpy(v5, "abc", sizeof(v5));
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v6, v5, (WTF *)3);
  WebPushD::PushServiceConnection::didReceivePublicToken((uint64_t)this, (uint64_t *)&v6);
  uint64_t v3 = v6;
  if (v6)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    WTF::fastFree(v3, v2);
  }
  return this;
}

void sub_1989C2304(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12 + 128, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12 + 112, v15);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12 + 96, v16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13, v17);
  WebPushD::PushServiceConnection::~PushServiceConnection(v12);
  _Unwind_Resume(a1);
}

void WebPushD::MockPushServiceConnection::~MockPushServiceConnection(WebPushD::MockPushServiceConnection *this, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v5);

  WebPushD::PushServiceConnection::~PushServiceConnection(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebPushD::MockPushServiceConnection::~MockPushServiceConnection(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebPushD::MockPushServiceConnection::generateClientKeys@<X0>(void *a1@<X8>)
{
  WTF::base64Decode();
  if (v6)
  {
    WTF::base64Decode();
    uint64_t result = WTF::base64Decode();
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v4;
    a1[3] = v5;
    a1[4] = v4;
    a1[5] = v5;
  }
  else
  {
    uint64_t result = std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1989C24C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13 && a10) {
    WTF::fastFree(a10, a2);
  }
  if (v14) {
    WTF::fastFree(v14, a2);
  }
  if (v13) {
    WTF::fastFree(v13, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::MockPushServiceConnection::subscribe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::base64Decode();
  if (__n_4)
  {
    if (*(_DWORD *)(a3 + 12) == __n && !memcmp(*(const void **)a3, __s2, __n))
    {
      [MEMORY[0x1E4F28C58] errorWithDomain:@"WebPush" code:-1 userInfo:0];
      uint64_t result = WTF::CompletionHandler<void ()(NSString *,NSError *)>::operator()(a4);
    }
    else
    {
      uint64_t result = WTF::CompletionHandler<void ()(NSString *,NSError *)>::operator()(a4);
    }
    if (__s2) {
      return WTF::fastFree((WTF *)__s2, v7);
    }
  }
  else
  {
    uint64_t result = std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  return result;
}

void sub_1989C2630(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::MockPushServiceConnection::unsubscribe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return WTF::CompletionHandler<void ()(BOOL,NSError *)>::operator()(a4);
}

unsigned int *WebPushD::MockPushServiceConnection::setTopicLists(unsigned int *a1, uint64_t a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 20, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 24, a2 + 16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 28, a2 + 32);

  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 32, a2 + 48);
}

unsigned int *WebPushD::MockPushServiceConnection::setEnabledTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 80), a2);
}

unsigned int *WebPushD::MockPushServiceConnection::setIgnoredTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 96), a2);
}

unsigned int *WebPushD::MockPushServiceConnection::setOpportunisticTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 112), a2);
}

unsigned int *WebPushD::MockPushServiceConnection::setNonWakingTopics(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 128), a2);
}

uint64_t WebPushD::MockPushServiceConnection::enabledTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 80);
}

uint64_t WebPushD::MockPushServiceConnection::ignoredTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 96);
}

uint64_t WebPushD::MockPushServiceConnection::opportunisticTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 112);
}

uint64_t WebPushD::MockPushServiceConnection::nonWakingTopics@<X0>(WebPushD::MockPushServiceConnection *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 128);
}

void WebKit::NearFieldLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit16NearFieldLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v2 = 0;
  if (WebKit::NearFieldLibrary(BOOL)::once != -1) {
    dispatch_once(&WebKit::NearFieldLibrary(BOOL)::once, block);
  }
}

uint64_t ___ZN6WebKit16NearFieldLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NearField.framework/NearField", 2);
  WebKit::NearFieldLibrary(BOOL)::frameworkLibrary = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initNFReaderSession(WebKit *this)
{
  if (_MergedGlobals_51 != -1) {
    dispatch_once(&_MergedGlobals_51, &__block_literal_global_8_1);
  }
  return qword_1EB358DE8;
}

uint64_t WebKit::initNFHardwareManager(WebKit *this)
{
  if (qword_1EB358DF0 != -1) {
    dispatch_once(&qword_1EB358DF0, &__block_literal_global_11_1);
  }
  return qword_1EB358DF8;
}

uint64_t ___ZN6WebKitL19initNFReaderSessionEv_block_invoke(WebKit *a1)
{
  WebKit::NearFieldLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("NFReaderSession");
  qword_1EB358DE8 = result;
  if (result)
  {
    WebKit::getNFReaderSessionClass[0] = WebKit::NFReaderSessionFunction;
  }
  else
  {
    uint64_t result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NFReaderSessionFunction(WebKit *this)
{
  return qword_1EB358DE8;
}

uint64_t ___ZN6WebKitL21initNFHardwareManagerEv_block_invoke(WebKit *a1)
{
  WebKit::NearFieldLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("NFHardwareManager");
  qword_1EB358DF8 = result;
  if (result)
  {
    WebKit::getNFHardwareManagerClass = WebKit::NFHardwareManagerFunction;
  }
  else
  {
    uint64_t result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NFHardwareManagerFunction(WebKit *this)
{
  return qword_1EB358DF8;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v14, a2);
  if (v15)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (!(_BYTE)v8) {
      return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
    }
    uint64_t v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v9 = &unk_1EE9B7558;
    v9[1] = v11;
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    _OWORD v9[2] = v10;
    uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    if (!v15)
    {
      __break(1u);
      return result;
    }
    WebKit::NetworkConnectionToWebProcess::resourceLoadStatisticsUpdated(a3, v14, (uint64_t *)&v13);
    uint64_t result = (uint64_t)v13;
    uint64_t v13 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (v15) {
      return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
    }
  }
  return result;
}

WTF *IPC::handleMessage<Messages::NetworkConnectionToWebProcess::PrioritizeResourceLoads,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t result = (WTF *)IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v5, a1);
  if (v7)
  {
    uint64_t result = WebKit::NetworkConnectionToWebProcess::prioritizeResourceLoads(a2, (uint64_t)&v5);
    if (v7)
    {
      uint64_t result = v5;
      if (v5)
      {
        uint64_t v5 = 0;
        int v6 = 0;
        return (WTF *)WTF::fastFree(result, v4);
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::didReceiveSyncNetworkConnectionToWebProcessMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  ++*(_DWORD *)(a1 + 8);
  if (*((_WORD *)a3 + 25) == 3615)
  {
    uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(a2, a3, a4, a1);
LABEL_3:
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    switch(*((_WORD *)a3 + 25))
    {
      case 0xE16:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobSize,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(unsigned long long)> &&)>(a2, a3, a4, a1);
        goto LABEL_3;
      case 0xE17:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobType,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::String)> &&)>(a2, a3, a4, a1);
        goto LABEL_3;
      case 0xE18:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookieRequestHeaderFieldValue,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(a2, a3, (uint64_t *)a4, (void *)a1);
        goto LABEL_3;
      case 0xE19:
        uint64_t v5 = (uint64_t)IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesEnabledSync,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, (uint64_t *)a4, (void *)a1);
        goto LABEL_3;
      case 0xE1A:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesForDOM,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(a2, a3, a4, (void *)a1);
        goto LABEL_3;
      case 0xE1B:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::DomCookiesForHost,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(a2, a3, a4, (void *)a1);
        goto LABEL_3;
      case 0xE1C:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadInformationResponse,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&)> &&)>(a2, a3, a4, a1);
        goto LABEL_3;
      case 0xE1D:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadIntermediateInformation,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(a2, a3, a4, a1);
        goto LABEL_3;
      case 0xE1E:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetRawCookies,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, a3, (uint64_t *)a4, (void *)a1);
        goto LABEL_3;
      case 0xE20:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TakeNetworkLoadInformationMetrics,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::NetworkLoadMetrics const&)> &&)>(a2, a3, a4, a1);
        goto LABEL_3;
      case 0xE21:
        uint64_t v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1);
        goto LABEL_3;
      default:
        break;
    }
  }
  if (*(_DWORD *)(a1 + 8) == 1) {
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  else {
    --*(_DWORD *)(a1 + 8);
  }
  return v6;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(v18, a2, (uint64_t)a3);
  int v7 = v19;
  if (v19)
  {
    long long v8 = *a3;
    *a3 = 0;
    char v15 = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
    char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v9 = &unk_1EE9B7800;
    v9[1] = v15;
    uint64_t v10 = v16[0];
    char v15 = 0;
    v16[0] = 0;
    _OWORD v9[2] = v10;
    uint64_t v17 = v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
    std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v15, v11);
    if (!v19) {
      __break(1u);
    }
    WebKit::NetworkConnectionToWebProcess::performSynchronousLoad(a4, (uint64_t)v18, (uint64_t *)&v17);
    uint64_t v13 = (uint64_t)v17;
    uint64_t v17 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v19) {
      WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v18, v12);
    }
  }
  return v7 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *a3;
    *a3 = 0;
    uint64_t v16 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v17, a1);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v12 = &unk_1EE9B7828;
    v12[1] = v16;
    uint64_t v13 = v17[0];
    v17[0] = 0;
    void v12[2] = v13;
    char v18 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v17);
    WebKit::NetworkConnectionToWebProcess::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(a4, v10, (uint64_t *)&v18);
    uint64_t v14 = (uint64_t)v18;
    char v18 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  return v9 != 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesForDOM,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, WTF::StringImpl **a3, void *a4)
{
  IPC::Decoder::decode<WTF::URL>(a2, &v52);
  if (!v55) {
    goto LABEL_20;
  }
  unsigned int v10 = IPC::Decoder::decode<WebCore::SameSiteInfo>((uint64_t *)a2);
  if (!HIBYTE(v10) || (unsigned int v15 = v10, IPC::Decoder::decode<WTF::URL>(a2, &v56), !v58))
  {
    int v12 = 0;
    int v13 = 0;
    int v5 = 0;
    int v14 = 0;
    LOBYTE(v38) = 0;
    char v51 = 0;
    goto LABEL_15;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v59);
  if (v60)
  {
    uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if ((_BYTE)v11)
    {
      uint64_t v4 = (WTF::String *)v16;
      int v17 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a2);
      if ((unsigned __int16)v17 > 0xFFu)
      {
        int v12 = v17;
        int v18 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a2);
        if ((unsigned __int16)v18 > 0xFFu)
        {
          int v13 = v18;
          uint64_t v27 = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a2);
          if ((unsigned __int16)v27 > 0xFFu)
          {
            if (!v55 || !v58 || !v60)
            {
              __break(1u);
              goto LABEL_45;
            }
            __int16 v31 = v52;
            int v5 = v12;
            int v13 = v13;
            char v52 = 0;
            int v12 = v27;
            uint64_t v38 = v31;
            long long v39 = v53;
            long long v40 = v54;
            LODWORD(v53) = v53 & 0xFFFFFFFE;
            __int16 v41 = v15;
            char v42 = BYTE2(v15);
            char v32 = v56;
            unint64_t v56 = 0;
            unint64_t v43 = v32;
            long long v44 = v57[0];
            long long v45 = v57[1];
            LODWORD(v57[0]) &= ~1u;
            long long v46 = v59;
            uint64_t v47 = v4;
            char v48 = v5;
            char v49 = v13;
            int v14 = 1;
            char v50 = (char)v27;
            goto LABEL_10;
          }
          uint64_t v11 = *(WTF::StringImpl **)a2;
          uint64_t v36 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v37 = *((void *)a2 + 3);
          if (v37 && v36) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v37 + 16))(v37, v11);
          }
        }
      }
    }
  }
  int v12 = 0;
  int v13 = 0;
  int v5 = 0;
  int v14 = 0;
  LOBYTE(v38) = 0;
LABEL_10:
  char v51 = v14;
  if (v58)
  {
    unsigned __int8 v19 = v56;
    unint64_t v56 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v11);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
LABEL_15:
  if (v55)
  {
    uint64_t v20 = v52;
    char v52 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 != 2)
      {
        *(_DWORD *)v20 -= 2;
        goto LABEL_19;
      }
      WTF::StringImpl::destroy(v20, v11);
      if (v14) {
        goto LABEL_23;
      }
LABEL_20:
      uint64_t v21 = *(WTF::StringImpl **)a2;
      uint64_t v22 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t result = *((void *)a2 + 3);
      if (result)
      {
        if (v22) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v21);
        }
        return 0;
      }
      return result;
    }
  }
LABEL_19:
  if (!v14) {
    goto LABEL_20;
  }
LABEL_23:
  long long v24 = *a3;
  *a3 = 0;
  unint64_t v56 = v24;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v57, a1);
  char v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)char v25 = &unk_1EE9B7850;
  *((void *)v25 + 1) = v56;
  uint64_t v26 = *(void *)&v57[0];
  unint64_t v56 = 0;
  *(void *)&v57[0] = 0;
  *((void *)v25 + 2) = v26;
  char v52 = v25;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v57);
  uint64_t v27 = v56;
  unint64_t v56 = 0;
  if (v27)
  {
LABEL_45:
    IPC::Encoder::~Encoder(v27, v11);
    WTF::fastFree(v34, v35);
  }
  WebKit::NetworkConnectionToWebProcess::cookiesForDOM(a4, (WTF::URL *)&v38, (unsigned __int8 *)&v41, &v43, v46, *((uint64_t *)&v46 + 1), v4, v5 != 0, v13 != 0, v12 != 0, (uint64_t *)&v52);
  long long v29 = v52;
  char v52 = 0;
  if (v29) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v29 + 8))(v29);
  }
  if (v51)
  {
    uint64_t v30 = v43;
    unint64_t v43 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    char v33 = v38;
    uint64_t v38 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v28);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  return 1;
}

IPC::Encoder *IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesEnabledSync,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(BOOL)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t *a3, void *a4)
{
  IPC::Decoder::decode<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>>((uint64_t)v18, a2);
  int v8 = v24;
  if (!v24) {
    goto LABEL_7;
  }
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)&long long v25 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v25 + 1, a1);
  unsigned int v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  *unsigned int v10 = &unk_1EE9B7878;
  v10[1] = v25;
  uint64_t v11 = *((void *)&v25 + 1);
  long long v25 = 0uLL;
  v10[2] = v11;
  int v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25 + 1);
  uint64_t result = (IPC::Encoder *)v25;
  *(void *)&long long v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  if (v24)
  {
    long long v25 = *(_OWORD *)&v19[40];
    uint64_t v26 = v20;
    WebKit::NetworkConnectionToWebProcess::cookiesEnabledSync(a4, (WTF::URL *)v18, (uint64_t)v19, &v25, v21, v22, v23, (uint64_t *)&v17);
    uint64_t v14 = (uint64_t)v17;
    int v17 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
LABEL_7:
    std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v7);
    return (IPC::Encoder *)(v8 != 0);
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookieRequestHeaderFieldValue,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t *a3, void *a4)
{
  IPC::Decoder::decode<WTF::URL>(a2, &v52);
  if (!v55) {
    goto LABEL_22;
  }
  unsigned int v8 = IPC::Decoder::decode<WebCore::SameSiteInfo>((uint64_t *)a2);
  if (HIBYTE(v8))
  {
    unsigned int v14 = v8;
    IPC::Decoder::decode<WTF::URL>(a2, v56);
    if (v58)
    {
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v59);
      if (!v61)
      {
        int v10 = 0;
        int v11 = 0;
        int v12 = 0;
        int v13 = 0;
        LOBYTE(v37) = 0;
        char v51 = 0;
        goto LABEL_12;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v62);
      if (v63)
      {
        unsigned __int16 v15 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a2);
        if (v15 > 0xFFu)
        {
          unsigned __int8 v16 = v15;
          unsigned __int16 v17 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a2);
          if (v17 > 0xFFu)
          {
            LOBYTE(v11) = v17;
            long long v29 = (WTF::StringImpl *)IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a2);
            if ((unsigned __int16)v29 > 0xFFu)
            {
              if (!v55 || !v58 || !v61 || !v63)
              {
                __break(1u);
                goto LABEL_43;
              }
              uint64_t v30 = v52;
              int v12 = v16;
              int v11 = v11;
              char v52 = 0;
              int v10 = v29;
              uint64_t v37 = v30;
              long long v38 = v53;
              long long v39 = v54;
              LODWORD(v53) = v53 & 0xFFFFFFFE;
              __int16 v40 = v14;
              char v41 = BYTE2(v14);
              __int16 v31 = *(WTF::StringImpl **)v56;
              *(void *)unint64_t v56 = 0;
              char v42 = v31;
              long long v43 = *(_OWORD *)&v56[8];
              long long v44 = v57;
              *(_DWORD *)&v56[8] &= ~1u;
              uint64_t v46 = v60;
              long long v45 = v59;
              *(_OWORD *)uint64_t v47 = v62;
              char v48 = v12;
              char v49 = v11;
              int v13 = 1;
              char v50 = (char)v29;
              goto LABEL_10;
            }
            uint64_t v9 = *(WTF::StringImpl **)a2;
            uint64_t v35 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v36 = *((void *)a2 + 3);
            if (v36 && v35) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v36 + 16))(v36, v9);
            }
          }
        }
      }
      int v10 = 0;
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      LOBYTE(v37) = 0;
LABEL_10:
      char v51 = v13;
LABEL_12:
      if (v58)
      {
        int v18 = *(WTF::StringImpl **)v56;
        *(void *)unint64_t v56 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v9);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      goto LABEL_17;
    }
  }
  int v10 = 0;
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  LOBYTE(v37) = 0;
  char v51 = 0;
LABEL_17:
  if (!v55 || (unsigned __int8 v19 = v52, v52 = 0, !v19))
  {
LABEL_21:
    if (!v13) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v19, v9);
  if (v13)
  {
LABEL_25:
    uint64_t v23 = *a3;
    *a3 = 0;
    *(void *)unint64_t v56 = v23;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v56[8], a1);
    unsigned __int8 v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)unsigned __int8 v24 = &unk_1EE9B78A0;
    *((void *)v24 + 1) = *(void *)v56;
    uint64_t v25 = *(void *)&v56[8];
    *(_OWORD *)unint64_t v56 = 0uLL;
    *((void *)v24 + 2) = v25;
    char v52 = v24;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56[8]);
    uint64_t v27 = *(IPC::Encoder **)v56;
    *(void *)unint64_t v56 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v26);
      WTF::fastFree(v33, v34);
    }
    *(_OWORD *)unint64_t v56 = v45;
    *(void *)&v56[16] = v46;
    WebKit::NetworkConnectionToWebProcess::cookieRequestHeaderFieldValue(a4, (WTF::URL *)&v37, &v40, (const WTF::URL *)&v42, (long long *)v56, v47[0], v47[2], v12 != 0, v11 != 0, v10 != 0, (uint64_t *)&v52);
    long long v28 = v52;
    char v52 = 0;
    if (v28) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v28 + 8))(v28);
    }
    if (!v51) {
      return 1;
    }
    long long v29 = v42;
    char v42 = 0;
    if (!v29)
    {
LABEL_44:
      char v32 = v37;
      uint64_t v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v9);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      return 1;
    }
    if (*(_DWORD *)v29 != 2)
    {
      *(_DWORD *)v29 -= 2;
      goto LABEL_44;
    }
LABEL_43:
    WTF::StringImpl::destroy(v29, v9);
    goto LABEL_44;
  }
LABEL_22:
  uint64_t v20 = *(WTF::StringImpl **)a2;
  uint64_t v21 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v21) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v20);
    }
    return 0;
  }
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetRawCookies,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t *a3, void *a4)
{
  IPC::Decoder::decode<WTF::URL>(a2, &v49);
  if (!v52) {
    goto LABEL_27;
  }
  unsigned int v8 = IPC::Decoder::decode<WebCore::SameSiteInfo>((uint64_t *)a2);
  if (HIBYTE(v8))
  {
    unsigned int v13 = v8;
    IPC::Decoder::decode<WTF::URL>(a2, v53);
    if (v55)
    {
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v56);
      if (!v58)
      {
        int v10 = 0;
        int v11 = 0;
        int v12 = 0;
        LOBYTE(v35) = 0;
        char v48 = 0;
LABEL_17:
        if (v55)
        {
          unsigned __int8 v19 = *(WTF::StringImpl **)v53;
          *(void *)long long v53 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v9);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        goto LABEL_22;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v59);
      if (v60)
      {
        unsigned __int16 v14 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a2);
        if (v14 > 0xFFu)
        {
          unsigned __int8 v15 = v14;
          unsigned __int8 v16 = (WTF::StringImpl *)IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a2);
          if ((unsigned __int16)v16 > 0xFFu)
          {
            if (!v52 || !v55 || !v58 || !v60)
            {
              __break(1u);
              goto LABEL_42;
            }
            unsigned __int16 v17 = v49;
            int v11 = v15;
            int v10 = v16;
            char v49 = 0;
            uint64_t v35 = v17;
            long long v36 = v50;
            long long v37 = v51;
            LODWORD(v50) = v50 & 0xFFFFFFFE;
            __int16 v38 = v13;
            char v39 = BYTE2(v13);
            int v18 = *(WTF::StringImpl **)v53;
            *(void *)long long v53 = 0;
            __int16 v40 = v18;
            long long v41 = *(_OWORD *)&v53[8];
            long long v42 = v54;
            *(_DWORD *)&v53[8] &= ~1u;
            uint64_t v44 = v57;
            long long v43 = v56;
            *(_OWORD *)long long v45 = v59;
            char v46 = v11;
            int v12 = 1;
            char v47 = (char)v16;
            goto LABEL_16;
          }
          uint64_t v9 = *(WTF::StringImpl **)a2;
          uint64_t v33 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v34 = *((void *)a2 + 3);
          if (v34 && v33) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v34 + 16))(v34, v9);
          }
        }
      }
      int v10 = 0;
      int v11 = 0;
      int v12 = 0;
      LOBYTE(v35) = 0;
LABEL_16:
      char v48 = v12;
      goto LABEL_17;
    }
  }
  int v10 = 0;
  int v11 = 0;
  int v12 = 0;
  LOBYTE(v35) = 0;
  char v48 = 0;
LABEL_22:
  if (!v52 || (uint64_t v20 = v49, v49 = 0, !v20))
  {
LABEL_26:
    if (!v12) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
    goto LABEL_26;
  }
  WTF::StringImpl::destroy(v20, v9);
  if (v12)
  {
LABEL_30:
    uint64_t v24 = *a3;
    *a3 = 0;
    *(void *)long long v53 = v24;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v53[8], a1);
    uint64_t v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v25 = &unk_1EE9B78C8;
    *((void *)v25 + 1) = *(void *)v53;
    uint64_t v26 = *(void *)&v53[8];
    *(_OWORD *)long long v53 = 0uLL;
    *((void *)v25 + 2) = v26;
    char v49 = v25;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53[8]);
    long long v28 = *(IPC::Encoder **)v53;
    *(void *)long long v53 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v27);
      WTF::fastFree(v31, v32);
    }
    *(_OWORD *)long long v53 = v43;
    *(void *)&v53[16] = v44;
    WebKit::NetworkConnectionToWebProcess::getRawCookies(a4, (WTF::URL *)&v35, &v38, (const WTF::URL *)&v40, (int)v53, v45[0], v45[2], v11 != 0, v10 != 0, (uint64_t *)&v49);
    long long v29 = v49;
    char v49 = 0;
    if (v29) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v29 + 8))(v29);
    }
    if (!v48) {
      return 1;
    }
    unsigned __int8 v16 = v40;
    __int16 v40 = 0;
    if (!v16)
    {
LABEL_43:
      uint64_t v30 = v35;
      uint64_t v35 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v9);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      return 1;
    }
    if (*(_DWORD *)v16 != 2)
    {
      *(_DWORD *)v16 -= 2;
      goto LABEL_43;
    }
LABEL_42:
    WTF::StringImpl::destroy(v16, v9);
    goto LABEL_43;
  }
LABEL_27:
  uint64_t v21 = *(WTF::StringImpl **)a2;
  uint64_t v22 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v22) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v21);
    }
    return 0;
  }
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::DomCookiesForHost,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, void *a4)
{
  IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v18);
  int v7 = v19;
  if (!v19) {
    return v7 != 0;
  }
  unsigned int v8 = *a3;
  *a3 = 0;
  unsigned __int8 v15 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9B78F0;
  v9[1] = v15;
  int v10 = v16[0];
  v16[0] = 0;
  _OWORD v9[2] = v10;
  unsigned __int16 v17 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  BOOL result = 0;
  if (v19)
  {
    WebKit::NetworkConnectionToWebProcess::domCookiesForHost(a4, (WTF::URL *)v18, (uint64_t *)&v17);
    uint64_t v13 = (uint64_t)v17;
    unsigned __int16 v17 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v19)
    {
      unsigned __int16 v14 = v18[0];
      v18[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    return v7 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobType,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::String)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v18);
  int v7 = v19;
  if (!v19) {
    return v7 != 0;
  }
  unsigned int v8 = *a3;
  *a3 = 0;
  unsigned __int8 v15 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9B7918;
  v9[1] = v15;
  int v10 = v16[0];
  v16[0] = 0;
  _OWORD v9[2] = v10;
  unsigned __int16 v17 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  BOOL result = 0;
  if (v19)
  {
    WebKit::NetworkConnectionToWebProcess::blobType(a4, (const WTF::URL *)v18, (uint64_t *)&v17);
    uint64_t v13 = (uint64_t)v17;
    unsigned __int16 v17 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v19)
    {
      unsigned __int16 v14 = v18[0];
      v18[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    return v7 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobSize,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(unsigned long long)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v18);
  int v7 = v19;
  if (!v19) {
    return v7 != 0;
  }
  unsigned int v8 = *a3;
  *a3 = 0;
  unsigned __int8 v15 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9B7940;
  v9[1] = v15;
  int v10 = v16[0];
  v16[0] = 0;
  _OWORD v9[2] = v10;
  unsigned __int16 v17 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  BOOL result = 0;
  if (v19)
  {
    WebKit::NetworkConnectionToWebProcess::blobSize(a4, (const WTF::URL *)v18, (uint64_t *)&v17);
    uint64_t v13 = (uint64_t)v17;
    unsigned __int16 v17 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v19)
    {
      unsigned __int16 v14 = v18[0];
      v18[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    return v7 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadInformationResponse,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = v7;
    int v11 = *a3;
    *a3 = 0;
    unsigned __int8 v15 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
    int v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int v12 = &unk_1EE9B7968;
    v12[1] = v15;
    uint64_t v13 = v16[0];
    v16[0] = 0;
    void v12[2] = v13;
    unsigned __int16 v17 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
    WebKit::NetworkConnectionToWebProcess::getNetworkLoadInformationResponse(a4, v10, (uint64_t *)&v17);
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
  }
  return v9 != 0;
}

void WebKit::NetworkConnectionToWebProcess::getNetworkLoadInformationResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 152), a2);
  if (v4)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4 + 200);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 8);
    v6(v5);
  }
  else
  {
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v10);
    CFTypeRef cf = 0;
    char v13 = 0;
    char v11 = v11 & 0xF1 | 4;
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 16))(v7, v10);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v10, v8);
  }
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadIntermediateInformation,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = v7;
    char v11 = *a3;
    *a3 = 0;
    unsigned __int8 v15 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
    int v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int v12 = &unk_1EE9B7990;
    v12[1] = v15;
    char v13 = v16[0];
    v16[0] = 0;
    void v12[2] = v13;
    unsigned __int16 v17 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
    WebKit::NetworkConnectionToWebProcess::getNetworkLoadIntermediateInformation(a4, v10, (uint64_t *)&v17);
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
  }
  return v9 != 0;
}

uint64_t WebKit::NetworkConnectionToWebProcess::getNetworkLoadIntermediateInformation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 152), a2);
  if (v4)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4 + 584);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 16))(v8, v10);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    return WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v9);
  }
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TakeNetworkLoadInformationMetrics,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::NetworkLoadMetrics const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = v7;
    char v11 = *a3;
    *a3 = 0;
    unsigned __int8 v15 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
    int v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int v12 = &unk_1EE9B79B8;
    v12[1] = v15;
    char v13 = v16[0];
    v16[0] = 0;
    void v12[2] = v13;
    unsigned __int16 v17 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
    WebKit::NetworkConnectionToWebProcess::takeNetworkLoadInformationMetrics(a4, v10, (uint64_t *)&v17);
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
  }
  return v9 != 0;
}

void WebKit::NetworkConnectionToWebProcess::takeNetworkLoadInformationMetrics(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v18 = a2;
  uint64_t v5 = (uint64_t *)(a1 + 152);
  uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 152), &v18);
  uint64_t v7 = *(void **)(a1 + 152);
  if (v7) {
    v7 += 2 * *((unsigned int *)v7 - 1);
  }
  if (v7 == v6) {
    goto LABEL_13;
  }
  unsigned __int8 v8 = (void *)v6[1];
  v6[1] = 0;
  if (*v5)
  {
    uint64_t v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
    if ((void *)v9 == v6) {
      goto LABEL_11;
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_11;
    }
    uint64_t v9 = 0;
  }
  if ((void *)v9 != v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v5, v6);
  }
LABEL_11:
  if (v8)
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v10 + 16))(v10, v8 + 57);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    v15[0] = 0;
    std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v15, v8);
    return;
  }
LABEL_13:
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v15);
  uint64_t v11 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 16))(v11, v15);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  char v13 = v17;
  unsigned __int16 v17 = 0;
  if (v13) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13);
  }
  unsigned __int16 v14 = v16;
  unsigned __int8 v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(void *)(result + 16 * v6);
    if (v7 == a2)
    {
      return *(void *)(result + 16 * v6 + 8);
    }
    else
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(void *)(result + 16 * v6);
        ++v8;
        if (v7 == a2) {
          return *(void *)(result + 16 * v6 + 8);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::NetworkTransactionInformation>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 592 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebCore::NetworkTransactionInformation>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  if (a1 != a2)
  {
    unsigned int v3 = a1;
    do
    {
      unint64_t v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)v3 + 73);
      *((void *)v3 + 73) = 0;
      if (v4) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
      }
      unint64_t v5 = (WTF::StringImpl *)*((void *)v3 + 69);
      *((void *)v3 + 69) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t v6 = (const void *)*((void *)v3 + 56);
      *((void *)v3 + 56) = 0;
      if (v6) {
        CFRelease(v6);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WTF::StringImpl *)((char *)v3 + 208), a2);
      uint64_t v7 = (const void *)*((void *)v3 + 25);
      *((void *)v3 + 25) = 0;
      if (v7) {
        CFRelease(v7);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WTF::StringImpl *)((char *)v3 + 8));
      unsigned int v3 = (WTF::StringImpl *)((char *)v3 + 592);
    }
    while (v3 != a2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  unint64_t v5 = (void *)a2[1];
  unsigned int v3 = a2 + 1;
  unint64_t v4 = v5;
  *unsigned int v3 = 0;
  if (v5) {
    std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v3, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v10 >> 1, 0);
    }
  }
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    char v13 = (void *)(v6 + 8);
    do
    {
      uint64_t v14 = *(v13 - 1);
      if (v14 != -1)
      {
        if (v14)
        {
          unsigned __int8 v15 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v13 - 1);
          unsigned __int8 v16 = (void *)v15[1];
          v15[1] = 0;
          if (v16) {
            std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)(v15 + 1), v16);
          }
          void *v15 = *(v13 - 1);
          unsigned __int16 v17 = (void *)*v13;
          void *v13 = 0;
          v15[1] = v17;
          unsigned int v10 = (void *)*v13;
          void *v13 = 0;
          if (v10) {
            std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v13, v10);
          }
          if (v13 - 1 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          unsigned int v10 = (void *)*v13;
          void *v13 = 0;
          if (v10) {
            std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v13, v10);
          }
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    BOOL result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

void std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 73), a2);
    unint64_t v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a2[72];
    a2[72] = 0;
    if (v4) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
    }
    unint64_t v5 = (WTF::StringImpl *)a2[68];
    a2[68] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    unint64_t v6 = (const void *)a2[55];
    a2[55] = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a2 + 25), v3);
    unsigned int v7 = (const void *)a2[24];
    a2[24] = 0;
    if (v7) {
      CFRelease(v7);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a2);
    WTF::fastFree(v8, v9);
  }
}

uint64_t IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::decode((uint64_t)a2, (uint64_t)a2, a3);
  if (!*(unsigned char *)(a1 + 3792))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(void *)(a1 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = 0;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(void *)(a1 + 40) = v5;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    *(unsigned char *)uint64_t result = *(unsigned char *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(result + 16) = v5;
    long long v6 = *(_OWORD *)(a2 + 24);
    long long v7 = *(_OWORD *)(a2 + 33);
    *(unsigned char *)(result + 56) = 0;
    uint64_t v8 = result + 56;
    *(_OWORD *)(v8 - 23) = v7;
    *(_OWORD *)(v8 - 32) = v6;
    *(unsigned char *)(v8 + 128) = 0;
    if (*(unsigned char *)(a2 + 184))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(v8, a2 + 56);
      *(unsigned char *)(v3 + 184) = 1;
    }
    long long v9 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 208) = v9;
    *(unsigned char *)(v3 + 224) = 0;
    *(unsigned char *)(v3 + 232) = 0;
    if (*(unsigned char *)(a2 + 232))
    {
      uint64_t v10 = *(void *)(a2 + 224);
      *(void *)(a2 + 224) = 0;
      *(void *)(v3 + 224) = v10;
      *(unsigned char *)(v3 + 232) = 1;
    }
    uint64_t v11 = *(void *)(a2 + 240);
    *(void *)(a2 + 240) = 0;
    *(void *)(v3 + 240) = v11;
    uint64_t v12 = *(void *)(a2 + 248);
    *(void *)(a2 + 248) = 0;
    *(void *)(v3 + 248) = v12;
    uint64_t v13 = *(void *)(a2 + 256);
    *(void *)(a2 + 256) = 0;
    *(void *)(v3 + 256) = v13;
    uint64_t v14 = *(void *)(a2 + 264);
    *(void *)(a2 + 264) = 0;
    *(void *)(v3 + 264) = v14;
    *(unsigned char *)(v3 + 272) = 0;
    *(unsigned char *)(v3 + 296) = 0;
    if (*(unsigned char *)(a2 + 296))
    {
      uint64_t v15 = *(void *)(a2 + 272);
      *(void *)(a2 + 272) = 0;
      *(void *)(v3 + 272) = v15;
      uint64_t v16 = *(void *)(a2 + 280);
      *(void *)(a2 + 280) = 0;
      *(void *)(v3 + 280) = v16;
      uint64_t v17 = *(void *)(a2 + 288);
      *(void *)(a2 + 288) = 0;
      *(void *)(v3 + 288) = v17;
      *(unsigned char *)(v3 + 296) = 1;
    }
    uint64_t v18 = *(void *)(a2 + 304);
    *(void *)(a2 + 304) = 0;
    *(void *)(v3 + 304) = v18;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a2;
    uint64_t v2 = a1;
    char v4 = *(unsigned char *)(a2 + 2);
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = v4;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (!*(unsigned char *)(a2 + 16)) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v10 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v2 + 8) = v10;
  *(unsigned char *)(v2 + 16) = 1;
LABEL_3:
  *(unsigned char *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  if (*(unsigned char *)(v3 + 32))
  {
    uint64_t v5 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    *(void *)(v2 + 24) = v5;
    *(unsigned char *)(v2 + 32) = 1;
  }
  *(unsigned char *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 0;
  if (*(unsigned char *)(v3 + 48))
  {
    uint64_t v11 = *(void *)(v3 + 40);
    *(void *)(v3 + 40) = 0;
    *(void *)(v2 + 40) = v11;
    *(unsigned char *)(v2 + 48) = 1;
  }
  std::__optional_move_base<WebCore::ApplePayPaymentOrderDetails,false>::__optional_move_base[abi:sn180100](v2 + 56, (uint64_t *)(v3 + 56));
  *(unsigned char *)(v2 + 96) = 0;
  *(unsigned char *)(v2 + 120) = 0;
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v6 = *(void *)(v3 + 96);
    *(void *)(v3 + 96) = 0;
    *(void *)(v2 + 96) = v6;
    uint64_t v7 = *(void *)(v3 + 104);
    *(void *)(v3 + 104) = 0;
    *(void *)(v2 + 104) = v7;
    uint64_t v8 = *(void *)(v3 + 112);
    *(void *)(v3 + 112) = 0;
    *(void *)(v2 + 112) = v8;
    *(unsigned char *)(v2 + 120) = 1;
  }
  return v2;
}

void IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::ArgumentCoder<std::tuple<WebKit::NetworkResourceLoadParameters>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!a1[3792])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::NetworkResourceLoadParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>((uint64_t)v6, a2, a3);
  if (v7)
  {
    WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)a1, (uint64_t)v6);
    int v5 = v7;
    a1[3792] = 1;
    if (v5) {
      WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v6, v4);
    }
  }
  else
  {
    *a1 = 0;
    a1[3792] = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10SendH2PingEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10SendH2PingEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7408;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10SendH2PingEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_7SecondsEN7WebCore13ResourceErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, WebCore::ResourceError *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2933;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder **std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](IPC::Encoder **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    IPC::Encoder::~Encoder(v3, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22IsResourceLoadFinishedEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22IsResourceLoadFinishedEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7430;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22IsResourceLoadFinishedEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2924;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_13:
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t result = (uint64_t *)result[3];
    if (result && v3) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
    }
    *(unsigned char *)a2 = 0;
    goto LABEL_15;
  }
  if (!v7)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    *(unsigned char *)(a2 + 40) = 1;
    return result;
  }
  uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::SecurityOriginData>(result, v17);
  int v8 = v19;
  *(unsigned char *)a2 = 0;
  if (!v8)
  {
LABEL_15:
    *(unsigned char *)(a2 + 40) = 0;
    return result;
  }
  *(_DWORD *)(a2 + 24) = -1;
  uint64_t result = (uint64_t *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v17);
  *(unsigned char *)(a2 + 32) = 1;
  int v9 = v19;
  *(unsigned char *)(a2 + 40) = 1;
  if (v9)
  {
    if (v18 != -1) {
      return (uint64_t *)((uint64_t (*)(char *, unsigned char *))off_1EE9B73E8[v18])(&v16, v17);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v20;
        uint64_t v11 = *v20;
        unint64_t v10 = v20[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_8;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_8:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unsigned __int8 v19 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v19;
        uint64_t v2 = *v19;
        unint64_t v1 = v19[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_9;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    int v7 = 256;
    goto LABEL_5;
  }
LABEL_9:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = a1[3];
  if (v6)
  {
    int v18 = a1;
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v2);
    }
    LODWORD(v6) = 0;
    int v7 = 0;
    a1 = v18;
  }
  else
  {
    int v7 = 0;
  }
LABEL_5:
  uint64_t v8 = v7 | v6;
  if (v8 <= 0xFF)
  {
    uint64_t v14 = *a1;
    uint64_t v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      if (v15)
      {
        unsigned int v17 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
        return v17;
      }
    }
  }
  return v8;
}

void IPC::Decoder::decode<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::URL>(a2, v10);
  if (!v11) {
    goto LABEL_25;
  }
  IPC::Decoder::decode<WTF::URL>(a2, v12);
  if (v13)
  {
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a2, (uint64_t)&v14);
    if (!v16)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 128) = 0;
      goto LABEL_12;
    }
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, &v17);
    char v5 = v18;
    if (v18)
    {
      unsigned __int16 v6 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a2);
      if (v6 > 0xFFu)
      {
        if (v11 && v13 && v16 && v18)
        {
          char v7 = v6;
          WTF::URL::URL(a1, (uint64_t *)v10);
          WTF::URL::URL(a1 + 40, (uint64_t *)v12);
          *(_OWORD *)(a1 + 80) = v14;
          *(void *)(a1 + 96) = v15;
          *(_OWORD *)(a1 + 104) = v17;
          *(unsigned char *)(a1 + 120) = v7;
          char v5 = 1;
LABEL_11:
          *(unsigned char *)(a1 + 128) = v5;
LABEL_12:
          if (v13)
          {
            uint64_t v8 = v12[0];
            v12[0] = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2) {
                WTF::StringImpl::destroy(v8, v4);
              }
              else {
                *(_DWORD *)v8 -= 2;
              }
            }
          }
          goto LABEL_16;
        }
        __break(1u);
LABEL_25:
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 128) = 0;
        goto LABEL_20;
      }
      IPC::Decoder::markInvalid(a2);
      char v5 = 0;
    }
    *(unsigned char *)a1 = 0;
    goto LABEL_11;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 128) = 0;
LABEL_16:
  if (v11)
  {
    int v9 = v10[0];
    v10[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
LABEL_20:
  if (!*(unsigned char *)(a1 + 128))
  {
    IPC::Decoder::markInvalid(a2);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14CookiesEnabledEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yLSK_0EEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14CookiesEnabledEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yLSK_0EEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14CookiesEnabledEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yLSK_0EEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2915;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  unsigned __int16 v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder,WTF::URL>(a1, (uint64_t)v6, (uint64_t)a2);
    if (v7)
    {
      uint64_t v5 = v6[0];
      v6[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::String>,void>::decode<IPC::Decoder,WTF::URL>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  char v5 = v7;
  if (!v7)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    WTF::URL::URL(a3, (uint64_t *)a2);
    *(void *)(a3 + 40) = v6;
    char v5 = 1;
LABEL_4:
    *(unsigned char *)(a3 + 48) = v5;
    return;
  }
  __break(1u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess12DeleteCookieEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess12DeleteCookieEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess12DeleteCookieEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2918;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess18CookiesForDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONSC_21CookieStoreGetOptionsEONS_17CompletionHandlerIFvONSH_INS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS16_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B74A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess18CookiesForDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONSC_21CookieStoreGetOptionsEONS_17CompletionHandlerIFvONSH_INS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS16_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B74A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess18CookiesForDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONSC_21CookieStoreGetOptionsEONS_17CompletionHandlerIFvONSH_INS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJS16_EE4callES16_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2916;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C609CLL);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess21SetCookieFromDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_23ApplyTrackingPreventionEONSC_6CookieENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v12);
    }
    IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C60BCLL);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  char v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess21SetCookieFromDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_23ApplyTrackingPreventionEONSC_6CookieENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B74D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess21SetCookieFromDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_23ApplyTrackingPreventionEONSC_6CookieENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B74D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess21SetCookieFromDOMAsyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_23ApplyTrackingPreventionEONSC_6CookieENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2934;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::Decoder::decode<WebCore::BlobPart>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebCore::BlobPart,void>::decode(a2, a1);
  if (!a1[48])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 40) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(v4, v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C645CLL);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(void *)result + 48 * *(unsigned int *)(result + 12);
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)uint64_t v2 = v6;
    uint64_t result = WTF::VectorMover<false,WebCore::BlobPart>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::BlobPart>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = result;
    do
    {
      *(unsigned char *)a3 = 0;
      *(_DWORD *)(a3 + 40) = -1;
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(a3, v7);
      uint64_t v8 = *(unsigned int *)(v7 + 40);
      if (v8 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B74E8[v8])(&v9, v7);
      }
      *(_DWORD *)(v7 + 40) = -1;
      v7 += 48;
      a3 += 48;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(unsigned int **)a1;
  if (v3)
  {
    uint64_t v6 = 48 * v3;
    do
    {
      uint64_t v7 = v4[10];
      if (v7 != -1) {
        ((void (*)(char *, unsigned int *))off_1EE9B74E8[v7])(&v8, v4);
      }
      v4[10] = -1;
      v4 += 12;
      v6 -= 48;
    }
    while (v6);
    uint64_t v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WTF::URL>(a2, v8);
  if (v9)
  {
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>((uint64_t *)a2, (uint64_t)v11);
    if (v14)
    {
      if (!v9) {
        __break(1u);
      }
      WTF::URL::URL(a1, (uint64_t *)v8);
      *(unsigned char *)(v6 + 40) = 0;
      uint64_t result = (WTF::StringImpl *)(v6 + 40);
      *((unsigned char *)result + 32) = 0;
      if (v13)
      {
        *(_DWORD *)(a1 + 64) = -1;
        uint64_t result = (WTF::StringImpl *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)result, (uint64_t)v11);
        *(unsigned char *)(a1 + 72) = 1;
        int v7 = v13;
        *(unsigned char *)(a1 + 80) = 1;
        if (v14 && v7 && v12 != -1) {
          uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9B73E8[v12])(&v10, v11);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 80) = 1;
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 80) = 0;
    }
    if (v9)
    {
      uint64_t result = v8[0];
      v8[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 80) = 0;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 64);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9B73E8[v3])(&v6, a1 + 40);
      }
      *(_DWORD *)(a1 + 64) = -1;
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38WriteBlobsToTemporaryFilesForIndexedDBEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvOSD_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38WriteBlobsToTemporaryFilesForIndexedDBEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvOSD_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38WriteBlobsToTemporaryFilesForIndexedDBEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvOSD_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2938;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess26RegisterBlobPathForTestingEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess26RegisterBlobPathForTestingEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess26RegisterBlobPathForTestingEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2930;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v7, a2);
  char v5 = v9;
  if (v9)
  {
    *(void *)a1 = v7;
    uint64_t v6 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)(a1 + 8) = v6;
    unint64_t result = WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (result >> 1 >= 0xA3D)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ResourceLoadStatistics>(v13, a2);
      if (!v14) {
        break;
      }
      int v10 = HIDWORD(v16);
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ResourceLoadStatistics>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebCore::ResourceLoadStatistics::ResourceLoadStatistics(v15 + 200 * HIDWORD(v16), v13);
        HIDWORD(v16) = v10 + 1;
      }
      if (v14) {
        WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v13, v11);
      }
      if (!--v6)
      {
        WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v15, HIDWORD(v16));
        *(void *)a1 = v15;
        uint64_t v12 = v16;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)(a1 + 8) = v12;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_5:
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
LABEL_6:
      *(unsigned char *)(a1 + 16) = 1;
      return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
    }
    LODWORD(v16) = 200 * (int)result / 0xC8u;
    uint64_t v15 = WTF::fastMalloc((WTF *)(200 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ResourceLoadStatistics>(v13, a2);
      if (!v14) {
        break;
      }
      int v9 = HIDWORD(v16);
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ResourceLoadStatistics>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebCore::ResourceLoadStatistics::ResourceLoadStatistics(v15 + 200 * HIDWORD(v16), v13);
        HIDWORD(v16) = v9 + 1;
      }
      if (v14) {
        WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v13, v5);
      }
      if (!--v6)
      {
        uint64_t v7 = v15;
        uint64_t v8 = v16;
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

void IPC::Decoder::decode<WebCore::ResourceLoadStatistics>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::decode(a2, a1);
  if (!a1[200])
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v5 = *((void *)a2 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ResourceLoadStatistics>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::ResourceLoadStatistics::ResourceLoadStatistics(*(void *)a1 + 200 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 200 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x147AE15)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C6FD8);
    }
    unint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = (uint64_t *)(*(void *)a1 + 200 * *(unsigned int *)(a1 + 12));
    int v5 = 200 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(200 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0xC8;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::ResourceLoadStatistics>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::ResourceLoadStatistics>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      WebCore::ResourceLoadStatistics::ResourceLoadStatistics(a3, v5);
      WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v5, v6);
      a3 += 200;
      v5 += 25;
    }
    while (v5 != a2);
  }
}

void WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      int v5 = (WebCore::ResourceLoadStatistics *)(*(void *)a1 + 200 * a2);
      uint64_t v6 = 200 * v4 - 200 * a2;
      do
      {
        WebCore::ResourceLoadStatistics::~ResourceLoadStatistics(v5, (WTF::StringImpl *)a2);
        int v5 = (WebCore::ResourceLoadStatistics *)(v7 + 200);
        v6 -= 200;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unint64_t v8 = *(uint64_t **)a1;
    if (a2)
    {
      if (a2 >= 0x147AE15)
      {
        __break(0xC471u);
        return;
      }
      unint64_t v9 = (WTF *)(200 * a2);
      uint64_t v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0xC8;
      *(void *)a1 = v10;
      if ((uint64_t *)v10 != v8) {
        WTF::VectorMover<false,WebCore::ResourceLoadStatistics>::move(v8, &v8[25 * v4], v10);
      }
    }
    if (v8)
    {
      if (*(uint64_t **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v8, (void *)a2);
    }
  }
}

uint64_t WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WebCore::ResourceLoadStatistics **)a1;
    uint64_t v7 = 200 * v3;
    do
    {
      WebCore::ResourceLoadStatistics::~ResourceLoadStatistics(v6, a2);
      uint64_t v6 = (WebCore::ResourceLoadStatistics *)(v8 + 200);
      v7 -= 200;
    }
    while (v7);
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29ResourceLoadStatisticsUpdatedEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_6VectorIN7WebCore22ResourceLoadStatisticsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7558;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29ResourceLoadStatisticsUpdatedEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_6VectorIN7WebCore22ResourceLoadStatisticsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7558;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29ResourceLoadStatisticsUpdatedEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_6VectorIN7WebCore22ResourceLoadStatisticsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkConnectionToWebProcess *,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

IPC::Encoder **IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkConnectionToWebProcess *,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v3 = 2932;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v6 = v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v6, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v6, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess16HasStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSD_INS9_18PageIdentifierTypeESG_yLSH_0EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7580;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess16HasStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSD_INS9_18PageIdentifierTypeESG_yLSH_0EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7580;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess16HasStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSD_INS9_18PageIdentifierTypeESG_yLSH_0EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2921;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20RequestStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSD_INS9_18PageIdentifierTypeESG_yLSH_0EEENSD_INS7_26WebPageProxyIdentifierTypeESG_yLSH_1EEENS9_18StorageAccessScopeEONS_17CompletionHandlerIFvNS9_26RequestStorageAccessResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B75A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20RequestStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSD_INS9_18PageIdentifierTypeESG_yLSH_0EEENSD_INS7_26WebPageProxyIdentifierTypeESG_yLSH_1EEENS9_18StorageAccessScopeEONS_17CompletionHandlerIFvNS9_26RequestStorageAccessResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B75A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20RequestStorageAccessEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainESB_NS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSD_INS9_18PageIdentifierTypeESG_yLSH_0EEENSD_INS7_26WebPageProxyIdentifierTypeESG_yLSH_1EEENS9_18StorageAccessScopeEONS_17CompletionHandlerIFvNS9_26RequestStorageAccessResultEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2931;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35StorageAccessQuirkForTopFrameDomainEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B75D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35StorageAccessQuirkForTopFrameDomainEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B75D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35StorageAccessQuirkForTopFrameDomainEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2936;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v22);
  if (!v23) {
    goto LABEL_24;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v24);
  if (v25)
  {
    uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v26);
    if (!v27)
    {
      int v13 = 0;
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 32) = 0;
      goto LABEL_10;
    }
    unint64_t v6 = *((void *)a2 + 1);
    int v5 = *(WTF::StringImpl **)a2;
    unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
    if (v6 <= v7)
    {
      unint64_t v17 = 0;
      char v18 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v19 = *((void *)a2 + 3);
      if (v19)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
          char v18 = *(WTF::StringImpl **)a2;
          unint64_t v17 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v17 = 0;
          char v18 = 0;
        }
      }
    }
    else
    {
      uint64_t v8 = (unsigned __int8 *)v5 + v7;
      *((void *)a2 + 2) = v8 + 1;
      if (v5)
      {
        unsigned int v9 = *v8;
        if (v9 < 2)
        {
          BOOL v10 = v9 != 0;
          if (v23 && v25)
          {
            uint64_t v11 = v22;
            uint64_t v22 = 0;
            uint64_t v12 = v24;
            uint64_t v24 = 0;
            *(void *)a1 = v11;
            *(void *)(a1 + 8) = v12;
            *(void *)(a1 + 16) = v26;
            *(unsigned char *)(a1 + 24) = v10;
            int v13 = 1;
            *(unsigned char *)(a1 + 32) = 1;
LABEL_10:
            if (v25)
            {
              uint64_t result = v24;
              uint64_t v24 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2) {
                  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
                }
                else {
                  *(_DWORD *)result -= 2;
                }
              }
            }
            goto LABEL_15;
          }
          __break(1u);
LABEL_24:
          *(unsigned char *)a1 = 0;
          *(unsigned char *)(a1 + 32) = 0;
          goto LABEL_25;
        }
LABEL_36:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
        if (result && v6) {
          uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
        }
        *(unsigned char *)a1 = 0;
        int v21 = v27;
        *(unsigned char *)(a1 + 32) = 0;
        if (v21)
        {
          uint64_t result = v26;
          uint64_t v26 = 0;
          if (result)
          {
            if (*(_DWORD *)result != 2)
            {
              int v13 = 0;
              *(_DWORD *)result -= 2;
              goto LABEL_10;
            }
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
        }
        int v13 = 0;
        goto LABEL_10;
      }
      unint64_t v17 = v6;
      char v18 = 0;
    }
    unint64_t v6 = 0;
    int v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        int v5 = *(WTF::StringImpl **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        int v5 = 0;
      }
    }
    goto LABEL_36;
  }
  int v13 = 0;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
LABEL_15:
  if (v23)
  {
    uint64_t result = v22;
    uint64_t v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v13) {
          return result;
        }
        goto LABEL_25;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v13) {
    return result;
  }
LABEL_25:
  uint64_t v14 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v16();
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    unsigned int v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    int v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28EstablishSWContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore17RegistrableDomainENSt3__18optionalINSF_16ProcessQualifiedINS_4UUIDEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B75F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28EstablishSWContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore17RegistrableDomainENSt3__18optionalINSF_16ProcessQualifiedINS_4UUIDEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B75F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28EstablishSWContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore17RegistrableDomainENSt3__18optionalINSF_16ProcessQualifiedINS_4UUIDEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v3 = 2919;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38EstablishSharedWorkerContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38EstablishSharedWorkerContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess38EstablishSharedWorkerContextConnectionEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v3 = 2920;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess17CreateRTCProviderEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess17CreateRTCProviderEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess17CreateRTCProviderEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v3 = 2917;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder,WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>,void>::decode<IPC::Decoder,WebCore::RTCDataChannelIdentifier>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)&v8);
  char v6 = v9;
  if (!v9)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    long long v7 = v8;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35ConnectToRTCDataChannelRemoteSourceEN6WebKit29NetworkConnectionToWebProcessES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35ConnectToRTCDataChannelRemoteSourceEN6WebKit29NetworkConnectionToWebProcessES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35ConnectToRTCDataChannelRemoteSourceEN6WebKit29NetworkConnectionToWebProcessES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, __int16 a2)
{
  __int16 v9 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2914;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  BOOL v10 = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(v4, (char *)&v9);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::MessagePortIdentifier>(a2, (uint64_t)&v6);
  if (v7 && (uint64_t result = IPC::Decoder::decode<WebCore::MessagePortIdentifier>(a2, (uint64_t)&v8), v9))
  {
    if (v7)
    {
      long long v5 = v8;
      *(_OWORD *)a1 = v6;
      *(_OWORD *)(a1 + 16) = v5;
      *(unsigned char *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22TakeAllMessagesForPortEN6WebKit29NetworkConnectionToWebProcessES8_FvRKN7WebCore21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS9_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_yEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22TakeAllMessagesForPortEN6WebKit29NetworkConnectionToWebProcessES8_FvRKN7WebCore21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS9_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_yEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22TakeAllMessagesForPortEN6WebKit29NetworkConnectionToWebProcessES8_FvRKN7WebCore21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS9_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_yEE4callESJ_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2937;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v17 = v7;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, *(unsigned int *)(a2 + 12));
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    BOOL v15 = *(uint64_t **)a2;
    uint64_t v16 = 24 * v8;
    do
    {
      IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::encode(v7, v15);
      v15 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  char v9 = (void *)IPC::Encoder::grow(v7, 8uLL, 8);
  if (v10 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v9 = a3;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v17, 0, 0);
    uint64_t result = (uint64_t)v17;
    unint64_t v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      return WTF::fastFree(v13, v14);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (v6 = result, uint64_t result = IPC::Decoder::decode<WebCore::LoadSchedulingMode>(a2), (unsigned __int16)result > 0xFFu))
  {
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = result;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 16) = v7;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::LoadSchedulingMode>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::LoadSchedulingMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WebCore::LoadSchedulingMode,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v4 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v4);
  int v1 = HIBYTE(v4);
  if (!HIBYTE(v4)) {
    goto LABEL_7;
  }
  uint64_t result = WTF::isValidEnum<WebCore::LoadSchedulingMode,void>(v4);
  if (!result)
  {
    int v1 = 0;
LABEL_7:
    int v3 = 0;
    return v1 | (v3 << 8);
  }
  if (HIBYTE(v4))
  {
    int v3 = 1;
    int v1 = v4;
    return v1 | (v3 << 8);
  }
  __break(1u);
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v5, a2);
  char v4 = v6;
  if (v6)
  {
    *(void *)a1 = v5[0];
    *(void *)(a1 + 8) = v5[1];
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (result >= 0x20000)
  {
    while (1)
    {
      uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
      uint64_t v12 = v10;
      int v13 = v5;
      if (!(_BYTE)v5) {
        break;
      }
      if (HIDWORD(v15) == v15)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t)&v14, (unint64_t)&v12);
      }
      else
      {
        *((void *)v14 + HIDWORD(v15)) = v10;
        ++HIDWORD(v15);
      }
      if (!--v6)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v14, HIDWORD(v15));
        *(void *)a1 = v14;
        uint64_t v11 = v15;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        *(void *)(a1 + 8) = v11;
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
LABEL_12:
      uint64_t v14 = 0;
      *(void *)a1 = v8;
      HIDWORD(v15) = 0;
      *(void *)(a1 + 8) = v9;
LABEL_13:
      *(unsigned char *)(a1 + 16) = 1;
      goto LABEL_14;
    }
    LODWORD(v15) = result;
    uint64_t v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * result));
    while (1)
    {
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
      uint64_t v12 = v7;
      int v13 = v5;
      if (!(_BYTE)v5) {
        break;
      }
      if (HIDWORD(v15) == v15)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t)&v14, (unint64_t)&v12);
      }
      else
      {
        *((void *)v14 + HIDWORD(v15)) = v7;
        ++HIDWORD(v15);
      }
      if (!--v6)
      {
        uint64_t v8 = v14;
        uint64_t v9 = v15;
        goto LABEL_12;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
LABEL_14:
  unint64_t result = (unint64_t)v14;
  if (v14)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

void *WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, unint64_t a2)
{
  unint64_t result = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(void *)(*(void *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[56])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::URL>(a1, (uint64_t)v6, (uint64_t)a2);
    if (v7)
    {
      uint64_t v5 = v6[0];
      v6[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[56] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::URL>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6);
  char v5 = v7;
  if (!v7)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    WTF::URL::URL(a3, (uint64_t *)a2);
    *(void *)(a3 + 40) = v6[0];
    *(void *)(a3 + 48) = v6[1];
    char v5 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 56) = v5;
    return;
  }
  __break(1u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorSubscribeToPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B76C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorSubscribeToPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B76C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorSubscribeToPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSK_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2928;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 80);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C8A94);
    }
    *char v5 = 0;
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      return IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
    }
LABEL_14:
    uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](v8, v9);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C8AB4);
  }
  *char v5 = 1;
  if (*(_DWORD *)(a2 + 80)) {
    goto LABEL_14;
  }

  return (_DWORD *)IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(a1, a2);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    int v3 = *(WTF **)(a1 + 40);
    if (v3)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v3, a2);
    }
    int v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35NavigatorUnsubscribeFromPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLERKNS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSC_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B76E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35NavigatorUnsubscribeFromPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLERKNS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSC_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B76E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess35NavigatorUnsubscribeFromPushServiceEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLERKNS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSC_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2929;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C8D2CLL);
    }
    *char v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      return IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
    }
LABEL_14:
    uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(v10);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C8D4CLL);
  }
  *char v5 = 1;
  if (*(_DWORD *)(a2 + 16)) {
    goto LABEL_14;
  }
  char v8 = *(unsigned char *)a2;
  unint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C8D6CLL);
  }
  *(unsigned char *)unint64_t result = v8;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess28NavigatorGetPushSubscriptionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2927;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 96);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C8F9CLL);
    }
    *char v5 = 1;
    if (!*(_DWORD *)(a2 + 96))
    {
      uint64_t v8 = a2 + 8;
      uint64_t v9 = a1;
      return IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::PushSubscriptionData>>(v9, v8);
    }
LABEL_14:
    uint64_t v9 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::PushSubscriptionData>>(v9, v8);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C8F7CLL);
  }
  *char v5 = 0;
  if (*(_DWORD *)(a2 + 96) != 1) {
    goto LABEL_14;
  }

  return IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)(a2 + 8));
}

unsigned char *IPC::ArgumentCoder<std::optional<WebCore::PushSubscriptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::PushSubscriptionData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 80);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C9044);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 80))
    {
      return (unsigned char *)IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C9064);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess31NavigatorGetPushPermissionStateEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2926;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  unint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29InitializeWebTransportSessionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_33WebTransportSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29InitializeWebTransportSessionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_33WebTransportSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29InitializeWebTransportSessionEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_33WebTransportSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a3;
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2922;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v14 = v6;
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v3)
  {
    if (v8)
    {
      unsigned char *v7 = 1;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, v13);
      goto LABEL_6;
    }
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1989C9344);
  }
  if (!v8) {
    goto LABEL_9;
  }
  unsigned char *v7 = 0;
LABEL_6:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  unint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v6);
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    uint64_t result = IPC::Decoder::markInvalid(a1);
    char v5 = 0;
  }
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20LoadImageForDecodingEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore15ResourceRequestENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEmONS_17CompletionHandlerIFvONSt3__17variantIJNS9_13ResourceErrorENS_3RefINS9_22FragmentedSharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20LoadImageForDecodingEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore15ResourceRequestENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEmONS_17CompletionHandlerIFvONSt3__17variantIJNS9_13ResourceErrorENS_3RefINS9_22FragmentedSharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess20LoadImageForDecodingEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore15ResourceRequestENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEmONS_17CompletionHandlerIFvONSt3__17variantIJNS9_13ResourceErrorENS_3RefINS9_22FragmentedSharedBufferENS_12RawPtrTraitsISN_EENS_21DefaultRefDerefTraitsISN_EEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2925;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  char v13 = *(_DWORD *)(a2 + 80);
  IPC::Encoder::operator<<<BOOL>(v5, &v13);
  if (v13)
  {
    if (v13 != 1) {
      goto LABEL_7;
    }
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(v5, *(WebCore::FragmentedSharedBuffer **)a2);
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100](v10, v11);
  }
  if (*(_DWORD *)(a2 + 80)) {
    goto LABEL_10;
  }
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v5, (WebCore::ResourceError *)a2);
LABEL_7:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    char v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14SetLoginStatusEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainENS9_10IsLoggedInEONSt3__18optionalINS9_11LoginStatusEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B77B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14SetLoginStatusEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainENS9_10IsLoggedInEONSt3__18optionalINS9_11LoginStatusEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B77B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess14SetLoginStatusEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainENS9_10IsLoggedInEONSt3__18optionalINS9_11LoginStatusEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v3 = 2935;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10IsLoggedInEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B77D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10IsLoggedInEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B77D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess10IsLoggedInEN6WebKit29NetworkConnectionToWebProcessES8_FvON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2923;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  long long v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvRKN7WebCore13ResourceErrorENSC_16ResourceResponseEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SG_SL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvRKN7WebCore13ResourceErrorENSC_16ResourceResponseEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SG_SL_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEN6WebKit29NetworkConnectionToWebProcessES8_FvONS7_29NetworkResourceLoadParametersEONS_17CompletionHandlerIFvRKN7WebCore13ResourceErrorENSC_16ResourceResponseEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SG_SL_EE4callESF_SG_SL_(uint64_t a1, WebCore::ResourceError *a2, WebCore::ResourceResponseBase *a3, uint64_t a4)
{
  return IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkResourceLoadParameters &&::UniqueRef<IPC::Encoder> &,WebKit::NetworkConnectionToWebProcess *,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad &&)#1}::operator()<WebCore::ResourceError const,WebCore::ResourceError const&,WebKit::NetworkResourceLoadParameters &&::FastMalloc>(a1 + 8, a2, a3, a4);
}

uint64_t IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkResourceLoadParameters &&::UniqueRef<IPC::Encoder> &,WebKit::NetworkConnectionToWebProcess *,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad &&)#1}::operator()<WebCore::ResourceError const,WebCore::ResourceError const&,WebKit::NetworkResourceLoadParameters &&::FastMalloc>(uint64_t a1, WebCore::ResourceError *a2, WebCore::ResourceResponseBase *a3, uint64_t a4)
{
  uint64_t v7 = *(IPC::Encoder **)a1;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(*(IPC::Encoder **)a1, a2);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v7, a3);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, *(const void **)a4, *(unsigned int *)(a4 + 12));
  uint64_t v8 = *(void *)(a1 + 8);

  return IPC::Connection::sendMessageImpl(v8, (uint64_t *)a1, 0, 0);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(IPC::Decoder *a1)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSH_INSC_18PageIdentifierTypeESK_yLSL_0EEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_bEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSH_INSC_18PageIdentifierTypeESK_yLSL_0EEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_bEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSH_INSC_18PageIdentifierTypeESK_yLSL_0EEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSU_bEE4callESU_b(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v8)
  {
    unsigned char *v7 = a3;
    uint64_t v9 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v9, v5, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yLSK_0EEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yLSK_0EEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLESB_NSt3__18optionalIN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSE_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSD_INSG_INSE_18PageIdentifierTypeESJ_yLSK_0EEEEENSE_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSY_bEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B78A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSY_bEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B78A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_20IncludeSecureCookiesENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvNS_6StringEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSY_bEE4callESY_b(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v8)
  {
    unsigned char *v7 = a3;
    uint64_t v9 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v9, v5, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvONS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJS12_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B78C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvONS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJS12_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B78C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLERKN7WebCore12SameSiteInfoESB_NSt3__18optionalINSC_16ProcessQualifiedINS_23ObjectIdentifierGenericINSC_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEENSH_INSJ_INSC_18PageIdentifierTypeESM_yLSN_0EEEEENSC_23ApplyTrackingPreventionENSC_35ShouldRelaxThirdPartyCookieBlockingEONS_17CompletionHandlerIFvONS_6VectorINSC_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJS12_EE4callES12_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B78F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B78F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobTypeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobTypeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobTypeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobSizeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobSizeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess8BlobSizeEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvyEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 8uLL, 8);
  if (v6 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNSA_16ResourceResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNSA_16ResourceResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNSA_16ResourceResponseEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, WebCore::ResourceResponseBase *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNS_6VectorINSA_29NetworkTransactionInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNS_6VectorINSA_29NetworkTransactionInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNS_6VectorINSA_29NetworkTransactionInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(char **)a2;
    uint64_t v8 = 592 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::encode(v5, v7);
      v7 += 592;
      v8 -= 592;
    }
    while (v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v9, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNSA_18NetworkLoadMetricsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B79B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNSA_18NetworkLoadMetricsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B79B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEN6WebKit29NetworkConnectionToWebProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore14ResourceLoaderENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNSA_18NetworkLoadMetricsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

WTF::StringImpl *WebKit::NetworkContentRuleListManager::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, WTF::StringImpl **a3)
{
  uint64_t v4 = (uint64_t *)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x127:
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (!v6) {
        goto LABEL_20;
      }
      uint64_t v7 = (WTF::StringImpl *)v5;
      IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a3, (uint64_t)&v23);
      if (!v25) {
        goto LABEL_20;
      }
      uint64_t v20 = v23;
      uint64_t v9 = v24;
      char v23 = 0;
      uint64_t v24 = 0;
      uint64_t v21 = v9;
      WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v8);
      char v22 = 1;
      this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::addContentRuleLists(v4, v7, (uint64_t)&v20);
      if (v22) {
        this = (WTF::StringImpl *)WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v10);
      }
      break;
    case 0x128:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((IPC::Decoder *)a3);
      if (v11)
      {
        this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::remove(v4, (uint64_t)this);
      }
      break;
    case 0x129:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((IPC::Decoder *)a3);
      if (v12)
      {
        this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::removeAllContentRuleLists(v4, (uint64_t)this);
      }
      break;
    case 0x12A:
      uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v14 && (uint64_t v15 = v13, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v23), (_BYTE)v24))
      {
        uint64_t v20 = v23;
        LOBYTE(v21) = 1;
        this = (WTF::StringImpl *)WebKit::NetworkContentRuleListManager::removeContentRuleList(v4, v15, (const WTF::String *)&v20);
        if ((_BYTE)v21)
        {
          this = v20;
          uint64_t v20 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
      else
      {
LABEL_20:
        unint64_t v17 = *a3;
        char v18 = a3[1];
        *a3 = 0;
        a3[1] = 0;
        this = a3[3];
        if (this) {
          BOOL v19 = v18 == 0;
        }
        else {
          BOOL v19 = 1;
        }
        if (!v19) {
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)this + 16))(this, v17);
        }
      }
      break;
    default:
      return this;
  }
  return this;
}

uint64_t *WebKit::NetworkMDNSRegister::didReceiveMessage(uint64_t *this, atomic_uchar *volatile *a2, uint64_t **a3)
{
  uint64_t v4 = this;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 != 299)
  {
    if (v5 == 300)
    {
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>((IPC::Decoder *)a3, (uint64_t)&v15);
      if ((_BYTE)v17)
      {
        long long v19 = v15;
        long long v20 = v16;
        return (uint64_t *)WebKit::NetworkMDNSRegister::unregisterMDNSNames(v4, (uint64_t *)&v19);
      }
    }
    return this;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((IPC::Decoder *)a3, (uint64_t)&v19);
  if (v21 && (IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v13), v14))
  {
    if (!v21) {
      __break(1u);
    }
    long long v15 = v19;
    long long v16 = v20;
    uint64_t v7 = v13;
    uint64_t v17 = (uint64_t)v13;
    char v18 = 1;
    this = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
    if (!(_BYTE)v8) {
      goto LABEL_13;
    }
    *(void *)&long long v19 = this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v19 + 1, a2);
    uint64_t v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v9 = &unk_1EE9B79E0;
    *((void *)v9 + 1) = v19;
    uint64_t v10 = *((void *)&v19 + 1);
    *((void *)&v19 + 1) = 0;
    *((void *)v9 + 2) = v10;
    uint64_t v13 = v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v19 + 1);
    long long v19 = v15;
    long long v20 = v16;
    WebKit::NetworkMDNSRegister::registerMDNSName(v4, (uint64_t *)&v19, (uint64_t)&v17, (uint64_t *)&v13);
    this = (uint64_t *)v13;
    uint64_t v13 = 0;
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
    if (v18)
    {
      uint64_t v7 = (WTF::StringImpl *)v17;
LABEL_13:
      uint64_t v17 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          return (uint64_t *)WTF::StringImpl::destroy(v7, v8);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  else
  {
    char v11 = *a3;
    char v12 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    this = a3[3];
    if (this && v12) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *))(*this + 16))(this, v11);
    }
  }
  return this;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v7);
  if (v8)
  {
    long long v5 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v5;
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    uint64_t result = IPC::Decoder::markInvalid(a1);
    char v6 = 0;
  }
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkMDNSRegister16RegisterMDNSNameEN6WebKit19NetworkMDNSRegisterES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_6StringEONS_17CompletionHandlerIFvSF_NSt3__18optionalINS9_17MDNSRegisterErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B79E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkMDNSRegister16RegisterMDNSNameEN6WebKit19NetworkMDNSRegisterES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_6StringEONS_17CompletionHandlerIFvSF_NSt3__18optionalINS9_17MDNSRegisterErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B79E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkMDNSRegister16RegisterMDNSNameEN6WebKit19NetworkMDNSRegisterES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEERKNS_6StringEONS_17CompletionHandlerIFvSF_NSt3__18optionalINS9_17MDNSRegisterErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SK_EE4callESF_SK_(uint64_t a1, uint64_t *a2, __int16 a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2939;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v15 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a2);
  char v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if ((a3 & 0xFF00) != 0)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CAD28);
    }
    *char v8 = 1;
    char v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CACB8);
    }
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CAD48);
    }
    LOBYTE(a3) = 0;
  }
  *char v8 = a3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  long long v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void IPC::handleMessage<Messages::NetworkProcessConnection::DidFinishPingLoad,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError &&,WebCore::ResourceResponse &&)>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  if (!v5)
  {
    LOBYTE(v22) = 0;
    char v33 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v4;
  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)&v34);
  if (v42)
  {
    IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v43);
    char v9 = v44;
    if (v44)
    {
      if (!v42)
      {
        __break(1u);
        return;
      }
      uint64_t v22 = v6;
      long long v10 = v34;
      long long v34 = 0uLL;
      *(_OWORD *)char v23 = v10;
      long long v24 = v35;
      long long v25 = v36;
      LODWORD(v35) = v35 & 0xFFFFFFFE;
      uint64_t v26 = v37;
      int v27 = v38;
      __int16 v28 = v39;
      CFTypeRef v29 = v40;
      char v30 = v41;
      long long v37 = 0;
      __int16 v40 = 0;
      std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v31, (uint64_t)v43);
      char v9 = 1;
    }
    else
    {
      LOBYTE(v22) = 0;
    }
    char v33 = v9;
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v43, v8);
  }
  else
  {
    LOBYTE(v22) = 0;
    char v33 = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v7);
  if (!v33)
  {
LABEL_29:
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20) {
      BOOL v21 = v19 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
    if (!v33) {
      return;
    }
  }
  WebKit::NetworkProcessConnection::didFinishPingLoad(a2, v22, (uint64_t)v23, (uint64_t)v31);
  if (v33)
  {
    CFTypeRef v12 = cf;
    CFTypeRef cf = 0;
    if (v12) {
      CFRelease(v12);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v31, v11);
    CFTypeRef v14 = v29;
    CFTypeRef v29 = 0;
    if (v14) {
      CFRelease(v14);
    }
    long long v15 = v26;
    uint64_t v26 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    long long v16 = v23[1];
    v23[1] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v13);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v23[0];
    v23[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
}

void IPC::handleMessage<Messages::NetworkProcessConnection::DidFinishPreconnection,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError &&)>(IPC::Decoder *a1, uint64_t a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  if (v5)
  {
    uint64_t v6 = v4;
    IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)&v28);
    if (v36)
    {
      long long v8 = v28;
      long long v28 = 0uLL;
      *(_OWORD *)uint64_t v19 = v8;
      long long v20 = v29;
      long long v21 = v30;
      LODWORD(v29) = v29 & 0xFFFFFFFE;
      uint64_t v22 = v31;
      int v23 = v32;
      __int16 v24 = v33;
      char v9 = v34;
      __int16 v31 = 0;
      long long v34 = 0;
      CFTypeRef cf = v9;
      char v26 = v35;
      char v27 = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
      WebKit::NetworkProcessConnection::didFinishPreconnection(a2, v6, (uint64_t)v19);
      if (v27)
      {
        CFTypeRef v11 = cf;
        CFTypeRef cf = 0;
        if (v11) {
          CFRelease(v11);
        }
        CFTypeRef v12 = v22;
        uint64_t v22 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t v17 = v19[1];
        v19[1] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v10);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        uint64_t v18 = v19[0];
        v19[0] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v10);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      return;
    }
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v7);
  }
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v15 = *((void *)a1 + 3);
  if (v15) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
  }
}

uint64_t IPC::handleMessage<Messages::NetworkProcessConnection::CookiesAdded,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v5, a1);
  if (v6[16]) {
    WebKit::NetworkProcessConnection::cookiesAdded(a2, &v5, (const WTF::StringImpl *)v6);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v5, v3);
}

uint64_t IPC::handleMessage<Messages::NetworkProcessConnection::CookiesDeleted,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v5, a1);
  if (v6[16]) {
    WebKit::NetworkProcessConnection::cookiesDeleted(a2, &v5, (const WTF::StringImpl *)v6);
  }
  return std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v5, v3);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier,WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, WebKit::RTCDataChannelRemoteManager *a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>>(a2, v13);
  if (v14)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      long long v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *long long v8 = &unk_1EE9B7A08;
      v8[1] = v10;
      char v9 = v11;
      CFTypeRef v11 = 0;
      CFTypeRef v12 = v8;
      v8[2] = v9;
      uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      if (v14)
      {
        WebKit::NetworkProcessConnection::connectToRTCDataChannelRemoteSource(a3, v13[0], v13[1], v13[2], v13[3], (uint64_t *)&v12);
        uint64_t result = (uint64_t)v12;
        CFTypeRef v12 = 0;
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void IPC::handleMessage<Messages::NetworkProcessConnection::BroadcastConsoleMessage,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)>(uint64_t *a1, uint64_t a2)
{
  unsigned __int16 v4 = IPC::Decoder::decode<JSC::MessageSource>(a1);
  if (v4 >= 0x100u
    && (char v5 = v4, v6 = IPC::Decoder::decode<JSC::MessageLevel>(a1), v6 >= 0x100u)
    && (char v7 = v6, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v16), v17))
  {
    char v14 = v16;
    char v15 = 1;
    WebKit::NetworkProcessConnection::broadcastConsoleMessage(a2, v5, v7, (uint64_t)&v14);
    if (v15)
    {
      char v9 = v14;
      char v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12) {
      BOOL v13 = v11 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }
}

void IPC::handleMessage<Messages::NetworkProcessConnection::LoadCancelledDownloadRedirectRequestInFrame,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WebCore::ResourceRequest &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v17);
  if (!v18)
  {
    v12[0] = 0;
    char v16 = 0;
    goto LABEL_11;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v19);
  char v4 = v20;
  if (v20)
  {
    uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
    if (v6)
    {
      if (!v18 || !v20)
      {
        __break(1u);
        return;
      }
      uint64_t v7 = v5;
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v12, (uint64_t)v17);
      long long v14 = v19;
      uint64_t v15 = v7;
      char v4 = 1;
      goto LABEL_10;
    }
    char v4 = 0;
  }
  v12[0] = 0;
LABEL_10:
  char v16 = v4;
LABEL_11:
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v17);
  if (v16
    || (uint64_t v9 = *(void *)a1,
        uint64_t v10 = *((void *)a1 + 1),
        *(void *)a1 = 0,
        *((void *)a1 + 1) = 0,
        (uint64_t v11 = *((void *)a1 + 3)) != 0)
    && v10
    && ((*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9), v16))
  {
    WebKit::NetworkProcessConnection::loadCancelledDownloadRedirectRequestInFrame(a2, (WebCore::ResourceRequestBase *)v12, v14, *((uint64_t *)&v14 + 1), v15);
    if (v16)
    {
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (v8) {
        CFRelease(v8);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v12);
    }
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::HTTPCookieAcceptPolicy>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::HTTPCookieAcceptPolicy>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::HTTPCookieAcceptPolicy>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unsigned int v2 = (unsigned __int16)IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a1);
  int v3 = 256;
  if (v2 <= 0xFF)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7)
    {
      unsigned int v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
        int v3 = 0;
        unsigned int v2 = v8;
      }
      else
      {
        int v3 = 0;
      }
    }
    else
    {
      int v3 = 0;
    }
  }
  if (v2 <= 0x100) {
    LOBYTE(v2) = 0;
  }
  return v3 | v2;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v14);
  if (v15)
  {
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v4, (uint64_t)&v16);
    int v7 = v18;
    if (v18)
    {
      if (!v15)
      {
        __break(1u);
        return result;
      }
      unsigned int v8 = v14;
      long long v14 = 0;
      uint64_t v9 = v16;
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      uint64_t v10 = v17;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      *(void *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 24) = 1;
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v6);
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
    }
    if (v15)
    {
      uint64_t result = v14;
      long long v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
          if (v7) {
            return result;
          }
          goto LABEL_15;
        }
        *(_DWORD *)result -= 2;
      }
    }
    if (v7) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
LABEL_15:
  uint64_t v11 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    BOOL v13 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v13();
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      unsigned int v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v6, v5);
        uint64_t v22 = *(void *)a1;
        unint64_t v21 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
    goto LABEL_22;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    if (v10 >> 1 >= 0xF0F)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::Cookie>(a1, &v35);
        if (!v46) {
          break;
        }
        if (HIDWORD(v48) == v48)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>((uint64_t)&v47, (unint64_t)&v35);
        }
        else
        {
          uint64_t v26 = v47 + 136 * HIDWORD(v48);
          uint64_t v27 = v35;
          uint64_t v35 = 0;
          *(void *)uint64_t v26 = v27;
          uint64_t v28 = v36;
          uint64_t v36 = 0;
          *(void *)(v26 + 8) = v28;
          uint64_t v29 = v37;
          uint64_t v37 = 0;
          *(void *)(v26 + 16) = v29;
          uint64_t v30 = v38;
          uint64_t v38 = 0;
          *(void *)(v26 + 24) = v30;
          long long v31 = v39[0];
          *(_OWORD *)(v26 + 43) = *(_OWORD *)((char *)v39 + 11);
          *(_OWORD *)(v26 + 32) = v31;
          uint64_t v32 = v40;
          uint64_t v40 = 0;
          *(void *)(v26 + 64) = v32;
          WTF::URL::URL(v26 + 72, v41);
          *(void *)(v26 + 112) = 0;
          *(void *)(v26 + 120) = 0;
          uint64_t v33 = v42;
          uint64_t v42 = 0;
          *(void *)(v26 + 112) = v33;
          LODWORD(v33) = v43;
          int v43 = 0;
          *(_DWORD *)(v26 + 120) = v33;
          LODWORD(v33) = v44;
          int v44 = 0;
          *(_DWORD *)(v26 + 124) = v33;
          *(unsigned char *)(v26 + 128) = v45;
          ++HIDWORD(v48);
        }
        if (v46) {
          WebCore::Cookie::~Cookie((WebCore::Cookie *)&v35, v25);
        }
        if (!--v10)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v47, HIDWORD(v48));
          *(void *)a3 = v47;
          uint64_t v34 = v48;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          *(void *)(a3 + 8) = v34;
          goto LABEL_20;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
LABEL_19:
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v20;
LABEL_20:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, a2);
      }
      LODWORD(v48) = 136 * (int)v10 / 0x88u;
      uint64_t v47 = WTF::fastMalloc((WTF *)(136 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::Cookie>(a1, &v35);
        if (!v46) {
          break;
        }
        if (HIDWORD(v48) == v48)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>((uint64_t)&v47, (unint64_t)&v35);
        }
        else
        {
          uint64_t v11 = v47 + 136 * HIDWORD(v48);
          uint64_t v12 = v35;
          uint64_t v35 = 0;
          *(void *)uint64_t v11 = v12;
          uint64_t v13 = v36;
          uint64_t v36 = 0;
          *(void *)(v11 + 8) = v13;
          uint64_t v14 = v37;
          uint64_t v37 = 0;
          *(void *)(v11 + 16) = v14;
          uint64_t v15 = v38;
          uint64_t v38 = 0;
          *(void *)(v11 + 24) = v15;
          long long v16 = v39[0];
          *(_OWORD *)(v11 + 43) = *(_OWORD *)((char *)v39 + 11);
          *(_OWORD *)(v11 + 32) = v16;
          uint64_t v17 = v40;
          uint64_t v40 = 0;
          *(void *)(v11 + 64) = v17;
          WTF::URL::URL(v11 + 72, v41);
          *(void *)(v11 + 112) = 0;
          *(void *)(v11 + 120) = 0;
          uint64_t v18 = v42;
          uint64_t v42 = 0;
          *(void *)(v11 + 112) = v18;
          LODWORD(v18) = v43;
          int v43 = 0;
          *(_DWORD *)(v11 + 120) = v18;
          LODWORD(v18) = v44;
          int v44 = 0;
          *(_DWORD *)(v11 + 124) = v18;
          *(unsigned char *)(v11 + 128) = v45;
          ++HIDWORD(v48);
        }
        if (v46) {
          WebCore::Cookie::~Cookie((WebCore::Cookie *)&v35, a2);
        }
        if (!--v10)
        {
          uint64_t v19 = v47;
          uint64_t v20 = v48;
          goto LABEL_19;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, a2);
  }
  unint64_t v21 = v5;
  uint64_t v22 = 0;
LABEL_22:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v21) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v22);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Cookie>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 136 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v7;
  uint64_t v8 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  *(void *)(v4 + 24) = v8;
  long long v9 = *(_OWORD *)(v3 + 43);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 43) = v9;
  uint64_t v10 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = 0;
  *(void *)(v4 + 64) = v10;
  WTF::URL::URL(v4 + 72, (uint64_t *)(v3 + 72));
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  uint64_t v11 = *(void *)(v3 + 112);
  *(void *)(v3 + 112) = 0;
  *(void *)(v4 + 112) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 120);
  *(_DWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v4 + 120) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 124);
  *(_DWORD *)(v3 + 124) = 0;
  *(_DWORD *)(v4 + 124) = v11;
  *(unsigned char *)(v4 + 128) = *(unsigned char *)(v3 + 128);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CBE1CLL);
    }
    unint64_t v3 = *(uint64_t **)a1;
    uint64_t v4 = (uint64_t *)(*(void *)a1 + 136 * *(unsigned int *)(a1 + 12));
    int v5 = 136 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::Cookie>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::Cookie>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 72;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      *(void *)(v5 - 72) = v6;
      uint64_t v7 = v4[1];
      v4[1] = 0;
      *(void *)(v5 - 64) = v7;
      uint64_t v8 = v4[2];
      v4[2] = 0;
      *(void *)(v5 - 56) = v8;
      uint64_t v9 = v4[3];
      v4[3] = 0;
      *(void *)(v5 - 48) = v9;
      long long v10 = *((_OWORD *)v4 + 2);
      *(_OWORD *)(v5 - 29) = *(_OWORD *)((char *)v4 + 43);
      *(_OWORD *)(v5 - 40) = v10;
      uint64_t v11 = v4[8];
      v4[8] = 0;
      *(void *)(v5 - 8) = v11;
      WTF::URL::URL(v5, v4 + 9);
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      uint64_t v12 = v4[14];
      v4[14] = 0;
      *(void *)(v5 + 40) = v12;
      LODWORD(v12) = *((_DWORD *)v4 + 30);
      *((_DWORD *)v4 + 30) = 0;
      *(_DWORD *)(v5 + 48) = v12;
      LODWORD(v12) = *((_DWORD *)v4 + 31);
      *((_DWORD *)v4 + 31) = 0;
      *(_DWORD *)(v5 + 52) = v12;
      *(unsigned char *)(v5 + 56) = *((unsigned char *)v4 + 128);
      WebCore::Cookie::~Cookie((WebCore::Cookie *)v4, v13);
      v5 += 136;
      v4 += 17;
    }
    while (v4 != a2);
  }
}

void WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t this)
{
  if (*(unsigned int *)(a1 + 8) > this)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > this)
    {
      uint64_t v5 = (WebCore::Cookie *)(*(void *)a1 + 136 * this);
      uint64_t v6 = 136 * v4 - 136 * this;
      do
      {
        WebCore::Cookie::~Cookie(v5, (void *)this);
        uint64_t v5 = (WebCore::Cookie *)(v7 + 136);
        v6 -= 136;
      }
      while (v6);
      *(_DWORD *)(a1 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v8 = *(uint64_t **)a1;
    if (this)
    {
      if (this >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v9 = (WTF *)(136 * this);
      uint64_t v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x88;
      *(void *)a1 = v10;
      if ((uint64_t *)v10 != v8) {
        WTF::VectorMover<false,WebCore::Cookie>::move(v8, &v8[17 * v4], v10);
      }
    }
    if (v8)
    {
      if (*(uint64_t **)a1 == v8)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v8, (void *)this);
    }
  }
}

uint64_t WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WebCore::Cookie **)a1;
    uint64_t v5 = 136 * v3;
    do
    {
      WebCore::Cookie::~Cookie(v4, a2);
      unint64_t v4 = (WebCore::Cookie *)(v6 + 136);
      v5 -= 136;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    unint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24NetworkProcessConnection35ConnectToRTCDataChannelRemoteSourceEN6WebKit24NetworkProcessConnectionES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7A08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24NetworkProcessConnection35ConnectToRTCDataChannelRemoteSourceEN6WebKit24NetworkProcessConnectionES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7A08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24NetworkProcessConnection35ConnectToRTCDataChannelRemoteSourceEN6WebKit24NetworkProcessConnectionES8_FvN7WebCore24RTCDataChannelIdentifierESA_ONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, __int16 a2)
{
  __int16 v9 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v4 = 2940;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(v4, (char *)&v9);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

atomic_uchar *volatile **IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>(v15, a2);
  if (!v16) {
    return (atomic_uchar *volatile **)std::optional<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>::~optional((uint64_t)v15, v6);
  }
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
  if (!(_BYTE)v6) {
    return (atomic_uchar *volatile **)std::optional<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>::~optional((uint64_t)v15, v6);
  }
  uint64_t v12 = v7;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v8 = &unk_1EE9B7AA8;
  v8[1] = v12;
  __int16 v9 = v13;
  uint64_t v13 = 0;
  uint64_t v14 = v8;
  v8[2] = v9;
  uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
  if (v16)
  {
    IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&>,WTF::CompletionHandler>(a3, (uint64_t)v15, (uint64_t)&v14);
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    return (atomic_uchar *volatile **)std::optional<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>::~optional((uint64_t)v15, v6);
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkProcess::PreconnectTo,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>>(v4, a1);
  if (v5) {
    IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>),WebCore::StoredCredentialsPolicy::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::ResourceRequest &&,WebKit::NavigatingToAppBoundDomain>>(a2, v4);
  }
  return std::optional<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>>::~optional((uint64_t)v4);
}

uint64_t IPC::handleMessage<Messages::NetworkProcess::UpdateStorageAccessPromptQuirks,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(IPC::Decoder *a1)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v3, a1);
  if (v4)
  {
    uint64_t result = WebKit::NetworkProcess::updateStorageAccessPromptQuirks();
    if (v4) {
      return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v2);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::didReceiveSyncNetworkProcessMessage(atomic_uint *a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  atomic_fetch_add(a1 + 32, 1u);
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xE23:
      uint64_t v7 = *a4;
      *a4 = 0;
      uint64_t v27 = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v31, a2);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B8D28;
      v8[1] = v27;
      __int16 v9 = v31[0];
      v31[0] = 0;
      v8[2] = v9;
      uint64_t v32 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v31);
      WebKit::NetworkProcess::processWillSuspendImminentlyForTestingSync((WTF::MonotonicTime *)a1, (uint64_t *)&v32);
      goto LABEL_8;
    case 0xE24:
      uint64_t v10 = *a4;
      *a4 = 0;
      uint64_t v28 = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v31, a2);
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v11 = &unk_1EE9B8D78;
      v11[1] = v28;
      uint64_t v12 = v31[0];
      v31[0] = 0;
      v11[2] = v12;
      uint64_t v32 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v31);
      WebKit::NetworkProcess::resetServiceWorkerFetchTimeoutForTesting((uint64_t)a1, (uint64_t *)&v32);
      goto LABEL_8;
    case 0xE25:
      unsigned __int16 v13 = IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>((uint64_t *)a3);
      if (v13 < 0x100u) {
        goto LABEL_12;
      }
      unsigned __int8 v14 = v13;
      uint64_t v15 = *a4;
      *a4 = 0;
      uint64_t v29 = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v31, a2);
      char v16 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v16 = &unk_1EE9B8D00;
      v16[1] = v29;
      uint64_t v17 = v31[0];
      v31[0] = 0;
      v16[2] = v17;
      uint64_t v32 = v16;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v31);
      WebKit::NetworkProcess::setCacheModelSynchronouslyForTesting((uint64_t)a1, v14, (uint64_t *)&v32);
      goto LABEL_8;
    case 0xE26:
      uint64_t v18 = IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if (!v19) {
        goto LABEL_12;
      }
      double v20 = *(double *)&v18;
      unint64_t v21 = *a4;
      *a4 = 0;
      uint64_t v30 = v21;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v31, a2);
      uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v22 = &unk_1EE9B8D50;
      v22[1] = v30;
      uint64_t v23 = v31[0];
      v31[0] = 0;
      v22[2] = v23;
      uint64_t v32 = v22;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v31);
      WebKit::NetworkProcess::setServiceWorkerFetchTimeoutForTesting((uint64_t)a1, (uint64_t *)&v32, v20);
LABEL_8:
      uint64_t v24 = (uint64_t)v32;
      uint64_t v32 = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      uint64_t v25 = 1;
      if (!a1) {
        return v25;
      }
      goto LABEL_13;
    default:
LABEL_12:
      uint64_t v25 = 0;
      if (a1)
      {
LABEL_13:
        if (atomic_fetch_add(a1 + 32, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)a1 + 32);
          (*(void (**)(atomic_uint *))(*(void *)a1 + 8))(a1);
        }
      }
      return v25;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24InitializeNetworkProcessEN6WebKit14NetworkProcessES8_FvONS7_32NetworkProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7A30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess35CreateNetworkConnectionToWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS7_34NetworkProcessConnectionParametersEONS_17CompletionHandlerIFvONSt3__18optionalINS2_16ConnectionHandleEEENSA_22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7A58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::SharedPreferencesForWebProcess>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::SharedPreferencesForWebProcess>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::SharedPreferencesForWebProcess>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::SharedPreferencesForWebProcess>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v6, (uint64_t)a2);
  }
  *a2 = 0;
  a2[48] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::SharedPreferencesForWebProcess>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::SharedPreferencesForWebProcess>(a1, v8);
  char v6 = v10;
  if (!v10)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 8))
  {
    *(void *)a3 = *(void *)a2;
    long long v7 = v8[1];
    *(_OWORD *)(a3 + 8) = v8[0];
    *(_OWORD *)(a3 + 24) = v7;
    *(void *)(a3 + 40) = v9;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 48) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SharedPreferencesForWebProcessDidChangeEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30SharedPreferencesForWebProcessEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SharedPreferencesForWebProcessDidChangeEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30SharedPreferencesForWebProcessEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SharedPreferencesForWebProcessDidChangeEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30SharedPreferencesForWebProcessEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3068;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&>,WTF::CompletionHandler>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  v5[0] = WebKit::NetworkProcess::addAllowedFirstPartyForCookies;
  v5[1] = 0;
  v4[0] = &v6;
  v4[1] = v5;
  v4[2] = a3;
  return IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&>,WTF::CompletionHandler>(WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&> &&,WebKit::LoadedWebArchive<WTF::CompletionHandler> &&)::{lambda(WebKit::NetworkProcess &&)#1}::operator()<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&>((uint64_t)v4, *(void *)a2, a2 + 8, *(unsigned char *)(a2 + 16));
}

uint64_t std::optional<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (IPC::Decoder *)a2, v6);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, IPC::Decoder *a2, uint64_t *a3)
{
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>((uint64_t)a1, a2, a3, &v8);
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v6);
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebKit::LoadedWebArchive>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>(uint64_t a1, IPC::Decoder *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    char v10 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a3 + 8) && *((unsigned char *)a4 + 8))
  {
    uint64_t v8 = *a3;
    uint64_t v9 = *a4;
    *a4 = 0;
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = result;
    char v10 = 1;
LABEL_5:
    *(unsigned char *)(a1 + 24) = v10;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AddAllowedFirstPartyForCookiesEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_17RegistrableDomainENS7_16LoadedWebArchiveEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AddAllowedFirstPartyForCookiesEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_17RegistrableDomainENS7_16LoadedWebArchiveEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AddAllowedFirstPartyForCookiesEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_17RegistrableDomainENS7_16LoadedWebArchiveEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::AddAllowedFirstPartyForCookies &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

IPC::Encoder **IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::AddAllowedFirstPartyForCookies &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2957;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v6 = v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v6, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v6, v4);
}

uint64_t IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&>,WTF::CompletionHandler>(WebKit::NetworkProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&> &&,WebKit::LoadedWebArchive<WTF::CompletionHandler> &&)::{lambda(WebKit::NetworkProcess &&)#1}::operator()<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain,WebCore::RegistrableDomain &&>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, BOOL, void))v4;
  uint64_t v6 = *(void *)(v4 + 8);
  long long v7 = (void *)(**(void **)a1 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, BOOL, void))(*v7 + v5);
  }
  return v5(v7, a2, a3, a4 != 0, *(void *)(a1 + 16));
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14DestroySessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14DestroySessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14DestroySessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2979;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataFetchOption>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataFetchOption>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataFetchOption>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = v5 < 4;
      if (v5 >= 4) {
        unsigned int v5 = 0;
      }
      return v5 | (v6 << 8);
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11 && v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
  }
  unsigned int v5 = 0;
  int v6 = 0;
  return v5 | (v6 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16FetchWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16FetchWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16FetchWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_17CompletionHandlerIFvONS7_11WebsiteDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 2983;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::WebsiteData,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess17DeleteWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess17DeleteWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess17DeleteWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2978;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6 != 0)
    {
      unint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v6, v5);
        uint64_t v15 = *a1;
        uint64_t v14 = a1[1];
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    if (v10 >= 0x8000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v23);
        if (!v25) {
          break;
        }
        if (HIDWORD(v21) == v21)
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData>((uint64_t)&v20, (unint64_t)v23);
        }
        else
        {
          uint64_t v18 = v20 + 32 * HIDWORD(v21);
          *(unsigned char *)uint64_t v18 = 0;
          *(_DWORD *)(v18 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v18, (uint64_t)v23);
          ++HIDWORD(v21);
        }
        if (v25 && v24 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9B7B38[v24])(&v22, v23);
        }
        if (!--v10)
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v20, HIDWORD(v21));
          *(void *)a3 = v20;
          uint64_t v19 = v21;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          *(void *)(a3 + 8) = v19;
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
LABEL_20:
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        *(void *)a3 = v12;
        *(void *)(a3 + 8) = v13;
LABEL_21:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, a2);
      }
      LODWORD(v21) = v10;
      uint64_t v20 = WTF::fastMalloc((WTF *)(32 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v23);
        if (!v25) {
          break;
        }
        if (HIDWORD(v21) == v21)
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData>((uint64_t)&v20, (unint64_t)v23);
        }
        else
        {
          uint64_t v11 = v20 + 32 * HIDWORD(v21);
          *(unsigned char *)uint64_t v11 = 0;
          *(_DWORD *)(v11 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v11, (uint64_t)v23);
          ++HIDWORD(v21);
        }
        if (v25 && v24 != -1) {
          ((void (*)(char *, unsigned char *))off_1EE9B7B38[v24])(&v22, v23);
        }
        if (!--v10)
        {
          uint64_t v12 = v20;
          uint64_t v13 = v21;
          goto LABEL_20;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, a2);
  }
  uint64_t v14 = v5;
  uint64_t v15 = 0;
LABEL_23:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v14) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(unsigned char *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4, v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CDB68);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::SecurityOriginData>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::SecurityOriginData>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = result;
    do
    {
      *(unsigned char *)a3 = 0;
      *(_DWORD *)(a3 + 24) = -1;
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a3, v7);
      uint64_t v8 = *(unsigned int *)(v7 + 24);
      if (v8 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9B7B38[v8])(&v9, v7);
      }
      *(_DWORD *)(v7 + 24) = -1;
      v7 += 32;
      a3 += 32;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    uint64_t v5 = *(WTF **)result;
    if (v4 > a2)
    {
      uint64_t v6 = (char *)v5 + 32 * a2;
      uint64_t v7 = 32 * v4 - 32 * a2;
      do
      {
        uint64_t v8 = *((unsigned int *)v6 + 6);
        if (v8 != -1) {
          uint64_t result = ((uint64_t (*)(char *, char *))off_1EE9B7B38[v8])(&v9, v6);
        }
        *((_DWORD *)v6 + 6) = -1;
        v6 += 32;
        v7 -= 32;
      }
      while (v7);
      *(_DWORD *)(v3 + 12) = a2;
      uint64_t v5 = *(WTF **)v3;
      LODWORD(v4) = a2;
    }
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v5) {
        uint64_t result = WTF::VectorMover<false,WebCore::SecurityOriginData>::move((uint64_t)v5, (uint64_t)v5 + 32 * v4, result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DeleteWebsiteDataForOriginsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSE_INS_6StringELm0ESH_Lm16ESI_EESP_RKNSE_INSF_17RegistrableDomainELm0ESH_Lm16ESI_EEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DeleteWebsiteDataForOriginsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSE_INS_6StringELm0ESH_Lm16ESI_EESP_RKNSE_INSF_17RegistrableDomainELm0ESH_Lm16ESI_EEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7B58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DeleteWebsiteDataForOriginsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEERKNS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNSE_INS_6StringELm0ESH_Lm16ESI_EESP_RKNSE_INSF_17RegistrableDomainELm0ESH_Lm16ESI_EEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2977;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess25RenameOriginInWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore18SecurityOriginDataESD_NS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess25RenameOriginInWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore18SecurityOriginDataESD_NS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7B80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess25RenameOriginInWebsiteDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore18SecurityOriginDataESD_NS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3017;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36WebsiteDataOriginDirectoryForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore12ClientOriginENS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36WebsiteDataOriginDirectoryForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore12ClientOriginENS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7BA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36WebsiteDataOriginDirectoryForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore12ClientOriginENS_9OptionSetINS7_15WebsiteDataTypeEEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3075;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDownloadEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DownloadIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDownloadEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DownloadIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7BD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDownloadEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DownloadIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2962;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, a2, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19DataTaskWithRequestEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEON7WebCore15ResourceRequestERKNSt3__18optionalINSH_18SecurityOriginDataEEEONS2_17FormDataReferenceEONS_17CompletionHandlerIFvNS9_INS7_22DataTaskIdentifierTypeESC_yLSD_1EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19DataTaskWithRequestEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEON7WebCore15ResourceRequestERKNSt3__18optionalINSH_18SecurityOriginDataEEEONS2_17FormDataReferenceEONS_17CompletionHandlerIFvNS9_INS7_22DataTaskIdentifierTypeESC_yLSD_1EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7BF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19DataTaskWithRequestEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEON7WebCore15ResourceRequestERKNSt3__18optionalINSH_18SecurityOriginDataEEEONS2_17FormDataReferenceEONS_17CompletionHandlerIFvNS9_INS7_22DataTaskIdentifierTypeESC_yLSD_1EEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_EE4callESU_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2975;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDataTaskEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDataTaskEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess14CancelDataTaskEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2961;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess12FlushCookiesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess12FlushCookiesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7C48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess12FlushCookiesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2984;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::CacheModel>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::CacheModel>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unsigned int v2 = (unsigned __int16)IPC::ArgumentCoder<WebKit::CacheModel,void>::decode<IPC::Decoder>(a1);
  int v3 = 256;
  if (v2 <= 0xFF)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7)
    {
      unsigned int v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
        int v3 = 0;
        unsigned int v2 = v8;
      }
      else
      {
        int v3 = 0;
      }
    }
    else
    {
      int v3 = 0;
    }
  }
  if (v2 <= 0x100) {
    LOBYTE(v2) = 0;
  }
  return v3 | v2;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16PrepareToSuspendEN6WebKit14NetworkProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16PrepareToSuspendEN6WebKit14NetworkProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7C70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16PrepareToSuspendEN6WebKit14NetworkProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3013;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unsigned int v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unsigned int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[232])
  {
    return (WebCore::ResourceRequestBase *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>),WebCore::StoredCredentialsPolicy::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::ResourceRequest &&,WebKit::NavigatingToAppBoundDomain>>(uint64_t a1, uint64_t *a2)
{
  return WebKit::NetworkProcess::preconnectTo(a1, *a2, a2[1]);
}

uint64_t std::optional<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 232))
  {
    uint64_t v2 = *(const void **)(a1 + 216);
    *(void *)(a1 + 216) = 0;
    if (v2) {
      CFRelease(v2);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  }
  return a1;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID>(a1, a2, (uint64_t)v6);
  }
  *a1 = 0;
  a1[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7) {
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2, a3, (uint64_t)v8);
  }
  *a1 = 0;
  a1[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v10[0] = result;
  v10[1] = v9;
  if ((_BYTE)v9) {
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1, a2, a3, a4, (uint64_t)v10);
  }
  *a1 = 0;
  a1[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v11);
  if (v11[200])
  {
    IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest>(a1, a2, a3, a4, a5, (uint64_t)v11);
  }
  else
  {
    *a1 = 0;
    a1[232] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v11);
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(a2);
  __int16 v13 = result;
  if ((unsigned __int16)result > 0xFFu) {
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy>(a1, a2, a3, a4, a5, a6, &v13);
  }
  *a1 = 0;
  a1[232] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(a2);
  int v14 = result;
  if ((result & 0xFF0000) != 0) {
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>((uint64_t)a1, *(void *)a3, *(unsigned char *)(a3 + 8), a4, a5, a6, a7, (uint64_t)&v14);
  }
  *a1 = 0;
  a1[232] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>,void>::decode<IPC::Decoder,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>>(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, uint64_t a8)
{
  if (a3 && *(unsigned char *)(a4 + 8) && *(unsigned char *)(a5 + 8) && *(unsigned char *)(a6 + 200) && a7[1] && *(unsigned char *)(a8 + 2))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5EEEEJN3PAL9SessionIDEN3WTF23ObjectIdentifierGenericIN6WebKit26WebPageProxyIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEENS6_IN7WebCore18PageIdentifierTypeESA_yLSB_0EEENSD_15ResourceRequestENSD_23StoredCredentialsPolicyENS_8optionalINS7_26NavigatingToAppBoundDomainEEEEEC1B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5EEJS4_SC_SF_SG_SH_SK_EJEJEJS4_SC_SF_SG_SH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(result, a2, (void *)a4, (void *)a5, a6, a7, (_WORD *)a8);
    *(unsigned char *)(result + 232) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5EEEEJN3PAL9SessionIDEN3WTF23ObjectIdentifierGenericIN6WebKit26WebPageProxyIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEENS6_IN7WebCore18PageIdentifierTypeESA_yLSB_0EEENSD_15ResourceRequestENSD_23StoredCredentialsPolicyENS_8optionalINS7_26NavigatingToAppBoundDomainEEEEEC1B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5EEJS4_SC_SF_SG_SH_SK_EJEJEJS4_SC_SF_SG_SH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, unsigned char *a6, _WORD *a7)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = *a4;
  WTF::URL::URL(a1 + 24, (uint64_t *)a5);
  WTF::URL::URL(a1 + 64, (uint64_t *)(a5 + 40));
  *(void *)(a1 + 104) = *(void *)(a5 + 80);
  uint64_t v11 = *(void *)(a5 + 88);
  *(void *)(a5 + 88) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a5 + 96);
  *(void *)(a5 + 96) = 0;
  *(void *)(a1 + 120) = v12;
  LODWORD(v12) = *(_DWORD *)(a5 + 104);
  *(_DWORD *)(a5 + 104) = 0;
  *(_DWORD *)(a1 + 128) = v12;
  LODWORD(v12) = *(_DWORD *)(a5 + 108);
  *(_DWORD *)(a5 + 108) = 0;
  *(_DWORD *)(a1 + 132) = v12;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v13 = *(void *)(a5 + 112);
  *(void *)(a5 + 112) = 0;
  *(void *)(a1 + 136) = v13;
  LODWORD(v13) = *(_DWORD *)(a5 + 120);
  *(_DWORD *)(a5 + 120) = 0;
  *(_DWORD *)(a1 + 144) = v13;
  LODWORD(v13) = *(_DWORD *)(a5 + 124);
  *(_DWORD *)(a5 + 124) = 0;
  *(_DWORD *)(a1 + 148) = v13;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v14 = *(void *)(a5 + 128);
  *(void *)(a5 + 128) = 0;
  *(void *)(a1 + 152) = v14;
  LODWORD(v14) = *(_DWORD *)(a5 + 136);
  *(_DWORD *)(a5 + 136) = 0;
  *(_DWORD *)(a1 + 160) = v14;
  LODWORD(v14) = *(_DWORD *)(a5 + 140);
  *(_DWORD *)(a5 + 140) = 0;
  *(_DWORD *)(a1 + 164) = v14;
  LODWORD(v14) = *(_DWORD *)(a5 + 144);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a5 + 148);
  *(_DWORD *)(a1 + 168) = v14;
  uint64_t v15 = *(void *)(a5 + 152);
  *(void *)(a5 + 152) = 0;
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a5 + 160);
  *(void *)(a5 + 160) = 0;
  *(void *)(a1 + 184) = v16;
  uint64_t v17 = *(void *)(a5 + 168);
  *(void *)(a5 + 168) = 0;
  *(void *)(a1 + 192) = v17;
  uint64_t v18 = *(void *)(a5 + 176);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a5 + 184);
  *(void *)(a1 + 200) = v18;
  uint64_t v19 = *(void *)(a5 + 192);
  *(void *)(a5 + 192) = 0;
  *(void *)(a1 + 216) = v19;
  *(unsigned char *)(a1 + 224) = *a6;
  *(_WORD *)(a1 + 225) = *a7;
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5 && (v6 = v4, uint64_t result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v12), v13))
  {
    uint64_t v8 = v12;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v11();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22ClearPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22ClearPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7C98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22ClearPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2966;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7CC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2969;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26DumpResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26DumpResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7CE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26DumpResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2982;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v7);
  char v5 = v9;
  if (v9)
  {
    *(void *)a1 = v7;
    uint64_t v6 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)(a1 + 8) = v6;
    uint64_t result = WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39UpdatePrevalentDomainsToBlockCookiesForEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39UpdatePrevalentDomainsToBlockCookiesForEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7D10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39UpdatePrevalentDomainsToBlockCookiesForEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3074;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15IsGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15IsGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7D38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15IsGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3000;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19IsPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19IsPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess19IsPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3001;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23IsVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23IsVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7D88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23IsVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3007;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess11SetLastSeenEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess11SetLastSeenEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess11SetLastSeenEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3036;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24MergeStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_SD_NS_7SecondsEbSE_bbbyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24MergeStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_SD_NS_7SecondsEbSE_bbbyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24MergeStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_SD_NS_7SecondsEbSE_bbbyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3011;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32InsertExpiredStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEybbbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32InsertExpiredStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEybbbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32InsertExpiredStatisticForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEybbbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2999;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20SetPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20SetPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20SetPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3043;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetPrevalentResourceForDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetPrevalentResourceForDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetPrevalentResourceForDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3042;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33IsResourceLoadStatisticsEphemeralEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33IsResourceLoadStatisticsEphemeralEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33IsResourceLoadStatisticsEphemeralEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3006;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HadUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HadUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HadUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2993;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (!v5 || (uint64_t v6 = v4, IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v14), !v15))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_7;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v16);
  if (v17)
  {
    if (v15)
    {
      char v9 = v14;
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v16;
      *(unsigned char *)(a1 + 24) = 1;
      return result;
    }
    __break(1u);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    int v12 = v15;
    *(unsigned char *)(a1 + 24) = 0;
    if (!v12) {
      goto LABEL_7;
    }
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (!result) {
      goto LABEL_7;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_7;
    }
  }
  WTF::StringImpl::destroy(result, v8);
LABEL_7:
  uint64_t v10 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    char v13 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v13();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32IsRelationshipOnlyInDatabaseOnceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32IsRelationshipOnlyInDatabaseOnceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32IsRelationshipOnlyInDatabaseOnceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3005;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15HasLocalStorageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15HasLocalStorageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess15HasLocalStorageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2996;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26GetAllStorageAccessEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26GetAllStorageAccessEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26GetAllStorageAccessEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2986;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsRedirectingToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsRedirectingToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsRedirectingToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3002;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsSubFrameUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsSubFrameUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27IsRegisteredAsSubFrameUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3003;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30IsRegisteredAsSubresourceUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30IsRegisteredAsSubresourceUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30IsRegisteredAsSubresourceUnderEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3004;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24DomainIDExistsInDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEiONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24DomainIDExistsInDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEiONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24DomainIDExistsInDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEiONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2980;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18LogUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B7FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18LogUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B7FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18LogUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3008;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30ResetParametersToDefaultValuesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30ResetParametersToDefaultValuesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30ResetParametersToDefaultValuesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3020;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34ScheduleClearInMemoryAndPersistentEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENSt3__18optionalINS_8WallTimeEEENS7_27ShouldGrandfatherStatisticsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34ScheduleClearInMemoryAndPersistentEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENSt3__18optionalINS_8WallTimeEEENS7_27ShouldGrandfatherStatisticsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8030;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34ScheduleClearInMemoryAndPersistentEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENSt3__18optionalINS_8WallTimeEEENS7_27ShouldGrandfatherStatisticsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3024;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ScheduleCookieBlockingUpdateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ScheduleCookieBlockingUpdateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ScheduleCookieBlockingUpdateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3025;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42ScheduleStatisticsAndDataRecordsProcessingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42ScheduleStatisticsAndDataRecordsProcessingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42ScheduleStatisticsAndDataRecordsProcessingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3026;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30StatisticsDatabaseHasAllTablesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B80A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30StatisticsDatabaseHasAllTablesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B80A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30StatisticsDatabaseHasAllTablesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3070;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    int v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5 && (v6 = v4, uint64_t result = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)a2), v8))
  {
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = result;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      BOOL v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v11();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B80D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B80D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3029;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,BOOL>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t result = IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v25);
    if (v26)
    {
      unint64_t v8 = *((void *)a2 + 1);
      uint64_t v9 = *(WTF::StringImpl **)a2;
      unint64_t v10 = *((void *)a2 + 2) - *(void *)a2;
      if (v8 <= v10)
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v20 = *((void *)a2 + 3);
        if (v20)
        {
          if (v8)
          {
            (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
            uint64_t v19 = *(WTF::StringImpl **)a2;
            unint64_t v18 = *((void *)a2 + 1);
          }
          else
          {
            unint64_t v18 = 0;
            uint64_t v19 = 0;
          }
        }
      }
      else
      {
        BOOL v11 = (unsigned __int8 *)v9 + v10;
        *((void *)a2 + 2) = v11 + 1;
        if (v9)
        {
          unsigned int v12 = *v11;
          if (v12 < 2)
          {
            BOOL v16 = v12 == 0;
            char v13 = v25;
            char v14 = !v16;
            *(void *)a1 = v6;
            *(void *)(a1 + 8) = v13;
            *(unsigned char *)(a1 + 16) = v14;
            *(unsigned char *)(a1 + 24) = 1;
            return result;
          }
          goto LABEL_22;
        }
        unint64_t v18 = v8;
        uint64_t v19 = 0;
      }
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v21 = *((void *)a2 + 3);
      if (v21)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
          uint64_t v9 = *(WTF::StringImpl **)a2;
          unint64_t v8 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
        }
      }
LABEL_22:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v22 = *((void *)a2 + 3);
      if (v22 && v8) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v22 + 16))(v22, v9);
      }
      *(unsigned char *)a1 = 0;
      int v23 = v26;
      *(unsigned char *)(a1 + 24) = 0;
      if (v23)
      {
        int v24 = v25;
        char v25 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v9);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
      goto LABEL_11;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_11:
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    char v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v17();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SetGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B80F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SetGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B80F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SetGrandfatheredEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3033;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36GetResourceLoadStatisticsDataSummaryEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS7_17ITPThirdPartyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36GetResourceLoadStatisticsDataSummaryEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS7_17ITPThirdPartyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36GetResourceLoadStatisticsDataSummaryEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS7_17ITPThirdPartyDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2991;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    unint64_t v8 = &v7[3 * v6];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, v7);
      IPC::VectorArgumentCoder<false,WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, (uint64_t)(v7 + 1));
      v7 += 3;
    }
    while (v7 != v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  char v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetGrandfatheringTimeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetGrandfatheringTimeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetGrandfatheringTimeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3034;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,unsigned long long>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5)
  {
    unint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
    if (v6 >= v8 && v6 - v8 > 7)
    {
      unint64_t v10 = (uint64_t *)(v7 + v8);
      *((void *)a2 + 2) = v10 + 1;
      if (v7)
      {
        uint64_t v11 = *v10;
        *(void *)a1 = result;
        *(void *)(a1 + 8) = v11;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      unint64_t v12 = v6;
      uint64_t v13 = 0;
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v14 = *((void *)a2 + 3);
      if (v14)
      {
        if (v6)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v7, v6);
          uint64_t v13 = *(void *)a2;
          unint64_t v12 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v12 = 0;
          uint64_t v13 = 0;
        }
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    unint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23SetMaxStatisticsEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23SetMaxStatisticsEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23SetMaxStatisticsEntriesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3038;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetMinimumTimeBetweenDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetMinimumTimeBetweenDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetMinimumTimeBetweenDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3039;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetPruneEntriesDownToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B81C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetPruneEntriesDownToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B81C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21SetPruneEntriesDownToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEyONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3050;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess50SetShouldClassifyResourcesBeforeDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B81E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess50SetShouldClassifyResourcesBeforeDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B81E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess50SetShouldClassifyResourcesBeforeDataRecordsRemovalEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3054;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess46SetResourceLoadStatisticsTimeAdvanceForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess46SetResourceLoadStatisticsTimeAdvanceForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess46SetResourceLoadStatisticsTimeAdvanceForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3053;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetIsRunningResourceLoadStatisticsTestEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetIsRunningResourceLoadStatisticsTestEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetIsRunningResourceLoadStatisticsTestEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3035;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetResourceLoadStatisticsDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8260;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetResourceLoadStatisticsDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8260;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetResourceLoadStatisticsDebugModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3052;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24SetVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8288;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24SetVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8288;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24SetVeryPrevalentResourceEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3067;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubframeUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B82B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubframeUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B82B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubframeUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3057;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33SetSubresourceUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B82D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33SetSubresourceUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B82D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess33SetSubresourceUnderTopFrameDomainEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3058;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubresourceUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubresourceUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30SetSubresourceUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3060;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetSubresourceUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetSubresourceUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32SetSubresourceUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3059;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28SetTimeToLiveUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28SetTimeToLiveUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28SetTimeToLiveUserInteractionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3063;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27SetTopFrameUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27SetTopFrameUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27SetTopFrameUniqueRedirectToEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3066;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29SetTopFrameUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B83A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29SetTopFrameUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B83A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29SetTopFrameUniqueRedirectFromEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3065;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40ResetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B83C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40ResetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B83C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess40ResetCacheMaxAgeCapForPrevalentResourcesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3018;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess44SetCrossSiteLoadWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_NS7_28DidFilterKnownLinkDecorationEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B83F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess44SetCrossSiteLoadWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_NS7_28DidFilterKnownLinkDecorationEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B83F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess44SetCrossSiteLoadWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainESD_NS7_28DidFilterKnownLinkDecorationEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3030;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47ResetCrossSiteLoadsWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8418;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47ResetCrossSiteLoadsWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8418;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47ResetCrossSiteLoadsWithLinkDecorationForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3019;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28GrantStorageAccessForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEOSD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28GrantStorageAccessForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEOSD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8440;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28GrantStorageAccessForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEOSD_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2992;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23DeleteCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8468;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23DeleteCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8468;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23DeleteCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore17RegistrableDomainEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2976;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasIsolatedSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8490;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasIsolatedSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8490;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasIsolatedSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2995;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16CloseITPDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B84B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16CloseITPDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B84B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16CloseITPDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2971;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        uint64_t result = IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a2, &v12), v13))
  {
    uint64_t v8 = v12;
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v11();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess43SetAppBoundDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B84E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess43SetAppBoundDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B84E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess43SetAppBoundDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3027;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42SetManagedDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42SetManagedDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8508;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess42SetManagedDomainsForResourceLoadStatisticsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISD_EENS_10HashTraitsISD_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3037;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetShouldDowngradeReferrerForTestingEN6WebKit14NetworkProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetShouldDowngradeReferrerForTestingEN6WebKit14NetworkProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8530;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetShouldDowngradeReferrerForTestingEN6WebKit14NetworkProcessES8_FvbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3055;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31SetThirdPartyCookieBlockingModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8558;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31SetThirdPartyCookieBlockingModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8558;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31SetThirdPartyCookieBlockingModeEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore28ThirdPartyCookieBlockingModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3062;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetShouldEnbleSameSiteStrictEnforcementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32SameSiteStrictEnforcementEnabledEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8580;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetShouldEnbleSameSiteStrictEnforcementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32SameSiteStrictEnforcementEnabledEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8580;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetShouldEnbleSameSiteStrictEnforcementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32SameSiteStrictEnforcementEnabledEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3056;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SetFirstPartyWebsiteDataRemovalModeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32FirstPartyWebsiteDataRemovalModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B85A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SetFirstPartyWebsiteDataRemovalModeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32FirstPartyWebsiteDataRemovalModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B85A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SetFirstPartyWebsiteDataRemovalModeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEN7WebCore32FirstPartyWebsiteDataRemovalModeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3032;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetToSameSiteStrictCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B85D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetToSameSiteStrictCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B85D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetToSameSiteStrictCookiesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3064;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetFirstPartyHostCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B85F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetFirstPartyHostCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B85F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess38SetFirstPartyHostCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3031;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetThirdPartyCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetThirdPartyCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8620;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetThirdPartyCNAMEDomainForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3061;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SyncLocalStorageEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SyncLocalStorageEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16SyncLocalStorageEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3072;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31StoreServiceWorkerRegistrationsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31StoreServiceWorkerRegistrationsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess31StoreServiceWorkerRegistrationsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3071;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DumpPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DumpPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27DumpPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2981;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ClearPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B86C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ClearPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B86C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess28ClearPrivateClickMeasurementEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2967;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetPrivateClickMeasurementOverrideTimerForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B86E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetPrivateClickMeasurementOverrideTimerForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B86E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess49SetPrivateClickMeasurementOverrideTimerForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3047;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57MarkAttributedPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57MarkAttributedPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57MarkAttributedPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3009;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess56SetPrivateClickMeasurementEphemeralMeasurementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess56SetPrivateClickMeasurementEphemeralMeasurementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess56SetPrivateClickMeasurementEphemeralMeasurementForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3046;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SimulatePrivateClickMeasurementSessionRestartEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SimulatePrivateClickMeasurementSessionRestartEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess45SimulatePrivateClickMeasurementSessionRestartEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3069;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder,PAL::SessionID>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::URL>,void>::decode<IPC::Decoder,PAL::SessionID>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, v7);
  if (!v8) {
    goto LABEL_10;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
LABEL_10:
    *a3 = 0;
    a3[48] = 0;
    return;
  }
  *(void *)a3 = *(void *)a2;
  WTF::URL::URL((uint64_t)(a3 + 8), (uint64_t *)v7);
  a3[48] = 1;
  if (v8)
  {
    uint64_t v6 = v7[0];
    v7[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenPublicKeyURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenPublicKeyURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenPublicKeyURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3048;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenSignatureURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B87B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenSignatureURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B87B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess53SetPrivateClickMeasurementTokenSignatureURLForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3049;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57SetPrivateClickMeasurementAttributionReportURLsForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLESC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B87D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57SetPrivateClickMeasurementAttributionReportURLsForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLESC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B87D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess57SetPrivateClickMeasurementAttributionReportURLsForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLESC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3045;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47MarkPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47MarkPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47MarkPrivateClickMeasurementsAsExpiredForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3010;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37SetPCMFraudPreventionValuesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringESC_SC_SC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37SetPCMFraudPreventionValuesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringESC_SC_SC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37SetPCMFraudPreventionValuesForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringESC_SC_SC_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3041;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<PAL::SessionID,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String>,void>::decode<IPC::Decoder,unsigned long long>(a1, (uint64_t)v6, (uint64_t)a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47SetPrivateClickMeasurementAppBundleIDForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47SetPrivateClickMeasurementAppBundleIDForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8850;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess47SetPrivateClickMeasurementAppBundleIDForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3044;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16ClosePCMDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16ClosePCMDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8878;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess16ClosePCMDatabaseEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2972;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess10ResetQuotaEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B88A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess10ResetQuotaEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B88A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess10ResetQuotaEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3021;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetOriginQuotaRatioEnabledForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B88C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetOriginQuotaRatioEnabledForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B88C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess36SetOriginQuotaRatioEnabledForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3040;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetBackupExclusionPeriodForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B88F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetBackupExclusionPeriodForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B88F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess34SetBackupExclusionPeriodForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDENS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3028;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26ResetStoragePersistedStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26ResetStoragePersistedStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8918;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26ResetStoragePersistedStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3022;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasAppBoundSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasAppBoundSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8940;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18HasAppBoundSessionEN6WebKit14NetworkProcessES8_KFvN3PAL9SessionIDEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2994;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearAppBoundSessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearAppBoundSessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClearAppBoundSessionEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2963;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37ClearServiceWorkerEntitlementOverrideEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37ClearServiceWorkerEntitlementOverrideEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8990;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess37ClearServiceWorkerEntitlementOverrideEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2968;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22UpdateBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B89B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22UpdateBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B89B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22UpdateBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 3073;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ClearBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B89E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ClearBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B89E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ClearBundleIdentifierEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2965;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27AppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS7_27AppPrivacyReportTestingDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8A08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27AppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS7_27AppPrivacyReportTestingDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8A08;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess27AppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS7_27AppPrivacyReportTestingDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2960;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32ClearAppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8A30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32ClearAppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8A30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32ClearAppPrivacyReportTestingDataEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2964;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26CountNonDefaultSessionSetsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJmEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8A58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26CountNonDefaultSessionSetsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJmEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8A58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess26CountNonDefaultSessionSetsEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJmEE4callEm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2973;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29AllowFileAccessFromWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29AllowFileAccessFromWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29AllowFileAccessFromWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2958;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AllowFilesAccessFromWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AllowFilesAccessFromWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess30AllowFilesAccessFromWebProcessEN6WebKit14NetworkProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v3 = 2959;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::RemoteWorkerType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RemoteWorkerType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteWorkerType,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  int v5 = *v4;
  if ((v5 - 1) >= 2)
  {
LABEL_7:
    int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21GetPendingPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_14WebPushMessageEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21GetPendingPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_14WebPushMessageEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21GetPendingPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNSt3__18optionalINS7_14WebPushMessageEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2989;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::WebPushMessage>,void>::encode<IPC::Encoder,std::optional<WebKit::WebPushMessage> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::optional<WebKit::WebPushMessage>,void>::encode<IPC::Encoder,std::optional<WebKit::WebPushMessage> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 216);
  uint64_t result = (WTF::StringImpl *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D6D74);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 216))
    {
      return IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (WTF::StringImpl *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22GetPendingPushMessagesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS_6VectorINS7_14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D6D94);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22GetPendingPushMessagesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS_6VectorINS7_14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22GetPendingPushMessagesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS_6VectorINS7_14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess22GetPendingPushMessagesEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvRKNS_6VectorINS7_14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2990;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 216 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode(a1, v6);
      v6 += 216;
      v7 -= 216;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebPushMessage>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::WebPushMessage,void>::decode(a1, a2);
  if (!a2[216])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    WTF::URL::URL(a1, (uint64_t *)a2);
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(void *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](a1 + 64, a2 + 64);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](uint64_t result, uint64_t a2)
{
  *(unsigned char *)unint64_t result = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    *(unsigned char *)unint64_t result = *(unsigned char *)a2;
    uint64_t v2 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v2;
    uint64_t v3 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(result + 16) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(result + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(result + 32) = v5;
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(void *)(result + 40) = v6;
    *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
    *(unsigned char *)(result + 56) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 216))
  {
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 72, a2);
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v7 = *(WTF **)a1;
      if (*(void *)a1)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v7, v3);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(unsigned char *)(a1 + 120)) {
      WebCore::ApplePayInstallmentItem::~ApplePayInstallmentItem((WebCore::ApplePayInstallmentItem *)(a1 + 64), a2);
    }
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18ProcessPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS7_14WebPushMessageEN7WebCore19PushPermissionStateEONS_17CompletionHandlerIFvbONSt3__18optionalINSD_19NotificationPayloadEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18ProcessPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS7_14WebPushMessageEN7WebCore19PushPermissionStateEONS_17CompletionHandlerIFvbONSt3__18optionalINSD_19NotificationPayloadEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess18ProcessPushMessageEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS7_14WebPushMessageEN7WebCore19PushPermissionStateEONS_17CompletionHandlerIFvbONSt3__18optionalINSD_19NotificationPayloadEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EE4callEbSK_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3015;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = a2;
    IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 136);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D73E4);
    }
    *uint64_t v5 = 1;
    if (*(unsigned char *)(a2 + 136))
    {
      IPC::ArgumentCoder<WebCore::NotificationPayload,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = (IPC::Decoder *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<WebCore::NotificationData>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D7404);
    }
    *uint64_t v5 = 0;
  }
}

void IPC::Decoder::decode<WebCore::NotificationData>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::NotificationData,void>::decode(a1, a2);
  if (!a2[256])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t std::__tuple_leaf<0ul,WebCore::NotificationData,false>::__tuple_leaf[abi:sn180100]<WebCore::NotificationData,void>(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(v5 + 40) = v4;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(v5 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v5 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v5 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(v5 + 72) = v9;
  *(unsigned char *)(v5 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(v5 + 88) = v10;
  WTF::URL::URL(v5 + 96, (uint64_t *)(a2 + 96));
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 176);
  long long v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  uint64_t v14 = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(void *)(a1 + 224) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a2 + 232) = 0;
  *(_DWORD *)(a1 + 232) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a2 + 236) = 0;
  *(_DWORD *)(a1 + 236) = v14;
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24ProcessNotificationEventEN6WebKit14NetworkProcessES8_FvON7WebCore16NotificationDataENS9_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8B48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24ProcessNotificationEventEN6WebKit14NetworkProcessES8_FvON7WebCore16NotificationDataENS9_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8B48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24ProcessNotificationEventEN6WebKit14NetworkProcessES8_FvON7WebCore16NotificationDataENS9_21NotificationEventTypeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3014;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    long long v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32GetAllBackgroundFetchIdentifiersEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8B70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32GetAllBackgroundFetchIdentifiersEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8B70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32GetAllBackgroundFetchIdentifiersEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2985;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23GetBackgroundFetchStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_20BackgroundFetchStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8B98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23GetBackgroundFetchStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_20BackgroundFetchStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8B98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess23GetBackgroundFetchStateEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS7_20BackgroundFetchStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2988;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 152);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D79ACLL);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 152))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D79CCLL);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  long long v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20AbortBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2956;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20PauseBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20PauseBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20PauseBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3012;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ResumeBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ResumeBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21ResumeBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3023;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClickBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClickBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess20ClickBackgroundFetchEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2970;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetPushAndNotificationsEnabledForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetPushAndNotificationsEnabledForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess39SetPushAndNotificationsEnabledForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3051;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32RemovePushSubscriptionsForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32RemovePushSubscriptionsForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess32RemovePushSubscriptionsForOriginEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3016;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4);
  if (v7 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29HasPushSubscriptionForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29HasPushSubscriptionForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess29HasPushSubscriptionForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_3URLEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2997;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21GetAppBadgeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21GetAppBadgeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess21GetAppBadgeForTestingEN6WebKit14NetworkProcessES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2987;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v11 = v5;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(v5, v10);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  long long v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEN6WebKit14NetworkProcessES8_FvNS7_10CacheModelEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEN6WebKit14NetworkProcessES8_FvNS7_10CacheModelEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess36SetCacheModelSynchronouslyForTestingEN6WebKit14NetworkProcessES8_FvNS7_10CacheModelEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvNS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvNS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess38SetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvNS_7SecondsEONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8D78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14NetworkProcess40ResetServiceWorkerFetchTimeoutForTestingEN6WebKit14NetworkProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)(a1 + 8), 0, 0);
}

void WebKit::NetworkProcessProxy::didReceiveNetworkProcessProxyMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v597 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (unsigned int *)(this + 4);
  atomic_fetch_add(this + 4, 1u);
  uint64_t v9 = a3;
  unint64_t v11 = (unint64_t)v559;
  uint64_t v12 = v523;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x13A:
      long long v13 = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!v14) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::contentExtensionRules((unsigned int *)this, v13);
      if (this) {
        goto LABEL_760;
      }
      return;
    case 0x13B:
      uint64_t v152 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!v153) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::cookiesDidChange((WebKit *)this, v152);
      if (this) {
        goto LABEL_760;
      }
      return;
    case 0x13C:
      uint64_t v115 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v116) {
        goto LABEL_673;
      }
      uint64_t v117 = v115;
      IPC::Decoder::decode<WebCore::ResourceError>(v9, (uint64_t)v559);
      if (!BYTE8(v562))
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v559, v118);
        goto LABEL_673;
      }
      long long v119 = *(_OWORD *)v559;
      *(void *)v559 = 0;
      *(void *)&v559[8] = 0;
      *(_OWORD *)&v523[8] = v119;
      *(_OWORD *)&v523[24] = *(_OWORD *)&v559[16];
      *(_OWORD *)&v523[40] = *(_OWORD *)&v559[32];
      *(_DWORD *)&v559[16] &= ~1u;
      *(void *)v523 = v117;
      *(void *)&v523[56] = v560;
      *(_DWORD *)&v523[64] = v561;
      *(_WORD *)&v523[68] = WORD2(v561);
      uint64_t v120 = *((void *)&v561 + 1);
      uint64_t v560 = 0;
      *((void *)&v561 + 1) = 0;
      *(void *)&v523[72] = v120;
      v523[80] = v562;
      v523[88] = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v559, v118);
      WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError((uint64_t)this, v117, (uint64_t)&v523[8]);
      if (!v523[88]) {
        goto LABEL_759;
      }
      v121 = *(const void **)&v523[72];
      *(void *)&v523[72] = 0;
      if (v121) {
        CFRelease(v121);
      }
      v122 = *(WTF::StringImpl **)&v523[56];
      *(void *)&v523[56] = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2) {
          WTF::StringImpl::destroy(v122, v96);
        }
        else {
          *(_DWORD *)v122 -= 2;
        }
      }
      v372 = *(WTF::StringImpl **)&v523[16];
      *(void *)&v523[16] = 0;
      if (v372)
      {
        if (*(_DWORD *)v372 == 2) {
          WTF::StringImpl::destroy(v372, v96);
        }
        else {
          *(_DWORD *)v372 -= 2;
        }
      }
      goto LABEL_540;
    case 0x13D:
      uint64_t v133 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v134) {
        goto LABEL_673;
      }
      uint64_t v135 = v133;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v9, (uint64_t)v523);
      if (!v523[16]) {
        goto LABEL_673;
      }
      WebKit::NetworkProcessProxy::dataTaskDidReceiveData((uint64_t)this, v135);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x13E:
      uint64_t v80 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v81) {
        goto LABEL_673;
      }
      uint64_t v82 = v80;
      IPC::Decoder::decode<WebCore::ResourceResponse>(v9, v559);
      if (!v577)
      {
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v559, v83);
        goto LABEL_673;
      }
      *(_OWORD *)&v523[16] = *(_OWORD *)&v559[8];
      *(_OWORD *)&v523[32] = *(_OWORD *)&v559[24];
      long long v84 = v561;
      long long v561 = 0u;
      long long v85 = v562;
      long long v562 = 0u;
      uint64_t v86 = *(void *)&v559[40];
      *(void *)v523 = v82;
      *(void *)&v523[8] = *(void *)v559;
      uint64_t v3 = &v523[8];
      *(void *)v559 = 0;
      *(_DWORD *)&v559[8] &= ~1u;
      *(void *)&v559[40] = 0;
      *(void *)&v523[48] = v86;
      *(void *)&v523[56] = v560;
      *(_OWORD *)&v523[64] = v84;
      *(_OWORD *)&v523[80] = v85;
      *(void *)&long long v84 = v563;
      uint64_t v563 = 0;
      *(void *)&v523[96] = v84;
      uint64_t v87 = v564;
      v564 = 0;
      v524 = v87;
      *(void *)&long long v84 = v565;
      uint64_t v565 = 0;
      uint64_t v525 = v84;
      uint64_t v88 = v566;
      uint64_t v566 = 0;
      uint64_t v526 = v88;
      LOBYTE(v527) = 0;
      char v528 = 0;
      if (v568)
      {
        v373 = v567;
        v567 = 0;
        id v527 = v373;
        char v528 = 1;
      }
      long long v533 = v573;
      *(_OWORD *)v534 = *(_OWORD *)v574;
      *(_DWORD *)&v534[15] = *(_DWORD *)&v574[15];
      long long v529 = v569;
      long long v530 = v570;
      long long v531 = v571;
      long long v532 = v572;
      CFTypeRef v89 = v575;
      v575 = 0;
      CFTypeRef v535 = v89;
      char v536 = v576;
      v537[0] = 1;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v559, v83);
      uint64_t v90 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!(_BYTE)v91) {
        goto LABEL_76;
      }
      *(void *)v559 = v90;
      uint64_t v9 = (IPC::Decoder *)&v559[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
      char v92 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v92 = &unk_1EE9B8F40;
      v92[1] = *(void *)v559;
      uint64_t v93 = *(void *)&v559[8];
      *(void *)&v559[8] = 0;
      v92[2] = v93;
      *(void *)v580 = v92;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
      if (!v537[0]) {
        goto LABEL_796;
      }
      WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t *)v580);
      uint64_t v94 = *(void *)v580;
      *(void *)v580 = 0;
      if (v94) {
        (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
      }
      if (!v537[0]) {
        goto LABEL_759;
      }
      CFTypeRef v89 = v535;
LABEL_76:
      CFTypeRef v535 = 0;
      if (v89) {
        CFRelease(v89);
      }
      goto LABEL_439;
    case 0x13F:
      uint64_t v175 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v176)
      {
        uint64_t v3 = (unsigned char *)v175;
        IPC::Decoder::decode<WebCore::AuthenticationChallenge>((uint64_t)v9, (uint64_t)v559);
        char v178 = v579;
        if (v579)
        {
          *(void *)v523 = v3;
          uint64_t v3 = v523;
          WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)&v523[8], (uint64_t)v559);
          long long v179 = v578;
          long long v578 = 0uLL;
          *(_OWORD *)&v543[40] = v179;
          char v178 = 1;
        }
        else
        {
          v523[0] = 0;
        }
        v543[56] = v178;
        std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v559, v177);
        if (v543[56]) {
          goto LABEL_353;
        }
      }
      else
      {
        v523[0] = 0;
        v543[56] = 0;
      }
      v400 = *(WTF::StringImpl **)v9;
      uint64_t v401 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v402 = *((void *)v9 + 3);
      if (!v402) {
        goto LABEL_759;
      }
      if (!v401) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v402 + 16))(v402, v400);
      if (!v543[56]) {
        goto LABEL_759;
      }
LABEL_353:
      uint64_t v306 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if ((_BYTE)v307)
      {
        *(void *)v559 = v306;
        uint64_t v9 = (IPC::Decoder *)&v559[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
        v308 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v308 = &unk_1EE9B8EF0;
        v308[1] = *(void *)v559;
        uint64_t v309 = *(void *)&v559[8];
        *(void *)&v559[8] = 0;
        v308[2] = v309;
        *(void *)v580 = v308;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
        if (!v543[56]) {
          goto LABEL_796;
        }
        WebKit::NetworkProcessProxy::dataTaskReceivedChallenge((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t *)v580);
        uint64_t v310 = *(void *)v580;
        *(void *)v580 = 0;
        if (v310) {
          (*(void (**)(uint64_t))(*(void *)v310 + 8))(v310);
        }
      }
      if (!v543[56]) {
        goto LABEL_759;
      }
      v311 = *(const void **)&v543[48];
      *(void *)&v543[48] = 0;
      if (v311) {
        CFRelease(v311);
      }
      v312 = *(const void **)&v543[40];
      *(void *)&v543[40] = 0;
      if (v312) {
        CFRelease(v312);
      }
      WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v523[8], v307);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x140:
      uint64_t v204 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v205)
      {
        uint64_t v3 = (unsigned char *)v204;
        IPC::Decoder::decode<WebCore::ResourceResponse>(v9, v559);
        if (v577)
        {
          IPC::Decoder::decode<WebCore::ResourceRequest>(v9, (uint64_t)v580);
          char v207 = v596;
          if (v596)
          {
            if (!v577) {
              goto LABEL_796;
            }
            *(_OWORD *)&v523[16] = *(_OWORD *)&v559[8];
            *(_OWORD *)&v523[32] = *(_OWORD *)&v559[24];
            long long v208 = v561;
            long long v561 = 0u;
            long long v209 = v562;
            long long v562 = 0u;
            uint64_t v210 = *(void *)&v559[40];
            *(void *)v523 = v3;
            *(void *)&v523[8] = *(void *)v559;
            *(void *)v559 = 0;
            *(_DWORD *)&v559[8] &= ~1u;
            *(void *)&v559[40] = 0;
            *(void *)&v523[48] = v210;
            *(void *)&v523[56] = v560;
            *(_OWORD *)&v523[64] = v208;
            *(_OWORD *)&v523[80] = v209;
            *(void *)&long long v208 = v563;
            uint64_t v563 = 0;
            *(void *)&v523[96] = v208;
            v211 = v564;
            v564 = 0;
            v524 = v211;
            *(void *)&long long v208 = v565;
            uint64_t v565 = 0;
            uint64_t v525 = v208;
            uint64_t v212 = v566;
            uint64_t v566 = 0;
            uint64_t v526 = v212;
            LOBYTE(v527) = 0;
            char v528 = 0;
            if (v568)
            {
              v376 = v567;
              v567 = 0;
              id v527 = v376;
              char v528 = 1;
            }
            long long v533 = v573;
            *(_OWORD *)v534 = *(_OWORD *)v574;
            *(_DWORD *)&v534[15] = *(_DWORD *)&v574[15];
            long long v529 = v569;
            long long v530 = v570;
            long long v531 = v571;
            long long v532 = v572;
            v213 = v575;
            v575 = 0;
            CFTypeRef v535 = v213;
            char v536 = v576;
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v537, (uint64_t)v580);
            char v207 = 1;
          }
          else
          {
            v523[0] = 0;
          }
          LOBYTE(v545) = v207;
          std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v580);
        }
        else
        {
          v523[0] = 0;
          LOBYTE(v545) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v559, v206);
        if ((_BYTE)v545) {
          goto LABEL_430;
        }
      }
      else
      {
        v523[0] = 0;
        LOBYTE(v545) = 0;
      }
      v403 = *(WTF::StringImpl **)v9;
      uint64_t v404 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v405 = *((void *)v9 + 3);
      if (!v405) {
        goto LABEL_759;
      }
      if (!v404) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v405 + 16))(v405, v403);
      if (!(_BYTE)v545) {
        goto LABEL_759;
      }
LABEL_430:
      uint64_t v335 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (v336)
      {
        *(void *)v559 = v335;
        uint64_t v9 = (IPC::Decoder *)&v559[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
        v337 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v337 = &unk_1EE9B8F18;
        v337[1] = *(void *)v559;
        uint64_t v338 = *(void *)&v559[8];
        *(void *)&v559[8] = 0;
        v337[2] = v338;
        *(void *)v580 = v337;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
        if (!(_BYTE)v545) {
          goto LABEL_796;
        }
        WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t)v537, (uint64_t *)v580);
        uint64_t v339 = *(void *)v580;
        *(void *)v580 = 0;
        if (v339) {
          (*(void (**)(uint64_t))(*(void *)v339 + 8))(v339);
        }
      }
      if (!(_BYTE)v545) {
        goto LABEL_759;
      }
      CFTypeRef v340 = v544[1];
      v544[1] = 0;
      if (v340) {
        CFRelease(v340);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v537);
      CFTypeRef v341 = v535;
      CFTypeRef v535 = 0;
      if (v341) {
        CFRelease(v341);
      }
LABEL_439:
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v523[8], v91);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x141:
      uint64_t v136 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v137) {
        goto LABEL_673;
      }
      uint64_t v138 = v136;
      uint64_t v139 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)v9);
      if ((v139 & 0xFF00000000) == 0) {
        goto LABEL_673;
      }
      int v140 = v139;
      unsigned __int16 v141 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataFetchOption>>((uint64_t *)v9);
      if (v141 < 0x100u) {
        goto LABEL_673;
      }
      char v143 = v141;
      IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v9, v142, (uint64_t)v559);
      if (!v559[16]) {
        goto LABEL_673;
      }
      *(void *)v523 = v138;
      *(_DWORD *)&v523[8] = v140;
      v523[12] = v143;
      uint64_t v3 = &v523[16];
      uint64_t v145 = *(void *)v559;
      *(void *)v559 = 0;
      *(void *)&v523[16] = v145;
      uint64_t v146 = *(void *)&v559[8];
      *(void *)&v559[8] = 0;
      *(void *)&v523[24] = v146;
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v559, v144);
      v523[32] = 1;
      uint64_t v147 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!(_BYTE)v148) {
        goto LABEL_133;
      }
      *(void *)v559 = v147;
      uint64_t v9 = (IPC::Decoder *)&v559[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
      unint64_t v149 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v149 = &unk_1EE9B8DD8;
      v149[1] = *(void *)v559;
      uint64_t v150 = *(void *)&v559[8];
      *(void *)&v559[8] = 0;
      v149[2] = v150;
      *(void *)v580 = v149;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
      if (!v523[32]) {
        goto LABEL_796;
      }
      WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains((WebKit *)this, *(WTF::StringImpl ***)v523, *(int *)&v523[8], v523[12], (uint64_t)&v523[16], (uint64_t *)v580);
      uint64_t v151 = *(void *)v580;
      *(void *)v580 = 0;
      if (v151) {
        (*(void (**)(uint64_t))(*(void *)v151 + 8))(v151);
      }
      if (!v523[32]) {
        goto LABEL_759;
      }
LABEL_133:
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v523[16], v148);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x142:
      uint64_t v231 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v231 & 0xFF00000000) == 0)
      {
        v523[0] = 0;
        v523[88] = 0;
        goto LABEL_627;
      }
      int v232 = v231;
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)v9, v559);
      char v233 = BYTE8(v561);
      if (!BYTE8(v561)) {
        goto LABEL_330;
      }
      uint64_t v234 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (v235
        && (uint64_t v3 = (unsigned char *)v234,
            uint64_t v236 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9),
            (_BYTE)v20))
      {
        if (!BYTE8(v561)) {
          goto LABEL_796;
        }
        uint64_t v237 = v236;
        *(_DWORD *)v523 = v232;
        v523[8] = 0;
        *(_DWORD *)&v523[32] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[8], (uint64_t)v559);
        v523[40] = 0;
        *(_DWORD *)&v523[64] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[40], (uint64_t)&v559[32]);
        *(void *)&v523[72] = v3;
        *(void *)&v523[80] = v237;
        char v233 = 1;
      }
      else
      {
        char v233 = 0;
LABEL_330:
        v523[0] = 0;
      }
      v523[88] = v233;
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v559);
      if (v523[88]) {
        goto LABEL_332;
      }
LABEL_627:
      v409 = *(WTF::StringImpl **)v9;
      uint64_t v410 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v411 = *((void *)v9 + 3);
      if (!v411) {
        goto LABEL_759;
      }
      if (!v410) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v411 + 16))(v411, v409);
      if (!v523[88]) {
        goto LABEL_759;
      }
LABEL_332:
      uint64_t v298 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (v299)
      {
        *(void *)v559 = v298;
        uint64_t v9 = (IPC::Decoder *)&v559[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
        v300 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v300 = &unk_1EE9B8FB8;
        v300[1] = *(void *)v559;
        uint64_t v301 = *(void *)&v559[8];
        *(void *)&v559[8] = 0;
        v300[2] = v301;
        *(void *)v580 = v300;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
        if (!v523[88]) {
          goto LABEL_796;
        }
        WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin((uint64_t)this, *(int *)v523, (const WebCore::SecurityOriginData *)&v523[8], *(uint64_t *)&v523[72], *(uint64_t *)&v523[80], (uint64_t *)v580);
        uint64_t v302 = *(void *)v580;
        *(void *)v580 = 0;
        if (v302) {
          (*(void (**)(uint64_t))(*(void *)v302 + 8))(v302);
        }
      }
      if (v523[88])
      {
        if (*(_DWORD *)&v523[64] != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[64]])(v559, &v523[40]);
        }
        *(_DWORD *)&v523[64] = -1;
        if (*(_DWORD *)&v523[32] != -1) {
          goto LABEL_340;
        }
      }
      goto LABEL_759;
    case 0x143:
      uint64_t v97 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v98) {
        goto LABEL_673;
      }
      unint64_t v99 = *((void *)v9 + 1);
      uint64_t v100 = *(WTF::StringImpl **)v9;
      unint64_t v101 = *((void *)v9 + 2) - *(void *)v9;
      if (v99 <= v101) {
        goto LABEL_587;
      }
      uint64_t v102 = (unsigned __int8 *)v100 + v101;
      *((void *)v9 + 2) = v102 + 1;
      if (!v100) {
        goto LABEL_857;
      }
      unsigned int v103 = *v102;
      if (v103 >= 2) {
        goto LABEL_662;
      }
      uint64_t v104 = v97;
      IPC::Decoder::decode<WTF::URL>(v9, v559);
      if (!v559[40]) {
        goto LABEL_673;
      }
      *(void *)v523 = v104;
      v523[8] = v103 != 0;
      *(void *)&v523[16] = *(void *)v559;
      *(_OWORD *)&v523[24] = *(_OWORD *)&v559[8];
      *(_OWORD *)&v523[40] = *(_OWORD *)&v559[24];
      v523[56] = 1;
      WebKit::NetworkProcessProxy::didAllowPrivateTokenUsageByThirdPartyForTesting((WebKit *)this, v104);
      if (!v523[56]) {
        goto LABEL_759;
      }
      unsigned int v105 = *(WTF::StringImpl **)&v523[16];
      *(void *)&v523[16] = 0;
      if (!v105) {
        goto LABEL_759;
      }
      goto LABEL_541;
    case 0x144:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL>>(v523, a3);
      if (!v523[48]) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::didBlockLoadToKnownTracker((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8]);
      goto LABEL_216;
    case 0x145:
      uint64_t v78 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!v79) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource((uint64_t)this, v78);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x146:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL>>(v523, a3);
      if (!v523[48]) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::didNegotiateModernTLS((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8]);
LABEL_216:
      if (!v523[48]) {
        goto LABEL_759;
      }
      goto LABEL_756;
    case 0x147:
      long long v191 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v192
        || (a2 = (atomic_uchar *volatile *)v191,
            uint64_t v193 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9),
            !v194))
      {
        v523[0] = 0;
        LOBYTE(v549) = 0;
        goto LABEL_579;
      }
      uint64_t v3 = (unsigned char *)v193;
      IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>((uint64_t *)v9, (uint64_t)v580);
      if (!v580[40])
      {
        v523[0] = 0;
        LOBYTE(v549) = 0;
        goto LABEL_733;
      }
      IPC::Decoder::decode<WebCore::AuthenticationChallenge>((uint64_t)v9, (uint64_t)v559);
      char v195 = v579;
      if (!v579) {
        goto LABEL_728;
      }
      unint64_t v196 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v197 = *((void *)v9 + 2) - *(void *)v9;
      if (v196 <= v197)
      {
        unint64_t v470 = 0;
        v471 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v472 = *((void *)v9 + 3);
        if (v472)
        {
          if (v196)
          {
            (*(void (**)(uint64_t))(*(void *)v472 + 16))(v472);
            v471 = *(WTF::StringImpl **)v9;
            unint64_t v470 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v470 = 0;
            v471 = 0;
          }
        }
      }
      else
      {
        long long v198 = (unsigned __int8 *)v20 + v197;
        *((void *)v9 + 2) = v198 + 1;
        if (v20)
        {
          unsigned int v199 = *v198;
          if (v199 < 2)
          {
            BOOL v200 = v199 != 0;
            uint64_t v201 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v9);
            if ((_BYTE)v20)
            {
              if (!v580[40] || !v579) {
                goto LABEL_796;
              }
              uint64_t v202 = v201;
              *(void *)v523 = a2;
              *(void *)&v523[8] = v3;
              v523[16] = 0;
              v523[48] = 0;
              if (v580[32])
              {
                *(_DWORD *)&v523[40] = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[16], (uint64_t)v580);
                v523[48] = 1;
              }
              WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)&v523[56], (uint64_t)v559);
              long long v203 = v578;
              long long v578 = 0uLL;
              long long v546 = v203;
              LOBYTE(v547) = v200;
              uint64_t v548 = v202;
              char v195 = 1;
              goto LABEL_729;
            }
LABEL_727:
            char v195 = 0;
LABEL_728:
            v523[0] = 0;
LABEL_729:
            LOBYTE(v549) = v195;
            std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v559, v20);
            if (v580[40] && v580[32] && *(_DWORD *)&v580[24] != -1) {
              ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v580[24]])(v559, v580);
            }
LABEL_733:
            if ((_BYTE)v549) {
              goto LABEL_734;
            }
LABEL_579:
            v381 = *(WTF::StringImpl **)v9;
            uint64_t v382 = *((void *)v9 + 1);
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v383 = *((void *)v9 + 3);
            if (!v383) {
              goto LABEL_759;
            }
            if (!v382) {
              goto LABEL_759;
            }
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v383 + 16))(v383, v381);
            if (!(_BYTE)v549) {
              goto LABEL_759;
            }
LABEL_734:
            v468 = &v523[16];
            WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge((uint64_t)this, *(WTF::StringImpl **)v523, *(uint64_t *)&v523[8], (uint64_t)&v523[16], (WebCore::AuthenticationChallengeBase *)&v523[56], v547, v548);
            if ((_BYTE)v549)
            {
              v476 = (const void *)*((void *)&v546 + 1);
              *((void *)&v546 + 1) = 0;
              if (v476) {
                CFRelease(v476);
              }
              v477 = (const void *)v546;
              *(void *)&long long v546 = 0;
              if (v477) {
                CFRelease(v477);
              }
              WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v523[56], v475);
              if (v523[48])
              {
                uint64_t v469 = *(unsigned int *)&v523[40];
                goto LABEL_741;
              }
            }
            goto LABEL_759;
          }
LABEL_726:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v474 = *((void *)v9 + 3);
          if (v474 && v196) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v474 + 16))(v474, v20);
          }
          goto LABEL_727;
        }
        unint64_t v470 = v196;
        v471 = 0;
      }
      unint64_t v196 = 0;
      uint64_t v20 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v473 = *((void *)v9 + 3);
      if (v473)
      {
        if (v470)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v473 + 16))(v473, v471, v470);
          uint64_t v20 = *(WTF::StringImpl **)v9;
          unint64_t v196 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v196 = 0;
          uint64_t v20 = 0;
        }
      }
      goto LABEL_726;
    case 0x148:
      uint64_t v67 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (!v68) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::endServiceWorkerBackgroundProcessing((uint64_t)this, v67);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x149:
      int v123 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
      if ((unsigned __int16)v123 < 0x100u) {
        goto LABEL_673;
      }
      LODWORD(v3) = v123;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v580);
      if (!v580[8]) {
        goto LABEL_673;
      }
      unint64_t v124 = *((void *)v9 + 1);
      uint64_t v125 = *(WTF::StringImpl **)v9;
      unint64_t v126 = *((void *)v9 + 2) - *(void *)v9;
      if (v124 <= v126)
      {
        unint64_t v478 = 0;
        v479 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v480 = *((void *)v9 + 3);
        if (v480)
        {
          if (v124)
          {
            (*(void (**)(uint64_t))(*(void *)v480 + 16))(v480);
            v479 = *(WTF::StringImpl **)v9;
            unint64_t v478 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v478 = 0;
            v479 = 0;
          }
        }
      }
      else
      {
        v127 = (unsigned __int8 *)v125 + v126;
        *((void *)v9 + 2) = v127 + 1;
        if (v125)
        {
          unsigned int v128 = *v127;
          if (v128 < 2)
          {
            if (!v128)
            {
              uint64_t v131 = 0;
              unint64_t v11 = 0;
              char v132 = 0;
LABEL_528:
              IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(v9, (uint64_t)v559);
              if ((_BYTE)v560
                && (uint64_t v369 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9),
                    (_BYTE)v20))
              {
                if (!v580[8] || !(_BYTE)v560) {
                  goto LABEL_796;
                }
                uint64_t v12 = (unsigned char *)v369;
                v523[0] = (_BYTE)v3;
                uint64_t v370 = *(void *)v580;
                *(void *)v580 = 0;
                v11 |= v131;
                *(void *)&v523[8] = v370;
                *(void *)&v523[16] = v11;
                v523[24] = v132;
                *(_OWORD *)&v523[32] = *(_OWORD *)v559;
                *(_OWORD *)&v523[48] = *(_OWORD *)&v559[16];
                *(_OWORD *)&v523[64] = *(_OWORD *)&v559[32];
                int v371 = 1;
                *(void *)&v523[80] = v369;
              }
              else
              {
                LOBYTE(v3) = 0;
                int v371 = 0;
                v523[0] = 0;
              }
              v523[96] = v371;
LABEL_750:
              if (v580[8])
              {
                v489 = *(WTF::StringImpl **)v580;
                *(void *)v580 = 0;
                if (v489)
                {
                  if (*(_DWORD *)v489 == 2) {
                    WTF::StringImpl::destroy(v489, v20);
                  }
                  else {
                    *(_DWORD *)v489 -= 2;
                  }
                }
              }
              if (v371)
              {
                uint64_t v485 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
                if ((_BYTE)v96)
                {
                  *(void *)v559 = v485;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
                  v486 = (void *)WTF::fastMalloc((WTF *)0x18);
                  void *v486 = &unk_1EE9B8E50;
                  v486[1] = *(void *)v559;
                  uint64_t v487 = *(void *)&v559[8];
                  *(void *)&v559[8] = 0;
                  v486[2] = v487;
                  *(void *)v580 = v486;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
                  *(_OWORD *)v559 = *(_OWORD *)&v523[32];
                  *(_OWORD *)&v559[16] = *(_OWORD *)&v523[48];
                  *(_OWORD *)&v559[32] = *(_OWORD *)&v523[64];
                  WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess((uint64_t)this, (WebKit *)v3, (const WTF::StringImpl **)&v523[8], (WebKit::WebsiteDataStore *)v11, v523[24], v559, (uint64_t)v12, (uint64_t)v580);
                  uint64_t v488 = *(void *)v580;
                  *(void *)v580 = 0;
                  if (v488) {
                    (*(void (**)(uint64_t))(*(void *)v488 + 8))(v488);
                  }
                  if (!v523[96]) {
                    goto LABEL_759;
                  }
                }
                goto LABEL_756;
              }
LABEL_673:
              v439 = *(WTF::StringImpl **)v9;
              uint64_t v440 = *((void *)v9 + 1);
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              uint64_t v441 = *((void *)v9 + 3);
              if (!v441 || !v440) {
                goto LABEL_759;
              }
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v441 + 16))(v441, v439);
              if (!this) {
                return;
              }
              goto LABEL_760;
            }
            uint64_t v129 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v9);
            if (v130)
            {
              unint64_t v11 = v129 & 0xFFFFFFFFFFFFFF00;
              uint64_t v131 = v129;
              char v132 = 1;
              goto LABEL_528;
            }
LABEL_748:
            uint64_t v20 = *(WTF::StringImpl **)v9;
            uint64_t v483 = *((void *)v9 + 1);
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v484 = *((void *)v9 + 3);
            if (v484 && v483) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v484 + 16))(v484, v20);
            }
            LOBYTE(v3) = 0;
            int v371 = 0;
            v523[0] = 0;
            v523[96] = 0;
            goto LABEL_750;
          }
LABEL_747:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v482 = *((void *)v9 + 3);
          if (v482 && v124) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v482 + 16))(v482, v125);
          }
          goto LABEL_748;
        }
        unint64_t v478 = v124;
        v479 = 0;
      }
      unint64_t v124 = 0;
      uint64_t v125 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v481 = *((void *)v9 + 3);
      if (v481)
      {
        if (v478)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v481 + 16))(v481, v479, v478);
          uint64_t v125 = *(WTF::StringImpl **)v9;
          unint64_t v124 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v124 = 0;
          uint64_t v125 = 0;
        }
      }
      goto LABEL_747;
    case 0x14A:
      uint64_t v57 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!v58) {
        goto LABEL_759;
      }
      long long v59 = (WTF::StringImpl **)v57;
      uint64_t v60 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!v61) {
        goto LABEL_759;
      }
      *(void *)v523 = v60;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v523[8], a2);
      long long v62 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v62 = &unk_1EE9B8E78;
      v62[1] = *(void *)v523;
      uint64_t v63 = *(void *)&v523[8];
      *(void *)&v523[8] = 0;
      v62[2] = v63;
      *(void *)v559 = v62;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v523[8]);
      WebKit::NetworkProcessProxy::getAppBoundDomains((WebKit *)this, v59, (uint64_t *)v559);
      uint64_t v64 = *(void *)v559;
      *(void *)v559 = 0;
      if (!v64) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x14B:
      uint64_t v154 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!v155) {
        goto LABEL_759;
      }
      uint64_t v156 = v154;
      uint64_t v157 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!v158) {
        goto LABEL_759;
      }
      *(void *)v523 = v157;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v523[8], a2);
      uint64_t v159 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v159 = &unk_1EE9B8EC8;
      v159[1] = *(void *)v523;
      uint64_t v160 = *(void *)&v523[8];
      *(void *)&v523[8] = 0;
      v159[2] = v160;
      *(void *)v559 = v159;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v523[8]);
      WebKit::NetworkProcessProxy::getPaymentCoordinatorEmbeddingUserAgent((uint64_t)this, v156, (WTF::RefCountedBase *)v559);
      uint64_t v161 = *(void *)v559;
      *(void *)v559 = 0;
      if (!v161) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x14C:
      uint64_t v214 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v215)
      {
        v523[0] = 0;
        LOBYTE(v524) = 0;
        goto LABEL_622;
      }
      uint64_t v3 = (unsigned char *)v214;
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)v9, v559);
      char v216 = BYTE8(v561);
      if (!BYTE8(v561)) {
        goto LABEL_718;
      }
      uint64_t v217 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v9);
      if (!v218) {
        goto LABEL_717;
      }
      unint64_t v219 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v220 = ((*((void *)v9 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v9;
      if (v219 < v220 || v219 - v220 <= 7)
      {
        unint64_t v464 = 0;
        v465 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v466 = *((void *)v9 + 3);
        if (v466)
        {
          if (v219)
          {
            (*(void (**)(uint64_t))(*(void *)v466 + 16))(v466);
            v465 = *(WTF::StringImpl **)v9;
            unint64_t v464 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v464 = 0;
            v465 = 0;
          }
        }
      }
      else
      {
        v221 = (uint64_t *)((char *)v20 + v220);
        *((void *)v9 + 2) = v221 + 1;
        if (v20)
        {
          unint64_t v222 = (((unint64_t)v221 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v20;
          if (v219 >= v222 && v219 - v222 > 7)
          {
            uint64_t v224 = *v221;
            *((void *)v9 + 2) = (((unint64_t)v221 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            uint64_t v225 = *(void *)(((unint64_t)v221 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v226 = (((((unint64_t)v221 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v20;
            if (v219 >= v226 && v219 - v226 > 7)
            {
              v228 = (uint64_t *)((char *)v20 + v226);
              uint64_t v229 = *v228;
              *((void *)v9 + 2) = v228 + 1;
              if (!BYTE8(v561)) {
                goto LABEL_796;
              }
              uint64_t v230 = v217;
              *(void *)v523 = v3;
              v523[8] = 0;
              *(_DWORD *)&v523[32] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[8], (uint64_t)v559);
              v523[40] = 0;
              *(_DWORD *)&v523[64] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[40], (uint64_t)&v559[32]);
              *(void *)&v523[72] = v230;
              *(void *)&v523[80] = v224;
              char v216 = 1;
              *(void *)&v523[88] = v225;
              *(void *)&v523[96] = v229;
              goto LABEL_719;
            }
          }
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v427 = *((void *)v9 + 3);
          if (v427)
          {
            if (v219)
            {
              (*(void (**)(uint64_t))(*(void *)v427 + 16))(v427);
              v428 = *(WTF::StringImpl **)v9;
              uint64_t v429 = *((void *)v9 + 1);
              uint64_t v430 = *((void *)v9 + 3);
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              if (v430)
              {
                if (v429) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v430 + 16))(v430, v428);
                }
              }
            }
          }
LABEL_717:
          char v216 = 0;
LABEL_718:
          v523[0] = 0;
LABEL_719:
          LOBYTE(v524) = v216;
          std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v559);
          if ((_BYTE)v524) {
            goto LABEL_720;
          }
LABEL_622:
          v406 = *(WTF::StringImpl **)v9;
          uint64_t v407 = *((void *)v9 + 1);
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v408 = *((void *)v9 + 3);
          if (!v408) {
            goto LABEL_759;
          }
          if (!v407) {
            goto LABEL_759;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v408 + 16))(v408, v406);
          if (!(_BYTE)v524) {
            goto LABEL_759;
          }
LABEL_720:
          v468 = &v523[8];
          WebKit::NetworkProcessProxy::increaseQuota((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], *(uint64_t *)&v523[72], *(uint64_t *)&v523[80], *(uint64_t *)&v523[88], *(uint64_t *)&v523[96]);
          if ((_BYTE)v524)
          {
            if (*(_DWORD *)&v523[64] != -1) {
              ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[64]])(v559, &v523[40]);
            }
            *(_DWORD *)&v523[64] = -1;
            uint64_t v469 = *(unsigned int *)&v523[32];
LABEL_741:
            if (v469 != -1)
            {
              ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[v469])(v559, v468);
              goto LABEL_743;
            }
          }
          goto LABEL_759;
        }
        unint64_t v464 = v219;
        v465 = 0;
      }
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v467 = *((void *)v9 + 3);
      if (v467 && v464) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v467 + 16))(v467, v465, v464);
      }
      goto LABEL_717;
    case 0x14D:
      v265 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v266
        || (a2 = (atomic_uchar *volatile *)v265, IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v580), !v580[8]))
      {
        int v269 = 0;
        int v270 = 0;
        v523[0] = 0;
        v523[32] = 0;
        goto LABEL_342;
      }
      IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v559);
      if (!v559[8])
      {
        int v269 = 0;
        int v270 = 0;
        v523[0] = 0;
        v523[32] = 0;
        goto LABEL_547;
      }
      unsigned __int16 v267 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)v9);
      if (v267 >= 0x100u)
      {
        if (!v580[8] || !v559[8]) {
          goto LABEL_796;
        }
        int v318 = 0;
        int v269 = v267;
        uint64_t v319 = *(void *)v580;
        *(void *)v580 = 0;
        *(void *)v523 = a2;
        *(void *)&v523[8] = v319;
        *(void *)&v523[16] = *(void *)v559;
        v523[24] = v267;
        int v270 = 1;
        v523[32] = 1;
LABEL_548:
        if (v580[8])
        {
          v374 = *(WTF::StringImpl **)v580;
          *(void *)v580 = 0;
          if (v374)
          {
            if (*(_DWORD *)v374 == 2) {
              WTF::StringImpl::destroy(v374, v20);
            }
            else {
              *(_DWORD *)v374 -= 2;
            }
          }
        }
        if (!v318)
        {
LABEL_554:
          if (!v270) {
            goto LABEL_759;
          }
          WebKit::NetworkProcessProxy::logDiagnosticMessage((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t)&v523[16], v269 != 0);
LABEL_556:
          if (v523[32])
          {
LABEL_557:
            v375 = *(WTF::StringImpl **)&v523[16];
            *(void *)&v523[16] = 0;
            if (v375)
            {
              if (*(_DWORD *)v375 == 2) {
                WTF::StringImpl::destroy(v375, v96);
              }
              else {
                *(_DWORD *)v375 -= 2;
              }
            }
LABEL_756:
            unsigned int v105 = *(WTF::StringImpl **)&v523[8];
            *(void *)&v523[8] = 0;
            if (!v105) {
              goto LABEL_759;
            }
LABEL_757:
            if (*(_DWORD *)v105 != 2)
            {
              *(_DWORD *)v105 -= 2;
              goto LABEL_759;
            }
LABEL_762:
            WTF::StringImpl::destroy(v105, v96);
            if (!this) {
              return;
            }
LABEL_760:
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
            return;
          }
          goto LABEL_759;
        }
LABEL_342:
        v303 = *(WTF::StringImpl **)v9;
        uint64_t v304 = *((void *)v9 + 1);
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v305 = *((void *)v9 + 3);
        if (v305 && v304) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v305 + 16))(v305, v303);
        }
        goto LABEL_554;
      }
      v523[0] = 0;
      v523[32] = 0;
      if (!v559[8]) {
        goto LABEL_546;
      }
      v268 = *(WTF::StringImpl **)v559;
      *(void *)v559 = 0;
      if (!v268) {
        goto LABEL_546;
      }
      if (*(_DWORD *)v268 == 2)
      {
        WTF::StringImpl::destroy(v268, v20);
LABEL_546:
        int v269 = 0;
        int v270 = 0;
      }
      else
      {
        int v269 = 0;
        int v270 = 0;
        *(_DWORD *)v268 -= 2;
      }
LABEL_547:
      int v318 = 1;
      goto LABEL_548;
    case 0x14E:
      uint64_t v167 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v168) {
        goto LABEL_673;
      }
      uint64_t v3 = (unsigned char *)v167;
      IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v580);
      if (!v580[8]) {
        goto LABEL_673;
      }
      IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v559);
      if (!v559[8])
      {
        int v173 = 0;
        int v174 = 0;
        v523[0] = 0;
        v523[32] = 0;
        goto LABEL_455;
      }
      unint64_t v169 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v170 = ((*((void *)v9 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v9;
      if (v169 < v170 || v169 - v170 <= 3)
      {
        unint64_t v442 = 0;
        v443 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v444 = *((void *)v9 + 3);
        if (v444)
        {
          if (v169)
          {
            (*(void (**)(uint64_t))(*(void *)v444 + 16))(v444);
            v443 = *(WTF::StringImpl **)v9;
            unint64_t v442 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v442 = 0;
            v443 = 0;
          }
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)((char *)v20 + v170);
        *((void *)v9 + 2) = v171 + 1;
        if (v20)
        {
          a2 = (atomic_uchar *volatile *)*v171;
          unsigned __int16 v172 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)v9);
          if (v172 > 0xFFu)
          {
            if (!v580[8] || !v559[8]) {
              goto LABEL_796;
            }
            int v173 = v172;
            uint64_t v320 = *(void *)v580;
            *(void *)v580 = 0;
            *(void *)v523 = v3;
            *(void *)&v523[8] = v320;
            uint64_t v321 = *(void *)v559;
            *(void *)v559 = 0;
            *(void *)&v523[16] = v321;
            *(_DWORD *)&v523[24] = a2;
            v523[28] = v172;
            int v174 = 1;
LABEL_384:
            v523[32] = v174;
            if (v559[8])
            {
              v322 = *(WTF::StringImpl **)v559;
              *(void *)v559 = 0;
              if (v322)
              {
                if (*(_DWORD *)v322 == 2) {
                  WTF::StringImpl::destroy(v322, v20);
                }
                else {
                  *(_DWORD *)v322 -= 2;
                }
              }
            }
LABEL_455:
            if (v580[8])
            {
              v343 = *(WTF::StringImpl **)v580;
              *(void *)v580 = 0;
              if (v343)
              {
                if (*(_DWORD *)v343 == 2) {
                  WTF::StringImpl::destroy(v343, v20);
                }
                else {
                  *(_DWORD *)v343 -= 2;
                }
              }
            }
            if (v174)
            {
              WebKit::NetworkProcessProxy::logDiagnosticMessageWithResult((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t)&v523[16], (uint64_t)a2, v173 != 0);
              goto LABEL_556;
            }
            goto LABEL_673;
          }
LABEL_159:
          int v173 = 0;
          int v174 = 0;
          v523[0] = 0;
          goto LABEL_384;
        }
        unint64_t v442 = v169;
        v443 = 0;
      }
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v445 = *((void *)v9 + 3);
      if (v445 && v442) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v445 + 16))(v445, v443);
      }
      goto LABEL_159;
    case 0x14F:
      uint64_t v180 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v181) {
        goto LABEL_673;
      }
      uint64_t v3 = (unsigned char *)v180;
      IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v580);
      if (!v580[8]) {
        goto LABEL_673;
      }
      IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v559);
      if (!v559[8])
      {
        int v189 = 0;
        int v190 = 0;
        v523[0] = 0;
        v523[40] = 0;
        goto LABEL_446;
      }
      unint64_t v182 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v183 = ((*((void *)v9 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v9;
      if (v182 < v183 || v182 - v183 <= 7)
      {
        unint64_t v446 = 0;
        v447 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v448 = *((void *)v9 + 3);
        if (v448)
        {
          if (v182)
          {
            (*(void (**)(uint64_t))(*(void *)v448 + 16))(v448);
            v447 = *(WTF::StringImpl **)v9;
            unint64_t v446 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v446 = 0;
            v447 = 0;
          }
        }
      }
      else
      {
        v184 = (uint64_t *)((char *)v20 + v183);
        *((void *)v9 + 2) = v184 + 1;
        if (v20)
        {
          unint64_t v185 = (((unint64_t)v184 + 11) & 0xFFFFFFFFFFFFFFFCLL) - (void)v20;
          if (v182 >= v185 && v182 - v185 > 3)
          {
            uint64_t v187 = *v184;
            a2 = (atomic_uchar *volatile *)*(unsigned int *)(((unint64_t)v184 + 11) & 0xFFFFFFFFFFFFFFFCLL);
            *((void *)v9 + 2) = (((unint64_t)v184 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            unsigned __int16 v188 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)v9);
            if (v188 > 0xFFu)
            {
              if (!v580[8] || !v559[8]) {
                goto LABEL_796;
              }
              int v189 = v188;
              uint64_t v323 = *(void *)v580;
              *(void *)v580 = 0;
              *(void *)v523 = v3;
              *(void *)&v523[8] = v323;
              uint64_t v324 = *(void *)v559;
              *(void *)v559 = 0;
              *(void *)&v523[16] = v324;
              *(void *)&v523[24] = v187;
              *(_DWORD *)&v523[32] = a2;
              v523[36] = v188;
              int v190 = 1;
LABEL_391:
              v523[40] = v190;
              if (v559[8])
              {
                v325 = *(WTF::StringImpl **)v559;
                *(void *)v559 = 0;
                if (v325)
                {
                  if (*(_DWORD *)v325 == 2) {
                    WTF::StringImpl::destroy(v325, v20);
                  }
                  else {
                    *(_DWORD *)v325 -= 2;
                  }
                }
              }
LABEL_446:
              if (v580[8])
              {
                v342 = *(WTF::StringImpl **)v580;
                *(void *)v580 = 0;
                if (v342)
                {
                  if (*(_DWORD *)v342 == 2) {
                    WTF::StringImpl::destroy(v342, v20);
                  }
                  else {
                    *(_DWORD *)v342 -= 2;
                  }
                }
              }
              if (!v190) {
                goto LABEL_673;
              }
              WebKit::NetworkProcessProxy::logDiagnosticMessageWithValue((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t)&v523[16], (uint64_t)a2, v189 != 0);
              if (v523[40]) {
                goto LABEL_557;
              }
LABEL_759:
              if (!this) {
                return;
              }
              goto LABEL_760;
            }
          }
          else
          {
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v450 = *((void *)v9 + 3);
            if (v450)
            {
              if (v182)
              {
                (*(void (**)(uint64_t))(*(void *)v450 + 16))(v450);
                uint64_t v20 = *(WTF::StringImpl **)v9;
                uint64_t v451 = *((void *)v9 + 1);
                uint64_t v452 = *((void *)v9 + 3);
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                if (v452)
                {
                  if (v451) {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v452 + 16))(v452, v20);
                  }
                }
              }
            }
          }
LABEL_175:
          int v189 = 0;
          int v190 = 0;
          v523[0] = 0;
          goto LABEL_391;
        }
        unint64_t v446 = v182;
        v447 = 0;
      }
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v449 = *((void *)v9 + 3);
      if (v449 && v446) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v449 + 16))(v449, v447, v446);
      }
      goto LABEL_175;
    case 0x150:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>(a3, v523);
      if (!v523[16]) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::logTestingEvent((WebKit *)this, *(uint64_t *)v523);
      if (!v523[16]) {
        goto LABEL_759;
      }
      goto LABEL_756;
    case 0x151:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, (uint64_t)v512);
      if (!(_BYTE)v513) {
        goto LABEL_673;
      }
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v9, (uint64_t)v580);
      if (!v580[32]) {
        goto LABEL_673;
      }
      IPC::Decoder::decode<WTF::URL>(v9, v559);
      if (!v559[40]) {
        goto LABEL_673;
      }
      if (!(_BYTE)v513 || !v580[32]) {
        goto LABEL_796;
      }
      *(_OWORD *)v523 = *(_OWORD *)v512;
      *(_OWORD *)&v523[16] = *(_OWORD *)v580;
      *(_OWORD *)&v523[32] = *(_OWORD *)&v580[16];
      v273 = *(WTF::StringImpl **)v559;
      *(void *)&v523[48] = *(void *)v559;
      *(_OWORD *)&v523[56] = *(_OWORD *)&v559[8];
      *(_OWORD *)&v523[72] = *(_OWORD *)&v559[24];
      v523[96] = 1;
      uint64_t v274 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!(_BYTE)v96) {
        goto LABEL_286;
      }
      *(void *)v559 = v274;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
      v275 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v275 = &unk_1EE9B8F90;
      v275[1] = *(void *)v559;
      uint64_t v276 = *(void *)&v559[8];
      *(void *)&v559[8] = 0;
      v275[2] = v276;
      *(void *)v580 = v275;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
      *(_OWORD *)v559 = *(_OWORD *)&v523[16];
      *(_OWORD *)&v559[16] = *(_OWORD *)&v523[32];
      WebKit::NetworkProcessProxy::navigateServiceWorkerClient((uint64_t)this, *(uint64_t *)v523, *(uint64_t *)&v523[8], (uint64_t)v559, (uint64_t)&v523[48], (uint64_t *)v580);
      uint64_t v277 = *(void *)v580;
      *(void *)v580 = 0;
      if (v277) {
        (*(void (**)(uint64_t))(*(void *)v277 + 8))(v277);
      }
      if (!v523[96]) {
        goto LABEL_759;
      }
      v273 = *(WTF::StringImpl **)&v523[48];
LABEL_286:
      *(void *)&v523[48] = 0;
      if (!v273) {
        goto LABEL_759;
      }
      if (*(_DWORD *)v273 == 2)
      {
        unsigned int v105 = v273;
        goto LABEL_762;
      }
      *(_DWORD *)v273 -= 2;
      if (this) {
        goto LABEL_760;
      }
      return;
    case 0x152:
      uint64_t v113 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!v114) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::negotiatedLegacyTLS((uint64_t)this, v113);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x153:
      uint64_t v106 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v107) {
        goto LABEL_673;
      }
      uint64_t v108 = v106;
      IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v559);
      if (!v559[8]) {
        goto LABEL_673;
      }
      unint64_t v109 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v110 = *((void *)v9 + 2) - *(void *)v9;
      if (v109 <= v110)
      {
        unint64_t v433 = 0;
        v434 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v435 = *((void *)v9 + 3);
        if (v435)
        {
          if (v109)
          {
            (*(void (**)(uint64_t))(*(void *)v435 + 16))(v435);
            v434 = *(WTF::StringImpl **)v9;
            unint64_t v433 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v433 = 0;
            v434 = 0;
          }
        }
      }
      else
      {
        long long v111 = (unsigned __int8 *)v20 + v110;
        *((void *)v9 + 2) = v111 + 1;
        if (v20)
        {
          unsigned int v112 = *v111;
          if (v112 < 3)
          {
            *(void *)v523 = v108;
            *(void *)&v523[8] = *(void *)v559;
            v523[16] = v112;
            v523[24] = 1;
            WebKit::NetworkProcessProxy::notifyBackgroundFetchChange((WebKit *)this, v108);
            if (v523[24]) {
              goto LABEL_756;
            }
            goto LABEL_759;
          }
LABEL_667:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v437 = *((void *)v9 + 3);
          if (v437 && v109) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v437 + 16))(v437, v20);
          }
          goto LABEL_668;
        }
        unint64_t v433 = v109;
        v434 = 0;
      }
      unint64_t v109 = 0;
      uint64_t v20 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v436 = *((void *)v9 + 3);
      if (v436)
      {
        if (v433)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v436 + 16))(v436, v434, v433);
          uint64_t v20 = *(WTF::StringImpl **)v9;
          unint64_t v109 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v109 = 0;
          uint64_t v20 = 0;
        }
      }
      goto LABEL_667;
    case 0x154:
      uint64_t v293 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v294)
      {
        uint64_t v3 = (unsigned char *)v293;
        IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v580);
        if (v580[8])
        {
          IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v9, v559);
          if (v559[32])
          {
            if (!v580[8]) {
              goto LABEL_796;
            }
            uint64_t v295 = *(void *)v580;
            *(void *)v580 = 0;
            *(void *)v523 = v3;
            *(void *)&v523[8] = v295;
            v523[16] = 0;
            *(_DWORD *)&v523[40] = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[16], (uint64_t)v559);
            v523[48] = 1;
            if (v559[32] && *(_DWORD *)&v559[24] != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v559[24]])(v512, v559);
            }
          }
          else
          {
            v523[0] = 0;
            v523[48] = 0;
          }
          if (v580[8])
          {
            v297 = *(WTF::StringImpl **)v580;
            *(void *)v580 = 0;
            if (v297)
            {
              if (*(_DWORD *)v297 == 2) {
                WTF::StringImpl::destroy(v297, v20);
              }
              else {
                *(_DWORD *)v297 -= 2;
              }
            }
          }
        }
        else
        {
          v523[0] = 0;
          v523[48] = 0;
        }
        if (v523[48]) {
          goto LABEL_403;
        }
      }
      else
      {
        v523[0] = 0;
        v523[48] = 0;
      }
      v421 = *(WTF::StringImpl **)v9;
      uint64_t v422 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v423 = *((void *)v9 + 3);
      if (!v423) {
        goto LABEL_759;
      }
      if (!v422) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v423 + 16))(v423, v421);
      if (!v523[48]) {
        goto LABEL_759;
      }
LABEL_403:
      uint64_t v327 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if ((_BYTE)v96)
      {
        *(void *)v559 = v327;
        uint64_t v9 = (IPC::Decoder *)&v559[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
        v328 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v328 = &unk_1EE9B8F68;
        v328[1] = *(void *)v559;
        uint64_t v329 = *(void *)&v559[8];
        *(void *)&v559[8] = 0;
        v328[2] = v329;
        *(void *)v580 = v328;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
        if (!v523[48]) {
          goto LABEL_796;
        }
        WebKit::NetworkProcessProxy::openWindowFromServiceWorker((WebKit *)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t)&v523[16], (uint64_t *)v580);
        uint64_t v330 = *(void *)v580;
        *(void *)v580 = 0;
        if (v330) {
          (*(void (**)(uint64_t))(*(void *)v330 + 8))(v330);
        }
      }
      if (!v523[48]) {
        goto LABEL_759;
      }
      if (*(_DWORD *)&v523[40] != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[40]])(v559, &v523[16]);
      }
      *(_DWORD *)&v523[40] = -1;
      goto LABEL_540;
    case 0x155:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v523, (uint64_t *)a3);
      if (!v523[24]) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::registerRemoteWorkerClientProcess((uint64_t)this, v523[0], *(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x156:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v559);
      if (BYTE8(v561)
        && (uint64_t v278 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9),
            v279))
      {
        uint64_t v3 = (unsigned char *)v278;
        IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v9, (uint64_t)v580);
        char v280 = v580[24];
        if (v580[24])
        {
          if (!BYTE8(v561)) {
            goto LABEL_796;
          }
          v523[0] = 0;
          *(_DWORD *)&v523[24] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v523, (uint64_t)v559);
          v523[32] = 0;
          *(_DWORD *)&v523[56] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[32], (uint64_t)&v559[32]);
          *(_OWORD *)&v523[72] = *(_OWORD *)v580;
          *(void *)&v523[64] = v3;
          *(void *)&v523[88] = *(void *)&v580[16];
          char v280 = 1;
        }
        else
        {
          v523[0] = 0;
        }
        v523[96] = v280;
      }
      else
      {
        v523[0] = 0;
        v523[96] = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v559);
      if (!v523[96])
      {
        v424 = *(WTF::StringImpl **)v9;
        uint64_t v425 = *((void *)v9 + 1);
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v426 = *((void *)v9 + 3);
        if (!v426) {
          goto LABEL_759;
        }
        if (!v425) {
          goto LABEL_759;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v426 + 16))(v426, v424);
        if (!v523[96]) {
          goto LABEL_759;
        }
      }
      uint64_t v353 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!v354) {
        goto LABEL_480;
      }
      *(void *)v559 = v353;
      uint64_t v9 = (IPC::Decoder *)&v559[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
      v355 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v355 = &unk_1EE9B8FE0;
      v355[1] = *(void *)v559;
      uint64_t v356 = *(void *)&v559[8];
      *(void *)&v559[8] = 0;
      v355[2] = v356;
      *(void *)v580 = v355;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
      if (!v523[96]) {
        goto LABEL_796;
      }
      *(_OWORD *)v559 = *(_OWORD *)&v523[72];
      *(void *)&v559[16] = *(void *)&v523[88];
      WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin((uint64_t)this, (uint64_t)v523, *(uint64_t *)&v523[64], (uint64_t)v559, (uint64_t *)v580);
      uint64_t v357 = *(void *)v580;
      *(void *)v580 = 0;
      if (v357) {
        (*(void (**)(uint64_t))(*(void *)v357 + 8))(v357);
      }
LABEL_480:
      if (!v523[96]) {
        goto LABEL_759;
      }
      if (*(_DWORD *)&v523[56] != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[56]])(v559, &v523[32]);
      }
      *(_DWORD *)&v523[56] = -1;
      if (*(_DWORD *)&v523[24] == -1) {
        goto LABEL_759;
      }
      ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[24]])(v559, v523);
      goto LABEL_743;
    case 0x157:
      unsigned __int16 v281 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
      if (v281 < 0x100u) {
        goto LABEL_673;
      }
      char v282 = v281;
      uint64_t v283 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v9);
      if (!v284) {
        goto LABEL_673;
      }
      WebKit::NetworkProcessProxy::remoteWorkerContextConnectionNoLongerNeeded((uint64_t)this, v282, v283);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x158:
      v238 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v239)
      {
        v523[0] = 0;
        LOBYTE(v524) = 0;
        goto LABEL_632;
      }
      a2 = (atomic_uchar *volatile *)v238;
      IPC::Decoder::decode<WTF::URL>(v9, v559);
      if (!v559[40])
      {
        v523[0] = 0;
        LOBYTE(v524) = 0;
        goto LABEL_396;
      }
      IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v9, v580);
      if (!v580[32])
      {
        v523[0] = 0;
        LOBYTE(v524) = 0;
        goto LABEL_320;
      }
      int v240 = IPC::Decoder::decode<JSC::MessageSource>((uint64_t *)v9);
      if ((unsigned __int16)v240 <= 0xFFu
        || (LODWORD(v3) = v240, unsigned __int16 v241 = IPC::Decoder::decode<JSC::MessageLevel>((uint64_t *)v9), v241 <= 0xFFu)
        || (char v344 = v241, IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v512), !LOBYTE(v512[1])))
      {
        v523[0] = 0;
        LOBYTE(v524) = 0;
        goto LABEL_230;
      }
      unint64_t v345 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v346 = ((*((void *)v9 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v9;
      if (v345 < v346 || v345 - v346 <= 7)
      {
        unint64_t v505 = 0;
        v506 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v507 = *((void *)v9 + 3);
        if (v507)
        {
          if (v345)
          {
            (*(void (**)(uint64_t))(*(void *)v507 + 16))(v507);
            v506 = *(WTF::StringImpl **)v9;
            unint64_t v505 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v505 = 0;
            v506 = 0;
          }
        }
      }
      else
      {
        v347 = (uint64_t *)((char *)v20 + v346);
        *((void *)v9 + 2) = v347 + 1;
        if (v20)
        {
          if (!v559[40] || !v580[32]) {
            goto LABEL_796;
          }
          uint64_t v348 = *v347;
          uint64_t v349 = *(void *)v559;
          *(void *)v559 = 0;
          *(void *)v523 = a2;
          *(void *)&v523[8] = v349;
          *(_OWORD *)&v523[16] = *(_OWORD *)&v559[8];
          *(_OWORD *)&v523[32] = *(_OWORD *)&v559[24];
          *(_DWORD *)&v559[8] &= ~1u;
          v523[48] = 0;
          *(_DWORD *)&v523[72] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[48], (uint64_t)v580);
          v523[80] = (_BYTE)v3;
          v523[81] = v344;
          v350 = v512[0];
          v512[0] = 0;
          *(void *)&v523[88] = v350;
          *(void *)&v523[96] = v348;
          char v351 = 1;
LABEL_469:
          LOBYTE(v524) = v351;
          if (LOBYTE(v512[1]))
          {
            v352 = v512[0];
            v512[0] = 0;
            if (v352)
            {
              if (*(_DWORD *)v352 == 2) {
                WTF::StringImpl::destroy(v352, v20);
              }
              else {
                *(_DWORD *)v352 -= 2;
              }
            }
          }
LABEL_230:
          if (v580[32] && *(_DWORD *)&v580[24] != -1) {
            ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v580[24]])(v512, v580);
          }
LABEL_320:
          if (v559[40])
          {
            v296 = *(WTF::StringImpl **)v559;
            *(void *)v559 = 0;
            if (v296)
            {
              if (*(_DWORD *)v296 == 2) {
                WTF::StringImpl::destroy(v296, v20);
              }
              else {
                *(_DWORD *)v296 -= 2;
              }
            }
          }
LABEL_396:
          if ((_BYTE)v524) {
            goto LABEL_397;
          }
LABEL_632:
          v412 = *(WTF::StringImpl **)v9;
          uint64_t v413 = *((void *)v9 + 1);
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v414 = *((void *)v9 + 3);
          if (!v414) {
            goto LABEL_759;
          }
          if (!v413) {
            goto LABEL_759;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v414 + 16))(v414, v412);
          if (!(_BYTE)v524) {
            goto LABEL_759;
          }
LABEL_397:
          WebKit::NetworkProcessProxy::reportConsoleMessage((WebKit *)this, *(uint64_t *)v523);
          if (!(_BYTE)v524) {
            goto LABEL_759;
          }
          v326 = *(WTF::StringImpl **)&v523[88];
          *(void *)&v523[88] = 0;
          if (v326)
          {
            if (*(_DWORD *)v326 == 2) {
              WTF::StringImpl::destroy(v326, v96);
            }
            else {
              *(_DWORD *)v326 -= 2;
            }
          }
          if (*(_DWORD *)&v523[72] != -1) {
            ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[72]])(v559, &v523[48]);
          }
          *(_DWORD *)&v523[72] = -1;
LABEL_540:
          unsigned int v105 = *(WTF::StringImpl **)&v523[8];
          *(void *)&v523[8] = 0;
          if (!v105) {
            goto LABEL_759;
          }
          goto LABEL_541;
        }
        unint64_t v505 = v345;
        v506 = 0;
      }
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v508 = *((void *)v9 + 3);
      if (v508 && v505) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v508 + 16))(v508, v506);
      }
      char v351 = 0;
      v523[0] = 0;
      goto LABEL_469;
    case 0x159:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL>>(v523, a3);
      if (!v523[48]) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::reportNetworkIssue((uint64_t)this, *(uint64_t *)v523, (const WTF::URL *)&v523[8]);
      if (!v523[48]) {
        goto LABEL_759;
      }
      goto LABEL_540;
    case 0x15A:
      uint64_t v242 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v243)
      {
        uint64_t v3 = (unsigned char *)v242;
        IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)v9, v559);
        char v244 = BYTE8(v561);
        if (BYTE8(v561))
        {
          *(void *)v523 = v3;
          uint64_t v3 = v523;
          v523[8] = 0;
          *(_DWORD *)&v523[32] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[8], (uint64_t)v559);
          v523[40] = 0;
          *(_DWORD *)&v523[64] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v523[40], (uint64_t)&v559[32]);
          char v244 = 1;
        }
        else
        {
          v523[0] = 0;
        }
        v523[72] = v244;
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v559);
        if (v523[72]) {
          goto LABEL_367;
        }
      }
      else
      {
        v523[0] = 0;
        v523[72] = 0;
      }
      v415 = *(WTF::StringImpl **)v9;
      uint64_t v416 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v417 = *((void *)v9 + 3);
      if (!v417) {
        goto LABEL_759;
      }
      if (!v416) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v417 + 16))(v417, v415);
      if (!v523[72]) {
        goto LABEL_759;
      }
LABEL_367:
      uint64_t v313 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (v314)
      {
        *(void *)v559 = v313;
        uint64_t v9 = (IPC::Decoder *)&v559[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
        v315 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v315 = &unk_1EE9B8E28;
        v315[1] = *(void *)v559;
        uint64_t v316 = *(void *)&v559[8];
        *(void *)&v559[8] = 0;
        v315[2] = v316;
        *(void *)v580 = v315;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
        if (!v523[72]) {
          goto LABEL_796;
        }
        WebKit::NetworkProcessProxy::requestBackgroundFetchPermission((uint64_t)this, *(uint64_t *)v523, (uint64_t)&v523[8], (uint64_t *)v580);
        uint64_t v317 = *(void *)v580;
        *(void *)v580 = 0;
        if (v317) {
          (*(void (**)(uint64_t))(*(void *)v317 + 8))(v317);
        }
      }
      if (!v523[72]) {
        goto LABEL_759;
      }
      if (*(_DWORD *)&v523[64] != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[64]])(v559, &v523[40]);
      }
      *(_DWORD *)&v523[64] = -1;
      if (*(_DWORD *)&v523[32] == -1) {
        goto LABEL_759;
      }
LABEL_340:
      ((void (*)(unsigned char *, unsigned char *))off_1EE9B8D90[*(unsigned int *)&v523[32]])(v559, &v523[8]);
LABEL_743:
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x15B:
      uint64_t v69 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v70) {
        goto LABEL_673;
      }
      uint64_t v3 = (unsigned char *)v69;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v9, (uint64_t)v580);
      if (!v580[16]) {
        goto LABEL_673;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)&v510);
      if (!v511) {
        goto LABEL_673;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v512);
      if (!LOBYTE(v512[1]))
      {
        LODWORD(v3) = 0;
        v523[0] = 0;
        v523[80] = 0;
        goto LABEL_776;
      }
      unint64_t v71 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v72 = *((void *)v9 + 2) - *(void *)v9;
      if (v71 <= v72)
      {
        unint64_t v490 = 0;
        v491 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v492 = *((void *)v9 + 3);
        if (v492)
        {
          if (v71)
          {
            (*(void (**)(uint64_t))(*(void *)v492 + 16))(v492);
            v491 = *(WTF::StringImpl **)v9;
            unint64_t v490 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v490 = 0;
            v491 = 0;
          }
        }
      }
      else
      {
        char v73 = (char *)v20 + v72;
        *((void *)v9 + 2) = v73 + 1;
        if (v20)
        {
          unsigned int v74 = *v73;
          if (v74 < 2)
          {
            if (!*v73)
            {
              v559[0] = 0;
              v559[32] = 0;
              v559[40] = 1;
LABEL_565:
              if (!v580[16] || !v511 || !LOBYTE(v512[1])) {
                goto LABEL_796;
              }
              *(_OWORD *)&v523[8] = *(_OWORD *)v580;
              v377 = v510;
              v510 = 0;
              *(void *)v523 = v3;
              v378 = v512[0];
              v512[0] = 0;
              *(void *)&v523[24] = v377;
              *(void *)&v523[32] = v378;
              v523[40] = 0;
              v523[72] = 0;
              if (v74)
              {
                uint64_t v379 = *(void *)v559;
                memset(v559, 0, 32);
                *(void *)&v523[40] = v379;
                *(void *)&v523[48] = v6;
                *(void *)&v523[56] = v4;
                *(_DWORD *)&v523[64] = v509;
                *(_DWORD *)&v523[68] = v5;
                v523[72] = 1;
                v523[80] = 1;
                WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v559[16], v20);
                if (*(void *)&v559[8]) {
                  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(uint64_t *)&v559[8], v20);
                }
                v380 = *(WTF::StringImpl **)v559;
                *(void *)v559 = 0;
                if (v380)
                {
                  if (*(_DWORD *)v380 == 2) {
                    WTF::StringImpl::destroy(v380, v20);
                  }
                  else {
                    *(_DWORD *)v380 -= 2;
                  }
                }
                LODWORD(v3) = 1;
              }
              else
              {
                LODWORD(v3) = 1;
                v523[80] = 1;
              }
LABEL_775:
              if (LOBYTE(v512[1]))
              {
                v504 = v512[0];
                v512[0] = 0;
                if (v504)
                {
                  if (*(_DWORD *)v504 == 2) {
                    WTF::StringImpl::destroy(v504, v20);
                  }
                  else {
                    *(_DWORD *)v504 -= 2;
                  }
                }
              }
LABEL_776:
              if (v511) {
                goto LABEL_797;
              }
              while (v3)
              {
                uint64_t v497 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
                if (!(_BYTE)v96) {
                  goto LABEL_783;
                }
                *(void *)v559 = v497;
                uint64_t v9 = (IPC::Decoder *)&v559[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
                v498 = (void *)WTF::fastMalloc((WTF *)0x18);
                void *v498 = &unk_1EE9B8DB0;
                v498[1] = *(void *)v559;
                uint64_t v499 = *(void *)&v559[8];
                *(void *)&v559[8] = 0;
                v498[2] = v499;
                *(void *)v580 = v498;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
                if (v523[80])
                {
                  WebKit::NetworkProcessProxy::requestStorageAccessConfirm((uint64_t)this, *(uint64_t *)v523, *(uint64_t *)&v523[8], *(uint64_t *)&v523[16], (uint64_t)&v523[24], (uint64_t)&v523[32], (uint64_t)&v523[40], (uint64_t *)v580);
                  uint64_t v500 = *(void *)v580;
                  *(void *)v580 = 0;
                  if (v500) {
                    (*(void (**)(uint64_t))(*(void *)v500 + 8))(v500);
                  }
                  if (!v523[80]) {
                    goto LABEL_759;
                  }
LABEL_783:
                  if (v523[72])
                  {
                    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v523[56], v96);
                    if (*(void *)&v523[48]) {
                      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(uint64_t *)&v523[48], v96);
                    }
                    v501 = *(WTF::StringImpl **)&v523[40];
                    *(void *)&v523[40] = 0;
                    if (v501)
                    {
                      if (*(_DWORD *)v501 == 2) {
                        WTF::StringImpl::destroy(v501, v96);
                      }
                      else {
                        *(_DWORD *)v501 -= 2;
                      }
                    }
                  }
                  v502 = *(WTF::StringImpl **)&v523[32];
                  *(void *)&v523[32] = 0;
                  if (v502)
                  {
                    if (*(_DWORD *)v502 == 2) {
                      WTF::StringImpl::destroy(v502, v96);
                    }
                    else {
                      *(_DWORD *)v502 -= 2;
                    }
                  }
                  unsigned int v105 = *(WTF::StringImpl **)&v523[24];
                  *(void *)&v523[24] = 0;
                  if (v105) {
                    goto LABEL_757;
                  }
                  goto LABEL_759;
                }
LABEL_796:
                __break(1u);
LABEL_797:
                v503 = v510;
                v510 = 0;
                if (v503)
                {
                  if (*(_DWORD *)v503 == 2) {
                    WTF::StringImpl::destroy(v503, v20);
                  }
                  else {
                    *(_DWORD *)v503 -= 2;
                  }
                }
              }
              goto LABEL_673;
            }
            IPC::Decoder::decode<WebCore::OrganizationStorageAccessPromptQuirk>(v9, (uint64_t)v523);
            if (v523[32])
            {
              uint64_t v76 = *(void *)v523;
              uint64_t v6 = *(void *)&v523[8];
              memset(v523, 0, 32);
              *(void *)v559 = v76;
              *(void *)&v559[8] = v6;
              uint64_t v4 = *(void *)&v523[16];
              *(_OWORD *)&v559[16] = *(_OWORD *)&v523[16];
              int v5 = *(_DWORD *)&v523[28];
              int v509 = *(_DWORD *)&v523[24];
              v559[32] = 1;
              v559[40] = 1;
              WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v523[16], v75);
              if (*(void *)&v523[8]) {
                WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(uint64_t *)&v523[8], v20);
              }
              unint64_t v77 = *(WTF::StringImpl **)v523;
              *(void *)v523 = 0;
              if (v77)
              {
                if (*(_DWORD *)v77 == 2) {
                  WTF::StringImpl::destroy(v77, v20);
                }
                else {
                  *(_DWORD *)v77 -= 2;
                }
              }
              goto LABEL_565;
            }
LABEL_773:
            uint64_t v20 = *(WTF::StringImpl **)v9;
            uint64_t v495 = *((void *)v9 + 1);
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v496 = *((void *)v9 + 3);
            if (v496 && v495) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v496 + 16))(v496, v20);
            }
            LODWORD(v3) = 0;
            v523[0] = 0;
            v523[80] = 0;
            goto LABEL_775;
          }
LABEL_772:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v494 = *((void *)v9 + 3);
          if (v494 && v71) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v494 + 16))(v494, v20);
          }
          goto LABEL_773;
        }
        unint64_t v490 = v71;
        v491 = 0;
      }
      unint64_t v71 = 0;
      uint64_t v20 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v493 = *((void *)v9 + 3);
      if (v493)
      {
        if (v490)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v493 + 16))(v493, v491, v490);
          uint64_t v20 = *(WTF::StringImpl **)v9;
          unint64_t v71 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v71 = 0;
          uint64_t v20 = 0;
        }
      }
      goto LABEL_772;
    case 0x15C:
      char v49 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v50)
      {
        a2 = (atomic_uchar *volatile *)v49;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>((uint64_t *)v9, (uint64_t)v580);
        if ((_BYTE)v586)
        {
          IPC::Decoder::decode<WebCore::ResourceResponse>(v9, v559);
          if (v577)
          {
            IPC::Decoder::decode<WebCore::ResourceError>(v9, (uint64_t)v512);
            char v53 = v518;
            if ((_BYTE)v518)
            {
              if (!(_BYTE)v586 || !v577) {
                goto LABEL_796;
              }
              *(void *)v523 = a2;
              *(_OWORD *)&v523[8] = *(_OWORD *)v580;
              *(_OWORD *)&v523[24] = *(_OWORD *)&v580[16];
              *(_OWORD *)&v523[40] = *(_OWORD *)&v580[32];
              v523[56] = v581;
              uint64_t v54 = *((void *)&v581 + 1);
              *((void *)&v581 + 1) = 0;
              *(_OWORD *)&v523[72] = v582;
              *(_OWORD *)&v523[88] = *(_OWORD *)v583;
              LODWORD(v582) = v582 & 0xFFFFFFFE;
              char v55 = *(WTF::StringImpl **)&v583[16];
              *(void *)&v583[16] = 0;
              *(void *)&v523[64] = v54;
              v524 = v55;
              uint64_t v525 = v584;
              LOWORD(v526) = v585;
              std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v527, (uint64_t)v559);
              long long v56 = *(_OWORD *)v512;
              v512[0] = 0;
              v512[1] = 0;
              *(_OWORD *)v543 = v56;
              *(_OWORD *)&v543[16] = v513;
              *(_OWORD *)&v543[32] = v514;
              LODWORD(v513) = v513 & 0xFFFFFFFE;
              *(void *)&v543[48] = v515;
              *(_DWORD *)&v543[56] = v516;
              *(_WORD *)&v543[60] = WORD2(v516);
              v544[0] = (CFTypeRef)v517;
              LOBYTE(v544[1]) = BYTE8(v517);
              char v53 = 1;
              uint64_t v515 = 0;
              *(void *)&long long v517 = 0;
            }
            else
            {
              v523[0] = 0;
            }
            LOBYTE(v545) = v53;
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v512, v20);
          }
          else
          {
            v523[0] = 0;
            LOBYTE(v545) = 0;
          }
          std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v559, v52);
        }
        else
        {
          v523[0] = 0;
          LOBYTE(v545) = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v580, v51);
        if ((_BYTE)v545)
        {
LABEL_499:
          WebKit::NetworkProcessProxy::resourceLoadDidCompleteWithError((uint64_t)this, *(uint64_t *)v523, (const WebKit::ResourceLoadInfo *)&v523[8], (uint64_t)&v527, (uint64_t)v543);
          if (!(_BYTE)v545) {
            goto LABEL_759;
          }
          CFTypeRef v361 = v544[0];
          v544[0] = 0;
          if (v361) {
            CFRelease(v361);
          }
          v362 = *(WTF::StringImpl **)&v543[48];
          *(void *)&v543[48] = 0;
          if (v362)
          {
            if (*(_DWORD *)v362 == 2) {
              WTF::StringImpl::destroy(v362, v331);
            }
            else {
              *(_DWORD *)v362 -= 2;
            }
          }
          v363 = *(WTF::StringImpl **)&v543[8];
          *(void *)&v543[8] = 0;
          if (v363)
          {
            if (*(_DWORD *)v363 == 2) {
              WTF::StringImpl::destroy(v363, v331);
            }
            else {
              *(_DWORD *)v363 -= 2;
            }
          }
          v364 = *(WTF::StringImpl **)v543;
          *(void *)v543 = 0;
          if (v364)
          {
            if (*(_DWORD *)v364 == 2) {
              WTF::StringImpl::destroy(v364, v331);
            }
            else {
              *(_DWORD *)v364 -= 2;
            }
          }
LABEL_514:
          CFTypeRef v365 = v542;
          CFTypeRef v542 = 0;
          if (v365) {
            CFRelease(v365);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v527, v331);
          v366 = v524;
          v524 = 0;
          if (v366)
          {
            if (*(_DWORD *)v366 == 2) {
              WTF::StringImpl::destroy(v366, v96);
            }
            else {
              *(_DWORD *)v366 -= 2;
            }
          }
          unsigned int v105 = *(WTF::StringImpl **)&v523[64];
          *(void *)&v523[64] = 0;
          if (!v105) {
            goto LABEL_759;
          }
LABEL_541:
          if (*(_DWORD *)v105 != 2)
          {
            *(_DWORD *)v105 -= 2;
            if (!this) {
              return;
            }
            goto LABEL_760;
          }
          goto LABEL_762;
        }
      }
      else
      {
        v523[0] = 0;
        LOBYTE(v545) = 0;
      }
      v397 = *(WTF::StringImpl **)v9;
      uint64_t v398 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v399 = *((void *)v9 + 3);
      if (!v399) {
        goto LABEL_759;
      }
      if (!v398) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v399 + 16))(v399, v397);
      if (!(_BYTE)v545) {
        goto LABEL_759;
      }
      goto LABEL_499;
    case 0x15D:
      unsigned __int8 v26 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v27)
      {
        a2 = (atomic_uchar *volatile *)v26;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>((uint64_t *)v9, (uint64_t)v512);
        if (v522)
        {
          IPC::Decoder::decode<WebCore::ResourceResponse>(v9, v559);
          if (v577)
          {
            IPC::Decoder::decode<WebCore::ResourceRequest>(v9, (uint64_t)v580);
            char v30 = v596;
            if (v596)
            {
              if (!v522 || !v577) {
                goto LABEL_796;
              }
              *(void *)v523 = a2;
              *(_OWORD *)&v523[8] = *(_OWORD *)v512;
              *(_OWORD *)&v523[24] = v513;
              *(_OWORD *)&v523[40] = v514;
              v523[56] = v515;
              uint64_t v31 = v516;
              uint64_t v516 = 0;
              *(_OWORD *)&v523[72] = v517;
              *(_OWORD *)&v523[88] = v518;
              LODWORD(v517) = v517 & 0xFFFFFFFE;
              uint64_t v32 = v519;
              v519 = 0;
              *(void *)&v523[64] = v31;
              v524 = v32;
              uint64_t v525 = v520;
              LOWORD(v526) = v521;
              std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v527, (uint64_t)v559);
              long long v33 = *(_OWORD *)&v580[8];
              *(_DWORD *)&v580[8] &= ~1u;
              uint64_t v34 = *(void *)v580;
              uint64_t v35 = *(void *)&v580[40];
              *(void *)v580 = 0;
              *(_OWORD *)&v543[8] = v33;
              *(_OWORD *)&v543[24] = *(_OWORD *)&v580[24];
              *(void *)&v580[40] = 0;
              *(void *)v543 = v34;
              *(void *)&v543[40] = v35;
              *(_OWORD *)&v543[48] = v581;
              *(_OWORD *)v544 = v582;
              LODWORD(v581) = v581 & 0xFFFFFFFE;
              long long v36 = *(_OWORD *)&v583[8];
              *(_OWORD *)&v583[8] = 0u;
              long long v546 = v36;
              uint64_t v37 = v584;
              uint64_t v584 = 0;
              uint64_t v545 = *(void *)v583;
              uint64_t v547 = v37;
              uint64_t v38 = v585;
              uint64_t v585 = 0;
              uint64_t v548 = v38;
              *(void *)&long long v36 = v586;
              uint64_t v586 = 0;
              uint64_t v549 = v36;
              uint64_t v39 = v587;
              uint64_t v587 = 0;
              uint64_t v550 = v39;
              *(void *)&long long v36 = v588;
              uint64_t v588 = 0;
              uint64_t v551 = v36;
              char v553 = v590;
              int v552 = v589;
              long long v40 = v591;
              long long v591 = 0u;
              *(_OWORD *)v554 = v40;
              *(void *)&v554[16] = v592;
              char v556 = v594;
              uint64_t v555 = v593;
              char v41 = v595;
              uint64_t v592 = 0;
              v595 = 0;
              char v30 = 1;
              CFTypeRef v557 = v41;
            }
            else
            {
              v523[0] = 0;
            }
            char v558 = v30;
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v580);
          }
          else
          {
            v523[0] = 0;
            char v558 = 0;
          }
          std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v559, v29);
        }
        else
        {
          v523[0] = 0;
          char v558 = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v512, v28);
        if (v558)
        {
LABEL_489:
          WebKit::NetworkProcessProxy::resourceLoadDidPerformHTTPRedirection((uint64_t)this, *(uint64_t *)v523, (const WebKit::ResourceLoadInfo *)&v523[8], (uint64_t)&v527, (uint64_t)v543);
          if (!v558) {
            goto LABEL_759;
          }
          CFTypeRef v358 = v557;
          CFTypeRef v557 = 0;
          if (v358) {
            CFRelease(v358);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v543);
          CFTypeRef v360 = v542;
          CFTypeRef v542 = 0;
          if (v360) {
            CFRelease(v360);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v527, v359);
          goto LABEL_707;
        }
      }
      else
      {
        v523[0] = 0;
        char v558 = 0;
      }
      v391 = *(WTF::StringImpl **)v9;
      uint64_t v392 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v393 = *((void *)v9 + 3);
      if (!v393) {
        goto LABEL_759;
      }
      if (!v392) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v393 + 16))(v393, v391);
      if (!v558) {
        goto LABEL_759;
      }
      goto LABEL_489;
    case 0x15E:
      uint64_t v42 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v43)
      {
        a2 = (atomic_uchar *volatile *)v42;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>((uint64_t *)v9, (uint64_t)v580);
        if ((_BYTE)v586)
        {
          IPC::Decoder::decode<WebCore::AuthenticationChallenge>((uint64_t)v9, (uint64_t)v559);
          char v45 = v579;
          if (v579)
          {
            if (!(_BYTE)v586) {
              goto LABEL_796;
            }
            *(void *)v523 = a2;
            *(_OWORD *)&v523[8] = *(_OWORD *)v580;
            *(_OWORD *)&v523[24] = *(_OWORD *)&v580[16];
            *(_OWORD *)&v523[40] = *(_OWORD *)&v580[32];
            v523[56] = v581;
            uint64_t v46 = *((void *)&v581 + 1);
            *((void *)&v581 + 1) = 0;
            *(_OWORD *)&v523[72] = v582;
            *(_OWORD *)&v523[88] = *(_OWORD *)v583;
            LODWORD(v582) = v582 & 0xFFFFFFFE;
            uint64_t v47 = *(WTF::StringImpl **)&v583[16];
            *(void *)&v583[16] = 0;
            *(void *)&v523[64] = v46;
            v524 = v47;
            uint64_t v525 = v584;
            LOWORD(v526) = v585;
            WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)&v527, (uint64_t)v559);
            long long v48 = v578;
            long long v578 = 0uLL;
            *(_OWORD *)&v554[8] = v48;
            char v45 = 1;
          }
          else
          {
            v523[0] = 0;
          }
          LOBYTE(v555) = v45;
          std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v559, v20);
        }
        else
        {
          v523[0] = 0;
          LOBYTE(v555) = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v580, v44);
        if ((_BYTE)v555) {
          goto LABEL_420;
        }
      }
      else
      {
        v523[0] = 0;
        LOBYTE(v555) = 0;
      }
      v394 = *(WTF::StringImpl **)v9;
      uint64_t v395 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v396 = *((void *)v9 + 3);
      if (!v396) {
        goto LABEL_759;
      }
      if (!v395) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v396 + 16))(v396, v394);
      if (!(_BYTE)v555) {
        goto LABEL_759;
      }
LABEL_420:
      WebKit::NetworkProcessProxy::resourceLoadDidReceiveChallenge((uint64_t)this, *(uint64_t *)v523, (const WebKit::ResourceLoadInfo *)&v523[8], &v527);
      if (!(_BYTE)v555) {
        goto LABEL_759;
      }
      v333 = *(const void **)&v554[16];
      *(void *)&v554[16] = 0;
      if (v333) {
        CFRelease(v333);
      }
      v334 = *(const void **)&v554[8];
      *(void *)&v554[8] = 0;
      if (v334) {
        CFRelease(v334);
      }
      WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v527, v332);
      goto LABEL_707;
    case 0x15F:
      BOOL v17 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v18)
      {
        a2 = (atomic_uchar *volatile *)v17;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>((uint64_t *)v9, (uint64_t)v580);
        if ((_BYTE)v586)
        {
          IPC::Decoder::decode<WebCore::ResourceResponse>(v9, v559);
          char v21 = v577;
          if (v577)
          {
            if (!(_BYTE)v586) {
              goto LABEL_796;
            }
            *(void *)v523 = a2;
            *(_OWORD *)&v523[8] = *(_OWORD *)v580;
            *(_OWORD *)&v523[24] = *(_OWORD *)&v580[16];
            *(_OWORD *)&v523[40] = *(_OWORD *)&v580[32];
            v523[56] = v581;
            uint64_t v22 = *((void *)&v581 + 1);
            *((void *)&v581 + 1) = 0;
            *(_OWORD *)&v523[72] = v582;
            *(_OWORD *)&v523[88] = *(_OWORD *)v583;
            LODWORD(v582) = v582 & 0xFFFFFFFE;
            int v23 = *(WTF::StringImpl **)&v583[16];
            *(void *)&v583[16] = 0;
            *(void *)&v523[64] = v22;
            v524 = v23;
            uint64_t v525 = v584;
            LOWORD(v526) = v585;
            std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v527, (uint64_t)v559);
            char v21 = 1;
          }
          else
          {
            v523[0] = 0;
          }
          v543[0] = v21;
          std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v559, v20);
        }
        else
        {
          v523[0] = 0;
          v543[0] = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v580, v19);
        if (v543[0]) {
          goto LABEL_414;
        }
      }
      else
      {
        v523[0] = 0;
        v543[0] = 0;
      }
      v388 = *(WTF::StringImpl **)v9;
      uint64_t v389 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v390 = *((void *)v9 + 3);
      if (!v390) {
        goto LABEL_759;
      }
      if (!v389) {
        goto LABEL_759;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v390 + 16))(v390, v388);
      if (!v543[0]) {
        goto LABEL_759;
      }
LABEL_414:
      WebKit::NetworkProcessProxy::resourceLoadDidReceiveResponse((uint64_t)this, *(uint64_t *)v523, (const WebKit::ResourceLoadInfo *)&v523[8], (uint64_t)&v527);
      if (v543[0]) {
        goto LABEL_514;
      }
      goto LABEL_759;
    case 0x160:
      v285 = (IPC::Connection *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v286)
      {
        v523[0] = 0;
        char v541 = 0;
        goto LABEL_642;
      }
      a2 = (atomic_uchar *volatile *)v285;
      IPC::Decoder::decode<WebKit::ResourceLoadInfo>((uint64_t *)v9, (uint64_t)v580);
      if (!(_BYTE)v586)
      {
        v523[0] = 0;
        char v541 = 0;
        goto LABEL_699;
      }
      IPC::Decoder::decode<WebCore::ResourceRequest>(v9, (uint64_t)v559);
      char v288 = v573;
      if (!(_BYTE)v573) {
        goto LABEL_697;
      }
      unint64_t v289 = *((void *)v9 + 1);
      uint64_t v20 = *(WTF::StringImpl **)v9;
      unint64_t v290 = *((void *)v9 + 2) - *(void *)v9;
      if (v289 <= v290)
      {
        unint64_t v453 = 0;
        v454 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v455 = *((void *)v9 + 3);
        if (v455)
        {
          if (v289)
          {
            (*(void (**)(uint64_t))(*(void *)v455 + 16))(v455);
            v454 = *(WTF::StringImpl **)v9;
            unint64_t v453 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v453 = 0;
            v454 = 0;
          }
        }
      }
      else
      {
        v291 = (char *)v20 + v290;
        *((void *)v9 + 2) = v291 + 1;
        if (v20)
        {
          LODWORD(v3) = *v291;
          if (v3 < 2)
          {
            if (!*v291)
            {
              v292 = 0;
LABEL_523:
              if (!(_BYTE)v586 || !(_BYTE)v573) {
                goto LABEL_796;
              }
              *(void *)v523 = a2;
              *(_OWORD *)&v523[8] = *(_OWORD *)v580;
              *(_OWORD *)&v523[24] = *(_OWORD *)&v580[16];
              *(_OWORD *)&v523[40] = *(_OWORD *)&v580[32];
              v523[56] = v581;
              uint64_t v367 = *((void *)&v581 + 1);
              *((void *)&v581 + 1) = 0;
              *(_OWORD *)&v523[72] = v582;
              *(_OWORD *)&v523[88] = *(_OWORD *)v583;
              LODWORD(v582) = v582 & 0xFFFFFFFE;
              v368 = *(WTF::StringImpl **)&v583[16];
              *(void *)&v583[16] = 0;
              *(void *)&v523[64] = v367;
              v524 = v368;
              uint64_t v525 = v584;
              LOWORD(v526) = v585;
              std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v527, (uint64_t)v559);
              LOBYTE(v539) = 0;
              char v540 = 0;
              char v288 = 1;
              if (v3)
              {
                v539 = v292;
                char v540 = 1;
              }
              goto LABEL_698;
            }
            IPC::Decoder::decode<IPC::FormDataReference>(v9, v523);
            if (v523[8])
            {
              v292 = *(WTF::RefCountedBase **)v523;
              goto LABEL_523;
            }
LABEL_695:
            v458 = *(WTF::StringImpl **)v9;
            uint64_t v459 = *((void *)v9 + 1);
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v460 = *((void *)v9 + 3);
            if (v460 && v459) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v460 + 16))(v460, v458);
            }
            char v288 = 0;
LABEL_697:
            v523[0] = 0;
LABEL_698:
            char v541 = v288;
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v559);
LABEL_699:
            std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v580, v287);
            if (v541) {
              goto LABEL_700;
            }
LABEL_642:
            v418 = *(WTF::StringImpl **)v9;
            uint64_t v419 = *((void *)v9 + 1);
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v420 = *((void *)v9 + 3);
            if (!v420) {
              goto LABEL_759;
            }
            if (!v419) {
              goto LABEL_759;
            }
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v420 + 16))(v420, v418);
            if (!v541) {
              goto LABEL_759;
            }
LABEL_700:
            WebKit::NetworkProcessProxy::resourceLoadDidSendRequest((uint64_t)this, *(uint64_t *)v523, (const WebKit::ResourceLoadInfo *)&v523[8], (uint64_t)&v527, (uint64_t)&v539);
            if (!v541) {
              goto LABEL_759;
            }
            if (v540)
            {
              v461 = v539;
              v539 = 0;
              if (v461) {
                WTF::RefCounted<WebCore::FormData>::deref(v461);
              }
            }
            CFTypeRef v462 = v538;
            CFTypeRef v538 = 0;
            if (v462) {
              CFRelease(v462);
            }
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v527);
LABEL_707:
            v463 = v524;
            v524 = 0;
            if (v463)
            {
              if (*(_DWORD *)v463 == 2) {
                WTF::StringImpl::destroy(v463, v96);
              }
              else {
                *(_DWORD *)v463 -= 2;
              }
            }
            unsigned int v105 = *(WTF::StringImpl **)&v523[64];
            *(void *)&v523[64] = 0;
            if (!v105) {
              goto LABEL_759;
            }
            goto LABEL_757;
          }
LABEL_694:
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v457 = *((void *)v9 + 3);
          if (v457 && v289) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v457 + 16))(v457, v20);
          }
          goto LABEL_695;
        }
        unint64_t v453 = v289;
        v454 = 0;
      }
      unint64_t v289 = 0;
      uint64_t v20 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v456 = *((void *)v9 + 3);
      if (v456)
      {
        if (v453)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v456 + 16))(v456, v454, v453);
          uint64_t v20 = *(WTF::StringImpl **)v9;
          unint64_t v289 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v289 = 0;
          uint64_t v20 = 0;
        }
      }
      goto LABEL_694;
    case 0x161:
      IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>(a3, (uint64_t)v523);
      if (!v523[8]) {
        goto LABEL_759;
      }
      uint64_t v260 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!(_BYTE)v261) {
        goto LABEL_261;
      }
      *(void *)v559 = v260;
      uint64_t v9 = (IPC::Decoder *)&v559[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
      v262 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v262 = &unk_1EE9B8E00;
      v262[1] = *(void *)v559;
      uint64_t v263 = *(void *)&v559[8];
      *(void *)&v559[8] = 0;
      v262[2] = v263;
      *(void *)v580 = v262;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
      if (!v523[8]) {
        goto LABEL_796;
      }
      WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess((uint64_t)this, (uint64_t *)v523, (uint64_t *)v580);
      uint64_t v264 = *(void *)v580;
      *(void *)v580 = 0;
      if (v264) {
        (*(void (**)(uint64_t))(*(void *)v264 + 8))(v264);
      }
LABEL_261:
      if (!v523[8] || !*(void *)v523) {
        goto LABEL_759;
      }
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(uint64_t *)v523, v261);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x162:
      IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(a3, (uint64_t)v523);
      if (!v523[8]) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::setDomainsWithUserInteraction((uint64_t)this, (uint64_t *)v523);
      if (!v523[8] || !*(void *)v523) {
        goto LABEL_759;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v523, v95);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x163:
      uint64_t v162 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v163) {
        goto LABEL_673;
      }
      unint64_t v99 = *((void *)v9 + 1);
      uint64_t v100 = *(WTF::StringImpl **)v9;
      unint64_t v164 = *((void *)v9 + 2) - *(void *)v9;
      if (v99 <= v164)
      {
        unint64_t v384 = 0;
        v385 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v431 = *((void *)v9 + 3);
        if (v431)
        {
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v431 + 16))(v431);
            v385 = *(WTF::StringImpl **)v9;
            unint64_t v384 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v384 = 0;
            v385 = 0;
          }
        }
      }
      else
      {
        uint64_t v165 = (unsigned __int8 *)v100 + v164;
        *((void *)v9 + 2) = v165 + 1;
        if (v100)
        {
          unsigned int v166 = *v165;
          if (v166 >= 2) {
            goto LABEL_662;
          }
          WebKit::NetworkProcessProxy::setWebProcessHasUploads((unsigned int *)this, v162, v166 != 0);
          if (this) {
            goto LABEL_760;
          }
          return;
        }
        unint64_t v384 = v99;
        v385 = 0;
      }
      unint64_t v99 = 0;
      uint64_t v100 = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v387 = *((void *)v9 + 3);
      if (!v387) {
        goto LABEL_662;
      }
      if (v384) {
        goto LABEL_590;
      }
      goto LABEL_814;
    case 0x164:
      uint64_t v271 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (!v272) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::startServiceWorkerBackgroundProcessing((uint64_t)this, v271);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x165:
      uint64_t v15 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (!v16) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::terminateUnresponsiveServiceWorkerProcesses((uint64_t)this, v15);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x166:
      uint64_t v65 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (!v66) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::terminateWebProcess((uint64_t)this, v65);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x167:
      uint64_t v245 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v246) {
        goto LABEL_673;
      }
      uint64_t v3 = (unsigned char *)v245;
      uint64_t v247 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if (!v248) {
        goto LABEL_673;
      }
      unint64_t v99 = *((void *)v9 + 1);
      uint64_t v100 = *(WTF::StringImpl **)v9;
      unint64_t v249 = *((void *)v9 + 2) - *(void *)v9;
      if (v99 <= v249)
      {
LABEL_587:
        unint64_t v384 = 0;
        v385 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v386 = *((void *)v9 + 3);
        if (v386)
        {
          if (v99)
          {
            (*(void (**)(uint64_t))(*(void *)v386 + 16))(v386);
            v385 = *(WTF::StringImpl **)v9;
            unint64_t v384 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v384 = 0;
            v385 = 0;
          }
        }
LABEL_588:
        unint64_t v99 = 0;
        uint64_t v100 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v387 = *((void *)v9 + 3);
        if (v387)
        {
          if (v384)
          {
LABEL_590:
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v387 + 16))(v387, v385, v384);
            uint64_t v100 = *(WTF::StringImpl **)v9;
            unint64_t v99 = *((void *)v9 + 1);
          }
          else
          {
LABEL_814:
            unint64_t v99 = 0;
            uint64_t v100 = 0;
          }
        }
        goto LABEL_662;
      }
      v250 = (unsigned __int8 *)v100 + v249;
      *((void *)v9 + 2) = v250 + 1;
      if (!v100)
      {
LABEL_857:
        unint64_t v384 = v99;
        v385 = v100;
        goto LABEL_588;
      }
      unsigned int v251 = *v250;
      if (v251 >= 3)
      {
LABEL_662:
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v432 = *((void *)v9 + 3);
        if (v432 && v99) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v432 + 16))(v432, v100);
        }
        goto LABEL_673;
      }
      uint64_t v252 = v247;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v9, (uint64_t)v559);
      if (!v559[8]) {
        goto LABEL_673;
      }
      uint64_t v253 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v9);
      if (!(_BYTE)v20)
      {
LABEL_668:
        if (v559[8])
        {
          v438 = *(WTF::StringImpl **)v559;
          *(void *)v559 = 0;
          if (v438)
          {
            if (*(_DWORD *)v438 == 2) {
              WTF::StringImpl::destroy(v438, v20);
            }
            else {
              *(_DWORD *)v438 -= 2;
            }
          }
        }
        goto LABEL_673;
      }
      if (!v559[8]) {
        goto LABEL_796;
      }
      uint64_t v254 = v253;
      *(void *)v523 = v3;
      *(void *)&v523[8] = v252;
      v523[16] = v251;
      v255 = *(WTF::StringImpl **)v559;
      *(void *)&v523[24] = *(void *)v559;
      *(void *)&v523[32] = v253;
      v523[40] = 1;
      uint64_t v256 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v9);
      if ((_BYTE)v96)
      {
        *(void *)v559 = v256;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v559[8], a2);
        v257 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v257 = &unk_1EE9B8EA0;
        v257[1] = *(void *)v559;
        uint64_t v258 = *(void *)&v559[8];
        *(void *)&v559[8] = 0;
        v257[2] = v258;
        *(void *)v580 = v257;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v559[8]);
        WebKit::NetworkProcessProxy::triggerBrowsingContextGroupSwitchForNavigation((uint64_t)this, (uint64_t)v3, v252, v251, (WTF::ASCIICaseInsensitiveHash **)&v523[24], v254, (uint64_t *)v580);
        uint64_t v259 = *(void *)v580;
        *(void *)v580 = 0;
        if (v259) {
          (*(void (**)(uint64_t))(*(void *)v259 + 8))(v259);
        }
        if (!v523[40]) {
          goto LABEL_759;
        }
        v255 = *(WTF::StringImpl **)&v523[24];
      }
      *(void *)&v523[24] = 0;
      if (!v255) {
        goto LABEL_759;
      }
      if (*(_DWORD *)v255 == 2)
      {
        unsigned int v105 = v255;
        goto LABEL_762;
      }
      *(_DWORD *)v255 -= 2;
      if (this) {
        goto LABEL_760;
      }
      return;
    case 0x168:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v523, (uint64_t *)a3);
      if (!v523[24]) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::unregisterRemoteWorkerClientProcess((uint64_t)this, v523[0], *(uint64_t *)&v523[8], *(uint64_t *)&v523[16]);
      if (!this) {
        return;
      }
      goto LABEL_760;
    case 0x169:
      uint64_t v24 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (!v25) {
        goto LABEL_759;
      }
      WebKit::NetworkProcessProxy::wakeUpWebProcessForIPC((uint64_t)this, v24);
      if (!this) {
        return;
      }
      goto LABEL_760;
    default:
      goto LABEL_759;
  }
}

uint64_t WebKit::NetworkProcessProxy::didReceiveSyncNetworkProcessProxyMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  int v5 = (unsigned int *)(a1 + 16);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
  if (*((_WORD *)a3 + 25) != 3618
    || (uint64_t v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3),
        !v9))
  {
    uint64_t v15 = 0;
    if (!a1) {
      return v15;
    }
LABEL_8:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
    return v15;
  }
  uint64_t v10 = v8;
  unint64_t v11 = *a4;
  *a4 = 0;
  BOOL v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v18, a2);
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v12 = &unk_1EE9B9008;
  v12[1] = v17;
  long long v13 = v18[0];
  v18[0] = 0;
  void v12[2] = v13;
  uint64_t v19 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v18);
  WebKit::NetworkProcessProxy::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(a1, v10, (uint64_t *)&v19);
  uint64_t v14 = (uint64_t)v19;
  uint64_t v19 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = 1;
  if (a1) {
    goto LABEL_8;
  }
  return v15;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 16) + 8))();
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (!v5 || (uint64_t v6 = v4, IPC::Decoder::decode<WTF::URL>(a2, v13), !v14))
  {
    *a1 = 0;
    a1[48] = 0;
LABEL_8:
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v10 = *((void *)a2 + 3);
    if (v10) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = *(void (**)(void))(*(void *)v10 + 16);
      v12();
    }
    return;
  }
  *(void *)a1 = v6;
  WTF::URL::URL((uint64_t)(a1 + 8), (uint64_t *)v13);
  a1[48] = 1;
  if (v14)
  {
    uint64_t v8 = v13[0];
    v13[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 != 2)
      {
        *(_DWORD *)v8 -= 2;
        return;
      }
      WTF::StringImpl::destroy(v8, v7);
      if (!a1[48]) {
        goto LABEL_8;
      }
    }
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27RequestStorageAccessConfirmEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore16ProcessQualifiedINS9_INSF_19FrameIdentifierTypeESC_yLSD_1EEEEERKNSF_17RegistrableDomainESM_ONSt3__18optionalINSF_36OrganizationStorageAccessPromptQuirkEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27RequestStorageAccessConfirmEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore16ProcessQualifiedINS9_INSF_19FrameIdentifierTypeESC_yLSD_1EEEEERKNSF_17RegistrableDomainESM_ONSt3__18optionalINSF_36OrganizationStorageAccessPromptQuirkEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8DB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27RequestStorageAccessConfirmEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEN7WebCore16ProcessQualifiedINS9_INSF_19FrameIdentifierTypeESC_yLSD_1EEEEERKNSF_17RegistrableDomainESM_ONSt3__18optionalINSF_36OrganizationStorageAccessPromptQuirkEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2953;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy49DeleteWebsiteDataInUIProcessForRegistrableDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetISI_NS_11DefaultHashISI_EENS_10HashTraitsISI_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy49DeleteWebsiteDataInUIProcessForRegistrableDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetISI_NS_11DefaultHashISI_EENS_10HashTraitsISI_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8DD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy49DeleteWebsiteDataInUIProcessForRegistrableDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDENS_9OptionSetINS7_15WebsiteDataTypeEEENSB_INS7_22WebsiteDataFetchOptionEEEONS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetISI_NS_11DefaultHashISI_EENS_10HashTraitsISI_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2944;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, &v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy36SetDomainsWithCrossPageStorageAccessEN6WebKit19NetworkProcessProxyES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy36SetDomainsWithCrossPageStorageAccessEN6WebKit19NetworkProcessProxyES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8E00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy36SetDomainsWithCrossPageStorageAccessEN6WebKit19NetworkProcessProxyES8_FvONS_7HashMapIN7WebCore17RegistrableDomainENS_6VectorISB_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_11DefaultHashISB_EENS_10HashTraitsISB_EENSI_ISF_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v3 = 2954;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32RequestBackgroundFetchPermissionEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32RequestBackgroundFetchPermissionEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8E28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32RequestBackgroundFetchPermissionEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2952;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit19NetworkProcessProxyES8_FvNS7_16RemoteWorkerTypeEON7WebCore17RegistrableDomainENSt3__18optionalINS_23ObjectIdentifierGenericINSA_21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSE_INSA_16ProcessQualifiedINS_4UUIDEEEEEN3PAL9SessionIDEONS_17CompletionHandlerIFvSK_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit19NetworkProcessProxyES8_FvNS7_16RemoteWorkerTypeEON7WebCore17RegistrableDomainENSt3__18optionalINS_23ObjectIdentifierGenericINSA_21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSE_INSA_16ProcessQualifiedINS_4UUIDEEEEEN3PAL9SessionIDEONS_17CompletionHandlerIFvSK_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8E50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy54EstablishRemoteWorkerContextConnectionToNetworkProcessEN6WebKit19NetworkProcessProxyES8_FvNS7_16RemoteWorkerTypeEON7WebCore17RegistrableDomainENSt3__18optionalINS_23ObjectIdentifierGenericINSA_21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSE_INSA_16ProcessQualifiedINS_4UUIDEEEEEN3PAL9SessionIDEONS_17CompletionHandlerIFvSK_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2946;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebKit::RemoteWorkerType>(a2);
  if (v4 >= 0x100u
    && (char v5 = v4,
        uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2),
        v7)
    && (uint64_t v8 = v6,
        uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2),
        v10))
  {
    *(unsigned char *)a1 = v5;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = result;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      long long v13 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v13();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy18GetAppBoundDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy18GetAppBoundDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8E78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy18GetAppBoundDomainsEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_7HashSetIN7WebCore17RegistrableDomainENS_11DefaultHashISE_EENS_10HashTraitsISE_EENS_15HashTableTraitsEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 2947;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::ResourceLoadInfo>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::ResourceLoadInfo,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 120))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy46TriggerBrowsingContextGroupSwitchForNavigationEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_IN7WebCore24NavigationIdentifierTypeESC_yLSD_0EEENSF_34BrowsingContextGroupSwitchDecisionERKNSF_17RegistrableDomainENS9_INS7_33NetworkResourceLoadIdentifierTypeESC_yLSD_1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy46TriggerBrowsingContextGroupSwitchForNavigationEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_IN7WebCore24NavigationIdentifierTypeESC_yLSD_0EEENSF_34BrowsingContextGroupSwitchDecisionERKNSF_17RegistrableDomainENS9_INS7_33NetworkResourceLoadIdentifierTypeESC_yLSD_1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8EA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy46TriggerBrowsingContextGroupSwitchForNavigationEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_IN7WebCore24NavigationIdentifierTypeESC_yLSD_0EEENSF_34BrowsingContextGroupSwitchDecisionERKNSF_17RegistrableDomainENS9_INS7_33NetworkResourceLoadIdentifierTypeESC_yLSD_1EEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2955;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    BOOL v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy39GetPaymentCoordinatorEmbeddingUserAgentEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy39GetPaymentCoordinatorEmbeddingUserAgentEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8EC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy39GetPaymentCoordinatorEmbeddingUserAgentEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2948;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy25DataTaskReceivedChallengeEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore23AuthenticationChallengeEONS_17CompletionHandlerIFvNS7_34AuthenticationChallengeDispositionEONSF_10CredentialEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy25DataTaskReceivedChallengeEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore23AuthenticationChallengeEONS_17CompletionHandlerIFvNS7_34AuthenticationChallengeDispositionEONSF_10CredentialEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8EF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy25DataTaskReceivedChallengeEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore23AuthenticationChallengeEONS_17CompletionHandlerIFvNS7_34AuthenticationChallengeDispositionEONSF_10CredentialEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EE4callESJ_SL_(uint64_t a1, char a2, WebCore::Credential *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2942;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  BOOL v12 = v7;
  IPC::ArgumentCoder<WebKit::AuthenticationChallengeDisposition,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<WebCore::Credential,void>::encode(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  BOOL v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::AuthenticationChallengeDisposition,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy34DataTaskWillPerformHTTPRedirectionEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore16ResourceResponseEONSF_15ResourceRequestEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy34DataTaskWillPerformHTTPRedirectionEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore16ResourceResponseEONSF_15ResourceRequestEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy34DataTaskWillPerformHTTPRedirectionEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore16ResourceResponseEONSF_15ResourceRequestEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2943;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    BOOL v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy26DataTaskDidReceiveResponseEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore16ResourceResponseEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy26DataTaskDidReceiveResponseEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore16ResourceResponseEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy26DataTaskDidReceiveResponseEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_22DataTaskIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore16ResourceResponseEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2941;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    BOOL v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27OpenWindowFromServiceWorkerEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27OpenWindowFromServiceWorkerEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27OpenWindowFromServiceWorkerEN6WebKit19NetworkProcessProxyES8_FvN3PAL9SessionIDERKNS_6StringERKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericINSE_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2950;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27NavigateServiceWorkerClientEN6WebKit19NetworkProcessProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINSB_INS9_18PageIdentifierTypeESE_yLSF_0EEEEENSP_ISH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_ST_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27NavigateServiceWorkerClientEN6WebKit19NetworkProcessProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINSB_INS9_18PageIdentifierTypeESE_yLSF_0EEEEENSP_ISH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_ST_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy27NavigateServiceWorkerClientEN6WebKit19NetworkProcessProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEENSA_INS_4UUIDEEERKNS_3URLEONS_17CompletionHandlerIFvNSt3__18optionalINSB_INS9_18PageIdentifierTypeESE_yLSF_0EEEEENSP_ISH_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_ST_EE4callESS_ST_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2949;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v13 = v7;
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v7, (uint64_t)v12);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v7, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  long long v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy40DeleteWebsiteDataInWebProcessesForOriginEN6WebKit19NetworkProcessProxyES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEN3PAL9SessionIDENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy40DeleteWebsiteDataInWebProcessesForOriginEN6WebKit19NetworkProcessProxyES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEN3PAL9SessionIDENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8FB8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy40DeleteWebsiteDataInWebProcessesForOriginEN6WebKit19NetworkProcessProxyES8_FvNS_9OptionSetINS7_15WebsiteDataTypeEEERKN7WebCore12ClientOriginEN3PAL9SessionIDENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2945;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32ReloadExecutionContextsForOriginEN6WebKit19NetworkProcessProxyES8_FvRKN7WebCore12ClientOriginEN3PAL9SessionIDENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B8FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32ReloadExecutionContextsForOriginEN6WebKit19NetworkProcessProxyES8_FvRKN7WebCore12ClientOriginEN3PAL9SessionIDENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B8FE0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19NetworkProcessProxy32ReloadExecutionContextsForOriginEN6WebKit19NetworkProcessProxyES8_FvRKN7WebCore12ClientOriginEN3PAL9SessionIDENSt3__18optionalINS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2951;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9008;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEN6WebKit19NetworkProcessProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

_DWORD *WebKit::NetworkResourceLoader::didReceiveNetworkResourceLoaderMessage(WebKit::NetworkResourceLoader *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = (_DWORD *)((char *)this + 8);
  ++*((_DWORD *)this + 2);
  if (*((_WORD *)a3 + 25) == 528) {
    WebKit::NetworkResourceLoader::continueDidReceiveResponse(this);
  }

  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v3, a2);
}

_DWORD *WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(_DWORD *result, WTF::StringImpl *a2)
{
  if (*result == 1)
  {
    WebKit::NetworkResourceLoader::~NetworkResourceLoader((WebKit::NetworkResourceLoader *)(result - 2), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

void WebKit::NetworkRTCMonitor::didReceiveMessage(WebKit::NetworkRTCMonitor *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v3 = *((unsigned __int16 *)a3 + 25);
  if (v3 == 519)
  {
    WebKit::NetworkRTCMonitor::stopUpdating(this);
  }
  else if (v3 == 518)
  {
    WebKit::NetworkRTCMonitor::startUpdatingIfNeeded(this);
  }
}

void WebKit::NetworkRTCProvider::didReceiveMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  char v10 = (unsigned int *)(this + 6);
  atomic_fetch_add(this + 6, 1u);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x208:
      unint64_t v12 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v13) {
        WebKit::NetworkRTCProvider::closeSocket((uint64_t)this, v12);
      }
      goto LABEL_207;
    case 0x209:
      uint64_t v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v50) {
        goto LABEL_113;
      }
      long long v51 = (WTF::StringImpl *)v49;
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v173);
      if (!v177) {
        goto LABEL_113;
      }
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v178);
      if (!v182)
      {
        int v65 = 0;
        LOBYTE(v155) = 0;
        char v169 = 0;
        goto LABEL_189;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v153);
      if (!v154)
      {
        int v65 = 0;
        LOBYTE(v155) = 0;
        char v169 = 0;
        goto LABEL_186;
      }
      unint64_t v53 = *((void *)a3 + 1);
      char v52 = *(WTF::StringImpl **)a3;
      unint64_t v54 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v53 < v54 || v53 - v54 <= 3)
      {
        unint64_t v118 = 0;
        uint64_t v119 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v120 = *((void *)a3 + 3);
        if (v120)
        {
          if (v53)
          {
            (*(void (**)(uint64_t))(*(void *)v120 + 16))(v120);
            uint64_t v119 = *(void *)a3;
            unint64_t v118 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v118 = 0;
            uint64_t v119 = 0;
          }
        }
      }
      else
      {
        char v55 = (unsigned int *)((char *)v52 + v54);
        *((void *)a3 + 2) = v55 + 1;
        if (v52)
        {
          unsigned int v4 = *v55;
          uint64_t v56 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (!(_BYTE)v52) {
            goto LABEL_180;
          }
          unint64_t v57 = *((void *)a3 + 1);
          char v52 = *(WTF::StringImpl **)a3;
          unint64_t v58 = *((void *)a3 + 2) - *(void *)a3;
          if (v57 <= v58)
          {
            unint64_t v130 = 0;
            uint64_t v131 = 0;
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v132 = *((void *)a3 + 3);
            if (v132)
            {
              if (v57)
              {
                (*(void (**)(uint64_t))(*(void *)v132 + 16))(v132);
                uint64_t v131 = *(void *)a3;
                unint64_t v130 = *((void *)a3 + 1);
              }
              else
              {
                unint64_t v130 = 0;
                uint64_t v131 = 0;
              }
            }
          }
          else
          {
            long long v59 = (unsigned __int8 *)v52 + v58;
            *((void *)a3 + 2) = v59 + 1;
            if (v52)
            {
              unsigned int v60 = *v59;
              if (v60 < 2)
              {
                LOBYTE(v6) = v60 != 0;
                if (v57 <= v59 + 1 - (unsigned __int8 *)v52)
                {
                  unint64_t v135 = 0;
                  uint64_t v136 = 0;
                  *(void *)a3 = 0;
                  *((void *)a3 + 1) = 0;
                  uint64_t v137 = *((void *)a3 + 3);
                  if (v137)
                  {
                    (*(void (**)(uint64_t))(*(void *)v137 + 16))(v137);
                    unint64_t v135 = 0;
                    char v52 = *(WTF::StringImpl **)a3;
                    uint64_t v151 = *((void *)a3 + 1);
                    uint64_t v152 = *((void *)a3 + 3);
                    *(void *)a3 = 0;
                    *((void *)a3 + 1) = 0;
                    uint64_t v136 = 0;
                    if (v152)
                    {
                      if (v151)
                      {
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v152 + 16))(v152, v52);
                        uint64_t v136 = *(void *)a3;
                        unint64_t v135 = *((void *)a3 + 1);
                      }
                    }
                  }
                }
                else
                {
                  *((void *)a3 + 2) = v59 + 2;
                  unsigned int v61 = v59[1];
                  if (v61 < 2)
                  {
                    int v3 = (WTF *)v56;
                    BOOL v7 = v61 != 0;
                    IPC::Decoder::decode<WebCore::RegistrableDomain>(a3, (uint64_t)&v171);
                    if (BYTE8(v171))
                    {
                      if (!v177 || !v182 || !v154) {
                        goto LABEL_102;
                      }
                      char v155 = v51;
                      *(_OWORD *)uint64_t v156 = v173;
                      v158[0] = v176;
                      v158[1] = v178;
                      *((void *)&v173 + 1) = 0;
                      uint64_t v62 = v174;
                      uint64_t v174 = 0;
                      *(void *)uint64_t v157 = v62;
                      *(_OWORD *)&v157[8] = v175;
                      uint64_t v63 = *((void *)&v179 + 1);
                      uint64_t v159 = (WTF *)v179;
                      long long v179 = 0uLL;
                      uint64_t v160 = v63;
                      *(_OWORD *)uint64_t v161 = v180;
                      uint64_t v64 = v153;
                      char v153 = 0;
                      uint64_t v162 = v181;
                      char v163 = v64;
                      unsigned int v164 = v4;
                      uint64_t v165 = v3;
                      char v166 = v6;
                      BOOL v167 = v7;
                      int v65 = 1;
                      char v168 = (WTF::StringImpl *)v171;
                    }
                    else
                    {
                      int v65 = 0;
                      LOBYTE(v155) = 0;
                    }
                    char v169 = v65;
LABEL_181:
                    if (v154)
                    {
                      uint64_t v139 = v153;
                      char v153 = 0;
                      if (v139)
                      {
                        if (*(_DWORD *)v139 == 2) {
                          WTF::StringImpl::destroy(v139, v52);
                        }
                        else {
                          *(_DWORD *)v139 -= 2;
                        }
                      }
                    }
LABEL_186:
                    if (v182)
                    {
                      int v140 = (WTF *)v179;
                      if ((void)v179)
                      {
                        *(void *)&long long v179 = 0;
                        DWORD2(v179) = 0;
                        WTF::fastFree(v140, v52);
                      }
                    }
LABEL_189:
                    if (v177)
                    {
                      unsigned __int16 v141 = (WTF *)*((void *)&v173 + 1);
                      if (*((void *)&v173 + 1))
                      {
                        *((void *)&v173 + 1) = 0;
                        LODWORD(v174) = 0;
                        WTF::fastFree(v141, v52);
                      }
                    }
                    if (!v65) {
                      goto LABEL_113;
                    }
                    WebKit::NetworkRTCProvider::createClientTCPSocket((uint64_t)this, (atomic_uchar *volatile *)v155, (int)v156, (WebKit::RTC::Network::SocketAddress *)&v158[1], (int)&v163, v4, (uint64_t)v3, v6 != 0, v7, (WebKit *)&v168);
                    if (v169)
                    {
                      uint64_t v142 = v168;
                      char v168 = 0;
                      if (v142)
                      {
                        if (*(_DWORD *)v142 == 2) {
                          WTF::StringImpl::destroy(v142, v85);
                        }
                        else {
                          *(_DWORD *)v142 -= 2;
                        }
                      }
                      char v143 = v163;
                      char v163 = 0;
                      if (v143)
                      {
                        if (*(_DWORD *)v143 == 2) {
                          WTF::StringImpl::destroy(v143, v85);
                        }
                        else {
                          *(_DWORD *)v143 -= 2;
                        }
                      }
                      v144 = v159;
                      if (v159)
                      {
                        uint64_t v159 = 0;
                        LODWORD(v160) = 0;
                        WTF::fastFree(v144, v85);
                      }
                      goto LABEL_204;
                    }
                    goto LABEL_207;
                  }
                  unint64_t v135 = v57;
                  uint64_t v136 = (uint64_t)v52;
                }
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v138 = *((void *)a3 + 3);
                if (v138 && v135) {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v138 + 16))(v138, v136, v135);
                }
LABEL_180:
                int v65 = 0;
                LOBYTE(v155) = 0;
                char v169 = 0;
                goto LABEL_181;
              }
LABEL_175:
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v134 = *((void *)a3 + 3);
              if (v134 && v57) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v134 + 16))(v134, v52);
              }
              goto LABEL_180;
            }
            unint64_t v130 = v57;
            uint64_t v131 = 0;
          }
          unint64_t v57 = 0;
          char v52 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v133 = *((void *)a3 + 3);
          if (v133)
          {
            if (v130)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v133 + 16))(v133, v131, v130);
              char v52 = *(WTF::StringImpl **)a3;
              unint64_t v57 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v57 = 0;
              char v52 = 0;
            }
          }
          goto LABEL_175;
        }
        unint64_t v118 = v53;
        uint64_t v119 = 0;
      }
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v121 = *((void *)a3 + 3);
      if (v121 && v118) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v121 + 16))(v121, v119);
      }
      goto LABEL_180;
    case 0x20A:
      uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v26) {
        goto LABEL_113;
      }
      char v27 = (WTF::StringImpl *)v25;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v178);
      if (!(_BYTE)v179) {
        goto LABEL_113;
      }
      char v155 = v27;
      v156[0] = v178;
      LOBYTE(v156[1]) = 1;
      WebKit::NetworkRTCProvider::createResolver((uint64_t)this, (uint64_t)v27, v156);
      if (LOBYTE(v156[1]))
      {
        uint64_t v29 = v156[0];
        v156[0] = 0;
        if (v29) {
          goto LABEL_139;
        }
      }
      goto LABEL_207;
    case 0x20B:
      uint64_t v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v31) {
        goto LABEL_113;
      }
      uint64_t v32 = (WTF::StringImpl *)v30;
      IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v178);
      if (!v182) {
        goto LABEL_113;
      }
      unint64_t v33 = *((void *)a3 + 1);
      uint64_t v34 = *(unsigned char **)a3;
      unint64_t v35 = ((*((void *)a3 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)a3;
      if (v33 < v35 || v33 - v35 <= 1)
      {
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v113 = *((void *)a3 + 3);
        if (v113)
        {
          if (!v33)
          {
            unint64_t v111 = 0;
            uint64_t v112 = 0;
            goto LABEL_162;
          }
LABEL_240:
          (*(void (**)(uint64_t))(*(void *)v113 + 16))(v113);
          uint64_t v112 = *(void *)a3;
          unint64_t v111 = *((void *)a3 + 1);
        }
LABEL_162:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v127 = *((void *)a3 + 3);
        if (v127 && v111) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v127 + 16))(v127, v112, v111);
        }
        goto LABEL_163;
      }
      uint64_t v37 = (unsigned __int16 *)&v34[v35];
      *((void *)a3 + 2) = v37 + 1;
      if (!v34) {
        goto LABEL_250;
      }
      unint64_t v38 = (((unint64_t)v37 + 3) & 0xFFFFFFFFFFFFFFFELL) - (void)v34;
      if (v33 < v38 || v33 - v38 <= 1)
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v114 = *((void *)a3 + 3);
        if (!v114) {
          goto LABEL_163;
        }
        if (!v33) {
          goto LABEL_163;
        }
        (*(void (**)(uint64_t))(*(void *)v114 + 16))(v114);
        uint64_t v34 = *(unsigned char **)a3;
        unint64_t v33 = *((void *)a3 + 1);
        uint64_t v115 = *((void *)a3 + 3);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        if (!v115) {
          goto LABEL_163;
        }
LABEL_159:
        if (v33) {
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v115 + 16))(v115, v34);
        }
        goto LABEL_163;
      }
      unsigned __int16 v6 = *v37;
      unsigned __int16 v5 = *(_WORD *)(((unint64_t)v37 + 3) & 0xFFFFFFFFFFFFFFFELL);
      *((void *)a3 + 2) = (((unint64_t)v37 + 3) & 0xFFFFFFFFFFFFFFFELL) + 2;
      uint64_t v40 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v34) {
        goto LABEL_163;
      }
      unint64_t v33 = *((void *)a3 + 1);
      uint64_t v34 = *(unsigned char **)a3;
      unint64_t v41 = *((void *)a3 + 2) - *(void *)a3;
      if (v33 <= v41)
      {
        unint64_t v122 = 0;
        uint64_t v123 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v124 = *((void *)a3 + 3);
        if (v124)
        {
          if (v33)
          {
            (*(void (**)(uint64_t))(*(void *)v124 + 16))(v124);
            uint64_t v123 = *(void *)a3;
            unint64_t v122 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v122 = 0;
            uint64_t v123 = 0;
          }
        }
        goto LABEL_157;
      }
      uint64_t v42 = &v34[v41];
      *((void *)a3 + 2) = v42 + 1;
      if (!v34)
      {
        unint64_t v122 = v33;
        uint64_t v123 = 0;
LABEL_157:
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v125 = *((void *)a3 + 3);
        if (v125)
        {
          if (v122)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v125 + 16))(v125, v123, v122);
            uint64_t v34 = *(unsigned char **)a3;
            unint64_t v33 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v33 = 0;
            uint64_t v34 = 0;
          }
        }
LABEL_158:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v115 = *((void *)a3 + 3);
        if (v115) {
          goto LABEL_159;
        }
LABEL_163:
        int v46 = 0;
        LOBYTE(v155) = 0;
        LOBYTE(v161[1]) = 0;
        goto LABEL_164;
      }
      unsigned int v43 = *v42;
      if (v43 >= 2) {
        goto LABEL_158;
      }
      BOOL v7 = v43 != 0;
      if (v33 <= v42 + 1 - v34)
      {
        unint64_t v111 = 0;
        uint64_t v112 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v126 = *((void *)a3 + 3);
        if (v126)
        {
          (*(void (**)(uint64_t))(*(void *)v126 + 16))(v126);
          unint64_t v111 = 0;
          uint64_t v34 = *(unsigned char **)a3;
          uint64_t v150 = *((void *)a3 + 1);
          uint64_t v113 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v112 = 0;
          if (v113)
          {
            if (v150) {
              goto LABEL_240;
            }
          }
        }
        goto LABEL_162;
      }
      *((void *)a3 + 2) = v42 + 2;
      unsigned int v44 = v42[1];
      if (v44 >= 2)
      {
LABEL_250:
        unint64_t v111 = v33;
        uint64_t v112 = (uint64_t)v34;
        goto LABEL_162;
      }
      int v3 = (WTF *)v40;
      BOOL v8 = v44 != 0;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(a3, (uint64_t)&v173);
      if (BYTE8(v173))
      {
        if (!v182) {
          goto LABEL_102;
        }
        char v155 = v32;
        v156[0] = v178;
        uint64_t v45 = *((void *)&v179 + 1);
        v156[1] = (WTF *)v179;
        long long v179 = 0uLL;
        *(void *)uint64_t v157 = v45;
        *(_OWORD *)&v157[8] = v180;
        v158[0] = v181;
        LOWORD(v158[1]) = v6;
        WORD1(v158[1]) = v5;
        uint64_t v159 = v3;
        LOBYTE(v160) = v7;
        BYTE1(v160) = v8;
        int v46 = 1;
        v161[0] = (WTF::StringImpl *)v173;
      }
      else
      {
        int v46 = 0;
        LOBYTE(v155) = 0;
      }
      LOBYTE(v161[1]) = v46;
LABEL_164:
      if (v182)
      {
        unsigned int v128 = (WTF *)v179;
        if ((void)v179)
        {
          *(void *)&long long v179 = 0;
          DWORD2(v179) = 0;
          WTF::fastFree(v128, v34);
        }
      }
      if (!v46) {
        goto LABEL_113;
      }
      WebKit::NetworkRTCProvider::createUDPSocket((uint64_t)this, (unint64_t)v155, (WebKit::RTC::Network::SocketAddress *)v156, v6, v5, (uint64_t)v3, v7, v8, (WebKit *)v161);
      if (LOBYTE(v161[1]))
      {
        uint64_t v129 = v161[0];
        v161[0] = 0;
        if (v129)
        {
          if (*(_DWORD *)v129 == 2) {
            WTF::StringImpl::destroy(v129, v85);
          }
          else {
            *(_DWORD *)v129 -= 2;
          }
        }
LABEL_204:
        uint64_t v86 = v156[1];
        if (v156[1])
        {
          v156[1] = 0;
          *(_DWORD *)uint64_t v157 = 0;
          goto LABEL_206;
        }
      }
LABEL_207:
      if (this)
      {
        WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(v10);
      }
      return;
    case 0x20C:
      IPC::Decoder::decode<WTF::URL>(a3, &v178);
      if (!(_BYTE)v181) {
        goto LABEL_134;
      }
      uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v15) {
        goto LABEL_120;
      }
      unint64_t v17 = *((void *)a3 + 1);
      uint64_t v15 = *(WTF::StringImpl **)a3;
      unint64_t v18 = *((void *)a3 + 2) - *(void *)a3;
      if (v17 <= v18)
      {
        unint64_t v91 = 0;
        uint64_t v92 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v93 = *((void *)a3 + 3);
        if (v93)
        {
          if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v93 + 16))(v93);
            uint64_t v92 = *(void *)a3;
            unint64_t v91 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v91 = 0;
            uint64_t v92 = 0;
          }
        }
      }
      else
      {
        uint64_t v19 = (unsigned __int8 *)v15 + v18;
        *((void *)a3 + 2) = v19 + 1;
        if (v15)
        {
          unsigned int v20 = *v19;
          if (v20 < 2)
          {
            LOBYTE(v5) = v20 != 0;
            if (v17 <= v19 + 1 - (unsigned __int8 *)v15)
            {
              unint64_t v100 = 0;
              uint64_t v101 = 0;
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v102 = *((void *)a3 + 3);
              if (v102)
              {
                (*(void (**)(uint64_t))(*(void *)v102 + 16))(v102);
                unint64_t v100 = 0;
                uint64_t v15 = *(WTF::StringImpl **)a3;
                uint64_t v148 = *((void *)a3 + 1);
                uint64_t v149 = *((void *)a3 + 3);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v101 = 0;
                if (v149)
                {
                  if (v148)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v149 + 16))(v149, v15);
                    uint64_t v101 = *(void *)a3;
                    unint64_t v100 = *((void *)a3 + 1);
                  }
                }
              }
            }
            else
            {
              *((void *)a3 + 2) = v19 + 2;
              unsigned int v21 = v19[1];
              if (v21 < 2)
              {
                LOBYTE(v6) = v21 != 0;
                IPC::Decoder::decode<WebCore::RegistrableDomain>(a3, (uint64_t)&v173);
                if (BYTE8(v173))
                {
                  if (!(_BYTE)v181) {
                    goto LABEL_102;
                  }
                  int v23 = v178;
                  char v178 = 0;
                  char v155 = v23;
                  *(_OWORD *)uint64_t v156 = v179;
                  *(_OWORD *)uint64_t v157 = v180;
                  LODWORD(v179) = v179 & 0xFFFFFFFE;
                  *(void *)&v157[16] = v16;
                  LOBYTE(v158[0]) = v5;
                  BYTE1(v158[0]) = v6;
                  v158[1] = (WTF::StringImpl *)v173;
                  int v24 = 1;
                }
                else
                {
                  int v24 = 0;
                  LOBYTE(v155) = 0;
                }
                LOBYTE(v159) = v24;
LABEL_121:
                if ((_BYTE)v181)
                {
                  uint64_t v104 = v178;
                  char v178 = 0;
                  if (v104)
                  {
                    if (*(_DWORD *)v104 == 2)
                    {
                      WTF::StringImpl::destroy(v104, v15);
                      if (v24)
                      {
LABEL_126:
                        uint64_t v105 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
                        if (!(_BYTE)v28) {
                          goto LABEL_268;
                        }
                        char v178 = (WTF::StringImpl *)v105;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v179, a2);
                        uint64_t v106 = (void *)WTF::fastMalloc((WTF *)0x18);
                        *uint64_t v106 = &unk_1EE9B9058;
                        v106[1] = v178;
                        uint64_t v107 = v179;
                        *(void *)&long long v179 = 0;
                        v106[2] = v107;
                        *(void *)&long long v173 = v106;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v179);
                        WebKit::NetworkRTCProvider::getInterfaceName((uint64_t)this, (WTF::URL *)&v155, v16, v5 != 0, v6 != 0, (WebKit *)&v158[1], (uint64_t *)&v173);
                        uint64_t v108 = v173;
                        *(void *)&long long v173 = 0;
                        if (v108) {
                          (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
                        }
                        if ((_BYTE)v159)
                        {
LABEL_268:
                          unint64_t v109 = v158[1];
                          v158[1] = 0;
                          if (v109)
                          {
                            if (*(_DWORD *)v109 == 2) {
                              WTF::StringImpl::destroy(v109, v28);
                            }
                            else {
                              *(_DWORD *)v109 -= 2;
                            }
                          }
                          uint64_t v29 = v155;
                          char v155 = 0;
                          if (v29)
                          {
LABEL_139:
                            if (*(_DWORD *)v29 == 2) {
                              WTF::StringImpl::destroy(v29, v28);
                            }
                            else {
                              *(_DWORD *)v29 -= 2;
                            }
                          }
                        }
                        goto LABEL_207;
                      }
LABEL_134:
                      uint64_t v110 = *((void *)a3 + 1);
                      *(void *)a3 = 0;
                      *((void *)a3 + 1) = 0;
                      uint64_t v98 = *((void *)a3 + 3);
                      if (v98 && v110) {
                        goto LABEL_117;
                      }
                      goto LABEL_207;
                    }
                    *(_DWORD *)v104 -= 2;
                  }
                }
                if (v24) {
                  goto LABEL_126;
                }
                goto LABEL_134;
              }
              unint64_t v100 = v17;
              uint64_t v101 = (uint64_t)v15;
            }
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v103 = *((void *)a3 + 3);
            if (v103 && v100) {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v103 + 16))(v103, v101, v100);
            }
LABEL_120:
            int v24 = 0;
            LOBYTE(v155) = 0;
            LOBYTE(v159) = 0;
            goto LABEL_121;
          }
LABEL_109:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v95 = *((void *)a3 + 3);
          if (v95 && v17) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v95 + 16))(v95, v15);
          }
          goto LABEL_120;
        }
        unint64_t v91 = v17;
        uint64_t v92 = 0;
      }
      unint64_t v17 = 0;
      uint64_t v15 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v94 = *((void *)a3 + 3);
      if (v94)
      {
        if (v91)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v94 + 16))(v94, v92, v91);
          uint64_t v15 = *(WTF::StringImpl **)a3;
          unint64_t v17 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v15 = 0;
        }
      }
      goto LABEL_109;
    case 0x20D:
      uint64_t v66 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v67
        && (char v68 = (WTF::StringImpl *)v66,
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)&v171),
            v172))
      {
        IPC::Decoder::decode<WebKit::RTC::Network::SocketAddress>((uint64_t *)a3, (uint64_t)&v173);
        if (v177)
        {
          IPC::ArgumentCoder<WebKit::RTCPacketOptions,void>::decode(a3, &v178);
          if (v183
            || (char v70 = *(void **)a3,
                uint64_t v116 = *((void *)a3 + 1),
                *(void *)a3 = 0,
                *((void *)a3 + 1) = 0,
                (uint64_t v117 = *((void *)a3 + 3)) != 0)
            && v116
            && ((*(void (**)(uint64_t, void *))(*(void *)v117 + 16))(v117, v70), v183))
          {
            if (!v172 || !v177)
            {
LABEL_102:
              __break(1u);
              goto LABEL_103;
            }
            char v155 = v68;
            *(_OWORD *)uint64_t v156 = v171;
            *(_OWORD *)uint64_t v157 = v173;
            uint64_t v69 = v174;
            *((void *)&v173 + 1) = 0;
            uint64_t v174 = 0;
            *(void *)&v157[16] = v69;
            *(_OWORD *)char v158 = v175;
            uint64_t v159 = v176;
            rtc::PacketOptions::PacketOptions();
            char v170 = 1;
            if (v183) {
              rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v178);
            }
          }
          else
          {
            LOBYTE(v155) = 0;
            char v170 = 0;
          }
          if (v177)
          {
            unint64_t v71 = (WTF *)*((void *)&v173 + 1);
            if (*((void *)&v173 + 1))
            {
              *((void *)&v173 + 1) = 0;
              LODWORD(v174) = 0;
              WTF::fastFree(v71, v70);
            }
          }
        }
        else
        {
          LOBYTE(v155) = 0;
          char v170 = 0;
        }
        if (v170) {
          goto LABEL_95;
        }
      }
      else
      {
        LOBYTE(v155) = 0;
        char v170 = 0;
      }
      uint64_t v82 = *(void *)a3;
      uint64_t v83 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v84 = *((void *)a3 + 3);
      if (!v84) {
        goto LABEL_207;
      }
      if (!v83) {
        goto LABEL_207;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 16))(v84, v82);
      if (!v170) {
        goto LABEL_207;
      }
LABEL_95:
      WebKit::NetworkRTCProvider::sendToSocket((uint64_t)this, (unint64_t)v155, (uint64_t)v156[0], (uint64_t)v156[1], (WebKit::RTC::Network::SocketAddress *)v157, (uint64_t)&v160);
      if (v170)
      {
        rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v160);
        uint64_t v86 = *(WTF **)&v157[8];
        if (*(void *)&v157[8])
        {
          *(void *)&v157[8] = 0;
          *(_DWORD *)&v157[16] = 0;
LABEL_206:
          WTF::fastFree(v86, v85);
        }
      }
      goto LABEL_207;
    case 0x20E:
      unint64_t v72 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v73) {
        goto LABEL_113;
      }
      unint64_t v22 = *((void *)a3 + 1);
      uint64_t v74 = *(void *)a3;
      unint64_t v75 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v22 >= v75 && v22 - v75 > 3)
      {
        unint64_t v77 = (unsigned int *)(v74 + v75);
        *((void *)a3 + 2) = v77 + 1;
        if (v74)
        {
          unint64_t v78 = (((unint64_t)v77 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v74;
          if (v22 >= v78 && v22 - v78 > 3)
          {
            uint64_t v80 = *v77;
            uint64_t v81 = *(unsigned int *)(((unint64_t)v77 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            *((void *)a3 + 2) = (((unint64_t)v77 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            WebKit::NetworkRTCProvider::setSocketOption((uint64_t)this, v72, v80, v81);
          }
          else
          {
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v96 = *((void *)a3 + 3);
            if (v96)
            {
              if (v22)
              {
                (*(void (**)(uint64_t))(*(void *)v96 + 16))(v96);
                uint64_t v145 = *(void *)a3;
                uint64_t v146 = *((void *)a3 + 1);
                uint64_t v147 = *((void *)a3 + 3);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                if (v147)
                {
                  if (v146) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v147 + 16))(v147, v145);
                  }
                }
              }
            }
LABEL_113:
            uint64_t v97 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v98 = *((void *)a3 + 3);
            if (v98) {
              BOOL v99 = v97 == 0;
            }
            else {
              BOOL v99 = 1;
            }
            if (!v99) {
LABEL_117:
            }
              (*(void (**)(uint64_t))(*(void *)v98 + 16))(v98);
          }
          goto LABEL_207;
        }
        unint64_t v87 = v22;
        uint64_t v88 = 0;
      }
      else
      {
LABEL_103:
        unint64_t v87 = 0;
        uint64_t v88 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v89 = *((void *)a3 + 3);
        if (v89)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(void *)v89 + 16))(v89);
            uint64_t v88 = *(void *)a3;
            unint64_t v87 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v87 = 0;
            uint64_t v88 = 0;
          }
        }
      }
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v90 = *((void *)a3 + 3);
      if (v90 && v87) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v90 + 16))(v90, v88, v87);
      }
      goto LABEL_113;
    case 0x20F:
      uint64_t v47 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v48) {
        goto LABEL_113;
      }
      WebKit::NetworkRTCProvider::stopResolver(this, v47);
      goto LABEL_207;
    default:
      goto LABEL_207;
  }
}

void non-virtual thunk to'WebKit::NetworkRTCProvider::didReceiveMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    unint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9B9080;
    *((void *)v2 + 1) = v1;
    int v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 24) + 8))();
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18NetworkRTCProvider16GetInterfaceNameEN6WebKit18NetworkRTCProviderES8_FvONS_3URLENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbbON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18NetworkRTCProvider16GetInterfaceNameEN6WebKit18NetworkRTCProviderES8_FvONS_3URLENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbbON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18NetworkRTCProvider16GetInterfaceNameEN6WebKit18NetworkRTCProviderES8_FvONS_3URLENS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEbbON7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int16 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int16 v5 = 3076;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::setNWParametersApplicationIdentifiers(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a2 && *a2)
  {
    uint64_t result = nw_parameters_set_source_application_by_bundle_id();
  }
  else if (*(unsigned char *)(a3 + 32))
  {
    uint64_t result = nw_parameters_set_source_application();
  }
  if (*(void *)a4)
  {
    if (*(_DWORD *)(*(void *)a4 + 4))
    {
      uint64_t result = (uint64_t)nw_parameters_set_attributed_bundle_identifierPtr();
      if (result)
      {
        unsigned __int16 v6 = (void (*)(uint64_t, char *))nw_parameters_set_attributed_bundle_identifierPtr();
        WTF::String::utf8();
        if (v9) {
          BOOL v7 = (char *)v9 + 16;
        }
        else {
          BOOL v7 = 0;
        }
        v6(v5, v7);
        uint64_t result = (uint64_t)v9;
        if (v9)
        {
          if (*(_DWORD *)v9 == 1) {
            return WTF::fastFree(v9, v8);
          }
          else {
            --*(_DWORD *)v9;
          }
        }
      }
    }
  }
  return result;
}

void sub_1989DFCA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

void *nw_parameters_set_attributed_bundle_identifierPtr(void)
{
    return (void *)nw_parameters_set_attributed_bundle_identifierPtr(void)::ptr;
  {
    unint64_t v1 = (void *)libnetworkLibrary(void)::dylib;
  }
  else
  {
    unint64_t v1 = dlopen("/usr/lib/libnetwork.dylib", 2);
    libnetworkLibrary(void)::dylib = (uint64_t)v1;
  }
  uint64_t result = dlsym(v1, "nw_parameters_set_attributed_bundle_identifier");
  nw_parameters_set_attributed_bundle_identifierPtr(void)::ptr = (uint64_t)result;
  return result;
}

uint64_t WebKit::setNWParametersTrackerOptions(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    nw_parameters_set_account_id();
  }
  nw_parameters_set_is_third_party_web_content();

  return MEMORY[0x1F40F3670](a1, a4);
}

BOOL WebKit::isKnownTracker(WebKit *this, const WebCore::RegistrableDomain *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)this) {
    uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v2 = &stru_1EEA10550;
  }
  v6[0] = v2;
  uint64_t v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:1];
  uint64_t v5 = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkNEHelperTrackerGetDisposition[0])(0, v3, 0, (uint64_t)&v5) != 0;
}

uint64_t initNEHelperTrackerGetDisposition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (_MergedGlobals_52 == 1)
  {
    BOOL v8 = (void *)qword_1EB358E08;
  }
  else
  {
    BOOL v8 = dlopen("/usr/lib/libnetworkextension.dylib", 2);
    if (!v8)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x1989DFF14);
    }
    qword_1EB358E08 = (uint64_t)v8;
    _MergedGlobals_52 = 1;
  }
  uint64_t v9 = (uint64_t (*)())dlsym(v8, "NEHelperTrackerGetDisposition");
  softLinkNEHelperTrackerGetDisposition[0] = v9;
  if (!v9) {
    goto LABEL_10;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a1, a2, a3, a4);
}

WTF::StringImpl *WebKit::NetworkSocketChannel::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v4 = (WebKit::WebSocketTask **)this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  switch(v5)
  {
    case 529:
      this = IPC::Decoder::decode<std::tuple<int,WTF::String>>(a3, v18);
      if (v20)
      {
        this = (WTF::StringImpl *)WebKit::NetworkSocketChannel::close(v4, v18[0], (const WTF::String *)&v19);
        if (v20)
        {
          this = v19;
          uint64_t v19 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
      break;
    case 530:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v18);
      if (v20)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v11)
        {
          uint64_t v15 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2);
          unint64_t v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)unint64_t v12 = &unk_1EE9B90D0;
          *((void *)v12 + 1) = v15;
          char v13 = v16;
          uint64_t v16 = 0;
          unint64_t v17 = v12;
          *((void *)v12 + 2) = v13;
          this = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
          if (v20)
          {
            WebKit::NetworkSocketChannel::sendData((uint64_t)v4, *(uint64_t *)v18, (uint64_t)v19, (uint64_t *)&v17);
LABEL_17:
            this = v17;
            unint64_t v17 = 0;
            if (this) {
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
            }
            return this;
          }
LABEL_21:
          __break(1u);
        }
      }
      break;
    case 531:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v18);
      if (v20)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v7)
        {
          char v14 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2);
          BOOL v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)BOOL v8 = &unk_1EE9B90A8;
          *((void *)v8 + 1) = v14;
          uint64_t v9 = v16;
          uint64_t v16 = 0;
          unint64_t v17 = v8;
          *((void *)v8 + 2) = v9;
          this = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
          if (v20)
          {
            WebKit::NetworkSocketChannel::sendString((uint64_t)v4, *(uint64_t *)v18, (uint64_t)v19, (uint64_t *)&v17);
            goto LABEL_17;
          }
          goto LABEL_21;
        }
      }
      break;
  }
  return this;
}

WTF::StringImpl *non-virtual thunk to'WebKit::NetworkSocketChannel::didReceiveMessage(WebKit::NetworkSocketChannel *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  return WebKit::NetworkSocketChannel::didReceiveMessage((WebKit::NetworkSocketChannel *)((char *)this - 8), a2, a3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel10SendStringEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B90A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel10SendStringEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B90A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel10SendStringEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3078;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel8SendDataEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B90D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel8SendDataEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B90D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20NetworkSocketChannel8SendDataEN6WebKit20NetworkSocketChannelES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3077;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  BOOL v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<int,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    unsigned __int16 v6 = (unsigned int *)(v3 + v4);
    *((void *)a1 + 2) = v6 + 1;
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder,int>(a1, (uint64_t)&v14, (uint64_t)a2);
    }
    unint64_t v8 = v2;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (v10)
    {
      char v11 = a1;
      char v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v9 = *(void *)v11;
        unint64_t v8 = *((void *)v11 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
  if (result)
  {
    if (v8)
    {
      unint64_t v12 = a2;
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<int,WTF::String>,void>::decode<IPC::Decoder,int>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 4))
  {
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(void *)(a3 + 8) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

void WebKit::NetworkStorageManager::didReceiveMessage(atomic_uchar *volatile *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  char v6 = (atomic_uchar **)(this + 2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x214:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::IDBResourceIdentifier>>>((uint64_t)&v12, (uint64_t *)a3);
      if (v16) {
        WebKit::NetworkStorageManager::abortOpenAndUpgradeNeeded((uint64_t)this, v12, (uint64_t)&v13);
      }
      break;
    case 0x215:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier>>((uint64_t)&v12, (uint64_t *)a3);
      if ((_BYTE)v14) {
        WebKit::NetworkStorageManager::abortTransaction((WebKit::NetworkStorageManager *)this, (const WebCore::IDBResourceIdentifier *)&v12);
      }
      break;
    case 0x216:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageAllCaches,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      break;
    case 0x217:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x218:
      IPC::handleMessage<Messages::NetworkStorageManager::CacheStorageDereference,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x219:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageOpenCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      break;
    case 0x21A:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStoragePutRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x21B:
      IPC::handleMessage<Messages::NetworkStorageManager::CacheStorageReference,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x21C:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error> const&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x21D:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x21E:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(a2, a3, (uint64_t *)this);
      break;
    case 0x21F:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x220:
      IPC::handleMessage<Messages::NetworkStorageManager::CancelConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&)>((uint64_t)a2, a3, (uint64_t)this);
      break;
    case 0x221:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Clear,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      break;
    case 0x222:
      IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)&v12, (uint64_t *)a3);
      if (v17) {
        WebKit::NetworkStorageManager::clearObjectStore((uint64_t)this, (WebCore::IDBRequestData *)&v12);
      }
      break;
    case 0x223:
      uint64_t v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v7) {
        WebKit::NetworkStorageManager::closeHandle((uint64_t)this, v8);
      }
      break;
    case 0x224:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CloseSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x225:
      IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,unsigned long long>>((uint64_t)&v12, (uint64_t *)a3);
      if (v15) {
        WebKit::NetworkStorageManager::commitTransaction((WebKit::NetworkStorageManager *)this, (const WebCore::IDBResourceIdentifier *)&v12);
      }
      break;
    case 0x226:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x227:
      IPC::handleMessage<Messages::NetworkStorageManager::CreateIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x228:
      IPC::handleMessage<Messages::NetworkStorageManager::CreateObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x229:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x22A:
      char v11 = (void *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v7) {
        WebKit::NetworkStorageManager::databaseConnectionClosed((uint64_t)this, v11);
      }
      break;
    case 0x22B:
      uint64_t v10 = (void *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v7) {
        WebKit::NetworkStorageManager::databaseConnectionPendingClose((uint64_t)this, v10);
      }
      break;
    case 0x22C:
      IPC::handleMessage<Messages::NetworkStorageManager::DeleteDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>((void **)a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x22D:
      IPC::handleMessage<Messages::NetworkStorageManager::DeleteIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x22E:
      IPC::handleMessage<Messages::NetworkStorageManager::DeleteObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::String const&)>((uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x22F:
      IPC::handleMessage<Messages::NetworkStorageManager::DeleteRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x230:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier>>((uint64_t)&v12, (uint64_t *)a3);
      if (v15) {
        WebKit::NetworkStorageManager::didFinishHandlingVersionChangeTransaction((uint64_t)this, v12);
      }
      break;
    case 0x231:
      IPC::handleMessage<Messages::NetworkStorageManager::DidFireVersionChangeEvent,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x232:
      uint64_t v9 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)v7) {
        WebKit::NetworkStorageManager::disconnectFromStorageArea((uint64_t *)this, (uint64_t)a2, v9);
      }
      break;
    case 0x233:
      IPC::handleMessage<Messages::NetworkStorageManager::EstablishTransaction,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBTransactionInfo const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x234:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Estimate,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(std::optional<WebCore::StorageEstimate>)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      break;
    case 0x235:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WebCore::ClientOrigin &&::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x236:
      IPC::handleMessage<Messages::NetworkStorageManager::GetAllDatabaseNamesAndVersions,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)>((void **)a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x237:
      IPC::handleMessage<Messages::NetworkStorageManager::GetAllRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x238:
      IPC::handleMessage<Messages::NetworkStorageManager::GetCount,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x239:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23A:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFile,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23B:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFileHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23C:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23D:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandleNames,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23E:
      IPC::handleMessage<Messages::NetworkStorageManager::GetRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x23F:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::IsSameEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x240:
      IPC::handleMessage<Messages::NetworkStorageManager::IterateCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x241:
      IPC::handleMessage<Messages::NetworkStorageManager::LockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>((IPC::Connection *)a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x242:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Move,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x243:
      IPC::handleMessage<Messages::NetworkStorageManager::OpenCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x244:
      IPC::handleMessage<Messages::NetworkStorageManager::OpenDBRequestCancelled,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBOpenRequestData const&)>((uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x245:
      IPC::handleMessage<Messages::NetworkStorageManager::OpenDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>((void **)a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x246:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Persist,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x247:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Persisted,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    case 0x248:
      IPC::handleMessage<Messages::NetworkStorageManager::PutOrAdd,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x249:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x24A:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      break;
    case 0x24B:
      IPC::handleMessage<Messages::NetworkStorageManager::RenameIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned long long,WTF::String const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x24C:
      IPC::handleMessage<Messages::NetworkStorageManager::RenameObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x24D:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x24E:
      IPC::handleMessage<Messages::NetworkStorageManager::ResetQuotaUpdatedBasedOnUsageForTesting,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin &&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x24F:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::Resolve,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x250:
      IPC::handleMessageAsync<Messages::NetworkStorageManager::SetItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      break;
    case 0x251:
      IPC::handleMessage<Messages::NetworkStorageManager::UnlockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>((IPC::Connection *)a2, (uint64_t *)a3, (WebKit::NetworkStorageManager *)this);
      break;
    default:
      break;
  }
  if (this) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v6, v7);
  }
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Persisted,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B9108;
      v8[1] = v12;
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      unint64_t v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16) {
        __break(1u);
      }
      WebKit::NetworkStorageManager::persisted(a3, (const WebCore::ClientOrigin *)v15, (uint64_t *)&v14);
      uint64_t v10 = (uint64_t)v14;
      unint64_t v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Persist,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v8 = &unk_1EE9B9130;
      *((void *)v8 + 1) = v12;
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      unint64_t v14 = v8;
      *((void *)v8 + 2) = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16) {
        __break(1u);
      }
      WebKit::NetworkStorageManager::persist(a3, (WebCore::SecurityOriginData *)v15, &v14);
      uint64_t v10 = v14;
      unint64_t v14 = 0;
      if (v10) {
        (*(void (**)(WTF::RunLoop *))(*(void *)v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Estimate,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(std::optional<WebCore::StorageEstimate>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B9158;
      v8[1] = v12;
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      unint64_t v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16) {
        __break(1u);
      }
      WebKit::NetworkStorageManager::estimate(a3, (WebCore::SecurityOriginData *)v15, (uint64_t *)&v14);
      uint64_t v10 = (uint64_t)v14;
      unint64_t v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WebCore::ClientOrigin &&::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B9180;
      v8[1] = v12;
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      unint64_t v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16) {
        __break(1u);
      }
      WebKit::NetworkStorageManager::fileSystemGetDirectory(a3, (uint64_t)a1, (WebCore::SecurityOriginData *)v15, (uint64_t *)&v14);
      uint64_t v10 = (uint64_t)v14;
      unint64_t v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::IsSameEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(BOOL)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v13, a2);
  if (v14)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B91A8;
      v8[1] = v10;
      uint64_t v9 = v11;
      char v11 = 0;
      uint64_t v12 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkStorageManager::isSameEntry(a3, v13[0], v13[1], (uint64_t *)&v12);
      uint64_t result = (uint64_t)v12;
      uint64_t v12 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFileHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,BOOL>>((uint64_t)&v14, a2);
  if (v17)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v8) {
      goto LABEL_6;
    }
    uint64_t v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    uint64_t v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v9 = &unk_1EE9B91D0;
    *((void *)v9 + 1) = v11;
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    *((void *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::NetworkStorageManager::getFileHandle(a3, (uint64_t)a1, v14, (WTF::String *)&v15, v16, (uint64_t *)&v13);
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v17)
    {
LABEL_6:
      uint64_t result = v15;
      char v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,BOOL,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,BOOL>>((uint64_t)&v14, a2);
  if (v17)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v8) {
      goto LABEL_6;
    }
    uint64_t v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    uint64_t v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v9 = &unk_1EE9B91F8;
    *((void *)v9 + 1) = v11;
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    *((void *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::NetworkStorageManager::getDirectoryHandle(a3, (uint64_t)a1, v14, (WTF::String *)&v15, v16, (uint64_t *)&v13);
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v17)
    {
LABEL_6:
      uint64_t result = v15;
      char v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveEntry,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,BOOL>>((uint64_t)&v14, a2);
  if (v17)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v8) {
      goto LABEL_6;
    }
    uint64_t v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    uint64_t v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v9 = &unk_1EE9B9220;
    *((void *)v9 + 1) = v11;
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    *((void *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::NetworkStorageManager::removeEntry(a3, v14, (const WTF::String *)&v15, (const WTF::String *)v16, (uint64_t *)&v13);
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v17)
    {
LABEL_6:
      uint64_t result = v15;
      char v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::Resolve,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v13, a2);
  if (v14)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B9248;
      v8[1] = v10;
      uint64_t v9 = v11;
      uint64_t v11 = 0;
      uint64_t v12 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkStorageManager::resolve(a3, v13[0], v13[1], (uint64_t *)&v12);
      uint64_t result = (uint64_t)v12;
      uint64_t v12 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::Move,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v7
    && (uint64_t v8 = v6,
        uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v10)
    && (uint64_t v11 = v9, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v25), (_BYTE)v26))
  {
    uint64_t v21 = v8;
    uint64_t v22 = v11;
    int v23 = v25;
    char v24 = 1;
    uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v13) {
      goto LABEL_8;
    }
    uint64_t v25 = (WTF::StringImpl *)v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v26, a1);
    char v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)char v14 = &unk_1EE9B9270;
    *((void *)v14 + 1) = v25;
    char v15 = v26;
    char v26 = 0;
    *((void *)v14 + 2) = v15;
    char v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v26);
    WebKit::NetworkStorageManager::move(a3, v21, v11, &v23, (uint64_t *)&v20);
    uint64_t result = v20;
    char v20 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v24)
    {
LABEL_8:
      uint64_t result = v23;
      int v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v17);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::GetFile,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EE9B9298;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      char v14 = v10;
      uint64_t v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::NetworkStorageManager::getFile(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      char v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EE9B92C0;
      v10[1] = v12;
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      char v14 = v10;
      uint64_t v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::NetworkStorageManager::createSyncAccessHandle(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      char v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CloseSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v7
    && (uint64_t v8 = v6,
        uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v10))
  {
    uint64_t v11 = v9;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v13)
    {
      uint64_t v19 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, a1);
      char v14 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v14 = &unk_1EE9B92E8;
      v14[1] = v19;
      char v15 = v20;
      char v20 = 0;
      uint64_t v21 = v14;
      uint64_t v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
      WebKit::NetworkStorageManager::closeSyncAccessHandle(a3, v8, v11, (uint64_t *)&v21);
      uint64_t result = (uint64_t)v21;
      uint64_t v21 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    uint64_t v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      uint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v18();
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!v7
    || (uint64_t v8 = v6,
        uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        !v10))
  {
LABEL_14:
    uint64_t v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v27 = v26 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (!v27)
    {
      uint64_t v28 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v28();
    }
    return result;
  }
  unint64_t v11 = a2[1];
  uint64_t v12 = *a2;
  unint64_t v13 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v11 < v13 || v11 - v13 <= 7)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v12, v11);
        uint64_t v23 = *a2;
        uint64_t v22 = a2[1];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_13;
  }
  char v15 = (unint64_t *)(v12 + v13);
  a2[2] = (uint64_t)(v15 + 1);
  if (!v12)
  {
    uint64_t v22 = v11;
    uint64_t v23 = 0;
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25 && v22) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
    }
    goto LABEL_14;
  }
  uint64_t v16 = v9;
  unint64_t v17 = *v15;
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
  if (v19)
  {
    uint64_t v29 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v30, a1);
    char v20 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v20 = &unk_1EE9B9310;
    v20[1] = v29;
    uint64_t v21 = v30;
    uint64_t v30 = 0;
    char v31 = v20;
    v20[2] = v21;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v30);
    WebKit::NetworkStorageManager::requestNewCapacityForSyncAccessHandle(a3, v8, v16, v17, (uint64_t *)&v31);
    uint64_t result = (uint64_t)v31;
    char v31 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandleNames,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v9)
    {
      uint64_t v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EE9B9338;
      v10[1] = v12;
      unint64_t v11 = v13;
      unint64_t v13 = 0;
      char v14 = v10;
      uint64_t v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::NetworkStorageManager::getHandleNames(a3, v8, (uint64_t *)&v14);
      uint64_t result = (uint64_t)v14;
      char v14 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::GetHandle,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,WebKit::FileSystemStorageError>)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v7 && (uint64_t v8 = v6, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v21), (_BYTE)v22))
  {
    uint64_t v18 = v8;
    char v19 = v21;
    char v20 = 1;
    uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v10) {
      goto LABEL_7;
    }
    uint64_t v21 = (WTF::StringImpl *)v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a1);
    unint64_t v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)unint64_t v11 = &unk_1EE9B9360;
    *((void *)v11 + 1) = v21;
    uint64_t v12 = v22;
    uint64_t v22 = 0;
    *((void *)v11 + 2) = v12;
    unint64_t v17 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v22);
    WebKit::NetworkStorageManager::getHandle(a3, (uint64_t)a1, v18, (WTF::String *)&v19, (uint64_t *)&v17);
    uint64_t result = v17;
    unint64_t v17 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v20)
    {
LABEL_7:
      uint64_t result = v19;
      char v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v14 = *a2;
    uint64_t v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result) {
      BOOL v16 = v15 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v14);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>(v15, a2);
  if (v16)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    if (v7)
    {
      uint64_t v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B9388;
      v8[1] = v12;
      uint64_t v9 = v13;
      unint64_t v13 = 0;
      uint64_t v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16) {
        __break(1u);
      }
      IPC::callMemberFunction<WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&),std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>(a3, (uint64_t)WebKit::NetworkStorageManager::connectToStorageArea, 0, (uint64_t)a1, (uint64_t)v15, (uint64_t)&v14);
      char v10 = v14;
      uint64_t v14 = 0;
      if (v10) {
        (*(void (**)(void *))(*v10 + 8))(v10);
      }
    }
  }
  return std::optional<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>::~optional((uint64_t)v15);
}

void IPC::handleMessage<Messages::NetworkStorageManager::CancelConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&)>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v6 = IPC::Decoder::decode<WebCore::StorageType>(a2);
  if (v6 <= 0xFFu
    || (char v7 = v6,
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)&v13, (uint64_t *)a2), !v14))
  {
    LOBYTE(v15) = 0;
    char v21 = 0;
    goto LABEL_6;
  }
  IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a2, v22);
  char v8 = v24;
  if (v24)
  {
    LOBYTE(v15) = v7;
    long long v16 = v13;
    v17[0] = 0;
    int v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v22);
    v19[0] = 0;
    int v20 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v19, (uint64_t)&v23);
    char v8 = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  char v21 = v8;
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22);
  if (!v21)
  {
LABEL_6:
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v11 = *((void *)a2 + 3);
    if (v11) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    if (!v21) {
      return;
    }
  }
  WebKit::NetworkStorageManager::cancelConnectToStorageArea(a3, a1, v15, v16, SBYTE8(v16), (WebCore::SecurityOriginData *)v17);
  if (v21)
  {
    if (v20 != -1) {
      ((void (*)(unsigned char *, unsigned char *))off_1EE9B90E8[v20])(v22, v19);
    }
    int v20 = -1;
    if (v18 != -1) {
      ((void (*)(unsigned char *, unsigned char *))off_1EE9B90E8[v18])(v22, v17);
    }
  }
}

IPC::Decoder *IPC::handleMessageAsync<Messages::NetworkStorageManager::SetItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::String &,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (!v8
    || (uint64_t v9 = v7,
        uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        !v11)
    || (uint64_t v3 = v10, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v31), !v32))
  {
    int v16 = 0;
    LOBYTE(v26) = 0;
    char v30 = 0;
    goto LABEL_16;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v33);
  if (v34)
  {
    uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v35);
    if (!(_BYTE)v36)
    {
      LOBYTE(v26) = 0;
      char v30 = 0;
      if (v34)
      {
        uint64_t result = v33;
        unint64_t v33 = 0;
        if (result)
        {
          if (*(_DWORD *)result != 2)
          {
            int v16 = 0;
            *(_DWORD *)result -= 2;
            goto LABEL_49;
          }
          uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v13);
        }
      }
      int v16 = 0;
      goto LABEL_49;
    }
    if (v32 && v34)
    {
      int v14 = 0;
      uint64_t v26 = v9;
      int v15 = v31;
      char v31 = 0;
      BOOL v27 = v15;
      uint64_t v28 = v33;
      uint64_t v29 = v35;
      int v16 = 1;
      char v30 = 1;
      goto LABEL_9;
    }
    __break(1u);
  }
  int v16 = 0;
  LOBYTE(v26) = 0;
  char v30 = 0;
LABEL_49:
  int v14 = 1;
LABEL_9:
  if (!v32 || (result = v31, char v31 = 0, !result))
  {
LABEL_13:
    if (!v14) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_13;
  }
  uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v13);
  if (!v14) {
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (IPC::Decoder *)a2[3];
  if (result) {
    BOOL v19 = v18 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19) {
    uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v17);
  }
LABEL_21:
  if (v16)
  {
    uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v21) {
      goto LABEL_26;
    }
    unint64_t v35 = (WTF::StringImpl *)v20;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v36, a1);
    uint64_t v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v22 = &unk_1EE9B93B0;
    *((void *)v22 + 1) = v35;
    uint64_t v23 = v36;
    long long v36 = 0;
    *((void *)v22 + 2) = v23;
    unint64_t v33 = v22;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v36);
    WebKit::NetworkStorageManager::setItem(a3, (uint64_t)a1, v26, v3, (uint64_t)&v27, (uint64_t)&v28, (uint64_t)&v29, (uint64_t *)&v33);
    uint64_t result = v33;
    unint64_t v33 = 0;
    if (result) {
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *))(*(void *)result + 8))(result);
    }
    if (v30)
    {
LABEL_26:
      char v24 = v29;
      uint64_t v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v21);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = v28;
      uint64_t v28 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v21);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      uint64_t result = v27;
      BOOL v27 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (IPC::Decoder *)WTF::StringImpl::destroy(result, v21);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::RemoveItem,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits,WTF::HashTableTraits> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = v6;
  uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!v10) {
    goto LABEL_24;
  }
  uint64_t v11 = v9;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v26);
  if (!v27) {
    goto LABEL_24;
  }
  BOOL v12 = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v28);
  if ((_BYTE)v29)
  {
    if (v27)
    {
      uint64_t v23 = v26;
      char v24 = v28;
      char v25 = 1;
      uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
      if (!(_BYTE)v15) {
        goto LABEL_10;
      }
      uint64_t v28 = (WTF::StringImpl *)v14;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, a1);
      int v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)int v16 = &unk_1EE9B93D8;
      *((void *)v16 + 1) = v28;
      uint64_t v17 = v29;
      uint64_t v29 = 0;
      *((void *)v16 + 2) = v17;
      uint64_t v26 = v16;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
      WebKit::NetworkStorageManager::removeItem(a3, (uint64_t)a1, v8, v11, (uint64_t)&v23, (uint64_t)&v24, (uint64_t *)&v26);
      uint64_t result = v26;
      uint64_t v26 = 0;
      if (result) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
      }
      if (v25)
      {
LABEL_10:
        BOOL v19 = v24;
        char v24 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v15);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        uint64_t result = v23;
        uint64_t v23 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      return result;
    }
    __break(1u);
  }
  else
  {
    if (!v27) {
      goto LABEL_24;
    }
    BOOL v12 = v26;
    uint64_t v26 = 0;
    if (!v12) {
      goto LABEL_24;
    }
    if (*(_DWORD *)v12 != 2)
    {
      *(_DWORD *)v12 -= 2;
      goto LABEL_24;
    }
  }
  WTF::StringImpl::destroy(v12, v13);
LABEL_24:
  uint64_t v20 = *a2;
  uint64_t v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (WTF::StringImpl *)a2[3];
  if (result) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v20);
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::NetworkStorageManager::Clear,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String &&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v7
    && (uint64_t v8 = v6,
        uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v10)
    && (uint64_t v11 = v9, IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v25), (_BYTE)v26))
  {
    uint64_t v21 = v8;
    uint64_t v22 = v11;
    uint64_t v23 = v25;
    char v24 = 1;
    uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v13) {
      goto LABEL_8;
    }
    char v25 = (WTF::StringImpl *)v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v26, a1);
    uint64_t v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v14 = &unk_1EE9B9400;
    *((void *)v14 + 1) = v25;
    int v15 = v26;
    uint64_t v26 = 0;
    *((void *)v14 + 2) = v15;
    uint64_t v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v26);
    WebKit::NetworkStorageManager::clear(a3, (uint64_t)a1, v21, v11, (uint64_t)&v23, (uint64_t *)&v20);
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v24)
    {
LABEL_8:
      uint64_t result = v23;
      uint64_t v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v17);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::OpenDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>(void **a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(v7, a2);
  if (v7[120]) {
    WebKit::NetworkStorageManager::openDatabase(a3, a1, (const WebCore::IDBOpenRequestData *)v7);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::OpenDBRequestCancelled,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBOpenRequestData const&)>(uint64_t *a1, WebKit::NetworkStorageManager *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(v5, a1);
  if (v5[120]) {
    WebKit::NetworkStorageManager::openDBRequestCancelled(a2, (const WebCore::IDBOpenRequestData *)v5);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::DeleteDatabase,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBOpenRequestData const&)>(void **a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(v7, a2);
  if (v7[120]) {
    WebKit::NetworkStorageManager::deleteDatabase(a3, a1, (const WebCore::IDBOpenRequestData *)v7);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::EstablishTransaction,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBTransactionInfo const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    uint64_t v6 = (void *)v4;
    IPC::Decoder::decode<WebCore::IDBTransactionInfo>(a1, (uint64_t)&v17);
    if (v21)
    {
      v14[0] = v18;
      uint64_t v7 = v19;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      v14[1] = v7;
      uint64_t v8 = v20;
      uint64_t v20 = 0;
      int v15 = v8;
      char v16 = 1;
      std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
      WebKit::NetworkStorageManager::establishTransaction(a2, v6);
      uint64_t v9 = v15;
      int v15 = 0;
      if (v9) {
        std::default_delete<WebCore::IDBDatabaseInfo>::operator()[abi:sn180100]((int)&v15, v9);
      }
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v9);
    }
    std::__optional_destruct_base<WebCore::IDBTransactionInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
  }
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v11);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::DidFireVersionChangeEvent,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier const&,WebCore::IndexedDB::ConnectionClosedOnBehalfOfServer)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    uint64_t v6 = (void *)v4;
    IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a1, (uint64_t)&v23);
    if (v24)
    {
      unint64_t v7 = a1[1];
      uint64_t v8 = *a1;
      unint64_t v9 = a1[2] - *a1;
      if (v7 <= v9)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        *a1 = 0;
        a1[1] = 0;
        uint64_t v14 = a1[3];
        if (v14)
        {
          if (v7)
          {
            (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
            uint64_t v13 = *a1;
            uint64_t v12 = a1[1];
          }
          else
          {
            uint64_t v12 = 0;
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        char v10 = (unsigned __int8 *)(v8 + v9);
        a1[2] = (uint64_t)(v10 + 1);
        if (v8)
        {
          if (*v10 < 2u) {
            return WebKit::NetworkStorageManager::didFireVersionChangeEvent(a2, v6);
          }
          goto LABEL_9;
        }
        uint64_t v12 = v7;
        uint64_t v13 = 0;
      }
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v15 = a1[3];
      if (v15)
      {
        if (v12)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13, v12);
          uint64_t v8 = *a1;
          unint64_t v7 = a1[1];
        }
        else
        {
          unint64_t v7 = 0;
          uint64_t v8 = 0;
        }
      }
LABEL_9:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v16 = a1[3];
      if (v16)
      {
        if (v7)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v8);
          uint64_t v20 = a1[3];
          uint64_t v21 = *a1;
          uint64_t v22 = a1[1];
          *a1 = 0;
          a1[1] = 0;
          if (v20)
          {
            if (v22) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v21);
            }
          }
        }
      }
    }
  }
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result) {
    BOOL v19 = v18 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::CreateObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBObjectStoreInfo const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v23, a1);
  if (!v25)
  {
    LOBYTE(v13[0]) = 0;
    char v22 = 0;
    goto LABEL_22;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::IDBObjectStoreInfo>(a1, (uint64_t)&v26);
  char v6 = v30;
  if (v30)
  {
    if (!v25)
    {
      __break(1u);
      return result;
    }
    uint64_t v13[4] = v23[4];
    v13[5] = v23[5];
    v13[0] = v23[0];
    v13[1] = v23[1];
    uint64_t v13[2] = v23[2];
    _OWORD v13[3] = v23[3];
    unint64_t v7 = v27;
    uint64_t v14 = v24;
    uint64_t v15 = v26;
    char v27 = 0;
    uint64_t v16 = v7;
    v17[0] = 0;
    char v19 = 0;
    if (v28[24])
    {
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v28);
      char v19 = 1;
    }
    char v20 = v28[32];
    uint64_t v8 = v29;
    uint64_t v29 = 0;
    uint64_t v21 = v8;
    char v6 = 1;
  }
  else
  {
    LOBYTE(v13[0]) = 0;
  }
  char v22 = v6;
  std::__optional_destruct_base<WebCore::IDBObjectStoreInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v5);
  if (!v22)
  {
LABEL_22:
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return result;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v10);
    if (!v22) {
      return result;
    }
  }
  uint64_t result = WebKit::NetworkStorageManager::createObjectStore(a2, (WebCore::IDBRequestData *)v13, (uint64_t)&v15);
  if (v22)
  {
    if (v21) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::IDBIndexInfo>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::IDBIndexInfo,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::IDBIndexInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v21, v9);
    }
    if (v19)
    {
      if (v18 != -1) {
        ((void (*)(_OWORD *, unsigned char *))off_1EE9B9418[v18])(v23, v17);
      }
      int v18 = -1;
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::DeleteObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::String const&)>(uint64_t *a1, WebKit::NetworkStorageManager *a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v13, a1);
  if (v15 && (uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v16), v17))
  {
    if (v15)
    {
      v9[4] = v13[4];
      v9[5] = v13[5];
      v9[0] = v13[0];
      v9[1] = v13[1];
      _OWORD v9[2] = v13[2];
      _OWORD v9[3] = v13[3];
      uint64_t v10 = v14;
      uint64_t v11 = v16;
      char v12 = 1;
      uint64_t result = WebKit::NetworkStorageManager::deleteObjectStore(a2, (const WebCore::IDBRequestData *)v9, (const WTF::String *)&v11);
      if (v12)
      {
        uint64_t result = v11;
        uint64_t v11 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::RenameObjectStore,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)v5, a1);
  if (v7)
  {
    uint64_t result = WebKit::NetworkStorageManager::renameObjectStore(a2, (WebCore::IDBRequestData *)v5, v5[13], (uint64_t)&v6);
    if (v7)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::CreateIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIndexInfo const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v20, a1);
  if (!v22)
  {
    LOBYTE(v12[0]) = 0;
    char v19 = 0;
    goto LABEL_16;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::IDBIndexInfo>(a1, (uint64_t)&v23);
  char v6 = v26;
  if (v26)
  {
    if (!v22)
    {
      __break(1u);
      return result;
    }
    v12[4] = v20[4];
    v12[5] = v20[5];
    uint64_t v13 = v21;
    v12[0] = v20[0];
    v12[1] = v20[1];
    void v12[2] = v20[2];
    v12[3] = v20[3];
    long long v14 = v23;
    char v7 = v24;
    uint64_t v24 = 0;
    char v15 = v7;
    v16[0] = 0;
    int v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>>((uint64_t)v16, (uint64_t)v25);
    __int16 v18 = v25[12];
    char v6 = 1;
  }
  else
  {
    LOBYTE(v12[0]) = 0;
  }
  char v19 = v6;
  std::__optional_destruct_base<WebCore::IDBIndexInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v5);
  if (!v19)
  {
LABEL_16:
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11) {
      return result;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v9);
    if (!v19) {
      return result;
    }
  }
  uint64_t result = (WTF::StringImpl *)WebKit::NetworkStorageManager::createIndex(a2, (WebCore::IDBRequestData *)v12);
  if (v19)
  {
    if (v17 != -1) {
      ((void (*)(_OWORD *, unsigned char *))off_1EE9B9418[v17])(v20, v16);
    }
    int v17 = -1;
    uint64_t result = v15;
    char v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::DeleteIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)v5, a1);
  if (v7)
  {
    uint64_t result = (WTF::StringImpl *)WebKit::NetworkStorageManager::deleteIndex(a2, (WebCore::IDBRequestData *)v5);
    if (v7)
    {
      uint64_t result = v6;
      char v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::NetworkStorageManager::RenameIndex,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned long long,WTF::String const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v28, a1);
  if (!v30) {
    goto LABEL_18;
  }
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (!v5) {
    goto LABEL_18;
  }
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v7, v6);
        uint64_t v14 = *a1;
        uint64_t v15 = a1[1];
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
      }
    }
LABEL_17:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = (IPC::Decoder *)a1[3];
    if (!v13) {
      goto LABEL_18;
    }
LABEL_25:
    if (v15) {
      (*(void (**)(IPC::Decoder *, uint64_t))(*(void *)v13 + 16))(v13, v14);
    }
    goto LABEL_18;
  }
  uint64_t v10 = (uint64_t *)(v7 + v8);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    uint64_t v15 = v6;
    uint64_t v14 = 0;
    goto LABEL_17;
  }
  uint64_t v11 = v4;
  uint64_t v12 = *v10;
  uint64_t v13 = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v31);
  if (!v32)
  {
LABEL_18:
    uint64_t v19 = *a1;
    uint64_t v20 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v19);
    }
    return result;
  }
  if (!v30)
  {
    __break(1u);
    goto LABEL_25;
  }
  v22[4] = v28[4];
  v22[5] = v28[5];
  v22[0] = v28[0];
  v22[1] = v28[1];
  v22[2] = v28[2];
  v22[3] = v28[3];
  uint64_t v23 = v29;
  uint64_t v24 = v11;
  uint64_t v25 = v12;
  char v26 = v31;
  char v27 = 1;
  uint64_t result = (WTF::StringImpl *)WebKit::NetworkStorageManager::renameIndex(a2, (WebCore::IDBRequestData *)v22);
  if (v27)
  {
    uint64_t result = v26;
    char v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void IPC::handleMessage<Messages::NetworkStorageManager::PutOrAdd,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBRequestData const&,WebCore::IDBKeyData const&,WebCore::IDBValue const&,WebCore::IndexedDB::ObjectStoreOverwriteMode)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v38, a2);
  if (!v40)
  {
    LOBYTE(v28[0]) = 0;
    char v37 = 0;
    goto LABEL_12;
  }
  IPC::Decoder::decode<WebCore::IDBKeyData>(a2, v41);
  if (!v44)
  {
    LOBYTE(v28[0]) = 0;
    char v37 = 0;
    goto LABEL_26;
  }
  uint64_t v6 = IPC::Decoder::decode<WebCore::IDBValue>((IPC::Decoder *)a2, (uint64_t)&v45);
  char v8 = v49;
  if (!v49) {
    goto LABEL_22;
  }
  unint64_t v9 = a2[1];
  uint64_t v7 = (char *)*a2;
  unint64_t v10 = a2[2] - *a2;
  if (v9 <= v10)
  {
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = a2[3];
    if (v21)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v12 = *a2;
        uint64_t v14 = a2[1];
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v12 = 0;
      }
    }
LABEL_19:
    unint64_t v9 = 0;
    uint64_t v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v6 = a2[3];
    if (v6) {
      goto LABEL_36;
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v22 = a2[3];
    if (v22 && v9) {
      (*(void (**)(uint64_t, char *))(*(void *)v22 + 16))(v22, v7);
    }
    char v8 = 0;
LABEL_22:
    LOBYTE(v28[0]) = 0;
    goto LABEL_23;
  }
  uint64_t v11 = &v7[v10];
  uint64_t v12 = (uint64_t)(v11 + 1);
  a2[2] = (uint64_t)(v11 + 1);
  if (!v7)
  {
    uint64_t v14 = v9;
    uint64_t v12 = 0;
    goto LABEL_19;
  }
  unsigned int v13 = *v11;
  if (v13 >= 3) {
    goto LABEL_20;
  }
  uint64_t v14 = v40;
  if (!v40 || (uint64_t v14 = v44) == 0)
  {
    __break(1u);
LABEL_36:
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v12, v14);
      uint64_t v7 = (char *)*a2;
      unint64_t v9 = a2[1];
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v7 = 0;
    }
    goto LABEL_20;
  }
  v28[4] = v38[4];
  v28[5] = v38[5];
  uint64_t v29 = v39;
  v28[0] = v38[0];
  v28[1] = v38[1];
  v28[2] = v38[2];
  v28[3] = v38[3];
  v30[0] = v41[0];
  v31[0] = 0;
  int v32 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v31, (uint64_t)v42);
  long long v15 = v45;
  long long v45 = 0uLL;
  *(_OWORD *)unint64_t v33 = v15;
  *(void *)&long long v15 = v46;
  uint64_t v46 = 0;
  uint64_t v34 = v15;
  uint64_t v16 = v47;
  uint64_t v47 = 0;
  v35[0] = v16;
  *(void *)&long long v15 = v48;
  uint64_t v48 = 0;
  v35[1] = v15;
  char v8 = 1;
  unsigned __int8 v36 = v13;
LABEL_23:
  char v37 = v8;
  uint64_t v23 = std::__optional_destruct_base<WebCore::IDBValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v7);
  if (v44 && v43 != -1) {
    ((void (*)(uint64_t, unsigned char *))off_1EE9B9428[v43])(v23, v42);
  }
LABEL_26:
  if (!v37)
  {
LABEL_12:
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = a2[3];
    if (v19) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
    if (!v37) {
      return;
    }
  }
  WebKit::NetworkStorageManager::putOrAdd(a3, a1, (WebCore::IDBRequestData *)v28, (uint64_t)v30, (uint64_t)v33, v36);
  if (v37)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v24);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33[1], v25);
    char v27 = v33[0];
    v33[0] = 0;
    if (v27) {
      WTF::ThreadSafeRefCounted<WebCore::ThreadSafeDataBufferImpl,(WTF::DestructionThread)0>::deref((uint64_t)v27, v26);
    }
    if (v32 != -1) {
      ((void (*)(_OWORD *, unsigned char *))off_1EE9B9428[v32])(v38, v31);
    }
  }
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::GetRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetRecordData const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v22, a1);
  if (!v24)
  {
    LOBYTE(v11[0]) = 0;
    char v21 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = IPC::ArgumentCoder<WebCore::IDBGetRecordData,void>::decode(a1, (uint64_t)v25);
  if (v33)
  {
    while (!v24)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
        if (v33) {
          continue;
        }
      }
      goto LABEL_24;
    }
    v11[4] = v22[4];
    v11[5] = v22[5];
    uint64_t v12 = v23;
    v11[0] = v22[0];
    v11[1] = v22[1];
    v11[2] = v22[2];
    v11[3] = v22[3];
    char v13 = v25[0];
    v14[0] = 0;
    int v15 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v26);
    char v16 = v28;
    v17[0] = 0;
    int v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v29);
    __int16 v19 = v31;
    char v20 = v32;
    char v21 = 1;
    if (v33)
    {
      if (v30 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v30])(&v34, v29);
      }
      int v30 = -1;
      if (v27 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v27])(&v34, v26);
      }
    }
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v4 = a1[3];
    if (v4) {
      goto LABEL_26;
    }
LABEL_24:
    LOBYTE(v11[0]) = 0;
    char v21 = 0;
  }
  if (!v21)
  {
LABEL_17:
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v8);
    if (!v21) {
      return result;
    }
  }
  uint64_t result = WebKit::NetworkStorageManager::getRecord(a2, (WebCore::IDBRequestData *)v11);
  if (v21)
  {
    if (v18 != -1) {
      uint64_t result = ((uint64_t (*)(_OWORD *, unsigned char *))off_1EE9B9428[v18])(v22, v17);
    }
    int v18 = -1;
    if (v15 != -1) {
      return ((uint64_t (*)(_OWORD *, unsigned char *))off_1EE9B9428[v15])(v22, v14);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::GetAllRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBGetAllRecordsData const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v23, a1);
  if (!v25)
  {
    LOBYTE(v11[0]) = 0;
    char v22 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = IPC::ArgumentCoder<WebCore::IDBGetAllRecordsData,void>::decode(a1, (uint64_t)v26);
  if (v35)
  {
    while (!v25)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
        if (v35) {
          continue;
        }
      }
      goto LABEL_24;
    }
    v11[4] = v23[4];
    v11[5] = v23[5];
    uint64_t v12 = v24;
    v11[0] = v23[0];
    v11[1] = v23[1];
    v11[2] = v23[2];
    v11[3] = v23[3];
    char v13 = v26[0];
    v14[0] = 0;
    int v15 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v27);
    char v16 = v29;
    v17[0] = 0;
    int v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v30);
    __int16 v19 = v32;
    long long v20 = v33;
    long long v21 = v34;
    char v22 = 1;
    if (v35)
    {
      if (v31 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v31])(&v36, v30);
      }
      int v31 = -1;
      if (v28 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v28])(&v36, v27);
      }
    }
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v4 = a1[3];
    if (v4) {
      goto LABEL_26;
    }
LABEL_24:
    LOBYTE(v11[0]) = 0;
    char v22 = 0;
  }
  if (!v22)
  {
LABEL_17:
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v8);
    if (!v22) {
      return result;
    }
  }
  uint64_t result = WebKit::NetworkStorageManager::getAllRecords(a2, (WebCore::IDBRequestData *)v11);
  if (v22)
  {
    if (v18 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B9428[v18])(v26, v17);
    }
    int v18 = -1;
    if (v15 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B9428[v15])(v26, v14);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::GetCount,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>>((uint64_t)v4, a1);
  if (v4[176]) {
    WebKit::NetworkStorageManager::getCount(a2, (WebCore::IDBRequestData *)v4);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::DeleteRecord,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBKeyRangeData const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>>((uint64_t)v4, a1);
  if (v4[176]) {
    WebKit::NetworkStorageManager::deleteRecord(a2, (WebCore::IDBRequestData *)v4);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::OpenCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBCursorInfo const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v26, a1);
  if (!v28)
  {
    LOBYTE(v11[0]) = 0;
    char v25 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = IPC::ArgumentCoder<WebCore::IDBCursorInfo,void>::decode(a1, (uint64_t)v29);
  if (v39)
  {
    while (!v28)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
        if (v39) {
          continue;
        }
      }
      goto LABEL_24;
    }
    v11[4] = v26[4];
    v11[5] = v26[5];
    uint64_t v12 = v27;
    v11[0] = v26[0];
    v11[1] = v26[1];
    v11[2] = v26[2];
    v11[3] = v26[3];
    long long v15 = v29[2];
    long long v14 = v29[1];
    long long v13 = v29[0];
    char v16 = v30;
    v17[0] = 0;
    int v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v31);
    char v19 = v33;
    v20[0] = 0;
    int v21 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v20, (uint64_t)v34);
    __int16 v22 = v36;
    __int16 v23 = v37;
    char v24 = v38;
    char v25 = 1;
    if (v39)
    {
      if (v35 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v35])(&v40, v34);
      }
      int v35 = -1;
      if (v32 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v32])(&v40, v31);
      }
    }
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v4 = a1[3];
    if (v4) {
      goto LABEL_26;
    }
LABEL_24:
    LOBYTE(v11[0]) = 0;
    char v25 = 0;
  }
  if (!v25)
  {
LABEL_17:
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v8);
    if (!v25) {
      return result;
    }
  }
  uint64_t result = WebKit::NetworkStorageManager::openCursor(a2, (WebCore::IDBRequestData *)v11);
  if (v25)
  {
    if (v21 != -1) {
      uint64_t result = ((uint64_t (*)(_OWORD *, unsigned char *))off_1EE9B9428[v21])(v29, v20);
    }
    int v21 = -1;
    if (v18 != -1) {
      return ((uint64_t (*)(_OWORD *, unsigned char *))off_1EE9B9428[v18])(v29, v17);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::IterateCursor,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::IDBRequestData const&,WebCore::IDBIterateCursorData const&)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v22, a1);
  if (!v24)
  {
    LOBYTE(v11[0]) = 0;
    char v21 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = IPC::ArgumentCoder<WebCore::IDBIterateCursorData,void>::decode(a1, (uint64_t)v25);
  if (v33)
  {
    while (!v24)
    {
      __break(1u);
LABEL_26:
      if (v6)
      {
        uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
        if (v33) {
          continue;
        }
      }
      goto LABEL_24;
    }
    v11[4] = v22[4];
    v11[5] = v22[5];
    uint64_t v12 = v23;
    v11[0] = v22[0];
    v11[1] = v22[1];
    v11[2] = v22[2];
    v11[3] = v22[3];
    char v13 = v25[0];
    v14[0] = 0;
    int v15 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v26);
    char v16 = v28;
    v17[0] = 0;
    int v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v29);
    int v19 = v31;
    char v20 = v32;
    char v21 = 1;
    if (v33)
    {
      if (v30 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v30])(&v34, v29);
      }
      int v30 = -1;
      if (v27 != -1) {
        ((void (*)(char *, unsigned char *))off_1EE9B9428[v27])(&v34, v26);
      }
    }
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v4 = a1[3];
    if (v4) {
      goto LABEL_26;
    }
LABEL_24:
    LOBYTE(v11[0]) = 0;
    char v21 = 0;
  }
  if (!v21)
  {
LABEL_17:
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v8);
    if (!v21) {
      return result;
    }
  }
  uint64_t result = WebKit::NetworkStorageManager::iterateCursor(a2, (WebCore::IDBRequestData *)v11);
  if (v21)
  {
    if (v18 != -1) {
      uint64_t result = ((uint64_t (*)(_OWORD *, unsigned char *))off_1EE9B9428[v18])(v22, v17);
    }
    int v18 = -1;
    if (v15 != -1) {
      return ((uint64_t (*)(_OWORD *, unsigned char *))off_1EE9B9428[v15])(v22, v14);
    }
  }
  return result;
}

WTF *IPC::handleMessage<Messages::NetworkStorageManager::GetAllDatabaseNamesAndVersions,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::IDBResourceIdentifier const&,WebCore::ClientOrigin const&)>(void **a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v10);
  if (!v11)
  {
    LOBYTE(v12) = 0;
    char v17 = 0;
    goto LABEL_14;
  }
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, v18);
  char v6 = v20;
  if (v20)
  {
    if (!v11) {
      __break(1u);
    }
    long long v12 = v10;
    v13[0] = 0;
    int v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v18);
    v15[0] = 0;
    int v16 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, (uint64_t)&v19);
    char v6 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  char v17 = v6;
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
  if (!v17)
  {
LABEL_14:
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (!result) {
      return result;
    }
    if (!v9) {
      return result;
    }
    uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v8);
    if (!v17) {
      return result;
    }
  }
  uint64_t result = WebKit::NetworkStorageManager::getAllDatabaseNamesAndVersions(a3, a1, (const WebCore::IDBResourceIdentifier *)&v12, (const WebCore::ClientOrigin *)v13);
  if (v17)
  {
    if (v16 != -1) {
      uint64_t result = (WTF *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B90E8[v16])(v18, v15);
    }
    int v16 = -1;
    if (v14 != -1) {
      return (WTF *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B90E8[v14])(v18, v13);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageOpenCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>(a2, v15);
  if (v17)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if ((_BYTE)v6)
    {
      uint64_t v12 = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B9480;
      v8[1] = v12;
      uint64_t v9 = v13;
      char v13 = 0;
      int v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v17) {
        __break(1u);
      }
      WebKit::NetworkStorageManager::cacheStorageOpenCache(a3, (WebCore::SecurityOriginData *)v15, &v16, (unsigned int *)&v14);
      long long v10 = v14;
      int v14 = 0;
      if (v10) {
        (*(void (**)(void *))(*v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveCache,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::DOMCacheEngine::Error> const&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v13, a2);
  if (v14)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B94A8;
      v8[1] = v10;
      uint64_t v9 = v11;
      char v11 = 0;
      uint64_t v12 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::NetworkStorageManager::cacheStorageRemoveCache(a3, v13[0], v13[1], (uint64_t *)&v12);
      uint64_t result = (uint64_t)v12;
      uint64_t v12 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageAllCaches,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, &v30);
  char v6 = v33;
  if (!v33)
  {
LABEL_12:
    v24[0] = 0;
    goto LABEL_13;
  }
  unint64_t v7 = a2[1];
  uint64_t v8 = *a2;
  unint64_t v9 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v7 < v9 || v7 - v9 <= 7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v8, v7);
        uint64_t v14 = *a2;
        uint64_t v13 = a2[1];
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_10;
  }
  char v11 = (void **)(v8 + v9);
  a2[2] = (uint64_t)(v11 + 1);
  if (!v8)
  {
    uint64_t v13 = v7;
    uint64_t v14 = 0;
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16 && v13) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
    }
    char v6 = 0;
    goto LABEL_12;
  }
  uint64_t v12 = *v11;
  v24[0] = 0;
  int v25 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v24, (uint64_t)&v30);
  v26[0] = 0;
  int v27 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v26, (uint64_t)&v32);
  char v28 = v12;
  char v6 = 1;
LABEL_13:
  char v29 = v6;
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30);
  if (v29
    || (v21 = *a2, v22 = a2[1], *a2 = 0, a2[1] = 0, (uint64_t result = a2[3]) != 0)
    && v22
    && (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v21), v29))
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v18)
    {
      uint64_t v30 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v31, a1);
      uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v19 = &unk_1EE9B94D0;
      v19[1] = v30;
      char v20 = v31[0];
      v31[0] = 0;
      void v19[2] = v20;
      uint64_t v23 = v19;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v31);
      if (!v29) {
        __break(1u);
      }
      WebKit::NetworkStorageManager::cacheStorageAllCaches(a3, (WebCore::SecurityOriginData *)v24, v28, (uint64_t *)&v23);
      uint64_t result = (uint64_t)v23;
      uint64_t v23 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    if (v29)
    {
      if (v27 != -1) {
        uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9B90E8[v27])(&v30, v26);
      }
      int v27 = -1;
      if (v25 != -1) {
        return ((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9B90E8[v25])(&v30, v24);
      }
    }
  }
  return result;
}

uint64_t *IPC::handleMessage<Messages::NetworkStorageManager::CacheStorageReference,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = (uint64_t *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v8, a2);
  if (v9)
  {
    uint64_t v6 = v8[0];
    uint64_t v7 = v8[1];
    return WebKit::NetworkStorageManager::cacheStorageReference(a3, a1, v6, v7);
  }
  return result;
}

WebKit::CacheStorageCache *IPC::handleMessage<Messages::NetworkStorageManager::CacheStorageDereference,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = (WebKit::CacheStorageCache *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)v8, a2);
  if (v9)
  {
    uint64_t v6 = v8[0];
    uint64_t v7 = v8[1];
    return WebKit::NetworkStorageManager::cacheStorageDereference(a3, a1, v6, v7);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::LockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>(IPC::Connection *a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v6);
  if (v6[64]) {
    WebKit::NetworkStorageManager::lockCacheStorage(a3, a1, (const WebCore::ClientOrigin *)v6);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::UnlockCacheStorage,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ClientOrigin const&)>(IPC::Connection *a1, uint64_t *a2, WebKit::NetworkStorageManager *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v6);
  if (v6[64]) {
    WebKit::NetworkStorageManager::unlockCacheStorage(a3, a1, (const WebCore::ClientOrigin *)v6);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
}

void IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRetrieveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, (uint64_t)&v59);
  if (!v60) {
    goto LABEL_27;
  }
  IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>((IPC::Decoder *)v4, (uint64_t)&v61);
  char v7 = v84;
  if (v84)
  {
    if (!v60) {
      goto LABEL_26;
    }
    long long v33 = v59;
    uint64_t v8 = v61;
    uint64_t v9 = v63;
    uint64_t v61 = 0;
    uint64_t v34 = v8;
    long long v35 = v62[0];
    long long v36 = v62[1];
    LODWORD(v62[0]) &= ~1u;
    uint64_t v63 = 0;
    uint64_t v37 = v9;
    long long v38 = v64;
    long long v39 = v65;
    LODWORD(v64) = v64 & 0xFFFFFFFE;
    uint64_t v10 = v68;
    uint64_t v40 = v66;
    long long v11 = v67;
    long long v67 = 0u;
    long long v41 = v11;
    uint64_t v68 = 0;
    uint64_t v42 = v10;
    uint64_t v12 = v69;
    uint64_t v69 = 0;
    uint64_t v43 = v12;
    uint64_t v13 = v70;
    uint64_t v70 = 0;
    uint64_t v44 = v13;
    uint64_t v14 = v71;
    uint64_t v71 = 0;
    uint64_t v45 = v14;
    uint64_t v15 = v72;
    uint64_t v72 = 0;
    uint64_t v46 = v15;
    char v48 = v74;
    int v47 = v73;
    long long v16 = v75;
    long long v75 = 0u;
    long long v49 = v16;
    char v52 = v78;
    uint64_t v50 = v76;
    uint64_t v51 = v77;
    char v17 = v79;
    uint64_t v76 = 0;
    char v79 = 0;
    CFTypeRef cf = v17;
    __int16 v54 = v80;
    long long v18 = v81;
    long long v81 = 0u;
    *(_OWORD *)char v55 = v18;
    uint64_t v19 = v82;
    uint64_t v82 = 0;
    uint64_t v56 = v19;
    char v7 = 1;
    int v57 = v83;
  }
  else
  {
    LOBYTE(v33) = 0;
  }
  char v58 = v7;
  std::__optional_destruct_base<WebCore::RetrieveRecordsOptions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v61, v6);
  if (!v58) {
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
    if (!(_BYTE)v21) {
      break;
    }
    uint64_t v61 = v20;
    uint64_t v4 = (uint64_t *)v62;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v62, a1);
    uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v22 = &unk_1EE9B94F8;
    v22[1] = v61;
    uint64_t v23 = *(void *)&v62[0];
    *(void *)&v62[0] = 0;
    v22[2] = v23;
    *(void *)&long long v59 = v22;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v62);
    if (v58)
    {
      WebKit::NetworkStorageManager::cacheStorageRetrieveRecords(a3, v33, *((uint64_t *)&v33 + 1), (WebCore::ResourceRequestBase *)&v34, (uint64_t *)&v59);
      uint64_t v24 = v59;
      *(void *)&long long v59 = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    LOBYTE(v33) = 0;
    char v58 = 0;
LABEL_28:
    uint64_t v29 = *v4;
    uint64_t v30 = v4[1];
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v31 = v4[3];
    if (v31) {
      BOOL v32 = v30 == 0;
    }
    else {
      BOOL v32 = 1;
    }
    if (!v32)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
      if (v58) {
        continue;
      }
    }
    return;
  }
  if (v58)
  {
    int v25 = v56;
    uint64_t v56 = 0;
    if (v25) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v25, v21);
    }
    char v26 = v55[1];
    v55[1] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v21);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    int v27 = v55[0];
    v55[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v21);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    CFTypeRef v28 = cf;
    CFTypeRef cf = 0;
    if (v28) {
      CFRelease(v28);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v34);
  }
}

void IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRemoveRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (atomic_uchar *volatile **)a2;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, (uint64_t)&v27);
  if (!v28)
  {
    LOBYTE(v21) = 0;
    char v26 = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v4, (uint64_t)&v29);
  char v6 = v31;
  if (!v31) {
    goto LABEL_16;
  }
  char v7 = (atomic_uchar *volatile *)IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(v4);
  if (!(v7 >> 24))
  {
    uint64_t v8 = *v4;
    uint64_t v9 = v4[1];
    *uint64_t v4 = 0;
    v4[1] = 0;
    char v7 = v4[3];
    if (v7) {
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  if (!v28 || !v31) {
    goto LABEL_27;
  }
  int v10 = (int)v7;
  long long v21 = v27;
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v22, (uint64_t)&v29);
  char v25 = BYTE2(v10);
  __int16 v24 = v10;
  char v6 = 1;
  while (1)
  {
    char v26 = v6;
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v29);
    if (!v26)
    {
LABEL_8:
      long long v11 = *v4;
      uint64_t v12 = v4[1];
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v13 = v4[3];
      if (v13) {
        BOOL v14 = v12 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14) {
        return;
      }
      (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v13 + 2))(v13, v11);
      if (!v26) {
        return;
      }
    }
    uint64_t v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
    if (!v16) {
      break;
    }
    uint64_t v29 = v15;
    uint64_t v4 = v30;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v30, a1);
    char v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v17 = &unk_1EE9B9520;
    v17[1] = v29;
    long long v18 = v30[0];
    v30[0] = 0;
    v17[2] = v18;
    *(void *)&long long v27 = v17;
    char v7 = (atomic_uchar *volatile *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v30);
    if (v26)
    {
      WebKit::NetworkStorageManager::cacheStorageRemoveRecords(a3, v21, *((uint64_t *)&v21 + 1), (WebCore::ResourceRequestBase *)v22, (uint64_t)&v24, (uint64_t *)&v27);
      uint64_t v19 = v27;
      *(void *)&long long v27 = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      break;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    if (v9) {
      (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v7 + 2))(v7, v8);
    }
LABEL_15:
    char v6 = 0;
LABEL_16:
    LOBYTE(v21) = 0;
  }
  if (v26)
  {
    CFTypeRef v20 = cf;
    CFTypeRef cf = 0;
    if (v20) {
      CFRelease(v20);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v22);
  }
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStoragePutRecords,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, (uint64_t)&v20);
  if (v21
    && (uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a2, v6, (uint64_t)&v22), v24))
  {
    if (!v21) {
      goto LABEL_16;
    }
    long long v17 = v20;
    v18[0] = v22;
    uint64_t v9 = v23;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v18[1] = v9;
    char v19 = 1;
    WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v8);
    uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (!(_BYTE)v11) {
      return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v11);
    }
    uint64_t v22 = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v23, a1);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v12 = &unk_1EE9B9560;
    v12[1] = v22;
    uint64_t v13 = v23;
    uint64_t v23 = 0;
    void v12[2] = v13;
    *(void *)&long long v20 = v12;
    uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
    if (v19)
    {
      WebKit::NetworkStorageManager::cacheStoragePutRecords(a3, (uint64_t)a1, v17, *((uint64_t *)&v17 + 1), (uint64_t)v18, (uint64_t *)&v20);
      uint64_t result = v20;
      *(void *)&long long v20 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      if (v19) {
        return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v11);
      }
    }
    else
    {
LABEL_16:
      __break(1u);
    }
  }
  else
  {
    uint64_t v14 = *a2;
    uint64_t v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v16 = v15 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v14);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageClearMemoryRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a2, v15);
  if (v16)
  {
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v12 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v8 = &unk_1EE9B9588;
      v8[1] = v12;
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      uint64_t v14 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v16) {
        __break(1u);
      }
      WebKit::NetworkStorageManager::cacheStorageClearMemoryRepresentation(a3, (uint64_t)v15, (uint64_t *)&v14);
      uint64_t v10 = (uint64_t)v14;
      uint64_t v14 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkStorageManager::CacheStorageRepresentation,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WTF::CompletionHandler<void ()(WTF::String &&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t *a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v6)
  {
    uint64_t v9 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    char v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v7 = &unk_1EE9B95B0;
    v7[1] = v9;
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    long long v11 = v7;
    _OWORD v7[2] = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebKit::NetworkStorageManager::cacheStorageRepresentation(a3, &v11);
    uint64_t result = (uint64_t)v11;
    long long v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::NetworkStorageManager::ResetQuotaUpdatedBasedOnUsageForTesting,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(WebCore::ClientOrigin &&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>(a1, v4);
  if (v4[64]) {
    WebKit::NetworkStorageManager::resetQuotaUpdatedBasedOnUsageForTesting(a2, (uint64_t)v4);
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

BOOL WebKit::NetworkStorageManager::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (atomic_uchar **)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  if (*((_WORD *)a3 + 25) != 3623)
  {
    BOOL v10 = 0;
    if (!a1) {
      return v10;
    }
    goto LABEL_14;
  }
  IPC::Decoder::decode<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>(v23, a3);
  BOOL v10 = v28 != 0;
  if (v28)
  {
    long long v11 = *a4;
    *a4 = 0;
    long long v20 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a2);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v12 = &unk_1EE9B95D8;
    v12[1] = v20;
    uint64_t v13 = v21[0];
    long long v20 = 0;
    v21[0] = 0;
    void v12[2] = v13;
    uint64_t v22 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    uint64_t v15 = v20;
    long long v20 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v18, v19);
    }
    if (!v28) {
      __break(1u);
    }
    IPC::callMemberFunction<WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&),std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>(a1, (uint64_t)WebKit::NetworkStorageManager::connectToStorageAreaSync, 0, (uint64_t)a2, (uint64_t)v23, (uint64_t)&v22);
    char v16 = v22;
    uint64_t v22 = 0;
    if (v16) {
      (*(void (**)(void *))(*v16 + 8))(v16);
    }
    if (v28)
    {
      if (v27 != -1) {
        ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9B90E8[v27])(&v20, &v26);
      }
      int v27 = -1;
      if (v25 != -1) {
        ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9B90E8[v25])(&v20, &v24);
      }
    }
  }
  if (a1) {
LABEL_14:
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v8, v9);
  return v10;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[64])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v4);
  if (v4[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>((uint64_t)v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[64] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 64))
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a2, a1);
    *(unsigned char *)(a2 + 32) = 0;
    uint64_t v4 = a2 + 32;
    *(_DWORD *)(v4 + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4, a1 + 32);
    *(unsigned char *)(v4 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9PersistedEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9PersistedEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9108;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9PersistedEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3101;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 56);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v2])(&v5, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v3])(&v6, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7PersistEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7PersistEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9130;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7PersistEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3100;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager8EstimateEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt3__18optionalINS9_15StorageEstimateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager8EstimateEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt3__18optionalINS9_15StorageEstimateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9158;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager8EstimateEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt3__18optionalINS9_15StorageEstimateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3091;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E5FE8);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22FileSystemGetDirectoryEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEON7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_23ObjectIdentifierGenericINSB_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(v12);
    }
    IPC::Encoder::operator<<<unsigned long long const&>(v5, (uint64_t *)a2);
    IPC::Encoder::operator<<<unsigned long long const&>(v5, (uint64_t *)(a2 + 8));
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E6008);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22FileSystemGetDirectoryEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEON7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_23ObjectIdentifierGenericINSB_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22FileSystemGetDirectoryEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEON7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_23ObjectIdentifierGenericINSB_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9180;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22FileSystemGetDirectoryEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEON7WebCore12ClientOriginEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_23ObjectIdentifierGenericINSB_30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3092;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  BOOL v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E6218);
    }
    *char v5 = 0;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      char v7 = *(unsigned char *)a2;
      uint64_t v8 = a1;
      return IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v8, v7);
    }
LABEL_14:
    uint64_t v8 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v8, v7);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6238);
  }
  *char v5 = 1;
  if (*(_DWORD *)(a2 + 8)) {
    goto LABEL_14;
  }

  return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
}

unint64_t IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5
    && (uint64_t v6 = v4,
        uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v8))
  {
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = result;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      long long v11 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v11();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11IsSameEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B91A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11IsSameEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B91A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11IsSameEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_ONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3098;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,BOOL>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v25);
    if (v26)
    {
      unint64_t v8 = a2[1];
      uint64_t v9 = (WTF::StringImpl *)*a2;
      unint64_t v10 = a2[2] - *a2;
      if (v8 <= v10)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v20 = a2[3];
        if (v20)
        {
          if (v8)
          {
            (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
            uint64_t v19 = *a2;
            uint64_t v18 = a2[1];
          }
          else
          {
            uint64_t v18 = 0;
            uint64_t v19 = 0;
          }
        }
      }
      else
      {
        long long v11 = (unsigned __int8 *)v9 + v10;
        a2[2] = (uint64_t)(v11 + 1);
        if (v9)
        {
          unsigned int v12 = *v11;
          if (v12 < 2)
          {
            BOOL v16 = v12 == 0;
            uint64_t v13 = v25;
            char v14 = !v16;
            *(void *)a1 = v6;
            *(void *)(a1 + 8) = v13;
            *(unsigned char *)(a1 + 16) = v14;
            *(unsigned char *)(a1 + 24) = 1;
            return result;
          }
          goto LABEL_22;
        }
        uint64_t v18 = v8;
        uint64_t v19 = 0;
      }
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v21 = a2[3];
      if (v21)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19, v18);
          uint64_t v9 = (WTF::StringImpl *)*a2;
          unint64_t v8 = a2[1];
        }
        else
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
        }
      }
LABEL_22:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v22 = a2[3];
      if (v22 && v8) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v22 + 16))(v22, v9);
      }
      *(unsigned char *)a1 = 0;
      int v23 = v26;
      *(unsigned char *)(a1 + 24) = 0;
      if (v23)
      {
        uint64_t v24 = v25;
        int v25 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v9);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
      }
      goto LABEL_11;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_11:
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (IPC::Decoder *)a2[3];
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (IPC::Decoder *)v17();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager13GetFileHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISH_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B91D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager13GetFileHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISH_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B91D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager13GetFileHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISH_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3094;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager18GetDirectoryHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISH_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B91F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager18GetDirectoryHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISH_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B91F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager18GetDirectoryHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEbONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedISH_NS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3093;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11RemoveEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEbONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11RemoveEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEbONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager11RemoveEntryEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNS_6StringEbONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, __int16 a2)
{
  __int16 v9 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 3102;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v10 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder,std::optional<WebKit::FileSystemStorageError>>(v4, (uint64_t)&v9);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder,std::optional<WebKit::FileSystemStorageError>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 1);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E6B64);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 1))
    {
      char v7 = *(unsigned char *)a2;
      return (unsigned char *)IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(a1, v7);
    }
    else
    {
      uint64_t v8 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7ResolveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_ONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E6B84);
    }
    unsigned char *result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7ResolveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_ONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7ResolveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_ONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7ResolveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_ONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3105;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E6D94);
    }
    *char v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      char v7 = *(unsigned char *)a2;
      return IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(a1, v7);
    }
LABEL_14:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager4MoveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_RKNS_6StringEONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(v9);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6DB4);
  }
  *char v5 = 1;
  if (*(_DWORD *)(a2 + 16)) {
    goto LABEL_14;
  }

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager4MoveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_RKNS_6StringEONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager4MoveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_RKNS_6StringEONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager4MoveEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESF_RKNS_6StringEONS_17CompletionHandlerIFvNSt3__18optionalINS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, __int16 a2)
{
  __int16 v9 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 3099;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v10 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder,std::optional<WebKit::FileSystemStorageError>>(v4, (uint64_t)&v9);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7GetFileEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6StringENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7GetFileEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6StringENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7GetFileEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6StringENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3095;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E70B0);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v5, *(unsigned char *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CreateSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS7_30FileSystemSyncAccessHandleInfoENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E70D0);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 8)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CreateSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS7_30FileSystemSyncAccessHandleInfoENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B92C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CreateSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS7_30FileSystemSyncAccessHandleInfoENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B92C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CreateSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS7_30FileSystemSyncAccessHandleInfoENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3090;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E7288);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v5, *(unsigned char *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CloseSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yLSE_1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E72A8);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 40)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::encode(v5, (uint64_t *)a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CloseSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yLSE_1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B92E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CloseSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yLSE_1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B92E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CloseSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yLSE_1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3088;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37RequestNewCapacityForSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yLSE_1EEEyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37RequestNewCapacityForSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yLSE_1EEEyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37RequestNewCapacityForSyncAccessHandleEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENS9_INSA_40FileSystemSyncAccessHandleIdentifierTypeESD_yLSE_1EEEyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3104;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v11 = v5;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(v5, v10);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  long long v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Encoder::operator<<<unsigned long long>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v5 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v4 = v3;
    return (uint64_t)a1;
  }
  return result;
}

uint64_t IPC::Encoder::encodeSpan<unsigned long long const,18446744073709551615ul>(IPC::Encoder *a1, const void *a2, uint64_t a3)
{
  size_t v5 = 8 * a3;
  uint64_t v6 = (void *)IPC::Encoder::grow(a1, 8uLL, 8 * a3);
  if (v7 < 8 * a3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    return (uint64_t)memcpy(v6, a2, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager14GetHandleNamesEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager14GetHandleNamesEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager14GetHandleNamesEN6WebKit21NetworkStorageManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS7_22FileSystemStorageErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  size_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)size_t v5 = 3096;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9GetHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINSt3__14pairISH_bEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9GetHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINSt3__14pairISH_bEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager9GetHandleEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_6StringEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedINSt3__14pairISH_bEENS7_22FileSystemStorageErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  size_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)size_t v5 = 3097;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v17 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E7934);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v5, (uint64_t *)a2);
      char v8 = *(unsigned char *)(a2 + 8);
      __int16 v9 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1989E7954);
      }
      unsigned char *v9 = v8;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v15 = (unsigned char *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>(v15, v16);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7914);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v5, *(unsigned char *)a2);
LABEL_9:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[96])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&),std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[1] = a3;
  uint64_t v9 = a1;
  v8[0] = a2;
  v7[0] = &v9;
  v7[1] = v8;
  _OWORD v7[2] = a4;
  v7[3] = a6;
  return IPC::callMemberFunction<WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&),std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>(WebKit::NetworkStorageManager *,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&) WebKit::NetworkStorageManager::*,IPC::Connection &,std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin> &&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)::{lambda(WebKit::NetworkStorageManager &&)#1}::operator()<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>((uint64_t)v7, *(unsigned char *)a5, *(void *)(a5 + 8), *(void *)(a5 + 16), *(void *)(a5 + 24), a5 + 32);
}

uint64_t std::optional<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 88);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v2])(&v5, a1 + 64);
    }
    *(_DWORD *)(a1 + 88) = -1;
    uint64_t v3 = *(unsigned int *)(a1 + 56);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v3])(&v6, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::StorageType>(a2);
  __int16 v5 = result;
  if ((unsigned __int16)result > 0xFFu) {
    return IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType>(a1, (uint64_t *)a2, (char *)&v5);
  }
  *a1 = 0;
  a1[96] = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::StorageType>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::StorageType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType>(unsigned char *a1, uint64_t *a2, char *a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7) {
    return IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2, a3, (uint64_t)v8);
  }
  *a1 = 0;
  a1[96] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::StorageType,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v4 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v4);
  int v1 = HIBYTE(v4);
  if (!HIBYTE(v4)) {
    goto LABEL_7;
  }
  uint64_t result = WTF::isValidEnum<WebCore::StorageType,void>(v4);
  if (!result)
  {
    int v1 = 0;
LABEL_7:
    int v3 = 0;
    return v1 | (v3 << 8);
  }
  if (HIBYTE(v4))
  {
    int v3 = 1;
    int v1 = v4;
    return v1 | (v3 << 8);
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, uint64_t *a2, char *a3, uint64_t a4)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v9, a2);
  if (v9[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, a2, a3, a4, (uint64_t)v9);
  }
  *a1 = 0;
  a1[96] = 0;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(unsigned char *a1, uint64_t *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, v10);
  if (v10[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>((uint64_t)a1, *a3, a3[1], a4, a5, (uint64_t)v10);
  }
  else
  {
    *a1 = 0;
    a1[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10);
}

uint64_t IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu) {
    goto LABEL_7;
  }
  if ((_BYTE)result)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
    if (v6)
    {
      *(void *)a1 = result;
      char v5 = 1;
      *(unsigned char *)(a1 + 8) = 1;
      goto LABEL_4;
    }
LABEL_7:
    char v5 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_4;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  char v5 = 1;
LABEL_4:
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void>::decode<IPC::Decoder,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>(uint64_t result, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 && *(unsigned char *)(a4 + 8) && *(unsigned char *)(a5 + 16) && *(unsigned char *)(a6 + 64)) {
    return std::optional<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>::optional[abi:sn180100]<std::in_place_t,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin,void>(result, a2, (void *)a4, (_OWORD *)a5, a6);
  }
  __break(1u);
  return result;
}

uint64_t std::optional<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>>::optional[abi:sn180100]<std::in_place_t,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin,void>(uint64_t a1, char a2, void *a3, _OWORD *a4, uint64_t a5)
{
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 16) = *a4;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a5);
  *(unsigned char *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 64, a5 + 32);
  *(unsigned char *)(a1 + 96) = 1;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager20ConnectToStorageAreaEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yLSH_1EEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSH_1EEENS_7HashMapINS_6StringESX_NS_11DefaultHashISX_EENS_10HashTraitsISX_EES11_NS_15HashTableTraitsEEEyEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_S13_yEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9388;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager20ConnectToStorageAreaEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yLSH_1EEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSH_1EEENS_7HashMapINS_6StringESX_NS_11DefaultHashISX_EENS_10HashTraitsISX_EES11_NS_15HashTableTraitsEEEyEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_S13_yEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9388;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder **_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager20ConnectToStorageAreaEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yLSH_1EEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSH_1EEENS_7HashMapINS_6StringESX_NS_11DefaultHashISX_EENS_10HashTraitsISX_EES11_NS_15HashTableTraitsEEEyEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_S13_yEE4callESV_S13_y(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  return IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkStorageManager *,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&) WebKit::NetworkStorageManager::*)::{lambda(Messages::NetworkStorageManager::ConnectToStorageArea &&)#1}::operator()<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>((uint64_t *)(a1 + 8), &v6, a3, &v5);
}

IPC::Encoder **IPC::handleMessageAsync<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkStorageManager *,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&) WebKit::NetworkStorageManager::*)::{lambda(Messages::NetworkStorageManager::ConnectToStorageArea &&)#1}::operator()<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>(uint64_t *a1, uint64_t *a2, void **a3, uint64_t *a4)
{
  uint64_t v8 = *a1;
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 3089;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v10 = *a2;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  IPC::Encoder::operator<<<unsigned long long>(v9, &v14);
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(v9, a3);
  IPC::Encoder::operator<<<unsigned long long>(v9, a4);
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v13, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v13, v11);
}

uint64_t *IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(IPC::Encoder *a1, void **a2)
{
  __int16 v4 = *a2;
  if (*a2) {
    LODWORD(v4) = *((_DWORD *)v4 - 3);
  }
  int v10 = (int)v4;
  IPC::Encoder::operator<<<int>(a1, &v10);
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  uint64_t v6 = result;
  uint64_t v8 = v7;
  if (*a2) {
    uint64_t v9 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((uint64_t *)v9 != result)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      uint64_t result = (uint64_t *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6 + 1);
      while (1)
      {
        v6 += 2;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v6 = v8;
LABEL_13:
      ;
    }
    while (v6 != (uint64_t *)v9);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::NetworkStorageManager,WebKit::NetworkStorageManager,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&),std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>,void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>(WebKit::NetworkStorageManager *,void ()(IPC::Connection &,WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&) WebKit::NetworkStorageManager::*,IPC::Connection &,std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin> &&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)> &&)::{lambda(WebKit::NetworkStorageManager &&)#1}::operator()<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ClientOrigin>(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(uint64_t (**)(void *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, void))v6;
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v9 = (void *)(**(void **)a1 + (v7 >> 1));
  if (v7) {
    uint64_t v8 = *(uint64_t (**)(void *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, void))(*v9 + v8);
  }
  return v8(v9, *(void *)(a1 + 16), a2, a3, a4, a5, a6, *(void *)(a1 + 24));
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7SetItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringESM_SM_ONS_17CompletionHandlerIFvbONS_7HashMapISL_SL_NS_11DefaultHashISL_EENS_10HashTraitsISL_EESS_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B93B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7SetItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringESM_SM_ONS_17CompletionHandlerIFvbONS_7HashMapISL_SL_NS_11DefaultHashISL_EENS_10HashTraitsISL_EESS_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B93B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager7SetItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringESM_SM_ONS_17CompletionHandlerIFvbONS_7HashMapISL_SL_NS_11DefaultHashISL_EENS_10HashTraitsISL_EESS_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSV_EE4callEbSV_(uint64_t a1, char a2, void **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3106;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = a2;
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager10RemoveItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringESM_ONS_17CompletionHandlerIFvbONS_7HashMapISL_SL_NS_11DefaultHashISL_EENS_10HashTraitsISL_EESS_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B93D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager10RemoveItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringESM_ONS_17CompletionHandlerIFvbONS_7HashMapISL_SL_NS_11DefaultHashISL_EENS_10HashTraitsISL_EESS_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B93D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager10RemoveItemEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringESM_ONS_17CompletionHandlerIFvbONS_7HashMapISL_SL_NS_11DefaultHashISL_EENS_10HashTraitsISL_EESS_NS_15HashTableTraitsEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSV_EE4callEbSV_(uint64_t a1, char a2, void **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3103;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = a2;
    IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager5ClearEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9400;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager5ClearEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9400;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager5ClearEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionENS_23ObjectIdentifierGenericINS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSB_INS7_29StorageAreaImplIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLSF_1EEEONS_6StringEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v3 = 3087;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::IDBOpenRequestData>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebCore::IDBOpenRequestData,void>::decode(a2, &v13);
  if (v19
    || ((v7 = *a2, v8 = a2[1], *a2 = 0, a2[1] = 0, (uint64_t result = (WTF::StringImpl *)a2[3]) != 0)
      ? (BOOL v9 = v8 == 0)
      : (BOOL v9 = 1),
        !v9
     && (uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v7), v19)))
  {
    uint64_t result = (WTF::StringImpl *)WebCore::IDBOpenRequestData::IDBOpenRequestData((uint64_t)a1, &v13);
    int v6 = v19;
    a1[120] = 1;
    if (v6)
    {
      if (v18 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9B90E8[v18])(&v12, &v17);
      }
      int v18 = -1;
      if (v16 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9B90E8[v16])(&v12, &v15);
      }
      int v16 = -1;
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[120] = 0;
  }
  if (!a1[120])
  {
    uint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v10)
      {
        uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 16);
        return (WTF::StringImpl *)v11();
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::IDBOpenRequestData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 88);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v3])(&v7, a1 + 64);
    }
    *(_DWORD *)(a1 + 88) = -1;
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v4])(&v8, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WebCore::IDBResourceIdentifier>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5
    && (v6 = v4, uint64_t result = IPC::Decoder::decode<std::optional<WebCore::IDBResourceIdentifier>>(a2, (uint64_t)&v11), v13))
  {
    *(void *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (uint64_t *)a2[3];
    if (result) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v10();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::IDBDatabaseConnectionIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::IDBResourceIdentifier>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5 && (v6 = v4, uint64_t result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v11), v12))
  {
    *(void *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v10();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IDBResourceIdentifier,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::IDBResourceIdentifier>(a2, (uint64_t)&v18);
  if (v19)
  {
    unint64_t v5 = a2[1];
    uint64_t v6 = *a2;
    unint64_t v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      char v9 = (uint64_t *)(v6 + v7);
      a2[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        uint64_t v10 = *v9;
        *(_OWORD *)a1 = v18;
        *(void *)(a1 + 16) = v10;
        *(unsigned char *)(a1 + 24) = 1;
        return result;
      }
      uint64_t v11 = v5;
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v13 = a2[3];
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v6, v5);
          uint64_t v12 = *a2;
          uint64_t v11 = a2[1];
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

void IPC::Decoder::decode<WebCore::IDBRequestData>(uint64_t a1, uint64_t *a2)
{
  __n128 v4 = IPC::ArgumentCoder<WebCore::IDBRequestData,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 104))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v6 = a2[3];
    if (v6 && v5 != 0)
    {
      long long v8 = *(void (**)(__n128))(*(void *)v6 + 16);
      v8(v4);
    }
  }
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v15, a2);
  if (v17
    && (uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v5)
    && (v6 = v4, uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v18), v19))
  {
    if (v17)
    {
      long long v8 = v15[5];
      *(_OWORD *)(a1 + 64) = v15[4];
      *(_OWORD *)(a1 + 80) = v8;
      uint64_t v9 = v16;
      long long v10 = v15[1];
      *(_OWORD *)a1 = v15[0];
      *(_OWORD *)(a1 + 16) = v10;
      long long v11 = v15[3];
      *(_OWORD *)(a1 + 32) = v15[2];
      *(_OWORD *)(a1 + 48) = v11;
      *(void *)(a1 + 96) = v9;
      *(void *)(a1 + 104) = v6;
      *(void *)(a1 + 112) = v18;
      *(unsigned char *)(a1 + 120) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 120) = 0;
    uint64_t v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (IPC::Decoder *)a2[3];
    if (result) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      uint64_t v14 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v14();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WTF::ObjectIdentifierGeneric<WebCore::IDBObjectStoreIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v13, a2);
  if (v15
    && (uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2),
        v5))
  {
    if (v15)
    {
      long long v6 = v13[5];
      *(_OWORD *)(a1 + 64) = v13[4];
      *(_OWORD *)(a1 + 80) = v6;
      uint64_t v7 = v14;
      long long v8 = v13[1];
      *(_OWORD *)a1 = v13[0];
      *(_OWORD *)(a1 + 16) = v8;
      long long v9 = v13[3];
      *(_OWORD *)(a1 + 32) = v13[2];
      *(_OWORD *)(a1 + 48) = v9;
      *(void *)(a1 + 96) = v7;
      *(void *)(a1 + 104) = result;
      *(unsigned char *)(a1 + 112) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 112) = 0;
    uint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v12();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::IDBRequestData>((uint64_t)v13, a2);
  if (!v15)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 176) = 0;
LABEL_9:
    uint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v12();
    }
    return result;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::IDBKeyRangeData>(a2, (uint64_t)v16);
  char v5 = v19;
  if (v19)
  {
    if (!v15)
    {
      __break(1u);
      return result;
    }
    long long v6 = v13[5];
    *(_OWORD *)(a1 + 64) = v13[4];
    *(_OWORD *)(a1 + 80) = v6;
    *(void *)(a1 + 96) = v14;
    long long v7 = v13[1];
    *(_OWORD *)a1 = v13[0];
    *(_OWORD *)(a1 + 16) = v7;
    long long v8 = v13[3];
    *(_OWORD *)(a1 + 32) = v13[2];
    *(_OWORD *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 104) = v16[0];
    *(unsigned char *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 128) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>(a1 + 112, (uint64_t)v17);
    char v9 = v17[24];
    *(unsigned char *)(a1 + 144) = 0;
    *(unsigned char *)(a1 + 136) = v9;
    *(_DWORD *)(a1 + 160) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebCore::IDBKeyData::Invalid,WTF::Vector<WebCore::IDBKeyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,double,WebCore::IDBKeyData::Date,WebCore::ThreadSafeDataBuffer,WebCore::IDBKeyData::Min,WebCore::IDBKeyData::Max>,(std::__variant_detail::_Trait)1>>(a1 + 144, (uint64_t)v18);
    *(_WORD *)(a1 + 168) = v18[12];
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 176) = v5;
  uint64_t result = std::__optional_destruct_base<WebCore::IDBKeyRangeData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16);
  if (!*(unsigned char *)(a1 + 176)) {
    goto LABEL_9;
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::IDBRequestData,WebCore::IDBKeyRangeData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 160);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B9428[v2])(&v5, a1 + 144);
    }
    *(_DWORD *)(a1 + 160) = -1;
    uint64_t v3 = *(unsigned int *)(a1 + 128);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B9428[v3])(&v6, a1 + 112);
    }
    *(_DWORD *)(a1 + 128) = -1;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v5);
  if (v5[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>((IPC::Decoder *)a1, (uint64_t)v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    *(unsigned char *)a3 = 0;
    *(_DWORD *)(a3 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a3, a2);
    *(unsigned char *)(a3 + 32) = 0;
    *(_DWORD *)(a3 + 56) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a3 + 32, a2 + 32);
    *(void *)(a3 + 64) = v7;
    char v6 = 1;
LABEL_4:
    *(unsigned char *)(a3 + 72) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageOpenCacheEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine30CacheIdentifierOperationResultENSK_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageOpenCacheEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine30CacheIdentifierOperationResultENSK_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageOpenCacheEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine30CacheIdentifierOperationResultENSK_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3081;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v14 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E9448);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v5, *(unsigned char *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v12, v13);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9468);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 24)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,void>::encode(v5, a2);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v4])(&v7, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 24);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B90E8[v5])(&v8, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager23CacheStorageRemoveCacheEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B94A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager23CacheStorageRemoveCacheEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B94A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager23CacheStorageRemoveCacheEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3083;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 4);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E9798);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 4))
    {
      char v8 = *(unsigned char *)a2;
      char v9 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1989E97B8);
      }
      unsigned char *v9 = v8;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9778);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 4) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v5, *(unsigned char *)a2);
LABEL_9:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B94D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B94D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

WebCore::ResourceRequestBase *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager21CacheStorageAllCachesEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_14DOMCacheEngine10CacheInfosENSH_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3079;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v14 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E997CLL);
    }
    unsigned char *v6 = 0;
    if (*(_DWORD *)(a2 + 24) == 1)
    {
      IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v5, *(unsigned char *)a2);
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>(v12, v13);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E999CLL);
  }
  unsigned char *v6 = 1;
  if (*(_DWORD *)(a2 + 24)) {
    goto LABEL_13;
  }
  IPC::VectorArgumentCoder<false,WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v5, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(v5, (uint64_t *)(a2 + 16));
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (WebCore::ResourceRequestBase *)WTF::fastFree(v10, v11);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 240))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WebCore::ResourceRequestBase *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceRequestBase *)v7();
    }
  }
  return result;
}

WebCore::ResourceRequestBase *std::__optional_destruct_base<WebCore::RetrieveRecordsOptions,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceRequestBase *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 240))
  {
    uint64_t v3 = *((void *)this + 28);
    *((void *)this + 28) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, a2);
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)this + 27);
    *((void *)this + 27) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = (WTF::StringImpl *)*((void *)this + 26);
    *((void *)this + 26) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = (const void *)*((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager27CacheStorageRetrieveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSP_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B94F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager27CacheStorageRetrieveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSP_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B94F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager27CacheStorageRetrieveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS9_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSP_5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSW_EE4callESW_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3086;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v16 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E9CC8);
    }
    unsigned char *v6 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
      unsigned int v8 = *(_DWORD *)(a2 + 12);
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = 592 * v8;
        do
        {
          IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::encode(v5, v9);
          v9 += 592;
          v10 -= 592;
        }
        while (v10);
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED1Ev(v15);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9CA8);
  }
  unsigned char *v6 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(v5, *(unsigned char *)a2);
LABEL_10:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager25CacheStorageRemoveRecordsEN6WebKit21NetworkStorageManagerES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS9_15ResourceRequestEONS9_17CacheQueryOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIyLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_14DOMCacheEngine5ErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EE4callESX_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3084;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989E9F04);
    }
    *uint64_t v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      char v7 = *(unsigned char *)a2;
      return IPC::ArgumentCoder<WebKit::FileSystemStorageError,void>::encode<IPC::Encoder>(a1, v7);
    }
LABEL_16:
    BOOL v11 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v11, v12, v13);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9F24);
  }
  *uint64_t v5 = 1;
  if (*(_DWORD *)(a2 + 16)) {
    goto LABEL_16;
  }
  uint64_t v9 = *(const void **)a2;
  uint64_t v10 = *(unsigned int *)(a2 + 12);
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v10);
  if (v10)
  {
    return IPC::Encoder::encodeSpan<unsigned long long const,18446744073709551615ul>(a1, v9, v10);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      unsigned int v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v6, v5);
        uint64_t v16 = *(void *)a1;
        unint64_t v15 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_20;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    if (v10 >= 0x6EB)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v23);
        if (!v24) {
          break;
        }
        if (HIDWORD(v22) == v22)
        {
          WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>((uint64_t)&v21, (unint64_t)v23);
        }
        else
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(v21 + 592 * HIDWORD(v22), v23);
          ++HIDWORD(v22);
        }
        std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v19);
        if (!--v10)
        {
          WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v21, HIDWORD(v22));
          *(void *)a3 = v21;
          uint64_t v20 = v22;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          *(void *)(a3 + 8) = v20;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
LABEL_17:
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        *(void *)a3 = v13;
        *(void *)(a3 + 8) = v14;
LABEL_18:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, a2);
      }
      LODWORD(v22) = 592 * (int)v10 / 0x250u;
      uint64_t v21 = WTF::fastMalloc((WTF *)(592 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v23);
        if (!v24) {
          break;
        }
        if (HIDWORD(v22) == v22)
        {
          WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>((uint64_t)&v21, (unint64_t)v23);
        }
        else
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(v21 + 592 * HIDWORD(v22), v23);
          ++HIDWORD(v22);
        }
        std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v12);
        if (!--v10)
        {
          uint64_t v13 = v21;
          uint64_t v14 = v22;
          goto LABEL_17;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v11);
    return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, a2);
  }
  unint64_t v15 = v5;
  uint64_t v16 = 0;
LABEL_20:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v15) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v16);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::DOMCacheEngine::CrossThreadRecord>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DOMCacheEngine::CrossThreadRecord,void>::decode(a1, a2);
  if (!a2[592])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WebCore::ResourceRequestBase *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceRequestBase *)v7();
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (long long *)WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(*(void *)a1 + 592 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 592 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6EB3E5)
    {
      __break(0xC471u);
      JUMPOUT(0x1989EA484);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 592 * *(unsigned int *)(a1 + 12);
    unsigned int v5 = 592 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(592 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x250;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::DOMCacheEngine::CrossThreadRecord>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::DOMCacheEngine::CrossThreadRecord>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a1 + v8;
      WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord(a3 + v8, (long long *)(a1 + v8));
      uint64_t v11 = *(unsigned int *)(a1 + v8 + 576);
      if (v11 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9B9538[v11])(&v17, v9 + 568);
      }
      *(_DWORD *)(v9 + 576) = -1;
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)(v9 + 288), v10);
      uint64_t v13 = *(WTF::StringImpl **)(v9 + 272);
      *(void *)(v9 + 272) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = a1 + v8;
      unint64_t v15 = *(WTF::StringImpl **)(a1 + v8 + 232);
      *(void *)(a1 + v8 + 232) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v12);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = *(const void **)(v14 + 216);
      *(void *)(v14 + 216) = 0;
      if (v16) {
        CFRelease(v16);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + v8 + 24));
      v8 += 592;
    }
    while (a1 + v8 != a2);
  }
}

uint64_t std::__optional_destruct_base<WebCore::DOMCacheEngine::CrossThreadRecord,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 592))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 576);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B9538[v3])(&v9, a1 + 568);
    }
    *(_DWORD *)(a1 + 576) = -1;
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)(a1 + 288), a2);
    unsigned int v5 = *(WTF::StringImpl **)(a1 + 272);
    *(void *)(a1 + 272) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 232);
    *(void *)(a1 + 232) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    unint64_t v7 = *(const void **)(a1 + 216);
    *(void *)(a1 + 216) = 0;
    if (v7) {
      CFRelease(v7);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  }
  return a1;
}

void WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct((WTF::StringImpl *)(*(void *)a1 + 592 * a2), (WTF::StringImpl *)(*(void *)a1 + 592 * v4));
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unsigned int v5 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >= 0x6EB3E5)
      {
        __break(0xC471u);
        JUMPOUT(0x1989EA770);
      }
      uint64_t v6 = (WTF *)(592 * a2);
      uint64_t v7 = WTF::fastMalloc(v6);
      *(_DWORD *)(a1 + 8) = v6 / 0x250;
      *(void *)a1 = v7;
      if ((WTF *)v7 != v5) {
        WTF::VectorMover<false,WebCore::DOMCacheEngine::CrossThreadRecord>::move((uint64_t)v5, (uint64_t)v5 + 592 * v4, v7);
      }
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, (void *)a2);
    }
  }
}

void WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  if (a1 != a2)
  {
    uint64_t v12 = v2;
    uint64_t v13 = v3;
    unsigned int v5 = a1;
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 144);
      if (v6 != -1) {
        ((void (*)(char *, char *))off_1EE9B9538[v6])(&v11, (char *)v5 + 568);
      }
      *((_DWORD *)v5 + 144) = -1;
      WebCore::ResourceResponseData::~ResourceResponseData((WTF::StringImpl *)((char *)v5 + 288), a2);
      uint64_t v8 = (WTF::StringImpl *)*((void *)v5 + 34);
      *((void *)v5 + 34) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      char v9 = (WTF::StringImpl *)*((void *)v5 + 29);
      *((void *)v5 + 29) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v7);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      unint64_t v10 = (const void *)*((void *)v5 + 27);
      *((void *)v5 + 27) = 0;
      if (v10) {
        CFRelease(v10);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WTF::StringImpl *)((char *)v5 + 24));
      unsigned int v5 = (WTF::StringImpl *)((char *)v5 + 592);
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CrossThreadRecord>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 592 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CacheStoragePutRecordsEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_6VectorINSB_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSK_IyLm0ESN_Lm16ESO_EENSL_5ErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9560;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CacheStoragePutRecordsEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_6VectorINSB_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSK_IyLm0ESN_Lm16ESO_EENSL_5ErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9560;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager22CacheStoragePutRecordsEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINSB_22DOMCacheIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_6VectorINSB_14DOMCacheEngine17CrossThreadRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSK_IyLm0ESN_Lm16ESO_EENSL_5ErrorEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSY_EE4callESY_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3082;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37CacheStorageClearMemoryRepresentationEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9588;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37CacheStorageClearMemoryRepresentationEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9588;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager37CacheStorageClearMemoryRepresentationEN6WebKit21NetworkStorageManagerES8_FvRKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v3 = 3080;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager26CacheStorageRepresentationEN6WebKit21NetworkStorageManagerES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B95B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager26CacheStorageRepresentationEN6WebKit21NetworkStorageManagerES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B95B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21NetworkStorageManager26CacheStorageRepresentationEN6WebKit21NetworkStorageManagerES8_FvONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3085;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yLSH_1EEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSH_1EEENS_7HashMapINS_6StringESX_NS_11DefaultHashISX_EENS_10HashTraitsISX_EES11_NS_15HashTableTraitsEEEyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSV_S13_yEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B95D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yLSH_1EEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSH_1EEENS_7HashMapINS_6StringESX_NS_11DefaultHashISX_EENS_10HashTraitsISX_EES11_NS_15HashTableTraitsEEEyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSV_S13_yEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B95D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEN6WebKit21NetworkStorageManagerES8_FvRNS2_10ConnectionEN7WebCore11StorageTypeENS_23ObjectIdentifierGenericINS7_28StorageAreaMapIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__18optionalINSD_INS7_30StorageNamespaceIdentifierTypeESG_yLSH_1EEEEERKNSB_12ClientOriginEONS_17CompletionHandlerIFvNSD_INS7_25StorageAreaIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLSH_1EEENS_7HashMapINS_6StringESX_NS_11DefaultHashISX_EENS_10HashTraitsISX_EES11_NS_15HashTableTraitsEEEyEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSV_S13_yEE4callESV_S13_y(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(a1 + 8);
  char v9 = *(IPC::Encoder **)(a1 + 8);
  unint64_t v10 = (void *)IPC::Encoder::grow(v9, 8uLL, 8);
  if (v11 <= 7
    || (*unint64_t v10 = a2,
        IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(v9, a3), uint64_t v12 = (void *)IPC::Encoder::grow(v9, 8uLL, 8), v13 <= 7))
  {
    __break(0xC471u);
    JUMPOUT(0x1989EADDCLL);
  }
  *uint64_t v12 = a4;
  uint64_t v14 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v14, v8, 0, 0);
}

WTF *WebKit::NotificationManagerMessageHandler::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x25A:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::UUID>>((uint64_t *)a3, &v22);
      if (!v27) {
        return this;
      }
      this = (WTF *)(*(uint64_t (**)(WTF *, WTF **, void *))(*(void *)v5 + 48))(v5, &v22, v26);
      goto LABEL_27;
    case 0x25B:
      this = IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, a2, (uint64_t)&v22);
      if (v24)
      {
        this = (WTF *)(*(uint64_t (**)(WTF *, WTF **))(*(void *)v5 + 56))(v5, &v22);
        if (v24)
        {
          this = v22;
          if (v22)
          {
            uint64_t v22 = 0;
            int v23 = 0;
            return (WTF *)WTF::fastFree(this, v6);
          }
        }
      }
      return this;
    case 0x25C:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::UUID>>(a3, (uint64_t)&v22);
      if (v24) {
        return (WTF *)(*(uint64_t (**)(WTF *, WTF **))(*(void *)v5 + 64))(v5, &v22);
      }
      return this;
    case 0x25D:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v22);
      if (!LOBYTE(v26[0])) {
        return this;
      }
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v7) {
        goto LABEL_23;
      }
      uint64_t v19 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, (atomic_uchar *volatile *)a2);
      uint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v8 = &unk_1EE9B9660;
      *((void *)v8 + 1) = v19;
      char v9 = v20;
      uint64_t v20 = 0;
      uint64_t v21 = v8;
      *((void *)v8 + 2) = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
      if (!LOBYTE(v26[0])) {
        goto LABEL_37;
      }
      (*(void (**)(WTF *, WTF **, WTF **))(*(void *)v5 + 96))(v5, &v22, &v21);
      this = v21;
      uint64_t v21 = 0;
      if (this) {
        goto LABEL_22;
      }
      goto LABEL_23;
    case 0x25E:
      unint64_t v10 = *(uint64_t (**)(void))(*(void *)this + 72);
      return (WTF *)v10();
    case 0x25F:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v22);
      if (!LOBYTE(v26[0])) {
        return this;
      }
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v11) {
        goto LABEL_23;
      }
      uint64_t v19 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, (atomic_uchar *volatile *)a2);
      uint64_t v12 = (WTF *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v12 = &unk_1EE9B9638;
      *((void *)v12 + 1) = v19;
      unint64_t v13 = v20;
      uint64_t v20 = 0;
      uint64_t v21 = v12;
      *((void *)v12 + 2) = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
      if (!LOBYTE(v26[0])) {
        goto LABEL_37;
      }
      (*(void (**)(WTF *, WTF **, WTF **))(*(void *)v5 + 80))(v5, &v22, &v21);
      this = v21;
      uint64_t v21 = 0;
      if (this) {
LABEL_22:
      }
        this = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)this + 8))(this);
LABEL_23:
      if (LOBYTE(v26[0]))
      {
LABEL_28:
        if (v25 != -1) {
          this = (WTF *)((uint64_t (*)(WTF **, WTF **))off_1EE9B9618[v25])(&v19, &v22);
        }
      }
      break;
    case 0x260:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,std::optional<unsigned long long>>>((uint64_t *)a3, &v22);
      if (!v27) {
        return this;
      }
      this = (WTF *)(*(uint64_t (**)(WTF *, WTF **, void, void))(*(void *)v5 + 88))(v5, &v22, v26[0], v26[1]);
LABEL_27:
      if (v27) {
        goto LABEL_28;
      }
      return this;
    case 0x261:
      IPC::Decoder::decode<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>>(a3, &v22);
      if (!v29) {
        goto LABEL_35;
      }
      uint64_t v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v14) {
        goto LABEL_35;
      }
      uint64_t v19 = (WTF *)v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, (atomic_uchar *volatile *)a2);
      uint64_t v16 = (WTF *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v16 = &unk_1EE9B9600;
      *((void *)v16 + 1) = v19;
      char v17 = v20;
      uint64_t v20 = 0;
      uint64_t v21 = v16;
      *((void *)v16 + 2) = v17;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
      if (!v29) {
LABEL_37:
      }
        __break(1u);
      (*(void (**)(WTF *, IPC::Connection *, WTF **, uint64_t *, WTF **))(*(void *)v5 + 40))(v5, a2, &v22, &v28, &v21);
      uint64_t v18 = v21;
      uint64_t v21 = 0;
      if (v18) {
        (*(void (**)(WTF *))(*(void *)v18 + 8))(v18);
      }
LABEL_35:
      this = std::__optional_destruct_base<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::NotificationData *)&v22, v14);
      break;
    default:
      return this;
  }
  return this;
}

BOOL WebKit::NotificationManagerMessageHandler::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a3 + 50) != 3624) {
    return 0;
  }
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)v20);
  BOOL v7 = v22 != 0;
  if (v22)
  {
    uint64_t v8 = *a4;
    *a4 = 0;
    char v17 = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v18, a2);
    char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v9 = &unk_1EE9B9688;
    v9[1] = v17;
    unint64_t v10 = v18[0];
    char v17 = 0;
    v18[0] = 0;
    _OWORD v9[2] = v10;
    uint64_t v19 = v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v18);
    uint64_t v12 = v17;
    char v17 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v15, v16);
    }
    if (!v22) {
      __break(1u);
    }
    (*(void (**)(uint64_t, unsigned char *, void **))(*(void *)a1 + 104))(a1, v20, &v19);
    unint64_t v13 = v19;
    uint64_t v19 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    if (v22 && v21 != -1) {
      ((void (*)(IPC::Encoder **, unsigned char *))off_1EE9B9618[v21])(&v17, v20);
    }
  }
  return v7;
}

void IPC::Decoder::decode<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[272])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      BOOL v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::NotificationData>(a1, v5);
  if (v6)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>,void>::decode<IPC::Decoder,WebCore::NotificationData>((uint64_t *)a1, (uint64_t)v5, (uint64_t)a2);
    if (v6) {
      WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v5, v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[272] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>,void>::decode<IPC::Decoder,WebCore::NotificationData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>(a1, &v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 256))
  {
    uint64_t result = std::__tuple_leaf<0ul,WebCore::NotificationData,false>::__tuple_leaf[abi:sn180100]<WebCore::NotificationData,void>(a3, a2);
    *(void *)(a3 + 256) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 272) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *IPC::Decoder::decode<WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,void>::decode<IPC::Decoder,WebCore::NotificationResources>(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,void>::decode<IPC::Decoder,WebCore::NotificationResources>@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v10 = result[3];
    if (v10)
    {
      unint64_t v13 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t result = v13;
        uint64_t v9 = *v13;
        unint64_t v8 = v13[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_11;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v8 = v3;
    uint64_t v9 = 0;
LABEL_11:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v12 = result;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
        uint64_t result = v12;
        uint64_t v4 = *v12;
        unint64_t v3 = v12[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_12:
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t result = (uint64_t *)result[3];
    if (result)
    {
      if (v3) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
      }
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  if (v7)
  {
    uint64_t result = IPC::ArgumentCoder<WebCore::NotificationResources,void>::decode(result, (uint64_t)&v14);
    *a2 = 0;
    a2[8] = 0;
    if (!v15) {
      return result;
    }
    *(void *)a2 = v14;
  }
  else
  {
    *(void *)a2 = 0;
  }
  a2[8] = 1;
  return result;
}

WTF *WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = this;
    atomic_store(1u, (unsigned int *)this);
    unint64_t v3 = (_DWORD *)*((void *)this + 1);
    *((void *)v2 + 1) = 0;
    if (v3)
    {
      if (v3[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      else {
        --v3[2];
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler16ShowNotificationEN6WebKit33NotificationManagerMessageHandlerES8_FvRNS2_10ConnectionERKN7WebCore16NotificationDataEONS_6RefPtrINSB_21NotificationResourcesENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9600;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler16ShowNotificationEN6WebKit33NotificationManagerMessageHandlerES8_FvRNS2_10ConnectionERKN7WebCore16NotificationDataEONS_6RefPtrINSB_21NotificationResourcesENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9600;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler16ShowNotificationEN6WebKit33NotificationManagerMessageHandlerES8_FvRNS2_10ConnectionERKN7WebCore16NotificationDataEONS_6RefPtrINSB_21NotificationResourcesENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3114;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WebCore::NotificationData *std::__optional_destruct_base<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>,false>::~__optional_destruct_base[abi:sn180100](WebCore::NotificationData *this, void *a2)
{
  if (*((unsigned char *)this + 272))
  {
    unint64_t v3 = (WTF *)*((void *)this + 32);
    *((void *)this + 32) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v3, a2);
    }
    WebCore::NotificationData::~NotificationData(this, a2);
  }
  return this;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::UUID>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,WTF::UUID>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,WTF::UUID>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v6);
  if (v8)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,WTF::UUID>,void>::decode<IPC::Decoder,WebCore::SecurityOriginData>((IPC::Decoder *)a1, (uint64_t)v6, (uint64_t)a2);
    if (v8)
    {
      if (v7 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9B9618[v7])(&v5, v6);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,WTF::UUID>,void>::decode<IPC::Decoder,WebCore::SecurityOriginData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v7);
  char v6 = v8;
  if (v8)
  {
    if (!*(unsigned char *)(a2 + 32)) {
      __break(1u);
    }
    *(unsigned char *)a3 = 0;
    *(_DWORD *)(a3 + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a3, a2);
    *(_OWORD *)(a3 + 32) = v7;
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 48) = v6;
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v8();
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  char v5 = v7;
  if (v7)
  {
    *(void *)a3 = v6[0];
    *(void *)(a3 + 8) = v6[1];
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v5;
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WTF::UUID,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v8();
    }
  }
  return result;
}

WTF *IPC::VectorArgumentCoder<false,WTF::UUID,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v6, v5);
        uint64_t v25 = *(void *)a1;
        unint64_t v24 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_29;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v24 = v5;
    uint64_t v25 = 0;
LABEL_29:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result)
    {
      if (v24) {
        uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v25);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v10 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v30);
      if (!v31) {
        break;
      }
      uint64_t v18 = HIDWORD(v29);
      if (HIDWORD(v29) == v29)
      {
        uint64_t v19 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v30);
        uint64_t v18 = HIDWORD(v29);
        uint64_t v20 = v28;
        long long v21 = *v19;
      }
      else
      {
        uint64_t v20 = v28;
        long long v21 = v30;
      }
      *((_OWORD *)v20 + v18) = v21;
      unint64_t v22 = ++HIDWORD(v29);
      if (!--v10)
      {
        WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v28, v22);
        *(void *)a3 = v28;
        uint64_t v27 = v29;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        *(void *)(a3 + 8) = v27;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      int v15 = 0;
      int v17 = 0;
      uint64_t v16 = 0;
LABEL_17:
      uint64_t v28 = 0;
      *(void *)a3 = v16;
      HIDWORD(v29) = 0;
      *(_DWORD *)(a3 + 8) = v17;
      *(_DWORD *)(a3 + 12) = v15;
LABEL_18:
      *(unsigned char *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v29) = v10;
    uint64_t v28 = (WTF *)WTF::fastMalloc((WTF *)(16 * v10));
    while (1)
    {
      IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v30);
      if (!v31) {
        break;
      }
      uint64_t v11 = HIDWORD(v29);
      if (HIDWORD(v29) == v29)
      {
        uint64_t v12 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v30);
        uint64_t v11 = HIDWORD(v29);
        unint64_t v13 = v28;
        long long v14 = *v12;
      }
      else
      {
        unint64_t v13 = v28;
        long long v14 = v30;
      }
      *((_OWORD *)v13 + v11) = v14;
      int v15 = ++HIDWORD(v29);
      if (!--v10)
      {
        uint64_t v16 = v28;
        int v17 = v29;
        goto LABEL_17;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
LABEL_25:
  uint64_t result = v28;
  if (v28)
  {
    uint64_t v28 = 0;
    LODWORD(v29) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<WTF::UUID>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v7);
  if (v8)
  {
    *(_OWORD *)a2 = v7;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (void *)*((void *)a1 + 3);
    if (result)
    {
      if (v6) {
        return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v7);
  int v4 = v9;
  *(unsigned char *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v7);
    int v5 = v9;
    *(unsigned char *)(a2 + 32) = 1;
    if (v5)
    {
      if (v8 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9B9618[v8])(&v6, v7);
      }
    }
  }
  else
  {
    *(unsigned char *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler17RequestPermissionEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9638;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler17RequestPermissionEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9638;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler17RequestPermissionEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3113;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,std::optional<unsigned long long>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v6);
  if (v8)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WebCore::SecurityOriginData>((IPC::Decoder *)a1, (uint64_t)v6, (uint64_t)a2);
    if (v8)
    {
      if (v7 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9B9618[v7])(&v5, v6);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WebCore::SecurityOriginData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)a3 = 0;
    *(_DWORD *)(a3 + 24) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a3, a2);
    *(_OWORD *)(a3 + 32) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 48) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler18GetPermissionStateEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler18GetPermissionStateEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B9660;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages33NotificationManagerMessageHandler18GetPermissionStateEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3112;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages33NotificationManagerMessageHandler22GetPermissionStateSyncEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages33NotificationManagerMessageHandler22GetPermissionStateSyncEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9688;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages33NotificationManagerMessageHandler22GetPermissionStateSyncEN6WebKit33NotificationManagerMessageHandlerES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, char a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

_DWORD *WebKit::PlaybackSessionManager::didReceiveMessage(_DWORD *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  ++this[4];
  switch(*((_WORD *)a3 + 25))
  {
    case 0x280:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::beginScanningBackward((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x281:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::beginScanningForward((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x282:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::beginScrubbing((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x283:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::endScanning((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x284:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::endScrubbing((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x285:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::enterFullscreen((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x286:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::enterInWindow((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x287:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::exitFullscreen((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x288:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::exitInWindow((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x289:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::fastSeek((uint64_t)v3, v39, v40);
      }
      goto LABEL_85;
    case 0x28A:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::handleControlledElementIDRequest((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x28B:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::pause((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x28C:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::play((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x28D:
      uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v15) {
        goto LABEL_80;
      }
      unint64_t v16 = *((void *)a3 + 1);
      uint64_t v17 = *(void *)a3;
      unint64_t v18 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v16 < v18 || v16 - v18 <= 7)
      {
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v35 = *((void *)a3 + 3);
        if (v35)
        {
          if (v16)
          {
            (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
            uint64_t v34 = *(void *)a3;
            unint64_t v33 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v33 = 0;
            uint64_t v34 = 0;
          }
        }
        goto LABEL_79;
      }
      uint64_t v20 = (double *)(v17 + v18);
      *((void *)a3 + 2) = v20 + 1;
      if (!v17)
      {
        unint64_t v33 = v16;
        uint64_t v34 = 0;
LABEL_79:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v36 = *((void *)a3 + 3);
        if (v36 && v33) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v34, v33);
        }
        goto LABEL_80;
      }
      unint64_t v21 = (((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8) - v17;
      BOOL v22 = v16 >= v21 && v16 - v21 > 7;
      if (v22
        && ((double v23 = *v20,
             unint64_t v24 = (double *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8),
             *((void *)a3 + 2) = v17 + v21 + 8,
             unint64_t v25 = ((v17 + v21 + 15) & 0xFFFFFFFFFFFFFFF8) - v17,
             v16 >= v25)
          ? (BOOL v26 = v16 - v25 > 7)
          : (BOOL v26 = 0),
            v26))
      {
        double v27 = *v24;
        double v28 = *(double *)(v17 + v25);
        *((void *)a3 + 2) = v17 + v25 + 8;
        this = (_DWORD *)WebKit::PlaybackSessionManager::seekToTime((uint64_t)v3, v14, v23, v27, v28);
      }
      else
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v29 = *((void *)a3 + 3);
        if (v29)
        {
          if (v16)
          {
            (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
            uint64_t v30 = *(void *)a3;
            uint64_t v31 = *((void *)a3 + 1);
            uint64_t v32 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v32)
            {
              if (v31) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
              }
            }
          }
        }
LABEL_80:
        a2 = *(IPC::Connection **)a3;
        uint64_t v37 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (_DWORD *)*((void *)a3 + 3);
        if (this) {
          BOOL v38 = v37 == 0;
        }
        else {
          BOOL v38 = 1;
        }
        if (!v38) {
          this = (_DWORD *)(*(uint64_t (**)(_DWORD *, IPC::Connection *))(*(void *)this + 16))(this, a2);
        }
      }
LABEL_85:
      if (v3[4] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *, IPC::Connection *))(*(void *)v3 + 8))(v3, a2);
      }
      --v3[4];
      return this;
    case 0x28E:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::selectAudioMediaOption((uint64_t)v3, v39);
      }
      goto LABEL_85;
    case 0x28F:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::selectLegibleMediaOption((uint64_t)v3, v39);
      }
      goto LABEL_85;
    case 0x290:
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v6) {
        goto LABEL_80;
      }
      uint64_t v7 = v5;
      unsigned __int16 v8 = IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>((uint64_t *)a3);
      if (v8 < 0x100u) {
        goto LABEL_80;
      }
      char v9 = v8;
      IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteCommandArgument>(a3, (uint64_t)&v44);
      if (!v46) {
        goto LABEL_80;
      }
      uint64_t v39 = v7;
      LOBYTE(v40) = v9;
      long long v41 = v44;
      uint64_t v42 = v45;
      char v43 = 1;
      this = (_DWORD *)WebKit::PlaybackSessionManager::sendRemoteCommand((uint64_t)v3, v7);
      goto LABEL_85;
    case 0x291:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::setDefaultPlaybackRate((uint64_t)v3, v39, *(float *)&v40);
      }
      goto LABEL_85;
    case 0x292:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::setMuted((uint64_t)v3, v39);
      }
      goto LABEL_85;
    case 0x293:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::setPlaybackRate((uint64_t)v3, v39, *(float *)&v40);
      }
      goto LABEL_85;
    case 0x294:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::setPlayingOnSecondScreen((uint64_t)v3, v39);
      }
      goto LABEL_85;
    case 0x295:
      uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v11) {
        goto LABEL_80;
      }
      uint64_t v12 = v10;
      unsigned __int16 v13 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a3);
      if (v13 <= 0xFFu) {
        goto LABEL_80;
      }
      this = (_DWORD *)WebKit::PlaybackSessionManager::setSoundStageSize((uint64_t)v3, v12, v13);
      goto LABEL_85;
    case 0x296:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>>((uint64_t *)a3, &v39);
      if ((_BYTE)v41) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::setVolume((uint64_t)v3, v39, v40);
      }
      goto LABEL_85;
    case 0x297:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::toggleMuted((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x298:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::togglePictureInPicture((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    case 0x299:
      this = (_DWORD *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        this = (_DWORD *)WebKit::PlaybackSessionManager::togglePlayState((uint64_t)v3, (uint64_t)this);
      }
      goto LABEL_85;
    default:
      goto LABEL_85;
  }
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    a3 = 0;
    a2 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v12 = result;
      uint64_t v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        uint64_t result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    void *result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_12:
      char v10 = 0;
      *(unsigned char *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      uint64_t v13 = a4;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  unsigned __int16 v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = *v8;
  *(void *)a4 = *(void *)a2;
  *(void *)(a4 + 8) = v9;
  char v10 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    a3 = 0;
    a2 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v12 = result;
      uint64_t v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        uint64_t result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    void *result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_12:
      char v10 = 0;
      *(unsigned char *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      uint64_t v13 = a4;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  unsigned __int16 v8 = (int *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  int v9 = *v8;
  *(void *)a4 = *(void *)a2;
  *(_DWORD *)(a4 + 8) = v9;
  char v10 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    a3 = 0;
    a2 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v12 = result;
      uint64_t v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        uint64_t result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    void *result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_12:
      char v10 = 0;
      *(unsigned char *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      uint64_t v13 = a4;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  unsigned __int16 v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = *v8;
  *(void *)a4 = *(void *)a2;
  *(void *)(a4 + 8) = v9;
  char v10 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v6, a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      char v15 = result;
      unint64_t v18 = a3;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        a3 = v18;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_8;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v10 = v4;
    uint64_t v11 = 0;
LABEL_8:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v14 = result;
      uint64_t v17 = a3;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        a3 = v17;
        uint64_t v5 = *v14;
        unint64_t v4 = v14[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_9:
    void *result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_10:
      char v9 = 0;
      *a3 = 0;
      goto LABEL_6;
    }
LABEL_12:
    if (v4)
    {
      unint64_t v16 = a3;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
      a3 = v16;
    }
    goto LABEL_10;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_9;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_12;
  }
  *(void *)a3 = *(void *)a2;
  a3[8] = v8 != 0;
  char v9 = 1;
LABEL_6:
  a3[16] = v9;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteControlCommandType,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0x10)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteCommandArgument>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteCommandArgument,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

void WebKit::PlaybackSessionManagerProxy::didReceiveMessage(WebKit::PlaybackSessionManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 4);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x26B:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::audioMediaSelectionIndexChanged((uint64_t)this, (uint64_t)v104[0], (uint64_t)v104[1]);
      }
      goto LABEL_149;
    case 0x26C:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long long>>((uint64_t)v104, (uint64_t *)a3);
      if (v107)
      {
        uint64_t v108 = v104[1];
        uint64_t v48 = v105;
        v104[1] = 0;
        uint64_t v105 = 0;
        uint64_t v109 = v48;
        WebKit::PlaybackSessionManagerProxy::audioMediaSelectionOptionsChanged((uint64_t)this, (uint64_t)v104[0], (unsigned int *)&v108, v106);
        goto LABEL_58;
      }
      goto LABEL_149;
    case 0x26D:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::bufferedTimeChanged((uint64_t)this, (uint64_t)v104[0], *(double *)&v104[1]);
      }
      goto LABEL_149;
    case 0x26E:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::canPlayFastReverseChanged((uint64_t)this, (uint64_t)v104[0], LOBYTE(v104[1]));
      }
      goto LABEL_149;
    case 0x26F:
      WebKit::PlaybackSessionManagerProxy::clearPlaybackControlsManager(this);
      goto LABEL_149;
    case 0x270:
      uint64_t v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v51) {
        goto LABEL_144;
      }
      unint64_t v52 = *((void *)a3 + 1);
      uint64_t v53 = *(void *)a3;
      unint64_t v54 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v52 < v54 || v52 - v54 <= 7)
      {
        unint64_t v45 = 0;
        uint64_t v46 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v95 = *((void *)a3 + 3);
        if (!v95) {
          goto LABEL_143;
        }
        if (!v52)
        {
          unint64_t v45 = 0;
          uint64_t v46 = 0;
          goto LABEL_143;
        }
        goto LABEL_178;
      }
      uint64_t v56 = (double *)(v53 + v54);
      *((void *)a3 + 2) = v56 + 1;
      if (!v53)
      {
        unint64_t v45 = v52;
        uint64_t v46 = 0;
        goto LABEL_143;
      }
      unint64_t v57 = (((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8) - v53;
      if (v52 < v57 || v52 - v57 <= 7)
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v79 = *((void *)a3 + 3);
        if (!v79 || !v52) {
          goto LABEL_144;
        }
        goto LABEL_156;
      }
      double v59 = *v56;
      *((void *)a3 + 2) = (((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      WebKit::PlaybackSessionManagerProxy::currentTimeChanged((uint64_t)this, v50, v59);
      goto LABEL_149;
    case 0x271:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::durationChanged((uint64_t)this, (uint64_t)v104[0], *(double *)&v104[1]);
      }
      goto LABEL_149;
    case 0x272:
      uint64_t v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v40) {
        goto LABEL_144;
      }
      unint64_t v26 = *((void *)a3 + 1);
      uint64_t v27 = *(void *)a3;
      unint64_t v41 = *((void *)a3 + 2) - *(void *)a3;
      if (v26 <= v41)
      {
        unint64_t v90 = 0;
        uint64_t v91 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v94 = *((void *)a3 + 3);
        if (v94)
        {
          if (v26)
          {
            (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
            uint64_t v91 = *(void *)a3;
            unint64_t v90 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v90 = 0;
            uint64_t v91 = 0;
          }
        }
        goto LABEL_136;
      }
      uint64_t v42 = (unsigned __int8 *)(v27 + v41);
      *((void *)a3 + 2) = v42 + 1;
      if (!v27)
      {
        unint64_t v90 = v26;
        uint64_t v91 = 0;
LABEL_136:
        unint64_t v26 = 0;
        uint64_t v27 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v93 = *((void *)a3 + 3);
        if (!v93) {
          goto LABEL_115;
        }
        if (!v90)
        {
LABEL_138:
          unint64_t v26 = 0;
          uint64_t v27 = 0;
LABEL_115:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v78 = *((void *)a3 + 3);
          if (v78)
          {
LABEL_116:
            if (v26) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v78 + 16))(v78, v27);
            }
          }
          goto LABEL_144;
        }
LABEL_134:
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v93 + 16))(v93, v91, v90);
LABEL_114:
        uint64_t v27 = *(void *)a3;
        unint64_t v26 = *((void *)a3 + 1);
        goto LABEL_115;
      }
      unsigned int v43 = *v42;
      if (v43 >= 2) {
        goto LABEL_115;
      }
      if (v26 <= (unint64_t)&v42[-v27 + 1])
      {
        unint64_t v45 = 0;
        uint64_t v46 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v96 = *((void *)a3 + 3);
        if (v96)
        {
          (*(void (**)(uint64_t))(*(void *)v96 + 16))(v96);
          unint64_t v45 = 0;
          uint64_t v103 = *((void *)a3 + 1);
          uint64_t v95 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v46 = 0;
          if (v95)
          {
            if (v103)
            {
LABEL_178:
              (*(void (**)(uint64_t))(*(void *)v95 + 16))(v95);
              uint64_t v46 = *(void *)a3;
              unint64_t v45 = *((void *)a3 + 1);
            }
          }
        }
        goto LABEL_143;
      }
      *((void *)a3 + 2) = v42 + 2;
      uint64_t v44 = v42[1];
      unint64_t v45 = v26;
      uint64_t v46 = v27;
      if (v44 >= 3)
      {
LABEL_143:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v97 = *((void *)a3 + 3);
        if (v97 && v45) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v97 + 16))(v97, v46, v45);
        }
        goto LABEL_144;
      }
      uint64_t v47 = v39;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v104);
      if (!LOBYTE(v104[1])) {
        goto LABEL_144;
      }
      WebKit::PlaybackSessionManagerProxy::externalPlaybackPropertiesChanged((uint64_t)this, v47, v43 != 0, v44, v104);
LABEL_87:
      uint64_t v61 = v104[0];
      v104[0] = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2) {
          WTF::StringImpl::destroy(v61, a2);
        }
        else {
          *(_DWORD *)v61 -= 2;
        }
      }
LABEL_149:
      if (*((_DWORD *)this + 4) == 1) {
        (*(void (**)(WebKit::PlaybackSessionManagerProxy *, IPC::Connection *))(*(void *)this + 8))(this, a2);
      }
      else {
        --*((_DWORD *)this + 4);
      }
      return;
    case 0x273:
      IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v60) {
        goto LABEL_144;
      }
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v104);
      if (!LOBYTE(v104[1])) {
        goto LABEL_144;
      }
      WTF::isIntegralOrPointerType(this);
      goto LABEL_87;
    case 0x274:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::isInWindowFullscreenActiveChanged((uint64_t)this, (uint64_t)v104[0], LOBYTE(v104[1]));
      }
      goto LABEL_149;
    case 0x275:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionIndexChanged((uint64_t)this, (uint64_t)v104[0], (uint64_t)v104[1]);
      }
      goto LABEL_149;
    case 0x276:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long long>>((uint64_t)v104, (uint64_t *)a3);
      if (v107)
      {
        uint64_t v108 = v104[1];
        uint64_t v22 = v105;
        v104[1] = 0;
        uint64_t v105 = 0;
        uint64_t v109 = v22;
        WebKit::PlaybackSessionManagerProxy::legibleMediaSelectionOptionsChanged((uint64_t)this, (uint64_t)v104[0], (unsigned int *)&v108, v106);
LABEL_58:
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v23);
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v104[1], v49);
      }
      goto LABEL_149;
    case 0x277:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::mutedChanged((uint64_t)this, (uint64_t)v104[0], LOBYTE(v104[1]));
      }
      goto LABEL_149;
    case 0x278:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::pictureInPictureSupportedChanged((uint64_t)this, (uint64_t)v104[0], LOBYTE(v104[1]));
      }
      goto LABEL_149;
    case 0x279:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::playbackStartedTimeChanged((uint64_t)this, (uint64_t)v104[0], *(double *)&v104[1]);
      }
      goto LABEL_149;
    case 0x27A:
      uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v25) {
        goto LABEL_144;
      }
      unint64_t v26 = *((void *)a3 + 1);
      uint64_t v27 = *(void *)a3;
      unint64_t v28 = *((void *)a3 + 2) - *(void *)a3;
      if (v26 <= v28)
      {
        unint64_t v90 = 0;
        uint64_t v91 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v92 = *((void *)a3 + 3);
        if (v92)
        {
          if (v26)
          {
            (*(void (**)(uint64_t))(*(void *)v92 + 16))(v92);
            uint64_t v91 = *(void *)a3;
            unint64_t v90 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v90 = 0;
            uint64_t v91 = 0;
          }
        }
      }
      else
      {
        uint64_t v29 = (unsigned __int8 *)(v27 + v28);
        uint64_t v30 = v29 + 1;
        *((void *)a3 + 2) = v29 + 1;
        if (v27)
        {
          unint64_t v31 = *v29;
          if (v31 >= 4) {
            goto LABEL_115;
          }
          unint64_t v32 = ((unint64_t)(v30 + 7) & 0xFFFFFFFFFFFFFFF8) - v27;
          if (v26 >= v32 && v26 - v32 > 7)
          {
            uint64_t v34 = (double *)(v27 + v32);
            *((void *)a3 + 2) = v34 + 1;
            unint64_t v35 = (((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8) - v27;
            if (v26 >= v35 && v26 - v35 > 7)
            {
              double v37 = *v34;
              double v38 = *(double *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
              *((void *)a3 + 2) = (((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
              WebKit::PlaybackSessionManagerProxy::rateChanged((uint64_t)this, v24, v31, v37, v38);
              goto LABEL_149;
            }
          }
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v79 = *((void *)a3 + 3);
          if (v79)
          {
LABEL_156:
            (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
            uint64_t v27 = *(void *)a3;
            unint64_t v26 = *((void *)a3 + 1);
            uint64_t v78 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v78) {
              goto LABEL_116;
            }
          }
          goto LABEL_144;
        }
        unint64_t v90 = v26;
        uint64_t v91 = 0;
      }
      unint64_t v26 = 0;
      uint64_t v27 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v93 = *((void *)a3 + 3);
      if (!v93) {
        goto LABEL_115;
      }
      if (!v90) {
        goto LABEL_138;
      }
      goto LABEL_134;
    case 0x27B:
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v6) {
        goto LABEL_144;
      }
      unint64_t v7 = *((void *)a3 + 1);
      uint64_t v8 = *(void *)a3;
      unint64_t v9 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v7 < v9 || v7 - v9 <= 7)
      {
        unint64_t v80 = 0;
        uint64_t v81 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v82 = *((void *)a3 + 3);
        if (v82)
        {
          if (v7)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v82 + 16))(v82, v8, v7);
            uint64_t v81 = *(void *)a3;
            unint64_t v80 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v80 = 0;
            uint64_t v81 = 0;
          }
        }
        goto LABEL_121;
      }
      uint64_t v11 = (unint64_t *)(v8 + v9);
      *((void *)a3 + 2) = v11 + 1;
      if (!v8)
      {
        unint64_t v80 = v7;
        uint64_t v81 = 0;
LABEL_121:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v83 = *((void *)a3 + 3);
        if (v83 && v80) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v81);
        }
        goto LABEL_114;
      }
      uint64_t v12 = v5;
      unint64_t v13 = *v11;
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      if (v13 >= 0x10000)
      {
        while (1)
        {
          IPC::Decoder::decode<std::pair<double,double>>((uint64_t)v104, a3);
          if (!(_BYTE)v105) {
            goto LABEL_112;
          }
          uint64_t v72 = HIDWORD(v109);
          if (HIDWORD(v109) == v109)
          {
            int v73 = (long long *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, HIDWORD(v109) + 1, (unint64_t)v104);
            uint64_t v72 = HIDWORD(v109);
            char v74 = v108;
            long long v75 = *v73;
          }
          else
          {
            char v74 = v108;
            long long v75 = *(_OWORD *)v104;
          }
          *((_OWORD *)v74 + v72) = v75;
          uint64_t v76 = ++HIDWORD(v109);
          if (!--v13)
          {
            uint64_t v20 = v108;
            if (v109 > v76)
            {
              if (v76)
              {
                LODWORD(v109) = v76;
                uint64_t v20 = (WTF *)WTF::fastRealloc(v108, (void *)(16 * v76));
              }
              else if (v108)
              {
                uint64_t v108 = 0;
                LODWORD(v109) = 0;
                WTF::fastFree(v20, v14);
                uint64_t v20 = v108;
              }
            }
            unsigned int v21 = v109;
            unsigned int v19 = HIDWORD(v109);
            goto LABEL_93;
          }
        }
      }
      if (v13)
      {
        LODWORD(v109) = v13;
        uint64_t v108 = (WTF *)WTF::fastMalloc((WTF *)(16 * v13));
        while (1)
        {
          IPC::Decoder::decode<std::pair<double,double>>((uint64_t)v104, a3);
          if (!(_BYTE)v105) {
            break;
          }
          uint64_t v15 = HIDWORD(v109);
          if (HIDWORD(v109) == v109)
          {
            unint64_t v16 = (long long *)WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, HIDWORD(v109) + 1, (unint64_t)v104);
            uint64_t v15 = HIDWORD(v109);
            uint64_t v17 = v108;
            long long v18 = *v16;
          }
          else
          {
            uint64_t v17 = v108;
            long long v18 = *(_OWORD *)v104;
          }
          *((_OWORD *)v17 + v15) = v18;
          unsigned int v19 = ++HIDWORD(v109);
          if (!--v13)
          {
            uint64_t v20 = v108;
            unsigned int v21 = v109;
            goto LABEL_93;
          }
        }
LABEL_112:
        uint64_t v77 = v108;
        if (v108)
        {
          uint64_t v108 = 0;
          LODWORD(v109) = 0;
          WTF::fastFree(v77, v14);
        }
        goto LABEL_114;
      }
      unsigned int v19 = 0;
      unsigned int v21 = 0;
      uint64_t v20 = 0;
LABEL_93:
      unint64_t v62 = *((void *)a3 + 1);
      uint64_t v63 = *(char **)a3;
      unint64_t v64 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v62 >= v64 && v62 - v64 > 7)
      {
        uint64_t v66 = (double *)&v63[v64];
        *((void *)a3 + 2) = v66 + 1;
        if (v63)
        {
          unint64_t v67 = (((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v63;
          if (v62 >= v67 && v62 - v67 > 7)
          {
            double v69 = *v66;
            double v70 = *(double *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8);
            *((void *)a3 + 2) = (((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            v104[0] = v20;
            v104[1] = (WTF::StringImpl *)__PAIR64__(v19, v21);
            WebKit::PlaybackSessionManagerProxy::seekableRangesVectorChanged(this, v12, (uint64_t *)v104, v69, v70);
            uint64_t v71 = v104[0];
            if (v104[0])
            {
              v104[0] = 0;
              LODWORD(v104[1]) = 0;
              WTF::fastFree(v71, a2);
            }
            goto LABEL_149;
          }
          char v84 = v20;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v89 = *((void *)a3 + 3);
          if (v89)
          {
            if (v62)
            {
              (*(void (**)(uint64_t))(*(void *)v89 + 16))(v89);
              uint64_t v63 = *(char **)a3;
              uint64_t v101 = *((void *)a3 + 1);
              uint64_t v102 = *((void *)a3 + 3);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              if (v102)
              {
                if (v101) {
                  (*(void (**)(uint64_t, char *))(*(void *)v102 + 16))(v102, v63);
                }
              }
            }
          }
          goto LABEL_129;
        }
        char v84 = v20;
        unint64_t v85 = v62;
        uint64_t v86 = 0;
      }
      else
      {
        char v84 = v20;
        unint64_t v85 = 0;
        uint64_t v86 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v87 = *((void *)a3 + 3);
        if (v87)
        {
          if (v62)
          {
            (*(void (**)(uint64_t))(*(void *)v87 + 16))(v87);
            uint64_t v86 = *(void *)a3;
            unint64_t v85 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v85 = 0;
            uint64_t v86 = 0;
          }
        }
      }
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v88 = *((void *)a3 + 3);
      if (v88 && v85) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v88 + 16))(v88, v86, v85);
      }
LABEL_129:
      if (v84) {
        WTF::fastFree(v84, v63);
      }
LABEL_144:
      a2 = *(IPC::Connection **)a3;
      uint64_t v98 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v99 = *((void *)a3 + 3);
      if (v99) {
        BOOL v100 = v98 == 0;
      }
      else {
        BOOL v100 = 1;
      }
      if (!v100) {
        (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v99 + 16))(v99, a2);
      }
      goto LABEL_149;
    case 0x27C:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::setLogIdentifier((uint64_t)this, (uint64_t)v104[0], (uint64_t)v104[1]);
      }
      goto LABEL_149;
    case 0x27D:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::setUpPlaybackControlsManagerWithID((uint64_t)this, (uint64_t)v104[0], (char)v104[1]);
      }
      goto LABEL_149;
    case 0x27E:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,double>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::volumeChanged((uint64_t)this, (uint64_t)v104[0], *(double *)&v104[1]);
      }
      goto LABEL_149;
    case 0x27F:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, v104);
      if ((_BYTE)v105) {
        WebKit::PlaybackSessionManagerProxy::wirelessVideoPlaybackDisabledChanged((uint64_t)this, (uint64_t)v104[0], LOBYTE(v104[1]));
      }
      goto LABEL_149;
    default:
      goto LABEL_149;
  }
}

uint64_t IPC::Decoder::decode<std::pair<double,double>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      double v23 = a2;
      uint64_t v25 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v3);
        a2 = v23;
        uint64_t result = v25;
        uint64_t v13 = *v23;
        unint64_t v12 = v23[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v12)
    {
      uint64_t v22 = a2;
      uint64_t v24 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
LABEL_30:
      a2 = v22;
      uint64_t result = v24;
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  char v6 = (uint64_t *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v12 = v2;
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  unint64_t v7 = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v7 && v2 - v7 > 7)
  {
    unint64_t v9 = (uint64_t *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v10 = *v9;
    uint64_t v11 = *v6;
    a2[2] = v9 + 1;
    *(void *)uint64_t result = v11;
    *(void *)(result + 8) = v10;
    *(unsigned char *)(result + 16) = 1;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      uint64_t v22 = a2;
      uint64_t v24 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v3);
      a2 = v22;
      uint64_t result = v24;
      uint64_t v20 = *v22;
      uint64_t v19 = v22[1];
      uint64_t v21 = v22[3];
      void *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v20);
          goto LABEL_30;
        }
      }
    }
  }
LABEL_19:
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v17)
  {
    long long v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (!(_BYTE)v5)
  {
LABEL_49:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    goto LABEL_50;
  }
  unint64_t v6 = a2[1];
  uint64_t v7 = *a2;
  unint64_t v8 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v7, v6);
        uint64_t v26 = *a2;
        uint64_t v25 = a2[1];
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
LABEL_29:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v28 = a2[3];
    if (v28 && v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
    }
LABEL_44:
    uint64_t v33 = *a2;
    uint64_t v34 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v35 = a2[3];
    if (v35) {
      BOOL v36 = v34 == 0;
    }
    else {
      BOOL v36 = 1;
    }
    if (!v36) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33);
    }
    goto LABEL_49;
  }
  uint64_t v10 = (unint64_t *)(v7 + v8);
  a2[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    uint64_t v25 = v6;
    uint64_t v26 = 0;
    goto LABEL_29;
  }
  uint64_t v11 = v4;
  unint64_t v12 = *v10;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  if (v12 >= 0xAAAA)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaSelectionOption>((uint64_t)v47, a2);
      if (!v50)
      {
LABEL_43:
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v5);
        goto LABEL_44;
      }
      if (HIDWORD(v52) != v52) {
        break;
      }
      WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSelectionOption>((uint64_t)&v51, (unint64_t)v47);
      if (v50) {
        goto LABEL_37;
      }
LABEL_41:
      if (!--v12)
      {
        WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v51, HIDWORD(v52));
        uint64_t v17 = v51;
        uint64_t v44 = v51;
        LODWORD(v12) = v52;
        unsigned int v18 = HIDWORD(v52);
        uint64_t v51 = 0;
        unint64_t v52 = 0;
        goto LABEL_24;
      }
    }
    int v29 = HIDWORD(v52) + 1;
    uint64_t v30 = v51 + 24 * HIDWORD(v52);
    *(unsigned char *)uint64_t v30 = v47[0];
    unint64_t v31 = v48;
    uint64_t v48 = 0;
    *(void *)(v30 + 8) = v31;
    *(unsigned char *)(v30 + 16) = v49;
    HIDWORD(v52) = v29;
LABEL_37:
    unint64_t v32 = v48;
    uint64_t v48 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    goto LABEL_41;
  }
  if (v12)
  {
    LODWORD(v52) = 24 * (int)v12 / 0x18u;
    uint64_t v51 = WTF::fastMalloc((WTF *)(24 * v12));
    while (1)
    {
      IPC::Decoder::decode<WebCore::MediaSelectionOption>((uint64_t)v47, a2);
      if (!v50) {
        goto LABEL_43;
      }
      if (HIDWORD(v52) != v52) {
        break;
      }
      WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSelectionOption>((uint64_t)&v51, (unint64_t)v47);
      if (v50) {
        goto LABEL_16;
      }
LABEL_20:
      if (!--v12)
      {
        uint64_t v17 = v51;
        LODWORD(v12) = v52;
        unsigned int v18 = HIDWORD(v52);
        goto LABEL_23;
      }
    }
    int v13 = HIDWORD(v52) + 1;
    uint64_t v14 = v51 + 24 * HIDWORD(v52);
    *(unsigned char *)uint64_t v14 = v47[0];
    uint64_t v15 = v48;
    uint64_t v48 = 0;
    *(void *)(v14 + 8) = v15;
    *(unsigned char *)(v14 + 16) = v49;
    HIDWORD(v52) = v13;
LABEL_16:
    uint64_t v16 = v48;
    uint64_t v48 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    goto LABEL_20;
  }
  unsigned int v18 = 0;
  uint64_t v17 = 0;
LABEL_23:
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v44 = v17;
LABEL_24:
  unint64_t v45 = __PAIR64__(v18, v12);
  char v46 = 1;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v5);
  unint64_t v19 = a2[1];
  uint64_t v20 = (char *)*a2;
  unint64_t v21 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v19 < v21 || v19 - v21 <= 7)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v42 = a2[3];
    if (v42)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
        uint64_t v41 = *a2;
        uint64_t v40 = a2[1];
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v41 = 0;
      }
    }
  }
  else
  {
    uint64_t v22 = &v20[v21];
    a2[2] = (uint64_t)(v22 + 8);
    if (v20)
    {
      uint64_t v23 = *(void *)v22;
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v17;
      *(_DWORD *)(a1 + 16) = v12;
      *(_DWORD *)(a1 + 20) = v18;
      *(void *)(a1 + 24) = v23;
      *(unsigned char *)(a1 + 32) = 1;
      return WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v20);
    }
    uint64_t v40 = v19;
    uint64_t v41 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v43 = a2[3];
  if (v43 && v40) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v41);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v20);
LABEL_50:
  uint64_t v37 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v38 = v37 == 0;
  }
  else {
    BOOL v38 = 1;
  }
  if (!v38)
  {
    uint64_t v39 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v39();
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::MediaSelectionOption>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaSelectionOption>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = v4 + 1;
  uint64_t v6 = *(void *)a1 + 24 * v4;
  *(unsigned char *)uint64_t v6 = *(unsigned char *)result;
  uint64_t v7 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v6 + 8) = v7;
  *(unsigned char *)(v6 + 16) = *(unsigned char *)(result + 16);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1989EEF28);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 12));
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::MediaSelectionOption>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MediaSelectionOption>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *(unsigned char *)a3 = *(unsigned char *)v5;
      uint64_t v6 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v6;
      *(unsigned char *)(a3 + 16) = *((unsigned char *)v5 + 16);
      unint64_t result = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      int v5 = (WTF::StringImpl *)((char *)v5 + 24);
      a3 += 24;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      unint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::TextList>::destruct((WTF::StringImpl *)(*(void *)result + 24 * this), (WTF::StringImpl *)(*(void *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(24 * this);
      unint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        unint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::MediaSelectionOption>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MediaSelectionOption,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::TextList>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 24 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1989EF240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1989EF64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, char a14)
{
  uint64_t v15 = v14;
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v17);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v17);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v17);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::ProcessLauncher::~ProcessLauncher(WebKit::ProcessLauncher *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B9708;
  if (*((unsigned char *)this + 56)) {
    WebKit::ExtensionProcess::invalidate((WebKit::ProcessLauncher *)((char *)this + 40));
  }
  if (*((unsigned char *)this + 104)) {
    kdebug_trace();
  }
  unsigned int v3 = (WTF::StringImpl **)*((void *)this + 11);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  if (*((unsigned char *)this + 56))
  {
    uint64_t v4 = *((unsigned int *)this + 12);
    if (v4 != -1) {
      ((void (*)(char *, char *))off_1EE9B9718[v4])(&v7, (char *)this + 40);
    }
    *((_DWORD *)this + 12) = -1;
  }
  int v5 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6) {
    os_release(v6);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ProcessLauncher::~ProcessLauncher(this, a2);

  WTF::fastFree(v2, v3);
}

void WebPushD::PushClientConnection::create(void *a1@<X0>, IPC::Decoder *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (*((_WORD *)a2 + 25) == 675)
  {
    IPC::Decoder::decode<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>(a2, (uint64_t)buf);
    if (!v71)
    {
      uint64_t v8 = qword_1EB3583C0;
      if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
LABEL_12:
        *a3 = 0;
LABEL_13:
        if (v71)
        {
          uint64_t v16 = v69;
          double v69 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v6);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          uint64_t v17 = v68;
          uint64_t v68 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v6);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          unsigned int v18 = *(WTF **)buf;
          if (*(void *)buf)
          {
            *(void *)long long buf = 0;
            int v67 = 0;
            WTF::fastFree(v18, v6);
          }
        }
        return;
      }
      *(_WORD *)long long v75 = 0;
      unint64_t v9 = "PushClientConnection::create failed: could not decode InitializeConnection arguments";
      unint64_t v10 = v8;
      uint32_t v11 = 2;
LABEL_80:
      _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, v9, v75, v11);
      goto LABEL_12;
    }
    xpc_connection_get_audit_token();
    long long v59 = v61;
    long long v60 = v62;
    if (WTF::hasEntitlement())
    {
      uint64_t v5 = WTF::fastMalloc((WTF *)0x50);
      WebPushD::PushClientConnection::PushClientConnection(v5, a1, (uint64_t *)&v68, 1, (_DWORD **)&v69, (uint64_t)v70);
      *a3 = v5;
      goto LABEL_13;
    }
    uint64_t pid = xpc_connection_get_pid((xpc_connection_t)a1);
    uint64_t v58 = 0;
    int v13 = objc_msgSend(MEMORY[0x1E4F963E8], "handleForIdentifier:error:", objc_msgSend(MEMORY[0x1E4F963F8], "identifierWithPid:", pid), &v58);
    uint64_t v14 = v58;
    if (v58)
    {
      uint64_t v15 = qword_1EB3583C0;
      if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      *(_DWORD *)long long v75 = 67109378;
      *(_DWORD *)&v75[4] = pid;
      *(_WORD *)&v75[8] = 2114;
      *(void *)&v75[10] = v14;
      unint64_t v9 = "PushClientConnection::create failed: couldn't look up remote pid %d: %{public}@";
      unint64_t v10 = v15;
      uint32_t v11 = 18;
      goto LABEL_80;
    }
    unint64_t v19 = v13;
    if (![v13 hostProcess])
    {
      uint64_t v21 = qword_1EB3583C0;
      if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_12;
      }
      *(_DWORD *)long long v75 = 67109120;
      *(_DWORD *)&v75[4] = pid;
      unint64_t v9 = "PushClientConnection::create failed: remote pid %d has no host process";
      unint64_t v10 = v21;
      uint32_t v11 = 8;
      goto LABEL_80;
    }
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v20 = (void *)[v19 hostProcess];
    if (v20)
    {
      [v20 auditToken];
    }
    else
    {
      long long v56 = 0u;
      long long v57 = 0u;
    }
    *(_OWORD *)long long v75 = v56;
    *(_OWORD *)&v75[16] = v57;
    char hasEntitlement = WTF::hasEntitlement();
    *(_OWORD *)long long v75 = v56;
    *(_OWORD *)&v75[16] = v57;
    WebKit::codeSigningIdentifier((WebKit *)v75, &v55);
    *(_OWORD *)long long v75 = v56;
    *(_OWORD *)&v75[16] = v57;
    int v24 = WTF::hasEntitlement();
    uint64_t v25 = v69;
    double v69 = 0;
    unint64_t v54 = v25;
    if (v25)
    {
      int v26 = *(_DWORD *)v25;
      int v27 = *((_DWORD *)v25 + 1);
      *(_DWORD *)v25 += 2;
      if (v27)
      {
        if (v27 == 32)
        {
          uint64_t v28 = *((void *)v25 + 1);
          if ((*((unsigned char *)v25 + 16) & 4) != 0)
          {
            uint64_t v35 = 0;
            do
            {
              int v36 = *(unsigned __int8 *)(v28 + v35);
              unsigned int v37 = v36 - 48;
              unsigned int v38 = v36 - 65;
              BOOL v34 = v37 < 0xA || v38 < 0x1A;
              BOOL v40 = !v34 || v35++ == 31;
            }
            while (!v40);
          }
          else
          {
            uint64_t v29 = 0;
            do
            {
              int v30 = *(unsigned __int16 *)(v28 + v29);
              unsigned int v31 = v30 - 48;
              unsigned int v32 = v30 - 65;
              BOOL v34 = v31 < 0xA || v32 < 0x1A;
              if (!v34) {
                break;
              }
              BOOL v40 = v29 == 62;
              v29 += 2;
            }
            while (!v40);
          }
        }
        else
        {
          LOBYTE(v34) = 0;
        }
      }
      else
      {
        LOBYTE(v34) = 1;
      }
      if (v26)
      {
        *(_DWORD *)uint64_t v25 = v26;
        if (!v24) {
          goto LABEL_67;
        }
      }
      else
      {
        WTF::StringImpl::destroy(v25, v23);
        if (!v24) {
          goto LABEL_67;
        }
      }
    }
    else
    {
      LOBYTE(v34) = 1;
      if (!v24) {
        goto LABEL_67;
      }
    }
    if (v68 && *((_DWORD *)v68 + 1)) {
      WTF::String::operator=((uint64_t *)&v55, &v68);
    }
LABEL_67:
    if (hasEntitlement) {
      goto LABEL_68;
    }
    if (!_os_feature_enabled_impl()) {
      goto LABEL_93;
    }
    long long v64 = v56;
    long long v65 = v57;
    if (objc_opt_class())
    {
      uint64_t v63 = 0;
      id v42 = objc_alloc(MEMORY[0x1E4F83A20]);
      *(_OWORD *)long long v75 = v64;
      *(_OWORD *)&v75[16] = v65;
      uint64_t v43 = (void *)[v42 initWithDomain:40 auditToken:v75 error:&v63];
      uint64_t v44 = v43;
      if (!v43)
      {
        uint64_t v51 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v72 = 134218242;
          *(void *)&v72[4] = 40;
          __int16 v73 = 2114;
          uint64_t v74 = v63;
          _os_log_error_impl(&dword_1985F2000, v51, OS_LOG_TYPE_ERROR, "Failure getting info for domain %qu: %{public}@", v72, 0x16u);
        }
        goto LABEL_93;
      }
      uint64_t v45 = [v43 answer];
      CFRelease(v44);
      if (v45 != 4)
      {
LABEL_93:
        char v46 = qword_1EB3583C0;
        if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_94;
        }
        *(_WORD *)long long v75 = 0;
        uint64_t v47 = "PushClientConnection::create failed: client is missing Web Push entitlement";
        goto LABEL_104;
      }
    }
    else
    {
      *(void *)uint64_t v72 = 0;
      uint64_t v63 = 0;
      os_eligibility_get_domain_answer();
      if (*(void *)v72 != 4) {
        goto LABEL_93;
      }
    }
    *(_OWORD *)long long v75 = v56;
    *(_OWORD *)&v75[16] = v57;
    if (WTF::hasEntitlement())
    {
LABEL_68:
      if (v55 && *((_DWORD *)v55 + 1))
      {
        if (v34)
        {
          uint64_t v41 = WTF::fastMalloc((WTF *)0x50);
          WebPushD::PushClientConnection::PushClientConnection(v41, a1, (uint64_t *)&v55, v24, (_DWORD **)&v54, (uint64_t)v70);
LABEL_95:
          *a3 = v41;
          unint64_t v52 = v54;
          unint64_t v54 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2) {
              WTF::StringImpl::destroy(v52, v6);
            }
            else {
              *(_DWORD *)v52 -= 2;
            }
          }
          uint64_t v53 = v55;
          char v55 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2) {
              WTF::StringImpl::destroy(v53, v6);
            }
            else {
              *(_DWORD *)v53 -= 2;
            }
          }
          goto LABEL_13;
        }
        uint64_t v48 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
        {
          WTF::String::utf8();
          uint64_t v49 = *(void *)v72 ? *(void *)v72 + 16 : 0;
          *(_DWORD *)long long v75 = 136446210;
          *(void *)&v75[4] = v49;
          _os_log_error_impl(&dword_1985F2000, v48, OS_LOG_TYPE_ERROR, "PushClientConnection::create failed: invalid push partition %{public}s", v75, 0xCu);
          char v50 = *(WTF **)v72;
          *(void *)uint64_t v72 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 1) {
              WTF::fastFree(v50, v6);
            }
            else {
              --*(_DWORD *)v50;
            }
          }
        }
LABEL_94:
        uint64_t v41 = 0;
        goto LABEL_95;
      }
      char v46 = qword_1EB3583C0;
      if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_94;
      }
      *(_WORD *)long long v75 = 0;
      uint64_t v47 = "PushClientConnection::create failed: cannot determine code signing identifier of client";
LABEL_104:
      _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, v47, v75, 2u);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  char v7 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "PushClientConnection::create failed: first message must be InitializeConnection", buf, 2u);
  }
  *a3 = 0;
}

void sub_1989EFF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,int a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  CFRelease(v39);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v41);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v41);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a39)
  {
    if (a34)
    {
      if (*(_DWORD *)a34 == 2) {
        WTF::StringImpl::destroy(a34, v41);
      }
      else {
        *(_DWORD *)a34 -= 2;
      }
    }
    if (a33)
    {
      if (*(_DWORD *)a33 == 2) {
        WTF::StringImpl::destroy(a33, v41);
      }
      else {
        *(_DWORD *)a33 -= 2;
      }
    }
    if (a31) {
      WTF::fastFree(a31, v41);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushClientConnection::PushClientConnection(uint64_t a1, void *a2, uint64_t *a3, char a4, _DWORD **a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE9BB1B0;
  if (a2) {
    id v12 = a2;
  }
  uint64_t v13 = *a3;
  *a3 = 0;
  *(void *)(a1 + 40) = v13;
  *(unsigned char *)(a1 + 48) = a4;
  uint64_t v14 = *a5;
  if (*a5) {
    *v14 += 2;
  }
  *(void *)(a1 + 56) = v14;
  uint64_t v15 = (_OWORD *)(a1 + 64);
  if (*(unsigned char *)(a6 + 16))
  {
    _OWORD *v15 = *(_OWORD *)a6;
  }
  else
  {
    *(void *)uint64_t v15 = 0;
    *(void *)(a1 + 72) = 0;
  }
  return a1;
}

void sub_1989F0104(_Unwind_Exception *a1, void *a2)
{
  *unint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

void WebPushD::PushClientConnection::initializeConnection(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    int v3 = 134217984;
    uint64_t v4 = a1;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "PushClientConnection::initializeConnection(%p): ignoring duplicate message", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t WebPushD::PushClientConnection::getPushTopicsForTesting(WebPushD::PushClientConnection *a1, uint64_t *a2)
{
  int v3 = a1;
  {
    uint64_t v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    int v3 = a1;
    a2 = v6;
  }

  return WebPushD::WebPushDaemon::getPushTopicsForTesting((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

void WebPushD::PushClientConnection::subscriptionSetIdentifierForOrigin(WebPushD::PushClientConnection *this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 7);
  if (v6)
  {
    int v7 = *((_DWORD *)v6 + 1);
    *(_DWORD *)v6 += 2;
    if (v7)
    {
      uint64_t v8 = v6;
      goto LABEL_15;
    }
  }
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
  }
  unint64_t v9 = WebPushD::WebPushDaemon::ensureWebClipCache((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
  WebPushD::WebClipCache::preferredWebClipIdentifier(v9, (WebPushD::PushClientConnection *)((char *)this + 40), a2, (WebPushD *)&v15);
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  if (!v6) {
    goto LABEL_13;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    if (!v8) {
      goto LABEL_22;
    }
LABEL_14:
    if (!*((_DWORD *)v8 + 1))
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 32) = 0;
      int v12 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
      {
LABEL_18:
        *(_DWORD *)uint64_t v8 = v12;
        return;
      }
      goto LABEL_20;
    }
LABEL_15:
    uint32_t v11 = (_DWORD *)*((void *)this + 5);
    if (v11) {
      *v11 += 2;
    }
    int v12 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    uint64_t v13 = *((void *)this + 8);
    uint64_t v14 = *((void *)this + 9);
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v13;
    *(void *)(a3 + 24) = v14;
    *(unsigned char *)(a3 + 32) = 1;
    if (v12) {
      goto LABEL_18;
    }
LABEL_20:
    WTF::StringImpl::destroy(v8, a2);
    return;
  }
  WTF::StringImpl::destroy(v6, a2);
  unint64_t v10 = v15;
  uint64_t v15 = 0;
  if (!v10) {
    goto LABEL_13;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_13:
    if (v8) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v10, a2);
  if (v8) {
    goto LABEL_14;
  }
LABEL_22:
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
}

void sub_1989F03B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushClientConnection::debugDescription(WebPushD::PushClientConnection *this)
{
  int v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  char v15 = 1;
  int v16 = 0;
  __int16 v17 = 256;
  int v18 = 0;
  WTF::TextStream::operator<<();
  uint64_t v2 = *((void *)this + 7);
  if (v2 && *(_DWORD *)(v2 + 4))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = *((void *)this + 9);
  uint64_t v5 = (WebPushD::PushClientConnection *)((char *)this + 64);
  if (v3 | v4)
  {
    WTF::TextStream::operator<<();
    if (*(_OWORD *)v5 == 0)
    {
      uint64_t result = 142;
      __break(0xC471u);
      return result;
    }
    WTF::UUID::toString((uint64_t *)&v11, v5);
    WTF::TextStream::operator<<();
    int v7 = v11;
    uint32_t v11 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  WTF::TextStream::release((WTF::TextStream *)&v12);
  unint64_t v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = (uint64_t)v12;
  int v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1989F0548(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::PushClientConnection::connectionClosed(WebPushD::PushClientConnection *this)
{
  unint64_t v1 = (void *)*((void *)this + 4);
  if (v1)
  {

    *((void *)this + 4) = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebPushD::PushClientConnection::setPushAndNotificationsEnabledForOrigin(WebPushD::PushClientConnection *a1, WTF::StringImpl **a2, char a3, uint64_t *a4)
{
  int v7 = a1;
  {
    uint32_t v11 = a2;
    int v12 = a4;
    char v10 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    int v7 = a1;
    a2 = v11;
    a4 = v12;
    a3 = v10;
  }

  return WebPushD::WebPushDaemon::setPushAndNotificationsEnabledForOrigin((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v7, a2, a3, a4);
}

void WebPushD::PushClientConnection::injectPushMessageForTesting(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  uint64_t v5 = a1;
  {
    uint64_t v8 = a3;
    uint64_t v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v6;
    uint64_t v5 = a1;
    a3 = v8;
  }

  WebPushD::WebPushDaemon::injectPushMessageForTesting((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::injectEncryptedPushMessageForTesting(WebPushD::PushClientConnection *a1, _DWORD **a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  {
    unint64_t v9 = a3;
    int v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    uint64_t v5 = a1;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::injectEncryptedPushMessageForTesting((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

void WebPushD::PushClientConnection::getPendingPushMessage(WTF **a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  {
    uint64_t v5 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    uint64_t v3 = a1;
    a2 = v5;
  }

  WebPushD::WebPushDaemon::getPendingPushMessage((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

uint64_t WebPushD::PushClientConnection::getPendingPushMessages(WTF **a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  {
    uint64_t v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    uint64_t v3 = a1;
    a2 = v6;
  }

  return WebPushD::WebPushDaemon::getPendingPushMessages((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

uint64_t WebPushD::PushClientConnection::subscribeToPushService(const WTF::URL *a1, WebCore::SecurityOriginData *this, uint64_t a3, uint64_t *a4)
{
  int v7 = a1;
  {
    uint32_t v11 = this;
    int v12 = a4;
    uint64_t v10 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    int v7 = a1;
    a3 = v10;
    this = v11;
    a4 = v12;
  }

  return WebPushD::WebPushDaemon::subscribeToPushService((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v7, this, a3, a4);
}

uint64_t WebPushD::PushClientConnection::unsubscribeFromPushService(const WTF::URL *a1, WebCore::SecurityOriginData *this, uint64_t a3, char a4, uint64_t *a5)
{
  unint64_t v9 = a1;
  {
    char v15 = a5;
    uint32_t v11 = this;
    char v12 = a4;
    uint64_t v14 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    unint64_t v9 = a1;
    a3 = v14;
    this = v11;
    a4 = v12;
    a5 = v15;
  }

  return WebPushD::WebPushDaemon::unsubscribeFromPushService((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v9, this, a3, a4, a5);
}

uint64_t WebPushD::PushClientConnection::getPushSubscription(const WTF::URL *a1, WebCore::SecurityOriginData *this, uint64_t *a3)
{
  uint64_t v5 = a1;
  {
    unint64_t v9 = a3;
    int v7 = this;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    this = v7;
    uint64_t v5 = a1;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::getPushSubscription((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, this, a3);
}

uint64_t WebPushD::PushClientConnection::incrementSilentPushCount(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, uint64_t *a3)
{
  uint64_t v5 = this;
  {
    unint64_t v9 = a3;
    int v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    uint64_t v5 = this;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::incrementSilentPushCount((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::removeAllPushSubscriptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  {
    uint64_t v6 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    uint64_t v3 = a1;
    a2 = v6;
  }

  return WebPushD::WebPushDaemon::removeAllPushSubscriptions((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v3, a2);
}

uint64_t WebPushD::PushClientConnection::removePushSubscriptionsForOrigin(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, uint64_t *a3)
{
  uint64_t v5 = this;
  {
    unint64_t v9 = a3;
    int v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    uint64_t v5 = this;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::removePushSubscriptionsForOrigin((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::setPublicTokenForTesting(WebPushD::PushClientConnection *a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  {
    unint64_t v9 = a3;
    int v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    uint64_t v5 = a1;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::setPublicTokenForTesting((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::getPushPermissionState(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, uint64_t *a3)
{
  uint64_t v5 = this;
  {
    unint64_t v9 = a3;
    int v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    uint64_t v5 = this;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::getPushPermissionState((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::requestPushPermission(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, uint64_t *a3)
{
  uint64_t v5 = this;
  {
    unint64_t v9 = a3;
    int v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    uint64_t v5 = this;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::requestPushPermission((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

WTF *WebPushD::PushClientConnection::showNotification(WebPushD::PushClientConnection *a1, uint64_t a2, atomic_uint **a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a1;
  {
    uint64_t v10 = a3;
    uint64_t v11 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a3 = v10;
    a2 = v11;
    uint64_t v6 = a1;
    uint64_t v4 = a4;
  }
  int v7 = *a3;
  if (*a3) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v14 = (WTF *)v7;
  WebPushD::WebPushDaemon::showNotification((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v6, a2, (uint64_t)&v14, v4);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(result, v8);
  }
  return result;
}

void sub_1989F0DB4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)(v2 - 24);
  *(void *)(v2 - 24) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushClientConnection::getNotifications(const WTF::URL *a1, WebCore::SecurityOriginData *this, uint64_t a3, uint64_t *a4)
{
  int v7 = a1;
  {
    uint64_t v11 = this;
    char v12 = a4;
    uint64_t v10 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    int v7 = a1;
    a3 = v10;
    this = v11;
    a4 = v12;
  }

  return WebPushD::WebPushDaemon::getNotifications((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v7, this, a3, a4);
}

uint64_t WebPushD::PushClientConnection::cancelNotification(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, WTF::UUID *a3)
{
  uint64_t v5 = this;
  {
    unint64_t v9 = a3;
    int v7 = a2;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    a2 = v7;
    uint64_t v5 = this;
    a3 = v9;
  }

  return WebPushD::WebPushDaemon::cancelNotification((uint64_t)&WebPushD::WebPushDaemon::singleton(void)::daemon, v5, a2, a3);
}

uint64_t WebPushD::PushClientConnection::setAppBadge(WebPushD::PushClientConnection *this, WebCore::SecurityOriginData *a2, uint64_t a3, char a4)
{
  int v7 = this;
  {
    uint64_t v11 = a2;
    char v12 = a4;
    uint64_t v10 = a3;
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    int v7 = this;
    a3 = v10;
    a2 = v11;
    a4 = v12;
  }

  return WebPushD::WebPushDaemon::setAppBadge((int)&WebPushD::WebPushDaemon::singleton(void)::daemon, v7, a2, a3, a4);
}

uint64_t WebPushD::PushClientConnection::getAppBadgeForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  {
    WebPushD::WebPushDaemon::WebPushDaemon((WebPushD::WebPushDaemon *)&WebPushD::WebPushDaemon::singleton(void)::daemon);
    uint64_t v2 = a2;
  }

  return WTF::CompletionHandler<void ()(std::optional<unsigned long long>)>::operator()(v2);
}

uint64_t WebPushD::PushService::create(const WTF::String *a1, WTF::StringImpl **a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = os_transaction_create();
  unint64_t v9 = (WebPushD::ApplePushServiceConnection *)WTF::fastMalloc((WTF *)0x78);
  WebPushD::ApplePushServiceConnection::ApplePushServiceConnection(v9, a1);
  uint64_t v10 = *a2;
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = *a4;
  *a4 = 0;
  uint64_t v13 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v13 = &unk_1EE9B9928;
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  *((void *)v13 + 1) = v10;
  *((void *)v13 + 2) = v8;
  *((void *)v13 + 3) = v9;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  unsigned int v38 = v13;
  if ((_MergedGlobals_53 & 1) == 0)
  {
    qword_1EB358E28 = 0;
    *(void *)&dword_1EB358E30 = 0;
    _MergedGlobals_53 = 1;
  }
  uint64_t v14 = (WTF::RunLoop *)WTF::RunLoop::main(v13);
  if ((WTF::RunLoop::isCurrent(v14) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1424);
  }
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    int v15 = dword_1EB358E34;
    if (dword_1EB358E34 == dword_1EB358E30)
    {
      int v16 = (WTF::RunLoop **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&qword_1EB358E28, dword_1EB358E34 + 1, (unint64_t)&v38);
      int v15 = dword_1EB358E34;
      __int16 v17 = (WTF::RunLoop **)(qword_1EB358E28 + 8 * dword_1EB358E34);
    }
    else
    {
      __int16 v17 = (WTF::RunLoop **)(qword_1EB358E28 + 8 * dword_1EB358E34);
      int v16 = &v38;
    }
    uint64_t v23 = *v16;
    WTF::StringImpl *v16 = 0;
    WTF::StringImpl *v17 = v23;
    unsigned int v24 = v15 + 1;
    dword_1EB358E34 = v15 + 1;
    uint64_t v25 = qword_1EB3583C0;
    int v26 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "Device has unlocked. Running initialization.", buf, 2u);
      unsigned int v24 = dword_1EB358E34;
    }
    if (v24)
    {
      uint64_t v27 = qword_1EB358E28;
      uint64_t v28 = 8 * v24;
      do
      {
        uint64_t v29 = WTF::WorkQueue::main(v26);
        int v26 = (WTF::WorkQueue *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 32))(v29, v27);
        v27 += 8;
        v28 -= 8;
      }
      while (v28);
    }
LABEL_31:
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&qword_1EB358E28, 0);
    if (WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken != -1)
    {
      notify_cancel(WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken);
      WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken = -1;
    }
    goto LABEL_33;
  }
  int v18 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "Device is locked. Delaying init until it unlocks for the first time.", buf, 2u);
  }
  if (WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken == -1)
  {
    unint64_t v19 = (const char *)*MEMORY[0x1E4F78160];
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    uint64_t v40 = 3221225472;
    uint64_t v41 = ___ZN8WebPushDL23performAfterFirstUnlockEON3WTF8FunctionIFvvEEE_block_invoke;
    id v42 = &__block_descriptor_33_e8_v12__0i8l;
    notify_register_dispatch(v19, &WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken, MEMORY[0x1E4F14428], buf);
  }
  int v20 = dword_1EB358E34;
  if (dword_1EB358E34 == dword_1EB358E30)
  {
    uint64_t v21 = (WTF::RunLoop **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&qword_1EB358E28, dword_1EB358E34 + 1, (unint64_t)&v38);
    int v20 = dword_1EB358E34;
    uint64_t v22 = (WTF::RunLoop **)(qword_1EB358E28 + 8 * dword_1EB358E34);
  }
  else
  {
    uint64_t v22 = (WTF::RunLoop **)(qword_1EB358E28 + 8 * dword_1EB358E34);
    uint64_t v21 = &v38;
  }
  int v30 = *v21;
  WTF *v21 = 0;
  char *v22 = v30;
  dword_1EB358E34 = v20 + 1;
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    unsigned int v32 = qword_1EB3583C0;
    uint64_t v33 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
    if (v33)
    {
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEFAULT, "Device has unlocked. Running initialization.", v43, 2u);
    }
    if (dword_1EB358E34)
    {
      uint64_t v34 = qword_1EB358E28;
      uint64_t v35 = 8 * dword_1EB358E34;
      do
      {
        uint64_t v36 = WTF::WorkQueue::main(v33);
        uint64_t v33 = (WTF::WorkQueue *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 32))(v36, v34);
        v34 += 8;
        v35 -= 8;
      }
      while (v35);
    }
    goto LABEL_31;
  }
LABEL_33:
  uint64_t result = (uint64_t)v38;
  unsigned int v38 = 0;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    if (!v10) {
      return result;
    }
  }
  else if (!v10)
  {
    return result;
  }
  if (*(_DWORD *)v10 == 2) {
    return WTF::StringImpl::destroy(v10, v31);
  }
  *(_DWORD *)v10 -= 2;
  return result;
}

void sub_1989F1440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(v12);
  WTF::fastFree(v16, v17);
  if (v11)
  {

    if (!v10) {
      goto LABEL_12;
    }
  }
  else if (!v10)
  {
    goto LABEL_12;
  }
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, v18);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
LABEL_12:
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushService::createMockService(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v4 = *a1;
  *a1 = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9B99A0;
  v6[1] = v4;
  void v6[2] = v5;
  unint64_t v9 = v6;
  WebCore::PushDatabase::create();
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      return WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  return result;
}

void sub_1989F1628(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::PushService(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *(void *)a1 = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *a3;
  *a3 = 0;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *a4;
  *a4 = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 48) = 0u;
  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    unint64_t v9 = *(atomic_uint **)a1;
    if (*(void *)a1) {
      atomic_fetch_add(v9, 1u);
    }
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v10 = &unk_1EE9B99C8;
    v10[1] = a1;
    uint64_t v10[2] = v9;
    int v15 = v10;
    WebPushD::PushServiceConnection::startListeningForPublicToken(v8, (uint64_t *)&v15);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    uint64_t v12 = *(atomic_uint **)a1;
    if (*(void *)a1) {
      atomic_fetch_add(v12, 1u);
    }
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v13 = &unk_1EE9B99F0;
    v13[1] = a1;
    uint64_t v13[2] = v12;
    int v15 = v13;
    WebPushD::PushServiceConnection::startListeningForPushMessages(v11, (uint64_t *)&v15);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    return a1;
  }
  else
  {
    uint64_t result = 186;
    __break(0xC471u);
  }
  return result;
}

void sub_1989F1888(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  uint64_t v14 = *(void **)(v10 + 48);
  if (v14) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v14, a2);
  }
  int v15 = *(void **)(v10 + 40);
  if (v15) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, a2);
  }
  if (*v12) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  }
  uint64_t v16 = *(void *)(v10 + 24);
  *(void *)(v10 + 24) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  std::unique_ptr<WebCore::PushDatabase>::reset[abi:sn180100](v11, 0);
  uint64_t v18 = *(void *)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v10, v17);
  _Unwind_Resume(a1);
}

void WebPushD::PushService::~PushService(WebPushD::PushService *this, void *a2)
{
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::unique_ptr<WebCore::PushDatabase>::reset[abi:sn180100]((uint64_t *)this + 2, 0);
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v7);
}

uint64_t WebPushD::GetSubscriptionRequest::startInternal(WebPushD::GetSubscriptionRequest *this)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v3 = &unk_1EE9B9A40;
  v3[1] = this;
  v3[2] = v2;
  uint64_t v5 = (uint64_t)v3;
  WebCore::PushDatabase::getRecordBySubscriptionSetAndScope();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void sub_1989F1B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::~PushServiceRequestImpl(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B9800;
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3) {

  }
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  WebPushD::PushServiceRequest::~PushServiceRequest(this, a2);
}

uint64_t WebPushD::SubscribeRequest::startImpl(uint64_t a1, char a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v4 = *(atomic_uint **)(a1 + 8);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v5 = &unk_1EE9B9A68;
  *(void *)(v5 + 8) = a1;
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = a2;
  uint64_t v7 = v5;
  WebCore::PushDatabase::getRecordBySubscriptionSetAndScope();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_1989F1D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::UnsubscribeRequest::startInternal(WebPushD::UnsubscribeRequest *this)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v3 = &unk_1EE9B9B58;
  v3[1] = this;
  v3[2] = v2;
  uint64_t v5 = (uint64_t)v3;
  WebCore::PushDatabase::getRecordBySubscriptionSetAndScope();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void sub_1989F1E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::PushService::enqueuePushServiceRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  WebCore::makePushTopic();
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *(_DWORD *)(*(void *)v58 + 16);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v58);
  }
  uint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = v6 + 40 * (v9 & v7);
    uint64_t v14 = *(WTF **)v13;
    if (*(void *)v13 == -1)
    {
      uint64_t v10 = v6 + 40 * v12;
      goto LABEL_13;
    }
    if (!v14) {
      break;
    }
    if (WTF::equal(v14, *(const WTF::StringImpl **)v58, v5))
    {
      char v17 = 1;
      goto LABEL_50;
    }
LABEL_13:
    unsigned int v9 = i + v12;
  }
  if (v10)
  {
    *(void *)(v10 + 32) = 0;
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    --*(_DWORD *)(*a1 - 16);
    uint64_t v13 = v10;
  }
  uint64_t v15 = *(void *)v58;
  *(void *)uint64_t v58 = 0;
  uint64_t v16 = *(WTF::StringImpl **)v13;
  *(void *)uint64_t v13 = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v4);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  unint64_t v19 = *(void *)(v13 + 8);
  unint64_t v18 = *(void *)(v13 + 16);
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  int v20 = *(WTF **)(v13 + 24);
  *(void *)(v13 + 24) = 0;
  uint64_t v21 = *(unsigned int *)(v13 + 32);
  *(_DWORD *)(v13 + 32) = 0;
  if (v19 <= v18)
  {
    if (v19 != v18)
    {
      uint64_t v28 = (uint64_t *)((char *)v20 + 8 * v19);
      uint64_t v29 = 8 * v18 - 8 * v19;
      do
      {
        uint64_t v30 = *v28;
        uint64_t *v28 = 0;
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
  }
  else
  {
    if (v18)
    {
      uint64_t v22 = 8 * v18;
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = *(void *)v23;
        *(void *)uint64_t v23 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        uint64_t v23 = (WTF *)((char *)v23 + 8);
        v22 -= 8;
      }
      while (v22);
    }
    if (v19 != v21)
    {
      uint64_t v25 = (uint64_t *)((char *)v20 + 8 * v19);
      uint64_t v26 = 8 * v21 - 8 * v19;
      do
      {
        uint64_t v27 = *v25;
        uint64_t *v25 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
  }
  if (v20) {
    WTF::fastFree(v20, v4);
  }
  uint64_t v31 = *a1;
  if (*a1) {
    int v32 = *(_DWORD *)(v31 - 12) + 1;
  }
  else {
    int v32 = 1;
  }
  *(_DWORD *)(v31 - 12) = v32;
  uint64_t v33 = *a1;
  if (*a1) {
    int v34 = *(_DWORD *)(v33 - 12);
  }
  else {
    int v34 = 0;
  }
  uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
  unint64_t v36 = *(unsigned int *)(v33 - 4);
  if (v36 > 0x400)
  {
    if (v36 <= 2 * v35) {
LABEL_48:
    }
      uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v13);
  }
  else if (3 * v36 <= 4 * v35)
  {
    goto LABEL_48;
  }
  char v17 = 0;
LABEL_50:
  unsigned int v37 = *(WTF::StringImpl **)v58;
  *(void *)uint64_t v58 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v4);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v38 = *a2;
  uint64_t v39 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v40 = *(void *)(v13 + 8);
    unint64_t v41 = *(void *)(v13 + 16);
    if (v40 > v41) {
      v41 += *(unsigned int *)(v13 + 32);
    }
    *(_DWORD *)uint64_t v58 = 134218240;
    *(void *)&v58[4] = v38;
    __int16 v59 = 2048;
    unint64_t v60 = v41 - v40;
    _os_log_impl(&dword_1985F2000, v39, OS_LOG_TYPE_DEFAULT, "Enqueuing PushServiceRequest %p (current queue size: %zu)", v58, 0x16u);
  }
  uint64_t v43 = *(void *)(v13 + 8);
  uint64_t v42 = *(void *)(v13 + 16);
  if (!v43)
  {
    uint64_t v44 = *(unsigned int *)(v13 + 32);
    if (v42)
    {
      if (v42 != v44 - 1) {
        goto LABEL_77;
      }
    }
    else if (v44)
    {
      uint64_t v42 = 0;
      goto LABEL_77;
    }
LABEL_66:
    uint64_t v45 = v44;
    unint64_t v46 = ((unint64_t)v44 >> 2) + v44;
    if (v46 <= 0xF) {
      unint64_t v46 = 15;
    }
    if (v46 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v47 = *(char **)(v13 + 24);
    int v48 = v46 + 1;
    uint64_t v49 = (char *)WTF::fastMalloc((WTF *)(8 * (v46 + 1)));
    *(_DWORD *)(v13 + 32) = v48;
    *(void *)(v13 + 24) = v49;
    unint64_t v50 = *(void *)(v13 + 8);
    unint64_t v51 = *(void *)(v13 + 16);
    if (v50 <= v51)
    {
      memcpy(&v49[8 * v50], &v47[8 * v50], 8 * v51 - 8 * v50);
      if (!v47)
      {
LABEL_76:
        uint64_t v42 = *(void *)(v13 + 16);
        goto LABEL_77;
      }
    }
    else
    {
      memcpy(v49, v47, 8 * v51);
      uint64_t v52 = *(void *)(v13 + 8);
      uint64_t v53 = v52 - v45 + *(unsigned int *)(v13 + 32);
      memcpy((void *)(*(void *)(v13 + 24) + 8 * v53), &v47[8 * v52], 8 * v45 - 8 * v52);
      *(void *)(v13 + 8) = v53;
      if (!v47) {
        goto LABEL_76;
      }
    }
    if (*(char **)(v13 + 24) == v47)
    {
      *(void *)(v13 + 24) = 0;
      *(_DWORD *)(v13 + 32) = 0;
    }
    WTF::fastFree((WTF *)v47, v54);
    goto LABEL_76;
  }
  if (v42 + 1 == v43)
  {
    LODWORD(v44) = *(_DWORD *)(v13 + 32);
    goto LABEL_66;
  }
LABEL_77:
  uint64_t v55 = *(void *)(v13 + 24);
  uint64_t v56 = *a2;
  *a2 = 0;
  *(void *)(v55 + 8 * v42) = v56;
  if (v42 == *(unsigned int *)(v13 + 32) - 1) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v42 + 1;
  }
  *(void *)(v13 + 16) = v57;
  if ((v17 & 1) == 0) {
    (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  }
}

void sub_1989F2374(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::PushService::finishedPushServiceRequest(uint64_t *a1, uint64_t a2)
{
  WebCore::makePushTopic();
  uint64_t v6 = *a1;
  if (!*a1) {
    goto LABEL_12;
  }
  int v7 = *(_DWORD *)(v6 - 8);
  unsigned int v8 = *((_DWORD *)v47 + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(v47);
  }
  for (i = 0; ; unsigned int v9 = i + v11)
  {
    int v11 = v9 & v7;
    uint64_t v12 = v6 + 40 * (v9 & v7);
    uint64_t v13 = *(WTF **)v12;
    if (*(void *)v12 == -1) {
      goto LABEL_9;
    }
    if (!v13) {
      break;
    }
    if (WTF::equal(v13, v47, v5)) {
      goto LABEL_13;
    }
LABEL_9:
    ++i;
  }
  if (*a1)
  {
    uint64_t v12 = *a1 + 40 * *(unsigned int *)(*a1 - 4);
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v12 = 0;
LABEL_13:
  uint64_t v14 = v47;
  uint64_t v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v4);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = *a1;
  if (*a1) {
    v15 += 40 * *(unsigned int *)(v15 - 4);
  }
  if (v15 == v12)
  {
LABEL_78:
    __break(0xC471u);
    JUMPOUT(0x1989F27E0);
  }
  unint64_t v16 = *(void *)(v12 + 8);
  unint64_t v17 = *(void *)(v12 + 16);
  unint64_t v18 = v17;
  if (v16 > v17) {
    unint64_t v18 = v17 + *(unsigned int *)(v12 + 32);
  }
  if (v18 == v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2800);
  }
  if (v16 == v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2820);
  }
  uint64_t v19 = *(void *)(v12 + 24);
  uint64_t v20 = *(void *)(v19 + 8 * v16);
  *(void *)(v19 + 8 * v16) = 0;
  uint64_t v21 = *(void *)(v12 + 24);
  uint64_t v22 = *(WTF::WorkQueue **)(v21 + 8 * v16);
  *(void *)(v21 + 8 * v16) = 0;
  if (v22)
  {
    uint64_t v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)v22 + 8))(v22);
    unint64_t v16 = *(void *)(v12 + 8);
  }
  uint64_t v23 = *(unsigned int *)(v12 + 32);
  if (v16 == v23 - 1) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v16 + 1;
  }
  *(void *)(v12 + 8) = v24;
  if (v20 != a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2840);
  }
  unint64_t v25 = *(void *)(v12 + 16);
  if (v24 <= v25) {
    uint64_t v23 = 0;
  }
  if (v23 + v25 != v24)
  {
    if (v24 != v25)
    {
      uint64_t v27 = *(void *)(*(void *)(v12 + 24) + 8 * v24);
      goto LABEL_70;
    }
    goto LABEL_78;
  }
  uint64_t v26 = *a1;
  if (*a1)
  {
    v26 += 40 * *(unsigned int *)(v26 - 4);
    if (v26 == v12) {
      goto LABEL_69;
    }
LABEL_39:
    if (v26 == v12) {
      goto LABEL_69;
    }
    uint64_t v22 = WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, v4);
    unint64_t v29 = *(void *)(v12 + 8);
    unint64_t v30 = *(void *)(v12 + 16);
    uint64_t v31 = *(WTF **)(v12 + 24);
    if (v29 > v30)
    {
      if (v30)
      {
        uint64_t v32 = 8 * v30;
        do
        {
          uint64_t v22 = *(WTF::WorkQueue **)v31;
          *(void *)uint64_t v31 = 0;
          if (v22) {
            uint64_t v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)v22 + 8))(v22);
          }
          uint64_t v31 = (WTF *)((char *)v31 + 8);
          v32 -= 8;
        }
        while (v32);
        uint64_t v31 = *(WTF **)(v12 + 24);
        unint64_t v29 = *(void *)(v12 + 8);
      }
      uint64_t v33 = *(unsigned int *)(v12 + 32);
      if (v29 != v33)
      {
        int v34 = (WTF::WorkQueue **)((char *)v31 + 8 * v29);
        uint64_t v35 = 8 * v33 - 8 * v29;
        do
        {
          uint64_t v22 = *v34;
          *int v34 = 0;
          if (v22) {
            uint64_t v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)v22 + 8))(v22);
          }
          ++v34;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_58;
    }
    if (v29 != v30)
    {
      unint64_t v36 = (WTF::WorkQueue **)((char *)v31 + 8 * v29);
      uint64_t v37 = 8 * v30 - 8 * v29;
      do
      {
        uint64_t v22 = *v36;
        atomic_uchar *volatile *v36 = 0;
        if (v22) {
          uint64_t v22 = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)v22 + 8))(v22);
        }
        ++v36;
        v37 -= 8;
      }
      while (v37);
LABEL_58:
      uint64_t v31 = *(WTF **)(v12 + 24);
    }
    if (v31)
    {
      *(void *)(v12 + 24) = 0;
      *(_DWORD *)(v12 + 32) = 0;
      uint64_t v22 = (WTF::WorkQueue *)WTF::fastFree(v31, v28);
    }
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v38 = *a1;
    if (*a1) {
      int v39 = *(_DWORD *)(v38 - 12) - 1;
    }
    else {
      int v39 = -1;
    }
    *(_DWORD *)(v38 - 12) = v39;
    uint64_t v40 = *a1;
    if (*a1
      && ((unsigned int v41 = 6 * *(_DWORD *)(v40 - 12), v42 = *(_DWORD *)(v40 - 4), v41 < v42) ? (v43 = v42 >= 9) : (v43 = 0), v43))
    {
      uint64_t v22 = (WTF::WorkQueue *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v42 >> 1, 0);
      uint64_t v27 = 0;
    }
    else
    {
LABEL_69:
      uint64_t v27 = 0;
    }
  }
  else
  {
    uint64_t v27 = 0;
    if (v12) {
      goto LABEL_39;
    }
  }
LABEL_70:
  uint64_t v44 = WTF::WorkQueue::main(v22);
  uint64_t v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v45 = &unk_1EE9B9BF8;
  *((void *)v45 + 1) = a2;
  *((void *)v45 + 2) = v27;
  uint64_t v47 = v45;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v44 + 32))(v44, &v47);
  uint64_t result = v47;
  uint64_t v47 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1989F2864(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::getSubscription(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2)
  {
    int v6 = *(_DWORD *)(*(void *)a2 + 4);
    if (v6 && *a3 && (*a3)[1])
    {
      uint64_t v9 = WTF::fastMalloc((WTF *)0x70);
      uint64_t v10 = (void *)WebPushD::PushServiceRequest::PushServiceRequest(v9, a1, a2, a3);
      uint64_t v11 = *a4;
      *a4 = 0;
      v10[12] = v11;
      v10[13] = 0;
      *uint64_t v10 = &unk_1EE9B9740;
      *(void *)long long buf = v10;
      WebPushD::PushService::enqueuePushServiceRequest((uint64_t *)(a1 + 32), (uint64_t *)buf);
      uint64_t result = *(void *)buf;
      if (*(void *)buf) {
        return (*(uint64_t (**)(void))(**(void **)buf + 8))(*(void *)buf);
      }
      return result;
    }
    uint64_t v13 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v14 = v6 == 0;
LABEL_14:
      if (*a3) {
        BOOL v15 = (*a3)[1] == 0;
      }
      else {
        BOOL v15 = 1;
      }
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v14;
      __int16 v18 = 1024;
      BOOL v19 = v15;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Ignoring getSubscription request with bundleIdentifier (empty = %d) and scope (empty = %d)", buf, 0xEu);
    }
  }
  else
  {
    uint64_t v13 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v14 = 1;
      goto LABEL_14;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v18) = 16;
  int v20 = 1;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>::operator()(a4);
  if (v20 != -1) {
    return ((uint64_t (*)(char *, __int16 *))off_1EE9B9868[v20])(&v16, &v18);
  }
  return result;
}

void sub_1989F2B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1989F2C00(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushService::subscribe(uint64_t a1, WebCore::PushSubscriptionSetIdentifier *a2, WTF::String *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2)
  {
    uint64_t v12 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v13 = 1;
      goto LABEL_20;
    }
LABEL_11:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    buf[0] = 16;
    int v33 = 1;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(a5);
LABEL_12:
    if (v33 != -1) {
      return ((uint64_t (*)(WTF **, unsigned char *))off_1EE9B9878[v33])(&v30, buf);
    }
    return result;
  }
  int v7 = *(_DWORD *)(*(void *)a2 + 4);
  if (!v7 || !*(void *)a3 || !*(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v12 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v13 = v7 == 0;
LABEL_20:
      if (*(void *)a3) {
        BOOL v20 = *(_DWORD *)(*(void *)a3 + 4) == 0;
      }
      else {
        BOOL v20 = 1;
      }
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v20;
      _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, "Ignoring subscribe request with bundleIdentifier (empty = %d) and scope (empty = %d)", buf, 0xEu);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  if (*(void *)(a1 + 56) >= 0x40uLL)
  {
    uint64_t v10 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v29, a2);
      WTF::String::ascii((uint64_t *)&v30, (WTF::String *)&v29);
      uint64_t v21 = v30;
      WTF::String::ascii((uint64_t *)&v28, a3);
      uint64_t v22 = (char *)v21 + 16;
      if (!v21) {
        uint64_t v22 = 0;
      }
      if (v28) {
        uint64_t v23 = (char *)v28 + 16;
      }
      else {
        uint64_t v23 = 0;
      }
      *(_DWORD *)long long buf = 136446467;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&unsigned char buf[12] = 2085;
      uint64_t v32 = v23;
      _os_log_error_impl(&dword_1985F2000, v10, OS_LOG_TYPE_ERROR, "Subscribe request from %{public}s and scope %{sensitive}s failed: reached max push topic count", buf, 0x16u);
      unint64_t v25 = v28;
      uint64_t v28 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          WTF::fastFree(v25, v24);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
      uint64_t v26 = v30;
      unint64_t v30 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v24);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      uint64_t v27 = v29;
      unint64_t v29 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v24);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    buf[0] = 31;
    int v33 = 1;
    uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(a5);
    goto LABEL_12;
  }
  uint64_t v15 = WTF::fastMalloc((WTF *)0x80);
  uint64_t v16 = WebPushD::PushServiceRequest::PushServiceRequest(v15, a1, (uint64_t)a2, (_DWORD **)a3);
  uint64_t v17 = *a5;
  *a5 = 0;
  *(void *)(v16 + 96) = v17;
  *(void *)(v16 + 104) = 0;
  *(void *)uint64_t v16 = &unk_1EE9B9780;
  __int16 v18 = (WTF *)*(unsigned int *)(a4 + 12);
  *(void *)(v16 + 112) = 0;
  *(void *)(v16 + 120) = 0;
  *(_DWORD *)(v16 + 124) = v18;
  if (v18)
  {
    BOOL v19 = (void *)WTF::fastMalloc(v18);
    *(_DWORD *)(v15 + 120) = v18;
    *(void *)(v15 + 112) = v19;
    memcpy(v19, *(const void **)a4, *(unsigned int *)(a4 + 12));
  }
  *(void *)long long buf = v15;
  WebPushD::PushService::enqueuePushServiceRequest((uint64_t *)(a1 + 40), (uint64_t *)buf);
  uint64_t result = *(void *)buf;
  if (*(void *)buf) {
    return (*(uint64_t (**)(void))(**(void **)buf + 8))(*(void *)buf);
  }
  return result;
}

void sub_1989F2FC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1989F311C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushService::unsubscribe(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2)
  {
    int v8 = *(_DWORD *)(*(void *)a2 + 4);
    if (v8 && *a3 && (*a3)[1])
    {
      uint64_t v13 = WTF::fastMalloc((WTF *)0x80);
      BOOL v14 = (void *)WebPushD::PushServiceRequest::PushServiceRequest(v13, a1, a2, a3);
      uint64_t v15 = *a6;
      *a6 = 0;
      v14[12] = v15;
      v14[13] = 0;
      void *v14 = &unk_1EE9B97C0;
      v14[14] = a4;
      v14[15] = a5;
      *(void *)long long buf = v14;
      WebPushD::PushService::enqueuePushServiceRequest((uint64_t *)(a1 + 48), (uint64_t *)buf);
      uint64_t result = *(void *)buf;
      if (*(void *)buf) {
        return (*(uint64_t (**)(void))(**(void **)buf + 8))(*(void *)buf);
      }
      return result;
    }
    uint64_t v17 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v18 = v8 == 0;
LABEL_14:
      if (*a3) {
        BOOL v19 = (*a3)[1] == 0;
      }
      else {
        BOOL v19 = 1;
      }
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v18;
      __int16 v22 = 1024;
      BOOL v23 = v19;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "Ignoring unsubscribe request with bundleIdentifier (empty = %d) and scope (empty = %d)", buf, 0xEu);
    }
  }
  else
  {
    uint64_t v17 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v18 = 1;
      goto LABEL_14;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  buf[0] = 16;
  int v24 = 1;
  uint64_t result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>::operator()(a6);
  if (v24 != -1) {
    return ((uint64_t (*)(char *, uint8_t *))off_1EE9B9888[v24])(&v20, buf);
  }
  return result;
}

void sub_1989F3370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1989F345C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushService::incrementSilentPushCount(unsigned int *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    BOOL v18 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v19 = 1;
      goto LABEL_41;
    }
    return WTF::CompletionHandler<void ()>::operator()(a4);
  }
  int v6 = *((_DWORD *)*a2 + 1);
  if (!v6 || !*a3 || !*((_DWORD *)*a3 + 1))
  {
    BOOL v18 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v19 = v6 == 0;
LABEL_41:
      if (*a3) {
        BOOL v20 = *((_DWORD *)*a3 + 1) == 0;
      }
      else {
        BOOL v20 = 1;
      }
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v19;
      __int16 v23 = 1024;
      BOOL v24 = v20;
      _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "Ignoring incrementSilentPushCount request with bundleIdentifier (empty = %d) and securityOrigin (empty = %d)", buf, 0xEu);
      return WTF::CompletionHandler<void ()>::operator()(a4);
    }
    return WTF::CompletionHandler<void ()>::operator()(a4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  uint64_t v9 = *(atomic_uint **)a1;
  if (*(void *)a1) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a2;
  if (*a2) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v11 = a2[1];
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  uint64_t v13 = a2[2];
  uint64_t v12 = a2[3];
  BOOL v14 = *a3;
  if (*a3) {
    *(_DWORD *)v14 += 2;
  }
  uint64_t v21 = *a4;
  *a4 = 0;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x50);
  void *v15 = &unk_1EE9B9C20;
  v15[2] = a1;
  v15[3] = v9;
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  v15[4] = v10;
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  v15[5] = v11;
  _OWORD v15[6] = v13;
  v15[7] = v12;
  if (v14) {
    *(_DWORD *)v14 += 2;
  }
  v15[8] = v14;
  v15[9] = v21;
  *(void *)long long buf = v15;
  WebCore::PushDatabase::incrementSilentPushCount();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      uint64_t result = WTF::StringImpl::destroy(v14, v16);
      if (!v11) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v11)
  {
LABEL_34:
    if (!v10) {
      return result;
    }
    goto LABEL_37;
  }
LABEL_32:
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_34;
  }
  uint64_t result = WTF::StringImpl::destroy(v11, v16);
  if (!v10) {
    return result;
  }
LABEL_37:
  if (*(_DWORD *)v10 == 2) {
    return WTF::StringImpl::destroy(v10, v16);
  }
  *(_DWORD *)v10 -= 2;
  return result;
}

void sub_1989F3768(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(unsigned int)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1989F38C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  return a1;
}

uint64_t WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2)
  {
    uint64_t v13 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v14 = 1;
      goto LABEL_15;
    }
    return WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  int v7 = *(_DWORD *)(*(void *)a2 + 4);
  if (!v7 || !*(void *)a3 || !*(_DWORD *)(*(void *)a3 + 4))
  {
    uint64_t v13 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v14 = v7 == 0;
LABEL_15:
      if (*(void *)a3) {
        BOOL v15 = *(_DWORD *)(*(void *)a3 + 4) == 0;
      }
      else {
        BOOL v15 = 1;
      }
      LODWORD(v16) = 67109376;
      HIDWORD(v16) = v14;
      __int16 v17 = 1024;
      BOOL v18 = v15;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Ignoring setPushesEnabledForBundleIdentifierAndOrigin request with bundleIdentifier (empty = %d) and securityOrigin (empty = %d)", (uint8_t *)&v16, 0xEu);
      return WTF::CompletionHandler<void ()(void)>::operator()(a5);
    }
    return WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  uint64_t v9 = *(atomic_uint **)a1;
  if (*(void *)a1) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v10 = *a5;
  *a5 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v11 = &unk_1EE9B9C70;
  v11[1] = a1;
  v11[2] = v9;
  v11[3] = v10;
  uint64_t v16 = v11;
  WebCore::PushDatabase::setPushesEnabledForOrigin();
  uint64_t result = (uint64_t)v16;
  uint64_t v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1989F3BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebPushD::PushService::removeRecordsForSubscriptionSet(unsigned int *a1, WebCore::PushSubscriptionSetIdentifier *a2, uint64_t *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v6 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v13, a2);
    WTF::String::utf8();
    if (v14) {
      int v7 = (char *)v14 + 16;
    }
    else {
      int v7 = 0;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "Removing push subscriptions associated with %{public}s", buf, 0xCu);
    uint64_t v9 = v14;
    BOOL v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1) {
        WTF::fastFree(v9, v8);
      }
      else {
        --*(_DWORD *)v9;
      }
    }
    uint64_t v10 = v13;
    uint64_t v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  buf[0] = 0;
  uint8_t buf[8] = 0;
  uint64_t result = WebPushD::PushService::removeRecordsImpl(a1, (uint64_t)a2, buf, a3);
  if (buf[8])
  {
    uint64_t result = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (result)
    {
      if (*result == 2) {
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *result -= 2;
      }
    }
  }
  return result;
}

void sub_1989F3DCC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebPushD::PushService::removeRecordsImpl(unsigned int *a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2)
  {
    BOOL v18 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v19 = 1;
      goto LABEL_43;
    }
    return (unsigned int *)WTF::CompletionHandler<void ()>::operator()(a4);
  }
  int v6 = *(_DWORD *)(*(void *)a2 + 4);
  if (!v6 || a3[8] && (!*(void *)a3 || !*(_DWORD *)(*(void *)a3 + 4)))
  {
    BOOL v18 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      BOOL v19 = v6 == 0;
LABEL_43:
      int v24 = a3[8];
      if (a3[8])
      {
        if (*(void *)a3) {
          int v24 = *(_DWORD *)(*(void *)a3 + 4) == 0;
        }
        else {
          int v24 = 1;
        }
      }
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v19;
      LOWORD(v27) = 1024;
      *(_DWORD *)((char *)&v27 + 2) = v24;
      _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "Ignoring removeRecordsImpl request with bundleIdentifier (empty = %d) and securityOrigin (empty = %d)", buf, 0xEu);
      return (unsigned int *)WTF::CompletionHandler<void ()>::operator()(a4);
    }
    return (unsigned int *)WTF::CompletionHandler<void ()>::operator()(a4);
  }
  *(void *)long long buf = a1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  uint64_t v9 = *(atomic_uint **)a1;
  if (*(void *)a1) {
    atomic_fetch_add(v9, 1u);
  }
  uint64_t v27 = (WTF *)v9;
  uint64_t v10 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v28 = v10;
  uint64_t v11 = *(WTF::StringImpl **)(a2 + 8);
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  unint64_t v29 = v11;
  long long v30 = *(_OWORD *)(a2 + 16);
  LOBYTE(v31) = 0;
  char v32 = 0;
  if (a3[8])
  {
    uint64_t v12 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v12 += 2;
    }
    uint64_t v31 = v12;
    char v32 = 1;
    uint64_t v13 = *a4;
    *a4 = 0;
    uint64_t v33 = v13;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()> &&)::$_0,void>(&v25, (uint64_t)buf);
    WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin();
  }
  else
  {
    uint64_t v23 = *a4;
    *a4 = 0;
    uint64_t v33 = v23;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()> &&)::$_0,void>(&v25, (uint64_t)buf);
    WebCore::PushDatabase::removeRecordsBySubscriptionSet();
  }
  uint64_t v15 = v25;
  uint64_t v25 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v33;
  uint64_t v33 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (v32)
  {
    __int16 v17 = v31;
    uint64_t v31 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  uint64_t v21 = v29;
  unint64_t v29 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v14);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  __int16 v22 = v28;
  uint64_t v28 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v14);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t result = (unsigned int *)v27;
  uint64_t v27 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v14);
    }
  }
  return result;
}

void sub_1989F4158(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, uint64_t a19)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a12);
      WTF::fastFree(a12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebPushD::PushService::removeRecordsForSubscriptionSetAndOrigin(unsigned int *a1, WebCore::PushSubscriptionSetIdentifier *a2, _DWORD **a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v8 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v19, a2);
    WTF::String::utf8();
    uint64_t v9 = v20;
    WTF::String::utf8();
    uint64_t v10 = (char *)v9 + 16;
    if (!v9) {
      uint64_t v10 = 0;
    }
    if (v18) {
      uint64_t v11 = (char *)v18 + 16;
    }
    else {
      uint64_t v11 = 0;
    }
    *(_DWORD *)long long buf = 136446467;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v22 = 2085;
    uint64_t v23 = v11;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "Removing push subscriptions associated with %{public}s %{sensitive}s", buf, 0x16u);
    if (v18)
    {
      if (*(_DWORD *)v18 == 1) {
        WTF::fastFree(v18, v12);
      }
      else {
        --*(_DWORD *)v18;
      }
    }
    uint64_t v13 = v20;
    BOOL v20 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    BOOL v14 = v19;
    BOOL v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v15 = *a3;
  if (*a3) {
    *v15 += 2;
  }
  *(void *)long long buf = v15;
  uint8_t buf[8] = 1;
  uint64_t result = WebPushD::PushService::removeRecordsImpl(a1, (uint64_t)a2, buf, a4);
  if (buf[8])
  {
    uint64_t result = *(unsigned int **)buf;
    *(void *)long long buf = 0;
    if (result)
    {
      if (*result == 2) {
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
      }
      else {
        *result -= 2;
      }
    }
  }
  return result;
}

void sub_1989F4454(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, WTF::StringImpl *a13, char a14)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  *(void *)uint64_t v4 = &unk_1EE9B9C98;
  *(void *)(v4 + 16) = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(v4 + 24) = v5;
  int v6 = *(_DWORD **)(a2 + 16);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(v4 + 32) = v6;
  int v7 = *(_DWORD **)(a2 + 24);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(v4 + 40) = v7;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 72) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    int v8 = *(_DWORD **)(a2 + 48);
    if (v8) {
      *v8 += 2;
    }
    *(void *)(v4 + 64) = v8;
    *(unsigned char *)(v4 + 72) = 1;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v4 + 80) = v9;
  *a1 = v4;
  return a1;
}

uint64_t WebPushD::PushService::removeRecordsForBundleIdentifierAndDataStore(unsigned int *a1, uint64_t a2, WTF::UUID *a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v7 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v20) {
      int v8 = (char *)v20 + 16;
    }
    else {
      int v8 = 0;
    }
    if (*((unsigned char *)a3 + 16))
    {
      WTF::UUID::toString((uint64_t *)&v18, a3);
      WTF::String::ascii((uint64_t *)&v19, (WTF::String *)&v18);
      if (v19) {
        uint64_t v9 = (char *)v19 + 16;
      }
      else {
        uint64_t v9 = 0;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v22 = 2082;
      uint64_t v23 = v9;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "Removing push subscriptions associated with %{public}s | ds: %{public}s", buf, 0x16u);
      uint64_t v11 = v19;
      BOOL v19 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          WTF::fastFree(v11, v10);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
      uint64_t v12 = v18;
      BOOL v18 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v22 = 2082;
      uint64_t v23 = "default";
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "Removing push subscriptions associated with %{public}s | ds: %{public}s", buf, 0x16u);
    }
    uint64_t v13 = v20;
    BOOL v20 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v10);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  BOOL v14 = *(atomic_uint **)a1;
  if (*(void *)a1) {
    atomic_fetch_add(v14, 1u);
  }
  uint64_t v15 = *a4;
  *a4 = 0;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v16 = &unk_1EE9B9D10;
  v16[1] = a1;
  v16[2] = v14;
  v16[3] = v15;
  *(void *)long long buf = v16;
  WebCore::PushDatabase::removeRecordsByBundleIdentifierAndDataStore();
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1989F481C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF *a12, uint64_t a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::updateSubscriptionSetState(unsigned int *a1, WTF::StringImpl **a2, void **a3, uint64_t *a4)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  int v8 = *(atomic_uint **)a1;
  if (*(void *)a1) {
    atomic_fetch_add(v8, 1u);
  }
  BOOL v19 = (WTF *)v8;
  uint64_t v9 = *a2;
  if (*a2) {
    *(_DWORD *)v9 += 2;
  }
  BOOL v20 = v9;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v21, a3);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v22 = v10;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x30);
  uint64_t v12 = v11;
  void *v11 = &unk_1EE9B9D88;
  v11[1] = a1;
  v11[2] = v19;
  if (v20) {
    *(_DWORD *)v20 += 2;
  }
  v11[3] = v20;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v11 + 4, &v21);
  uint64_t v13 = v22;
  uint64_t v22 = 0;
  uint64_t v23 = v12;
  v12[5] = v13;
  WebCore::PushDatabase::getPushSubscriptionSetRecords();
  uint64_t v15 = v23;
  uint64_t v23 = 0;
  if (v15) {
    (*(void (**)(void *))(*v15 + 8))(v15);
  }
  uint64_t v16 = v22;
  uint64_t v22 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (v21) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v21, v14);
  }
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v14);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  return 0;
}

void sub_1989F4ADC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF::StringImpl *a11, WTF::StringImpl **a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a12, a2);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::updateTopicLists(unsigned int *a1, uint64_t *a2)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  uint64_t v4 = *(atomic_uint **)a1;
  if (*(void *)a1) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  int v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1EE9B9E50;
  v6[1] = a1;
  void v6[2] = v4;
  v6[3] = v5;
  int v8 = v6;
  WebCore::PushDatabase::getTopics();
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
  }
  return result;
}

void sub_1989F4CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::PushService::didReceivePushMessage(unsigned int *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v58 = (void *)os_transaction_create();
  uint64_t v9 = (void *)MEMORY[0x199741920]();
  MEMORY[0x19972EAD0](buf, a2);
  uint64_t v10 = *(WTF::StringImpl **)buf;
  uint64_t v11 = (void *)[a3 objectForKeyedSubscript:@"content_encoding"];
  uint64_t v12 = (void *)[a3 objectForKeyedSubscript:@"payload"];
  if (![v11 length] || !objc_msgSend(v12, "length"))
  {
    uint64_t v13 = 0;
    BOOL v14 = 0;
    __int16 v17 = 0;
    int v4 = 0;
    unint64_t v60 = v10;
    int v61 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    int v18 = 1;
    char v65 = 1;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  if ([v11 isEqualToString:@"aes128gcm"])
  {
    uint64_t v13 = 0;
    BOOL v14 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    int v4 = 2;
    goto LABEL_5;
  }
  if (![v11 isEqualToString:@"aesgcm"])
  {
    uint64_t v44 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = [v11 UTF8String];
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v49;
      _os_log_error_impl(&dword_1985F2000, v44, OS_LOG_TYPE_ERROR, "Dropping push with unknown content encoding: %{public}s", buf, 0xCu);
    }
    uint64_t v13 = 0;
    BOOL v14 = 0;
    __int16 v17 = 0;
    LOBYTE(v60) = 0;
    char v65 = 0;
    uint64_t v55 = 0;
    int v18 = 1;
    goto LABEL_57;
  }
  BOOL v20 = (NSString *)[a3 objectForKeyedSubscript:@"as_publickey"];
  uint64_t v21 = [a3 objectForKeyedSubscript:@"as_salt"];
  if (!v20 || (uint64_t v22 = (NSString *)v21) == 0)
  {
    unint64_t v46 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v46, OS_LOG_TYPE_ERROR, "Dropping aesgcm-encrypted push without required server key and salt", buf, 2u);
    }
    uint64_t v13 = 0;
    BOOL v14 = 0;
    __int16 v17 = 0;
    LOBYTE(v60) = 0;
    char v65 = 0;
    uint64_t v55 = 0;
    int v4 = 1;
    int v18 = 1;
LABEL_57:
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    goto LABEL_9;
  }
  WebPushD::base64URLDecode((WebPushD *)buf, v20);
  WebPushD::base64URLDecode((WebPushD *)v66, v22);
  int v24 = v68;
  if (buf[16]) {
    BOOL v25 = v68 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  char v26 = !v25;
  if (v25)
  {
    char v47 = v26;
    int v48 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v59 = 0;
      _os_log_error_impl(&dword_1985F2000, v48, OS_LOG_TYPE_ERROR, "Dropping aesgcm-encrypted push with improperly encoded server key and salt", v59, 2u);
      int v24 = v68;
    }
    LOBYTE(v60) = 0;
    char v65 = 0;
    if (v24)
    {
      unint64_t v54 = *(WTF **)v66;
      if (*(void *)v66)
      {
        *(void *)uint64_t v66 = 0;
        LODWORD(v67) = 0;
        WTF::fastFree(v54, v23);
      }
    }
    BOOL v14 = 0;
    uint64_t v13 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    char v26 = v47;
  }
  else
  {
    uint64_t v13 = *(WTF **)buf;
    *(void *)long long buf = 0;
    uint64_t v57 = *(void *)&buf[8];
    *(_DWORD *)&unsigned char buf[12] = 0;
    BOOL v14 = *(WTF **)v66;
    uint64_t v56 = v67;
  }
  if (buf[16])
  {
    unint64_t v50 = *(WTF **)buf;
    if (*(void *)buf)
    {
      *(void *)long long buf = 0;
      *(_DWORD *)&uint8_t buf[8] = 0;
      char v51 = v26;
      WTF::fastFree(v50, v23);
      char v26 = v51;
    }
  }
  int v4 = 1;
  if ((v26 & 1) == 0) {
    goto LABEL_64;
  }
LABEL_5:
  MEMORY[0x19972EAD0](v66, v12);
  WTF::base64Decode();
  uint64_t v16 = *(WTF::StringImpl **)v66;
  *(void *)uint64_t v66 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (buf[16])
  {
    int v18 = 0;
    __int16 v17 = *(WTF **)buf;
    uint64_t v55 = *(void *)&buf[8];
    goto LABEL_9;
  }
  uint64_t v45 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v66 = 0;
    _os_log_error_impl(&dword_1985F2000, v45, OS_LOG_TYPE_ERROR, "Dropping push with improperly encoded payload", v66, 2u);
    LOBYTE(v60) = 0;
    char v65 = 0;
    if (buf[16])
    {
      uint64_t v53 = *(WTF **)buf;
      if (*(void *)buf)
      {
        *(void *)long long buf = 0;
        *(_DWORD *)&uint8_t buf[8] = 0;
        WTF::fastFree(v53, v52);
      }
    }
LABEL_64:
    __int16 v17 = 0;
    goto LABEL_65;
  }
  __int16 v17 = 0;
  LOBYTE(v60) = 0;
  char v65 = 0;
LABEL_65:
  uint64_t v55 = 0;
  int v18 = 1;
LABEL_9:
  if (v18)
  {
    if (v14) {
      WTF::fastFree(v14, v19);
    }
    if (v13) {
      WTF::fastFree(v13, v19);
    }
    if (v17) {
      WTF::fastFree(v17, v19);
    }
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  else
  {
    unint64_t v60 = v10;
    int v61 = v4;
    *(void *)&long long v62 = v17;
    *((void *)&v62 + 1) = v55;
    *(void *)&long long v63 = v13;
    *((void *)&v63 + 1) = v57;
    *(void *)&long long v64 = v14;
    *((void *)&v64 + 1) = v56;
    char v65 = 1;
  }
  if (v65)
  {
    MEMORY[0x19972EAD0](v66, a2);
    *(void *)long long buf = a1;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
    uint64_t v27 = *(atomic_uint **)a1;
    if (*(void *)a1) {
      atomic_fetch_add(v27, 1u);
    }
    *(void *)&uint8_t buf[8] = v27;
    if (!v65) {
      __break(1u);
    }
    *(void *)&buf[16] = v60;
    int v70 = v61;
    unint64_t v60 = 0;
    uint64_t v28 = *((void *)&v62 + 1);
    uint64_t v71 = v62;
    long long v62 = 0uLL;
    uint64_t v72 = v28;
    uint64_t v29 = *((void *)&v63 + 1);
    uint64_t v73 = v63;
    long long v63 = 0uLL;
    uint64_t v74 = v29;
    uint64_t v30 = *((void *)&v64 + 1);
    uint64_t v75 = v64;
    long long v64 = 0uLL;
    uint64_t v76 = v30;
    uint64_t v31 = *a4;
    *a4 = 0;
    *(void *)&long long v77 = v31;
    *((void *)&v77 + 1) = v58;
    uint64_t v32 = WTF::fastMalloc((WTF *)0x68);
    *(void *)uint64_t v32 = &unk_1EE9B9EC8;
    *(void *)(v32 + 8) = *(void *)buf;
    *(void *)(v32 + 16) = *(void *)&buf[8];
    uint64_t v33 = *(void *)&buf[16];
    *(_OWORD *)&uint8_t buf[8] = 0u;
    *(void *)(v32 + 24) = v33;
    *(_DWORD *)(v32 + 32) = v70;
    uint64_t v34 = v71;
    uint64_t v71 = 0;
    *(void *)(v32 + 40) = v34;
    uint64_t v35 = v72;
    uint64_t v72 = 0;
    *(void *)(v32 + 48) = v35;
    uint64_t v36 = v73;
    uint64_t v73 = 0;
    *(void *)(v32 + 56) = v36;
    uint64_t v37 = v74;
    uint64_t v74 = 0;
    *(void *)(v32 + 64) = v37;
    uint64_t v38 = v75;
    uint64_t v75 = 0;
    *(void *)(v32 + 72) = v38;
    uint64_t v39 = v76;
    uint64_t v76 = 0;
    *(void *)(v32 + 80) = v39;
    *(_OWORD *)(v32 + 88) = v77;
    long long v77 = 0u;
    *(void *)__int16 v59 = v32;
    WebCore::PushDatabase::getRecordByTopic();
    uint64_t v41 = *(void *)v59;
    *(void *)__int16 v59 = 0;
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    }
    WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)buf, v40);
    BOOL v43 = *(WTF::StringImpl **)v66;
    *(void *)uint64_t v66 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v42);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    std::__optional_destruct_base<WebPushD::RawPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v42);
  }
  else
  {
    std::__optional_destruct_base<WebPushD::RawPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v19);
    if (v58) {
  }
    }
}

void sub_1989F5484(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,int a32,int a33,char a34)
{
  if (a34 && a31) {
    WTF::fastFree(a31, a2);
  }
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (a16) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3) {

  }
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(WTF **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v5, a2);
  }
  int v6 = *(WTF **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  int v7 = *(WTF **)(a1 + 32);
  if (v7)
  {
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v7, a2);
  }
  int v8 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  return a1;
}

void WebPushD::GetSubscriptionRequest::~GetSubscriptionRequest(WebPushD::GetSubscriptionRequest *this, WTF::StringImpl *a2)
{
  WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::~PushServiceRequestImpl(this, a2);

  WTF::fastFree(v2, v3);
}

const char *WebPushD::GetSubscriptionRequest::description(WebPushD::GetSubscriptionRequest *this)
{
  return "GetSubscriptionRequest";
}

WTF::StringImpl *WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::start(uint64_t *a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 6);
  uint64_t v2 = a1[6];
  if (v2 && *(_DWORD *)(v2 + 4) && (uint64_t v4 = a1[10]) != 0 && *(_DWORD *)(v4 + 4))
  {
    uint64_t v5 = (int8x16_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    uint64_t v7 = v6;
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v36, v3);
    int v8 = (WTF::StringImpl *)a1[10];
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>((uint64_t *)&v37, v5, v7, (uint64_t)v36, v8);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v9);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v21 = v36;
    uint64_t v36 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v9);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    WTF::String::utf8();
    uint64_t v22 = os_transaction_create();
    int v24 = (void *)a1[13];
    a1[13] = v22;
    if (v24) {

    }
    BOOL v25 = *(WTF **)buf;
    *(void *)long long buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1) {
        WTF::fastFree(v25, v23);
      }
      else {
        --*(_DWORD *)v25;
      }
    }
    char v26 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v40, v3);
      WTF::String::utf8();
      uint64_t v28 = v41;
      WTF::String::utf8();
      uint64_t v29 = (char *)v28 + 16;
      if (!v28) {
        uint64_t v29 = 0;
      }
      *(_DWORD *)long long buf = 136446979;
      if (v39) {
        uint64_t v30 = (char *)v39 + 16;
      }
      else {
        uint64_t v30 = 0;
      }
      *(void *)&uint8_t buf[4] = v27;
      __int16 v43 = 2048;
      *(void *)uint64_t v44 = a1;
      *(_WORD *)&uint8_t v44[8] = 2082;
      uint64_t v45 = v29;
      __int16 v46 = 2085;
      char v47 = v30;
      _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "Started pushServiceRequest %{public}s (%p) for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      uint64_t v32 = v39;
      uint64_t v39 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1) {
          WTF::fastFree(v32, v31);
        }
        else {
          --*(_DWORD *)v32;
        }
      }
      uint64_t v33 = v41;
      uint64_t v41 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1) {
          WTF::fastFree(v33, v31);
        }
        else {
          --*(_DWORD *)v33;
        }
      }
      uint64_t v34 = v40;
      uint64_t v40 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v31);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    uint64_t result = v37;
    uint64_t v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v37) = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v10 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v40, v3);
      WTF::String::utf8();
      uint64_t v12 = v41;
      WTF::String::utf8();
      uint64_t v13 = (char *)v12 + 16;
      if (!v12) {
        uint64_t v13 = 0;
      }
      *(_DWORD *)long long buf = 136446979;
      if (v39) {
        BOOL v14 = (char *)v39 + 16;
      }
      else {
        BOOL v14 = 0;
      }
      *(void *)&uint8_t buf[4] = v11;
      __int16 v43 = 2048;
      *(void *)uint64_t v44 = a1;
      *(_WORD *)&uint8_t v44[8] = 2082;
      uint64_t v45 = v13;
      __int16 v46 = 2085;
      char v47 = v14;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with exception for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      uint64_t v16 = v39;
      uint64_t v39 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          WTF::fastFree(v16, v15);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
      __int16 v17 = v41;
      uint64_t v41 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1) {
          WTF::fastFree(v17, v15);
        }
        else {
          --*(_DWORD *)v17;
        }
      }
      int v18 = v40;
      uint64_t v40 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    BOOL v19 = v38;
    uint64_t v38 = 0;
    uint8_t buf[8] = (_BYTE)v37;
    *(void *)&v44[2] = v19;
    int v48 = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>::operator()(a1 + 12);
    if (v48 != -1) {
      ((void (*)(WTF **, unsigned char *))off_1EE9B9868[v48])(&v41, &buf[8]);
    }
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
    uint64_t result = v38;
    uint64_t v38 = 0;
  }
  return result;
}

void sub_1989F5C40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF *a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 1) {
      WTF::fastFree(a14, a2);
    }
    else {
      --*(_DWORD *)a14;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::GetSubscriptionRequest::finish(WebPushD::GetSubscriptionRequest *this)
{
  return WebPushD::PushService::finishedPushServiceRequest((uint64_t *)(*((void *)this + 2) + 32), (uint64_t)this);
}

void WebPushD::UnsubscribeRequest::~UnsubscribeRequest(WebPushD::UnsubscribeRequest *this, WTF::StringImpl *a2)
{
  WebPushD::PushServiceRequestImpl<BOOL>::~PushServiceRequestImpl(this, a2);

  WTF::fastFree(v2, v3);
}

const char *WebPushD::UnsubscribeRequest::description(WebPushD::UnsubscribeRequest *this)
{
  return "UnsubscribeRequest";
}

WTF::StringImpl *WebPushD::PushServiceRequestImpl<BOOL>::start(uint64_t *a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 6);
  uint64_t v2 = a1[6];
  if (v2 && *(_DWORD *)(v2 + 4) && (uint64_t v4 = a1[10]) != 0 && *(_DWORD *)(v4 + 4))
  {
    uint64_t v5 = (int8x16_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    uint64_t v7 = v6;
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v36, v3);
    int v8 = (WTF::StringImpl *)a1[10];
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>((uint64_t *)&v37, v5, v7, (uint64_t)v36, v8);
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v9);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v21 = v36;
    uint64_t v36 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v9);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    WTF::String::utf8();
    uint64_t v22 = os_transaction_create();
    int v24 = (void *)a1[13];
    a1[13] = v22;
    if (v24) {

    }
    BOOL v25 = *(WTF **)buf;
    *(void *)long long buf = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1) {
        WTF::fastFree(v25, v23);
      }
      else {
        --*(_DWORD *)v25;
      }
    }
    char v26 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v40, v3);
      WTF::String::utf8();
      uint64_t v28 = v41;
      WTF::String::utf8();
      uint64_t v29 = (char *)v28 + 16;
      if (!v28) {
        uint64_t v29 = 0;
      }
      *(_DWORD *)long long buf = 136446979;
      if (v39) {
        uint64_t v30 = (char *)v39 + 16;
      }
      else {
        uint64_t v30 = 0;
      }
      *(void *)&uint8_t buf[4] = v27;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = a1;
      __int16 v43 = 2082;
      uint64_t v44 = v29;
      __int16 v45 = 2085;
      __int16 v46 = v30;
      _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "Started pushServiceRequest %{public}s (%p) for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      uint64_t v32 = v39;
      uint64_t v39 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1) {
          WTF::fastFree(v32, v31);
        }
        else {
          --*(_DWORD *)v32;
        }
      }
      uint64_t v33 = v41;
      uint64_t v41 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1) {
          WTF::fastFree(v33, v31);
        }
        else {
          --*(_DWORD *)v33;
        }
      }
      uint64_t v34 = v40;
      uint64_t v40 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v31);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    uint64_t result = v37;
    uint64_t v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    LOBYTE(v37) = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v10 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
      WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v40, v3);
      WTF::String::utf8();
      uint64_t v12 = v41;
      WTF::String::utf8();
      uint64_t v13 = (char *)v12 + 16;
      if (!v12) {
        uint64_t v13 = 0;
      }
      *(_DWORD *)long long buf = 136446979;
      if (v39) {
        BOOL v14 = (char *)v39 + 16;
      }
      else {
        BOOL v14 = 0;
      }
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = a1;
      __int16 v43 = 2082;
      uint64_t v44 = v13;
      __int16 v45 = 2085;
      __int16 v46 = v14;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with exception for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
      uint64_t v16 = v39;
      uint64_t v39 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1) {
          WTF::fastFree(v16, v15);
        }
        else {
          --*(_DWORD *)v16;
        }
      }
      __int16 v17 = v41;
      uint64_t v41 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1) {
          WTF::fastFree(v17, v15);
        }
        else {
          --*(_DWORD *)v17;
        }
      }
      int v18 = v40;
      uint64_t v40 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    BOOL v19 = v38;
    uint64_t v38 = 0;
    buf[0] = (_BYTE)v37;
    *(void *)&uint8_t buf[8] = v19;
    *(_DWORD *)&buf[16] = 1;
    WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>::operator()(a1 + 12);
    if (*(_DWORD *)&buf[16] != -1) {
      ((void (*)(WTF **, unsigned char *))off_1EE9B9888[*(unsigned int *)&buf[16]])(&v41, buf);
    }
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
    uint64_t result = v38;
    uint64_t v38 = 0;
  }
  return result;
}

void sub_1989F6340(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF *a14, WTF *a15, uint64_t a16, int a17)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 1) {
      WTF::fastFree(a14, a2);
    }
    else {
      --*(_DWORD *)a14;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::UnsubscribeRequest::finish(WebPushD::UnsubscribeRequest *this)
{
  return WebPushD::PushService::finishedPushServiceRequest((uint64_t *)(*((void *)this + 2) + 48), (uint64_t)this);
}

void WebPushD::SubscribeRequest::~SubscribeRequest(WebPushD::SubscribeRequest *this, void *a2)
{
  WebPushD::SubscribeRequest::~SubscribeRequest(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9B9780;
  uint64_t v3 = (WTF *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }

  WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::~PushServiceRequestImpl(this, (WTF::StringImpl *)a2);
}

const char *WebPushD::SubscribeRequest::description(WebPushD::SubscribeRequest *this)
{
  return "SubscribeRequest";
}

WTF::StringImpl *WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::start(uint64_t *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (WebCore::PushSubscriptionSetIdentifier *)(a1 + 6);
  uint64_t v2 = a1[6];
  if (!v2 || !*(_DWORD *)(v2 + 4) || (uint64_t v4 = a1[10]) == 0 || !*(_DWORD *)(v4 + 4))
  {
    buf[0] = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject(a1, (uint64_t)buf);
    uint64_t result = *(WTF::StringImpl **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    if (!result) {
      return result;
    }
    goto LABEL_42;
  }
  uint64_t v5 = (int8x16_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  uint64_t v7 = v6;
  WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v28, v3);
  int v8 = (WTF::StringImpl *)a1[10];
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>((uint64_t *)&v29, v5, v7, (uint64_t)v28, v8);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v9);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::String::utf8();
  uint64_t v13 = os_transaction_create();
  uint64_t v15 = (void *)a1[13];
  a1[13] = v13;
  if (v15) {

  }
  uint64_t v16 = *(WTF **)buf;
  *(void *)long long buf = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1) {
      WTF::fastFree(v16, v14);
    }
    else {
      --*(_DWORD *)v16;
    }
  }
  __int16 v17 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v26, v3);
    WTF::String::utf8();
    BOOL v19 = v27;
    WTF::String::utf8();
    BOOL v20 = (char *)v19 + 16;
    if (!v19) {
      BOOL v20 = 0;
    }
    *(_DWORD *)long long buf = 136446979;
    if (v25) {
      uint64_t v21 = (char *)v25 + 16;
    }
    else {
      uint64_t v21 = 0;
    }
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = a1;
    __int16 v31 = 2082;
    uint64_t v32 = v20;
    __int16 v33 = 2085;
    uint64_t v34 = v21;
    _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "Started pushServiceRequest %{public}s (%p) for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
    if (v25)
    {
      if (*(_DWORD *)v25 == 1) {
        WTF::fastFree(v25, v22);
      }
      else {
        --*(_DWORD *)v25;
      }
    }
    uint64_t v23 = v27;
    uint64_t v27 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1) {
        WTF::fastFree(v23, v22);
      }
      else {
        --*(_DWORD *)v23;
      }
    }
    int v24 = v26;
    char v26 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
LABEL_42:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1989F6884(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, WTF::StringImpl *a14, WTF *a15, WTF::StringImpl *a16)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebPushD::SubscribeRequest::finish(WebPushD::SubscribeRequest *this)
{
  return WebPushD::PushService::finishedPushServiceRequest((uint64_t *)(*((void *)this + 2) + 40), (uint64_t)this);
}

uint64_t WebPushD::SubscribeRequest::startInternal(WebPushD::SubscribeRequest *this)
{
  return WebPushD::SubscribeRequest::startImpl((uint64_t)this, 0);
}

uint64_t ___ZN8WebPushDL23performAfterFirstUnlockEON3WTF8FunctionIFvvEEE_block_invoke(int a1, int val)
{
  uint64_t result = notify_is_valid_token(val);
  if (result)
  {
    uint64_t result = MKBDeviceUnlockedSinceBoot();
    if (result == 1)
    {
      uint64_t v3 = qword_1EB3583C0;
      uint64_t v4 = (WTF::WorkQueue *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT);
      if (v4)
      {
        *(_WORD *)int v8 = 0;
        _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "Device has unlocked. Running initialization.", v8, 2u);
      }
      if (dword_1EB358E34)
      {
        uint64_t v5 = qword_1EB358E28;
        uint64_t v6 = 8 * dword_1EB358E34;
        do
        {
          uint64_t v7 = WTF::WorkQueue::main(v4);
          uint64_t v4 = (WTF::WorkQueue *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v5);
          v5 += 8;
          v6 -= 8;
        }
        while (v6);
      }
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&qword_1EB358E28, 0);
      uint64_t result = WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken;
      if (WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken != -1)
      {
        uint64_t result = notify_cancel(WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken);
        WebPushD::performAfterFirstUnlock(WTF::Function<void ()(void)> &&)::notifyToken = -1;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = (uint64_t *)(*(void *)result + 8 * *(unsigned int *)(result + 12));
    uint64_t v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    WTF::VectorMover<false,WTF::Function<void ()(void)>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    if (*(unsigned int *)(result + 12) > a2) {
      uint64_t result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = *(unsigned int *)(v3 + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v4) {
        uint64_t result = WTF::VectorMover<false,WTF::Function<void ()(void)>>::move((uint64_t)v4, (uint64_t *)v4 + v5, (uint64_t *)result);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v2 != a2)
  {
    uint64_t v3 = (uint64_t *)(*(void *)result + 8 * a2);
    uint64_t v4 = 8 * v2 - 8 * a2;
    do
    {
      uint64_t v6 = a2;
      uint64_t v7 = result;
      uint64_t v5 = *v3;
      *uint64_t v3 = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      ++v3;
      v4 -= 8;
      a2 = v6;
      uint64_t result = v7;
    }
    while (v4);
  }
  *(_DWORD *)(result + 12) = a2;
  return result;
}

id *std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100](id **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(result);
    return (id *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(void *a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    do
    {
      if (*a1 != -1) {
        a1 = (void *)WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair((uint64_t)a1, a2);
      }
      a1 += 5;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(uint64_t a1, void *a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(WTF **)(a1 + 24);
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_20;
    }
    uint64_t v12 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v13 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v14 = *v12;
      *uint64_t v12 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void *)v5;
        *(void *)uint64_t v5 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        uint64_t v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      uint64_t v5 = *(WTF **)(a1 + 24);
      unint64_t v3 = *(void *)(a1 + 8);
    }
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    if (v3 != v8)
    {
      unint64_t v9 = (uint64_t *)((char *)v5 + 8 * v3);
      uint64_t v10 = 8 * v8 - 8 * v3;
      do
      {
        uint64_t v11 = *v9;
        uint64_t *v9 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  uint64_t v5 = *(WTF **)(a1 + 24);
LABEL_20:
  if (v5)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v5, a2);
  }
  uint64_t v15 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  return a1;
}

uint64_t std::unique_ptr<WebCore::PushDatabase>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    unint64_t v4 = (WTF *)MEMORY[0x199730E00]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

void WebPushD::PushServiceRequest::~PushServiceRequest(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B9840;
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    *(void *)(v7 + 8) = 0;
    uint64_t v8 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v8)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(WTF **)(a1 + 64);
    if (v3)
    {
      *(void *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v3, a2);
    }
    unint64_t v4 = *(WTF **)(a1 + 48);
    if (v4)
    {
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v4, a2);
    }
    uint64_t v5 = *(WTF **)(a1 + 32);
    if (v5)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v5, a2);
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WTF **)(a2 + 64);
  if (v3)
  {
    *(void *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  unint64_t v4 = *(WTF **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  uint64_t v5 = *(WTF **)(a2 + 32);
  if (v5)
  {
    *(void *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    WTF::fastFree(v5, (void *)a2);
  }
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebPushD::base64URLDecode(WebPushD *this, NSString *a2)
{
  MEMORY[0x19972EAD0](&v4, a2);
  WTF::base64Decode();
  uint64_t result = v4;
  unint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1989F72BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebPushD::RawPushMessage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = *(WTF **)(a1 + 48);
    if (v3)
    {
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v3, a2);
    }
    unint64_t v4 = *(WTF **)(a1 + 32);
    if (v4)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v4, a2);
    }
    uint64_t v5 = *(WTF **)(a1 + 16);
    if (v5)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v5, a2);
    }
    uint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

void WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::~PushServiceRequestImpl(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B98A8;
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3) {

  }
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  WebPushD::PushServiceRequest::~PushServiceRequest(this, a2);
}

void WebPushD::PushServiceRequestImpl<BOOL>::~PushServiceRequestImpl(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B98E8;
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3) {

  }
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  WebPushD::PushServiceRequest::~PushServiceRequest(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::create(WTF::String const&,WTF::String const&,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9928;
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 24));
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5) {

  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF::StringImpl *v6;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9B9928;
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 24));
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5) {

  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::create(WTF::String const&,WTF::String const&,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    id v3 = v2;
  }
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v6 = a1[5];
  a1[5] = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v7 = &unk_1EE9B9950;
  v7[1] = v2;
  void v7[2] = v4;
  v7[3] = v5;
  void v7[4] = v6;
  unint64_t v9 = v7;
  WebCore::PushDatabase::create();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

void sub_1989F7724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvEUlOT_E_vJONSK_INS8_12PushDatabaseENSL_ISW_EEEEEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9950;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4) {

  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvEUlOT_E_vJONSK_INS8_12PushDatabaseENSL_ISW_EEEEEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9950;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 16));
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5) {

  }
  return WTF::fastFree((WTF *)a1, v4);
}

WebPushD::PushService *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvEUlOT_E_vJONSK_INS8_12PushDatabaseENSL_ISW_EEEEEE4callESZ_(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    *(void *)long long buf = v3;
    uint64_t v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
    uint64_t v5 = a1[2];
    a1[2] = 0;
    uint64_t v15 = (void *)v5;
    WebPushD::PushService::PushService((uint64_t)v4, (uint64_t *)&v15, (uint64_t *)buf, a1 + 3);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    uint64_t v6 = (void *)a1[1];
    if (v6) {
      id v7 = v6;
    }
    uint64_t v8 = a1[4];
    a1[4] = 0;
    unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v9 = &unk_1EE9B9978;
    v9[1] = v6;
    _OWORD v9[2] = v4;
    _OWORD v9[3] = v8;
    uint64_t v15 = v9;
    WebPushD::PushService::updateTopicLists(v4, (uint64_t *)&v15);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    uint64_t result = *(WebPushD::PushService **)buf;
    if (*(void *)buf)
    {
      uint64_t v11 = (WTF *)MEMORY[0x199730E00]();
      return (WebPushD::PushService *)WTF::fastFree(v11, v12);
    }
  }
  else
  {
    uint64_t v13 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "Push service initialization failed with database error", buf, 2u);
    }
    *(void *)long long buf = 0;
    WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService> &&)>::operator()(a1 + 4);
    uint64_t result = *(WebPushD::PushService **)buf;
    *(void *)long long buf = 0;
    if (result)
    {
      WebPushD::PushService::~PushService(result, v14);
      return (WebPushD::PushService *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

void sub_1989F7AE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebPushD::PushService *a11)
{
  if (a11)
  {
    WebPushD::PushService::~PushService(a11, a2);
    WTF::fastFree(v12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1989F7C68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebPushD::PushService *std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100](WebPushD::PushService **a1, WebPushD::PushService *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebPushD::PushService::~PushService(result, a2);
    return (WebPushD::PushService *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvENUlOT_E_clINSK_INS8_12PushDatabaseENSL_ISX_EEEEEEDaSU_EUlvE_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9978;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100]((WebPushD::PushService **)(a1 + 16), 0);
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3) {

  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvENUlOT_E_clINSK_INS8_12PushDatabaseENSL_ISX_EEEEEEDaSU_EUlvE_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B9978;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100]((WebPushD::PushService **)(a1 + 16), 0);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4) {

  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvENUlOT_E_clINSK_INS8_12PushDatabaseENSL_ISX_EEEEEEDaSU_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(WebPushD::PushService **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = v1;
  WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService> &&)>::operator()((uint64_t *)(a1 + 24));
  uint64_t result = (uint64_t)v6;
  if (v6)
  {
    WebPushD::PushService::~PushService(v6, v2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

void sub_1989F7E50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebPushD::PushService *a10)
{
  if (a10)
  {
    WebPushD::PushService::~PushService(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::createMockService(WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void,WTF::CompletionHandler<WebCore::PushDatabase,std::__1<WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)>>> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9B99A0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::createMockService(WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void,WTF::CompletionHandler<WebCore::PushDatabase,std::__1<WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B99A0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WebPushD::PushService *WTF::Detail::CallableWrapper<WebPushD::PushService::createMockService(WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void,WTF::CompletionHandler<WebCore::PushDatabase,std::__1<WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)>>> &&>::call(uint64_t a1, WebPushD::PushService **a2)
{
  if (*a2)
  {
    uint64_t v4 = (WebPushD::MockPushServiceConnection *)WTF::fastMalloc((WTF *)0x90);
    WebPushD::MockPushServiceConnection::MockPushServiceConnection(v4);
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v16 = v5;
    uint64_t v6 = (WebPushD::PushService *)WTF::fastMalloc((WTF *)0x40);
    uint64_t v14 = v4;
    WebPushD::PushService::PushService((uint64_t)v6, (uint64_t *)&v14, (uint64_t *)&v16, (uint64_t *)(a1 + 8));
    uint64_t v15 = v6;
    WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService> &&)>::operator()((uint64_t *)(a1 + 16));
    uint64_t v8 = v15;
    uint64_t v15 = 0;
    if (v8)
    {
      WebPushD::PushService::~PushService(v8, v7);
      WTF::fastFree(v9, v10);
    }
    if (v14) {
      (*(void (**)(WebPushD::MockPushServiceConnection *))(*(void *)v14 + 8))(v14);
    }
    uint64_t result = v16;
    if (v16)
    {
      uint64_t v12 = (WTF *)MEMORY[0x199730E00]();
      return (WebPushD::PushService *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService> &&)>::operator()((uint64_t *)(a1 + 16));
    return 0;
  }
  return result;
}

void sub_1989F80BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebPushD::PushService *a11, WebPushD::PushService *a12)
{
  if (a12)
  {
    WebPushD::PushService::~PushService(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B99C8;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B99C8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(unsigned int **)(result + 8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v2, (uint64_t)v2);
    uint64_t v3 = *(atomic_uint **)v2;
    if (*(void *)v2) {
      atomic_fetch_add(v3, 1u);
    }
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v4 = &unk_1EE9B9E78;
    v4[1] = v2;
    v4[2] = v3;
    uint64_t v5 = v4;
    WebCore::PushDatabase::updatePublicToken();
    uint64_t result = (uint64_t)v5;
    if (v5) {
      return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
    }
  }
  return result;
}

void sub_1989F8340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_1,void,NSString *,NSDictionary *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B99F0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_1,void,NSString *,NSDictionary *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B99F0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_1,void,NSString *,NSDictionary *>::call(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v6 = *(unsigned int **)(result + 8);
    id v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9B9A18;
    uint64_t v8 = v7;
    WebPushD::PushService::didReceivePushMessage(v6, a2, a3, (uint64_t *)&v8);
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
    }
  }
  return result;
}

void sub_1989F853C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequest::PushServiceRequest(uint64_t result, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  *(void *)uint64_t result = &unk_1EE9B9840;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = *(void *)(a2 + 8);
  *(void *)(result + 32) = *(void *)(a2 + 16);
  uint64_t v4 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v4 += 2;
  }
  *(void *)(result + 48) = v4;
  uint64_t v5 = *(_DWORD **)(a3 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(result + 56) = v5;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a3 + 16);
  uint64_t v6 = *a4;
  if (*a4) {
    *v6 += 2;
  }
  *(void *)(result + 80) = v6;
  *(void *)(result + 88) = 0;
  return result;
}

void *WTF::Detail::CallableWrapper<WebPushD::GetSubscriptionRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9A40;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::GetSubscriptionRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9A40;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::GetSubscriptionRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = *(uint64_t **)(result + 8);
    if (*((unsigned char *)a2 + 160))
    {
      uint64_t v4 = *a2;
      uint64_t v5 = a2[8];
      a2[8] = 0;
      uint64_t v6 = a2[18];
      v14[1] = v5;
      void v14[2] = v6;
      char v15 = *((unsigned char *)a2 + 152);
      uint64_t v7 = a2[10];
      a2[10] = 0;
      uint64_t v8 = a2[12];
      a2[12] = 0;
      uint64_t v9 = a2[16];
      a2[16] = 0;
      v14[0] = v4;
      uint64_t v16 = v7;
      uint64_t v10 = a2[11];
      a2[11] = 0;
      uint64_t v17 = v10;
      uint64_t v18 = v8;
      uint64_t v11 = a2[13];
      a2[13] = 0;
      uint64_t v19 = v11;
      uint64_t v20 = v9;
      uint64_t v12 = a2[17];
      a2[17] = 0;
      uint64_t v21 = v12;
      char v22 = 1;
    }
    else
    {
      LOBYTE(v14[0]) = 0;
      char v22 = 0;
    }
    WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::fulfill(v3, (uint64_t)v14);
    return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v13);
  }
  return result;
}

void sub_1989F87C8(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::fulfill(uint64_t *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 80);
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v15, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 6));
    WTF::String::utf8();
    uint64_t v7 = v16;
    WTF::String::utf8();
    uint64_t v8 = (char *)v7 + 16;
    if (!v7) {
      uint64_t v8 = 0;
    }
    *(_DWORD *)long long buf = 136447235;
    if (v14) {
      uint64_t v9 = (char *)v14 + 16;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v18 = v6;
    __int16 v19 = 2048;
    uint64_t v20 = a1;
    __int16 v21 = 1024;
    int v22 = v5;
    __int16 v23 = 2082;
    int v24 = v8;
    __int16 v25 = 2085;
    char v26 = v9;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with result (hasResult: %d) for %{public}s, scope = %{sensitive}s", buf, 0x30u);
    if (v14)
    {
      if (*(_DWORD *)v14 == 1) {
        WTF::fastFree(v14, v10);
      }
      else {
        --*(_DWORD *)v14;
      }
    }
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        WTF::fastFree(v11, v10);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
    uint64_t v12 = v15;
    char v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  std::__optional_move_base<WebCore::PushSubscriptionData,false>::__optional_move_base[abi:sn180100]((unsigned char *)&v18 + 4, a2);
  int v27 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> const&)>::operator()(a1 + 12);
  if (v27 != -1) {
    ((void (*)(WTF **, char *))off_1EE9B9868[v27])(&v16, (char *)&v18 + 4);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
}

void sub_1989F8A20(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<WebCore::PushSubscriptionData,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[80] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)a1, a2);
    a1[80] = 1;
  }
  return a1;
}

void sub_1989F8AF4(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)uint64_t result = *(void *)a2;
    uint64_t v2 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 8) = v2;
    *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    uint64_t v3 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(result + 32) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    *(_DWORD *)(result + 40) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    *(_DWORD *)(result + 44) = v3;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    uint64_t v4 = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
    *(void *)(result + 48) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    *(_DWORD *)(result + 56) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    *(_DWORD *)(result + 60) = v4;
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    uint64_t v5 = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
    *(void *)(result + 64) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    *(_DWORD *)(result + 72) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    *(_DWORD *)(result + 76) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::startImpl(WebPushD::SubscribeRequest::IsRetry)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9A68;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::startImpl(WebPushD::SubscribeRequest::IsRetry)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9A68;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::startImpl(WebPushD::SubscribeRequest::IsRetry)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (!v2 || !*(void *)(v2 + 8)) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = *((void *)result + 1);
  if (*(unsigned char *)(a2 + 160))
  {
    int v6 = *(_DWORD *)(v5 + 124);
    if (v6 == *(_DWORD *)(a2 + 92)
      && (uint64_t v7 = *(WTF **)(a2 + 80), !memcmp(*(const void **)(v5 + 112), v7, *(unsigned int *)(v5 + 124))))
    {
      unint64_t v15 = *(void *)a2;
      unint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a2 + 64) = 0;
      v25.n128_u64[0] = v15;
      v25.n128_u64[1] = v16;
      uint64_t v26 = *(void *)(a2 + 144);
      char v27 = *(unsigned char *)(a2 + 152);
      *(void *)(a2 + 80) = 0;
      uint64_t v28 = v7;
      LODWORD(v15) = *(_DWORD *)(a2 + 88);
      *(void *)(a2 + 88) = 0;
      int v29 = v15;
      int v30 = v6;
      uint64_t v17 = *(WTF **)(a2 + 96);
      *(void *)(a2 + 96) = 0;
      __int16 v31 = v17;
      uint64_t v18 = *(void *)(a2 + 104);
      *(void *)(a2 + 104) = 0;
      uint64_t v32 = v18;
      __int16 v19 = *(WTF **)(a2 + 128);
      *(void *)(a2 + 128) = 0;
      __int16 v33 = v19;
      uint64_t v20 = *(void *)(a2 + 136);
      *(void *)(a2 + 136) = 0;
      uint64_t v34 = v20;
      WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::fulfill((uint64_t *)v5, &v25);
      __int16 v21 = v33;
      if (v33)
      {
        __int16 v33 = 0;
        LODWORD(v34) = 0;
        WTF::fastFree(v21, v8);
      }
      int v22 = v31;
      if (v31)
      {
        __int16 v31 = 0;
        LODWORD(v32) = 0;
        WTF::fastFree(v22, v8);
      }
      __int16 v23 = v28;
      if (v28)
      {
        uint64_t v28 = 0;
        int v29 = 0;
        WTF::fastFree(v23, v8);
      }
    }
    else
    {
      v25.n128_u8[0] = 8;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject((uint64_t *)v5, (uint64_t)&v25);
    }
    uint64_t result = (WTF::StringImpl *)v25.n128_u64[1];
    v25.n128_u64[1] = 0;
    if (!result) {
      return result;
    }
LABEL_16:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    }
    *(_DWORD *)result -= 2;
    return result;
  }
  WebCore::makePushTopic();
  uint64_t v9 = *(void *)(v5 + 24);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
  uint64_t v10 = *(atomic_uint **)(v5 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  char v11 = *((unsigned char *)v4 + 24);
  unint64_t v12 = v25.n128_u64[0];
  if (v25.n128_u64[0]) {
    *(_DWORD *)v25.n128_u64[0] += 2;
  }
  uint64_t v13 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v13 = &unk_1EE9B9A90;
  *(void *)(v13 + 8) = v5;
  *(void *)(v13 + 16) = v10;
  *(unsigned char *)(v13 + 24) = v11;
  *(void *)(v13 + 32) = v12;
  uint64_t v24 = v13;
  (*(void (**)(uint64_t, __n128 *, uint64_t, uint64_t *))(*(void *)v9 + 24))(v9, &v25, v5 + 112, &v24);
  uint64_t v14 = v24;
  uint64_t v24 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = (WTF::StringImpl *)v25.n128_u64[0];
  v25.n128_u64[0] = 0;
  if (result) {
    goto LABEL_16;
  }
  return result;
}

void sub_1989F8F00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, WTF *a17, int a18, WTF *a19, int a20)
{
  if (a19) {
    WTF::fastFree(a19, a2);
  }
  if (a17) {
    WTF::fastFree(a17, a2);
  }
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject(uint64_t *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v16, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 6));
    WTF::String::utf8();
    int v6 = v17;
    WTF::String::utf8();
    uint64_t v7 = (char *)v6 + 16;
    if (!v6) {
      uint64_t v7 = 0;
    }
    *(_DWORD *)long long buf = 136446979;
    if (v15) {
      uint64_t v8 = (char *)v15 + 16;
    }
    else {
      uint64_t v8 = 0;
    }
    *(void *)__int16 v19 = v5;
    *(_WORD *)&v19[8] = 2048;
    *(void *)&v19[10] = a1;
    __int16 v20 = 2082;
    __int16 v21 = v7;
    __int16 v22 = 2085;
    __int16 v23 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with exception for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
    if (v15)
    {
      if (*(_DWORD *)v15 == 1) {
        WTF::fastFree(v15, v9);
      }
      else {
        --*(_DWORD *)v15;
      }
    }
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v9);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    char v11 = v16;
    unint64_t v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  uint8_t v12 = *(unsigned char *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  buf[0] = v12;
  *(void *)&v19[4] = v13;
  int v24 = 1;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(a1 + 12);
  if (v24 != -1) {
    ((void (*)(WTF **, uint8_t *))off_1EE9B9878[v24])(&v17, buf);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
}

void sub_1989F923C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::fulfill(uint64_t *a1, __n128 *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v14, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 6));
    WTF::String::utf8();
    int v6 = v15;
    WTF::String::utf8();
    uint64_t v7 = (char *)v6 + 16;
    if (!v6) {
      uint64_t v7 = 0;
    }
    *(_DWORD *)long long buf = 136447235;
    if (v13) {
      uint64_t v8 = (char *)v13 + 16;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v17 = v5;
    __int16 v18 = 2048;
    __int16 v19 = a1;
    __int16 v20 = 1024;
    int v21 = 1;
    __int16 v22 = 2082;
    __int16 v23 = v7;
    __int16 v24 = 2085;
    uint64_t v25 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with result (hasResult: %d) for %{public}s, scope = %{sensitive}s", buf, 0x30u);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v9);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t v10 = v15;
    unint64_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v9);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    char v11 = v14;
    uint64_t v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>((__n128 *)buf, a2);
  int v26 = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> const&)>::operator()(a1 + 12);
  if (v26 != -1) {
    ((void (*)(WTF **, uint8_t *))off_1EE9B9878[v26])(&v15, buf);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
}

void sub_1989F9504(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = a2->n128_u64[0];
  unint64_t v2 = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  a1->n128_u64[1] = v2;
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  unint64_t v4 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  a1[2].n128_u64[0] = v4;
  LODWORD(v4) = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = 0;
  a1[2].n128_u32[2] = v4;
  LODWORD(v4) = a2[2].n128_u32[3];
  a2[2].n128_u32[3] = 0;
  a1[2].n128_u32[3] = v4;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  unint64_t v5 = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a1[3].n128_u64[0] = v5;
  LODWORD(v5) = a2[3].n128_u32[2];
  a2[3].n128_u32[2] = 0;
  a1[3].n128_u32[2] = v5;
  LODWORD(v5) = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = 0;
  a1[3].n128_u32[3] = v5;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = 0;
  unint64_t v6 = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = 0;
  a1[4].n128_u64[0] = v6;
  LODWORD(v6) = a2[4].n128_u32[2];
  a2[4].n128_u32[2] = 0;
  a1[4].n128_u32[2] = v6;
  LODWORD(v6) = a2[4].n128_u32[3];
  a2[4].n128_u32[3] = 0;
  a1[4].n128_u32[3] = v6;
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlP8NSStringP7NSErrorE_vJSG_SI_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9B9A90;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlP8NSStringP7NSErrorE_vJSG_SI_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B9A90;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlP8NSStringP7NSErrorE_vJSG_SI_EE4callESG_SI_(WTF *result, uint64_t a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)result + 2);
  if (v3 && *(void *)(v3 + 8))
  {
    unint64_t v5 = result;
    uint64_t v6 = *((void *)result + 1);
    if (a3)
    {
      if (!*((unsigned char *)result + 24)
        && objc_msgSend((id)objc_msgSend(a3, "domain"), "isEqualToString:", @"APSURLTokenErrorDomain")&& objc_msgSend(a3, "code") == 103)
      {
        uint64_t v7 = WTF::WorkQueue::main((WTF::WorkQueue *)0x67);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
        uint64_t v8 = *(atomic_uint **)(v6 + 8);
        if (v8) {
          atomic_fetch_add(v8, 1u);
        }
        uint64_t v9 = *((void *)v5 + 4);
        *((void *)v5 + 4) = 0;
        uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v10 = &unk_1EE9B9B08;
        v10[1] = v6;
        uint64_t v10[2] = v8;
        v10[3] = v9;
        *(void *)long long buf = v10;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 32))(v7, buf);
        __n128 result = *(WTF **)buf;
        *(void *)long long buf = 0;
        if (result) {
          return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
        }
      }
      else
      {
        char v11 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
        {
          WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v51, (WebCore::PushSubscriptionSetIdentifier *)(v6 + 48));
          WTF::String::utf8();
          if (v44) {
            uint64_t v36 = (char *)v44 + 16;
          }
          else {
            uint64_t v36 = 0;
          }
          WTF::String::utf8();
          if (v50) {
            uint64_t v37 = (char *)v50 + 16;
          }
          else {
            uint64_t v37 = 0;
          }
          uint64_t v38 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
          uint64_t v39 = [a3 code];
          *(_DWORD *)long long buf = 136446979;
          *(void *)&uint8_t buf[4] = v36;
          *(_WORD *)&unsigned char buf[12] = 2085;
          *(void *)&unsigned char buf[14] = v37;
          *(_WORD *)&unsigned char buf[22] = 2082;
          uint64_t v53 = (_DWORD *)v38;
          LOWORD(v54) = 2048;
          *(void *)((char *)&v54 + 2) = v39;
          _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "PushManager.subscribe(%{public}s, scope: %{sensitive}s) failed with domain: %{public}s code: %lld)", buf, 0x2Au);
          uint64_t v41 = v50;
          unint64_t v50 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1) {
              WTF::fastFree(v41, v40);
            }
            else {
              --*(_DWORD *)v41;
            }
          }
          unsigned int v42 = v44;
          uint64_t v44 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1) {
              WTF::fastFree(v42, v40);
            }
            else {
              --*(_DWORD *)v42;
            }
          }
          __int16 v43 = v51;
          char v51 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v40);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
        }
        buf[0] = 16;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject((uint64_t *)v6, (uint64_t)buf);
        __n128 result = *(WTF **)&buf[8];
        *(void *)&uint8_t buf[8] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF *)WTF::StringImpl::destroy(result, v12);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      (*(void (**)(WTF **__return_ptr))(**(void **)(*(void *)(v6 + 16) + 8) + 16))(&v44);
      *(void *)long long buf = 0;
      unint64_t v15 = *(_DWORD **)(v6 + 48);
      if (v15) {
        *v15 += 2;
      }
      *(void *)&buf[16] = v15;
      unint64_t v16 = *(_DWORD **)(v6 + 56);
      if (v16) {
        *v16 += 2;
      }
      uint64_t v53 = v16;
      long long v54 = *(_OWORD *)(v6 + 64);
      WebCore::SecurityOrigin::createFromString((uint64_t *)&v51, (WebCore::SecurityOrigin *)(v6 + 80), v14);
      WebCore::SecurityOriginData::toString(v55, (WTF::StringImpl *)((char *)v51 + 8));
      uint64_t v17 = *(_DWORD **)(v6 + 80);
      if (v17) {
        *v17 += 2;
      }
      v55[1] = (uint64_t)v17;
      MEMORY[0x19972EAD0](v56, a2);
      uint64_t v19 = *((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      __int16 v20 = (WTF *)*(unsigned int *)(v6 + 124);
      uint64_t v57 = 0;
      int v58 = 0;
      v56[1] = v19;
      int v59 = (int)v20;
      if (v20)
      {
        int v21 = (void *)WTF::fastMalloc(v20);
        int v58 = (int)v20;
        uint64_t v57 = v21;
        memcpy(v21, *(const void **)(v6 + 112), *(unsigned int *)(v6 + 124));
      }
      __int16 v22 = v44;
      uint64_t v44 = 0;
      unint64_t v60 = v22;
      uint64_t v23 = v45;
      uint64_t v45 = 0;
      uint64_t v61 = v23;
      __int16 v24 = v46;
      __int16 v46 = 0;
      long long v62 = v24;
      uint64_t v25 = v47;
      uint64_t v47 = 0;
      uint64_t v63 = v25;
      int v26 = v48;
      int v48 = 0;
      long long v64 = v26;
      uint64_t v27 = v49;
      uint64_t v49 = 0;
      uint64_t v65 = v27;
      char v66 = 0;
      char v67 = 0;
      uint64_t v28 = v51;
      char v51 = 0;
      if (v28) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v28, v18);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
      int v29 = *(atomic_uint **)(v6 + 8);
      if (v29) {
        atomic_fetch_add(v29, 1u);
      }
      int v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)int v30 = &unk_1EE9B9AB8;
      *((void *)v30 + 1) = v6;
      *((void *)v30 + 2) = v29;
      char v51 = v30;
      WebCore::PushDatabase::insertRecord();
      uint64_t v32 = v51;
      char v51 = 0;
      if (v32) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 8))(v32);
      }
      WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v31);
      uint64_t v34 = v48;
      if (v48)
      {
        int v48 = 0;
        LODWORD(v49) = 0;
        WTF::fastFree(v34, v33);
      }
      uint64_t v35 = v46;
      if (v46)
      {
        __int16 v46 = 0;
        LODWORD(v47) = 0;
        WTF::fastFree(v35, v33);
      }
      __n128 result = v44;
      if (v44)
      {
        uint64_t v44 = 0;
        LODWORD(v45) = 0;
        return (WTF *)WTF::fastFree(result, v33);
      }
    }
  }
  return result;
}

void sub_1989F9C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, WTF *a11, int a12, WTF *a13, int a14, WTF *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_EUlSE_E_vJOSB_EED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9AB8;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_EUlSE_E_vJOSB_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9AB8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_EUlSE_E_vJOSB_EE4callESL_(uint64_t result, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(result + 16);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = *(void *)(result + 8);
    if (*(unsigned char *)(a2 + 160))
    {
      unint64_t v5 = *(unsigned int **)(v4 + 16);
      *(void *)long long buf = *(void *)(result + 8);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
      uint64_t v6 = *(atomic_uint **)(v4 + 8);
      if (v6) {
        atomic_fetch_add(v6, 1u);
      }
      *(void *)&uint8_t buf[8] = v6;
      if (!*(unsigned char *)(a2 + 160)) {
        __break(1u);
      }
      long long v7 = *(_OWORD *)(a2 + 16);
      long long v8 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a2 + 16) = 0u;
      long long v41 = v7;
      long long v42 = v8;
      long long v9 = *(_OWORD *)(a2 + 48);
      long long v10 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(void *)&buf[16] = *(void *)a2;
      long long v43 = v9;
      long long v44 = v10;
      uint64_t v11 = *(void *)(a2 + 80);
      *(void *)(a2 + 80) = 0;
      uint64_t v45 = v11;
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a2 + 88) = 0;
      uint64_t v46 = v12;
      uint64_t v13 = *(void *)(a2 + 96);
      *(void *)(a2 + 96) = 0;
      uint64_t v47 = v13;
      uint64_t v14 = *(void *)(a2 + 104);
      *(void *)(a2 + 104) = 0;
      uint64_t v48 = v14;
      uint64_t v15 = *(void *)(a2 + 112);
      *(void *)(a2 + 112) = 0;
      uint64_t v49 = v15;
      uint64_t v16 = *(void *)(a2 + 120);
      *(void *)(a2 + 120) = 0;
      uint64_t v50 = v16;
      uint64_t v17 = *(void *)(a2 + 128);
      *(void *)(a2 + 128) = 0;
      uint64_t v51 = v17;
      uint64_t v18 = *(void *)(a2 + 136);
      *(void *)(a2 + 136) = 0;
      uint64_t v52 = v18;
      long long v53 = *(_OWORD *)(a2 + 144);
      uint64_t v19 = WTF::fastMalloc((WTF *)0xC0);
      *(void *)uint64_t v19 = &unk_1EE9B9AE0;
      long long v20 = *(_OWORD *)buf;
      *(void *)&uint8_t buf[8] = 0;
      *(_OWORD *)(v19 + 16) = v20;
      *(void *)(v19 + 32) = *(void *)&buf[16];
      *(_OWORD *)(v19 + 48) = v41;
      *(_OWORD *)(v19 + 64) = v42;
      long long v41 = 0u;
      *(_OWORD *)(v19 + 80) = v43;
      long long v21 = v44;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)(v19 + 96) = v21;
      uint64_t v22 = v45;
      uint64_t v45 = 0;
      *(void *)(v19 + 112) = v22;
      *(void *)&long long v21 = v46;
      uint64_t v46 = 0;
      *(void *)(v19 + 120) = v21;
      uint64_t v23 = v47;
      uint64_t v47 = 0;
      *(void *)(v19 + 128) = v23;
      *(void *)&long long v21 = v48;
      uint64_t v48 = 0;
      *(void *)(v19 + 136) = v21;
      uint64_t v24 = v49;
      uint64_t v49 = 0;
      *(void *)(v19 + 144) = v24;
      *(void *)&long long v21 = v50;
      uint64_t v50 = 0;
      *(void *)(v19 + 152) = v21;
      uint64_t v25 = v51;
      uint64_t v51 = 0;
      *(void *)(v19 + 160) = v25;
      *(void *)&long long v21 = v52;
      uint64_t v52 = 0;
      *(void *)(v19 + 168) = v21;
      *(_OWORD *)(v19 + 176) = v53;
      uint64_t v39 = (WTF *)v19;
      WebPushD::PushService::updateTopicLists(v5, (uint64_t *)&v39);
      uint64_t v27 = v39;
      uint64_t v39 = 0;
      if (v27) {
        (*(void (**)(WTF *))(*(void *)v27 + 8))(v27);
      }
      WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)&buf[16], v26);
      __n128 result = *(void *)&buf[8];
      *(void *)&uint8_t buf[8] = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result);
          return WTF::fastFree((WTF *)result, v28);
        }
      }
    }
    else
    {
      int v29 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v38, (WebCore::PushSubscriptionSetIdentifier *)(v4 + 48));
        WTF::String::utf8();
        __int16 v31 = v39;
        WTF::String::utf8();
        uint64_t v32 = (char *)v31 + 16;
        if (!v31) {
          uint64_t v32 = 0;
        }
        if (v37) {
          __int16 v33 = (char *)v37 + 16;
        }
        else {
          __int16 v33 = 0;
        }
        *(_DWORD *)long long buf = 136446467;
        *(void *)&uint8_t buf[4] = v32;
        *(_WORD *)&unsigned char buf[12] = 2085;
        *(void *)&unsigned char buf[14] = v33;
        _os_log_error_impl(&dword_1985F2000, v29, OS_LOG_TYPE_ERROR, "PushManager.subscribe(%{public}s, scope: %{sensitive}s) failed with database error", buf, 0x16u);
        if (v37)
        {
          if (*(_DWORD *)v37 == 1) {
            WTF::fastFree(v37, v34);
          }
          else {
            --*(_DWORD *)v37;
          }
        }
        uint64_t v35 = v39;
        uint64_t v39 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1) {
            WTF::fastFree(v35, v34);
          }
          else {
            --*(_DWORD *)v35;
          }
        }
        uint64_t v36 = v38;
        uint64_t v38 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v34);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
      }
      buf[0] = 16;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject((uint64_t *)v4, (uint64_t)buf);
      __n128 result = *(void *)&buf[8];
      *(void *)&uint8_t buf[8] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_1989FA438(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_ENUlSE_E_clISB_EESC_SE_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9AE0;
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 4), a2);
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_ENUlSE_E_clISB_EESC_SE_EUlvE_vJEED0Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9AE0;
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 4), a2);
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_ENUlSE_E_clISB_EESC_SE_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *(uint64_t **)(result + 16);
    unint64_t v3 = *(void *)(result + 32);
    unint64_t v4 = *(void *)(result + 96);
    *(void *)(result + 96) = 0;
    v15.n128_u64[0] = v3;
    v15.n128_u64[1] = v4;
    uint64_t v16 = *(void *)(result + 176);
    char v17 = *(unsigned char *)(result + 184);
    unint64_t v5 = *(WTF **)(result + 112);
    *(void *)(result + 112) = 0;
    uint64_t v18 = v5;
    uint64_t v6 = *(void *)(result + 120);
    *(void *)(result + 120) = 0;
    uint64_t v19 = v6;
    long long v7 = *(WTF **)(result + 128);
    *(void *)(result + 128) = 0;
    long long v20 = v7;
    uint64_t v8 = *(void *)(result + 136);
    *(void *)(result + 136) = 0;
    uint64_t v21 = v8;
    long long v9 = *(WTF **)(result + 160);
    *(void *)(result + 160) = 0;
    uint64_t v22 = v9;
    uint64_t v10 = *(void *)(result + 168);
    *(void *)(result + 168) = 0;
    uint64_t v23 = v10;
    WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::fulfill(v2, &v15);
    uint64_t v12 = v22;
    if (v22)
    {
      uint64_t v22 = 0;
      LODWORD(v23) = 0;
      WTF::fastFree(v12, v11);
    }
    uint64_t v13 = v20;
    if (v20)
    {
      long long v20 = 0;
      LODWORD(v21) = 0;
      WTF::fastFree(v13, v11);
    }
    uint64_t v14 = v18;
    if (v18)
    {
      uint64_t v18 = 0;
      LODWORD(v19) = 0;
      WTF::fastFree(v14, v11);
    }
    __n128 result = v15.n128_i64[1];
    v15.n128_u64[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1989FA714(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, WTF *a15, int a16, WTF *a17, int a18)
{
  if (a17) {
    WTF::fastFree(a17, a2);
  }
  if (a15) {
    WTF::fastFree(a15, a2);
  }
  if (a13) {
    WTF::fastFree(a13, a2);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PushRecord::~PushRecord(WebCore::PushRecord *this, void *a2)
{
  unint64_t v3 = (WTF *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v3, a2);
  }
  unint64_t v4 = (WTF *)*((void *)this + 14);
  if (v4)
  {
    *((void *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v4, a2);
  }
  unint64_t v5 = (WTF *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v5, a2);
  }
  uint64_t v6 = (WTF *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  long long v7 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  long long v9 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
}

void *WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9B9B08;
  unint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B9B08;
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8);
    (*(void (**)(void *__return_ptr))(**(void **)(v3 + 24) + 48))(v19);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v16, (uint64_t)v19);
    unint64_t v4 = (void *)(v2 + 24);
    uint64_t v5 = v18;
    if (v18 == v17)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v16, (unint64_t)v4);
    }
    else
    {
      uint64_t v6 = v16;
      long long v7 = (_DWORD *)*v4;
      if (*v4) {
        *v7 += 2;
      }
      *(void *)(v6 + 8 * v5) = v7;
      unsigned int v18 = v5 + 1;
    }
    (*(void (**)(void, uint64_t *))(**(void **)(v3 + 24) + 80))(*(void *)(v3 + 24), &v16);
    uint64_t v8 = (WTF::WorkQueue *)(*(uint64_t (**)(void, void *))(**(void **)(v3 + 24) + 80))(*(void *)(v3 + 24), v19);
    uint64_t v9 = WTF::WorkQueue::main(v8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
    uint64_t v10 = *(atomic_uint **)(v3 + 8);
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v11 = &unk_1EE9B9B30;
    v11[1] = v3;
    v11[2] = v10;
    __n128 v15 = v11;
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, &v15);
    uint64_t v13 = v15;
    __n128 v15 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v12);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v14);
  }
  return result;
}

void sub_1989FABCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9B30;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9B30;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return WebPushD::SubscribeRequest::startImpl(*(void *)(result + 8), 1);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebPushD::UnsubscribeRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9B58;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::UnsubscribeRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9B58;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebPushD::UnsubscribeRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = *((void *)result + 1);
    if (*(unsigned char *)(a2 + 160) && (!*(unsigned char *)(v4 + 120) || *(void *)(v4 + 112) == *(void *)a2))
    {
      __n128 result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
      uint64_t v5 = *(atomic_uint **)(v4 + 8);
      if (v5) {
        atomic_fetch_add(v5, 1u);
      }
      if (*(unsigned char *)(a2 + 160))
      {
        int v6 = *(_DWORD *)(a2 + 92);
        if (v6)
        {
          long long v7 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 92));
          memcpy(v7, *(const void **)(a2 + 80), *(unsigned int *)(a2 + 92));
        }
        else
        {
          long long v7 = 0;
        }
        uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
        *(void *)uint64_t v8 = &unk_1EE9B9B80;
        *(void *)(v8 + 8) = v4;
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 24) = v7;
        *(_DWORD *)(v8 + 32) = v6;
        *(_DWORD *)(v8 + 36) = v6;
        uint64_t v10 = (unsigned int *)v8;
        WebCore::PushDatabase::removeRecordByIdentifier();
        __n128 result = v10;
        if (v10) {
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v10 + 8))(v10);
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      uint64_t v9 = (uint64_t *)*((void *)result + 1);
      return (unsigned int *)WebPushD::PushServiceRequestImpl<BOOL>::fulfill(v9, 0);
    }
  }
  return result;
}

void sub_1989FAFA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequestImpl<BOOL>::fulfill(uint64_t *a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v14, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 6));
    WTF::String::utf8();
    int v6 = v15;
    WTF::String::utf8();
    long long v7 = (char *)v6 + 16;
    if (!v6) {
      long long v7 = 0;
    }
    *(_DWORD *)long long buf = 136447235;
    if (v13) {
      uint64_t v8 = (char *)v13 + 16;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v17 = v5;
    __int16 v18 = 2048;
    uint64_t v19 = a1;
    __int16 v20 = 1024;
    int v21 = a2;
    __int16 v22 = 2082;
    uint64_t v23 = v7;
    __int16 v24 = 2085;
    uint64_t v25 = v8;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with result (hasResult: %d) for %{public}s, scope = %{sensitive}s", buf, 0x30u);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v9);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t v10 = v15;
    __n128 v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v9);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  buf[0] = a2;
  *(_DWORD *)((char *)&v19 + 2) = 0;
  WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> const&)>::operator()(a1 + 12);
  if (*(_DWORD *)((char *)&v19 + 2) != -1) {
    ((void (*)(WTF **, uint8_t *))off_1EE9B9888[*(unsigned int *)((char *)&v19 + 2)])(&v15, buf);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
}

void sub_1989FB24C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, char a13, uint64_t a14, int a15)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlbE_vJbEED1Ev(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9B9B80;
  uint64_t v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlbE_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9B80;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlbE_vJbEE4callEb(WTF::StringImpl *result, char a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = *((void *)result + 1);
    if (a2)
    {
      uint64_t v5 = *(unsigned int **)(v4 + 16);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
      int v6 = *(atomic_uint **)(v4 + 8);
      if (v6) {
        atomic_fetch_add(v6, 1u);
      }
      long long v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)long long v7 = &unk_1EE9B9BA8;
      *((void *)v7 + 1) = v4;
      *((void *)v7 + 2) = v6;
      __n128 v15 = v7;
      WebPushD::PushService::updateTopicLists(v5, (uint64_t *)&v15);
      if (v15) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v15 + 8))(v15);
      }
      WebCore::makePushTopic();
      uint64_t v8 = *(void *)(v4 + 24);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
      uint64_t v9 = *(atomic_uint **)(v4 + 8);
      if (v9) {
        atomic_fetch_add(v9, 1u);
      }
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v10 = &unk_1EE9B9BD0;
      v10[1] = v4;
      uint64_t v10[2] = v9;
      uint64_t v14 = v10;
      (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, void **))(*(void *)v8 + 32))(v8, &v15, (uint64_t)v3 + 24, &v14);
      uint64_t v12 = v14;
      uint64_t v14 = 0;
      if (v12) {
        (*(void (**)(void *))(*v12 + 8))(v12);
      }
      __n128 result = v15;
      __n128 v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      uint64_t v13 = (uint64_t *)*((void *)result + 1);
      return (WTF::StringImpl *)WebPushD::PushServiceRequestImpl<BOOL>::fulfill(v13, 0);
    }
  }
  return result;
}

void sub_1989FB5D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9BA8;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9BA8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return WebPushD::PushServiceRequestImpl<BOOL>::fulfill(*(uint64_t **)(result + 8), 1);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlbP7NSErrorE_vJbSG_EED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9BD0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlbP7NSErrorE_vJbSG_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9BD0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlbP7NSErrorE_vJbSG_EE4callEbSG_(WTF::StringImpl *result, char a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)result + 2);
  if (v3)
  {
    if (*(void *)(v3 + 8))
    {
      if ((a2 & 1) == 0)
      {
        uint64_t v5 = *((void *)result + 1);
        int v6 = qword_1EB3583C0;
        __n128 result = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR);
        if (result)
        {
          WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v15, (WebCore::PushSubscriptionSetIdentifier *)(v5 + 48));
          WTF::String::utf8();
          if (v16) {
            long long v7 = (char *)v16 + 16;
          }
          else {
            long long v7 = 0;
          }
          WTF::String::utf8();
          if (v14) {
            uint64_t v8 = (char *)v14 + 16;
          }
          else {
            uint64_t v8 = 0;
          }
          uint64_t v9 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
          uint64_t v10 = [a3 code];
          uint64_t v11 = "none";
          *(_DWORD *)long long buf = 136446979;
          if (v9) {
            uint64_t v11 = (const char *)v9;
          }
          __int16 v18 = v7;
          __int16 v19 = 2085;
          __int16 v20 = v8;
          __int16 v21 = 2082;
          __int16 v22 = v11;
          __int16 v23 = 2048;
          uint64_t v24 = v10;
          _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "PushSubscription.unsubscribe(%{public}s scope: %{sensitive}s) failed with domain: %{public}s code: %lld)", buf, 0x2Au);
          if (v14)
          {
            if (*(_DWORD *)v14 == 1) {
              WTF::fastFree(v14, v12);
            }
            else {
              --*(_DWORD *)v14;
            }
          }
          uint64_t v13 = v16;
          uint64_t v16 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1) {
              WTF::fastFree(v13, v12);
            }
            else {
              --*(_DWORD *)v13;
            }
          }
          __n128 result = v15;
          __n128 v15 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1989FBA74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 40 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WTF::StringImpl **)(v4 + 40 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100) {
            int v18 = v17 >> 8;
          }
          else {
            int v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v16;
            __int16 v21 = (WTF::StringImpl **)(v15 + 40 * (v18 & v16));
            int v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(v15 + 40 * v20, v8);
          __int16 v22 = *v13;
          WTF *v13 = 0;
          void *v21 = v22;
          uint64_t v23 = v15 + 40 * v20;
          uint64_t v24 = v4 + 40 * v11;
          *(_OWORD *)(v23 + 24) = 0u;
          *(_OWORD *)(v23 + 8) = 0u;
          *(void *)(v23 + 8) = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          uint64_t v25 = *(void *)(v23 + 16);
          uint64_t v26 = *(void *)(v24 + 24);
          *(void *)(v23 + 16) = *(void *)(v24 + 16);
          *(void *)(v23 + 24) = v26;
          *(void *)(v24 + 16) = v25;
          *(void *)(v24 + 24) = 0;
          *(_DWORD *)(v23 + 32) = *(_DWORD *)(v24 + 32);
          *(_DWORD *)(v24 + 32) = 0;
          WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(v24, v27);
          if (v13 == a3) {
            uint64_t v12 = v15 + 40 * v20;
          }
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(v4 + 40 * v11, v8);
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

WTF::StringImpl *WTF::HashTraits<WTF::String>::customDeleteBucket(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = (WTF::StringImpl *)-1;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::finishedPushServiceRequest(WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits> &,WebPushD::PushServiceRequest&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9B9BF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::finishedPushServiceRequest(WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits> &,WebPushD::PushServiceRequest&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9B9BF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::finishedPushServiceRequest(WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits> &,WebPushD::PushServiceRequest&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,unsigned int>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9B9C20;
  WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()> &&)::$_0::~$_0(a1 + 2, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,unsigned int>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9B9C20;
  WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()> &&)::$_0::~$_0((void *)a1 + 2, a2);

  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,unsigned int>::call(void *a1, unsigned int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[3];
  if (!v3 || !*(void *)(v3 + 8))
  {
    int v5 = a1 + 9;
    goto LABEL_6;
  }
  if (a2 <= 2)
  {
    int v5 = a1 + 9;
LABEL_6:
    return (WTF::StringImpl *)WTF::CompletionHandler<void ()>::operator()(v5);
  }
  uint64_t v7 = (unsigned int *)a1[2];
  uint64_t v8 = qword_1EB3583C0;
  if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
  {
    WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v20, (WebCore::PushSubscriptionSetIdentifier *)(a1 + 4));
    WTF::String::utf8();
    uint64_t v9 = v21;
    WTF::String::utf8();
    uint64_t v10 = (char *)v9 + 16;
    if (!v9) {
      uint64_t v10 = 0;
    }
    *(_DWORD *)long long buf = 136446723;
    if (v19) {
      uint64_t v11 = (char *)v19 + 16;
    }
    else {
      uint64_t v11 = 0;
    }
    *(void *)&uint8_t buf[4] = v10;
    __int16 v23 = 2085;
    uint64_t v24 = v11;
    __int16 v25 = 1024;
    unsigned int v26 = a2;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "Removing all subscriptions associated with %{public}s %{sensitive}s since it processed %u silent pushes", buf, 0x1Cu);
    if (v19)
    {
      if (*(_DWORD *)v19 == 1) {
        WTF::fastFree(v19, v12);
      }
      else {
        --*(_DWORD *)v19;
      }
    }
    uint64_t v13 = v21;
    __int16 v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t v14 = v20;
    unsigned int v20 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v15 = (_DWORD *)a1[8];
  if (v15) {
    *v15 += 2;
  }
  *(void *)long long buf = v15;
  uint8_t buf[8] = 1;
  uint64_t v16 = a1[9];
  a1[9] = 0;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v17 = &unk_1EE9B9C48;
  *(void *)(v17 + 8) = v16;
  *(_DWORD *)(v17 + 16) = a2;
  __int16 v21 = (WTF *)v17;
  WebPushD::PushService::removeRecordsImpl(v7, (uint64_t)(a1 + 4), buf, (uint64_t *)&v21);
  uint64_t result = v21;
  __int16 v21 = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  if (buf[8])
  {
    uint64_t result = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1989FC1AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, WTF::StringImpl *a13, char a14)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1) {
      WTF::fastFree(a12, a2);
    }
    else {
      --*(_DWORD *)a12;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService24incrementSilentPushCountERKN7WebCore29PushSubscriptionSetIdentifierERKNS_6StringEONS_17CompletionHandlerIFvjEEEEN3__0clEjEUlOT_E_vJjEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9B9C48;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService24incrementSilentPushCountERKN7WebCore29PushSubscriptionSetIdentifierERKNS_6StringEONS_17CompletionHandlerIFvjEEEEN3__0clEjEUlOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9B9C48;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService24incrementSilentPushCountERKN7WebCore29PushSubscriptionSetIdentifierERKNS_6StringEONS_17CompletionHandlerIFvjEEEEN3__0clEjEUlOT_E_vJjEE4callEj(uint64_t a1)
{
  return WTF::CompletionHandler<void ()>::operator()((uint64_t *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9C70;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9C70;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(void *)(v2 + 8) && (a2 & 1) != 0) {
    return WebPushD::PushService::updateTopicLists(*(unsigned int **)(a1 + 8), (uint64_t *)(a1 + 24));
  }
  else {
    return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 24));
  }
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9B9C98;
  uint64_t v2 = a1[10];
  a1[10] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8));
  uint64_t v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9B9C98;
  uint64_t v2 = *((void *)a1 + 10);
  *((void *)a1 + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64);
  uint64_t v4 = (WTF::StringImpl *)*((void *)a1 + 5);
  *((void *)a1 + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)a1 + 4);
  *((void *)a1 + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (unsigned int *)*((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v3);
  }

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(void *a1, unsigned int *a2)
{
  uint64_t v4 = a1[3];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = a1[2];
    uint64_t v6 = a2[3];
    if (v6)
    {
      uint64_t v7 = 32 * v6;
      uint64_t v8 = (_DWORD **)(*(void *)a2 + 8);
      do
      {
        uint64_t v9 = *(void *)(v5 + 8);
        uint64_t v10 = *v8;
        if (*v8) {
          *v10 += 2;
        }
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v11 = &unk_1EE9B9CC0;
        v11[1] = v10;
        int v18 = v11;
        (*(void (**)(uint64_t, _DWORD **, _DWORD **, void **))(*(void *)v9 + 32))(v9, v8, v8 + 1, &v18);
        uint64_t v12 = (uint64_t)v18;
        int v18 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        v8 += 4;
        v7 -= 32;
      }
      while (v7);
      uint64_t v13 = a2[3];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v16 = a1[10];
    a1[10] = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v17 = &unk_1EE9B9CE8;
    v17[1] = v13;
    v17[2] = v16;
    int v18 = v17;
    WebPushD::PushService::updateTopicLists((unsigned int *)v5, (uint64_t *)&v18);
    uint64_t result = (uint64_t)v18;
    if (v18) {
      return (*(uint64_t (**)(void *))(*v18 + 8))(v18);
    }
  }
  else
  {
    uint64_t v14 = a1 + 10;
    return WTF::CompletionHandler<void ()>::operator()(v14);
  }
  return result;
}

void sub_1989FC888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(BOOL,NSError *)#1},void,BOOL,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9B9CC0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(BOOL,NSError *)#1},void,BOOL,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9B9CC0;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(BOOL,NSError *)#1},void,BOOL,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, char a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v10) {
        uint64_t v5 = (char *)v10 + 16;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
      uint64_t v7 = [a3 code];
      uint64_t v8 = "none";
      *(_DWORD *)long long buf = 136643331;
      if (v6) {
        uint64_t v8 = (const char *)v6;
      }
      uint64_t v12 = v5;
      __int16 v13 = 2082;
      uint64_t v14 = v8;
      __int16 v15 = 2048;
      uint64_t v16 = v7;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "removeRecordsImpl couldn't remove subscription for topic %{sensitive}s: %{public}s code: %lld)", buf, 0x20u);
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          WTF::fastFree(v10, v9);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
  }
}

void sub_1989FCB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9B9CE8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9CE8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()>::operator()((uint64_t *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsForBundleIdentifierAndDataStore(WTF::String const&,std::optional<WTF::UUID> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9D10;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsForBundleIdentifierAndDataStore(WTF::String const&,std::optional<WTF::UUID> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9D10;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsForBundleIdentifierAndDataStore(WTF::String const&,std::optional<WTF::UUID> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(void *a1, unsigned int *a2)
{
  uint64_t v4 = a1[2];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = a2[3];
    if (v6)
    {
      uint64_t v7 = 32 * v6;
      uint64_t v8 = (_DWORD **)(*(void *)a2 + 8);
      do
      {
        uint64_t v9 = *(void *)(v5 + 8);
        uint64_t v10 = *v8;
        if (*v8) {
          *v10 += 2;
        }
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v11 = &unk_1EE9B9D38;
        v11[1] = v10;
        int v18 = v11;
        (*(void (**)(uint64_t, _DWORD **, _DWORD **, void **))(*(void *)v9 + 32))(v9, v8, v8 + 1, &v18);
        uint64_t v12 = (uint64_t)v18;
        int v18 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        v8 += 4;
        v7 -= 32;
      }
      while (v7);
      uint64_t v13 = a2[3];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v16 = a1[3];
    a1[3] = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v17 = &unk_1EE9B9D60;
    v17[1] = v13;
    v17[2] = v16;
    int v18 = v17;
    WebPushD::PushService::updateTopicLists((unsigned int *)v5, (uint64_t *)&v18);
    uint64_t result = (uint64_t)v18;
    if (v18) {
      return (*(uint64_t (**)(void *))(*v18 + 8))(v18);
    }
  }
  else
  {
    uint64_t v14 = a1 + 3;
    return WTF::CompletionHandler<void ()>::operator()(v14);
  }
  return result;
}

void sub_1989FCFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService44removeRecordsForBundleIdentifierAndDataStoreERKNS_6StringERKNSt3__18optionalINS_4UUIDEEEONS_17CompletionHandlerIFvjEEEEN3__0clINS_6VectorIN7WebCore17RemovedPushRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlbP7NSErrorE_vJbST_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9B9D38;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService44removeRecordsForBundleIdentifierAndDataStoreERKNS_6StringERKNSt3__18optionalINS_4UUIDEEEONS_17CompletionHandlerIFvjEEEEN3__0clINS_6VectorIN7WebCore17RemovedPushRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlbP7NSErrorE_vJbST_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9B9D38;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService44removeRecordsForBundleIdentifierAndDataStoreERKNS_6StringERKNSt3__18optionalINS_4UUIDEEEONS_17CompletionHandlerIFvjEEEEN3__0clINS_6VectorIN7WebCore17RemovedPushRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlbP7NSErrorE_vJbST_EE4callEbST_(uint64_t a1, char a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v10) {
        uint64_t v5 = (char *)v10 + 16;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
      uint64_t v7 = [a3 code];
      uint64_t v8 = "none";
      *(_DWORD *)long long buf = 136643331;
      if (v6) {
        uint64_t v8 = (const char *)v6;
      }
      uint64_t v12 = v5;
      __int16 v13 = 2082;
      uint64_t v14 = v8;
      __int16 v15 = 2048;
      uint64_t v16 = v7;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "removeRecordsImpl couldn't remove subscription for topic %{sensitive}s: %{public}s code: %lld)", buf, 0x20u);
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          WTF::fastFree(v10, v9);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
  }
}

void sub_1989FD278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
}

void *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService44removeRecordsForBundleIdentifierAndDataStoreERKNS_6StringERKNSt3__18optionalINS_4UUIDEEEONS_17CompletionHandlerIFvjEEEEN3__0clINS_6VectorIN7WebCore17RemovedPushRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9B9D60;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService44removeRecordsForBundleIdentifierAndDataStoreERKNS_6StringERKNSt3__18optionalINS_4UUIDEEEONS_17CompletionHandlerIFvjEEEEN3__0clINS_6VectorIN7WebCore17RemovedPushRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9D60;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService44removeRecordsForBundleIdentifierAndDataStoreERKNS_6StringERKNSt3__18optionalINS_4UUIDEEEONS_17CompletionHandlerIFvjEEEEN3__0clINS_6VectorIN7WebCore17RemovedPushRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WTF::CompletionHandler<void ()>::operator()((uint64_t *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::updateSubscriptionSetState(WTF::String const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::PushSubscriptionSetRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9B9D88;
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)a1[4];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::updateSubscriptionSetState(WTF::String const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::PushSubscriptionSetRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9B9D88;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 4);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::updateSubscriptionSetState(WTF::String const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::PushSubscriptionSetRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !*(void *)(v3 + 8))
  {
    uint64_t v49 = (uint64_t *)(a1 + 40);
    return WTF::CompletionHandler<void ()(void)>::operator()(v49);
  }
  uint64_t v4 = *(unsigned int **)(a1 + 8);
  uint64_t v87 = 0;
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (!v5)
  {
    uint64_t v51 = 0;
    goto LABEL_105;
  }
  unint64_t v80 = v4;
  uint64_t v6 = *(uint64_t **)a2;
  uint64_t v81 = *(void *)a2 + 48 * v5;
  do
  {
    uint64_t v7 = (WTF *)*v6;
    if (*v6) {
      *(_DWORD *)v7 += 2;
    }
    uint64_t v8 = (WTF::StringImpl *)v6[1];
    if (v8) {
      *(_DWORD *)v8 += 2;
    }
    uint64_t v83 = v7;
    char v84 = v8;
    if (WTF::equal(v7, *(const WTF::StringImpl **)(a1 + 24), a3) && (uint64_t v9 = *(void *)(a1 + 32)) != 0)
    {
      int v43 = *(_DWORD *)(v9 - 8);
      unsigned int v44 = *((_DWORD *)v8 + 4);
      if (v44 >= 0x100) {
        unsigned int v45 = v44 >> 8;
      }
      else {
        unsigned int v45 = WTF::StringImpl::hashSlowCase(v8);
      }
      for (i = 0; ; unsigned int v45 = i + v47)
      {
        int v47 = v45 & v43;
        uint64_t v48 = *(WTF **)(v9 + 8 * (v45 & v43));
        if (v48 != (WTF *)-1)
        {
          if (!v48) {
            goto LABEL_11;
          }
          if (WTF::equal(v48, v8, a3)) {
            break;
          }
        }
        ++i;
      }
    }
    else
    {
LABEL_11:
      uint64_t v10 = (uint64_t)v87;
      if (v87
        || (WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WebCore::PushSubscriptionSetIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand((uint64_t *)&v87, 0), (uint64_t v10 = (uint64_t)v87) != 0))
      {
        unsigned int v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        unsigned int v11 = 0;
      }
      *(_DWORD *)long long buf = -1640531527;
      *(_WORD *)&uint8_t buf[4] = 0;
      buf[6] = 0;
      WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>((unsigned int *)buf, v6);
      uint64_t v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v11;
      __int16 v13 = (WTF::StringImpl **)(v10 + 32 * v12);
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>((uint64_t)v13, v14, v15))
      {
        uint64_t v17 = (WTF::StringImpl **)(v10 + 32 * v12);
LABEL_47:
        __int16 v33 = (WTF::StringImpl *)*v6;
        if (*v6) {
          *(_DWORD *)v33 += 2;
        }
        uint64_t v34 = (WTF::StringImpl *)v6[1];
        if (v34) {
          *(_DWORD *)v34 += 2;
        }
        uint64_t v36 = v6[2];
        uint64_t v35 = v6[3];
        uint64_t v37 = *v17;
        void *v17 = v33;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, v16);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
        uint64_t v38 = v17[1];
        v17[1] = v34;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, v16);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
        v17[2] = (WTF::StringImpl *)v36;
        v17[3] = (WTF::StringImpl *)v35;
        uint64_t v39 = (uint64_t)v87;
        if (v87) {
          int v40 = *((_DWORD *)v87 - 3) + 1;
        }
        else {
          int v40 = 1;
        }
        *((_DWORD *)v87 - 3) = v40;
        uint64_t v41 = (*(_DWORD *)(v39 - 16) + v40);
        unint64_t v42 = *(unsigned int *)(v39 - 4);
        if (v42 <= 0x400)
        {
          if (3 * v42 > 4 * v41) {
            goto LABEL_65;
          }
LABEL_64:
          WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WebCore::PushSubscriptionSetIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand((uint64_t *)&v87, (uint64_t)v17);
          goto LABEL_65;
        }
        if (v42 <= 2 * v41) {
          goto LABEL_64;
        }
      }
      else
      {
        int v18 = 0;
        int v19 = 1;
        while (1)
        {
          unsigned int v20 = *v13 ? *v13 : (WTF *)*MEMORY[0x1E4F30980];
          __int16 v21 = (const WTF::StringImpl *)(*v6 ? *v6 : *MEMORY[0x1E4F30980]);
          if (WTF::equal(v20, v21, a3))
          {
            __int16 v22 = *(void *)(v10 + 32 * v12 + 8) ? *(WTF **)(v10 + 32 * v12 + 8) : (WTF *)*MEMORY[0x1E4F30980];
            __int16 v23 = (const WTF::StringImpl *)(v6[1] ? v6[1] : *MEMORY[0x1E4F30980]);
            if (WTF::equal(v22, v23, a3))
            {
              BOOL v24 = *(_OWORD *)(v10 + 32 * v12 + 16) != 0;
              BOOL v25 = *((_OWORD *)v6 + 1) != 0;
              char v27 = *(void *)(v10 + 32 * v12 + 16) == v6[2] && *(void *)(v10 + 32 * v12 + 24) == v6[3];
              if (!v24 || !v25) {
                char v27 = v24 ^ v25 ^ 1;
              }
              if (v27) {
                break;
              }
            }
          }
          uint64_t v28 = v10 + 32 * v12;
          uint64_t v30 = *(void *)(v28 + 16);
          uint64_t v29 = *(void *)(v28 + 24);
          uint64_t v12 = (v12 + v19) & v11;
          uint64_t v17 = (WTF::StringImpl **)(v10 + 32 * v12);
          BOOL v31 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>((uint64_t)v17, (uint64_t)v16, a3);
          if (!(v30 ^ 1 | v29)) {
            int v18 = v13;
          }
          ++v19;
          __int16 v13 = (WTF::StringImpl **)(v10 + 32 * v12);
          if (v31)
          {
            if (v18)
            {
              uint64_t v32 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
              if (*MEMORY[0x1E4F30980]) {
                *(_DWORD *)v32 += 4;
              }
              void *v18 = v32;
              v18[1] = v32;
              void v18[2] = 0;
              v18[3] = 0;
              --*((_DWORD *)v87 - 4);
              uint64_t v17 = v18;
            }
            goto LABEL_47;
          }
        }
      }
    }
LABEL_65:
    if (!v84) {
      goto LABEL_68;
    }
    if (*(_DWORD *)v84 != 2)
    {
      *(_DWORD *)v84 -= 2;
LABEL_68:
      if (!v83) {
        goto LABEL_74;
      }
      goto LABEL_71;
    }
    WTF::StringImpl::destroy(v84, v16);
    if (!v83) {
      goto LABEL_74;
    }
LABEL_71:
    if (*(_DWORD *)v83 == 2) {
      WTF::StringImpl::destroy(v83, v16);
    }
    else {
      *(_DWORD *)v83 -= 2;
    }
LABEL_74:
    v6 += 6;
  }
  while (v6 != (uint64_t *)v81);
  uint64_t v51 = (uint64_t)v87;
  if (!v87 || !*((_DWORD *)v87 - 3))
  {
LABEL_105:
    long long v64 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v64, OS_LOG_TYPE_DEFAULT, "All push subscriptions are associated with existing web clips", buf, 2u);
    }
    uint64_t result = WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 40));
    if (!v51) {
      return result;
    }
    return WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WebCore::PushSubscriptionSetIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::deallocateTable(v51, v65);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v80, (uint64_t)v80);
  uint64_t v52 = *(atomic_uint **)v80;
  if (*(void *)v80) {
    atomic_fetch_add(v52, 1u);
  }
  uint64_t v53 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  uint64_t v54 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v54 = &unk_1EE9B9DB0;
  v54[1] = v80;
  v54[2] = v52;
  v54[3] = v53;
  uint64_t v57 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v57 = 1;
  *(void *)(v57 + 8) = v54;
  uint64_t v51 = (uint64_t)v87;
  if (!v87)
  {
    unint64_t v60 = 0;
    uint64_t v58 = 0;
LABEL_112:
    int v59 = (WebCore::PushSubscriptionSetIdentifier *)&v87[4 * v58];
    goto LABEL_113;
  }
  uint64_t v58 = *((unsigned int *)v87 - 1);
  int v59 = (WebCore::PushSubscriptionSetIdentifier *)&v87[4 * v58];
  if (!*((_DWORD *)v87 - 3))
  {
    unint64_t v60 = (WebCore::PushSubscriptionSetIdentifier *)&v87[4 * v58];
    goto LABEL_112;
  }
  unint64_t v60 = (WebCore::PushSubscriptionSetIdentifier *)v87;
  if (v58)
  {
    uint64_t v61 = 32 * v58;
    unint64_t v60 = (WebCore::PushSubscriptionSetIdentifier *)v87;
    while (1)
    {
      BOOL v62 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>((uint64_t)v60, v55, v56);
      if (*((void *)v60 + 2) ^ 1 | *((void *)v60 + 3) && !v62) {
        break;
      }
      unint64_t v60 = (WebCore::PushSubscriptionSetIdentifier *)((char *)v60 + 32);
      v61 -= 32;
      if (!v61)
      {
        unint64_t v60 = v59;
        break;
      }
    }
  }
LABEL_113:
  if (v51) {
    char v66 = (WebCore::PushSubscriptionSetIdentifier *)(v51 + 32 * *(unsigned int *)(v51 - 4));
  }
  else {
    char v66 = 0;
  }
  if (v66 != v60)
  {
    do
    {
      char v67 = qword_1EB3583C0;
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v85, v60);
        WTF::String::utf8();
        if (v86) {
          uint64_t v68 = (char *)v86 + 16;
        }
        else {
          uint64_t v68 = 0;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v68;
        _os_log_impl(&dword_1985F2000, v67, OS_LOG_TYPE_DEFAULT, "No web clip matching push subscription set identifier %{public}s; removing",
          buf,
          0xCu);
        int v70 = v86;
        uint64_t v86 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 1) {
            WTF::fastFree(v70, v69);
          }
          else {
            --*(_DWORD *)v70;
          }
        }
        uint64_t v71 = v85;
        unint64_t v85 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2) {
            WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v69);
          }
          else {
            *(_DWORD *)v71 -= 2;
          }
        }
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v80, (uint64_t)v80);
      uint64_t v72 = *(atomic_uint **)v80;
      if (*(void *)v80) {
        atomic_fetch_add(v72, 1u);
      }
      atomic_fetch_add((atomic_uint *volatile)v57, 1u);
      uint64_t v73 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v73 = &unk_1EE9B9DD8;
      v73[1] = v80;
      v73[2] = v72;
      v73[3] = v57;
      *(void *)long long buf = v73;
      WebCore::PushDatabase::removeRecordsBySubscriptionSet();
      uint64_t v76 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v76) {
        (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
      }
      long long v77 = (WebCore::PushSubscriptionSetIdentifier *)((char *)v60 + 32);
      unint64_t v60 = v59;
      if (v77 != v59)
      {
        unint64_t v60 = v77;
        while (1)
        {
          BOOL v78 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>((uint64_t)v60, v74, v75);
          if (*((void *)v60 + 2) ^ 1 | *((void *)v60 + 3) && !v78) {
            break;
          }
          unint64_t v60 = (WebCore::PushSubscriptionSetIdentifier *)((char *)v60 + 32);
          if (v60 == v59)
          {
            unint64_t v60 = v59;
            break;
          }
        }
      }
    }
    while (v60 != v66);
    uint64_t v51 = (uint64_t)v87;
  }
  uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v57);
  if (v51) {
    return WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WebCore::PushSubscriptionSetIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::deallocateTable(v51, v65);
  }
  return result;
}

void sub_1989FDCDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a18) {
    WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WebCore::PushSubscriptionSetIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::deallocateTable(a18, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WebCore::PushSubscriptionSetIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = v5;
  uint64_t result = WTF::fastMalloc((WTF *)((32 * v5) | 0x10));
  if (v5)
  {
    uint64_t v10 = (_DWORD *)*MEMORY[0x1E4F30980];
    int64x2_t v11 = vdupq_n_s64(*MEMORY[0x1E4F30980]);
    uint64_t v12 = (int64x2_t *)(result + 32);
    do
    {
      if (v10) {
        *v10 += 4;
      }
      v12[-1] = v11;
      v12->i64[0] = 0;
      v12->i64[1] = 0;
      v12 += 2;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v3;
    do
    {
      uint64_t v16 = v2 + 32 * v13;
      if (*(void *)(v16 + 16) ^ 1 | *(void *)(v16 + 24))
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(v2 + 32 * v13, (uint64_t)v8, v9))
        {
          uint64_t v17 = v2 + 32 * v13;
          int v18 = *(WTF::StringImpl **)(v17 + 8);
          *(void *)(v17 + 8) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v8);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          char v27 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v8);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
        }
        else
        {
          uint64_t v19 = *a1;
          uint64_t v36 = v14;
          if (*a1) {
            unsigned int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            unsigned int v20 = 0;
          }
          unsigned int v37 = -1640531527;
          __int16 v38 = 0;
          char v39 = 0;
          WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>(&v37, (uint64_t *)(v2 + 32 * v13));
          int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37);
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v20;
            BOOL v24 = (WTF::StringImpl **)(v19 + 32 * v23);
            BOOL v25 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>((uint64_t)v24, (uint64_t)v8, v9);
            int v21 = ++v22 + v23;
          }
          while (!v25);
          unsigned int v26 = v24[1];
          v24[1] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v8);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          uint64_t v28 = *v24;
          char *v24 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v8);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v29 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          char *v24 = v29;
          uint64_t v30 = v2 + 32 * v13;
          BOOL v31 = *(WTF::StringImpl **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          v24[1] = v31;
          *(_OWORD *)(v19 + 32 * v23 + 16) = *(_OWORD *)(v16 + 16);
          uint64_t v32 = *(WTF::StringImpl **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          uint64_t v14 = v36;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v8);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          __int16 v33 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v8);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          if (v16 == a2) {
            uint64_t v14 = v24;
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v8);
}

unsigned int *WTF::addArgs<WebCore::PushSubscriptionSetIdentifier>(unsigned int *result, uint64_t *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v7 = a2[2];
  unsigned int v5 = a2 + 2;
  uint64_t v6 = v7;
  if (v3) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = *MEMORY[0x1E4F30980];
  }
  if (v4) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = *MEMORY[0x1E4F30980];
  }
  if (v6 | v2)
  {
    if (!v8) {
      goto LABEL_48;
    }
    int v10 = *(_DWORD *)(v8 + 4);
    unint64_t v11 = v10 & 0xFFFFFFFE;
    if ((v10 & 0xFFFFFFFE) != 0)
    {
      unint64_t v12 = 0;
      unsigned int v13 = *result;
      do
      {
        unint64_t v14 = *(unsigned int *)(v8 + 4);
        if (v12 >= v14)
        {
          int v16 = 0;
        }
        else
        {
          uint64_t v15 = *(void *)(v8 + 8);
          if ((*(unsigned char *)(v8 + 16) & 4) != 0) {
            int v16 = *(unsigned __int8 *)(v15 + v12);
          }
          else {
            int v16 = *(unsigned __int16 *)(v15 + 2 * v12);
          }
        }
        unint64_t v17 = v12 + 1;
        if (v12 + 1 >= v14)
        {
          int v19 = 0;
        }
        else
        {
          uint64_t v18 = *(void *)(v8 + 8);
          if ((*(unsigned char *)(v8 + 16) & 4) != 0) {
            int v19 = *(unsigned __int8 *)(v18 + v12 + 1);
          }
          else {
            int v19 = *(unsigned __int16 *)(v18 + 2 * v12 + 2);
          }
        }
        unsigned int v20 = (v16 << 11) ^ ((v13 + v19) << 16) ^ (v13 + v19);
        unsigned int v13 = v20 + (v20 >> 11);
        WTF::StringImpl *result = v13;
        unint64_t v12 = v17 + 1;
      }
      while (v17 + 1 < v11);
      if ((v10 & 1) == 0)
      {
LABEL_48:
        if (v9)
        {
          int v36 = *(_DWORD *)(v9 + 4);
          unint64_t v37 = v36 & 0xFFFFFFFE;
          if ((v36 & 0xFFFFFFFE) != 0)
          {
            unint64_t v38 = 0;
            unsigned int v39 = *result;
            do
            {
              unint64_t v40 = *(unsigned int *)(v9 + 4);
              if (v38 >= v40)
              {
                int v42 = 0;
              }
              else
              {
                uint64_t v41 = *(void *)(v9 + 8);
                if ((*(unsigned char *)(v9 + 16) & 4) != 0) {
                  int v42 = *(unsigned __int8 *)(v41 + v38);
                }
                else {
                  int v42 = *(unsigned __int16 *)(v41 + 2 * v38);
                }
              }
              unint64_t v43 = v38 + 1;
              if (v38 + 1 >= v40)
              {
                int v45 = 0;
              }
              else
              {
                uint64_t v44 = *(void *)(v9 + 8);
                if ((*(unsigned char *)(v9 + 16) & 4) != 0) {
                  int v45 = *(unsigned __int8 *)(v44 + v38 + 1);
                }
                else {
                  int v45 = *(unsigned __int16 *)(v44 + 2 * v38 + 2);
                }
              }
              unsigned int v46 = (v42 << 11) ^ ((v39 + v45) << 16) ^ (v39 + v45);
              unsigned int v39 = v46 + (v46 >> 11);
              WTF::StringImpl *result = v39;
              unint64_t v38 = v43 + 1;
            }
            while (v43 + 1 < v37);
            if ((v36 & 1) == 0) {
              return WTF::addArgs<WTF::UUID>(result, v5);
            }
            unsigned int v47 = *(_DWORD *)(v9 + 4);
            goto LABEL_67;
          }
          if (v36)
          {
            unsigned int v47 = 1;
LABEL_67:
            if (v47 <= v37)
            {
              int v49 = 0;
            }
            else
            {
              uint64_t v48 = *(void *)(v9 + 8);
              if ((*(unsigned char *)(v9 + 16) & 4) != 0) {
                int v49 = *(unsigned __int8 *)(v48 + v37);
              }
              else {
                int v49 = *(unsigned __int16 *)(v48 + 2 * v37);
              }
            }
            WTF::StringImpl *result = ((*result + v49) ^ ((*result + v49) << 16)) + (((*result + v49) ^ ((*result + v49) << 16)) >> 11);
          }
        }
        return WTF::addArgs<WTF::UUID>(result, v5);
      }
      unsigned int v21 = *(_DWORD *)(v8 + 4);
    }
    else
    {
      if ((v10 & 1) == 0) {
        goto LABEL_48;
      }
      unsigned int v21 = 1;
    }
    if (v21 <= v11)
    {
      int v35 = 0;
    }
    else
    {
      uint64_t v34 = *(void *)(v8 + 8);
      if ((*(unsigned char *)(v8 + 16) & 4) != 0) {
        int v35 = *(unsigned __int8 *)(v34 + v11);
      }
      else {
        int v35 = *(unsigned __int16 *)(v34 + 2 * v11);
      }
    }
    WTF::StringImpl *result = ((*result + v35) ^ ((*result + v35) << 16)) + (((*result + v35) ^ ((*result + v35) << 16)) >> 11);
    goto LABEL_48;
  }
  if (v8)
  {
    int v22 = *(_DWORD *)(v8 + 4);
    unint64_t v23 = v22 & 0xFFFFFFFE;
    if ((v22 & 0xFFFFFFFE) == 0)
    {
      if ((v22 & 1) == 0) {
        goto LABEL_78;
      }
      unsigned int v33 = 1;
      goto LABEL_74;
    }
    unint64_t v24 = 0;
    unsigned int v25 = *result;
    do
    {
      unint64_t v26 = *(unsigned int *)(v8 + 4);
      if (v24 >= v26)
      {
        int v28 = 0;
      }
      else
      {
        uint64_t v27 = *(void *)(v8 + 8);
        if ((*(unsigned char *)(v8 + 16) & 4) != 0) {
          int v28 = *(unsigned __int8 *)(v27 + v24);
        }
        else {
          int v28 = *(unsigned __int16 *)(v27 + 2 * v24);
        }
      }
      unint64_t v29 = v24 + 1;
      if (v24 + 1 >= v26)
      {
        int v31 = 0;
      }
      else
      {
        uint64_t v30 = *(void *)(v8 + 8);
        if ((*(unsigned char *)(v8 + 16) & 4) != 0) {
          int v31 = *(unsigned __int8 *)(v30 + v24 + 1);
        }
        else {
          int v31 = *(unsigned __int16 *)(v30 + 2 * v24 + 2);
        }
      }
      unsigned int v32 = (v28 << 11) ^ ((v25 + v31) << 16) ^ (v25 + v31);
      unsigned int v25 = v32 + (v32 >> 11);
      WTF::StringImpl *result = v25;
      unint64_t v24 = v29 + 1;
    }
    while (v29 + 1 < v23);
    if (v22)
    {
      unsigned int v33 = *(_DWORD *)(v8 + 4);
LABEL_74:
      if (v33 <= v23)
      {
        int v51 = 0;
      }
      else
      {
        uint64_t v50 = *(void *)(v8 + 8);
        if ((*(unsigned char *)(v8 + 16) & 4) != 0) {
          int v51 = *(unsigned __int8 *)(v50 + v23);
        }
        else {
          int v51 = *(unsigned __int16 *)(v50 + 2 * v23);
        }
      }
      WTF::StringImpl *result = ((*result + v51) ^ ((*result + v51) << 16)) + (((*result + v51) ^ ((*result + v51) << 16)) >> 11);
    }
  }
LABEL_78:
  if (!v9) {
    return result;
  }
  int v52 = *(_DWORD *)(v9 + 4);
  unint64_t v53 = v52 & 0xFFFFFFFE;
  if ((v52 & 0xFFFFFFFE) == 0)
  {
    if ((v52 & 1) == 0) {
      return result;
    }
    unsigned int v63 = 1;
    goto LABEL_97;
  }
  unint64_t v54 = 0;
  unsigned int v55 = *result;
  do
  {
    unint64_t v56 = *(unsigned int *)(v9 + 4);
    if (v54 >= v56)
    {
      int v58 = 0;
    }
    else
    {
      uint64_t v57 = *(void *)(v9 + 8);
      if ((*(unsigned char *)(v9 + 16) & 4) != 0) {
        int v58 = *(unsigned __int8 *)(v57 + v54);
      }
      else {
        int v58 = *(unsigned __int16 *)(v57 + 2 * v54);
      }
    }
    unint64_t v59 = v54 + 1;
    if (v54 + 1 >= v56)
    {
      int v61 = 0;
    }
    else
    {
      uint64_t v60 = *(void *)(v9 + 8);
      if ((*(unsigned char *)(v9 + 16) & 4) != 0) {
        int v61 = *(unsigned __int8 *)(v60 + v54 + 1);
      }
      else {
        int v61 = *(unsigned __int16 *)(v60 + 2 * v54 + 2);
      }
    }
    unsigned int v62 = (v58 << 11) ^ ((v55 + v61) << 16) ^ (v55 + v61);
    unsigned int v55 = v62 + (v62 >> 11);
    WTF::StringImpl *result = v55;
    unint64_t v54 = v59 + 1;
  }
  while (v59 + 1 < v53);
  if (v52)
  {
    unsigned int v63 = *(_DWORD *)(v9 + 4);
LABEL_97:
    if (v63 <= v53)
    {
      int v65 = 0;
    }
    else
    {
      uint64_t v64 = *(void *)(v9 + 8);
      if ((*(unsigned char *)(v9 + 16) & 4) != 0) {
        int v65 = *(unsigned __int8 *)(v64 + v53);
      }
      else {
        int v65 = *(unsigned __int16 *)(v64 + 2 * v53);
      }
    }
    WTF::StringImpl *result = ((*result + v65) ^ ((*result + v65) << 16)) + (((*result + v65) ^ ((*result + v65) << 16)) >> 11);
  }
  return result;
}

_DWORD *WTF::addArgs<WTF::UUID>(_DWORD *result, void *a2)
{
  unint64_t v2 = a2[1];
  unsigned int v3 = (v2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)v2) << 16) ^ (*result + (unsigned __int16)v2);
  LODWORD(v2) = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  LODWORD(v2) = v2 + (unsigned __int16)*a2 + (v2 >> 11);
  LODWORD(v2) = (*a2 >> 5) & 0x7FFF800 ^ (v2 << 16) ^ v2;
  LODWORD(v2) = v2 + (unsigned __int16)WORD2(*a2) + (v2 >> 11);
  unsigned int v4 = (*a2 >> 37) & 0x7FFF800 ^ (v2 << 16) ^ v2;
  WTF::StringImpl *result = v4 + (v4 >> 11);
  return result;
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,false>::isEmptyValue<WebCore::PushSubscriptionSetIdentifier>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unsigned int v4 = (WTF **)MEMORY[0x1E4F30980];
  unsigned int v5 = (const WTF::StringImpl *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980])
  {
    *(_DWORD *)v5 += 4;
    uint64_t v6 = *v4;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (*(void *)a1) {
    uint64_t v7 = *(WTF **)a1;
  }
  else {
    uint64_t v7 = v6;
  }
  BOOL v12 = WTF::equal(v7, v5, a3)
     && (*(void *)(a1 + 8) ? (int v10 = *(WTF **)(a1 + 8)) : (int v10 = *v4),
         v5 ? (unint64_t v11 = v5) : (unint64_t v11 = *v4),
         WTF::equal(v10, v11, v9))
     && *(_OWORD *)(a1 + 16) == 0;
  if (v5)
  {
    int v13 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v8);
      int v13 = *(_DWORD *)v5;
    }
    else
    {
      *(_DWORD *)unsigned int v5 = v13;
    }
    int v14 = v13 - 2;
    if (v14) {
      *(_DWORD *)unsigned int v5 = v14;
    }
    else {
      WTF::StringImpl::destroy(v5, v8);
    }
  }
  return v12;
}

void sub_1989FE6D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v2)
  {
    int v4 = *(_DWORD *)v2 - 2;
    if (*(_DWORD *)v2 == 2)
    {
      WTF::StringImpl::destroy(v2, a2);
      int v4 = *(_DWORD *)v2;
    }
    else
    {
      *(_DWORD *)unint64_t v2 = v4;
    }
    int v5 = v4 - 2;
    if (v5) {
      *(_DWORD *)unint64_t v2 = v5;
    }
    else {
      WTF::StringImpl::destroy(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9DB0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9DB0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 && *(void *)(v1 + 8)) {
    return WebPushD::PushService::updateTopicLists(*(unsigned int **)(a1 + 8), (uint64_t *)(a1 + 24));
  }
  else {
    return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 24));
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlSU_E_vJONSM_INSN_17RemovedPushRecordELm0ESP_Lm16ESQ_EEEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9DD8;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlSU_E_vJONSM_INSN_17RemovedPushRecordELm0ESP_Lm16ESQ_EEEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9DD8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  }
  int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_EUlSU_E_vJONSM_INSN_17RemovedPushRecordELm0ESP_Lm16ESQ_EEEE4callESY_(void *result, unsigned int *a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      uint64_t v3 = a2[3];
      if (v3)
      {
        uint64_t v4 = result[1];
        uint64_t v5 = 32 * v3;
        uint64_t v6 = (_DWORD **)(*(void *)a2 + 8);
        do
        {
          uint64_t v7 = *(void *)(v4 + 8);
          uint64_t v8 = *v6;
          if (*v6) {
            *v8 += 2;
          }
          uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
          void *v9 = &unk_1EE9B9E00;
          v9[1] = v8;
          int v10 = v9;
          (*(void (**)(uint64_t, _DWORD **, _DWORD **, void **))(*(void *)v7 + 32))(v7, v6, v6 + 1, &v10);
          uint64_t result = v10;
          int v10 = 0;
          if (result) {
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
          v6 += 4;
          v5 -= 32;
        }
        while (v5);
      }
    }
  }
  return result;
}

void sub_1989FEA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_ENKUlSU_E_clINSM_INSN_17RemovedPushRecordELm0ESP_Lm16ESQ_EEEESS_SU_EUlbP7NSErrorE_vJbS10_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9B9E00;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_ENKUlSU_E_clINSM_INSN_17RemovedPushRecordELm0ESP_Lm16ESQ_EEEESS_SU_EUlbP7NSErrorE_vJbS10_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9B9E00;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService26updateSubscriptionSetStateERKNS_6StringERKNS_7HashSetIS4_NS_11DefaultHashIS4_EENS_10HashTraitsIS4_EENS_15HashTableTraitsEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS_6VectorIN7WebCore25PushSubscriptionSetRecordELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEDaOT_ENKUlSU_E_clINSM_INSN_17RemovedPushRecordELm0ESP_Lm16ESQ_EEEESS_SU_EUlbP7NSErrorE_vJbS10_EE4callEbS10_(uint64_t a1, char a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v10) {
        uint64_t v5 = (char *)v10 + 16;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
      uint64_t v7 = [a3 code];
      uint64_t v8 = "none";
      *(_DWORD *)long long buf = 136643331;
      if (v6) {
        uint64_t v8 = (const char *)v6;
      }
      BOOL v12 = v5;
      __int16 v13 = 2082;
      int v14 = v8;
      __int16 v15 = 2048;
      uint64_t v16 = v7;
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "couldn't remove subscription for topic %{sensitive}s: %{public}s code: %lld)", buf, 0x20u);
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          WTF::fastFree(v10, v9);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
  }
}

void sub_1989FED04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9B9E28;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

void sub_1989FEDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t v2 = (WTF *)WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>::~CallbackAggregatorOnThread(result);
    return WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>::~CallbackAggregatorOnThread(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8))
  {
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return a1;
}

void sub_1989FEECC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WebCore::PushSubscriptionSetIdentifier,WebCore::PushSubscriptionSetIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>,WTF::HashTraits<WebCore::PushSubscriptionSetIdentifier>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 + 8) ^ 1 | *(void *)(v4 + 16))
      {
        uint64_t v5 = *(WTF::StringImpl **)v4;
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
        uint64_t v6 = *(WTF::StringImpl **)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::updateTopicLists(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PushTopics &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9E50;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::updateTopicLists(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PushTopics &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9E50;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::updateTopicLists(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PushTopics &&>::call(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v4 = a1[1];
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v15 = v5;
    uint64_t v6 = a2[1];
    a2[1] = 0;
    uint64_t v16 = v6;
    uint64_t v7 = a2[2];
    a2[2] = 0;
    uint64_t v17 = v7;
    uint64_t v8 = a2[3];
    a2[3] = 0;
    uint64_t v18 = v8;
    (*(void (**)(void, uint64_t *))(**(void **)(v4 + 8) + 104))(*(void *)(v4 + 8), &v15);
    *(void *)(v4 + 56) = HIDWORD(v18) + (unint64_t)HIDWORD(v16);
    WTF::CompletionHandler<void ()(void)>::operator()(a1 + 3);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v9);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v10);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v11);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v12);
  }
  else
  {
    int v14 = a1 + 3;
    return WTF::CompletionHandler<void ()(void)>::operator()(v14);
  }
}

void sub_1989FF228(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 + 48, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, v14);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v15);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePublicToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::PushDatabase::PublicTokenChanged>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9E78;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePublicToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::PushDatabase::PublicTokenChanged>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9B9E78;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePublicToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::PushDatabase::PublicTokenChanged>::call(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = qword_1EB3583C0;
    if (a2)
    {
      uint64_t v4 = *(unsigned int **)(a1 + 8);
      if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Public token changed; invalidated all existing push subscriptions",
          v7,
          2u);
      }
      uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v5 = &unk_1EE9B9EA0;
      uint64_t v6 = v5;
      WebPushD::PushService::updateTopicLists(v4, (uint64_t *)&v6);
      if (v6) {
        (*(void (**)(void *))(*v6 + 8))(v6);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "Received expected public token", buf, 2u);
    }
  }
}

void sub_1989FF450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9B9EC8;
  WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9B9EC8;
  WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(void *)(v3 + 8))
  {
    if (*(unsigned char *)(a2 + 160))
    {
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v6 = *(void *)(a2 + 16);
      uint64_t v5 = *(WTF::StringImpl **)(a2 + 24);
      double v69 = *(WTF **)a2;
      uint64_t v70 = v6;
      uint64_t v71 = v5;
      *(_OWORD *)(a2 + 16) = 0u;
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v72 = *(_OWORD *)(a2 + 32);
      v73[0] = v7;
      long long v8 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      v73[1] = v8;
      uint64_t v9 = *(void *)(a2 + 80);
      *(void *)(a2 + 80) = 0;
      uint64_t v74 = v9;
      uint64_t v10 = *(void *)(a2 + 88);
      *(void *)(a2 + 88) = 0;
      uint64_t v75 = v10;
      uint64_t v11 = *(WTF **)(a2 + 96);
      *(void *)(a2 + 96) = 0;
      uint64_t v76 = v11;
      unsigned int v12 = *(_DWORD *)(a2 + 104);
      unsigned int v13 = *(_DWORD *)(a2 + 108);
      *(void *)(a2 + 104) = 0;
      unint64_t v77 = __PAIR64__(v13, v12);
      int v14 = *(WTF **)(a2 + 112);
      *(void *)(a2 + 112) = 0;
      BOOL v78 = v14;
      unsigned int v15 = *(_DWORD *)(a2 + 120);
      unsigned int v16 = *(_DWORD *)(a2 + 124);
      *(void *)(a2 + 120) = 0;
      unint64_t v79 = __PAIR64__(v16, v15);
      uint64_t v17 = *(WTF **)(a2 + 128);
      *(void *)(a2 + 128) = 0;
      unint64_t v80 = v17;
      unsigned int v19 = *(_DWORD *)(a2 + 136);
      unsigned int v18 = *(_DWORD *)(a2 + 140);
      *(void *)(a2 + 136) = 0;
      unint64_t v81 = __PAIR64__(v18, v19);
      long long v82 = *(_OWORD *)(a2 + 144);
      int v20 = *(_DWORD *)(a1 + 32);
      if (!v20)
      {
        buf[0] = 0;
        uint8_t buf[16] = 0;
        if (v5) {
          *(_DWORD *)v5 += 2;
        }
        char v84 = v5;
        WTF::URL::URL((uint64_t)v85, (WTF::StringImpl **)v73 + 1);
        v86[0] = 0;
        char v87 = 0;
        (*(void (**)(void, uint64_t *, unsigned char *))(**(void **)(v4 + 24) + 16))(*(void *)(v4 + 24), &v70, buf);
        std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v86, v24);
        unint64_t v26 = v85[0];
        v85[0] = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v25);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
        int v36 = v84;
        char v84 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v25);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        if (buf[16])
        {
          uint64_t v41 = *(WTF **)buf;
          if (*(void *)buf)
          {
            *(void *)long long buf = 0;
            *(_DWORD *)&uint8_t buf[8] = 0;
            WTF::fastFree(v41, v25);
          }
        }
        WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 88));
        goto LABEL_82;
      }
      uint64_t v76 = 0;
      uint64_t v60 = v11;
      unint64_t v77 = 0;
      unsigned int v61 = v12;
      unsigned int v62 = v13;
      BOOL v78 = 0;
      unsigned int v63 = v14;
      unint64_t v79 = 0;
      unsigned int v64 = v15;
      unsigned int v65 = v16;
      unint64_t v80 = 0;
      char v66 = v17;
      unint64_t v81 = 0;
      unsigned int v67 = v19;
      unsigned int v68 = v18;
      LOBYTE(v57) = 0;
      char v59 = 0;
      if (v20 == 1)
      {
        WebCore::PushCrypto::decryptAESGCMPayload();
        std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)&v57, (uint64_t *)buf);
      }
      else
      {
        if (v20 != 2) {
          goto LABEL_30;
        }
        WebCore::PushCrypto::decryptAES128GCMPayload();
        std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)&v57, (uint64_t *)buf);
      }
      if (buf[16])
      {
        unint64_t v40 = *(WTF **)buf;
        if (*(void *)buf)
        {
          *(void *)long long buf = 0;
          *(_DWORD *)&uint8_t buf[8] = 0;
          WTF::fastFree(v40, v21);
        }
      }
      if (v59)
      {
        uint64_t v27 = qword_1EB3583C0;
        if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_DEFAULT))
        {
          WebCore::PushSubscriptionSetIdentifier::debugDescription((uint64_t *)&v55, (WebCore::PushSubscriptionSetIdentifier *)&v70);
          WTF::String::utf8();
          int v28 = v56;
          WTF::String::utf8();
          unint64_t v29 = (char *)v28 + 16;
          if (!v28) {
            unint64_t v29 = 0;
          }
          if (v54) {
            uint64_t v30 = (char *)v54 + 16;
          }
          else {
            uint64_t v30 = 0;
          }
          *(_DWORD *)long long buf = 136446467;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&unsigned char buf[12] = 2085;
          *(void *)&unsigned char buf[14] = v30;
          _os_log_impl(&dword_1985F2000, v27, OS_LOG_TYPE_DEFAULT, "Decoded incoming push message for %{public}s %{sensitive}s", buf, 0x16u);
          if (v54)
          {
            if (*(_DWORD *)v54 == 1) {
              WTF::fastFree(v54, v31);
            }
            else {
              --*(_DWORD *)v54;
            }
          }
          unint64_t v38 = v56;
          unint64_t v56 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1) {
              WTF::fastFree(v38, v31);
            }
            else {
              --*(_DWORD *)v38;
            }
          }
          unsigned int v39 = v55;
          unsigned int v55 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2) {
              WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v31);
            }
            else {
              *(_DWORD *)v39 -= 2;
            }
          }
          if (!v59) {
            __break(1u);
          }
        }
        *(void *)long long buf = v57;
        uint64_t v45 = v58;
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        *(void *)&uint8_t buf[8] = v45;
        uint8_t buf[16] = 1;
        unsigned int v46 = v71;
        if (v71) {
          *(_DWORD *)v71 += 2;
        }
        char v84 = v46;
        WTF::URL::URL((uint64_t)v85, (WTF::StringImpl **)v73 + 1);
        v86[0] = 0;
        char v87 = 0;
        (*(void (**)(void, uint64_t *, unsigned char *))(**(void **)(v4 + 24) + 16))(*(void *)(v4 + 24), &v70, buf);
        std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v86, v47);
        uint64_t v48 = v85[0];
        v85[0] = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2) {
            WTF::StringImpl::destroy(v48, v34);
          }
          else {
            *(_DWORD *)v48 -= 2;
          }
        }
        int v49 = v84;
        char v84 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2) {
            WTF::StringImpl::destroy(v49, v34);
          }
          else {
            *(_DWORD *)v49 -= 2;
          }
        }
        if (!buf[16]) {
          goto LABEL_75;
        }
        int v35 = *(WTF **)buf;
        if (!*(void *)buf) {
          goto LABEL_75;
        }
        *(void *)long long buf = 0;
        *(_DWORD *)&uint8_t buf[8] = 0;
        goto LABEL_88;
      }
LABEL_30:
      unsigned int v32 = qword_1EB3583C0;
      if (!os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_75;
      }
      WTF::String::utf8();
      unsigned int v33 = v56 ? (char *)v56 + 16 : 0;
      *(_DWORD *)long long buf = 136642819;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Dropping incoming push due to decryption error for topic %{sensitive}s", buf, 0xCu);
      int v35 = v56;
      unint64_t v56 = 0;
      if (!v35) {
        goto LABEL_75;
      }
      if (*(_DWORD *)v35 != 1)
      {
        --*(_DWORD *)v35;
        goto LABEL_75;
      }
LABEL_88:
      WTF::fastFree(v35, v34);
LABEL_75:
      WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 88));
      if (v59)
      {
        unint64_t v53 = v57;
        if (v57)
        {
          uint64_t v57 = 0;
          LODWORD(v58) = 0;
          WTF::fastFree(v53, v37);
        }
      }
      uint64_t v50 = v66;
      if (v66)
      {
        char v66 = 0;
        unsigned int v67 = 0;
        WTF::fastFree(v50, v37);
      }
      int v51 = v63;
      if (v63)
      {
        unsigned int v63 = 0;
        unsigned int v64 = 0;
        WTF::fastFree(v51, v37);
      }
      int v52 = v60;
      if (v60)
      {
        uint64_t v60 = 0;
        unsigned int v61 = 0;
        WTF::fastFree(v52, v37);
      }
LABEL_82:
      WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)&v69, v37);
      return;
    }
    unint64_t v23 = qword_1EB3583C0;
    if (os_log_type_enabled((os_log_t)qword_1EB3583C0, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      int v42 = v69 ? (char *)v69 + 16 : 0;
      *(_DWORD *)long long buf = 136642819;
      *(void *)&uint8_t buf[4] = v42;
      _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "Dropping incoming push sent to unknown topic: %{sensitive}s", buf, 0xCu);
      uint64_t v44 = v69;
      double v69 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1) {
          WTF::fastFree(v44, v43);
        }
        else {
          --*(_DWORD *)v44;
        }
      }
    }
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 88));
  }
  else
  {
    int v22 = (uint64_t *)(a1 + 88);
    WTF::CompletionHandler<void ()(void)>::operator()(v22);
  }
}

void sub_1989FFC08(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, WTF *a12, int a13, int a14, char a15, WTF *a16, int a17, WTF *a18, int a19, WTF *a20,int a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF *a43,int a44,int a45,char a46,WTF::StringImpl *a47,WTF::StringImpl *a48)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1) {
      WTF::fastFree(a11, a2);
    }
    else {
      --*(_DWORD *)a11;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15 && a12) {
    WTF::fastFree(a12, a2);
  }
  if (a20) {
    WTF::fastFree(a20, a2);
  }
  if (a18) {
    WTF::fastFree(a18, a2);
  }
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)&a23, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::URL::URL(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    *(_DWORD *)v3 += 2;
  }
  long long v7 = v3;
  MEMORY[0x19972E890](a1, &v7);
  uint64_t v5 = v7;
  long long v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

void sub_1989FFE64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>(uint64_t *result, int8x16_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3) {
    size_t v5 = a3 - 1;
  }
  else {
    size_t v5 = 0;
  }
  if (v5 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0015CLL);
  }
  uint64_t v9 = result;
  if (a4)
  {
    int v10 = *(_DWORD *)(a4 + 4);
    if (a5) {
      goto LABEL_7;
    }
LABEL_53:
    int v11 = 0;
    goto LABEL_8;
  }
  int v10 = 0;
  if (!a5) {
    goto LABEL_53;
  }
LABEL_7:
  int v11 = a5[1];
  if (v11 < 0) {
    goto LABEL_51;
  }
LABEL_8:
  BOOL v12 = __OFADD__(v11, 1);
  int v13 = v11 + 1;
  char v14 = v12;
  if (v10 < 0) {
    goto LABEL_51;
  }
  if (v14) {
    goto LABEL_51;
  }
  BOOL v12 = __OFADD__(v10, v13);
  int v15 = v10 + v13;
  if (v12) {
    goto LABEL_51;
  }
  BOOL v12 = __OFADD__(v15, 1);
  int v16 = v15 + 1;
  if (v12) {
    goto LABEL_51;
  }
  BOOL v12 = __OFADD__(v5, v16);
  int v17 = v5 + v16;
  if (v12) {
    goto LABEL_51;
  }
  unsigned int v18 = v17 + 26;
  if (__OFADD__(v17, 26)) {
    goto LABEL_51;
  }
  if (a4)
  {
    int v19 = *(_DWORD *)(a4 + 16);
    if (!a5 || (v19 & 4) == 0)
    {
      uint64_t v20 = v18;
      BOOL v21 = v18 == 0;
      if ((v19 & 4) == 0)
      {
LABEL_21:
        if (v21)
        {
LABEL_22:
          int v22 = (_DWORD *)MEMORY[0x1E4F30960];
          *MEMORY[0x1E4F30960] += 2;
          goto LABEL_46;
        }
        if (v18 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v20 + 20));
          int v22 = v44;
          if (v44)
          {
            _DWORD *v44 = 2;
            v22[1] = v18;
            *((void *)v22 + 1) = v22 + 5;
            v22[4] = 0;
            unint64_t v26 = (char *)(v22 + 18);
            uint64_t v27 = "com.apple.webkit.webpushd:";
            for (uint64_t i = 20; i != 72; i += 2)
            {
              __int16 v29 = *(unsigned __int8 *)v27++;
              *(_WORD *)((char *)v22 + i) = v29;
            }
            uint64_t v30 = &v26[2 * v5];
            if ((v5 & 0xFFFFFFC0) != 0)
            {
              int v31 = &v26[2 * (v5 & 0xFFFFFFC0)];
              long long v32 = 0uLL;
              do
              {
                v45.val[0] = *a2;
                int8x16_t v33 = a2[1];
                v46.val[0] = a2[2];
                int8x16_t v34 = a2[3];
                a2 += 4;
                int8x16_t v35 = v34;
                v46.val[1] = 0uLL;
                v47.val[0] = v33;
                v45.val[1] = 0uLL;
                int v36 = v26;
                vst2q_s8(v36, v45);
                v36 += 32;
                v47.val[1] = 0uLL;
                vst2q_s8(v36, v47);
                unint64_t v37 = v26 + 64;
                vst2q_s8(v37, v46);
                unint64_t v38 = v26 + 96;
                vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
                v26 += 128;
              }
              while (v26 != v31);
              unint64_t v26 = v31;
            }
            while (v26 != v30)
            {
              __int16 v39 = a2->u8[0];
              a2 = (int8x16_t *)((char *)a2 + 1);
              *(_WORD *)unint64_t v26 = v39;
              v26 += 2;
            }
            *(_WORD *)uint64_t v30 = 58;
            unint64_t v40 = v30 + 2;
            uint64_t v43 = a4;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v43, v40);
            uint64_t v41 = v43;
            if (v43) {
              uint64_t v41 = *(unsigned int *)(v43 + 4);
            }
            int v42 = &v40[2 * v41];
            *(_WORD *)int v42 = 58;
            uint64_t v44 = a5;
            uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v44, v42 + 2);
            goto LABEL_46;
          }
        }
LABEL_51:
        uint64_t *v9 = 0;
        __break(0xC471u);
        JUMPOUT(0x198A00178);
      }
      goto LABEL_24;
    }
  }
  else if (!a5)
  {
    if (v17 == -26) {
      goto LABEL_22;
    }
    uint64_t v20 = v18;
    if ((v18 & 0x80000000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_26;
  }
  uint64_t v20 = v18;
  BOOL v21 = v18 == 0;
  if ((a5[4] & 4) == 0) {
    goto LABEL_21;
  }
LABEL_24:
  if (v21) {
    goto LABEL_22;
  }
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_51;
  }
LABEL_26:
  WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
  int v22 = v44;
  if (!v44) {
    goto LABEL_51;
  }
  _DWORD *v44 = 2;
  v22[1] = v18;
  *((void *)v22 + 1) = v22 + 5;
  v22[4] = 4;
  qmemcpy(v22 + 5, "com.apple.webkit.webpushd:", 26);
  unint64_t v23 = (char *)v22 + 46;
  if (v5)
  {
    if (v5 == 1) {
      unsigned char *v23 = a2->i8[0];
    }
    else {
      memcpy((char *)v22 + 46, a2, v5);
    }
  }
  v23[v5] = 58;
  uint64_t v43 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v43, &v23[v5 + 1]);
  uint64_t v24 = v43;
  if (v43) {
    uint64_t v24 = *(unsigned int *)(v43 + 4);
  }
  unsigned int v25 = &v23[v5 + 1 + v24];
  unsigned char *v25 = 58;
  uint64_t v44 = a5;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v44, v25 + 1);
LABEL_46:
  uint64_t *v9 = (uint64_t)v22;
  return result;
}

void sub_198A00198(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceConnection::generateClientKeys(WebPushD::PushServiceConnection *this)
{
  return MEMORY[0x1F416C2D8](this);
}

WTF *WebPushD::PushServiceConnection::startListeningForPublicToken(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(WTF **)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  if (result) {
    uint64_t result = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
  }
  int v5 = *(_DWORD *)(a1 + 36);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    long long v8 = *(WTF **)(a1 + 24);
    int v9 = *(_DWORD *)(a1 + 32);
    int v10 = v5;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v6 + 16))(v6, &v8);
    uint64_t result = v8;
    if (v8)
    {
      long long v8 = 0;
      int v9 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

void sub_198A002E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceConnection::didReceivePublicToken(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 16))();
  }
  else {
    return WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 24, a2);
  }
}

WTF::WorkQueue *WebPushD::PushServiceConnection::startListeningForPushMessages(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(WTF::WorkQueue **)(a1 + 40);
  *(void *)(a1 + 40) = v3;
  if (result) {
    uint64_t result = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)result + 8))(result);
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = *(void *)(a1 + 56);
  if (v5 > v6) {
    v6 += *(unsigned int *)(a1 + 72);
  }
  if (v6 != v5)
  {
    uint64_t v7 = WTF::WorkQueue::main(result);
    long long v8 = (WTF::WorkQueue *)WTF::fastMalloc((WTF *)0x10);
    *(void *)long long v8 = &unk_1EE9B9F78;
    *((void *)v8 + 1) = a1;
    int v9 = v8;
    (*(void (**)(uint64_t, WTF::WorkQueue **))(*(void *)v7 + 32))(v7, &v9);
    uint64_t result = v9;
    int v9 = 0;
    if (result) {
      return (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198A0044C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::PushServiceConnection::didReceivePushMessage(WebPushD::PushServiceConnection *this, NSString *a2, NSDictionary *a3)
{
  int v11 = a3;
  BOOL v12 = a2;
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    unint64_t v5 = *(void (**)(void))(*(void *)v4 + 16);
    v5();
  }
  else
  {
    unint64_t v6 = (char *)this + 48;
    std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>::pair[abi:sn180100]<NSString*&,NSDictionary*&,0>(&v9, &v12, &v11);
    WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::append((uint64_t)v6, (uint64_t *)&v9);
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    CFTypeRef v8 = v9;
    CFTypeRef v9 = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
}

void sub_198A00540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9) {
    CFRelease(a9);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::append(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1)
  {
    if (v4 + 1 != *(void *)a1) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::expandCapacity(a1);
    uint64_t v4 = *(void *)(a1 + 8);
  }
LABEL_10:
  unint64_t v6 = (void *)(*(void *)(a1 + 16) + 16 * v4);
  uint64_t v7 = *a2;
  *a2 = 0;
  void *v6 = v7;
  uint64_t v8 = a2[1];
  a2[1] = 0;
  v6[1] = v8;
  if (v4 == *(unsigned int *)(a1 + 24) - 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v4 + 1;
  }
  *(void *)(a1 + 8) = v9;
}

const void **std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>::pair[abi:sn180100]<NSString*&,NSDictionary*&,0>(const void **a1, const void **a2, const void **a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  if (v5) {
    CFRetain(v5);
  }
  unint64_t v6 = *a3;
  a1[1] = *a3;
  if (v6) {
    CFRetain(v6);
  }
  return a1;
}

void sub_198A00660(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebPushD::PushServiceConnection::startListeningForPushMessages(WTF::Function<void ()(NSString *,NSDictionary *)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  while (1)
  {
    unint64_t v2 = *(void *)(v1 + 48);
    unint64_t v3 = *(void *)(v1 + 56);
    if (v2 > v3) {
      v3 += *(unsigned int *)(v1 + 72);
    }
    if (v3 == v2) {
      break;
    }
    uint64_t v4 = MEMORY[0x199741920]();
    uint64_t v5 = *(void *)(v1 + 48);
    if (v5 == *(void *)(v1 + 56))
    {
      __break(0xC471u);
      return;
    }
    unint64_t v6 = (void *)v4;
    uint64_t v7 = *(void *)(v1 + 64) + 16 * v5;
    uint64_t v8 = *(const void **)v7;
    uint64_t v9 = *(const void **)(v7 + 8);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(*(void *)(v1 + 64) + 16 * v5, *(void *)(v1 + 64) + 16 * v5 + 16);
    uint64_t v10 = *(void *)(v1 + 40);
    uint64_t v11 = *(void *)(v1 + 48);
    if (v11 == *(unsigned int *)(v1 + 72) - 1) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11 + 1;
    }
    *(void *)(v1 + 48) = v12;
    (*(void (**)(uint64_t, const void *, const void *))(*(void *)v10 + 16))(v10, v8, v9);
    if (v9) {
      CFRelease(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
}

void sub_198A00784(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 24);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x198A008A0);
  }
  uint64_t v4 = *(const void ***)(a1 + 16);
  int v5 = v2 + 1;
  unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
  *(_DWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 16) = v6;
  unint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)a1 <= v7)
  {
    WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(&v4[2 * *(void *)a1], &v4[2 * v7], &v6[2 * *(void *)a1]);
    if (!v4) {
      return;
    }
  }
  else
  {
    WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(v4, &v4[2 * v7], v6);
    uint64_t v8 = *(void *)a1 - v1 + *(unsigned int *)(a1 + 24);
    WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(&v4[2 * *(void *)a1], &v4[2 * v1], (void *)(*(void *)(a1 + 16) + 16 * v8));
    *(void *)a1 = v8;
    if (!v4) {
      return;
    }
  }
  if (*(const void ***)(a1 + 16) == v4)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }

  WTF::fastFree((WTF *)v4, v9);
}

void WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(const void **a1, const void **a2, void *a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      unint64_t v6 = *v5;
      *int v5 = 0;
      *a3 = v6;
      unint64_t v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      uint64_t v8 = v5[1];
      v5[1] = 0;
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v9 = *v5;
      *int v5 = 0;
      if (v9) {
        CFRelease(v9);
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
}

void WebKit::RemoteAudioDestinationManager::~RemoteAudioDestinationManager(WebKit::RemoteAudioDestinationManager *this, void *a2)
{
  *(void *)this = &unk_1EE9B9FA0;
  unint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      unint64_t v6 = (WebKit::RemoteAudioDestination **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (WebKit::RemoteAudioDestination *)-1) {
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100](v6, 0);
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioDestinationManager::~RemoteAudioDestinationManager(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::RemoteAudioDestinationManager::createAudioDestination(void *a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (atomic_uchar *)a1[3];
  if (v9)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, a1[4], &v45);
    char v14 = v45;
    if (v45)
    {
      if (*((unsigned char *)v45 + 353))
      {
        uint64_t v44 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = "void WebKit::RemoteAudioDestinationManager::createAudioDestination(RemoteAudio"
                                          "DestinationIdentifier, const String &, uint32_t, uint32_t, float, float, IPC::"
                                          "Semaphore &&, WebCore::SharedMemory::Handle &&)";
          _os_log_fault_impl(&dword_1985F2000, v44, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioDestinationManager.cpp 198: Invalid message dispatched %{public}s: Received a createAudioDestination() message from a webpage in Lockdown mode.", (uint8_t *)&buf, 0xCu);
          char v14 = v45;
        }
        *(unsigned char *)(*((void *)v14 + 7) + 98) = 1;
        goto LABEL_31;
      }
      uint64_t v15 = WTF::fastMalloc((WTF *)0x58);
      *(void *)uint64_t v15 = &unk_1EE9BA008;
      WTF::MachSendRight::MachSendRight();
      int v16 = *(_DWORD *)(a8 + 4);
      *(_DWORD *)(a8 + 4) = 0;
      *(_DWORD *)(v15 + 12) = v16;
      *(unsigned char *)(v15 + 16) = 0;
      uint64_t v17 = WebKit::GPUConnectionToWebProcess::logger(v14);
      atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
      *(void *)(v15 + 24) = v17;
      *(void *)(v15 + 32) = WTF::cryptographicallyRandomNumber<unsigned long long>();
      WebCore::AudioOutputUnitAdaptor::AudioOutputUnitAdaptor();
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = a7;
      *(void *)(v15 + 72) = 0;
      *(void *)(v15 + 80) = 0;
      uint64_t v18 = *(void *)(v15 + 24);
      uint64_t v19 = *(void *)(v15 + 32);
      *(void *)&long long buf = "RemoteAudioDestination";
      *((void *)&buf + 1) = 23;
      int8x16x2_t v47 = "RemoteAudioDestination";
      uint64_t v48 = v19;
      if (*(unsigned char *)(v18 + 12)) {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
      }
      WebCore::AudioOutputUnitAdaptor::configure((WebCore::AudioOutputUnitAdaptor *)(v15 + 40), a4);
      WebCore::SharedMemory::map();
      uint64_t v20 = buf;
      *(void *)&long long buf = 0;
      BOOL v21 = *(unsigned int **)(v15 + 56);
      *(void *)(v15 + 56) = v20;
      if (v21)
      {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v21);
        int v22 = (unsigned int *)buf;
        *(void *)&long long buf = 0;
        if (v22) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v22);
        }
      }
      uint64_t v25 = a1[2];
      uint64_t v24 = a1 + 2;
      uint64_t v23 = v25;
      if (v25
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v24),
            (uint64_t v23 = *v24) != 0))
      {
        int v26 = *(_DWORD *)(v23 - 8);
      }
      else
      {
        int v26 = 0;
      }
      unint64_t v27 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
      unint64_t v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
      unsigned int v30 = v26 & ((v29 >> 31) ^ v29);
      int v31 = (void *)(v23 + 16 * v30);
      uint64_t v32 = *v31;
      if (*v31)
      {
        int8x16_t v33 = 0;
        int v34 = 1;
        do
        {
          if (v32 == a2)
          {
            WebKit::RemoteAudioDestination::~RemoteAudioDestination((WebKit::RemoteAudioDestination *)v15);
            WTF::fastFree(v37, v38);
            goto LABEL_31;
          }
          if (v32 == -1) {
            int8x16_t v33 = v31;
          }
          unsigned int v30 = (v30 + v34) & v26;
          int v31 = (void *)(v23 + 16 * v30);
          uint64_t v32 = *v31;
          ++v34;
        }
        while (*v31);
        if (v33)
        {
          void *v33 = 0;
          v33[1] = 0;
          --*(_DWORD *)(*v24 - 16);
          int v31 = v33;
        }
      }
      *int v31 = a2;
      std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)v31 + 1, (WebKit::RemoteAudioDestination *)v15);
      uint64_t v35 = *v24;
      if (*v24) {
        int v36 = *(_DWORD *)(v35 - 12) + 1;
      }
      else {
        int v36 = 1;
      }
      *(_DWORD *)(v35 - 12) = v36;
      uint64_t v39 = *v24;
      if (*v24) {
        int v40 = *(_DWORD *)(v39 - 12);
      }
      else {
        int v40 = 0;
      }
      uint64_t v41 = (*(_DWORD *)(v39 - 16) + v40);
      unint64_t v42 = *(unsigned int *)(v39 - 4);
      if (v42 > 0x400)
      {
        if (v42 > 2 * v41)
        {
LABEL_31:
          uint64_t v43 = v45;
          int8x16x2_t v45 = 0;
          if (v43) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((atomic_uchar **)v43 + 2));
          }
          return;
        }
      }
      else if (3 * v42 > 4 * v41)
      {
        goto LABEL_31;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v24);
      goto LABEL_31;
    }
  }
}

void WebKit::RemoteAudioDestinationManager::deleteAudioDestination(uint64_t *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (atomic_uchar *)a1[3];
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v3, a1[4], &v24);
    uint64_t v5 = v24;
    if (v24)
    {
      if (*(unsigned char *)(v24 + 353))
      {
        uint64_t v23 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 136446210;
          int v26 = "void WebKit::RemoteAudioDestinationManager::deleteAudioDestination(RemoteAudioDestinationIdentifier)";
          _os_log_fault_impl(&dword_1985F2000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioDestinationManager.cpp 214: Invalid message dispatched %{public}s: Received a deleteAudioDestination() message from a webpage in Lockdown mode.", buf, 0xCu);
          uint64_t v5 = v24;
        }
        *(unsigned char *)(*(void *)(v5 + 56) + 98) = 1;
        uint64_t v24 = 0;
LABEL_26:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 16));
        return;
      }
      unint64_t v7 = a1 + 2;
      uint64_t v6 = a1[2];
      if (v6)
      {
        unsigned int v8 = *(_DWORD *)(v6 - 8);
        unint64_t v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
        uint64_t v13 = *(void *)(v6 + 16 * v12);
        if (v13 != a2)
        {
          int v14 = 1;
          while (v13)
          {
            uint64_t v12 = (v12 + v14) & v8;
            uint64_t v13 = *(void *)(v6 + 16 * v12);
            ++v14;
            if (v13 == a2) {
              goto LABEL_12;
            }
          }
          uint64_t v12 = *(unsigned int *)(v6 - 4);
        }
LABEL_12:
        if (v12 != *(_DWORD *)(v6 - 4))
        {
          uint64_t v15 = v6 + 16 * v12;
          *(void *)uint64_t v15 = -1;
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)(v15 + 8), 0);
          ++*(_DWORD *)(*v7 - 16);
          uint64_t v16 = *v7;
          int v17 = *v7 ? *(_DWORD *)(v16 - 12) - 1 : -1;
          *(_DWORD *)(v16 - 12) = v17;
          uint64_t v18 = *v7;
          if (*v7)
          {
            unsigned int v19 = 6 * *(_DWORD *)(v18 - 12);
            unsigned int v20 = *(_DWORD *)(v18 - 4);
            if (v19 < v20 && v20 >= 9) {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1 + 2, v20 >> 1);
            }
          }
        }
      }
      BOOL v22 = WebKit::RemoteAudioDestinationManager::allowsExitUnderMemoryPressure((WebKit::RemoteAudioDestinationManager *)a1);
      uint64_t v5 = v24;
      if (v22)
      {
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v24 + 80));
        uint64_t v5 = v24;
      }
      uint64_t v24 = 0;
      if (v5) {
        goto LABEL_26;
      }
    }
  }
}

BOOL WebKit::RemoteAudioDestinationManager::allowsExitUnderMemoryPressure(WebKit::RemoteAudioDestinationManager *this)
{
  unint64_t v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 2);
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    uint64_t v5 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 == v2) {
    return 1;
  }
  do
  {
    uint64_t v6 = v2[1];
    int v7 = *(unsigned __int8 *)(v6 + 16);
    BOOL v8 = *(unsigned char *)(v6 + 16) == 0;
    if (v7) {
      break;
    }
    while (1)
    {
      v2 += 2;
      if (v2 == v3) {
        break;
      }
      if ((unint64_t)(*v2 + 1) > 1) {
        goto LABEL_10;
      }
    }
    unint64_t v2 = v3;
LABEL_10:
    ;
  }
  while (v2 != v5);
  return v8;
}

atomic_uchar *WebKit::RemoteAudioDestinationManager::startAudioDestination(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (atomic_uchar *)a1[3];
  if (!v5)
  {
    uint64_t v15 = 0;
LABEL_3:
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, a1[4], &v15);
  if (!v15) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(v15 + 353))
  {
    uint64_t v13 = v15;
    int v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      int v17 = "void WebKit::RemoteAudioDestinationManager::startAudioDestination(RemoteAudioDestinationIdentifier, Completi"
            "onHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioDestinationManager.cpp 227: Invalid message dispatched %{public}s", buf, 0xCu);
      uint64_t v13 = v15;
    }
    *(unsigned char *)(*(void *)(v13 + 56) + 98) = 1;
    goto LABEL_3;
  }
  unint64_t v10 = (WebKit::RemoteAudioDestination *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[2], a2);
  if (v10)
  {
    unint64_t v11 = v10;
    WebKit::RemoteAudioDestination::start(v10);
    BOOL v12 = *((unsigned char *)v11 + 16) != 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v12);
LABEL_4:
  uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  if (v8) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteAudioDestination::start(WebKit::RemoteAudioDestination *this)
{
  uint64_t result = (WTF::StringImpl *)WebCore::AudioOutputUnitAdaptor::start((WebKit::RemoteAudioDestination *)((char *)this + 40));
  uint64_t v3 = *((void *)this + 3);
  if (result)
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v6 = "RemoteAudioDestination";
    uint64_t v7 = 23;
    uint64_t v8 = "start";
    uint64_t v9 = v4;
    if (*(unsigned char *)(v3 + 12)) {
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebKit2LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v6, "Failed to start AudioOutputUnit");
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = "RemoteAudioDestination";
    uint64_t v7 = 23;
    uint64_t v8 = "start";
    uint64_t v9 = v5;
    if (*(unsigned char *)(v3 + 12)) {
      uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v6);
    }
    *((unsigned char *)this + 16) = 1;
  }
  return result;
}

atomic_uchar *WebKit::RemoteAudioDestinationManager::stopAudioDestination(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (atomic_uchar *)a1[3];
  if (!v5)
  {
    uint64_t v15 = 0;
LABEL_3:
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, 0);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, a1[4], &v15);
  if (!v15) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(v15 + 353))
  {
    uint64_t v13 = v15;
    int v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      int v17 = "void WebKit::RemoteAudioDestinationManager::stopAudioDestination(RemoteAudioDestinationIdentifier, Completio"
            "nHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioDestinationManager.cpp 242: Invalid message dispatched %{public}s", buf, 0xCu);
      uint64_t v13 = v15;
    }
    *(unsigned char *)(*(void *)(v13 + 56) + 98) = 1;
    goto LABEL_3;
  }
  unint64_t v10 = (WebKit::RemoteAudioDestination *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[2], a2);
  if (v10)
  {
    unint64_t v11 = v10;
    WebKit::RemoteAudioDestination::stop(v10);
    BOOL v12 = *((unsigned char *)v11 + 16) != 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v12);
LABEL_4:
  uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  if (v8) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 16));
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteAudioDestination::stop(WebKit::RemoteAudioDestination *this)
{
  void v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF::StringImpl *)WebCore::AudioOutputUnitAdaptor::stop((WebKit::RemoteAudioDestination *)((char *)this + 40));
  uint64_t v3 = *((void *)this + 3);
  if (result)
  {
    uint64_t v4 = *((void *)this + 4);
    v25[0] = "RemoteAudioDestination";
    v25[1] = 23;
    v25[2] = "stop";
    v25[3] = v4;
    if (*(unsigned char *)(v3 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v28, (WTF::Logger::LogSiteIdentifier *)v25);
      WTF::String::String((WTF::String *)&v27, "Failed to stop AudioOutputUnit");
      *(void *)&long long buf = v28;
      v26[0] = v27;
      uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v26, &v29);
      if (v29)
      {
        uint64_t v6 = v27;
        uint64_t v27 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, v5);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
        uint64_t v8 = v28;
        unint64_t v28 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, v5);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
        uint64_t v9 = qword_1EB358078;
        unint64_t v10 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
        if (v10)
        {
          WTF::String::utf8();
          BOOL v12 = v26[0] ? (char *)v26[0] + 16 : 0;
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v12;
          _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          unint64_t v10 = v26[0];
          v26[0] = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1) {
              unint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
            }
            else {
              --*(_DWORD *)v10;
            }
          }
        }
        if (WebKit2LogMedia && byte_1EB358068)
        {
          uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v14 = *v13;
            if (v14) {
              break;
            }
            int v15 = *v13;
            atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
            if (v15 == v14)
            {
              uint64_t v16 = WTF::Logger::observers(v10);
              uint64_t v17 = *(unsigned int *)(v16 + 12);
              if (v17)
              {
                uint64_t v18 = *(uint64_t **)v16;
                uint64_t v19 = *(void *)v16 + 8 * v17;
                do
                {
                  uint64_t v20 = *v18;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)v25);
                  LODWORD(v31) = 0;
                  WTF::String::String((WTF::String *)v32, "Failed to stop AudioOutputUnit");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)&buf, 2uLL);
                  (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, &WebKit2LogMedia, 1, v26);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v21);
                  for (uint64_t i = 24; i != -8; i -= 16)
                  {
                    uint64_t v23 = *(WTF::StringImpl **)((char *)&buf + i);
                    *(void *)((char *)&buf + i) = 0;
                    if (v23)
                    {
                      if (*(_DWORD *)v23 == 2) {
                        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                      }
                      else {
                        *(_DWORD *)v23 -= 2;
                      }
                    }
                  }
                  ++v18;
                }
                while (v18 != (uint64_t *)v19);
              }
              int v24 = 1;
              atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
              if (v24 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        uint64_t result = v29;
        unint64_t v29 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 4);
    *(void *)&long long buf = "RemoteAudioDestination";
    *((void *)&buf + 1) = 23;
    int v31 = "stop";
    v32[0] = v7;
    if (*(unsigned char *)(v3 + 12)) {
      uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
    }
    *((unsigned char *)this + 16) = 0;
  }
  return result;
}

void WebKit::RemoteAudioDestinationManager::audioSamplesStorageChanged(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unsigned __int8 *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 16), a2);
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = v2[16];
    if (!v2[16] || (WebKit::RemoteAudioDestination::stop((WebKit::RemoteAudioDestination *)v2), !v3[16]))
    {
      WebKit::ConsumerSharedCARingBuffer::map((WebCore::CARingBuffer *)4, &v9);
      uint64_t v5 = (WebCore::CARingBuffer *)*((void *)v3 + 9);
      uint64_t v6 = v9;
      uint64_t v9 = 0;
      *((void *)v3 + 9) = v6;
      if (v5)
      {
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v3 + 72, v5);
        uint64_t v7 = v9;
        uint64_t v9 = 0;
        if (v7) {
          std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v9, v7);
        }
      }
      if (v4) {
        BOOL v8 = *((void *)v3 + 9) == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8) {
        WebKit::RemoteAudioDestination::start((WebKit::RemoteAudioDestination *)v3);
      }
    }
  }
}

WebKit::RemoteAudioDestination *std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100](WebKit::RemoteAudioDestination **a1, WebKit::RemoteAudioDestination *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteAudioDestination::~RemoteAudioDestination(result);
    return (WebKit::RemoteAudioDestination *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::RemoteAudioDestination::~RemoteAudioDestination(WebKit::RemoteAudioDestination *this)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *((void *)this + 4);
  v7[0] = "RemoteAudioDestination";
  v7[1] = 23;
  void v7[2] = "~RemoteAudioDestination";
  v7[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
  }
  if (*((unsigned char *)this + 16)) {
    WebKit::RemoteAudioDestination::stop(this);
  }
  int v4 = (WebCore::CARingBuffer *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 72, v4);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v5);
  }
  WebCore::AudioOutputUnitAdaptor::~AudioOutputUnitAdaptor((WebKit::RemoteAudioDestination *)((char *)this + 40));
  uint64_t v6 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  IPC::Semaphore::destroy((WebKit::RemoteAudioDestination *)((char *)this + 8));
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteAudioDestination *)((char *)this + 8));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteAudioDestination::~RemoteAudioDestination(this);

  WTF::fastFree(v1, v2);
}

uint64_t *WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  WebKit::RemoteAudioDestination *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (!(a3 >> 28))
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a3));
    *((_DWORD *)v3 + 2) = a3;
    *uint64_t v3 = v6;
    uint64_t v7 = a2 + 16 * a3;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      *(_DWORD *)(v6 + 16 * v8) = *(_DWORD *)a2;
      uint64_t v9 = *(_DWORD **)(a2 + 8);
      if (v9) {
        *v9 += 2;
      }
      *(void *)(v6 + 16 * v8 + 8) = v9;
      a2 += 16;
      ++v8;
    }
    while (a2 != v7);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](int a1, WebCore::CARingBuffer *this)
{
  if (this)
  {
    *(void *)this = &unk_1EE9B9FD8;
    uint64_t v3 = (unsigned int *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    }
    WebCore::CARingBuffer::~CARingBuffer(this);
    WTF::fastFree(v4, v5);
  }
}

void WebKit::SharedCARingBufferBase::~SharedCARingBufferBase(WebKit::SharedCARingBufferBase *this)
{
  *(void *)this = &unk_1EE9B9FD8;
  uint64_t v2 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }

  WebCore::CARingBuffer::~CARingBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9B9FD8;
  uint64_t v2 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  WebCore::CARingBuffer::~CARingBuffer(this);

  WTF::fastFree(v3, v4);
}

uint64_t WebKit::SharedCARingBufferBase::data(WebKit::SharedCARingBufferBase *this)
{
  return *(void *)(*((void *)this + 9) + 16) + 24;
}

uint64_t WebKit::SharedCARingBufferBase::timeBoundsBuffer(WebKit::SharedCARingBufferBase *this)
{
  return *(void *)(*((void *)this + 9) + 16);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v30, this);
  WTF::String::String((WTF::String *)&v29, a4);
  *(void *)long long buf = v30;
  v28[0] = v29;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    uint64_t v9 = v29;
    unint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    unint64_t v10 = v30;
    unsigned int v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    unint64_t v11 = *(NSObject **)(a1 + 32);
    BOOL v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      int v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      BOOL v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          BOOL v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      int v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            uint64_t v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v33 = 0;
              WTF::String::String((WTF::String *)v34, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v31;
    int v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(void)const::{lambda(void)#1}::operator()(a1 + 8, a2);
}

uint64_t WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  int v4 = *(WTF **)a1;
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

uint64_t WebKit::RemoteAudioDestination::render(WebKit::RemoteAudioDestination *this, double a2, unint64_t a3, unsigned int a4, AudioBufferList *a5)
{
  uint64_t v7 = a4;
  if (WebCore::CARingBuffer::fetchIfHasEnoughData())
  {
    uint64_t v8 = 0;
    *((void *)this + 10) += v7;
  }
  else
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  uint64_t v9 = *((void *)this + 7);
  if (!v9) {
    goto LABEL_7;
  }
  if (*(void *)(v9 + 8) == 4)
  {
    atomic_fetch_add(*(atomic_uint *volatile *)(v9 + 16), a4);
LABEL_7:
    MEMORY[0x1997420B0](*((unsigned int *)this + 3));
    return v8;
  }
  uint64_t result = 143;
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v10 = (uint64_t *)(v4 + 16 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)(v21 + 8), 0);
          *(void *)uint64_t v21 = *v10;
          uint64_t v22 = v4 + 16 * i;
          uint64_t v23 = *(void *)(v22 + 8);
          v22 += 8;
          *(void *)uint64_t v22 = 0;
          *(void *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WebKit::RemoteCaptureSampleManager::didReceiveMessage(WebKit::RemoteCaptureSampleManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 760)
  {
    uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v21) {
      goto LABEL_55;
    }
    uint64_t v22 = v20;
    IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(a3, (uint64_t)&v64);
    if (!BYTE8(v64)) {
      goto LABEL_55;
    }
    uint64_t v23 = IPC::Decoder::decode<WebCore::VideoFrameRotation>((uint64_t *)a3);
    __int16 v24 = v23;
    if ((v23 & 0xFF0000) == 0) {
      goto LABEL_47;
    }
    unint64_t v9 = *((void *)a3 + 1);
    uint64_t v25 = *(void *)a3;
    unint64_t v26 = *((void *)a3 + 2) - *(void *)a3;
    if (v9 <= v26) {
      goto LABEL_44;
    }
    uint64_t v27 = (unsigned __int8 *)(v25 + v26);
    *((void *)a3 + 2) = v27 + 1;
    if (!v25)
    {
      unint64_t v35 = v9;
      uint64_t v36 = 0;
LABEL_45:
      unint64_t v9 = 0;
      uint64_t v25 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v38 = *((void *)a3 + 3);
      if (v38)
      {
        if (v35)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
          uint64_t v25 = *(void *)a3;
          unint64_t v9 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v9 = 0;
          uint64_t v25 = 0;
        }
      }
      goto LABEL_46;
    }
    unsigned int v28 = *v27;
    if (v28 >= 2)
    {
LABEL_46:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v39 = *((void *)a3 + 3);
      if (v39 && v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v25);
      }
LABEL_47:
      int v31 = 0;
      LOBYTE(v49) = 0;
      v52[40] = 0;
      goto LABEL_48;
    }
    BOOL v29 = v28 != 0;
    IPC::Decoder::decode<WTF::MediaTime>(a3, (uint64_t)v66);
    if (v66[16])
    {
      IPC::Decoder::decode<WebCore::VideoFrameTimeMetadata>((uint64_t)v57, a3);
      if ((_BYTE)v58)
      {
        if (!BYTE8(v64) || !v66[16])
        {
LABEL_43:
          __break(1u);
LABEL_44:
          unint64_t v35 = 0;
          uint64_t v36 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v37 = *((void *)a3 + 3);
          if (v37)
          {
            if (v9)
            {
              (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
              uint64_t v36 = *(void *)a3;
              unint64_t v35 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v35 = 0;
              uint64_t v36 = 0;
            }
          }
          goto LABEL_45;
        }
        *(_OWORD *)&cf[16] = *(_OWORD *)v66;
        long long v51 = *(_OWORD *)v57;
        uint64_t v30 = v64;
        *(void *)&long long v64 = 0;
        uint64_t v49 = v22;
        *(void *)CFTypeRef cf = v30;
        *(_WORD *)&cf[8] = v24;
        cf[10] = v29;
        *(void *)&v52[32] = *(void *)&v57[48];
        int v31 = 1;
        *(_OWORD *)int v52 = *(_OWORD *)&v57[16];
        *(_OWORD *)&v52[16] = *(_OWORD *)&v57[32];
      }
      else
      {
        int v31 = 0;
        LOBYTE(v49) = 0;
      }
      v52[40] = v31;
    }
    else
    {
      int v31 = 0;
      LOBYTE(v49) = 0;
      v52[40] = 0;
    }
LABEL_48:
    if (BYTE8(v64) && (int v40 = (const void *)v64, *(void *)&v64 = 0, v40))
    {
      CFRelease(v40);
      if (v31) {
        goto LABEL_51;
      }
    }
    else if (v31)
    {
LABEL_51:
      *(_OWORD *)uint64_t v57 = v51;
      *(_OWORD *)&v57[16] = *(_OWORD *)v52;
      *(_OWORD *)&v57[32] = *(_OWORD *)&v52[16];
      *(void *)&v57[48] = *(void *)&v52[32];
      WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV((uint64_t)this, v49);
      if (v52[40])
      {
        uint64_t v41 = *(const void **)cf;
        *(void *)CFTypeRef cf = 0;
        if (v41) {
          CFRelease(v41);
        }
      }
      return;
    }
LABEL_55:
    uint64_t v42 = *(void *)a3;
    uint64_t v43 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v44 = *((void *)a3 + 3);
    if (v44 && v43) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v42);
    }
    return;
  }
  if (v5 == 759)
  {
    uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v18) {
      goto LABEL_55;
    }
    uint64_t v19 = v17;
    IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>((uint64_t *)a3, (uint64_t)v66);
    if (!v69) {
      goto LABEL_55;
    }
    IPC::Decoder::decode<WebCore::VideoFrameTimeMetadata>((uint64_t)v57, a3);
    if (!(_BYTE)v58) {
      goto LABEL_55;
    }
    if (v69)
    {
      *(_OWORD *)CFTypeRef cf = *(_OWORD *)v66;
      *(_OWORD *)&cf[16] = *(_OWORD *)&v66[16];
      long long v51 = v67;
      *(void *)int v52 = v68;
      *(_OWORD *)&v52[8] = *(_OWORD *)v57;
      *(_OWORD *)&v52[24] = *(_OWORD *)&v57[16];
      *(_OWORD *)&v52[40] = *(_OWORD *)&v57[32];
      uint64_t v53 = *(void *)&v57[48];
      LOBYTE(v54) = 1;
      WebKit::RemoteCaptureSampleManager::videoFrameAvailable((uint64_t)this, v19, (uint64_t)cf);
      return;
    }
    goto LABEL_43;
  }
  if (v5 != 758) {
    return;
  }
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
  if (v7)
  {
    uint64_t v8 = v6;
    IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)v66);
    if (!v66[24])
    {
      LOBYTE(v49) = 0;
      char v56 = 0;
      goto LABEL_68;
    }
    IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(a3, (uint64_t)v57);
    if (!v60)
    {
      LOBYTE(v49) = 0;
      char v56 = 0;
LABEL_66:
      if (v66[24]) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v66);
      }
LABEL_68:
      if (v56)
      {
LABEL_69:
        WebKit::RemoteCaptureSampleManager::audioStorageChanged((uint64_t)this, v49, (uint64_t)cf, (uint64_t)&cf[24], (IPC::Semaphore *)&v53, (uint64_t *)&v54, v55);
        if (v56)
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v53);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v53);
          WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&cf[24]);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)cf);
        }
        return;
      }
      goto LABEL_39;
    }
    IPC::Decoder::decode<IPC::Semaphore>(a3, v61);
    if (!v63)
    {
      LOBYTE(v49) = 0;
      char v56 = 0;
LABEL_64:
      if (v60) {
        WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v57);
      }
      goto LABEL_66;
    }
    IPC::Decoder::decode<WTF::MediaTime>(a3, (uint64_t)&v64);
    char v10 = v65;
    if (v65)
    {
      unint64_t v11 = *((void *)a3 + 1);
      uint64_t v12 = *(void *)a3;
      unint64_t v13 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v11 < v13 || v11 - v13 <= 7)
      {
        unint64_t v45 = 0;
        uint64_t v46 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v47 = *((void *)a3 + 3);
        if (v47)
        {
          if (v11)
          {
            (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
            uint64_t v46 = *(void *)a3;
            unint64_t v45 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v45 = 0;
            uint64_t v46 = 0;
          }
        }
      }
      else
      {
        unint64_t v14 = (uint64_t *)(v12 + v13);
        *((void *)a3 + 2) = v14 + 1;
        if (v12)
        {
          if (v66[24] && v60 && v63)
          {
            uint64_t v15 = *v14;
            uint64_t v49 = v8;
            WTF::MachSendRight::MachSendRight();
            *(_OWORD *)&cf[8] = *(_OWORD *)&v66[8];
            *(void *)&cf[24] = MEMORY[0x1E4FB6B98] + 16;
            *(_OWORD *)int v52 = *(_OWORD *)&v57[24];
            *(_OWORD *)&v52[16] = *(_OWORD *)&v57[40];
            *(_OWORD *)&v52[32] = v58;
            *(_DWORD *)&v52[48] = v59;
            long long v51 = *(_OWORD *)&v57[8];
            WTF::MachSendRight::MachSendRight();
            int v16 = v62;
            int v62 = 0;
            HIDWORD(v53) = v16;
            long long v54 = v64;
            uint64_t v55 = v15;
            char v10 = 1;
            goto LABEL_62;
          }
          goto LABEL_43;
        }
        unint64_t v45 = v11;
        uint64_t v46 = 0;
      }
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v48 = *((void *)a3 + 3);
      if (v48 && v45) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46);
      }
      char v10 = 0;
    }
    LOBYTE(v49) = 0;
LABEL_62:
    char v56 = v10;
    if (v63)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v61);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v61);
    }
    goto LABEL_64;
  }
  LOBYTE(v49) = 0;
  char v56 = 0;
LABEL_39:
  uint64_t v32 = *(void *)a3;
  uint64_t v33 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v34 = *((void *)a3 + 3);
  if (v34)
  {
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
      if (v56) {
        goto LABEL_69;
      }
    }
  }
}

void IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(void *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::CAAudioStreamDescription,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t IPC::Decoder::decode<WebCore::VideoFrameTimeMetadata>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

void WebKit::RemoteCDMFactoryProxy::didReceiveMessage(WebKit::RemoteCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 740)
  {
    uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    uint64_t v8 = v6;
    if ((_BYTE)v6) {
      WebKit::RemoteCDMFactoryProxy::removeSession((uint64_t)this, &v7);
    }
  }
  else if (v4 == 739)
  {
    uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    uint64_t v8 = v5;
    if ((_BYTE)v5) {
      WebKit::RemoteCDMFactoryProxy::removeInstance(this, &v7);
    }
  }
}

BOOL WebKit::RemoteCDMFactoryProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, IPC::Encoder **a4)
{
  int v7 = a3[25];
  if (v7 != 3629)
  {
    if (v7 != 3628) {
      return 0;
    }
    IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v23);
    BOOL v8 = v24 != 0;
    if (v24)
    {
      unint64_t v9 = *a4;
      *a4 = 0;
      uint64_t v19 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a2);
      char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v10 = &unk_1EE9BA058;
      v10[1] = v19;
      unint64_t v11 = v21[0];
      v21[0] = 0;
      uint64_t v10[2] = v11;
      uint64_t v22 = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
      BOOL result = 0;
      if (v24)
      {
        WebKit::RemoteCDMFactoryProxy::createCDM(a1, (WebKit *)&v23, (uint64_t *)&v22);
        uint64_t v14 = (uint64_t)v22;
        uint64_t v22 = 0;
        if (v14) {
          goto LABEL_10;
        }
        goto LABEL_11;
      }
      goto LABEL_18;
    }
    return v8;
  }
  IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v23);
  BOOL v8 = v24 != 0;
  if (!v24) {
    return v8;
  }
  uint64_t v15 = *a4;
  *a4 = 0;
  uint64_t v20 = v15;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a2);
  int v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v16 = &unk_1EE9BA080;
  v16[1] = v20;
  uint64_t v17 = v21[0];
  v21[0] = 0;
  v16[2] = v17;
  uint64_t v22 = v16;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  BOOL result = 0;
  if (v24)
  {
    WebKit::RemoteCDMFactoryProxy::supportsKeySystem(a1, (WebKit *)&v23, (uint64_t *)&v22);
    uint64_t v14 = (uint64_t)v22;
    uint64_t v22 = 0;
    if (v14) {
LABEL_10:
    }
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
LABEL_11:
    if (v24)
    {
      char v18 = v23;
      uint64_t v23 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v13);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
    }
    return v8;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy9CreateCDMEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_23RemoteCDMIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_22RemoteCDMConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy9CreateCDMEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_23RemoteCDMIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_22RemoteCDMConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA058;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy9CreateCDMEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_23RemoteCDMIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_22RemoteCDMConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EE4callESJ_SL_(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, a2);
  IPC::ArgumentCoder<WebKit::RemoteCDMConfiguration,void>::encode(v5, a3);
  uint64_t v6 = v4[1];

  return IPC::Connection::sendMessageImpl(v6, v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  int v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::RemoteCDMInstance::didReceiveMessage(WebKit::RemoteCDMInstance *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 754) {
    IPC::handleMessage<Messages::RemoteCDMInstance::UnrequestedInitializationDataReceived,WebKit::RemoteCDMInstance,WebKit::RemoteCDMInstance,void ()(WTF::String const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>(a3, this);
  }
}

void IPC::handleMessage<Messages::RemoteCDMInstance::UnrequestedInitializationDataReceived,WebKit::RemoteCDMInstance,WebKit::RemoteCDMInstance,void ()(WTF::String const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>(IPC::Decoder *a1, void *a2)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  if (v14)
  {
    IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v15);
    if (v16)
    {
      if (v14)
      {
        unint64_t v11 = v13;
        uint64_t v12 = v15;
        WebKit::RemoteCDMInstance::unrequestedInitializationDataReceived(a2);
        if (v12) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v5);
        }
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v5);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
      }
      else
      {
        __break(1u);
      }
      return;
    }
    if (v14)
    {
      uint64_t v6 = v13;
      unint64_t v13 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v9 = *((void *)a1 + 3);
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
  }
}

void non-virtual thunk to'WebKit::RemoteCDMInstance::didReceiveMessage(WebKit::RemoteCDMInstance *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 754) {
    IPC::handleMessage<Messages::RemoteCDMInstance::UnrequestedInitializationDataReceived,WebKit::RemoteCDMInstance,WebKit::RemoteCDMInstance,void ()(WTF::String const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>(a3, (void *)this - 2);
  }
}

WTF::StringImpl *WebKit::RemoteCDMInstanceProxy::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = (uint64_t)this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 743)
  {
    this = IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v46);
    if (!LOBYTE(v46[1])) {
      return this;
    }
    this = (WTF::StringImpl *)WebKit::RemoteCDMInstanceProxy::setStorageDirectory(v4, (const WTF::String *)v46);
    if (!LOBYTE(v46[1])) {
      return this;
    }
    goto LABEL_28;
  }
  if (v5 != 742)
  {
    if (v5 != 741) {
      return this;
    }
    IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>(a3, (uint64_t)&v56);
    if (!v65) {
      goto LABEL_39;
    }
    unint64_t v8 = *((void *)v3 + 1);
    uint64_t v7 = *(char **)v3;
    unint64_t v9 = *((void *)v3 + 2) - *(void *)v3;
    if (v8 <= v9)
    {
      unint64_t v25 = 0;
      char v24 = 0;
      *(void *)unsigned int v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v34 = *((void *)v3 + 3);
      if (v34)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
          char v24 = *(char **)v3;
          unint64_t v25 = *((void *)v3 + 1);
        }
        else
        {
          unint64_t v25 = 0;
          char v24 = 0;
        }
      }
    }
    else
    {
      BOOL v10 = &v7[v9];
      uint64_t v11 = (uint64_t)&v7[v9 + 1];
      *((void *)v3 + 2) = v11;
      if (v7)
      {
        unsigned int v12 = *v10;
        if (v12 >= 2) {
          goto LABEL_34;
        }
        BOOL v13 = v12 != 0;
        if (v8 <= v11 - (uint64_t)v7)
        {
          unint64_t v36 = 0;
          uint64_t v37 = 0;
          *(void *)unsigned int v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v38 = *((void *)v3 + 3);
          if (v38)
          {
            (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
            unint64_t v36 = 0;
            uint64_t v7 = *(char **)v3;
            uint64_t v44 = *((void *)v3 + 1);
            uint64_t v45 = *((void *)v3 + 3);
            *(void *)unsigned int v3 = 0;
            *((void *)v3 + 1) = 0;
            uint64_t v37 = 0;
            if (v45)
            {
              if (v44)
              {
                (*(void (**)(uint64_t, char *))(*(void *)v45 + 16))(v45, v7);
                uint64_t v37 = *(char **)v3;
                unint64_t v36 = *((void *)v3 + 1);
              }
            }
          }
        }
        else
        {
          *((void *)v3 + 2) = v10 + 2;
          unsigned int v14 = v10[1];
          if (v14 < 2)
          {
            long long v15 = v56;
            long long v56 = 0uLL;
            *(_OWORD *)uint64_t v46 = v15;
            *(void *)&long long v15 = v57;
            uint64_t v57 = 0;
            uint64_t v47 = v15;
            uint64_t v16 = v58;
            uint64_t v58 = 0;
            v48[0] = v16;
            *(void *)&long long v15 = v59;
            uint64_t v59 = 0;
            v48[1] = v15;
            uint64_t v17 = v60;
            uint64_t v60 = 0;
            v49[0] = v17;
            *(void *)&long long v15 = v61;
            uint64_t v61 = 0;
            v49[1] = v15;
            __int16 v50 = v62;
            char v18 = v63;
            char v63 = 0;
            long long v51 = v18;
            *(void *)&long long v15 = v64;
            uint64_t v64 = 0;
            uint64_t v52 = v15;
            BOOL v53 = v13;
            BOOL v54 = v14 != 0;
            unsigned __int8 v55 = 1;
            std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v7);
            uint64_t v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
            if (!(_BYTE)v20)
            {
LABEL_15:
              if (v18)
              {
                long long v51 = 0;
                LODWORD(v52) = 0;
                WTF::fastFree(v18, v20);
              }
              WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v20);
              WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v27);
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46[1], v28);
LABEL_28:
              this = v46[0];
              v46[0] = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2) {
                  return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v29);
                }
                else {
                  *(_DWORD *)this -= 2;
                }
              }
              return this;
            }
            *(void *)&long long v56 = v19;
            unsigned int v3 = (IPC::Decoder *)((char *)&v56 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v56 + 1, a2);
            char v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(void *)char v21 = &unk_1EE9BA0A8;
            *((void *)v21 + 1) = v56;
            uint64_t v22 = *((void *)&v56 + 1);
            *((void *)&v56 + 1) = 0;
            *((void *)v21 + 2) = v22;
            char v66 = v21;
            uint64_t v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v56 + 1);
            unint64_t v25 = v55;
            if (v55)
            {
              WebKit::RemoteCDMInstanceProxy::initializeWithConfiguration(v4);
              unint64_t v26 = v66;
              char v66 = 0;
              if (v26) {
                (*(void (**)(WTF::StringImpl *))(*(void *)v26 + 8))(v26);
              }
              char v18 = v51;
              goto LABEL_15;
            }
            __break(1u);
LABEL_45:
            if (v25)
            {
              (*((void (**)(atomic_uchar *volatile **, char *, unint64_t))*v23 + 2))(v23, v24, v25);
              uint64_t v7 = *(char **)v3;
              unint64_t v8 = *((void *)v3 + 1);
            }
            else
            {
              unint64_t v8 = 0;
              uint64_t v7 = 0;
            }
LABEL_34:
            *(void *)unsigned int v3 = 0;
            *((void *)v3 + 1) = 0;
            uint64_t v35 = *((void *)v3 + 3);
            if (v35 && v8)
            {
              (*(void (**)(uint64_t, char *))(*(void *)v35 + 16))(v35, v7);
LABEL_51:
              uint64_t v42 = *((void *)v3 + 3);
              uint64_t v7 = *(char **)v3;
              uint64_t v43 = *((void *)v3 + 1);
              *(void *)unsigned int v3 = 0;
              *((void *)v3 + 1) = 0;
              if (v42 && v43) {
                (*(void (**)(uint64_t, char *))(*(void *)v42 + 16))(v42, v7);
              }
              goto LABEL_39;
            }
            goto LABEL_39;
          }
          unint64_t v36 = v8;
          uint64_t v37 = v7;
        }
        *(void *)unsigned int v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v39 = *((void *)v3 + 3);
        if (v39 && v36)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
          goto LABEL_51;
        }
LABEL_39:
        std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v7);
        goto LABEL_40;
      }
      unint64_t v25 = v8;
      char v24 = 0;
    }
    unint64_t v8 = 0;
    uint64_t v7 = 0;
    *(void *)unsigned int v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v23 = (atomic_uchar *volatile **)*((void *)v3 + 3);
    if (!v23) {
      goto LABEL_34;
    }
    goto LABEL_45;
  }
  IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a3, (uint64_t)v46);
  if (!LOBYTE(v46[1]))
  {
LABEL_40:
    int v40 = *(char **)v3;
    uint64_t v41 = *((void *)v3 + 1);
    *(void *)unsigned int v3 = 0;
    *((void *)v3 + 1) = 0;
    this = (WTF::StringImpl *)*((void *)v3 + 3);
    if (this && v41) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)this + 16))(this, v40);
    }
    return this;
  }
  uint64_t v30 = (unsigned int *)v46[0];
  *(WTF::StringImpl **)&long long v56 = v46[0];
  BYTE8(v56) = 1;
  this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
  if (!(_BYTE)v31) {
    goto LABEL_24;
  }
  v46[0] = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v46[1], a2);
  uint64_t v32 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v32 = &unk_1EE9BA0D0;
  *(WTF::StringImpl **)(v32 + 8) = v46[0];
  uint64_t v33 = v46[1];
  v46[1] = 0;
  *(void *)(v32 + 16) = v33;
  char v66 = (WTF::StringImpl *)v32;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46[1]);
  WebKit::RemoteCDMInstanceProxy::setServerCertificate(v4);
  this = v66;
  char v66 = 0;
  if (this) {
    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
  }
  if (BYTE8(v56))
  {
    uint64_t v30 = (unsigned int *)v56;
LABEL_24:
    *(void *)&long long v56 = 0;
    if (v30) {
      return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v30, v31);
    }
  }
  return this;
}

WTF::StringImpl *non-virtual thunk to'WebKit::RemoteCDMInstanceProxy::didReceiveMessage(WebKit::RemoteCDMInstanceProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteCDMInstanceProxy::didReceiveMessage((WebKit::RemoteCDMInstanceProxy *)((char *)this - 16), a2, a3);
}

BOOL WebKit::RemoteCDMInstanceProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  return *((_WORD *)a3 + 25) == 3630
      && IPC::handleMessageSynchronous<Messages::RemoteCDMInstanceProxy::CreateSession,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&)> &&)>(a2, a3, a4, a1);
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteCDMInstanceProxy::CreateSession,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  unint64_t v7 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a2);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *a3;
    *a3 = 0;
    uint64_t v16 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v17, a1);
    unsigned int v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unsigned int v12 = &unk_1EE9BA0F8;
    v12[1] = v16;
    BOOL v13 = v17[0];
    v17[0] = 0;
    void v12[2] = v13;
    char v18 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v17);
    WebKit::RemoteCDMInstanceProxy::createSession(a4, v10, (uint64_t *)&v18);
    uint64_t v14 = (uint64_t)v18;
    char v18 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  return v9 != 0;
}

BOOL non-virtual thunk to'WebKit::RemoteCDMInstanceProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  return *((_WORD *)a3 + 25) == 3630
      && IPC::handleMessageSynchronous<Messages::RemoteCDMInstanceProxy::CreateSession,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&)> &&)>(a2, a3, a4, a1 - 16);
}

WTF *IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    unsigned int v3 = *(WTF **)(a1 + 64);
    if (v3)
    {
      *(void *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v3, a2);
    }
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v4);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v5);
    unint64_t v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy27InitializeWithConfigurationEN6WebKit22RemoteCDMInstanceProxyES8_FvRKN7WebCore25CDMKeySystemConfigurationENS9_11CDMInstance27AllowDistinctiveIdentifiersENSD_20AllowPersistentStateEONS_17CompletionHandlerIFvNSD_12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA0A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy27InitializeWithConfigurationEN6WebKit22RemoteCDMInstanceProxyES8_FvRKN7WebCore25CDMKeySystemConfigurationENS9_11CDMInstance27AllowDistinctiveIdentifiersENSD_20AllowPersistentStateEONS_17CompletionHandlerIFvNSD_12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA0A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy27InitializeWithConfigurationEN6WebKit22RemoteCDMInstanceProxyES8_FvRKN7WebCore25CDMKeySystemConfigurationENS9_11CDMInstance27AllowDistinctiveIdentifiersENSD_20AllowPersistentStateEONS_17CompletionHandlerIFvNSD_12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3142;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy20SetServerCertificateEN6WebKit22RemoteCDMInstanceProxyES8_FvONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvNSA_11CDMInstance12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA0D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy20SetServerCertificateEN6WebKit22RemoteCDMInstanceProxyES8_FvONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvNSA_11CDMInstance12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA0D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy20SetServerCertificateEN6WebKit22RemoteCDMInstanceProxyES8_FvONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvNSA_11CDMInstance12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3143;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteCDMInstanceProxy13CreateSessionEN6WebKit22RemoteCDMInstanceProxyES8_FvyONS_17CompletionHandlerIFvRKNS_23ObjectIdentifierGenericINS7_38RemoteCDMInstanceSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA0F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteCDMInstanceProxy13CreateSessionEN6WebKit22RemoteCDMInstanceProxyES8_FvyONS_17CompletionHandlerIFvRKNS_23ObjectIdentifierGenericINS7_38RemoteCDMInstanceSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA0F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteCDMInstanceProxy13CreateSessionEN6WebKit22RemoteCDMInstanceProxyES8_FvyONS_17CompletionHandlerIFvRKNS_23ObjectIdentifierGenericINS7_38RemoteCDMInstanceSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t *a2)
{
  int v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

unsigned int *WebKit::RemoteCDMInstanceSession::didReceiveMessage(unsigned int *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  switch(v5)
  {
    case 751:
      unsigned __int16 v9 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>((uint64_t *)a3);
      if (v9 < 0x100u
        || (unsigned __int8 v10 = v9,
            IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a3, &v15), !(_BYTE)v16))
      {
LABEL_12:
        uint64_t v12 = *(void *)a3;
        uint64_t v13 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (unsigned int *)*((void *)a3 + 3);
        if (this && v13) {
          return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)this + 16))(this, v12);
        }
        return this;
      }
      uint64_t v19 = v15;
      LOBYTE(v18) = v10;
      char v20 = 1;
      this = WebKit::RemoteCDMInstanceSession::sendMessage(v4, v10, &v19);
      if (v20)
      {
        this = v19;
        uint64_t v19 = 0;
        if (this) {
          return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v11);
        }
      }
      break;
    case 752:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v18);
      if ((_BYTE)v19)
      {
        this = (unsigned int *)WebKit::RemoteCDMInstanceSession::sessionIdChanged(v4, (const WTF::String *)&v18);
        if ((_BYTE)v19)
        {
          this = (unsigned int *)v18;
          char v18 = 0;
          if (this)
          {
            if (*this == 2) {
              return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v14);
            }
            else {
              *this -= 2;
            }
          }
        }
      }
      break;
    case 753:
      IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, a2, (uint64_t)&v18);
      if (v20)
      {
        long long v15 = (unsigned int *)v18;
        unint64_t v7 = v19;
        char v18 = 0;
        uint64_t v19 = 0;
        uint64_t v16 = v7;
        WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v6);
        char v17 = 1;
        WebKit::RemoteCDMInstanceSession::updateKeyStatuses(v4);
        return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v8);
      }
      goto LABEL_12;
    default:
      return this;
  }
  return this;
}

uint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      unsigned __int8 v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v32 = *((void *)a1 + 3);
    if (v32)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v32 + 16))(v32, v6, v5);
        uint64_t v31 = *(void *)a1;
        unint64_t v30 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_33;
  }
  unsigned __int16 v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v30 = v5;
    uint64_t v31 = 0;
LABEL_33:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result)
    {
      if (v30) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v31);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (v10 < 0x10000)
  {
    if (!v10)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
LABEL_20:
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      *(void *)a3 = v19;
      *(void *)(a3 + 8) = v20;
      goto LABEL_21;
    }
    LODWORD(v38) = v10;
    uint64_t v37 = WTF::fastMalloc((WTF *)(16 * v10));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>>(a1, (uint64_t)&v34);
      if (!v36) {
        goto LABEL_30;
      }
      if (HIDWORD(v38) != v38) {
        break;
      }
      unint64_t v11 = WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v34);
      int v12 = HIDWORD(v38) + 1;
      uint64_t v13 = v37 + 16 * HIDWORD(v38);
      uint64_t v14 = *(void *)v11;
      *(void *)unint64_t v11 = 0;
      *(void *)uint64_t v13 = v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v11 + 8);
      HIDWORD(v38) = v12;
      if (v36) {
        goto LABEL_15;
      }
LABEL_17:
      if (!--v10)
      {
        uint64_t v19 = v37;
        uint64_t v20 = v38;
        goto LABEL_20;
      }
    }
    int v15 = HIDWORD(v38) + 1;
    uint64_t v16 = v37 + 16 * HIDWORD(v38);
    char v17 = v34;
    uint64_t v34 = 0;
    *(void *)uint64_t v16 = v17;
    *(unsigned char *)(v16 + 8) = v35;
    HIDWORD(v38) = v15;
LABEL_15:
    char v18 = v34;
    uint64_t v34 = 0;
    if (v18) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, a2);
    }
    goto LABEL_17;
  }
  do
  {
    IPC::Decoder::decode<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>>(a1, (uint64_t)&v34);
    if (!v36)
    {
LABEL_30:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 16) = 0;
      return WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
    }
    if (HIDWORD(v38) == v38)
    {
      unint64_t v21 = WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v34);
      int v22 = HIDWORD(v38) + 1;
      uint64_t v23 = v37 + 16 * HIDWORD(v38);
      uint64_t v24 = *(void *)v21;
      *(void *)unint64_t v21 = 0;
      *(void *)uint64_t v23 = v24;
      *(unsigned char *)(v23 + 8) = *(unsigned char *)(v21 + 8);
      HIDWORD(v38) = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    else
    {
      int v25 = HIDWORD(v38) + 1;
      uint64_t v26 = v37 + 16 * HIDWORD(v38);
      uint64_t v27 = v34;
      uint64_t v34 = 0;
      *(void *)uint64_t v26 = v27;
      *(unsigned char *)(v26 + 8) = v35;
      HIDWORD(v38) = v25;
    }
    unsigned int v28 = v34;
    uint64_t v34 = 0;
    if (v28) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, a2);
    }
LABEL_28:
    --v10;
  }
  while (v10);
  WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v37, HIDWORD(v38));
  *(void *)a3 = v37;
  uint64_t v33 = v38;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  *(void *)(a3 + 8) = v33;
LABEL_21:
  *(unsigned char *)(a3 + 16) = 1;
  return WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
}

void IPC::Decoder::decode<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      unint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v7);
  if (v8)
  {
    unsigned __int16 v4 = IPC::Decoder::decode<WebCore::CDMKeyStatus>((uint64_t *)a1);
    if (v4 >= 0x100u)
    {
      if (v8)
      {
        *(void *)a2 = v7;
        *(unsigned char *)(a2 + 8) = v4;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      if (v8)
      {
        uint64_t v6 = v7;
        unint64_t v7 = 0;
        if (v6) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

uint64_t IPC::Decoder::decode<WebCore::CDMKeyStatus>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      int v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 7)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

unsigned int *WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v3 = result;
    if (result[3] > a2) {
      uint64_t result = WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (void *)a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        uint64_t result = (unsigned int *)WTF::fastRealloc(v4, (void *)(16 * a2));
        *(void *)unint64_t v3 = result;
        return result;
      }
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = v3[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        uint64_t result = (unsigned int *)memcpy(result, v4, 16 * v5);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = result;
  unint64_t v4 = result[3];
  if ((void *)v4 != a2)
  {
    uint64_t v5 = (unsigned int **)(*(void *)result + 16 * (void)a2);
    uint64_t v6 = 16 * v4 - 16 * (void)a2;
    do
    {
      uint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(unsigned int ***)a1;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *v4;
      *unint64_t v4 = 0;
      if (v6) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF::StringImpl *WebKit::RemoteCDMInstanceSessionProxy::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, atomic_uchar *volatile **a3)
{
  unint64_t v4 = a3;
  uint64_t v6 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2E8:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v63);
      if ((_BYTE)v64)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
        if (!(_BYTE)v7) {
          goto LABEL_35;
        }
        char v69 = this;
        unint64_t v4 = &v70;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, a2);
        uint64_t v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v8 = &unk_1EE9BA198;
        *((void *)v8 + 1) = v69;
        uint64_t v9 = v70;
        uint64_t v70 = 0;
        *((void *)v8 + 2) = v9;
        long long v67 = v8;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v70);
        if ((_BYTE)v64)
        {
          WebKit::RemoteCDMInstanceSessionProxy::closeSession((uint64_t)v6, (uint64_t)&v63, (uint64_t *)&v67);
          this = v67;
          long long v67 = 0;
          if (this) {
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
          }
          goto LABEL_35;
        }
        goto LABEL_110;
      }
      return this;
    case 0x2E9:
      unsigned __int16 v28 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a3);
      if (v28 < 0x100u) {
        goto LABEL_58;
      }
      unsigned __int8 v29 = v28;
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v4, (uint64_t)&v69);
      if (!(_BYTE)v70) {
        goto LABEL_58;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v4, (uint64_t)&v63);
      int v15 = v70;
      if (!(_BYTE)v64) {
        goto LABEL_40;
      }
      if (!(_BYTE)v70) {
        goto LABEL_110;
      }
      unint64_t v30 = v69;
      uint64_t v31 = v63;
      this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
      if (!(_BYTE)v7)
      {
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(v31, v7);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
        goto LABEL_51;
      }
      char v63 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, a2);
      uint64_t v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v32 = &unk_1EE9BA170;
      *((void *)v32 + 1) = v63;
      uint64_t v33 = v64;
      uint64_t v64 = 0;
      *((void *)v32 + 2) = v33;
      long long v67 = v32;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v64);
      char v63 = v30;
      char v69 = v31;
      WebKit::RemoteCDMInstanceSessionProxy::loadSession((uint64_t)v6, v29, (uint64_t)&v63, (uint64_t)&v69, (uint64_t *)&v67);
      char v35 = v69;
      char v69 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v34);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      BOOL v54 = v63;
      char v63 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v34);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
      this = v67;
      long long v67 = 0;
      if (this) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
      }
      return this;
    case 0x2EA:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v69);
      if (!(_BYTE)v70) {
        goto LABEL_58;
      }
      unsigned __int16 v13 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)v4);
      if (v13 < 0x100u)
      {
        int v15 = v70;
LABEL_40:
        if (!v15) {
          goto LABEL_58;
        }
        int v40 = v69;
        char v69 = 0;
        if (!v40) {
          goto LABEL_58;
        }
        goto LABEL_42;
      }
      if (!(_BYTE)v70) {
        goto LABEL_110;
      }
      unsigned __int8 v41 = v13;
      unint64_t v30 = v69;
      char v63 = v69;
      LOBYTE(v64) = v13;
      LOBYTE(v65) = 1;
      this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
      if (!(_BYTE)v7) {
        goto LABEL_50;
      }
      char v69 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, a2);
      uint64_t v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v42 = &unk_1EE9BA1C0;
      *((void *)v42 + 1) = v69;
      uint64_t v43 = v70;
      uint64_t v70 = 0;
      *((void *)v42 + 2) = v43;
      long long v67 = v42;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v70);
      WebKit::RemoteCDMInstanceSessionProxy::removeSessionData((uint64_t)v6, (uint64_t)&v63, v41, (uint64_t *)&v67);
      this = v67;
      long long v67 = 0;
      if (this) {
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
      }
      if ((_BYTE)v65)
      {
        unint64_t v30 = v63;
LABEL_50:
        char v63 = 0;
LABEL_51:
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            this = v30;
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
          }
          *(_DWORD *)v30 -= 2;
        }
      }
      return this;
    case 0x2EB:
      unsigned __int16 v16 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a3);
      if (v16 < 0x100u) {
        goto LABEL_58;
      }
      uint64_t v10 = v4[1];
      char v17 = *v4;
      unint64_t v18 = (char *)v4[2] - (char *)*v4;
      if ((unint64_t)v10 <= v18) {
        goto LABEL_111;
      }
      uint64_t v19 = (unsigned __int8 *)v17 + v18;
      v4[2] = (atomic_uchar *volatile *)(v19 + 1);
      if (!v17)
      {
        unsigned __int8 v55 = v10;
        long long v56 = 0;
        goto LABEL_112;
      }
      unsigned int v20 = *v19;
      if (v20 >= 2) {
        goto LABEL_113;
      }
      unsigned __int8 v21 = v16;
      IPC::Decoder::decode<WTF::AtomString>((IPC::Decoder *)v4, &v67);
      if (!v68) {
        goto LABEL_58;
      }
      IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((IPC::Decoder *)v4, &v69);
      if (!(_BYTE)v70)
      {
        if (v68)
        {
          int v40 = v67;
          long long v67 = 0;
          if (v40)
          {
LABEL_42:
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v14);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
        }
        goto LABEL_58;
      }
      if (!v68) {
        goto LABEL_110;
      }
      LOBYTE(v63) = v21;
      BYTE1(v63) = v20 != 0;
      int v22 = v67;
      uint64_t v23 = (unsigned int *)v69;
      uint64_t v64 = (atomic_uchar *volatile *)v67;
      char v65 = v69;
      char v66 = 1;
      uint64_t v24 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
      if (!(_BYTE)v7) {
        goto LABEL_103;
      }
      char v69 = v24;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, a2);
      int v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)int v25 = &unk_1EE9BA120;
      *((void *)v25 + 1) = v69;
      uint64_t v26 = v70;
      uint64_t v70 = 0;
      *((void *)v25 + 2) = v26;
      long long v67 = v25;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v70);
      uint64_t v64 = 0;
      char v69 = v22;
      WebKit::RemoteCDMInstanceSessionProxy::requestLicense((uint64_t)v6, v21, v20 != 0, (uint64_t)&v69, (unsigned int **)&v65, (uint64_t *)&v67);
      uint64_t v27 = v69;
      char v69 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v7);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      this = v67;
      long long v67 = 0;
      if (this) {
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
      }
      if (v66)
      {
        uint64_t v23 = (unsigned int *)v65;
LABEL_103:
        char v65 = 0;
        if (v23) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v7);
        }
        this = (WTF::StringImpl *)v64;
        uint64_t v64 = 0;
        if (this) {
          goto LABEL_86;
        }
      }
      return this;
    case 0x2EC:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)a3);
      if (v11)
      {
        int v12 = *(uint64_t (**)(void))(**((void **)v6 + 5) + 16);
        return (WTF::StringImpl *)v12();
      }
      return this;
    case 0x2ED:
      this = IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v63);
      if ((_BYTE)v64)
      {
        this = (WTF::StringImpl *)WebKit::RemoteCDMInstanceSessionProxy::storeRecordOfKeyUsage(v6, (const WTF::String *)&v63);
LABEL_35:
        if ((_BYTE)v64) {
          goto LABEL_85;
        }
      }
      return this;
    case 0x2EE:
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v67);
      if (!v68) {
        goto LABEL_75;
      }
      unsigned __int16 v36 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)v4);
      unsigned __int8 v38 = v36;
      if (v36 > 0xFFu)
      {
        IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((IPC::Decoder *)v4, &v69);
        if ((_BYTE)v70)
        {
          if (!v68)
          {
LABEL_110:
            __break(1u);
LABEL_111:
            unsigned __int8 v55 = 0;
            long long v56 = 0;
            *unint64_t v4 = 0;
            v4[1] = 0;
            uint64_t v57 = v4[3];
            if (v57)
            {
              if (v10)
              {
                (*((void (**)(atomic_uchar *volatile *))*v57 + 2))(v57);
                long long v56 = *v4;
                unsigned __int8 v55 = v4[1];
              }
              else
              {
                unsigned __int8 v55 = 0;
                long long v56 = 0;
              }
            }
LABEL_112:
            uint64_t v10 = 0;
            char v17 = 0;
            *unint64_t v4 = 0;
            v4[1] = 0;
            uint64_t v58 = v4[3];
            if (v58)
            {
              if (v55)
              {
                (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *, atomic_uchar *volatile *))*v58
                 + 2))(v58, v56, v55);
                char v17 = *v4;
                uint64_t v10 = v4[1];
              }
              else
              {
                uint64_t v10 = 0;
                char v17 = 0;
              }
            }
LABEL_113:
            *unint64_t v4 = 0;
            v4[1] = 0;
            uint64_t v59 = v4[3];
            if (v59)
            {
              if (v10)
              {
                (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v59 + 2))(v59, v17);
                uint64_t v60 = v4[3];
                uint64_t v61 = *v4;
                __int16 v62 = v4[1];
                *unint64_t v4 = 0;
                v4[1] = 0;
                if (v60)
                {
                  if (v62) {
                    (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v60 + 2))(v60, v61);
                  }
                }
              }
            }
LABEL_58:
            uint64_t v45 = v4[1];
            *unint64_t v4 = 0;
            v4[1] = 0;
            this = (WTF::StringImpl *)v4[3];
            if (this) {
              BOOL v46 = v45 == 0;
            }
            else {
              BOOL v46 = 1;
            }
            if (v46) {
              return this;
            }
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 16))(this);
          }
          uint64_t v44 = v67;
          long long v67 = 0;
          char v63 = v44;
          LOBYTE(v64) = v38;
          uint64_t v3 = (unsigned int *)v69;
          char v65 = v69;
          int v39 = 1;
        }
        else
        {
          int v39 = 0;
          LOBYTE(v63) = 0;
        }
        char v66 = v39;
      }
      else
      {
        int v39 = 0;
        LOBYTE(v63) = 0;
        char v66 = 0;
      }
      if (!v68) {
        goto LABEL_69;
      }
      uint64_t v47 = v67;
      long long v67 = 0;
      if (!v47) {
        goto LABEL_69;
      }
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::destroy(v47, v37);
        if (v39) {
          goto LABEL_70;
        }
        goto LABEL_75;
      }
      *(_DWORD *)v47 -= 2;
LABEL_69:
      if (!v39)
      {
LABEL_75:
        BOOL v53 = v4[1];
        *unint64_t v4 = 0;
        v4[1] = 0;
        this = (WTF::StringImpl *)v4[3];
        if (!this || !v53) {
          return this;
        }
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 16))(this);
      }
LABEL_70:
      uint64_t v48 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
      if ((_BYTE)v7)
      {
        char v69 = v48;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v70, a2);
        uint64_t v49 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v49 = &unk_1EE9BA148;
        *((void *)v49 + 1) = v69;
        __int16 v50 = v70;
        uint64_t v70 = 0;
        *((void *)v49 + 2) = v50;
        long long v67 = v49;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v70);
        long long v51 = v63;
        char v63 = 0;
        char v69 = v51;
        WebKit::RemoteCDMInstanceSessionProxy::updateLicense((uint64_t)v6, (uint64_t)&v69, v38, &v65, (uint64_t *)&v67);
        uint64_t v52 = v69;
        char v69 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2) {
            WTF::StringImpl::destroy(v52, v7);
          }
          else {
            *(_DWORD *)v52 -= 2;
          }
        }
        this = v67;
        long long v67 = 0;
        if (this) {
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
        }
        if (!v66) {
          return this;
        }
        uint64_t v3 = (unsigned int *)v65;
      }
      char v65 = 0;
      if (v3) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v7);
      }
LABEL_85:
      this = v63;
      char v63 = 0;
      if (this)
      {
LABEL_86:
        if (*(_DWORD *)this == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        }
        else {
          *(_DWORD *)this -= 2;
        }
      }
      return this;
    default:
      return this;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy14RequestLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS9_22CDMKeyGroupingStrategyENS_10AtomStringEONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_RKNS_6StringEbbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SO_bbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy14RequestLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS9_22CDMKeyGroupingStrategyENS_10AtomStringEONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_RKNS_6StringEbbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SO_bbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy14RequestLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS9_22CDMKeyGroupingStrategyENS_10AtomStringEONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_RKNS_6StringEbbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SO_bbEE4callESK_SO_bb(uint64_t a1, atomic_uint **a2, uint64_t *a3, char a4, char a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v11 = 3147;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  unsigned int v20 = v11;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v11, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  int v12 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (!v13 || (*int v12 = a4, v14 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1), !v15))
  {
    __break(0xC471u);
    JUMPOUT(0x198A051E0);
  }
  unsigned char *v14 = a5;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  uint64_t result = v20;
  unsigned int v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy13UpdateLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvNS_6StringEN7WebCore14CDMSessionTypeEONS_6RefPtrINSA_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEONS_17CompletionHandlerIFvbONSt3__18optionalINS_6VectorINSL_4pairINS_3RefISD_SF_SH_EENSA_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSM_IdEEONSM_INSO_INSA_14CDMMessageTypeESQ_EEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSX_SZ_S13_bEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy13UpdateLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvNS_6StringEN7WebCore14CDMSessionTypeEONS_6RefPtrINSA_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEONS_17CompletionHandlerIFvbONSt3__18optionalINS_6VectorINSL_4pairINS_3RefISD_SF_SH_EENSA_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSM_IdEEONSM_INSO_INSA_14CDMMessageTypeESQ_EEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSX_SZ_S13_bEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy13UpdateLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvNS_6StringEN7WebCore14CDMSessionTypeEONS_6RefPtrINSA_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEONS_17CompletionHandlerIFvbONSt3__18optionalINS_6VectorINSL_4pairINS_3RefISD_SF_SH_EENSA_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSM_IdEEONSM_INSO_INSA_14CDMMessageTypeESQ_EEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSX_SZ_S13_bEE4callEbSX_SZ_S13_b(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 3148;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  int v22 = v13;
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v15
    || (unsigned char *v14 = a2,
        IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v13, a3), IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v13, a4), IPC::ArgumentCoder<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,void>::encode<IPC::Encoder,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>(v13, a5), unsigned __int16 v16 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1), !v17))
  {
    __break(0xC471u);
    JUMPOUT(0x198A053CCLL);
  }
  unsigned char *v16 = a6;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v22, 0, 0);
  uint64_t result = v22;
  int v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A05490);
    }
    unsigned char *result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      unint64_t v7 = a1;
      uint64_t v8 = (uint64_t *)a2;
    }
    else
    {
      unint64_t v7 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return (unsigned char *)IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, v8);
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A054B0);
    }
    unsigned char *result = 0;
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, *(atomic_uint **)v6);
      unint64_t result = IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,void>::encode<IPC::Encoder,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t result = (unsigned int *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A05620);
    }
    *(unsigned char *)unint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
      uint64_t v7 = *(atomic_uint **)(a2 + 8);
      return IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, v7);
    }
    else
    {
      uint64_t v8 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned int *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy11LoadSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS_6StringESB_ONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSD_4pairINS_3RefINS9_12SharedBufferENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEENS9_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSE_IdEEONSE_INSG_INS9_14CDMMessageTypeESN_EEEEbNS9_29CDMInstanceSessionLoadFailureEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_S10_bS11_EED1Ev(v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A05640);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy11LoadSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS_6StringESB_ONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSD_4pairINS_3RefINS9_12SharedBufferENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEENS9_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSE_IdEEONSE_INSG_INS9_14CDMMessageTypeESN_EEEEbNS9_29CDMInstanceSessionLoadFailureEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_S10_bS11_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy11LoadSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS_6StringESB_ONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSD_4pairINS_3RefINS9_12SharedBufferENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEENS9_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSE_IdEEONSE_INSG_INS9_14CDMMessageTypeESN_EEEEbNS9_29CDMInstanceSessionLoadFailureEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_S10_bS11_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy11LoadSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS_6StringESB_ONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSD_4pairINS_3RefINS9_12SharedBufferENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEENS9_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSE_IdEEONSE_INSG_INS9_14CDMMessageTypeESN_EEEEbNS9_29CDMInstanceSessionLoadFailureEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_S10_bS11_EE4callESU_SW_S10_bS11_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 3145;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  int v22 = v13;
  IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v13, a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(v13, a3);
  IPC::ArgumentCoder<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,void>::encode<IPC::Encoder,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>(v13, a4);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v15 || (unsigned char *v14 = a5, v16 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1), !v17))
  {
    __break(0xC471u);
    JUMPOUT(0x198A05810);
  }
  unsigned char *v16 = a6;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v22, 0, 0);
  unint64_t result = v22;
  int v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy12CloseSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy12CloseSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA198;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy12CloseSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3144;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy17RemoveSessionDataEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEN7WebCore14CDMSessionTypeEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_3RefINSC_12SharedBufferENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENSC_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_6RefPtrISJ_SL_SN_EEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SX_bEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA1C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy17RemoveSessionDataEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEN7WebCore14CDMSessionTypeEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_3RefINSC_12SharedBufferENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENSC_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_6RefPtrISJ_SL_SN_EEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SX_bEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA1C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy17RemoveSessionDataEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEN7WebCore14CDMSessionTypeEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_3RefINSC_12SharedBufferENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENSC_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_6RefPtrISJ_SL_SN_EEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SX_bEE4callESU_SX_b(uint64_t a1, uint64_t *a2, atomic_uint **a3, char a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 3146;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  unsigned __int16 v16 = v9;
  IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v9, a2);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v9, a3);
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
  if (v11)
  {
    *uint64_t v10 = a4;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
    uint64_t result = (uint64_t)v16;
    unsigned __int16 v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
      return WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteCDMProxy::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 757)
  {
    this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
    if (v25)
    {
      *(void *)(v4 + 48) = this;
      uint64_t v26 = *(void *)(v4 + 16);
      if (v26)
      {
        if (*(void *)(v26 + 8))
        {
          uint64_t v27 = *(uint64_t (**)(void))(**(void **)(v4 + 24) + 16);
          return (WTF::StringImpl *)v27();
        }
      }
    }
    return this;
  }
  if (v5 == 756)
  {
    uint64_t v24 = *(uint64_t (**)(void))(**((void **)this + 3) + 104);
    return (WTF::StringImpl *)v24();
  }
  if (v5 != 755) {
    return this;
  }
  IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>(a3, (uint64_t)&v46);
  if (!v55) {
    goto LABEL_32;
  }
  unint64_t v8 = *((void *)v3 + 1);
  uint64_t v7 = *(char **)v3;
  unint64_t v9 = *((void *)v3 + 2) - *(void *)v3;
  if (v8 <= v9)
  {
    unint64_t v28 = 0;
    unsigned __int8 v29 = 0;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v30 = *((void *)v3 + 3);
    if (v30)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
        unsigned __int8 v29 = *(char **)v3;
        unint64_t v28 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v28 = 0;
        unsigned __int8 v29 = 0;
      }
    }
    goto LABEL_30;
  }
  uint64_t v10 = &v7[v9];
  *((void *)v3 + 2) = v10 + 1;
  if (!v7)
  {
    unint64_t v28 = v8;
    unsigned __int8 v29 = 0;
LABEL_30:
    unint64_t v8 = 0;
    uint64_t v7 = 0;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v31 = *((void *)v3 + 3);
    if (v31)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v31 + 16))(v31, v29, v28);
        uint64_t v7 = *(char **)v3;
        unint64_t v8 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v7 = 0;
      }
    }
LABEL_31:
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    unsigned int v20 = (atomic_uchar *volatile **)*((void *)v3 + 3);
    if (v20)
    {
LABEL_37:
      if (v8)
      {
        (*((void (**)(atomic_uchar *volatile **, char *))*v20 + 2))(v20, v7);
        uint64_t v34 = *((void *)v3 + 3);
        uint64_t v7 = *(char **)v3;
        uint64_t v35 = *((void *)v3 + 1);
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        if (v34)
        {
          if (v35) {
            (*(void (**)(uint64_t, char *))(*(void *)v34 + 16))(v34, v7);
          }
        }
      }
    }
LABEL_32:
    std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v7);
    uint64_t v32 = *(char **)v3;
    uint64_t v33 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    this = (WTF::StringImpl *)*((void *)v3 + 3);
    if (this && v33) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)this + 16))(this, v32);
    }
    return this;
  }
  unsigned int v11 = *v10;
  if (v11 >= 2) {
    goto LABEL_31;
  }
  long long v12 = v46;
  long long v46 = 0uLL;
  *(_OWORD *)uint64_t v37 = v12;
  *(void *)&long long v12 = v47;
  uint64_t v47 = 0;
  uint64_t v38 = v12;
  uint64_t v13 = v48;
  uint64_t v48 = 0;
  v39[0] = v13;
  *(void *)&long long v12 = v49;
  uint64_t v49 = 0;
  v39[1] = v12;
  uint64_t v14 = v50;
  uint64_t v50 = 0;
  v40[0] = v14;
  *(void *)&long long v12 = v51;
  uint64_t v51 = 0;
  v40[1] = v12;
  __int16 v41 = v52;
  uint64_t v15 = v53;
  BOOL v53 = 0;
  uint64_t v42 = v15;
  *(void *)&long long v12 = v54;
  uint64_t v54 = 0;
  uint64_t v43 = v12;
  BOOL v44 = v11 != 0;
  char v45 = 1;
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v46, v7);
  uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
  if (!(_BYTE)v17)
  {
LABEL_14:
    if (v15)
    {
      uint64_t v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v15, v17);
    }
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v17);
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v21);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37[1], v22);
    this = v37[0];
    v37[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v23);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
    return this;
  }
  *(void *)&long long v46 = v16;
  uint64_t v3 = (IPC::Decoder *)((char *)&v46 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v46 + 1, a2);
  unint64_t v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)unint64_t v18 = &unk_1EE9BA1E8;
  *((void *)v18 + 1) = v46;
  uint64_t v19 = *((void *)&v46 + 1);
  *((void *)&v46 + 1) = 0;
  *((void *)v18 + 2) = v19;
  unsigned __int16 v36 = v18;
  unsigned int v20 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v46 + 1);
  if (!v45)
  {
    __break(1u);
    goto LABEL_37;
  }
  WebKit::RemoteCDMProxy::getSupportedConfiguration(v4, (uint64_t)v37, v44, (uint64_t *)&v36);
  this = v36;
  unsigned __int16 v36 = 0;
  if (this) {
    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
  }
  if (v45)
  {
    uint64_t v15 = v42;
    goto LABEL_14;
  }
  return this;
}

BOOL WebKit::RemoteCDMProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4 = *(unsigned __int16 *)(a3 + 50);
  if (v4 == 3631)
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    unsigned int v11 = v6;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v12, a2);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v7 = &unk_1EE9BA210;
    v7[1] = v11;
    unint64_t v8 = v12[0];
    v12[0] = 0;
    void v7[2] = v8;
    uint64_t v13 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v12);
    WebKit::RemoteCDMProxy::createInstance(a1, (uint64_t *)&v13);
    uint64_t v9 = (uint64_t)v13;
    uint64_t v13 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  return v4 == 3631;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14RemoteCDMProxy25GetSupportedConfigurationEN6WebKit14RemoteCDMProxyES8_FvON7WebCore25CDMKeySystemConfigurationENS9_10CDMPrivate18LocalStorageAccessEONS_17CompletionHandlerIFvNSt3__18optionalISA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA1E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14RemoteCDMProxy25GetSupportedConfigurationEN6WebKit14RemoteCDMProxyES8_FvON7WebCore25CDMKeySystemConfigurationENS9_10CDMPrivate18LocalStorageAccessEONS_17CompletionHandlerIFvNSt3__18optionalISA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA1E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14RemoteCDMProxy25GetSupportedConfigurationEN6WebKit14RemoteCDMProxyES8_FvON7WebCore25CDMKeySystemConfigurationENS9_10CDMPrivate18LocalStorageAccessEONS_17CompletionHandlerIFvNSt3__18optionalISA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3149;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 80);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198A06210);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 80))
    {
      uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14RemoteCDMProxy14CreateInstanceEN6WebKit14RemoteCDMProxyES8_FvONS_17CompletionHandlerIFvNS_23ObjectIdentifierGenericINS7_31RemoteCDMInstanceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30RemoteCDMInstanceConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SH_EED1Ev(v12);
    }
    IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198A06230);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14RemoteCDMProxy14CreateInstanceEN6WebKit14RemoteCDMProxyES8_FvONS_17CompletionHandlerIFvNS_23ObjectIdentifierGenericINS7_31RemoteCDMInstanceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30RemoteCDMInstanceConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14RemoteCDMProxy14CreateInstanceEN6WebKit14RemoteCDMProxyES8_FvONS_17CompletionHandlerIFvNS_23ObjectIdentifierGenericINS7_31RemoteCDMInstanceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30RemoteCDMInstanceConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SH_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA210;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14RemoteCDMProxy14CreateInstanceEN6WebKit14RemoteCDMProxyES8_FvONS_17CompletionHandlerIFvNS_23ObjectIdentifierGenericINS7_31RemoteCDMInstanceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS7_30RemoteCDMInstanceConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_SH_EE4callESF_SH_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  int v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a3);
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

void WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdateTimerFired(WebKit::RemoteLayerTreeDrawingArea *this)
{
  *((unsigned char *)this + 360) = 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::setViewExposedRect(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 16);
  *(_OWORD *)(a1 + 144) = v2;
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v3) {
    uint64_t v4 = (WebKit::WebPage *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = WebKit::WebPage::localMainFrameView(v4);
  if (result)
  {
    uint64_t v6 = (_DWORD *)result;
    ++*(_DWORD *)(result + 8);
    uint64_t result = WebCore::LocalFrameView::setViewExposedRect();
    if (v6[2] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  return result;
}

void sub_198A06434(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Timer::~Timer(WebCore::Timer *this)
{
  *(void *)this = &unk_1EE9BA5F0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BA5F0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  WebCore::TimerBase::~TimerBase(this);

  WTF::fastFree(v3, v4);
}

_DWORD **WTF::Ref<WebKit::RemoteLayerTreeContext,WTF::RawPtrTraits<WebKit::RemoteLayerTreeContext>,WTF::DefaultRefDerefTraits<WebKit::RemoteLayerTreeContext>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

void WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea(WebKit::RemoteLayerTreeDrawingArea *this)
{
  *(void *)this = &unk_1EE9BA238;
  *((void *)this + 2) = &unk_1EE9BA418;
  *((void *)this + 9) = &unk_1EE9BA440;
  uint64_t v2 = (WebKit::RemoteLayerTreeDrawingArea *)((char *)this + 288);
  *((void *)this + 36) = &unk_1EE9BA5F0;
  uint64_t v3 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase(v2);
  int v5 = (WTF *)*((void *)this + 32);
  if (v5)
  {
    *((void *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t v6 = (atomic_uchar ***)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(v6, v4);
  }
  uint64_t v7 = *((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
  }
  *((void *)this + 21) = &unk_1EE9BA5F0;
  uint64_t v8 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  WebCore::TimerBase::~TimerBase((WebKit::RemoteLayerTreeDrawingArea *)((char *)this + 168));
  WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 22, v9);
  uint64_t v10 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v10)
  {
    if (v10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
    }
    else {
      --v10[2];
    }
  }

  WebKit::DrawingArea::~DrawingArea(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea(WebKit::RemoteLayerTreeDrawingArea *this)
{
}

{
  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea((WebKit::RemoteLayerTreeDrawingArea *)((char *)this - 72));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea((WebKit::RemoteLayerTreeDrawingArea *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea((WebKit::RemoteLayerTreeDrawingArea *)((char *)this - 72));

  WTF::fastFree(v1, v2);
}

void WebKit::RemoteLayerTreeDrawingArea::createDisplayRefreshMonitor(void *a1@<X8>)
{
  *a1 = 0;
}

void non-virtual thunk to'WebKit::RemoteLayerTreeDrawingArea::createDisplayRefreshMonitor(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::attachViewOverlayGraphicsLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = WebKit::RemoteLayerTreeDrawingArea::rootLayerInfoWithFrameIdentifier(a1, a2, a3);
  if (result)
  {
    uint64_t v7 = result;
    if (a4) {
      ++*(_DWORD *)(a4 + 8);
    }
    uint64_t v8 = *(_DWORD **)(result + 16);
    *(void *)(v7 + 16) = a4;
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 16))(v8);
      }
      else {
        --v8[2];
      }
    }
    uint64_t v9 = *(void *)(a1 + 88);
    unsigned int v10 = *(_DWORD *)(a1 + 100);
    return WebKit::RemoteLayerTreeDrawingArea::updateRootLayers(v9, v10);
  }
  return result;
}

char *WebKit::RemoteLayerTreeDrawingArea::removeRootFrame(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 11);
  unsigned int v5 = *((_DWORD *)result + 25);
  unint64_t v6 = v4 + 40 * v5;
  if (v5)
  {
    int v9 = 0;
    uint64_t v10 = *((void *)result + 11);
    unsigned int v11 = (char *)(v4 + 40 * v5);
    unint64_t v12 = (unint64_t)v11;
    do
    {
      if (*(void *)(v4 + 24) == a2 && *(void *)(v4 + 32) == a3)
      {
        unint64_t v14 = v4;
        if (v12 != *((void *)v3 + 11) + 40 * *((unsigned int *)v3 + 25))
        {
          if ((char *)v4 == v11)
          {
            unint64_t v14 = v12;
          }
          else
          {
            WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::moveOverlapping(v11, (char *)v4, v12);
            unint64_t v14 = v12 + v10 - (void)v11;
          }
        }
        uint64_t v15 = *(_DWORD **)(v4 + 16);
        *(void *)(v4 + 16) = 0;
        if (v15)
        {
          if (v15[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v15 + 16))(v15);
          }
          else {
            --v15[2];
          }
        }
        uint64_t v16 = *(_DWORD **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v16)
        {
          if (v16[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v16 + 16))(v16);
          }
          else {
            --v16[2];
          }
        }
        uint64_t result = *(char **)v4;
        *(void *)unint64_t v4 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1) {
            uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 16))(result);
          }
          else {
            --*((_DWORD *)result + 2);
          }
        }
        unsigned int v11 = (char *)(v4 + 40);
        ++v9;
        unint64_t v12 = v14;
      }
      else
      {
        unint64_t v14 = v12;
      }
      v4 += 40;
      v10 += 40;
    }
    while (v4 < v6);
    unint64_t v4 = *((void *)v3 + 11);
    unsigned int v5 = *((_DWORD *)v3 + 25);
    unint64_t v6 = v14;
  }
  else
  {
    int v9 = 0;
    unsigned int v11 = (char *)*((void *)result + 11);
  }
  uint64_t v17 = (char *)(v4 + 40 * v5);
  if (v11 != v17)
  {
    uint64_t result = WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::moveOverlapping(v11, v17, v6);
    unsigned int v5 = *((_DWORD *)v3 + 25);
  }
  *((_DWORD *)v3 + 25) = v5 - v9;
  return result;
}

void WebKit::RemoteLayerTreeDrawingArea::updateGeometry(WebKit::RemoteLayerTreeDrawingArea *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v12 = *a2;
  uint64_t v7 = *(void *)(*((void *)a1 + 5) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  if (!*(_DWORD *)(v8 + 888) || *(unsigned char *)(v8 + 904) || !*(void *)(v8 + 896)) {
    WebKit::WebPage::setSize(v8, (const WebCore::IntSize *)&v12);
  }
  int v9 = (_DWORD *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v8);
  uint64_t v10 = v9;
  if (v9)
  {
    ++v9[2];
    if (*(unsigned char *)(v8 + 904)) {
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight((WebCore::LocalFrameView *)v9);
    }
  }
  WebCore::Page::layoutIfNeeded();
  WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(a1);
  WTF::CompletionHandler<void ()(void)>::operator()(a5);
  if (v10)
  {
    if (v10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      if (!v7) {
        return;
      }
      goto LABEL_14;
    }
    --v10[2];
  }
  if (!v7) {
    return;
  }
LABEL_14:
  unsigned int v11 = *(const void **)(v7 - 8);

  CFRelease(v11);
}

void sub_198A06BE8(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 - 8));
  }
  _Unwind_Resume(exception_object);
}

double WebKit::RemoteLayerTreeDrawingArea::startRenderingUpdateTimer(WebKit::RemoteLayerTreeDrawingArea *this)
{
  if ((*((void *)this + 25) & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)((*((void *)this + 25) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

void WebKit::RemoteLayerTreeDrawingArea::updateRenderingWithForcedRepaint(WebKit::RemoteLayerTreeDrawingArea *this)
{
  if (!*((unsigned char *)this + 224))
  {
    uint64_t v2 = *(void *)(*((void *)this + 5) + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    WebCore::Page::forceRepaintAllFrames(*(WebCore::Page **)(v3 + 48));
    WebKit::RemoteLayerTreeDrawingArea::updateRendering(this);
  }
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::updateRenderingWithForcedRepaintAsync(WebKit::RemoteLayerTreeDrawingArea *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::RemoteLayerTreeDrawingArea::updateRenderingWithForcedRepaint(a1);

  return WTF::CompletionHandler<void ()(void)>::operator()(a3);
}

uint64_t *WebKit::RemoteLayerTreeDrawingArea::acceleratedAnimationDidStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return WebKit::RemoteLayerTreeContext::animationDidStart(*(void *)(a1 + 80), a2, a3, a4, a5);
}

uint64_t *WebKit::RemoteLayerTreeDrawingArea::acceleratedAnimationDidEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteLayerTreeContext::animationDidEnd(*(void *)(a1 + 80), a2, a3, a4);
}

float WebKit::RemoteLayerTreeDrawingArea::exposedContentRect(WebKit::RemoteLayerTreeDrawingArea *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = (WebKit::WebPage *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (_DWORD *)WebKit::WebPage::localMainFrameView(v2);
  if (!v3) {
    return 0.0;
  }
  unint64_t v4 = v3;
  ++v3[2];
  WebCore::ScrollView::exposedContentRect((WebCore::ScrollView *)v3);
  float v6 = v5;
  if (v4[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[2];
  }
  return v6;
}

void sub_198A06DEC(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::setNextRenderingUpdateRequiresSynchronousImageDecoding(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 80) + 208) = 1;
  return this;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1::~$_1(uint64_t a1, void *a2)
{
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v3);
  float v5 = *(atomic_uchar ****)a1;
  *(void *)a1 = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(v5, v4);
  }
  return a1;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::tryMarkLayersVolatile(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 88) + 48))();
}

double WebKit::RemoteLayerTreeDrawingArea::dispatchAfterEnsuringDrawing(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  *(unsigned char *)(*(void *)(a1 + 80) + 208) = 1;
  uint64_t v3 = (void *)(a1 + 256);
  uint64_t v4 = *(unsigned int *)(a1 + 268);
  if (v4 == *(_DWORD *)(a1 + 264)) {
    *(void *)(*(void *)(a1 + 256) + 8 * *(unsigned int *)(a1 + 268)) = *(void *)WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v6);
  }
  else {
    *(void *)(*v3 + 8 * v4) = a2;
  }
  ++*(_DWORD *)(a1 + 268);
  return WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate((WebKit::RemoteLayerTreeDrawingArea *)a1);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::adoptLayersFromDrawingArea(WebKit::RemoteLayerTreeDrawingArea *this, WebKit::RemoteLayerTreeContext **a2)
{
  if (*((unsigned __int8 *)a2 + 24) == *((unsigned __int8 *)this + 24)) {
    return WebKit::RemoteLayerTreeContext::adoptLayersFromContext(*((void *)this + 10), a2[10]);
  }
  uint64_t result = 544;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::layerTreeStateIsFrozen(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return *((unsigned __int8 *)this + 224);
}

void WebKit::DrawingArea::displayColorSpace(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::addMilestonesToDispatch(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 280) |= a2;
  return 1;
}

uint64_t WebCore::GraphicsLayerClient::getCurrentTransform()
{
  return 0;
}

float WebCore::GraphicsLayerClient::pageScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 1.0;
}

double WebCore::GraphicsLayerClient::zoomedOutPageScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 0.0;
}

float WebCore::GraphicsLayerClient::contentsScaleMultiplierForNewTiles(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 1.0;
}

uint64_t WebCore::GraphicsLayerClient::paintsOpaquelyAtNonIntegralScales(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::isTrackingRepaints(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldSkipLayerInDump()
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldDumpPropertyForLayer()
{
  return 1;
}

uint64_t WebCore::GraphicsLayerClient::shouldAggressivelyRetainTiles(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldTemporarilyRetainTileCohorts(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 1;
}

uint64_t WebCore::GraphicsLayerClient::useGiantTiles(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::cssUnprefixedBackdropFilterEnabled(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::needsIOSDumpRenderTreeMainFrameRenderViewLayerIsAlwaysOpaqueHack(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

double WebCore::GraphicsLayerClient::transformMatrixForProperty@<D0>(_OWORD *a1@<X8>)
{
  a1[4] = xmmword_1994F5FC8;
  a1[5] = unk_1994F5FD8;
  a1[6] = xmmword_1994F5FE8;
  a1[7] = unk_1994F5FF8;
  *a1 = xmmword_1994F5F88;
  a1[1] = unk_1994F5F98;
  double result = 0.0;
  a1[2] = xmmword_1994F5FA8;
  a1[3] = unk_1994F5FB8;
  return result;
}

uint64_t WebCore::GraphicsLayerClient::layerContainsBitmapOnly(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::layerNeedsPlatformContext(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

unsigned int *WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    float v5 = (_DWORD **)(*(void *)a1 + 16);
    do
    {
      uint64_t v6 = *v5;
      *float v5 = 0;
      if (v6)
      {
        if (v6[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v6 + 16))(v6);
        }
        else {
          --v6[2];
        }
      }
      uint64_t v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (v7[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v7 + 16))(v7);
        }
        else {
          --v7[2];
        }
      }
      uint64_t v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (v8[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v8 + 16))(v8);
        }
        else {
          --v8[2];
        }
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  int v9 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v9 != 0)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

__n128 WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>(_DWORD *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 40 * a1[3];
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v7;
  __n128 result = *(__n128 *)(v3 + 24);
  *(__n128 *)(v4 + 24) = result;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

_DWORD *WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(_DWORD *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    unsigned int v4 = result[3];
    if (a2 < 2)
    {
      uint64_t v6 = (uint64_t)(result + 4);
      *(void *)__n128 result = result + 4;
      result[2] = 1;
    }
    else
    {
      if (a2 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x198A0746CLL);
      }
      int v5 = 40 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(void *)uint64_t v2 = v6;
    }
    __n128 result = WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::move(v3, (_DWORD *)v3 + 10 * v4, v6);
    if (v2 + 4 != (_DWORD *)v3 && v3 != 0)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        v2[2] = 0;
      }
      return (_DWORD *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

_DWORD *WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::move(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      uint64_t v6 = *(_DWORD **)v5;
      *(void *)int v5 = 0;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v7;
      uint64_t v8 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v5 + 6);
      unint64_t v9 = (_DWORD *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (v9)
      {
        if (v9[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v9 + 16))(v9);
        }
        else {
          --v9[2];
        }
      }
      unint64_t v10 = (_DWORD *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v10)
      {
        if (v10[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
        }
        else {
          --v10[2];
        }
      }
      __n128 result = *(_DWORD **)v5;
      *(void *)int v5 = 0;
      if (result)
      {
        if (result[2] == 1) {
          __n128 result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
        }
        else {
          --result[2];
        }
      }
      v5 += 10;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::moveOverlapping(char *result, char *a2, unint64_t a3)
{
  unint64_t v3 = a2;
  unsigned int v4 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      int v5 = (_OWORD *)(a3 + 40 * ((a2 - result) / 40) - 16);
      uint64_t v6 = a2;
      do
      {
        uint64_t v7 = *((void *)v6 - 5);
        v6 -= 40;
        *(void *)uint64_t v6 = 0;
        *((void *)v5 - 3) = v7;
        uint64_t v8 = *((void *)v6 + 1);
        *((void *)v6 + 1) = 0;
        *((void *)v5 - 2) = v8;
        uint64_t v9 = *((void *)v6 + 2);
        *((void *)v6 + 2) = 0;
        *((void *)v5 - 1) = v9;
        *int v5 = *(_OWORD *)(v6 + 24);
        unint64_t v10 = (_DWORD *)*((void *)v6 + 2);
        *((void *)v6 + 2) = 0;
        if (v10)
        {
          if (v10[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v10 + 16))(v10);
          }
          else {
            --v10[2];
          }
        }
        unsigned int v11 = (_DWORD *)*((void *)v3 - 4);
        *((void *)v3 - 4) = 0;
        if (v11)
        {
          if (v11[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v11 + 16))(v11);
          }
          else {
            --v11[2];
          }
        }
        __n128 result = (char *)*((void *)v3 - 5);
        *((void *)v3 - 5) = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1) {
            __n128 result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 16))(result);
          }
          else {
            --*((_DWORD *)result + 2);
          }
        }
        int v5 = (_OWORD *)((char *)v5 - 40);
        unint64_t v3 = v6;
      }
      while (v6 != v4);
    }
  }
  else
  {
    return (char *)WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::move(result, a2, a3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  unint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BA5C8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

__n128 WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(*(void *)a1 + 832 * *(unsigned int *)(a1 + 12), v3);
  uint64_t v5 = *(void *)(v3 + 800);
  *(void *)(v3 + 800) = 0;
  *(void *)(v4 + 800) = v5;
  __n128 result = *(__n128 *)(v3 + 808);
  *(void *)(v4 + 824) = *(void *)(v3 + 824);
  *(__n128 *)(v4 + 808) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 832 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x4EC4ED)
    {
      __break(0xC471u);
      JUMPOUT(0x198A07A14);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 832 * *(unsigned int *)(a1 + 12);
    int v5 = 832 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(832 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFC0) / 0x340;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(a3, v5);
      uint64_t v7 = *(void *)(v5 + 800);
      *(void *)(v5 + 800) = 0;
      *(void *)(a3 + 800) = v7;
      long long v8 = *(_OWORD *)(v5 + 808);
      *(void *)(a3 + 824) = *(void *)(v5 + 824);
      *(_OWORD *)(a3 + 808) = v8;
      uint64_t v9 = *(void *)(v5 + 800);
      *(void *)(v5 + 800) = 0;
      if (v9) {
        WebCore::ScrollingStateTree::operator delete(v9, 0x50uLL);
      }
      WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)v5, v6);
      a3 += 832;
      v5 += 832;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  int v8 = 1;
  do
  {
    unsigned int v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    unsigned int v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

uint64_t WebKit::mayContainEditableElementsInRect(WebKit *this, UIView *a2, const WebCore::FloatRect *a3)
{
  uint64_t v27 = &v29;
  uint64_t v28 = 16;
  WebCore::FloatRect::operator CGRect();
  WebKit::collectDescendantViewsInRect((uint64_t)&v27, this, v5, v6, v7, v8);
  if (HIDWORD(v28))
  {
    uint64_t v10 = HIDWORD(v28);
    unsigned int v11 = v27 - 1;
    char v12 = 1;
    while (1)
    {
      uint64_t v13 = (void *)v11[v10];
      if (v13) {
        CFRetain((CFTypeRef)v11[v10]);
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (unint64_t v14 = (WebKit::RemoteLayerTreeNode *)[v13 layer],
            (uint64_t v16 = WebKit::RemoteLayerTreeNode::forCALayer(v14, v15)) == 0))
      {
        int v21 = 3;
        goto LABEL_10;
      }
      WebCore::FloatRect::operator CGRect();
      objc_msgSend(v13, "convertRect:fromView:", this);
      v24.origin.x = v17;
      v24.origin.y = v18;
      v24.size.width = v19;
      v24.size.height = v20;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v25, &v24);
      WebCore::IntRect::IntRect((WebCore::IntRect *)&v26, &v25);
      if (WebCore::EventRegion::containsEditableElementsInRect((WebCore::EventRegion *)(v16 + 56), (const WebCore::IntRect *)&v26))
      {
        int v21 = 1;
        char v3 = 1;
        goto LABEL_10;
      }
      if (*(unsigned char *)(v16 + 168))
      {
        WebCore::Region::Region((WebCore::Region *)&v24, &v26);
        char v22 = WebCore::Region::contains((WebCore::Region *)(v16 + 56), (const WebCore::Region *)&v24);
        WebCore::Region::~Region((WebCore::Region *)&v24);
        if (v22)
        {
          char v3 = 0;
          int v21 = 1;
          goto LABEL_10;
        }
        char v12 = 0;
      }
      int v21 = 0;
LABEL_10:
      if (v13) {
        CFRelease(v13);
      }
      if (v21 != 3 && v21)
      {
        char v12 = v3;
        goto LABEL_23;
      }
      if (!(--v10 * 8)) {
        goto LABEL_23;
      }
    }
  }
  char v12 = 0;
LABEL_23:
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v9);
  return v12 & 1;
}

void sub_198A07CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  WebCore::Region::~Region((WebCore::Region *)va);
  if (v2) {
    CFRelease(v2);
  }
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::collectDescendantViewsInRect(uint64_t a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  if (![a2 clipsToBounds]
    || ([a2 bounds],
        v45.origin.x = a3,
        v45.origin.y = a4,
        v45.size.width = a5,
        v45.size.height = a6,
        uint64_t result = CGRectIntersectsRect(v42, v45),
        result))
  {
    if (!objc_msgSend((id)objc_msgSend(a2, "layer"), "mask")
      || (uint64_t result = objc_msgSend((id)objc_msgSend(a2, "layer"), "_web_maskMayIntersectRect:", a3, a4, a5, a6),
          result))
    {
      WTF::makeVector<WTF::RetainPtr<UIView>>((uint64_t)&v37, (void *)[a2 subviews]);
      if (v38)
      {
        unint64_t v14 = v37;
        uint64_t v15 = 8 * v38;
        while (1)
        {
          uint64_t v16 = *v14;
          CFTypeRef cf = v16;
          if (v16)
          {
            CFRetain(v16);
            uint64_t v16 = (void *)cf;
          }
          objc_msgSend(v16, "convertRect:fromView:", a2, a3, a4, a5, a6, 0, 0, 0, 0);
          v35.origin.x = v17;
          v35.origin.y = v18;
          v35.size.width = v19;
          v35.size.height = v20;
          if ([(id)cf isUserInteractionEnabled])
          {
            [(id)cf frame];
            if (!CGRectIsEmpty(v43))
            {
              CGPoint origin = v35.origin;
              CGSize size = v35.size;
              [(id)cf bounds];
              v46.origin.x = v23;
              v46.origin.y = v24;
              v46.size.width = v25;
              v46.size.height = v26;
              v44.CGPoint origin = origin;
              v44.CGSize size = size;
              if (CGRectIntersectsRect(v44, v46))
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0
                  || (uint64_t v27 = (WebKit::RemoteLayerTreeNode *)[(id)cf layer],
                      (uint64_t v29 = WebKit::RemoteLayerTreeNode::forCALayer(v27, v28)) != 0)
                  && (WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v39, &v35),
                      WebCore::IntRect::IntRect((WebCore::IntRect *)&v40, &v39),
                      WebCore::Region::Region((WebCore::Region *)v41, &v40),
                      int v30 = WebCore::Region::intersects((WebCore::Region *)(v29 + 56), (const WebCore::Region *)v41),
                      WebCore::Region::~Region((WebCore::Region *)v41),
                      v30))
                {
                  uint64_t v31 = *(unsigned int *)(a1 + 12);
                  if (v31 == *(_DWORD *)(a1 + 8))
                  {
                    WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<UIView>&>(a1, (unint64_t)&cf);
                  }
                  else
                  {
                    CFTypeRef v32 = cf;
                    *(void *)(*(void *)a1 + 8 * v31) = cf;
                    if (v32)
                    {
                      CFRetain(v32);
                      LODWORD(v31) = *(_DWORD *)(a1 + 12);
                    }
                    *(_DWORD *)(a1 + 12) = v31 + 1;
                  }
                }
              }
            }
          }
          if (![(id)cf subviews]) {
            break;
          }
          WebKit::collectDescendantViewsInRect(a1, cf, v35.origin.x, v35.origin.y, v35.size.width, v35.size.height);
          CFTypeRef v33 = cf;
          CFTypeRef cf = 0;
          if (v33) {
            CFRelease(v33);
          }
          ++v14;
          v15 -= 8;
          if (!v15) {
            return WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v13);
          }
        }
        CFTypeRef v34 = cf;
        CFTypeRef cf = 0;
        if (v34) {
          CFRelease(v34);
        }
      }
      return WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v13);
    }
  }
  return result;
}

void sub_198A07FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  WebCore::Region::~Region((WebCore::Region *)&a20);
  if (cf) {
    CFRelease(cf);
  }
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v21);
  _Unwind_Resume(a1);
}

uint64_t WebKit::touchActionsForPoint(WebKit *this, UIView *a2, const WebCore::IntPoint *a3)
{
  CGFloat v19 = &v21;
  uint64_t v20 = 16;
  WebCore::IntPoint::operator CGPoint();
  WebKit::collectDescendantViewsAtPoint((uint64_t)&v19, this, 0, v4, v5);
  if (HIDWORD(v20))
  {
    uint64_t v7 = HIDWORD(v20);
    uint64_t v8 = v19 - 1;
    while (1)
    {
      uint64_t v9 = (void *)v8[v7];
      if (v9) {
        CFRetain((CFTypeRef)v8[v7]);
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v10 = 1;
        if (!v9) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      if (v9) {
        CFRelease(v9);
      }
      if (!(--v7 * 8)) {
        goto LABEL_16;
      }
    }
    if (!v9) {
      goto LABEL_16;
    }
    WebCore::IntPoint::operator CGPoint();
    objc_msgSend(v9, "convertPoint:fromView:", this);
    v18.x = v11;
    v18.y = v12;
    uint64_t v13 = (WebKit::RemoteLayerTreeNode *)[v9 layer];
    uint64_t v15 = WebKit::RemoteLayerTreeNode::forCALayer(v13, v14);
    if (v15)
    {
      WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v17, &v18);
      uint64_t v10 = WebCore::EventRegion::touchActionsForPoint((WebCore::EventRegion *)(v15 + 56), (const WebCore::IntPoint *)v17);
    }
    else
    {
      uint64_t v10 = 1;
    }
LABEL_18:
    CFRelease(v9);
  }
  else
  {
LABEL_16:
    uint64_t v10 = 1;
  }
LABEL_19:
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
  return v10;
}

void sub_198A08158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  CFRelease(v13);
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::collectDescendantViewsAtPoint(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  if (![a2 clipsToBounds]
    || (uint64_t result = objc_msgSend(a2, "pointInside:withEvent:", a3, a4, a5), result))
  {
    if (!objc_msgSend((id)objc_msgSend(a2, "layer"), "mask")
      || (uint64_t result = objc_msgSend((id)objc_msgSend(a2, "layer"), "_web_maskContainsPoint:", a4, a5), result))
    {
      WTF::makeVector<WTF::RetainPtr<UIView>>((uint64_t)&v29, (void *)[a2 subviews]);
      if (v30)
      {
        CGFloat v12 = v29;
        uint64_t v13 = 8 * v30;
        do
        {
          id v28 = *v12;
          id v14 = v28;
          if (v28)
          {
            CFRetain(v28);
            id v14 = v28;
          }
          v27.x = 0.0;
          v27.y = 0.0;
          objc_msgSend(v14, "convertPoint:fromView:", a2, a4, a5, *(_OWORD *)&v25.m11, *(_OWORD *)&v25.m13, *(_OWORD *)&v25.m21, *(_OWORD *)&v25.m23, *(_OWORD *)&v25.m31, *(_OWORD *)&v25.m33, *(_OWORD *)&v25.m41, *(_OWORD *)&v25.m43);
          v27.x = v15;
          v27.y = v16;
          CGFloat v17 = (void *)[v28 layer];
          if (v17) {
            [v17 transform];
          }
          else {
            memset(&v25, 0, sizeof(v25));
          }
          WebCore::TransformationMatrix::TransformationMatrix((WebCore::TransformationMatrix *)v26, &v25);
          if (WebCore::TransformationMatrix::isInvertible((WebCore::TransformationMatrix *)v26))
          {
            if ([v28 isUserInteractionEnabled])
            {
              [v28 frame];
              if (!CGRectIsEmpty(v31))
              {
                if (objc_msgSend(v28, "pointInside:withEvent:", a3, v27.x, v27.y))
                {
                  if (([v28 conformsToProtocol:&unk_1EEAA7250] & 1) != 0
                    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
                    || (CGPoint v18 = (WebKit::RemoteLayerTreeNode *)[v28 layer],
                        (uint64_t v20 = WebKit::RemoteLayerTreeNode::forCALayer(v18, v19)) != 0)
                    && (WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v25, &v27),
                        WebCore::Region::contains((WebCore::Region *)(v20 + 56), (const WebCore::IntPoint *)&v25)))
                  {
                    uint64_t v21 = *(unsigned int *)(a1 + 12);
                    if (v21 == *(_DWORD *)(a1 + 8))
                    {
                      WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<UIView>&>(a1, (unint64_t)&v28);
                    }
                    else
                    {
                      id v23 = v28;
                      *(void *)(*(void *)a1 + 8 * v21) = v28;
                      if (v23)
                      {
                        CFRetain(v23);
                        LODWORD(v21) = *(_DWORD *)(a1 + 12);
                      }
                      *(_DWORD *)(a1 + 12) = v21 + 1;
                    }
                  }
                }
              }
            }
            if (objc_msgSend(v28, "subviews", *(_OWORD *)&v25.m11, *(_OWORD *)&v25.m13, *(_OWORD *)&v25.m21, *(_OWORD *)&v25.m23, *(_OWORD *)&v25.m31, *(_OWORD *)&v25.m33, *(_OWORD *)&v25.m41, *(_OWORD *)&v25.m43))
            {
              WebKit::collectDescendantViewsAtPoint(a1, v28, a3, v27.x, v27.y);
              int v22 = 0;
            }
            else
            {
              int v22 = 1;
            }
          }
          else
          {
            int v22 = 3;
          }
          id v24 = v28;
          id v28 = 0;
          if (v24) {
            CFRelease(v24);
          }
          if (v22 != 3 && v22) {
            break;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      return WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v11);
    }
  }
  return result;
}

void sub_198A08408(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 112, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::eventListenerTypesAtPoint(WebKit *this, UIView *a2, const WebCore::IntPoint *a3)
{
  CGPoint v18 = &v20;
  uint64_t v19 = 16;
  WebCore::IntPoint::operator CGPoint();
  WebKit::collectDescendantViewsAtPoint((uint64_t)&v18, this, 0, v4, v5);
  if (!HIDWORD(v19)) {
    goto LABEL_14;
  }
  uint64_t v7 = HIDWORD(v19);
  uint64_t v8 = v18 - 1;
  while (1)
  {
    uint64_t v9 = (void *)v8[v7];
    if (v9) {
      CFRetain((CFTypeRef)v8[v7]);
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      break;
    }
    if (v9) {
      CFRelease(v9);
    }
    if (!(--v7 * 8)) {
      goto LABEL_14;
    }
  }
  if (v9)
  {
    WebCore::IntPoint::operator CGPoint();
    objc_msgSend(v9, "convertPoint:fromView:", this);
    v17.x = v10;
    v17.y = v11;
    CGFloat v12 = (WebKit::RemoteLayerTreeNode *)[v9 layer];
    uint64_t v14 = WebKit::RemoteLayerTreeNode::forCALayer(v12, v13);
    if (v14)
    {
      WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v16, &v17);
      uint64_t v14 = WebCore::EventRegion::eventListenerRegionTypesForPoint((WebCore::EventRegion *)(v14 + 56), (const WebCore::IntPoint *)v16);
    }
    CFRelease(v9);
  }
  else
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v6);
  return v14;
}

void sub_198A08570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  CFRelease(v13);
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::findActingScrollParent(WebKit *this, UIScrollView *a2, const WebKit::RemoteLayerTreeHost *a3)
{
  uint64_t v29 = 0;
  double v5 = (void *)[(WebKit *)this superview];
  p_layeringSceneIdentity = (uint64_t *)&a2->super.super.__layeringSceneIdentity;
  while (v5)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t result = WebKit::RemoteLayerTreeNode::layerID((WebKit::RemoteLayerTreeNode *)[v5 layer], (uint64_t)&v30);
      if (!v32)
      {
        __break(1u);
        return result;
      }
      uint64_t v8 = v29;
      if (!v29) {
        break;
      }
      int v9 = *(_DWORD *)(v29 - 8);
      unsigned int v33 = -1640531527;
      __int16 v34 = 0;
      char v35 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v33, &v30);
      unsigned int v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v33) & v9;
      CGFloat v11 = (uint64_t *)(v8 + 16 * v10);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      if (*v11 != v30 || v13 != v31)
      {
        int v15 = 1;
        while (v12 | v13)
        {
          unsigned int v10 = (v10 + v15) & v9;
          CGFloat v16 = (uint64_t *)(v8 + 16 * v10);
          uint64_t v12 = *v16;
          uint64_t v13 = v16[1];
          ++v15;
          if (v12 == v30 && v13 == v31) {
            goto LABEL_17;
          }
        }
        break;
      }
    }
LABEL_17:
    CGPoint v18 = (WebKit::RemoteLayerTreeNode *)objc_msgSend(v5, "layer", (void)v27);
    uint64_t v20 = WebKit::RemoteLayerTreeNode::forCALayer(v18, v19);
    uint64_t v21 = v20;
    if (v20)
    {
      if (*(void *)(v20 + 176))
      {
        long long v27 = *(_OWORD *)(v20 + 176);
        char v28 = 1;
        uint64_t v22 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(p_layeringSceneIdentity, &v27);
        if (v22)
        {
          uint64_t v23 = *(void *)(v22 + 48);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & (v23 != 0)) != 0) {
            goto LABEL_28;
          }
        }
      }
      else
      {
        LOBYTE(v27) = 0;
        char v28 = 0;
      }
      uint64_t v24 = *(unsigned int *)(v21 + 204);
      if (v24)
      {
        CATransform3D v25 = *(uint64_t **)(v21 + 192);
        uint64_t v26 = 16 * v24;
        do
        {
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add(&v29, v25, (uint64_t)&v30);
          v25 += 2;
          v26 -= 16;
        }
        while (v26);
      }
    }
    double v5 = objc_msgSend(v5, "superview", (void)v27);
  }
  uint64_t v23 = 0;
LABEL_28:
  if (v29) {
    WTF::fastFree((WTF *)(v29 - 16), v4);
  }
  return v23;
}

void sub_198A08780(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A089B0(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::isScrolledBy(WKChildScrollView *this, WKChildScrollView *a2, UIView *a3)
{
  WebKit::RemoteLayerTreeNode::layerID((WebKit::RemoteLayerTreeNode *)[(WKChildScrollView *)this layer], (uint64_t)&v14);
  if (a2)
  {
    while (1)
    {
      if (a2 == this) {
        return 1;
      }
      double v5 = (WebKit::RemoteLayerTreeNode *)[(WKChildScrollView *)a2 layer];
      uint64_t v7 = WebKit::RemoteLayerTreeNode::forCALayer(v5, v6);
      if (v7)
      {
        if (v15)
        {
          uint64_t v8 = *(void *)(v7 + 176);
          if (v8)
          {
            if (v8 == v14.i64[0] && *(void *)(v7 + 184) == v14.i64[1]) {
              return 1;
            }
          }
          uint64_t v10 = *(unsigned int *)(v7 + 204);
          if (v10) {
            break;
          }
        }
      }
LABEL_14:
      uint64_t result = [(WKChildScrollView *)a2 superview];
      a2 = (WKChildScrollView *)result;
      if (!result) {
        return result;
      }
    }
    CGFloat v11 = *(int64x2_t **)(v7 + 192);
    while (1)
    {
      int32x2_t v12 = vmovn_s64(vceqq_s64(*v11, v14));
      if (v12.i32[0] & v12.i32[1]) {
        break;
      }
      ++v11;
      if (!--v10) {
        goto LABEL_14;
      }
    }
  }
  return 0;
}

void WTF::makeVector<WTF::RetainPtr<UIView>>(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = [a2 count];
  int v5 = v4;
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
    CGFloat v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 8) = v5;
    *(void *)a1 = v6;
  }
  else
  {
    CGFloat v6 = 0;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v8 = [a2 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (!v8)
  {
    if (v5) {
      goto LABEL_30;
    }
    return;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *(void *)v24;
  do
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v24 != v10) {
        objc_enumerationMutation(a2);
      }
      int32x2_t v12 = *(const void **)(*((void *)&v23 + 1) + 8 * i);
      if (v12) {
        CFRetain(*(CFTypeRef *)(*((void *)&v23 + 1) + 8 * i));
      }
      CFTypeRef cf = v12;
      unsigned __int8 v22 = 1;
      if (v9 == *(_DWORD *)(a1 + 8))
      {
        uint64_t v13 = (uint64_t *)WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v9 + 1, (unint64_t)&cf);
        uint64_t v14 = *(unsigned int *)(a1 + 12);
        CGFloat v6 = *(WTF **)a1;
        uint64_t v15 = *v13;
        uint64_t *v13 = 0;
        *((void *)v6 + v14) = v15;
        LODWORD(v15) = v22;
        unsigned int v9 = v14 + 1;
        *(_DWORD *)(a1 + 12) = v14 + 1;
        if (!v15) {
          continue;
        }
      }
      else
      {
        CFTypeRef cf = 0;
        *((void *)v6 + v9++) = v12;
        *(_DWORD *)(a1 + 12) = v9;
      }
      CFTypeRef v16 = cf;
      CFTypeRef cf = 0;
      if (v16) {
        CFRelease(v16);
      }
    }
    uint64_t v8 = [a2 countByEnumeratingWithState:&v23 objects:v27 count:16];
  }
  while (v8);
  if (*(_DWORD *)(a1 + 8) <= v9) {
    return;
  }
  if (!v9) {
    goto LABEL_31;
  }
  if (v9 >> 29)
  {
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x198A08FA4);
  }
  uint64_t v17 = WTF::fastMalloc((WTF *)(8 * v9));
  *(_DWORD *)(a1 + 8) = v9;
  *(void *)a1 = v17;
  if ((WTF *)v17 == v6) {
    goto LABEL_31;
  }
  uint64_t v18 = 0;
  do
  {
    uint64_t v19 = *(void *)((char *)v6 + v18);
    *(void *)((char *)v6 + v18) = 0;
    *(void *)(v17 + v18) = v19;
    uint64_t v20 = *(const void **)((char *)v6 + v18);
    *(void *)((char *)v6 + v18) = 0;
    if (v20) {
      CFRelease(v20);
    }
    v18 += 8;
  }
  while (8 * v9 != v18);
LABEL_30:
  if (v6)
  {
LABEL_31:
    if (*(WTF **)a1 == v6)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v6, v7);
  }
}

void sub_198A08FB0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  _Unwind_Resume(a1);
}

CFTypeRef WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<UIView>&>(uint64_t a1, unint64_t a2)
{
  char v3 = (CFTypeRef *)WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  CFTypeRef result = *v3;
  *(void *)(*(void *)a1 + 8 * v4) = result;
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    LODWORD(v4) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) >= a2) {
    return;
  }
  int v2 = a2;
  uint64_t v4 = *(WTF **)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (a2 >= 0x11)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  uint64_t v6 = (void *)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 16;
  if (v5)
  {
LABEL_7:
    uint64_t v7 = 8 * v5;
    unint64_t v8 = v4;
    do
    {
      unint64_t v9 = *(const void **)v8;
      *(void *)unint64_t v8 = 0;
      void *v6 = v9;
      unint64_t v10 = *(const void **)v8;
      *(void *)unint64_t v8 = 0;
      if (v10) {
        CFRelease(v10);
      }
      ++v6;
      unint64_t v8 = (WTF *)((char *)v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
LABEL_11:
  if ((WTF *)(a1 + 16) != v4 && v4)
  {
    if (*(WTF **)a1 == v4)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v4, (void *)a2);
  }
}

Class ___ZN6WebKitL30scrollViewScrollIndicatorClassEv_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Uiscrollviewsc.isa);
  qword_1EB358E40 = (uint64_t)result;
  return result;
}

uint64_t WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(const void ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6) {
        CFRelease(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (a1 + 16 != *(void *)a1 && v7 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  unsigned int v9 = result & v7;
  unint64_t v10 = (void *)(v6 + 16 * (result & v7));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = *a2;
  if (*(_OWORD *)v10 != 0)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    do
    {
      if (v12 == v13 && v11 == a2[1])
      {
        uint64_t v23 = *a1;
        if (*a1) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v26 = 0;
        uint64_t v25 = v23 + 16 * v24;
        goto LABEL_30;
      }
      if (v11 == -1) {
        uint64_t v14 = v10;
      }
      unsigned int v9 = (v9 + v15) & v7;
      unint64_t v10 = (void *)(v6 + 16 * v9);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      ++v15;
    }
    while (*(_OWORD *)v10 != 0);
    if (v14)
    {
      void *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v13 = *a2;
      unint64_t v10 = v14;
    }
  }
  uint64_t v16 = a2[1];
  *unint64_t v10 = v13;
  v10[1] = v16;
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, v10);
      unint64_t v10 = (void *)result;
      uint64_t v19 = *a1;
      if (*a1) {
        unint64_t v22 = *(unsigned int *)(v19 - 4);
      }
      else {
        unint64_t v22 = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  uint64_t v25 = v19 + 16 * v22;
  char v26 = 1;
LABEL_30:
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v25;
  *(unsigned char *)(a3 + 16) = v26;
  return result;
}