void sub_198870E78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18)
{
  if (a18) {
    WTF::fastFree(a18, a2);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::TransformOperation,void>::encode(IPC::Encoder *result, uint64_t a2)
{
  v3 = result;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 > 0x12) {
    goto LABEL_13;
  }
  if (((1 << v4) & 0x6007) != 0)
  {
    LOBYTE(v18) = 1;
    IPC::Encoder::operator<<<BOOL>(result, (char *)&v18);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 16));
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 24));
    double v5 = *(double *)(a2 + 32);
    goto LABEL_7;
  }
  if (((1 << v4) & 0x18038) != 0)
  {
    LOBYTE(v18) = 0;
    IPC::Encoder::operator<<<BOOL>(result, (char *)&v18);
    LODWORD(v18) = 0;
    BYTE6(v18) = 0;
    WORD2(v18) = *(_WORD *)(a2 + 20);
    if (BYTE4(v18) - 2 >= 9)
    {
      if (BYTE4(v18) == 11)
      {
        LODWORD(v18) = *(_DWORD *)(a2 + 16);
        WebCore::Length::ref((WebCore::Length *)&v18);
      }
    }
    else
    {
      BYTE6(v18) = *(unsigned char *)(a2 + 22);
      if (BYTE6(v18)) {
        v6.n128_u32[0] = *(_DWORD *)(a2 + 16);
      }
      LODWORD(v18) = *(_DWORD *)(a2 + 16);
    }
    ((void (*)(IPC::Encoder *, long long *, __n128))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, &v18, v6);
    if (BYTE4(v18) == 11) {
      WebCore::Length::deref((WebCore::Length *)&v18);
    }
    LODWORD(v18) = 0;
    BYTE6(v18) = 0;
    WORD2(v18) = *(_WORD *)(a2 + 28);
    if (BYTE4(v18) - 2 >= 9)
    {
      if (BYTE4(v18) == 11)
      {
        LODWORD(v18) = *(_DWORD *)(a2 + 24);
        WebCore::Length::ref((WebCore::Length *)&v18);
      }
    }
    else
    {
      BYTE6(v18) = *(unsigned char *)(a2 + 30);
      if (BYTE6(v18)) {
        v7.n128_u32[0] = *(_DWORD *)(a2 + 24);
      }
      LODWORD(v18) = *(_DWORD *)(a2 + 24);
    }
    ((void (*)(IPC::Encoder *, long long *, __n128))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, &v18, v7);
    if (BYTE4(v18) == 11) {
      WebCore::Length::deref((WebCore::Length *)&v18);
    }
    LODWORD(v18) = 0;
    BYTE6(v18) = 0;
    WORD2(v18) = *(_WORD *)(a2 + 36);
    if (BYTE4(v18) - 2 >= 9)
    {
      if (BYTE4(v18) == 11)
      {
        LODWORD(v18) = *(_DWORD *)(a2 + 32);
        WebCore::Length::ref((WebCore::Length *)&v18);
      }
    }
    else
    {
      BYTE6(v18) = *(unsigned char *)(a2 + 38);
      if (BYTE6(v18)) {
        v8.n128_u32[0] = *(_DWORD *)(a2 + 32);
      }
      LODWORD(v18) = *(_DWORD *)(a2 + 32);
    }
    ((void (*)(IPC::Encoder *, long long *, __n128))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, &v18, v8);
    if (BYTE4(v18) == 11) {
      WebCore::Length::deref((WebCore::Length *)&v18);
    }
    goto LABEL_37;
  }
  if (((1 << v4) & 0x601C0) == 0)
  {
LABEL_13:
    if (v4 - 9 <= 2)
    {
      LOBYTE(v18) = 3;
      IPC::Encoder::operator<<<BOOL>(result, (char *)&v18);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 16));
      double v5 = *(double *)(a2 + 24);
      goto LABEL_7;
    }
    switch(*(unsigned char *)(a2 + 12))
    {
      case 0xC:
        LOBYTE(v18) = 4;
        IPC::Encoder::operator<<<BOOL>(result, (char *)&v18);
        long long v10 = *(_OWORD *)(a2 + 32);
        long long v18 = *(_OWORD *)(a2 + 16);
        long long v19 = 0uLL;
        long long v20 = v10;
        long long v21 = 0uLL;
        long long v22 = xmmword_1994F5E00;
        long long v23 = unk_1994F5E10;
        long long v24 = *(_OWORD *)(a2 + 48);
        long long v25 = xmmword_1994F5D90;
        return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(v3, (double *)&v18);
      case 0x13:
        LOBYTE(v18) = 5;
        IPC::Encoder::operator<<<BOOL>(result, (char *)&v18);
        long long v11 = *(_OWORD *)(a2 + 96);
        long long v22 = *(_OWORD *)(a2 + 80);
        long long v23 = v11;
        long long v12 = *(_OWORD *)(a2 + 128);
        long long v24 = *(_OWORD *)(a2 + 112);
        long long v25 = v12;
        long long v13 = *(_OWORD *)(a2 + 32);
        long long v18 = *(_OWORD *)(a2 + 16);
        long long v19 = v13;
        long long v14 = *(_OWORD *)(a2 + 64);
        long long v20 = *(_OWORD *)(a2 + 48);
        long long v21 = v14;
        return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::TransformationMatrix,void>::encode(v3, (double *)&v18);
      case 0x14:
        LOBYTE(v18) = 6;
        IPC::Encoder::operator<<<BOOL>(result, (char *)&v18);
        LOBYTE(v18) = 0;
        BYTE8(v18) = 0;
        if (*(unsigned char *)(a2 + 24))
        {
          LODWORD(v18) = 0;
          BYTE6(v18) = 0;
          WORD2(v18) = *(_WORD *)(a2 + 20);
          if (BYTE4(v18) - 2 >= 9)
          {
            if (BYTE4(v18) == 11)
            {
              LODWORD(v18) = *(_DWORD *)(a2 + 16);
              WebCore::Length::ref((WebCore::Length *)&v18);
            }
          }
          else
          {
            BYTE6(v18) = *(unsigned char *)(a2 + 22);
            LODWORD(v18) = *(_DWORD *)(a2 + 16);
          }
          BYTE8(v18) = 1;
          v16 = (unsigned char *)IPC::Encoder::grow(v3, 1uLL, 1);
          if (v17)
          {
            unsigned char *v16 = 1;
            if (BYTE8(v18))
            {
              result = (IPC::Encoder *)((uint64_t (*)(IPC::Encoder *, long long *))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, &v18);
LABEL_55:
              if (BYTE8(v18))
              {
                if (BYTE4(v18) == 11) {
                  return (IPC::Encoder *)WebCore::Length::deref((WebCore::Length *)&v18);
                }
              }
              return result;
            }
            std::__throw_bad_optional_access[abi:sn180100]();
            __break(1u);
          }
          else
          {
            __break(0xC471u);
          }
          JUMPOUT(0x19887135CLL);
        }
        result = (IPC::Encoder *)IPC::Encoder::grow(v3, 1uLL, 1);
        if (!v15)
        {
          __break(0xC471u);
          JUMPOUT(0x19887137CLL);
        }
        *(unsigned char *)result = 0;
        goto LABEL_55;
      case 0x15:
        char v9 = 7;
        goto LABEL_38;
      default:
        return result;
    }
  }
  LOBYTE(v18) = 2;
  IPC::Encoder::operator<<<BOOL>(result, (char *)&v18);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 16));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 32));
  double v5 = *(double *)(a2 + 40);
LABEL_7:
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, v5);
LABEL_37:
  char v9 = *(unsigned char *)(a2 + 12);
LABEL_38:
  LOBYTE(v18) = v9;
  return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(v3, (char *)&v18);
}

void sub_198871388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12)
  {
    if (a10 == 11) {
      WebCore::Length::deref((WebCore::Length *)&a9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::TransformOperation,void>::decode(uint64_t result, uint64_t *a2)
{
  uint64_t v4 = result;
  uint64_t v5 = a2[2];
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v8 = v5 - v6;
  if (v7 <= v8)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v44 = a2[3];
    if (v44)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        uint64_t v43 = *a2;
        uint64_t v42 = a2[1];
      }
      else
      {
        uint64_t v42 = 0;
        uint64_t v43 = 0;
      }
    }
    goto LABEL_122;
  }
  char v9 = (unsigned char *)(v6 + v8);
  uint64_t v10 = v6 + v8 + 1;
  a2[2] = v10;
  if (!v6)
  {
    uint64_t v42 = v7;
    uint64_t v43 = 0;
LABEL_122:
    unint64_t v7 = 0;
    uint64_t v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v45 = a2[3];
    if (v45)
    {
      if (v42)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43, v42);
        uint64_t v6 = *a2;
        unint64_t v7 = a2[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v6 = 0;
      }
    }
    goto LABEL_123;
  }
  if (*v9 < 8u)
  {
    switch(*v9)
    {
      case 0:
        IPC::Decoder::decode<WebCore::Length>((uint64_t)&v109, a2);
        IPC::Decoder::decode<WebCore::Length>((uint64_t)&v113, a2);
        IPC::Decoder::decode<WebCore::Length>((uint64_t)v107, a2);
        result = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        uint64_t v11 = *a2;
        if (*a2)
        {
          uint64_t v11 = (unsigned __int16)result;
          if ((unsigned __int16)result <= 0xFFu) {
            goto LABEL_194;
          }
          uint64_t v11 = 0;
          LODWORD(v2) = 1;
          if (result <= 0x10u && ((1 << result) & 0x18038) != 0)
          {
            uint64_t v11 = v110;
            if (!v110) {
              goto LABEL_194;
            }
            uint64_t v11 = v114;
            if (!v114) {
              goto LABEL_194;
            }
            uint64_t v11 = v108;
            if (!v108) {
              goto LABEL_194;
            }
            result = WebCore::TranslateTransformOperation::create();
            LODWORD(v2) = 0;
            uint64_t v11 = v106;
          }
        }
        else
        {
          LODWORD(v2) = 1;
        }
        if (v108 && v107[4] == 11)
        {
          uint64_t v86 = v11;
          result = WebCore::Length::deref((WebCore::Length *)v107);
          uint64_t v11 = v86;
        }
        if (v114 && BYTE4(v113) == 11)
        {
          uint64_t v87 = v11;
          result = WebCore::Length::deref((WebCore::Length *)&v113);
          uint64_t v11 = v87;
        }
        if (v110 && BYTE4(v109) == 11)
        {
          uint64_t v88 = v11;
          result = WebCore::Length::deref((WebCore::Length *)&v109);
          uint64_t v11 = v88;
          if (!v2) {
            goto LABEL_22;
          }
        }
        else if (!v2)
        {
LABEL_22:
          if (!*a2) {
            goto LABEL_195;
          }
          *(void *)uint64_t v4 = v11;
          goto LABEL_106;
        }
        uint64_t v89 = v11;
        uint64_t v90 = *a2;
        uint64_t v91 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v92 = a2[3];
        if (v92 && v91) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v92 + 16))(v92, v90);
        }
        uint64_t v11 = v89;
        if (!*a2) {
          goto LABEL_195;
        }
        goto LABEL_194;
      case 1:
        unint64_t v28 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        unint64_t v29 = a2[1];
        LODWORD(v2) = v29 < v28 || v29 - v28 < 8;
        if (v2 != 1)
        {
          a2[2] = v6 + v28 + 8;
          goto LABEL_83;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v50 = a2[3];
        if (!v50)
        {
          unint64_t v29 = 0;
LABEL_142:
          uint64_t v6 = 0;
          goto LABEL_83;
        }
        if (!v29) {
          goto LABEL_142;
        }
        (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
        unint64_t v29 = 0;
        uint64_t v100 = *a2;
        uint64_t v101 = a2[1];
        uint64_t v102 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v102 && v101)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v102 + 16))(v102, v100, v101);
          uint64_t v6 = *a2;
          unint64_t v29 = a2[1];
        }
        else
        {
          uint64_t v6 = 0;
        }
LABEL_83:
        unint64_t v31 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v29 < v31 || v29 - v31 <= 7)
        {
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v76 = a2[3];
          if (v76)
          {
            if (v29)
            {
              (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
              uint64_t v75 = *a2;
              uint64_t v74 = a2[1];
            }
            else
            {
              uint64_t v74 = 0;
              uint64_t v75 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            int v32 = 0;
            goto LABEL_87;
          }
          uint64_t v74 = v29;
          uint64_t v75 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v77 = a2[3];
        if (v77 && v74)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77 + 16))(v77, v75, v74);
          uint64_t v6 = *a2;
          unint64_t v29 = a2[1];
        }
        else
        {
          unint64_t v29 = 0;
          uint64_t v6 = 0;
        }
        int v32 = 1;
LABEL_87:
        unint64_t v33 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v29 < v33 || v29 - v33 <= 7)
        {
          uint64_t v78 = 0;
          uint64_t v79 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v80 = a2[3];
          if (v80)
          {
            if (v29)
            {
              (*(void (**)(uint64_t))(*(void *)v80 + 16))(v80);
              uint64_t v79 = *a2;
              uint64_t v78 = a2[1];
            }
            else
            {
              uint64_t v78 = 0;
              uint64_t v79 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            int v34 = 0;
            goto LABEL_91;
          }
          uint64_t v78 = v29;
          uint64_t v79 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v81 = a2[3];
        if (v81 && v78) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, v79, v78);
        }
        int v34 = 1;
LABEL_91:
        unsigned __int16 v35 = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        if (!*a2) {
          goto LABEL_116;
        }
        uint64_t v11 = v35;
        if (v35 <= 0xFFu) {
          goto LABEL_194;
        }
        if (v35 > 0xEu) {
          goto LABEL_116;
        }
        uint64_t v11 = (1 << v35);
        if ((v11 & 0x6007) == 0) {
          goto LABEL_116;
        }
        if (v2 || v32 || v34) {
          goto LABEL_194;
        }
        WebCore::ScaleTransformOperation::create();
        goto LABEL_99;
      case 2:
        unint64_t v12 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        unint64_t v13 = a2[1];
        LODWORD(v2) = v13 < v12 || v13 - v12 < 8;
        if (v2 != 1)
        {
          a2[2] = v6 + v12 + 8;
          goto LABEL_35;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v48 = a2[3];
        if (!v48)
        {
          unint64_t v13 = 0;
LABEL_136:
          uint64_t v6 = 0;
          goto LABEL_35;
        }
        if (!v13) {
          goto LABEL_136;
        }
        (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
        unint64_t v13 = 0;
        uint64_t v94 = *a2;
        uint64_t v95 = a2[1];
        uint64_t v96 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v96 && v95)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v96 + 16))(v96, v94, v95);
          uint64_t v6 = *a2;
          unint64_t v13 = a2[1];
        }
        else
        {
          uint64_t v6 = 0;
        }
LABEL_35:
        unint64_t v15 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v13 < v15 || v13 - v15 <= 7)
        {
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v60 = a2[3];
          if (v60)
          {
            if (v13)
            {
              (*(void (**)(uint64_t))(*(void *)v60 + 16))(v60);
              uint64_t v59 = *a2;
              uint64_t v58 = a2[1];
            }
            else
            {
              uint64_t v58 = 0;
              uint64_t v59 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            int v16 = 0;
            goto LABEL_39;
          }
          uint64_t v58 = v13;
          uint64_t v59 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v61 = a2[3];
        if (v61 && v58)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v61 + 16))(v61, v59, v58);
          uint64_t v6 = *a2;
          unint64_t v13 = a2[1];
        }
        else
        {
          unint64_t v13 = 0;
          uint64_t v6 = 0;
        }
        int v16 = 1;
LABEL_39:
        unint64_t v17 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v13 < v17 || v13 - v17 <= 7)
        {
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v64 = a2[3];
          if (v64)
          {
            if (v13)
            {
              (*(void (**)(uint64_t))(*(void *)v64 + 16))(v64);
              uint64_t v63 = *a2;
              uint64_t v62 = a2[1];
            }
            else
            {
              uint64_t v62 = 0;
              uint64_t v63 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            int v18 = 0;
            goto LABEL_43;
          }
          uint64_t v62 = v13;
          uint64_t v63 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v65 = a2[3];
        if (v65 && v62)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v65 + 16))(v65, v63, v62);
          uint64_t v6 = *a2;
          unint64_t v13 = a2[1];
        }
        else
        {
          unint64_t v13 = 0;
          uint64_t v6 = 0;
        }
        int v18 = 1;
LABEL_43:
        unint64_t v19 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v13 < v19 || v13 - v19 <= 7)
        {
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v68 = a2[3];
          if (v68)
          {
            if (v13)
            {
              (*(void (**)(uint64_t))(*(void *)v68 + 16))(v68);
              uint64_t v67 = *a2;
              uint64_t v66 = a2[1];
            }
            else
            {
              uint64_t v66 = 0;
              uint64_t v67 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            int v20 = 0;
            goto LABEL_47;
          }
          uint64_t v66 = v13;
          uint64_t v67 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v69 = a2[3];
        if (v69 && v66) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69 + 16))(v69, v67, v66);
        }
        int v20 = 1;
LABEL_47:
        unsigned __int16 v21 = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        if (!*a2) {
          goto LABEL_116;
        }
        uint64_t v11 = v21;
        if (v21 <= 0xFFu) {
          goto LABEL_194;
        }
        if (v21 > 0x12u) {
          goto LABEL_116;
        }
        uint64_t v11 = (1 << v21);
        if ((v11 & 0x601C0) == 0) {
          goto LABEL_116;
        }
        if (v2 || v16 || v18 || v20) {
          goto LABEL_194;
        }
        WebCore::RotateTransformOperation::create();
        goto LABEL_99;
      case 3:
        unint64_t v22 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        unint64_t v23 = a2[1];
        LODWORD(v2) = v23 < v22 || v23 - v22 < 8;
        if (v2 != 1)
        {
          a2[2] = v6 + v22 + 8;
          goto LABEL_64;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v49 = a2[3];
        if (!v49)
        {
          unint64_t v23 = 0;
LABEL_139:
          uint64_t v6 = 0;
          goto LABEL_64;
        }
        if (!v23) {
          goto LABEL_139;
        }
        (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
        unint64_t v23 = 0;
        uint64_t v97 = *a2;
        uint64_t v98 = a2[1];
        uint64_t v99 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v99 && v98)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v99 + 16))(v99, v97, v98);
          uint64_t v6 = *a2;
          unint64_t v23 = a2[1];
        }
        else
        {
          uint64_t v6 = 0;
        }
LABEL_64:
        unint64_t v25 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
        if (v23 < v25 || v23 - v25 <= 7)
        {
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v72 = a2[3];
          if (v72)
          {
            if (v23)
            {
              (*(void (**)(uint64_t))(*(void *)v72 + 16))(v72);
              uint64_t v71 = *a2;
              uint64_t v70 = a2[1];
            }
            else
            {
              uint64_t v70 = 0;
              uint64_t v71 = 0;
            }
          }
        }
        else
        {
          a2[2] = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v6)
          {
            int v26 = 0;
            goto LABEL_68;
          }
          uint64_t v70 = v23;
          uint64_t v71 = 0;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v73 = a2[3];
        if (v73 && v70) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v71, v70);
        }
        int v26 = 1;
LABEL_68:
        unsigned __int16 v27 = IPC::Decoder::decode<WebCore::TransformOperationType>(a2);
        if (!*a2) {
          goto LABEL_116;
        }
        uint64_t v11 = v27;
        if (v27 <= 0xFFu) {
          goto LABEL_194;
        }
        uint64_t v11 = (v27 - 9);
        if (v11 > 2)
        {
LABEL_116:
          uint64_t v41 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          result = a2[3];
          if (result)
          {
            if (v41)
            {
              result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
              uint64_t v11 = *a2;
              if (*a2) {
                goto LABEL_194;
              }
            }
          }
          goto LABEL_117;
        }
        if (v2 || v26) {
          goto LABEL_194;
        }
        WebCore::SkewTransformOperation::create();
LABEL_99:
        result = v109;
LABEL_104:
        if (*a2)
        {
          *(void *)uint64_t v4 = result;
          goto LABEL_106;
        }
        *(unsigned char *)uint64_t v4 = 0;
        *(unsigned char *)(v4 + 8) = 0;
        if (result) {
          goto LABEL_127;
        }
        return result;
      case 4:
        IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)&v109, (uint64_t)a2);
        if (!*a2) {
          goto LABEL_116;
        }
        uint64_t v11 = v112;
        if (!v112) {
          goto LABEL_194;
        }
        WebCore::MatrixTransformOperation::create(&v113, (WebCore::MatrixTransformOperation *)&v109, (const WebCore::TransformationMatrix *)*a2);
        goto LABEL_103;
      case 5:
        IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)&v109, (uint64_t)a2);
        if (!*a2) {
          goto LABEL_116;
        }
        uint64_t v11 = v112;
        if (!v112) {
          goto LABEL_194;
        }
        WebCore::Matrix3DTransformOperation::create(&v113, (WebCore::Matrix3DTransformOperation *)&v109, (const WebCore::TransformationMatrix *)*a2);
LABEL_103:
        result = v113;
        goto LABEL_104;
      case 6:
        unint64_t v36 = a2[1];
        if (v36 <= a2[2] - v6)
        {
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          *a2 = 0;
          a2[1] = 0;
          uint64_t v53 = a2[3];
          if (v53)
          {
            if (v36)
            {
              (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
              uint64_t v51 = 0;
              uint64_t v103 = *a2;
              uint64_t v104 = a2[1];
              uint64_t v105 = a2[3];
              *a2 = 0;
              a2[1] = 0;
              uint64_t v52 = 0;
              if (v105 && v104)
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v105 + 16))(v105, v103, v104);
                uint64_t v52 = *a2;
                uint64_t v51 = a2[1];
              }
            }
            else
            {
              uint64_t v51 = 0;
              uint64_t v52 = 0;
            }
          }
        }
        else
        {
          v37 = (unsigned __int8 *)a2[2];
          a2[2] = (uint64_t)(v37 + 1);
          uint64_t v11 = *v37;
          if (v11 < 2)
          {
            if (!v11)
            {
              int v38 = 0;
              int v39 = 0;
              LOBYTE(v109) = 0;
              unsigned __int8 v110 = 0;
              int v40 = 1;
              char v111 = 1;
              goto LABEL_147;
            }
            result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v113, a2);
            if (v114)
            {
              LODWORD(v109) = 0;
              BYTE4(v109) = BYTE4(v113);
              uint64_t v11 = BYTE4(v113);
              *(_WORD *)((char *)&v109 + 5) = BYTE5(v113);
              if (BYTE4(v113) - 2 >= 9)
              {
                if (BYTE4(v113) != 11) {
                  goto LABEL_120;
                }
              }
              else
              {
                BYTE6(v109) = BYTE6(v113);
                if (BYTE6(v113))
                {
                  LODWORD(v109) = v113;
LABEL_120:
                  int v39 = 0;
                  int v38 = 1;
                  unsigned __int8 v110 = 1;
                  char v111 = 1;
                  int v40 = 1;
                  goto LABEL_147;
                }
              }
              LODWORD(v109) = v113;
              goto LABEL_120;
            }
LABEL_145:
            LOBYTE(v109) = 0;
            char v111 = 0;
            uint64_t v55 = *a2;
            uint64_t v56 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            result = a2[3];
            if (result && v56) {
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v55);
            }
            uint64_t v11 = 0;
            int v38 = 0;
            int v40 = 0;
            int v39 = 1;
LABEL_147:
            uint64_t v2 = *a2;
            if (*a2)
            {
              if (v39) {
                goto LABEL_194;
              }
              result = WebCore::PerspectiveTransformOperation::create();
              uint64_t v57 = v113;
              int v38 = v110;
              LODWORD(v11) = BYTE4(v109);
              if (v111) {
                goto LABEL_150;
              }
            }
            else
            {
              uint64_t v57 = 0;
              if (v40)
              {
LABEL_150:
                if (v38 && v11 == 11)
                {
                  uint64_t v85 = v57;
                  result = WebCore::Length::deref((WebCore::Length *)&v109);
                  uint64_t v57 = v85;
                }
              }
            }
            if (v2)
            {
              if (*a2)
              {
                *(void *)uint64_t v4 = v57;
LABEL_106:
                *(unsigned char *)(v4 + 8) = 1;
                return result;
              }
              goto LABEL_184;
            }
            uint64_t v82 = v57;
            uint64_t v83 = *a2;
            uint64_t v84 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            result = a2[3];
            if (result && v84) {
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v83);
            }
            uint64_t v11 = *a2;
            uint64_t v57 = v82;
            if (!*a2)
            {
LABEL_184:
              *(unsigned char *)uint64_t v4 = 0;
              *(unsigned char *)(v4 + 8) = 0;
              if (!v2 || !v57) {
                return result;
              }
              result = v57;
              int v46 = *(_DWORD *)(v57 + 8);
              goto LABEL_128;
            }
LABEL_194:
            __break(1u);
LABEL_195:
            *(unsigned char *)uint64_t v4 = 0;
            *(unsigned char *)(v4 + 8) = 0;
            result = v11;
            if (v11) {
              char v93 = v2;
            }
            else {
              char v93 = 1;
            }
            if (v93) {
              return result;
            }
LABEL_127:
            int v46 = *(_DWORD *)(result + 8);
LABEL_128:
            int v47 = v46 - 1;
            if (!v47) {
              return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
            *(_DWORD *)(result + 8) = v47;
            return result;
          }
          uint64_t v51 = v36;
          uint64_t v52 = v6;
        }
        *a2 = 0;
        a2[1] = 0;
        uint64_t v54 = a2[3];
        if (v54 && v51) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 16))(v54, v52);
        }
        goto LABEL_145;
      case 7:
        WebCore::IdentityTransformOperation::create(&v109, (WebCore::IdentityTransformOperation *)result);
        goto LABEL_99;
      default:
        goto LABEL_117;
    }
  }
LABEL_123:
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v7) {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
  }
LABEL_117:
  *(unsigned char *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

void sub_1988723E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, __int16 a12, char a13, char a14, __int16 a15, char a16, char a17, __int16 a18, char a19, char a20,__int16 a21,char a22,char a23,__int16 a24,char a25,char a26,__int16 a27,char a28,char a29)
{
  if (a16 && a13 == 11) {
    WebCore::Length::deref((WebCore::Length *)&a11);
  }
  if (*(unsigned char *)(v29 - 104) && *(unsigned char *)(v29 - 108) == 11) {
    WebCore::Length::deref((WebCore::Length *)(v29 - 112));
  }
  if (a25)
  {
    if (a22 == 11) {
      WebCore::Length::deref((WebCore::Length *)&a19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>(uint64_t a1, uint64_t *a2)
{
  v21[0] = 0;
  IPC::Decoder::operator>><BOOL>(a2, v21);
  if (!HIBYTE(v21[0]))
  {
    uint64_t v15 = *a2;
    uint64_t v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17) {
      BOOL v18 = v16 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
    uint64_t result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v27, a2);
    if (!*a2) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  char v4 = v21[0];
  uint64_t result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v27, a2);
  if (!*a2)
  {
LABEL_39:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 20) = 0;
    int v14 = 1;
    goto LABEL_28;
  }
  if (!v31)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  LOBYTE(v21[0]) = v4;
  int v22 = 0;
  unsigned __int8 v25 = 0;
  unsigned __int8 v23 = v28;
  char v24 = v29;
  if (v28 - 2 >= 9)
  {
    if (v28 != 11) {
      goto LABEL_11;
    }
    int v6 = v27;
    int v27 = 0;
  }
  else
  {
    unsigned __int8 v25 = v30;
    if (v30)
    {
      int v22 = v27;
      goto LABEL_11;
    }
    int v6 = v27;
  }
  int v22 = v6;
LABEL_11:
  unsigned __int8 v28 = 0;
  memset(v26, 0, 7);
  uint64_t result = WebCore::BasicShapeCenterCoordinate::updateComputedLength((WebCore::BasicShapeCenterCoordinate *)v21);
  *(unsigned char *)a1 = v21[0];
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  unsigned int v7 = v23;
  *(unsigned char *)(a1 + 8) = v23;
  *(unsigned char *)(a1 + 9) = v24;
  if (v7 > 0xD) {
    goto LABEL_20;
  }
  int v8 = 1 << v7;
  if ((v8 & 0x7FC) != 0)
  {
    int v9 = v25;
    *(unsigned char *)(a1 + 10) = v25;
    if (v9)
    {
      *(_DWORD *)(a1 + 4) = v22;
      goto LABEL_20;
    }
    int v10 = v22;
  }
  else
  {
    if ((v8 & 0x3003) != 0)
    {
      *(_DWORD *)(a1 + 4) = 0;
      goto LABEL_20;
    }
    int v10 = v22;
    int v22 = 0;
  }
  *(_DWORD *)(a1 + 4) = v10;
LABEL_20:
  unsigned __int8 v23 = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 18) = 0;
  unsigned int v11 = LOBYTE(v26[1]);
  *(_WORD *)(a1 + 16) = v26[1];
  if (v11 <= 0xD)
  {
    int v12 = 1 << v11;
    if ((v12 & 0x7FC) != 0)
    {
      int v13 = BYTE2(v26[1]);
      *(unsigned char *)(a1 + 18) = BYTE2(v26[1]);
      if (v13)
      {
        *(_DWORD *)(a1 + 12) = v26[0];
        goto LABEL_27;
      }
    }
    else if ((v12 & 0x3003) != 0)
    {
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_27;
    }
    *(_DWORD *)(a1 + 12) = v26[0];
  }
LABEL_27:
  int v14 = 0;
  *(unsigned char *)(a1 + 20) = 1;
LABEL_28:
  if (v31 && v28 == 11)
  {
    uint64_t result = WebCore::Length::deref((WebCore::Length *)&v27);
    if (!v14) {
      return result;
    }
  }
  else if (!v14)
  {
    return result;
  }
  uint64_t v19 = *a2;
  uint64_t v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v20) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v19);
    }
  }
  return result;
}

void sub_198872728(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::BasicShapeRadius>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v19, a2);
  unint64_t v5 = a2[1];
  uint64_t v6 = *a2;
  unint64_t v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v10 = *a2;
        uint64_t v9 = a2[1];
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
LABEL_19:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  int v8 = (unsigned __int8 *)(v6 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    uint64_t v9 = v5;
    uint64_t v10 = 0;
    goto LABEL_19;
  }
  uint64_t v9 = *v8;
  if (v9 >= 5) {
    goto LABEL_20;
  }
  uint64_t v10 = v23;
  if (v23)
  {
    unsigned int v11 = v20;
    char v12 = v21;
    if (v20 - 2 >= 9)
    {
      if (v20 == 11)
      {
        int v14 = v19;
        *(_DWORD *)a1 = 0;
        *(unsigned char *)(a1 + 6) = 0;
        *(unsigned char *)(a1 + 4) = 11;
        *(unsigned char *)(a1 + 5) = v12;
        goto LABEL_14;
      }
      char v13 = 0;
      int v14 = 0;
    }
    else
    {
      char v13 = v22;
      int v14 = v19;
    }
    *(_DWORD *)a1 = 0;
    *(unsigned char *)(a1 + 6) = 0;
    *(unsigned char *)(a1 + 4) = v11;
    *(unsigned char *)(a1 + 5) = v12;
    if (v11 > 0xD)
    {
LABEL_15:
      *(unsigned char *)(a1 + 8) = v9;
      *(unsigned char *)(a1 + 12) = 1;
      return result;
    }
    if (((1 << v11) & 0x7FC) != 0)
    {
      *(unsigned char *)(a1 + 6) = v13;
    }
    else
    {
      int v14 = 0;
      if (((1 << v11) & 0x3003) == 0) {
        goto LABEL_15;
      }
    }
LABEL_14:
    *(_DWORD *)a1 = v14;
    goto LABEL_15;
  }
  while (1)
  {
    __break(1u);
LABEL_31:
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 16))(result, v10, v9);
      uint64_t v6 = *a2;
      unint64_t v5 = a2[1];
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (!v16) {
      break;
    }
    if (!v5) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v6);
    if (!*a2) {
      break;
    }
    uint64_t v9 = v23;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 12) = 0;
  if (v23 && v20 == 11) {
    WebCore::Length::deref((WebCore::Length *)&v19);
  }
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v18) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
    }
  }
  return result;
}

void sub_1988729F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12, char a13, __int16 a14, char a15, char a16)
{
  if (a15)
  {
    if (a12 == 11) {
      WebCore::Length::deref((WebCore::Length *)&a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::LengthSize>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::Length>((uint64_t)&v24, a2);
  uint64_t result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v19, a2);
  uint64_t v5 = *a2;
  if (*a2)
  {
    if (v28)
    {
      unsigned int v6 = v25;
      if (v25 - 2 >= 9)
      {
        char v7 = 0;
        if (v25 == 11)
        {
          int v8 = v24;
          int v24 = 0;
        }
        else
        {
          int v8 = 0;
        }
      }
      else
      {
        char v7 = v27;
        if (v27) {
          char v7 = 1;
        }
        int v8 = v24;
      }
      char v9 = v26;
      unsigned __int8 v25 = 0;
      if (v23)
      {
        unsigned int v10 = v20;
        if (v20 - 2 >= 9)
        {
          char v11 = 0;
          if (v20 == 11)
          {
            int v12 = v19;
            int v19 = 0;
          }
          else
          {
            int v12 = 0;
          }
        }
        else
        {
          char v11 = v22;
          if (v22) {
            char v11 = 1;
          }
          int v12 = v19;
        }
        char v13 = v21;
        unsigned __int8 v20 = 0;
        *(_DWORD *)a1 = 0;
        *(unsigned char *)(a1 + 6) = 0;
        *(unsigned char *)(a1 + 4) = v6;
        *(unsigned char *)(a1 + 5) = v9;
        if (v6 <= 0xD)
        {
          int v14 = 1 << v6;
          if ((v14 & 0x7FC) != 0)
          {
            *(unsigned char *)(a1 + 6) = v7;
LABEL_15:
            *(_DWORD *)a1 = v8;
            goto LABEL_18;
          }
          if ((v14 & 0x3003) == 0) {
            goto LABEL_15;
          }
          *(_DWORD *)a1 = 0;
        }
LABEL_18:
        *(_DWORD *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 14) = 0;
        *(unsigned char *)(a1 + 12) = v10;
        *(unsigned char *)(a1 + 13) = v13;
        if (v10 <= 0xD)
        {
          if (((1 << v10) & 0x7FC) != 0)
          {
            *(unsigned char *)(a1 + 14) = v11;
          }
          else if (((1 << v10) & 0x3003) != 0)
          {
            *(_DWORD *)(a1 + 8) = 0;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 8) = v12;
        }
LABEL_24:
        *(unsigned char *)(a1 + 16) = 1;
        goto LABEL_25;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v23 && v20 == 11)
  {
    uint64_t v17 = v5;
    uint64_t result = WebCore::Length::deref((WebCore::Length *)&v19);
    uint64_t v5 = v17;
  }
LABEL_25:
  if (v28 && v25 == 11)
  {
    uint64_t v18 = v5;
    uint64_t result = WebCore::Length::deref((WebCore::Length *)&v24);
    if (v18) {
      return result;
    }
  }
  else if (v5)
  {
    return result;
  }
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v16) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
    }
  }
  return result;
}

void sub_198872C64(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode(IPC::Encoder *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  unint64_t result = (*(uint64_t (**)(WebCore::ByteArrayPixelBuffer *))(*(void *)a2 + 16))(a2);
  if (result)
  {
    char v5 = 0;
    IPC::Encoder::operator<<<BOOL>(a1, &v5);
    return IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(a1, a2);
  }
  return result;
}

void *IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode(WTF::StringImpl *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  unint64_t result = (void *)(*(uint64_t (**)(WebCore::ByteArrayPixelBuffer *))(*(void *)a2 + 16))(a2);
  if (result)
  {
    unint64_t v5 = *((void *)a1 + 2);
    if (v5 >= *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(unsigned char *)(*(void *)a1 + v5) = 0;
      *((void *)a1 + 2) = v5 + 1;
    }
    return IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(a1, a2);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::PixelBuffer,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<IPC::WebCore_PixelBuffer_Subclass>(a1);
  if (!*a1 || v4 < 0x100u || (_BYTE)v4)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  IPC::Decoder::decode<WTF::Ref<WebCore::ByteArrayPixelBuffer,WTF::RawPtrTraits<WebCore::ByteArrayPixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::ByteArrayPixelBuffer>>>(a1, &v6);
  if (*a1)
  {
    if (v7)
    {
      *(void *)a2 = v6;
      a2[8] = 1;
      return;
    }
    __break(1u);
LABEL_14:
    (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    return;
  }
  *a2 = 0;
  a2[8] = 0;
  if (v7)
  {
    unint64_t v5 = v6;
    unsigned int v6 = 0;
    if (v5)
    {
      if (v5[2] != 1)
      {
        --v5[2];
        return;
      }
      goto LABEL_14;
    }
  }
}

uint64_t IPC::Decoder::decode<IPC::WebCore_PixelBuffer_Subclass>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<IPC::WebCore_PixelBuffer_Subclass,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::Decoder::decode<WTF::Ref<WebCore::ByteArrayPixelBuffer,WTF::RawPtrTraits<WebCore::ByteArrayPixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::ByteArrayPixelBuffer>>>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_198872F78(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WTF::Ref<WebCore::ByteArrayPixelBuffer,WTF::RawPtrTraits<WebCore::ByteArrayPixelBuffer>,WTF::DefaultRefDerefTraits<WebCore::ByteArrayPixelBuffer>>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::TransformOperationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  int v4 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198873064);
    }
    *uint64_t v5 = 1;
    if (!*(unsigned char *)(a2 + 80))
    {
      uint64_t v8 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<std::optional<WebCore::Path>>(v8);
    }
    IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (float *)(a2 + 16));
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 64));
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 76));
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198873084);
    }
    *uint64_t v5 = 0;
  }

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 84));
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::Path>>(unsigned char *a1, unint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2[2];
  uint64_t v5 = (char *)*a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v13 + 16))(v13);
        unint64_t v12 = *a2;
        unint64_t v11 = a2[1];
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v12 = 0;
      }
    }
    goto LABEL_15;
  }
  uint64_t v8 = &v5[v7];
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v11 = v6;
    unint64_t v12 = 0;
LABEL_15:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = (char *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v6) {
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_23;
  }
  if (v9)
  {
    IPC::ArgumentCoder<WebCore::Path,void>::decode(a2, v5, v20);
    if (!v23)
    {
      unint64_t v17 = *a2;
      unint64_t v18 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = a2[3];
      if (!result
        || !v18
        || (uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v17), !v23))
      {
LABEL_23:
        *a1 = 0;
        a1[80] = 0;
        goto LABEL_12;
      }
    }
    uint64_t result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a1 + 8), (uint64_t)v21);
    a1[72] = 1;
    a1[80] = 1;
    if (v23 && v22 != -1) {
      goto LABEL_11;
    }
  }
  else
  {
    v20[0] = 0;
    char v23 = 0;
    uint64_t result = (uint64_t)std::__optional_move_base<WebCore::Path,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v20);
    a1[80] = 1;
    if (v23 && v22 != -1) {
LABEL_11:
    }
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v22])(&v19, v21);
  }
LABEL_12:
  if (!a1[80])
  {
    unint64_t v15 = *a2;
    unint64_t v16 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v16) {
        return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v15);
      }
    }
  }
  return result;
}

void sub_198873350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  if (a23)
  {
    if (a21 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a21])(&a12, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::CSSBoxType>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 7u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t IPC::Decoder::decode<WebCore::LengthPoint>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::Length>((uint64_t)&v26, a2);
  uint64_t result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v21, a2);
  uint64_t v5 = *a2;
  if (*a2)
  {
    if (v30)
    {
      unsigned int v6 = v27;
      unsigned int v7 = v27 - 2;
      if (v7 >= 9)
      {
        char v8 = 0;
        if (v27 == 11)
        {
          int v9 = v26;
          int v26 = 0;
        }
        else
        {
          int v9 = 0;
        }
      }
      else
      {
        char v8 = v29;
        if (v29) {
          char v8 = 1;
        }
        int v9 = v26;
      }
      char v10 = v28;
      unsigned __int8 v27 = 0;
      if (v25)
      {
        unsigned int v11 = v22;
        unsigned int v12 = v22 - 2;
        if (v12 >= 9)
        {
          char v13 = 0;
          if (v22 == 11)
          {
            int v14 = v21;
            int v21 = 0;
            uint64_t result = 1;
          }
          else
          {
            uint64_t result = 1;
            int v14 = 0;
          }
        }
        else
        {
          char v13 = v24;
          if (v24)
          {
            uint64_t result = 0;
            char v13 = 1;
          }
          else
          {
            uint64_t result = 1;
          }
          int v14 = v21;
        }
        char v15 = v23;
        unsigned __int8 v22 = 0;
        if (v7 >= 9)
        {
          char v8 = 0;
          if (v6 != 11) {
            int v9 = 0;
          }
        }
        if (v12 >= 9)
        {
          char v13 = 0;
          if (v11 != 11) {
            int v14 = 0;
          }
        }
        *(_DWORD *)a1 = 0;
        *(unsigned char *)(a1 + 6) = 0;
        *(unsigned char *)(a1 + 4) = v6;
        *(unsigned char *)(a1 + 5) = v10;
        if (v6 <= 0xD)
        {
          int v16 = 1 << v6;
          if ((v16 & 0x7FC) != 0)
          {
            *(unsigned char *)(a1 + 6) = v8;
LABEL_18:
            *(_DWORD *)a1 = v9;
            goto LABEL_21;
          }
          if ((v16 & 0x3003) == 0) {
            goto LABEL_18;
          }
          *(_DWORD *)a1 = 0;
        }
LABEL_21:
        *(_DWORD *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 14) = 0;
        *(unsigned char *)(a1 + 12) = v11;
        *(unsigned char *)(a1 + 13) = v15;
        if (v11 <= 0xD)
        {
          if (((1 << v11) & 0x7FC) != 0)
          {
            *(unsigned char *)(a1 + 14) = v13;
          }
          else if (((1 << v11) & 0x3003) != 0)
          {
            *(_DWORD *)(a1 + 8) = 0;
            goto LABEL_27;
          }
          *(_DWORD *)(a1 + 8) = v14;
        }
LABEL_27:
        *(unsigned char *)(a1 + 16) = 1;
        goto LABEL_28;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v25 && v22 == 11)
  {
    uint64_t v19 = v5;
    uint64_t result = WebCore::Length::deref((WebCore::Length *)&v21);
    uint64_t v5 = v19;
  }
LABEL_28:
  if (v30 && v27 == 11)
  {
    uint64_t v20 = v5;
    uint64_t result = WebCore::Length::deref((WebCore::Length *)&v26);
    if (v20) {
      return result;
    }
  }
  else if (v5)
  {
    return result;
  }
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v18) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
    }
  }
  return result;
}

void sub_198873744(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::PathOperation,void>::encode(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v3 = result;
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      v19[0] = 0;
      IPC::Encoder::operator<<<BOOL>(result, v19);
      std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)v19, (const WebCore::Path *)(a2 + 32));
      int v4 = v22;
      uint64_t result = (IPC::Encoder *)IPC::Encoder::grow(v3, 1uLL, 1);
      if (v4)
      {
        if (!v5)
        {
          __break(0xC471u);
          JUMPOUT(0x198873CECLL);
        }
        *(unsigned char *)uint64_t result = 1;
        if (!v22)
        {
          std::__throw_bad_optional_access[abi:sn180100]();
          __break(1u);
LABEL_40:
          JUMPOUT(0x198873CCCLL);
        }
        uint64_t result = IPC::ArgumentCoder<WebCore::Path,void>::encode(v3, (WebCore::Path *)v19);
      }
      else
      {
        if (!v5)
        {
          __break(0xC471u);
          JUMPOUT(0x198873D0CLL);
        }
        *(unsigned char *)uint64_t result = 0;
      }
      if (v22)
      {
        if (v21 != -1) {
          return (IPC::Encoder *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v21])(&v18, &v20);
        }
      }
      return result;
    case 1:
      v19[0] = 1;
      IPC::Encoder::operator<<<BOOL>(result, v19);
      uint64_t v9 = *(void *)(a2 + 16);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 24))(v9) == 2)
      {
        v19[0] = 0;
        IPC::Encoder::operator<<<BOOL>(v3, v19);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v3, *(unsigned char *)(v9 + 16));
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 20);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v3, *(unsigned char *)(v9 + 36));
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 40);
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 56);
        v19[0] = *(unsigned char *)(v9 + 64);
        IPC::Encoder::operator<<<BOOL>(v3, v19);
      }
      else if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 24))(v9) == 3)
      {
        v19[0] = 1;
        IPC::Encoder::operator<<<BOOL>(v3, v19);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v3, *(unsigned char *)(v9 + 16));
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 20);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v3, *(unsigned char *)(v9 + 36));
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 40);
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 56);
        v19[0] = *(unsigned char *)(v9 + 64);
        IPC::Encoder::operator<<<BOOL>(v3, v19);
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 68);
        v19[0] = *(unsigned char *)(v9 + 76);
        IPC::Encoder::operator<<<BOOL>(v3, v19);
      }
      else if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 24))(v9))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 24))(v9) == 1)
        {
          v19[0] = 3;
          IPC::Encoder::operator<<<BOOL>(v3, v19);
          uint64_t v10 = *(void *)(v9 + 16);
          unsigned int v11 = (unsigned char *)IPC::Encoder::grow(v3, 1uLL, 1);
          if (v10)
          {
            if (!v12)
            {
              __break(0xC471u);
              JUMPOUT(0x198873D2CLL);
            }
            *unsigned int v11 = 1;
            IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v3, *(const void **)(*(void *)(*(void *)(v9 + 16) + 8) + 8), *(unsigned int *)(*(void *)(*(void *)(v9 + 16) + 8) + 20));
          }
          else
          {
            if (!v12)
            {
              __break(0xC471u);
              JUMPOUT(0x198873D4CLL);
            }
            *unsigned int v11 = 0;
          }
          IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v3, *(float *)(v9 + 24));
          IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v3, *(unsigned char *)(v9 + 28));
        }
        else if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 24))(v9) == 4)
        {
          v19[0] = 4;
          IPC::Encoder::operator<<<BOOL>(v3, v19);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 12);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 20);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 28);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 36);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 44);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 52);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 60);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 68);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 76);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 84);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 92);
          ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v9 + 100);
        }
      }
      else
      {
        v19[0] = 2;
        IPC::Encoder::operator<<<BOOL>(v3, v19);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v3, *(unsigned char *)(v9 + 12));
        unsigned int v14 = *(_DWORD *)(v9 + 28);
        char v13 = (unsigned int *)(v9 + 28);
        IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v3, v14);
        uint64_t v15 = *v13;
        if (v15)
        {
          uint64_t v16 = *(void *)(v13 - 3);
          uint64_t v17 = 8 * v15;
          do
          {
            ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, v16);
            v16 += 8;
            v17 -= 8;
          }
          while (v17);
        }
      }
      v19[0] = *(unsigned char *)(a2 + 13);
      return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(v3, v19);
    case 2:
      v19[0] = 2;
      IPC::Encoder::operator<<<BOOL>(result, v19);
      v19[0] = *(unsigned char *)(a2 + 13);
      return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(v3, v19);
    case 3:
      v19[0] = 3;
      IPC::Encoder::operator<<<BOOL>(result, v19);
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v3, *(float *)(a2 + 16));
      v19[0] = *(unsigned char *)(a2 + 20);
      IPC::Encoder::operator<<<BOOL>(v3, v19);
      char v6 = *(unsigned char *)(a2 + 21);
      unsigned int v7 = (unsigned char *)IPC::Encoder::grow(v3, 1uLL, 1);
      if (v8)
      {
        *unsigned int v7 = v6;
        ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, a2 + 24);
        return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, a2 + 32);
      }
      __break(0xC471u);
      goto LABEL_40;
    default:
      return result;
  }
}

void sub_198873D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23)
{
  if (a23)
  {
    if (a21 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a21])(&a12, &a14);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 8);
  IPC::VectorArgumentCoder<false,WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  IPC::VectorArgumentCoder<false,WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 40);
  char v5 = *(unsigned char *)(a2 + 56);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 57);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  return IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 64);
}

WTF *IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v40);
  IPC::Decoder::decode<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v37, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v34, a1);
  IPC::Decoder::decode<WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v31, a1);
  unsigned __int16 v6 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
  unsigned __int16 v7 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
  uint64_t result = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v9) {
    goto LABEL_40;
  }
  int v2 = result;
  char v24 = 0;
  v25[0] = 0;
  if ((unint64_t)result >= 0x100000) {
    goto LABEL_29;
  }
  if (result)
  {
    uint64_t v10 = (WTF::StringImpl *)WTF::fastMalloc(result);
    LODWORD(v3) = 0;
    LODWORD(v25[0]) = v2;
    char v24 = v10;
    do
    {
      uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
      __int16 v42 = (__int16)result;
      if ((unsigned __int16)result < 0x100u) {
        goto LABEL_39;
      }
      if (v3 == LODWORD(v25[0]))
      {
        uint64_t result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, (WTF *)(v3 + 1), (unint64_t)&v42);
        LODWORD(v3) = HIDWORD(v25[0]);
        uint64_t v10 = v24;
        *((unsigned char *)v24 + HIDWORD(v25[0])) = *(unsigned char *)result;
      }
      else
      {
        *((unsigned char *)v10 + v3) = (_BYTE)result;
      }
      LODWORD(v3) = v3 + 1;
      HIDWORD(v25[0]) = v3;
      int v2 = (WTF *)((char *)v2 - 1);
    }
    while (v2);
    LODWORD(v11) = v25[0];
LABEL_11:
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      if (v10) {
        uint64_t result = (WTF *)WTF::fastFree(v10, v9);
      }
      goto LABEL_42;
    }
  }
  else
  {
    if (!*(void *)a1)
    {
LABEL_41:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      goto LABEL_42;
    }
    uint64_t v10 = 0;
    LODWORD(v11) = 0;
    LODWORD(v3) = 0;
  }
  for (int i = 0; ; int i = 1)
  {
    if (v41)
    {
      char v13 = v40;
      int v40 = 0;
      if (v39)
      {
        uint64_t v14 = v37;
        uint64_t v15 = v38;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        if (v36)
        {
          uint64_t v16 = v34;
          uint64_t v17 = v35;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          if (v33)
          {
            uint64_t v18 = v31;
            uint64_t v19 = v32;
            uint64_t v31 = 0;
            uint64_t v32 = 0;
            if (v6 > 0xFFu)
            {
              LOBYTE(v28) = v6;
              if (v7 > 0xFFu)
              {
                HIBYTE(v28) = v7;
                if (!i) {
                  break;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_29:
    unsigned __int8 v22 = 0;
    LODWORD(v3) = 0;
    while (1)
    {
      uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
      __int16 v42 = (__int16)result;
      if ((unsigned __int16)result < 0x100u) {
        break;
      }
      if (v3 == LODWORD(v25[0]))
      {
        uint64_t result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, (WTF *)(v3 + 1), (unint64_t)&v42);
        LODWORD(v3) = HIDWORD(v25[0]);
        unsigned __int8 v22 = v24;
        *((unsigned char *)v24 + HIDWORD(v25[0])) = *(unsigned char *)result;
      }
      else
      {
        *((unsigned char *)v22 + v3) = (_BYTE)result;
      }
      uint64_t v3 = (v3 + 1);
      HIDWORD(v25[0]) = v3;
      int v2 = (WTF *)((char *)v2 - 1);
      if (!v2)
      {
        if (LODWORD(v25[0]) > v3)
        {
          if (v3)
          {
            LODWORD(v25[0]) = v3;
            uint64_t result = (WTF *)WTF::fastRealloc(v22, (void *)v3);
            char v24 = result;
          }
          else
          {
            char v24 = 0;
            LODWORD(v25[0]) = 0;
            uint64_t result = (WTF *)WTF::fastFree(v22, v9);
          }
        }
        uint64_t v10 = v24;
        LODWORD(v11) = v25[0];
        LODWORD(v3) = HIDWORD(v25[0]);
        goto LABEL_11;
      }
    }
    uint64_t v10 = v24;
    if (!v24) {
      goto LABEL_40;
    }
LABEL_39:
    char v24 = 0;
    LODWORD(v25[0]) = 0;
    WTF::fastFree(v10, v9);
LABEL_40:
    uint64_t v9 = *(void **)a1;
    uint64_t v23 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (!result) {
      goto LABEL_41;
    }
    if (!v23) {
      goto LABEL_41;
    }
    uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(void *)result + 16))(result, v9);
    unsigned int v11 = *(void **)a1;
    if (!*(void *)a1) {
      goto LABEL_41;
    }
    uint64_t v10 = 0;
  }
  char v24 = 0;
  v25[0] = 0;
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  v25[1] = 0;
  *(void *)(a2 + 16) = v15;
  v26[0] = 0;
  *(void *)(a2 + 24) = v16;
  v26[1] = 0;
  *(void *)(a2 + 32) = v17;
  v27[0] = 0;
  *(void *)(a2 + 40) = v18;
  v27[1] = 0;
  *(void *)(a2 + 48) = v19;
  *(_WORD *)(a2 + 56) = v28;
  uint64_t v29 = 0;
  *(void *)(a2 + 64) = v10;
  uint64_t v30 = 0;
  *(_DWORD *)(a2 + 72) = v11;
  *(_DWORD *)(a2 + 76) = v3;
  *(unsigned char *)(a2 + 80) = 1;
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v9);
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v20);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v21);
  uint64_t result = v24;
  char v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_42:
  if (v33) {
    uint64_t result = (WTF *)WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v9);
  }
  if (v36) {
    uint64_t result = (WTF *)WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v9);
  }
  if (v39) {
    uint64_t result = (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v9);
  }
  if (v41)
  {
    uint64_t result = v40;
    int v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198874224(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  if (a21) {
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  }
  if (a27) {
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  }
  if (*(unsigned char *)(v27 - 96)) {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 - 112, a2);
  }
  if (*(unsigned char *)(v27 - 80))
  {
    uint64_t v29 = *(WTF::StringImpl **)(v27 - 88);
    *(void *)(v27 - 88) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_30:
    uint64_t v24 = *(void *)a2;
    uint64_t v25 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v26 = v25 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    if (!v26) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v24);
    }
    return result;
  }
  unint64_t v6 = v4;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (v4 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebCore::CDMMediaCapability>((uint64_t)&v27, a2);
      if (!v30) {
        goto LABEL_29;
      }
      if (HIDWORD(v32) == v32)
      {
        WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMMediaCapability>((unsigned int *)&v31, (unint64_t)&v27);
      }
      else
      {
        uint64_t v15 = (char *)v31 + 24 * HIDWORD(v32);
        uint64_t v16 = v27;
        uint64_t v27 = 0;
        *(void *)uint64_t v15 = v16;
        uint64_t v17 = v28;
        uint64_t v28 = 0;
        *((void *)v15 + 1) = v17;
        *((_WORD *)v15 + 8) = v29;
        ++HIDWORD(v32);
      }
      uint64_t result = std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
      --v6;
    }
    while (v6);
    unsigned int v18 = HIDWORD(v32);
    uint64_t v19 = v31;
    if (v32 > HIDWORD(v32))
    {
      uint64_t v20 = v31;
      if (HIDWORD(v32))
      {
        if (HIDWORD(v32) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        unsigned int v21 = 24 * HIDWORD(v32);
        unsigned __int8 v22 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v32)));
        LODWORD(v32) = v21 / 0x18;
        uint64_t v31 = v22;
        uint64_t v20 = v19;
        if (v22 != v19)
        {
          WTF::VectorMover<false,WebCore::CDMMediaCapability>::move(v19, (WTF::StringImpl *)((char *)v19 + 24 * v18), (uint64_t)v22);
          uint64_t v20 = v31;
        }
      }
      if (v19)
      {
        if (v20 == v19)
        {
          uint64_t v31 = 0;
          LODWORD(v32) = 0;
        }
        WTF::fastFree(v19, v5);
        uint64_t v19 = v31;
      }
      else
      {
        uint64_t v19 = v20;
      }
    }
    uint64_t v31 = 0;
    *(void *)a1 = v19;
    int v13 = v32;
    int v12 = HIDWORD(v32);
    goto LABEL_14;
  }
  if (v4)
  {
    LODWORD(v32) = 24 * (int)v4 / 0x18u;
    uint64_t v31 = (WTF *)WTF::fastMalloc((WTF *)(24 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::CDMMediaCapability>((uint64_t)&v27, a2);
      if (!v30) {
        break;
      }
      if (HIDWORD(v32) == v32)
      {
        WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CDMMediaCapability>((unsigned int *)&v31, (unint64_t)&v27);
      }
      else
      {
        uint64_t v8 = (char *)v31 + 24 * HIDWORD(v32);
        uint64_t v9 = v27;
        uint64_t v27 = 0;
        *(void *)uint64_t v8 = v9;
        uint64_t v10 = v28;
        uint64_t v28 = 0;
        *((void *)v8 + 1) = v10;
        *((_WORD *)v8 + 8) = v29;
        ++HIDWORD(v32);
      }
      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
      if (!--v6)
      {
        unsigned int v11 = v31;
        int v13 = v32;
        int v12 = HIDWORD(v32);
        goto LABEL_13;
      }
    }
LABEL_29:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v23);
    goto LABEL_30;
  }
  int v12 = 0;
  int v13 = 0;
  unsigned int v11 = 0;
LABEL_13:
  uint64_t v31 = 0;
  *(void *)a1 = v11;
LABEL_14:
  uint64_t v32 = 0;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = v12;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v5);
}

void sub_198874598(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::CDMRequirement>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 2u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::VideoConfiguration>>(uint64_t result, WTF::StringImpl **a2)
{
  uint64_t v3 = result;
  int v4 = a2[2];
  unsigned int v5 = *a2;
  unint64_t v6 = (unint64_t)a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 > v7)
  {
    uint64_t v8 = (WTF::StringImpl *)((char *)v5 + v7);
    a2[2] = (WTF::StringImpl *)((char *)v8 + 1);
    if (!v5)
    {
      unint64_t v51 = v6;
      uint64_t v52 = 0;
      goto LABEL_79;
    }
    LODWORD(v8) = *(unsigned __int8 *)v8;
    if (v8 >= 2) {
      goto LABEL_107;
    }
    if (!v8)
    {
      *(unsigned char *)uint64_t result = 0;
LABEL_75:
      *(unsigned char *)(v3 + 40) = (_BYTE)v8;
      *(unsigned char *)(v3 + 48) = 1;
      return result;
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v128);
    unint64_t v9 = (unint64_t)a2[1];
    uint64_t v10 = *a2;
    unint64_t v11 = (((unint64_t)a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*a2;
    if (v9 >= v11 && v9 - v11 > 3)
    {
      __int16 v13 = (int *)((char *)v10 + v11);
      a2[2] = (WTF::StringImpl *)(v13 + 1);
      if (v10)
      {
        int v127 = 0;
        int v14 = *v13;
        LODWORD(v125) = v14;
        HIDWORD(v125) = v14 & 0xFFFFFF00;
        uint64_t v15 = v10;
        goto LABEL_12;
      }
      uint64_t v15 = (WTF::StringImpl *)v9;
      uint64_t v55 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v55 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v56 = a2[3];
      if (v56)
      {
        if (v9)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v56 + 16))(v56);
          uint64_t v55 = *a2;
          uint64_t v15 = a2[1];
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v55 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v57 = a2[3];
    if (v57)
    {
      if (v15)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v55, v15);
        uint64_t v125 = 0;
        uint64_t v15 = *a2;
        unint64_t v9 = (unint64_t)a2[1];
        int v127 = 1;
        uint64_t v10 = *a2;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v125 = 0;
    int v127 = 1;
LABEL_12:
    unint64_t v16 = (((unint64_t)a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v10;
    if (v9 < v16 || v9 - v16 <= 3)
    {
      uint64_t v75 = 0;
      uint64_t v15 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v76 = a2[3];
      if (v76)
      {
        if (v9)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v76 + 16))(v76);
          uint64_t v15 = *a2;
          uint64_t v75 = a2[1];
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v15 = 0;
        }
      }
    }
    else
    {
      uint64_t v17 = (_DWORD *)(((unint64_t)a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a2[2] = (WTF::StringImpl *)(v17 + 1);
      if (v10)
      {
        int v126 = 0;
        LODWORD(v124) = *v17;
        HIDWORD(v124) = *v17 & 0xFFFFFF00;
        goto LABEL_16;
      }
      uint64_t v75 = (WTF::StringImpl *)v9;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v77 = a2[3];
    if (v77 && v75)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v77 + 16))(v77, v15, v75);
      uint64_t v124 = 0;
      uint64_t v10 = *a2;
      unint64_t v9 = (unint64_t)a2[1];
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v124 = 0;
    }
    int v126 = 1;
LABEL_16:
    unint64_t v18 = (((unint64_t)a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v10;
    if (v9 < v18 || v9 - v18 <= 7)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v80 = a2[3];
      if (v80)
      {
        if (v9)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v80 + 16))(v80);
          uint64_t v79 = *a2;
          uint64_t v78 = a2[1];
        }
        else
        {
          uint64_t v78 = 0;
          uint64_t v79 = 0;
        }
      }
    }
    else
    {
      uint64_t v19 = (uint64_t *)(((unint64_t)a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (WTF::StringImpl *)(v19 + 1);
      if (v10)
      {
        int v20 = 0;
        uint64_t v123 = *v19;
        goto LABEL_20;
      }
      uint64_t v78 = (WTF::StringImpl *)v9;
      uint64_t v79 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v81 = a2[3];
    if (v81 && v78)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v81 + 16))(v81, v79, v78);
      uint64_t v123 = 0;
      uint64_t v10 = *a2;
      unint64_t v9 = (unint64_t)a2[1];
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v123 = 0;
    }
    int v20 = 1;
LABEL_20:
    unint64_t v21 = (((unint64_t)a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v10;
    if (v9 < v21 || v9 - v21 <= 7)
    {
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v84 = a2[3];
      if (v84)
      {
        if (v9)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v84 + 16))(v84);
          uint64_t v83 = *a2;
          uint64_t v82 = a2[1];
        }
        else
        {
          uint64_t v82 = 0;
          uint64_t v83 = 0;
        }
      }
    }
    else
    {
      unsigned __int8 v22 = (uint64_t *)(((unint64_t)a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = (WTF::StringImpl *)(v22 + 1);
      if (v10)
      {
        int v23 = 0;
        uint64_t v24 = *v22;
        goto LABEL_24;
      }
      uint64_t v82 = (WTF::StringImpl *)v9;
      uint64_t v83 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v85 = a2[3];
    if (v85 && v82) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v85 + 16))(v85, v83, v82);
    }
    uint64_t v24 = 0;
    int v23 = 1;
LABEL_24:
    uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a2);
    unint64_t v25 = (unint64_t)a2[1];
    BOOL v26 = *a2;
    unint64_t v27 = a2[2] - *a2;
    if (v25 <= v27)
    {
      unint64_t v58 = 0;
      uint64_t v59 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v60 = a2[3];
      if (v60)
      {
        uint64_t v106 = result;
        if (v25)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v60 + 16))(a2[3]);
          uint64_t v59 = *a2;
          unint64_t v58 = (unint64_t)a2[1];
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = 0;
        }
        uint64_t result = v106;
      }
    }
    else
    {
      uint64_t v28 = (unsigned __int8 *)v26 + v27;
      a2[2] = (WTF::StringImpl *)(v28 + 1);
      if (v26)
      {
        unsigned int v29 = *v28;
        if (v29 < 2)
        {
          if (!*v28)
          {
            unsigned int v31 = 0;
            LODWORD(v32) = 0x10000;
            goto LABEL_37;
          }
          if (v25 <= v28 + 1 - (unsigned __int8 *)v26)
          {
            unint64_t v86 = 0;
            uint64_t v87 = 0;
            *a2 = 0;
            a2[1] = 0;
            uint64_t v88 = a2[3];
            if (!v88) {
              goto LABEL_123;
            }
            uint64_t v110 = result;
            (*(void (**)(WTF::StringImpl *))(*(void *)v88 + 16))(a2[3]);
            unint64_t v86 = 0;
            char v111 = *a2;
            unsigned __int8 v112 = a2[1];
            uint64_t v113 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v87 = 0;
            if (v113)
            {
              uint64_t result = v110;
              if (!v112) {
                goto LABEL_123;
              }
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v113 + 16))(v113, v111);
              uint64_t v87 = *a2;
              unint64_t v86 = (unint64_t)a2[1];
            }
            uint64_t result = v110;
          }
          else
          {
            a2[2] = (WTF::StringImpl *)(v28 + 2);
            unsigned int v30 = v28[1];
            if (v30 < 3)
            {
              unsigned int v31 = v30 | 0x100;
LABEL_31:
              LODWORD(v32) = (v31 > 0xFF) << 16;
              if (v31 >= 0x100) {
                unsigned int v31 = v31;
              }
              else {
                unsigned int v31 = 0;
              }
              unsigned int v29 = 256;
              goto LABEL_37;
            }
            unint64_t v86 = v25;
            uint64_t v87 = v26;
          }
LABEL_123:
          *a2 = 0;
          a2[1] = 0;
          uint64_t v89 = a2[3];
          if (v89)
          {
            uint64_t v107 = result;
            if (v86) {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v89 + 16))(a2[3], v87, v86);
            }
            unsigned int v31 = 0;
            uint64_t result = v107;
          }
          else
          {
            unsigned int v31 = 0;
          }
          goto LABEL_31;
        }
LABEL_88:
        *a2 = 0;
        a2[1] = 0;
        uint64_t v32 = a2[3];
        if (v32)
        {
          uint64_t v102 = result;
          if (v25) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v32 + 16))(a2[3], v26);
          }
          LODWORD(v32) = 0;
          unsigned int v31 = 0;
          unsigned int v29 = 0;
          uint64_t result = v102;
        }
        else
        {
          unsigned int v31 = 0;
          unsigned int v29 = 0;
        }
LABEL_37:
        unsigned int v33 = v31 | v32 | v29;
        unint64_t v34 = (unint64_t)a2[1];
        if (!(v32 >> 16))
        {
          uint64_t v62 = *a2;
          *a2 = 0;
          a2[1] = 0;
          unint64_t v63 = (unint64_t)a2[3];
          if (!v63)
          {
            uint64_t v64 = 0;
            goto LABEL_92;
          }
          uint64_t v98 = result;
          if (!v34) {
            goto LABEL_219;
          }
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v63 + 16))(a2[3], v62);
          unint64_t v34 = (unint64_t)a2[1];
          uint64_t result = v98;
        }
        uint64_t v35 = *a2;
        unint64_t v36 = a2[2] - *a2;
        if (v34 > v36)
        {
          uint64_t v37 = (unsigned __int8 *)v35 + v36;
          a2[2] = (WTF::StringImpl *)(v37 + 1);
          if (v35)
          {
            unsigned int v38 = *v37;
            if (v38 < 2)
            {
              if (!*v37)
              {
                unsigned int v40 = 0;
                LODWORD(v41) = 0x10000;
                goto LABEL_50;
              }
              if (v34 <= v37 + 1 - (unsigned __int8 *)v35)
              {
                unint64_t v90 = 0;
                uint64_t v91 = 0;
                *a2 = 0;
                a2[1] = 0;
                uint64_t v92 = a2[3];
                if (!v92) {
                  goto LABEL_126;
                }
                uint64_t v114 = result;
                (*(void (**)(WTF::StringImpl *))(*(void *)v92 + 16))(a2[3]);
                unint64_t v90 = 0;
                v115 = *a2;
                v116 = a2[1];
                v117 = a2[3];
                *a2 = 0;
                a2[1] = 0;
                uint64_t v91 = 0;
                if (v117)
                {
                  uint64_t result = v114;
                  if (!v116) {
                    goto LABEL_126;
                  }
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v117 + 16))(v117, v115);
                  uint64_t v91 = *a2;
                  unint64_t v90 = (unint64_t)a2[1];
                }
                uint64_t result = v114;
              }
              else
              {
                a2[2] = (WTF::StringImpl *)(v37 + 2);
                unsigned int v39 = v37[1];
                if (v39 < 3)
                {
                  unsigned int v40 = v39 | 0x100;
LABEL_45:
                  LODWORD(v41) = (v40 > 0xFF) << 16;
                  if (v40 >= 0x100) {
                    unsigned int v40 = v40;
                  }
                  else {
                    unsigned int v40 = 0;
                  }
                  unsigned int v38 = 256;
                  goto LABEL_50;
                }
                unint64_t v90 = v34;
                uint64_t v91 = v35;
              }
LABEL_126:
              *a2 = 0;
              a2[1] = 0;
              char v93 = a2[3];
              if (v93)
              {
                uint64_t v108 = result;
                if (v90) {
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v93 + 16))(a2[3], v91, v90);
                }
                unsigned int v40 = 0;
                uint64_t result = v108;
              }
              else
              {
                unsigned int v40 = 0;
              }
              goto LABEL_45;
            }
LABEL_94:
            *a2 = 0;
            a2[1] = 0;
            char v41 = a2[3];
            if (v41)
            {
              uint64_t v101 = result;
              if (v34) {
                (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v41 + 16))(a2[3], v35);
              }
              LODWORD(v41) = 0;
              unsigned int v40 = 0;
              unsigned int v38 = 0;
              uint64_t result = v101;
            }
            else
            {
              unsigned int v40 = 0;
              unsigned int v38 = 0;
            }
LABEL_50:
            unsigned int v42 = v40 | v41 | v38;
            unint64_t v6 = (unint64_t)a2[1];
            if (!(v41 >> 16))
            {
              uint64_t v66 = *a2;
              *a2 = 0;
              a2[1] = 0;
              unint64_t v67 = (unint64_t)a2[3];
              if (!v67)
              {
                uint64_t v68 = 0;
                goto LABEL_98;
              }
              uint64_t v100 = result;
              if (!v6) {
                goto LABEL_220;
              }
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v67 + 16))(a2[3], v66);
              unint64_t v6 = (unint64_t)a2[1];
              uint64_t result = v100;
            }
            unsigned int v5 = *a2;
            unint64_t v43 = a2[2] - *a2;
            if (v6 > v43)
            {
              uint64_t v44 = (unsigned __int8 *)v5 + v43;
              a2[2] = (WTF::StringImpl *)(v44 + 1);
              if (v5)
              {
                if (*v44 < 2u)
                {
                  if (*v44)
                  {
                    if (v6 <= v44 + 1 - (unsigned __int8 *)v5)
                    {
                      unint64_t v46 = 0;
                      uint64_t v94 = 0;
                      *a2 = 0;
                      a2[1] = 0;
                      uint64_t v95 = a2[3];
                      if (v95)
                      {
                        uint64_t v118 = result;
                        (*(void (**)(WTF::StringImpl *))(*(void *)v95 + 16))(a2[3]);
                        unint64_t v46 = 0;
                        unsigned int v5 = *a2;
                        unint64_t v6 = (unint64_t)a2[1];
                        v119 = a2[3];
                        *a2 = 0;
                        a2[1] = 0;
                        uint64_t v94 = 0;
                        if (v119)
                        {
                          uint64_t result = v118;
                          if (v6)
                          {
                            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v119 + 16))(v119, v5);
                            uint64_t result = v118;
                            uint64_t v94 = *a2;
                            unint64_t v46 = (unint64_t)a2[1];
                          }
                        }
                        else
                        {
                          uint64_t result = v118;
                        }
                      }
                    }
                    else
                    {
                      a2[2] = (WTF::StringImpl *)(v44 + 2);
                      unsigned int v45 = v44[1];
                      if (v45 < 3)
                      {
                        LODWORD(v46) = v45 | 0x100;
                        goto LABEL_58;
                      }
                      unint64_t v46 = v6;
                      uint64_t v94 = v5;
                    }
                    *a2 = 0;
                    a2[1] = 0;
                    uint64_t v96 = a2[3];
                    if (v96)
                    {
                      uint64_t v109 = result;
                      if (!v46) {
                        goto LABEL_58;
                      }
                      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v96 + 16))(a2[3], v94, v46);
                      uint64_t result = v109;
                    }
                    LODWORD(v46) = 0;
LABEL_58:
                    unsigned int v47 = (v46 > 0xFF) << 16;
                    if (v46 >= 0x100) {
                      int v48 = v46;
                    }
                    else {
                      int v48 = 0;
                    }
                    int v49 = 256;
                    goto LABEL_63;
                  }
                  int v48 = 0;
                  int v49 = 0;
                  unsigned int v47 = 0x10000;
LABEL_63:
                  if (!HIWORD(v47))
                  {
                    unsigned int v5 = *a2;
                    unint64_t v6 = (unint64_t)a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    uint64_t v71 = a2[3];
                    if (v71)
                    {
                      if (v6)
                      {
                        unsigned int v121 = result;
                        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v71 + 16))(v71, v5);
                        uint64_t result = v121;
                      }
                    }
                  }
                  if (!*a2)
                  {
                    if (v129)
                    {
                      v120 = v128;
                      v128 = 0;
                      if (v120)
                      {
                        if (*(_DWORD *)v120 == 2) {
                          WTF::StringImpl::destroy(v120, v5);
                        }
                        else {
                          *(_DWORD *)v120 -= 2;
                        }
                      }
                    }
                    goto LABEL_106;
                  }
                  if (v129)
                  {
                    uint64_t v8 = v128;
                    v128 = 0;
                    if (!v127 && !v126 && !v20 && !v23 && (result & 0xFF0000) != 0)
                    {
                      if (HIWORD(v33))
                      {
                        if (HIWORD(v42))
                        {
                          unsigned int v50 = v48 | v47 | v49;
                          if (HIWORD(v50))
                          {
                            *(void *)uint64_t v3 = v8;
                            *(_DWORD *)(v3 + 8) = v125 | HIDWORD(v125);
                            *(_DWORD *)(v3 + 12) = v124 | HIDWORD(v124);
                            *(void *)(v3 + 16) = v123;
                            *(void *)(v3 + 24) = v24;
                            *(_WORD *)(v3 + 32) = result;
                            *(_WORD *)(v3 + 34) = v33;
                            *(_WORD *)(v3 + 36) = v42;
                            LOBYTE(v8) = 1;
                            *(_WORD *)(v3 + 38) = v50;
                            goto LABEL_75;
                          }
                        }
                      }
                    }
                  }
                  __break(1u);
                  goto LABEL_78;
                }
LABEL_100:
                *a2 = 0;
                a2[1] = 0;
                uint64_t v70 = a2[3];
                if (v70)
                {
                  unsigned int v122 = result;
                  if (!v6)
                  {
                    unsigned int v47 = 0;
                    int v48 = 0;
                    int v49 = 0;
                    uint64_t result = result;
                    goto LABEL_63;
                  }
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v70 + 16))(v70, v5);
                  uint64_t result = v122;
                }
                unsigned int v47 = 0;
                int v48 = 0;
                int v49 = 0;
                goto LABEL_63;
              }
              unint64_t v67 = v6;
              uint64_t v68 = 0;
LABEL_98:
              *a2 = 0;
              a2[1] = 0;
              uint64_t v69 = a2[3];
              if (v69)
              {
                uint64_t v104 = result;
                if (v67)
                {
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v69 + 16))(a2[3], v68, v67);
                  uint64_t result = v104;
                  unsigned int v5 = *a2;
                  unint64_t v6 = (unint64_t)a2[1];
                }
                else
                {
                  unint64_t v6 = 0;
                  unsigned int v5 = 0;
                }
              }
              else
              {
                unint64_t v6 = 0;
                unsigned int v5 = 0;
              }
              goto LABEL_100;
            }
            unint64_t v67 = 0;
            uint64_t v68 = 0;
            uint64_t v99 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (!v99) {
              goto LABEL_98;
            }
            uint64_t v100 = result;
            if (v6)
            {
              (*(void (**)(WTF::StringImpl *))(*(void *)v99 + 16))(v99);
              uint64_t result = v100;
              uint64_t v68 = *a2;
              unint64_t v67 = (unint64_t)a2[1];
              goto LABEL_98;
            }
LABEL_220:
            unint64_t v67 = 0;
            uint64_t v68 = 0;
            uint64_t result = v100;
            goto LABEL_98;
          }
          unint64_t v63 = v34;
          uint64_t v64 = 0;
LABEL_92:
          *a2 = 0;
          a2[1] = 0;
          uint64_t v65 = a2[3];
          if (v65)
          {
            uint64_t v103 = result;
            if (v63)
            {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v65 + 16))(a2[3], v64, v63);
              uint64_t v35 = *a2;
              unint64_t v34 = (unint64_t)a2[1];
            }
            else
            {
              unint64_t v34 = 0;
              uint64_t v35 = 0;
            }
            uint64_t result = v103;
          }
          else
          {
            unint64_t v34 = 0;
            uint64_t v35 = 0;
          }
          goto LABEL_94;
        }
        unint64_t v63 = 0;
        uint64_t v64 = 0;
        uint64_t v97 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (!v97) {
          goto LABEL_92;
        }
        uint64_t v98 = result;
        if (v34)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v97 + 16))(v97);
          uint64_t v64 = *a2;
          unint64_t v63 = (unint64_t)a2[1];
LABEL_138:
          uint64_t result = v98;
          goto LABEL_92;
        }
LABEL_219:
        unint64_t v63 = 0;
        uint64_t v64 = 0;
        goto LABEL_138;
      }
      unint64_t v58 = v25;
      uint64_t v59 = 0;
    }
    unint64_t v25 = 0;
    BOOL v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v61 = a2[3];
    if (v61)
    {
      uint64_t v105 = result;
      if (v58)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v61 + 16))(a2[3], v59, v58);
        BOOL v26 = *a2;
        unint64_t v25 = (unint64_t)a2[1];
      }
      else
      {
        unint64_t v25 = 0;
        BOOL v26 = 0;
      }
      uint64_t result = v105;
    }
    goto LABEL_88;
  }
LABEL_78:
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v53 = a2[3];
  if (v53)
  {
    if (v6)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v5);
      uint64_t v52 = *a2;
      unint64_t v51 = (unint64_t)a2[1];
    }
    else
    {
      unint64_t v51 = 0;
      uint64_t v52 = 0;
    }
  }
LABEL_79:
  unint64_t v6 = 0;
  unsigned int v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v54 = a2[3];
  if (!v54) {
    goto LABEL_107;
  }
  if (v51)
  {
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v54 + 16))(v54, v52, v51);
LABEL_106:
    unsigned int v5 = *a2;
    unint64_t v6 = (unint64_t)a2[1];
    goto LABEL_107;
  }
  unint64_t v6 = 0;
  unsigned int v5 = 0;
LABEL_107:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v72 = a2[3];
  if (v72 && v6) {
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v72 + 16))(v72, v5);
  }
  *(unsigned char *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 48) = 0;
  uint64_t v73 = *a2;
  uint64_t v74 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (uint64_t)a2[3];
  if (result)
  {
    if (v74) {
      return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v73);
    }
  }
  return result;
}

void sub_19887560C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16)
{
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::AudioConfiguration>>(uint64_t a1, WTF::StringImpl **a2)
{
  int v4 = a2[2];
  unsigned int v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if ((unint64_t)v6 <= v7)
  {
    unsigned __int8 v22 = 0;
    int v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24)
    {
      if (v6)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v24 + 16))(v24);
        int v23 = *a2;
        unsigned __int8 v22 = a2[1];
      }
      else
      {
        unsigned __int8 v22 = 0;
        int v23 = 0;
      }
    }
    goto LABEL_30;
  }
  uint64_t v8 = (unsigned __int8 *)v5 + v7;
  a2[2] = (WTF::StringImpl *)(v8 + 1);
  if (!v5)
  {
    unsigned __int8 v22 = v6;
    int v23 = 0;
LABEL_30:
    unint64_t v6 = 0;
    unsigned int v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v25 = a2[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v25 + 16))(v25, v23, v22);
        unsigned int v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unsigned int v5 = 0;
      }
    }
    goto LABEL_31;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    BOOL v26 = a2[3];
    if (v26 && v6) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v5);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 56) = 0;
    goto LABEL_24;
  }
  if (!v9)
  {
    LOBYTE(v30) = 0;
    unsigned __int8 v32 = 0;
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 48) = 0;
LABEL_22:
    *(unsigned char *)(a1 + 56) = 1;
    return std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v5);
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v39);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v37);
  IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)a2, (uint64_t)&v34);
  uint64_t v10 = IPC::Decoder::decode<std::optional<unsigned int>>((IPC::Decoder *)a2);
  char v12 = v11;
  uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a2);
  uint64_t v15 = *a2;
  if (!*a2)
  {
    int v18 = 0;
    LOBYTE(v30) = 0;
    unsigned __int8 v32 = 0;
    if (v38)
    {
      unint64_t v27 = v37;
      uint64_t v37 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          int v18 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_12;
        }
        WTF::StringImpl::destroy(v27, v5);
      }
      int v18 = 0;
    }
LABEL_12:
    if (v40)
    {
      uint64_t v19 = v39;
      unsigned int v39 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::destroy(v19, v5);
          if (!v15)
          {
LABEL_37:
            unsigned int v5 = *a2;
            uint64_t v28 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            unsigned int v29 = a2[3];
            if (v29 && v28)
            {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v29 + 16))(v29, v5);
              int v18 = v32;
            }
          }
LABEL_20:
          if (v18)
          {
            long long v20 = v30;
            long long v21 = *(_OWORD *)v31;
            long long v30 = 0uLL;
            *(_OWORD *)a1 = v20;
            *(_OWORD *)(a1 + 16) = v21;
            *(_OWORD *)(a1 + 26) = *(_OWORD *)&v31[10];
            *(unsigned char *)(a1 + 48) = 1;
            goto LABEL_22;
          }
          *(unsigned char *)a1 = 0;
          *(unsigned char *)(a1 + 56) = 0;
          std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v5);
LABEL_24:
          unsigned int v5 = *a2;
          int v14 = a2[1];
          *a2 = 0;
          a2[1] = 0;
          uint64_t result = (uint64_t)a2[3];
          if (!result) {
            return result;
          }
          goto LABEL_27;
        }
        *(_DWORD *)v19 -= 2;
      }
    }
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_20;
  }
  if (v40)
  {
    unint64_t v16 = v39;
    unsigned int v39 = 0;
    if (v38)
    {
      uint64_t v17 = v37;
      uint64_t v37 = 0;
      if (v36)
      {
        *(void *)&long long v33 = v34;
        BYTE8(v33) = v35;
        if (v12)
        {
          if ((result & 0xFF0000) != 0)
          {
            *(void *)&long long v30 = v16;
            *((void *)&v30 + 1) = v17;
            *(_OWORD *)unsigned int v31 = v33;
            *(_DWORD *)&v31[16] = v10;
            v31[20] = BYTE4(v10);
            *(_WORD *)&v31[24] = result;
            int v18 = 1;
            unsigned __int8 v32 = 1;
            goto LABEL_12;
          }
        }
      }
    }
  }
  __break(1u);
LABEL_27:
  if (v14) {
    return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
  }
  return result;
}

void sub_1988759CC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::VideoConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoConfiguration> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AudioConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::AudioConfiguration> const&>(a1, a2 + 48);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 104);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 128);
  char v4 = *(unsigned char *)(a2 + 152);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaEncodingConfiguration,void>::decode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebCore::VideoConfiguration>>((uint64_t)&v74, (WTF::StringImpl **)a1);
  IPC::Decoder::decode<std::optional<WebCore::AudioConfiguration>>((uint64_t)&v69, (WTF::StringImpl **)a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v65, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v61, (IPC::Decoder *)a1);
  LOWORD(v47) = 0;
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::operator>><BOOL>((void *)a1, &v47);
  uint64_t v10 = BYTE1(v47);
  if (!BYTE1(v47)) {
    goto LABEL_67;
  }
  char v11 = (char)v47;
  while (1)
  {
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 160) = 0;
      goto LABEL_51;
    }
    if (v78)
    {
      LOBYTE(v33) = 0;
      char v36 = 0;
      int v12 = v77;
      if (v77)
      {
        __int16 v13 = v74;
        uint64_t v74 = 0;
        long long v33 = v13;
        long long v34 = v75;
        long long v35 = v76;
        char v36 = 1;
      }
      if (v73)
      {
        LOBYTE(v37) = 0;
        char v40 = 0;
        int v14 = v72;
        if (v72)
        {
          uint64_t v15 = v69;
          uint64_t v6 = v70;
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          uint64_t v37 = v15;
          uint64_t v38 = v6;
          v39[0] = v71[0];
          *(_OWORD *)((char *)v39 + 10) = *(_OWORD *)((char *)v71 + 10);
          char v40 = 1;
        }
        if (v68)
        {
          LOBYTE(v41) = 0;
          unsigned __int8 v43 = 0;
          int v16 = v67;
          if (v67)
          {
            uint64_t v41 = v65;
            int v7 = v66;
            unsigned int v8 = HIDWORD(v66);
            uint64_t v65 = 0;
            uint64_t v66 = 0;
            unint64_t v42 = __PAIR64__(v8, v7);
            int v17 = 1;
            unsigned __int8 v43 = 1;
          }
          else
          {
            int v17 = 0;
          }
          unsigned int v18 = v64;
          if (v64)
          {
            LOBYTE(v44) = 0;
            char v46 = 0;
            int v19 = v63;
            if (v63)
            {
              uint64_t v44 = v61;
              unsigned int v18 = v62;
              unsigned int v9 = HIDWORD(v62);
              uint64_t v61 = 0;
              uint64_t v62 = 0;
              unint64_t v45 = __PAIR64__(v9, v18);
              char v46 = 1;
            }
            LOBYTE(v47) = 0;
            char v50 = 0;
            if (v77)
            {
              long long v20 = v33;
              long long v33 = 0;
              unsigned int v47 = v20;
              long long v48 = v34;
              long long v49 = v35;
              char v50 = 1;
            }
            LOBYTE(v51) = 0;
            char v53 = 0;
            if (v72)
            {
              uint64_t v21 = v37;
              uint64_t v37 = 0;
              uint64_t v38 = 0;
              *(void *)&long long v51 = v21;
              *((void *)&v51 + 1) = v6;
              v52[0] = v39[0];
              *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)((char *)v39 + 10);
              char v53 = 1;
            }
            LOBYTE(v54) = 0;
            unsigned __int8 v56 = 0;
            if (v67)
            {
              uint64_t v22 = v41;
              uint64_t v41 = 0;
              unint64_t v42 = 0;
              uint64_t v54 = v22;
              unint64_t v55 = __PAIR64__(v8, v7);
              uint64_t v6 = 1;
              unsigned __int8 v56 = 1;
            }
            else
            {
              uint64_t v6 = 0;
            }
            LOBYTE(v57) = 0;
            char v59 = 0;
            if (v63)
            {
              uint64_t v23 = v44;
              uint64_t v44 = 0;
              unint64_t v45 = 0;
              uint64_t v57 = v23;
              unint64_t v58 = __PAIR64__(v9, v18);
              int v7 = 1;
              char v59 = 1;
            }
            if (v10) {
              break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_67:
    unsigned int v5 = *(WTF::StringImpl **)a1;
    uint64_t v31 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(WTF::StringImpl **)(a1 + 24);
    if (result)
    {
      uint64_t v32 = v10;
      if (v31) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
      }
      char v11 = 0;
      uint64_t v10 = v32;
    }
    else
    {
      char v11 = 0;
    }
  }
  char v60 = v11;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v12)
  {
    uint64_t v24 = v47;
    unsigned int v47 = 0;
    *(void *)a2 = v24;
    *(_OWORD *)(a2 + 8) = v48;
    *(_OWORD *)(a2 + 24) = v49;
    *(unsigned char *)(a2 + 40) = 1;
  }
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  if (v14)
  {
    long long v25 = v51;
    long long v26 = v52[0];
    long long v51 = 0uLL;
    *(_OWORD *)(a2 + 48) = v25;
    *(_OWORD *)(a2 + 64) = v26;
    *(_OWORD *)(a2 + 74) = *(_OWORD *)((char *)v52 + 10);
    *(unsigned char *)(a2 + 96) = 1;
  }
  *(unsigned char *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  if (v16)
  {
    *(void *)(a2 + 104) = v54;
    unint64_t v27 = v55;
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    *(void *)(a2 + 112) = v27;
    *(unsigned char *)(a2 + 120) = 1;
  }
  *(unsigned char *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  if (v19)
  {
    *(void *)(a2 + 128) = v57;
    unint64_t v28 = v58;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
    *(void *)(a2 + 136) = v28;
    *(unsigned char *)(a2 + 144) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v5);
    LODWORD(v6) = v56;
  }
  *(unsigned char *)(a2 + 152) = v11;
  *(unsigned char *)(a2 + 160) = 1;
  if (v6) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v5);
  }
  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v5);
  if (v50)
  {
    long long v30 = v47;
    unsigned int v47 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  if (v19)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v29);
    int v17 = v43;
  }
  if (v17) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v29);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v29);
  if (v36)
  {
    uint64_t result = v33;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v33, v5);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
LABEL_51:
  if (v64 && v63) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v5);
  }
  if (v68 && v67) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v5);
  }
  if (v73) {
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v69, v5);
  }
  if (v78)
  {
    if (v77)
    {
      uint64_t result = v74;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v74, v5);
        }
        else {
          *(_DWORD *)v74 -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198875F3C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 232) && *(unsigned char *)(v2 - 240)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 256, a2);
  }
  if (*(unsigned char *)(v2 - 200) && *(unsigned char *)(v2 - 208)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 224, a2);
  }
  if (*(unsigned char *)(v2 - 136)) {
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2 - 192, (WTF::StringImpl *)a2);
  }
  if (*(unsigned char *)(v2 - 72)) {
    BOOL v4 = *(unsigned char *)(v2 - 80) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int v5 = *(WTF::StringImpl **)(v2 - 120);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::VideoConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::VideoConfiguration> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::AudioConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::AudioConfiguration> const&>(a1, a2 + 48);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 104);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 128);
  char v5 = *(unsigned char *)(a2 + 152);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 153));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaDecodingConfiguration,void>::decode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebCore::VideoConfiguration>>((uint64_t)&v95, (WTF::StringImpl **)a1);
  IPC::Decoder::decode<std::optional<WebCore::AudioConfiguration>>((uint64_t)&v90, (WTF::StringImpl **)a1);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v86, (IPC::Decoder *)a1);
  LODWORD(result) = IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v82, (IPC::Decoder *)a1);
  unint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = *(WTF::StringImpl **)a1;
  unint64_t v9 = *(void *)(a1 + 16) - *(void *)a1;
  if (v7 <= v9) {
    goto LABEL_74;
  }
  uint64_t v10 = (unsigned __int8 *)v8 + v9;
  *(void *)(a1 + 16) = v10 + 1;
  if (!v8)
  {
    unint64_t v39 = v7;
    char v40 = 0;
    goto LABEL_75;
  }
  unsigned int v11 = *v10;
  if (v11 >= 3) {
    goto LABEL_76;
  }
  unsigned int v12 = v11 | 0x100;
LABEL_5:
  if (v7 > *(void *)(a1 + 16) - (void)v8)
  {
    __int16 v13 = *(unsigned __int8 **)(a1 + 16);
    *(void *)(a1 + 16) = v13 + 1;
    if (v8)
    {
      unsigned int v14 = *v13;
      if (v14 <= 1)
      {
        int v15 = 0;
        BOOL v16 = v14 != 0;
        char v17 = v12;
        goto LABEL_9;
      }
      char v44 = v12;
      goto LABEL_82;
    }
    char v44 = v12;
    char v46 = 0;
    goto LABEL_80;
  }
  char v44 = v12;
  while (1)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v45 = *(void *)(a1 + 24);
    if (v45)
    {
      char v52 = v44;
      unsigned int v53 = v12;
      if (v7)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v45 + 16))(v45, v8);
        char v46 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        char v46 = 0;
      }
      unsigned int v12 = v53;
      char v44 = v52;
    }
    else
    {
      char v46 = 0;
      unint64_t v7 = 0;
    }
LABEL_80:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v47 = *(void *)(a1 + 24);
    if (v47)
    {
      char v50 = v44;
      unsigned int v51 = v12;
      if (v7)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v47 + 16))(v47, v46);
        unsigned int v8 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        unsigned int v8 = 0;
      }
      unsigned int v12 = v51;
      char v44 = v50;
    }
    else
    {
      unsigned int v8 = 0;
      unint64_t v7 = 0;
    }
LABEL_82:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(WTF::StringImpl **)(a1 + 24);
    if (!result
      || !v7
      || (char v48 = v44,
          unsigned int v49 = v12,
          uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v8), !*(void *)a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 160) = 0;
      goto LABEL_58;
    }
    unsigned int v12 = v49;
    char v17 = v48;
    BOOL v16 = 0;
    int v15 = 1;
LABEL_9:
    if (v99)
    {
      LOBYTE(v54) = 0;
      char v57 = 0;
      int v18 = v98;
      if (v98)
      {
        int v19 = v95;
        uint64_t v95 = 0;
        uint64_t v54 = v19;
        long long v55 = v96;
        long long v56 = v97;
        char v57 = 1;
      }
      if (v94)
      {
        LOBYTE(v58) = 0;
        char v61 = 0;
        int v20 = v93;
        if (v93)
        {
          uint64_t v21 = v90;
          uint64_t v5 = v91;
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          uint64_t v58 = v21;
          uint64_t v59 = v5;
          v60[0] = v92[0];
          *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)((char *)v92 + 10);
          char v61 = 1;
        }
        if (v89)
        {
          LOBYTE(v62) = 0;
          unsigned __int8 v64 = 0;
          int v22 = v88;
          if (v88)
          {
            uint64_t v62 = v86;
            unsigned int v6 = v87;
            LODWORD(result) = HIDWORD(v87);
            uint64_t v86 = 0;
            uint64_t v87 = 0;
            unint64_t v63 = __PAIR64__(result, v6);
            int v23 = 1;
            unsigned __int8 v64 = 1;
          }
          else
          {
            int v23 = 0;
          }
          unint64_t v24 = v85;
          if (v85)
          {
            LOBYTE(v65) = 0;
            char v67 = 0;
            int v25 = v84;
            if (v84)
            {
              uint64_t v65 = v82;
              unint64_t v24 = v83;
              unint64_t v7 = HIDWORD(v83);
              uint64_t v82 = 0;
              uint64_t v83 = 0;
              unint64_t v66 = __PAIR64__(v7, v24);
              char v67 = 1;
            }
            LOBYTE(v68) = 0;
            char v71 = 0;
            if (v98)
            {
              long long v26 = v54;
              uint64_t v54 = 0;
              char v68 = v26;
              long long v69 = v55;
              long long v70 = v56;
              char v71 = 1;
            }
            LOBYTE(v72) = 0;
            char v74 = 0;
            if (v93)
            {
              uint64_t v27 = v58;
              uint64_t v58 = 0;
              uint64_t v59 = 0;
              *(void *)&long long v72 = v27;
              *((void *)&v72 + 1) = v5;
              v73[0] = v60[0];
              *(_OWORD *)((char *)v73 + 10) = *(_OWORD *)((char *)v60 + 10);
              char v74 = 1;
            }
            LOBYTE(v75) = 0;
            unsigned __int8 v77 = 0;
            if (v88)
            {
              uint64_t v28 = v62;
              uint64_t v62 = 0;
              unint64_t v63 = 0;
              uint64_t v75 = v28;
              unint64_t v76 = __PAIR64__(result, v6);
              int v29 = 1;
              unsigned __int8 v77 = 1;
            }
            else
            {
              int v29 = 0;
            }
            LOBYTE(v78) = 0;
            char v80 = 0;
            if (v84)
            {
              uint64_t v30 = v65;
              uint64_t v65 = 0;
              unint64_t v66 = 0;
              uint64_t v78 = v30;
              unint64_t v79 = __PAIR64__(v7, v24);
              char v80 = 1;
            }
            if (v12 > 0xFF)
            {
              LOBYTE(v81) = v17;
              if (!v15) {
                break;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_74:
    unint64_t v39 = 0;
    char v40 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v41 = *(void *)(a1 + 24);
    if (v41)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
        char v40 = *(WTF::StringImpl **)a1;
        unint64_t v39 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v39 = 0;
        char v40 = 0;
      }
    }
LABEL_75:
    unint64_t v7 = 0;
    unsigned int v8 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v42 = *(void *)(a1 + 24);
    if (v42)
    {
      if (v39)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v42 + 16))(v42, v40, v39);
        unsigned int v8 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v7 = 0;
        unsigned int v8 = 0;
      }
    }
LABEL_76:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v43 = *(void *)(a1 + 24);
    if (v43)
    {
      if (v7)
      {
        LODWORD(result) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v43 + 16))(v43, v8);
        unsigned int v12 = 0;
        unsigned int v8 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *(void *)(a1 + 8);
        goto LABEL_5;
      }
      unsigned int v8 = 0;
      char v44 = 0;
      unsigned int v12 = 0;
    }
    else
    {
      unsigned int v8 = 0;
      char v44 = 0;
      unsigned int v12 = 0;
      unint64_t v7 = 0;
    }
  }
  HIBYTE(v81) = v16;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v18)
  {
    uint64_t v31 = v68;
    char v68 = 0;
    *(void *)a2 = v31;
    *(_OWORD *)(a2 + 8) = v69;
    *(_OWORD *)(a2 + 24) = v70;
    *(unsigned char *)(a2 + 40) = 1;
  }
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  if (v20)
  {
    long long v32 = v72;
    long long v33 = v73[0];
    long long v72 = 0uLL;
    *(_OWORD *)(a2 + 48) = v32;
    *(_OWORD *)(a2 + 64) = v33;
    *(_OWORD *)(a2 + 74) = *(_OWORD *)((char *)v73 + 10);
    *(unsigned char *)(a2 + 96) = 1;
  }
  *(unsigned char *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  if (v22)
  {
    *(void *)(a2 + 104) = v75;
    unint64_t v34 = v76;
    uint64_t v75 = 0;
    unint64_t v76 = 0;
    *(void *)(a2 + 112) = v34;
    *(unsigned char *)(a2 + 120) = 1;
  }
  *(unsigned char *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  if (v25)
  {
    *(void *)(a2 + 128) = v78;
    unint64_t v35 = v79;
    uint64_t v78 = 0;
    unint64_t v79 = 0;
    *(void *)(a2 + 136) = v35;
    *(unsigned char *)(a2 + 144) = 1;
    __int16 v36 = v81;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, (void *)v24);
    int v29 = v77;
  }
  else
  {
    __int16 v36 = v81;
  }
  *(_WORD *)(a2 + 152) = v36;
  *(unsigned char *)(a2 + 160) = 1;
  if (v29) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, (void *)v24);
  }
  std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, (WTF::StringImpl *)v24);
  if (v71)
  {
    uint64_t v38 = v68;
    char v68 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v37);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  if (v25)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v37);
    int v23 = v64;
  }
  if (v23) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v37);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58, v37);
  if (v57)
  {
    uint64_t result = v54;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v54, v8);
      }
      else {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
LABEL_58:
  if (v85 && v84) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v8);
  }
  if (v89 && v88) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v86, v8);
  }
  if (v94) {
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v90, v8);
  }
  if (v99)
  {
    if (v98)
    {
      uint64_t result = v95;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v95, v8);
        }
        else {
          *(_DWORD *)v95 -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198876728(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 232) && *(unsigned char *)(v2 - 240)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 256, a2);
  }
  if (*(unsigned char *)(v2 - 200) && *(unsigned char *)(v2 - 208)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 224, a2);
  }
  if (*(unsigned char *)(v2 - 136)) {
    std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100](v2 - 192, (WTF::StringImpl *)a2);
  }
  if (*(unsigned char *)(v2 - 72)) {
    BOOL v4 = *(unsigned char *)(v2 - 80) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(WTF::StringImpl **)(v2 - 120);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebCore::ResourceResponseData>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[288]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_198876800(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*((unsigned char *)v2 + 288))
  {
    if (*((unsigned char *)v2 + 280)) {
      WebCore::ResourceResponseData::~ResourceResponseData(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(IPC::Encoder *a1, WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponseBase::getResponseData(v4, this);
  IPC::ArgumentCoder<std::optional<WebCore::ResourceResponseData>,void>::encode<IPC::Encoder,std::optional<WebCore::ResourceResponseData>>(a1, (uint64_t)v4);
  if (v5) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v4, v3);
  }
}

void sub_198876874(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a44) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ResourceResponse,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebCore::ResourceResponseData>>(a1, v13);
  if (*(void *)a1)
  {
    if (!v14)
    {
      __break(1u);
      return;
    }
    std::__optional_move_base<WebCore::ResourceResponseData,false>::__optional_move_base[abi:sn180100](v9, (uint64_t)v13);
    MEMORY[0x199735450](v10, v9);
    WebCore::ResourceResponse::ResourceResponse((uint64_t)v11, (uint64_t)v10);
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::__optional_destruct_base[abi:sn180100]<WebCore::ResourceResponse>((uint64_t)a2, (uint64_t)v11);
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v11, v5);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v10, v7);
    if (v9[280]) {
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v9, v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[256] = 0;
  }
  if (v14) {
    BOOL v8 = v13[280] == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v13, v4);
  }
}

void sub_19887696C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,int a46,char a47)
{
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)&STACK[0x218], a2);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a47, v48);
  if (a45) {
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&a10, v49);
  }
  if (LOBYTE(STACK[0x438]))
  {
    if (LOBYTE(STACK[0x430])) {
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&STACK[0x318], v49);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1988769B8()
{
}

void sub_1988769C0()
{
}

void IPC::ArgumentCoder<WebCore::ResourceResponseData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 64));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 80));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, a2 + 88);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, a2 + 104);
  IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::encode<IPC::Encoder,std::optional<WebCore::NetworkLoadMetrics> const&>(a1, a2 + 120);
  char v20 = *(unsigned char *)(a2 + 256);
  IPC::Encoder::operator<<<BOOL>(a1, &v20);
  char v21 = *(unsigned char *)(a2 + 257);
  IPC::Encoder::operator<<<BOOL>(a1, &v21);
  char v22 = *(unsigned char *)(a2 + 258);
  IPC::Encoder::operator<<<BOOL>(a1, &v22);
  char v4 = *(unsigned char *)(a2 + 259);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x198876B78);
  }
  *char v5 = v4;
  char v7 = *(unsigned char *)(a2 + 260);
  BOOL v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198876B98);
  }
  *BOOL v8 = v7;
  char v10 = *(unsigned char *)(a2 + 261);
  unsigned int v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198876BB8);
  }
  *unsigned int v11 = v10;
  char v13 = *(unsigned char *)(a2 + 262);
  char v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198876BD8);
  }
  *char v14 = v13;
  int v16 = *(unsigned __int8 *)(a2 + 272);
  char v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v16)
  {
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x198876C18);
    }
    *char v17 = 1;
    if (*(unsigned char *)(a2 + 272))
    {
      IPC::ArgumentCoder<__SecTrust *,void>::encode(a1);
    }
    else
    {
      uint64_t v19 = std::__throw_bad_optional_access[abi:sn180100]();
      IPC::Decoder::decode<short>(v19);
    }
  }
  else
  {
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x198876BF8);
    }
    *char v17 = 0;
  }
}

uint64_t IPC::Decoder::decode<short>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<short,void>::decode<IPC::Decoder>(a1);
  if ((v2 & 0xFF0000) == 0) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::NetworkLoadMetrics>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 136)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198876C9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 136)) {
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = *(unsigned char *)(a2 + 2);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  char v8 = *(unsigned char *)(a2 + 3);
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  char v9 = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, &v9);
  char v10 = *(unsigned char *)(a2 + 5);
  IPC::Encoder::operator<<<BOOL>(a1, &v10);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 6));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 16));
  return IPC::ArgumentCoder<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 32));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::FetchOptions,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = IPC::ArgumentCoder<WebCore::FetchOptionsDestination,void>::decode<IPC::Decoder>(a1);
  if (v4 <= 0xFFu) {
    goto LABEL_37;
  }
  while (1)
  {
    unint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = *(void *)a1;
    unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
    if (v5 <= v7)
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v35 = *((void *)a1 + 3);
      if (v35)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v6, v5);
          uint64_t v34 = *(void *)a1;
          unint64_t v33 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v33 = 0;
          uint64_t v34 = 0;
        }
      }
      goto LABEL_39;
    }
    char v8 = (char *)(v6 + v7);
    *((void *)a1 + 2) = v8 + 1;
    if (!v6)
    {
      unint64_t v33 = v5;
      uint64_t v34 = 0;
LABEL_39:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v36 = *((void *)a1 + 3);
      if (v36 && v33) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34);
      }
      goto LABEL_40;
    }
    if (*v8 < 4u)
    {
      char v46 = *v8;
      int v47 = 0;
      goto LABEL_6;
    }
LABEL_40:
    IPC::Decoder::markInvalid(a1);
    char v46 = 0;
    int v47 = 1;
LABEL_6:
    unsigned __int16 v9 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(a1);
    if (v9 <= 0xFFu) {
      IPC::Decoder::markInvalid(a1);
    }
    unsigned __int16 v10 = IPC::ArgumentCoder<WebCore::FetchOptionsCache,void>::decode<IPC::Decoder>(a1);
    if (v10 <= 0xFFu) {
      IPC::Decoder::markInvalid(a1);
    }
    unint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = *(void *)a1;
    unint64_t v13 = *((void *)a1 + 2) - *(void *)a1;
    if (v11 <= v13)
    {
      unint64_t v37 = 0;
      uint64_t v38 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v39 = *((void *)a1 + 3);
      if (v39)
      {
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v12, v11);
          uint64_t v38 = *(void *)a1;
          unint64_t v37 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v37 = 0;
          uint64_t v38 = 0;
        }
      }
      goto LABEL_42;
    }
    char v14 = (unsigned __int8 *)(v12 + v13);
    *((void *)a1 + 2) = v14 + 1;
    if (!v12)
    {
      unint64_t v37 = v11;
      uint64_t v38 = 0;
LABEL_42:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v40 = *((void *)a1 + 3);
      if (v40 && v37) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
      }
      goto LABEL_43;
    }
    unsigned int v15 = *v14;
    if (v15 < 3)
    {
      int v16 = 0;
      goto LABEL_14;
    }
LABEL_43:
    IPC::Decoder::markInvalid(a1);
    LOBYTE(v15) = 0;
    int v16 = 1;
LABEL_14:
    unsigned __int16 v17 = IPC::ArgumentCoder<WebCore::ReferrerPolicy,void>::decode<IPC::Decoder>(a1);
    if (v17 <= 0xFFu) {
      IPC::Decoder::markInvalid(a1);
    }
    unint64_t v18 = *((void *)a1 + 1);
    uint64_t v19 = *(void *)a1;
    unint64_t v20 = *((void *)a1 + 2) - *(void *)a1;
    if (v18 <= v20)
    {
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v43 = *((void *)a1 + 3);
      if (v43)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
          uint64_t v42 = *(void *)a1;
          unint64_t v41 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v41 = 0;
          uint64_t v42 = 0;
        }
      }
      goto LABEL_45;
    }
    char v21 = (unsigned __int8 *)(v19 + v20);
    *((void *)a1 + 2) = v21 + 1;
    if (!v19)
    {
      unint64_t v41 = v18;
      uint64_t v42 = 0;
LABEL_45:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v44 = *((void *)a1 + 3);
      if (v44 && v41)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v42, v41);
        unsigned int v22 = 0;
        uint64_t v19 = *(void *)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        unsigned int v22 = 0;
      }
      goto LABEL_47;
    }
    unsigned int v22 = *v21;
    if (v22 < 2)
    {
      int v23 = 0;
      char v24 = 1;
      goto LABEL_20;
    }
LABEL_47:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v45 = *((void *)a1 + 3);
    if (v45 && v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v19);
    }
    char v24 = 0;
    int v23 = 1;
LABEL_20:
    char v25 = v22 ? v24 : 0;
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v48);
    IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(v52, a1);
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>>(v50, a1);
    if (!*(void *)a1) {
      break;
    }
    if (v4 > 0xFFu && !v47 && v9 > 0xFFu && v10 > 0xFFu && !v16 && v17 > 0xFFu && !v23 && v49 && v53 && v51)
    {
      uint64_t v28 = v52[0];
      uint64_t v29 = v52[1];
      uint64_t v30 = v50[0];
      uint64_t v31 = v50[1];
      long long v32 = v48;
      *(unsigned char *)a2 = v4;
      *(unsigned char *)(a2 + 1) = v46;
      *(unsigned char *)(a2 + 2) = v9;
      *(unsigned char *)(a2 + 3) = v10;
      *(unsigned char *)(a2 + 4) = v15;
      *(unsigned char *)(a2 + 5) = v17;
      *(unsigned char *)(a2 + 6) = v25;
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 16) = v28;
      *(void *)(a2 + 32) = v30;
      *(void *)(a2 + 40) = v31;
      *(void *)(a2 + 24) = v29;
      *(unsigned char *)(a2 + 48) = 1;
      return result;
    }
    __break(1u);
LABEL_37:
    IPC::Decoder::markInvalid(a1);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (v49)
  {
    uint64_t result = v48;
    char v48 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198877288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1988772A0()
{
}

uint64_t IPC::Decoder::decode<WebCore::FetchOptionsDestination>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::FetchOptionsDestination,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

unint64_t IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, (int *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 24));

  return IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode(a1, (float *)(a2 + 32));
}

void *IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode(uint64_t *a1, _DWORD *a2)
{
  IPC::StreamConnectionEncoder::operator<<<int const&>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 1);
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, a2 + 2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 4));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));

  return IPC::ArgumentCoder<WebCore::RectEdges<float>,void>::encode(a1, a2 + 8);
}

unsigned int *IPC::ArgumentCoder<WebCore::ControlStyle,void>::decode@<X0>(IPC::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)this;
  unint64_t v6 = ((*((void *)this + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)this;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v21 = *((void *)this + 3);
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v5, v4);
        uint64_t v20 = *(void *)this;
        unint64_t v19 = *((void *)this + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_38;
  }
  char v8 = (unsigned int *)(v5 + v6);
  *((void *)this + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v19 = v4;
    uint64_t v20 = 0;
LABEL_38:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v22 = *((void *)this + 3);
    if (v22 && v19) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
    }
    goto LABEL_39;
  }
  uint64_t v9 = *v8;
  if (v9 >= 0x40000)
  {
LABEL_39:
    IPC::Decoder::markInvalid(this);
    unint64_t v10 = 0;
    goto LABEL_9;
  }
  unint64_t v10 = v9 | 0x100000000;
LABEL_9:
  uint64_t v11 = IPC::Decoder::decode<float>(this);
  uint64_t v12 = IPC::Decoder::decode<float>(this);
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)this, &v34);
  if (!v35)
  {
    uint64_t v16 = *(void *)this;
    uint64_t v17 = *((void *)this + 1);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v18 = *((void *)this + 3);
    if (v18)
    {
      if (v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)this, &v32);
  if (!v33)
  {
    uint64_t v23 = *(void *)this;
    uint64_t v24 = *((void *)this + 1);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v25 = *((void *)this + 3);
    if (v25)
    {
      if (v24) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
      }
    }
  }
  uint64_t result = (unsigned int *)IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)this, (uint64_t)&v30);
  if (!*(void *)this)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    goto LABEL_20;
  }
  unint64_t v15 = HIDWORD(v10);
  if (HIDWORD(v10))
  {
    LODWORD(v26) = v10;
    if ((v11 & 0xFF00000000) != 0)
    {
      HIDWORD(v26) = v11;
      if ((v12 & 0xFF00000000) != 0)
      {
        unint64_t v15 = v35;
        if (v35)
        {
          WebCore::Color::Color();
          unint64_t v15 = v33;
          if (v33)
          {
            WebCore::Color::Color();
            unint64_t v15 = v31;
            if (v31)
            {
              long long v29 = v30;
              *(void *)a2 = v26;
              *(_DWORD *)(a2 + 8) = v12;
              WebCore::Color::Color();
              uint64_t result = (unsigned int *)WebCore::Color::Color();
              *(_OWORD *)(a2 + 32) = v29;
              *(unsigned char *)(a2 + 48) = 1;
              if ((*(void *)v28 & 0x8000000000000) != 0)
              {
                uint64_t result = (unsigned int *)(*(void *)v28 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v28 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, result);
                  uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
                }
              }
              if ((*(void *)v27 & 0x8000000000000) != 0)
              {
                uint64_t result = (unsigned int *)(*(void *)v27 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v27 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, result);
                  uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
                }
              }
LABEL_20:
              if (!v33) {
                goto LABEL_22;
              }
              unint64_t v15 = v32;
              if ((v32 & 0x8000000000000) == 0) {
                goto LABEL_22;
              }
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
  __break(1u);
LABEL_26:
  uint64_t result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
  }
LABEL_22:
  if (v35 && (v34 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v14);
    }
  }
  return result;
}

void sub_19887772C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::optional<WebCore::Color>::~optional((uint64_t)va, a2);
  std::optional<WebCore::Color>::~optional(v12 - 64, v14);
  _Unwind_Resume(a1);
}

void WebCore::ControlStyle::~ControlStyle(WebCore::ControlStyle *this, void *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 0x8000000000000) != 0)
  {
    unint64_t v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      unint64_t v6 = this;
      WTF::fastFree((WTF *)v4, a2);
      this = v6;
    }
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 0x8000000000000) != 0)
  {
    uint64_t v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(unsigned __int8 *)(a2 + 12);
  if ((v4 - 5) <= 3)
  {
    LOBYTE(v14[0]) = 0;
LABEL_10:
    IPC::Encoder::operator<<<BOOL>(result, (char *)v14);
    char v5 = *(unsigned char *)(a2 + 12);
    goto LABEL_11;
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0xA:
      char v5 = 3;
      goto LABEL_11;
    case 0xB:
      char v5 = 2;
      goto LABEL_11;
    case 0xC:
      LOBYTE(v14[0]) = 4;
      IPC::Encoder::operator<<<BOOL>(result, (char *)v14);
      LOBYTE(v14[0]) = *(unsigned char *)(a2 + 32);
      IPC::Encoder::operator<<<BOOL>(v3, (char *)v14);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 40));
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 48));
      double v7 = *(double *)(a2 + 56);
      return (IPC::Encoder *)IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, v7);
    case 0xD:
      LOBYTE(v14[0]) = 5;
      IPC::Encoder::operator<<<BOOL>(result, (char *)v14);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 32));
      double v7 = *(double *)(a2 + 40);
      return (IPC::Encoder *)IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, v7);
    case 0x10:
      char v5 = 6;
      goto LABEL_11;
    case 0x17:
      char v5 = 1;
      goto LABEL_11;
    default:
      if ((v4 & 0xFE) == 0x1A)
      {
        char v6 = 7;
        goto LABEL_9;
      }
      if (v4 == 28)
      {
        char v5 = 8;
        goto LABEL_11;
      }
      if ((v4 - 29) <= 1)
      {
        char v6 = 9;
LABEL_9:
        LOBYTE(v14[0]) = v6;
        goto LABEL_10;
      }
      if ((v4 & 0xFE) != 0xE)
      {
        if (*(unsigned __int8 *)(a2 + 12) <= 0x14u)
        {
          if (v4 == 9 || v4 == 20)
          {
            char v6 = 13;
            goto LABEL_9;
          }
        }
        else
        {
          switch(v4)
          {
            case 21:
              char v5 = 14;
              goto LABEL_11;
            case 33:
              LOBYTE(v14[0]) = 12;
              IPC::Encoder::operator<<<BOOL>(result, (char *)v14);
              char v8 = *(unsigned char *)(a2 + 32);
              uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v3, 1uLL, 1);
              if (!v11)
              {
                __break(0xC471u);
                JUMPOUT(0x198877BBCLL);
              }
              goto LABEL_27;
            case 32:
              LOBYTE(v14[0]) = 11;
              IPC::Encoder::operator<<<BOOL>(result, (char *)v14);
              char v8 = *(unsigned char *)(a2 + 32);
              uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v3, 1uLL, 1);
              if (!v10)
              {
                __break(0xC471u);
                JUMPOUT(0x1988779F0);
              }
LABEL_27:
              *uint64_t v9 = v8;
              return (IPC::Encoder *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v3, *(float *)(a2 + 36));
          }
        }
        if ((v4 - 3) <= 1)
        {
          char v6 = 15;
          goto LABEL_9;
        }
        if (v4 != 22)
        {
          if (v4 == 17)
          {
            LOBYTE(v14[0]) = 16;
            IPC::Encoder::operator<<<BOOL>(result, (char *)v14);
            LOBYTE(v14[0]) = *(unsigned char *)(a2 + 32);
            IPC::Encoder::operator<<<BOOL>(v3, (char *)v14);
            LOBYTE(v14[0]) = *(unsigned char *)(a2 + 33);
            IPC::Encoder::operator<<<BOOL>(v3, (char *)v14);
            uint64_t v12 = *(WTF::StringImpl **)(a2 + 40);
            if (v12) {
              *(_DWORD *)v12 += 2;
            }
            v14[0] = v12;
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v3, (uint64_t *)v14);
            uint64_t result = v14[0];
            v14[0] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                return (IPC::Encoder *)WTF::StringImpl::destroy(result, v13);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
          }
          return result;
        }
        char v5 = 17;
LABEL_11:
        LOBYTE(v14[0]) = v5;
        return (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(v3, (char *)v14);
      }
      LOBYTE(v14[0]) = 10;
      IPC::Encoder::operator<<<BOOL>(result, (char *)v14);
      LOBYTE(v14[0]) = *(unsigned char *)(a2 + 12);
      IPC::Encoder::operator<<<BOOL>(v3, (char *)v14);
      v14[0] = *(WTF::StringImpl **)(a2 + 32);
      IPC::Encoder::operator<<<WebCore::IntSize const&>(v3, (int *)v14);
      *(_OWORD *)char v14 = *(_OWORD *)(a2 + 40);
      IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v3, v14);
      IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v3, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
      double v7 = *(double *)(a2 + 72);
      return (IPC::Encoder *)IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, v7);
  }
}

uint64_t *IPC::ArgumentCoder<WebCore::ControlPart,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(unsigned __int8 *)(a2 + 12);
  if ((v4 - 5) <= 3)
  {
    unint64_t v5 = result[2];
    if (v5 >= result[1]) {
      goto LABEL_111;
    }
    unint64_t v6 = v5 + 1;
    *(unsigned char *)(*result + v5) = 0;
LABEL_14:
    result[2] = v6;
    if (v6 < result[1])
    {
      *(unsigned char *)(*result + v6) = *(unsigned char *)(a2 + 12);
      result[2] = v5 + 2;
      return result;
    }
LABEL_111:
    v3[1] = 0;
    return result;
  }
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0xA:
      unint64_t v7 = result[2];
      if (v7 >= result[1]) {
        goto LABEL_111;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = *result;
      char v10 = 3;
      goto LABEL_7;
    case 0xB:
      unint64_t v7 = result[2];
      if (v7 >= result[1]) {
        goto LABEL_111;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = *result;
      char v10 = 2;
      goto LABEL_7;
    case 0xC:
      unint64_t v33 = result[2];
      if (v33 >= result[1])
      {
        result[1] = 0;
      }
      else
      {
        unint64_t v34 = v33 + 1;
        *(unsigned char *)(*result + v33) = 4;
        result[2] = v33 + 1;
        if (v33 + 1 < result[1])
        {
          v33 += 2;
          *(unsigned char *)(*result + v34) = *(unsigned char *)(a2 + 32);
          result[2] = v33;
          goto LABEL_71;
        }
        ++v33;
      }
      result[1] = 0;
LABEL_71:
      uint64_t v35 = *result;
      unint64_t v36 = *result + v33;
      unint64_t v37 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
      BOOL v18 = v37 >= v36;
      unint64_t v38 = v37 - v36;
      if (v18)
      {
        unint64_t v39 = v38 + v33;
        unint64_t v40 = v38 + v33 + 8;
        if (v39 > 0xFFFFFFFFFFFFFFF7 || v40 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(void *)(v35 + v39) = *(void *)(a2 + 40);
          result[2] = v40;
          uint64_t v35 = *result;
          unint64_t v33 = v40;
        }
      }
      unint64_t v42 = (v35 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v43 = v42 - (v35 + v33);
      if (v42 >= v35 + v33)
      {
        unint64_t v44 = v42 - v35;
        unint64_t v45 = v43 + v33 + 8;
        if (v44 > 0xFFFFFFFFFFFFFFF7 || v45 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(void *)(v35 + v44) = *(void *)(a2 + 48);
          result[2] = v45;
          uint64_t v35 = *result;
          unint64_t v33 = v45;
        }
      }
      unint64_t v47 = (v35 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v47 < v35 + v33) {
        return result;
      }
      unint64_t v48 = v47 - v35;
      if (v47 - v35 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_111;
      }
      unint64_t v21 = v48 + 8;
      if (v48 + 8 > result[1]) {
        goto LABEL_111;
      }
      uint64_t v49 = *(void *)(a2 + 56);
LABEL_103:
      *(void *)(v35 + v48) = v49;
      goto LABEL_47;
    case 0xD:
      unint64_t v50 = result[2];
      if (v50 >= result[1])
      {
        result[1] = 0;
      }
      else
      {
        *(unsigned char *)(*result + v50++) = 5;
        result[2] = v50;
      }
      uint64_t v35 = *result;
      unint64_t v51 = *result + v50;
      unint64_t v52 = (v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      BOOL v18 = v52 >= v51;
      unint64_t v53 = v52 - v51;
      if (v18)
      {
        unint64_t v54 = v53 + v50;
        unint64_t v55 = v53 + v50 + 8;
        if (v54 > 0xFFFFFFFFFFFFFFF7 || v55 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(void *)(v35 + v54) = *(void *)(a2 + 32);
          result[2] = v55;
          uint64_t v35 = *result;
          unint64_t v50 = v55;
        }
      }
      unint64_t v57 = (v35 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v57 < v35 + v50) {
        return result;
      }
      unint64_t v48 = v57 - v35;
      unint64_t v21 = v57 - v35 + 8;
      if (v57 - v35 > 0xFFFFFFFFFFFFFFF7 || v21 > result[1]) {
        goto LABEL_111;
      }
      uint64_t v49 = *(void *)(a2 + 40);
      goto LABEL_103;
    case 0x10:
      unint64_t v7 = result[2];
      if (v7 >= result[1]) {
        goto LABEL_111;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = *result;
      char v10 = 6;
      goto LABEL_7;
    case 0x17:
      unint64_t v7 = result[2];
      if (v7 >= result[1]) {
        goto LABEL_111;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = *result;
      char v10 = 1;
      goto LABEL_7;
    default:
      if ((v4 & 0xFE) == 0x1A)
      {
        unint64_t v5 = result[2];
        if (v5 >= result[1]) {
          goto LABEL_111;
        }
        unint64_t v6 = v5 + 1;
        uint64_t v11 = *result;
        char v12 = 7;
LABEL_13:
        *(unsigned char *)(v11 + v5) = v12;
        goto LABEL_14;
      }
      if (v4 == 28)
      {
        unint64_t v7 = result[2];
        if (v7 >= result[1]) {
          goto LABEL_111;
        }
        uint64_t v8 = v7 + 1;
        uint64_t v9 = *result;
        char v10 = 8;
        goto LABEL_7;
      }
      if ((v4 - 29) <= 1)
      {
        unint64_t v5 = result[2];
        if (v5 >= result[1]) {
          goto LABEL_111;
        }
        unint64_t v6 = v5 + 1;
        uint64_t v11 = *result;
        char v12 = 9;
        goto LABEL_13;
      }
      if ((v4 & 0xFE) == 0xE)
      {
        unint64_t v13 = result[2];
        if (v13 >= result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(unsigned char *)(*result + v13) = 10;
          result[2] = v13 + 1;
          if (v13 + 1 < result[1])
          {
            *(unsigned char *)(*result + v13 + 1) = *(unsigned char *)(a2 + 12);
            result[2] = v13 + 2;
LABEL_21:
            uint64_t v59 = *(WTF::StringImpl **)(a2 + 32);
            IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(result, &v59);
            char v14 = *(WTF::StringImpl **)(a2 + 48);
            uint64_t v59 = *(WTF::StringImpl **)(a2 + 40);
            IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(v3, &v59);
            uint64_t v59 = v14;
            IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(v3, &v59);
            uint64_t result = IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(v3, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
            uint64_t v15 = v3[2];
            unint64_t v16 = *v3 + v15;
            unint64_t v17 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
            BOOL v18 = v17 >= v16;
            unint64_t v19 = v17 - v16;
            if (!v18) {
              return result;
            }
            unint64_t v20 = v19 + v15;
            if (v20 > 0xFFFFFFFFFFFFFFF7) {
              goto LABEL_111;
            }
            unint64_t v21 = v20 + 8;
            if (v20 + 8 > v3[1]) {
              goto LABEL_111;
            }
            *(void *)(*v3 + v20) = *(void *)(a2 + 72);
LABEL_47:
            v3[2] = v21;
            return result;
          }
        }
        result[1] = 0;
        goto LABEL_21;
      }
      if (*(unsigned __int8 *)(a2 + 12) <= 0x14u)
      {
        if (v4 == 9 || v4 == 20)
        {
          unint64_t v5 = result[2];
          if (v5 >= result[1]) {
            goto LABEL_111;
          }
          unint64_t v6 = v5 + 1;
          uint64_t v11 = *result;
          char v12 = 13;
          goto LABEL_13;
        }
        goto LABEL_48;
      }
      if (v4 == 21)
      {
        unint64_t v7 = result[2];
        if (v7 >= result[1]) {
          goto LABEL_111;
        }
        uint64_t v8 = v7 + 1;
        uint64_t v9 = *result;
        char v10 = 14;
        goto LABEL_7;
      }
      if (v4 == 33)
      {
        unint64_t v22 = result[2];
        if (v22 < result[1])
        {
          unint64_t v23 = v22 + 1;
          uint64_t v24 = *result;
          char v25 = 12;
          goto LABEL_40;
        }
LABEL_114:
        result[1] = 0;
        goto LABEL_115;
      }
      if (v4 != 32)
      {
LABEL_48:
        if ((v4 - 3) <= 1)
        {
          unint64_t v5 = result[2];
          if (v5 >= result[1]) {
            goto LABEL_111;
          }
          unint64_t v6 = v5 + 1;
          uint64_t v11 = *result;
          char v12 = 15;
          goto LABEL_13;
        }
        if (v4 != 22)
        {
          if (v4 != 17) {
            return result;
          }
          unint64_t v30 = result[2];
          if (v30 >= result[1])
          {
            result[1] = 0;
          }
          else
          {
            *(unsigned char *)(*result + v30) = 16;
            result[2] = v30 + 1;
            if (v30 + 1 < result[1])
            {
              *(unsigned char *)(*result + v30 + 1) = *(unsigned char *)(a2 + 32);
              result[2] = v30 + 2;
              if (v30 + 2 < result[1])
              {
                *(unsigned char *)(*result + v30 + 2) = *(unsigned char *)(a2 + 33);
                result[2] = v30 + 3;
LABEL_57:
                unsigned __int8 v31 = *(WTF::StringImpl **)(a2 + 40);
                if (v31) {
                  *(_DWORD *)v31 += 2;
                }
                uint64_t v59 = v31;
                IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(result, (uint64_t *)&v59);
                uint64_t result = (uint64_t *)v59;
                uint64_t v59 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2) {
                    return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
                  }
                  else {
                    *(_DWORD *)result -= 2;
                  }
                }
                return result;
              }
LABEL_118:
              result[1] = 0;
              goto LABEL_57;
            }
          }
          result[1] = 0;
          goto LABEL_118;
        }
        unint64_t v7 = result[2];
        if (v7 >= result[1]) {
          goto LABEL_111;
        }
        uint64_t v8 = v7 + 1;
        uint64_t v9 = *result;
        char v10 = 17;
LABEL_7:
        *(unsigned char *)(v9 + v7) = v10;
        result[2] = v8;
        return result;
      }
      unint64_t v22 = result[2];
      if (v22 >= result[1]) {
        goto LABEL_114;
      }
      unint64_t v23 = v22 + 1;
      uint64_t v24 = *result;
      char v25 = 11;
LABEL_40:
      *(unsigned char *)(v24 + v22) = v25;
      result[2] = v23;
      if (v23 < result[1])
      {
        v22 += 2;
        *(unsigned char *)(*result + v23) = *(unsigned char *)(a2 + 32);
        result[2] = v22;
        goto LABEL_42;
      }
      unint64_t v22 = v23;
LABEL_115:
      result[1] = 0;
LABEL_42:
      unint64_t v26 = *result + v22;
      unint64_t v27 = (v26 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v18 = v27 >= v26;
      unint64_t v28 = v27 - v26;
      if (v18)
      {
        unint64_t v29 = v28 + v22;
        if (v29 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_111;
        }
        unint64_t v21 = v29 + 4;
        if (v29 + 4 > result[1]) {
          goto LABEL_111;
        }
        *(_DWORD *)(*result + v29) = *(_DWORD *)(a2 + 36);
        goto LABEL_47;
      }
      return result;
  }
}

void sub_198878274(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ControlPart,void>::decode@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  unint64_t v5 = (uint64_t *)result;
  unint64_t v7 = *((void *)result + 1);
  uint64_t v8 = *(void *)result;
  unint64_t v9 = *((void *)result + 2) - *(void *)result;
  if (v7 <= v9)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v46 = *((void *)result + 3);
    if (v46)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v46 + 16))(v46, v8, v7);
        uint64_t v45 = *v5;
        uint64_t v44 = v5[1];
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v45 = 0;
      }
    }
    goto LABEL_102;
  }
  char v10 = (unsigned __int8 *)(v8 + v9);
  *((void *)result + 2) = v10 + 1;
  if (!v8)
  {
    uint64_t v44 = v7;
    uint64_t v45 = 0;
LABEL_102:
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t result = (WTF::StringImpl *)v5[3];
    if (result && v44) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v45);
    }
    goto LABEL_103;
  }
  LODWORD(v11) = *v10;
  if (v11 >= 0x12)
  {
LABEL_103:
    LODWORD(v11) = 0;
    int v12 = 0;
    goto LABEL_5;
  }
  int v12 = 1;
LABEL_5:
  unsigned int v13 = v11 | (v12 << 8);
  if (v13 <= 0xFF)
  {
    uint64_t v47 = *v5;
    uint64_t v48 = v5[1];
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t result = (WTF::StringImpl *)v5[3];
    if (result)
    {
      if (v48) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v47);
      }
    }
  }
  uint64_t v14 = *v5;
  if (!*v5) {
    goto LABEL_159;
  }
  if (!v11 && v13 >= 0x100)
  {
    if ((unsigned __int16)IPC::ArgumentCoder<WebCore::StyleAppearance,void>::decode<IPC::Decoder>(v5) > 0xFFu)
    {
      if (*v5)
      {
        uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
        uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
        uint64_t v15 = &unk_1EE9B4848;
LABEL_21:
        *(void *)uint64_t v11 = v15;
        if (*v5)
        {
LABEL_22:
          *(void *)a2 = v11;
          goto LABEL_23;
        }
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 8) = 0;
        int v43 = *(_DWORD *)(v11 + 8) - 1;
        if (*(_DWORD *)(v11 + 8) != 1) {
          goto LABEL_122;
        }
        uint64_t v62 = (WebCore::ControlPart *)v11;
LABEL_140:
        WebCore::ControlPart::~ControlPart(v62);
        return (WTF::StringImpl *)WTF::fastFree(v63, v64);
      }
      goto LABEL_157;
    }
LABEL_156:
    uint64_t v66 = *v5;
    uint64_t v65 = v5[1];
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v67 = v5[3];
    if (v67)
    {
      if (v65)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v67 + 16))(v67, v66);
        if (*v5) {
          goto LABEL_223;
        }
      }
    }
    goto LABEL_157;
  }
  if (v11 == 1 && v13 >= 0x100)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
    uint64_t v15 = &unk_1EE9B4898;
    goto LABEL_21;
  }
  if (v11 == 2 && v13 >= 0x100)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
    uint64_t v15 = &unk_1EE9B48C0;
    goto LABEL_21;
  }
  if (v11 == 3 && v13 >= 0x100)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
    uint64_t v15 = &unk_1EE9B48E8;
    goto LABEL_21;
  }
  if (v11 == 4 && v13 >= 0x100)
  {
    unint64_t v16 = v5[1];
    if (v16 <= v5[2] - v14)
    {
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v71 = v5[3];
      if (v71)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v71 + 16))(v71);
          uint64_t v69 = 0;
          uint64_t v115 = *v5;
          uint64_t v116 = v5[1];
          uint64_t v117 = v5[3];
          *unint64_t v5 = 0;
          v5[1] = 0;
          uint64_t v70 = 0;
          if (v117 && v116)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v117 + 16))(v117, v115);
            uint64_t v70 = *v5;
            uint64_t v69 = v5[1];
          }
        }
        else
        {
          uint64_t v69 = 0;
          uint64_t v70 = 0;
        }
      }
    }
    else
    {
      unint64_t v17 = (unsigned __int8 *)v5[2];
      v5[2] = (uint64_t)(v17 + 1);
      unsigned int v18 = *v17;
      if (v18 < 3)
      {
        LODWORD(v11) = v18 | 0x100;
        goto LABEL_30;
      }
      uint64_t v69 = v16;
      uint64_t v70 = v14;
    }
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v72 = v5[3];
    if (v72 && v69)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v72 + 16))(v72, v70, v69);
      LODWORD(v11) = 0;
      uint64_t v14 = *v5;
      unint64_t v16 = v5[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v14 = 0;
      LODWORD(v11) = 0;
    }
LABEL_30:
    unint64_t v19 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
    if (v16 < v19 || v16 - v19 <= 7)
    {
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v75 = v5[3];
      if (v75)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v75 + 16))(v75);
          uint64_t v74 = *v5;
          uint64_t v73 = v5[1];
        }
        else
        {
          uint64_t v73 = 0;
          uint64_t v74 = 0;
        }
      }
    }
    else
    {
      unint64_t v20 = (unint64_t *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v5[2] = (uint64_t)(v20 + 1);
      if (v14)
      {
        int v21 = 0;
        a3.n128_u64[0] = *v20;
        goto LABEL_34;
      }
      uint64_t v73 = v16;
      uint64_t v74 = 0;
    }
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v76 = v5[3];
    if (v76 && v73)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v76 + 16))(v76, v74, v73);
      uint64_t v14 = *v5;
      unint64_t v16 = v5[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v14 = 0;
    }
    int v21 = 1;
    a3.n128_u64[0] = 0;
LABEL_34:
    unint64_t v22 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
    if (v16 < v22 || v16 - v22 <= 7)
    {
      unint64_t v77 = a3.n128_u64[0];
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v80 = v5[3];
      if (v80)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v80 + 16))(v80);
          uint64_t v79 = *v5;
          uint64_t v78 = v5[1];
        }
        else
        {
          uint64_t v78 = 0;
          uint64_t v79 = 0;
        }
      }
    }
    else
    {
      unint64_t v23 = (unint64_t *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v5[2] = (uint64_t)(v23 + 1);
      if (v14)
      {
        int v24 = 0;
        a4.n128_u64[0] = *v23;
LABEL_38:
        unint64_t v25 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
        if (v16 < v25 || v16 - v25 <= 7)
        {
          unint64_t v134 = a4.n128_u64[0];
          unint64_t v82 = a3.n128_u64[0];
          uint64_t v83 = 0;
          uint64_t v84 = 0;
          *unint64_t v5 = 0;
          v5[1] = 0;
          uint64_t v85 = v5[3];
          if (v85)
          {
            if (v16)
            {
              (*(void (**)(uint64_t))(*(void *)v85 + 16))(v85);
              uint64_t v84 = *v5;
              uint64_t v83 = v5[1];
            }
            else
            {
              uint64_t v83 = 0;
              uint64_t v84 = 0;
            }
          }
        }
        else
        {
          unint64_t v26 = (unint64_t *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
          v5[2] = (uint64_t)(v26 + 1);
          if (v14)
          {
            int v27 = 0;
            a5.n128_u64[0] = *v26;
            goto LABEL_42;
          }
          unint64_t v134 = a4.n128_u64[0];
          unint64_t v82 = a3.n128_u64[0];
          uint64_t v83 = v16;
          uint64_t v84 = 0;
        }
        *unint64_t v5 = 0;
        v5[1] = 0;
        uint64_t result = (WTF::StringImpl *)v5[3];
        if (!result || !v83) {
          goto LABEL_159;
        }
        (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(void *)result + 16))(result, v84, v83);
        if (*v5)
        {
          int v27 = 1;
          a5.n128_u64[0] = 0;
          a3.n128_u64[0] = v82;
          a4.n128_u64[0] = v134;
LABEL_42:
          if (v11 <= 0xFF || v21 || v24 || v27) {
            goto LABEL_223;
          }
          WebCore::MeterPart::create();
          uint64_t result = v137;
LABEL_61:
          if (!*v5)
          {
            *(unsigned char *)a2 = 0;
            *(unsigned char *)(a2 + 8) = 0;
            if (result)
            {
              if (*((_DWORD *)result + 2) == 1) {
                return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
              }
              else {
                --*((_DWORD *)result + 2);
              }
            }
            return result;
          }
          *(void *)a2 = result;
LABEL_23:
          *(unsigned char *)(a2 + 8) = 1;
          return result;
        }
        uint64_t result = (WTF::StringImpl *)v5[3];
        uint64_t v86 = v5[1];
        *unint64_t v5 = 0;
        v5[1] = 0;
        if (!result) {
          goto LABEL_159;
        }
LABEL_204:
        if (v86)
        {
          uint64_t v101 = *(uint64_t (**)(void))(*(void *)result + 16);
          goto LABEL_215;
        }
LABEL_159:
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 8) = 0;
        return result;
      }
      unint64_t v77 = a3.n128_u64[0];
      uint64_t v78 = v16;
      uint64_t v79 = 0;
    }
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v81 = v5[3];
    if (v81 && v78)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, v79, v78);
      uint64_t v14 = *v5;
      unint64_t v16 = v5[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v14 = 0;
    }
    int v24 = 1;
    a3.n128_u64[0] = v77;
    a4.n128_u64[0] = 0;
    goto LABEL_38;
  }
  if (v11 == 5 && v13 >= 0x100)
  {
    unint64_t v28 = v5[1];
    unint64_t v29 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
    LODWORD(v11) = v28 < v29 || v28 - v29 < 8;
    if (v11 == 1)
    {
      *unint64_t v5 = 0;
      v5[1] = 0;
      double v32 = 0.0;
      uint64_t v97 = v5[3];
      if (v97)
      {
        if (v28)
        {
          (*(void (**)(uint64_t))(*(void *)v97 + 16))(v97);
          uint64_t v98 = *v5;
          uint64_t v99 = v5[1];
          uint64_t v100 = v5[3];
          *unint64_t v5 = 0;
          v5[1] = 0;
          if (v100)
          {
            if (v99) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v100 + 16))(v100, v98);
            }
          }
        }
      }
    }
    else
    {
      unsigned __int8 v31 = (double *)((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      double v32 = *v31;
      v5[2] = (uint64_t)(v31 + 1);
    }
    v137 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Seconds>(v5);
    v138 = v33;
    if (*v5)
    {
      if (v11 || !(_BYTE)v33) {
        goto LABEL_223;
      }
      WebCore::ProgressBarPart::create(v140, (WebCore::ProgressBarPart *)&v137, v32, v33);
      uint64_t result = (WTF::StringImpl *)v140[0];
      goto LABEL_61;
    }
    uint64_t v86 = v5[1];
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t result = (WTF::StringImpl *)v5[3];
    if (!result) {
      goto LABEL_159;
    }
    goto LABEL_204;
  }
  if (v11 == 6 && v13 >= 0x100)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
    uint64_t v15 = &unk_1EE9B4910;
    goto LABEL_21;
  }
  if (v11 == 7 && v13 >= 0x100)
  {
    if ((unsigned __int16)IPC::ArgumentCoder<WebCore::StyleAppearance,void>::decode<IPC::Decoder>(v5) > 0xFFu)
    {
      if (*v5)
      {
        uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
        uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
        uint64_t v15 = &unk_1EE9B4960;
        goto LABEL_21;
      }
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  if (v11 == 8 && v13 >= 0x100)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
    uint64_t v15 = &unk_1EE9B4988;
    goto LABEL_21;
  }
  if (v11 == 9 && v13 >= 0x100)
  {
    if ((unsigned __int16)IPC::ArgumentCoder<WebCore::StyleAppearance,void>::decode<IPC::Decoder>(v5) > 0xFFu)
    {
      if (*v5)
      {
        uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
        uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
        uint64_t v15 = &unk_1EE9B4938;
        goto LABEL_21;
      }
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  if (v11 == 10 && v13 >= 0x100)
  {
    LOWORD(v11) = IPC::ArgumentCoder<WebCore::StyleAppearance,void>::decode<IPC::Decoder>(v5);
    if ((unsigned __int16)v11 <= 0xFFu) {
      goto LABEL_224;
    }
    goto LABEL_82;
  }
  if (v11 == 11 && v13 >= 0x100)
  {
    unint64_t v49 = v5[1];
    if (v49 <= v5[2] - v14)
    {
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v111 = v5[3];
      if (v111)
      {
        if (v49)
        {
          (*(void (**)(uint64_t))(*(void *)v111 + 16))(v111);
          LODWORD(v11) = 0;
          unint64_t v49 = 0;
          uint64_t v124 = *v5;
          uint64_t v125 = v5[1];
          uint64_t v126 = v5[3];
          *unint64_t v5 = 0;
          v5[1] = 0;
          uint64_t v14 = 0;
          if (v126 && v125)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v126 + 16))(v126, v124, v125);
            LODWORD(v11) = 0;
            uint64_t v14 = *v5;
            unint64_t v49 = v5[1];
          }
          goto LABEL_236;
        }
      }
      else
      {
        unint64_t v49 = 0;
      }
      uint64_t v14 = 0;
      LODWORD(v11) = 0;
    }
    else
    {
      unint64_t v50 = (unsigned __int8 *)v5[2];
      v5[2] = (uint64_t)(v50 + 1);
      LODWORD(v11) = *v50;
      if (v11 < 2)
      {
        int v51 = 0;
        char v52 = 1;
        goto LABEL_112;
      }
    }
LABEL_236:
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v112 = v5[3];
    if (v112 && v49) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v112 + 16))(v112, v14);
    }
    char v52 = 0;
    int v51 = 1;
LABEL_112:
    if (v11) {
      char v53 = v52;
    }
    else {
      char v53 = 0;
    }
    uint64_t v54 = IPC::Decoder::decode<float>(v5);
    if (*v5)
    {
      LODWORD(v11) = v54;
      if ((v54 & 0xFF00000000) != 0)
      {
        a3.n128_u32[0] = v54;
        if (*(float *)&v54 >= 0.0)
        {
          a4.n128_u32[0] = 1.0;
          if (*(float *)&v54 <= 1.0)
          {
            if (v51) {
              goto LABEL_223;
            }
            uint64_t v55 = WTF::fastMalloc((WTF *)0x28);
            uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
            long long v56 = &unk_1EE9B4A50;
LABEL_137:
            *(void *)uint64_t v55 = v56;
            *(unsigned char *)(v55 + 32) = v53;
            *(_DWORD *)(v55 + 36) = v11;
            if (*v5)
            {
              *(void *)a2 = v55;
              goto LABEL_23;
            }
            *(unsigned char *)a2 = 0;
            *(unsigned char *)(a2 + 8) = 0;
            if (*(_DWORD *)(v55 + 8) != 1)
            {
              --*(_DWORD *)(v55 + 8);
              return result;
            }
            uint64_t v62 = (WebCore::ControlPart *)v55;
            goto LABEL_140;
          }
        }
      }
    }
    goto LABEL_157;
  }
  if (v11 == 12 && v13 >= 0x100)
  {
    unint64_t v57 = v5[1];
    if (v57 <= v5[2] - v14)
    {
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v113 = v5[3];
      if (v113)
      {
        if (v57)
        {
          (*(void (**)(uint64_t))(*(void *)v113 + 16))(v113);
          LODWORD(v11) = 0;
          unint64_t v57 = 0;
          uint64_t v127 = *v5;
          uint64_t v128 = v5[1];
          uint64_t v129 = v5[3];
          *unint64_t v5 = 0;
          v5[1] = 0;
          uint64_t v14 = 0;
          if (v129 && v128)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v129 + 16))(v129, v127, v128);
            LODWORD(v11) = 0;
            uint64_t v14 = *v5;
            unint64_t v57 = v5[1];
          }
          goto LABEL_241;
        }
      }
      else
      {
        unint64_t v57 = 0;
      }
      uint64_t v14 = 0;
      LODWORD(v11) = 0;
    }
    else
    {
      uint64_t v58 = (unsigned __int8 *)v5[2];
      v5[2] = (uint64_t)(v58 + 1);
      LODWORD(v11) = *v58;
      if (v11 < 2)
      {
        int v59 = 0;
        char v60 = 1;
        goto LABEL_128;
      }
    }
LABEL_241:
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v114 = v5[3];
    if (v114 && v57) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v114 + 16))(v114, v14);
    }
    char v60 = 0;
    int v59 = 1;
LABEL_128:
    if (v11) {
      char v53 = v60;
    }
    else {
      char v53 = 0;
    }
    uint64_t v61 = IPC::Decoder::decode<float>(v5);
    if (*v5)
    {
      LODWORD(v11) = v61;
      if ((v61 & 0xFF00000000) != 0)
      {
        a3.n128_u32[0] = v61;
        if (*(float *)&v61 >= 0.0)
        {
          a4.n128_u32[0] = 1.0;
          if (*(float *)&v61 <= 1.0)
          {
            if (v59) {
              goto LABEL_223;
            }
            uint64_t v55 = WTF::fastMalloc((WTF *)0x28);
            uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
            long long v56 = &unk_1EE9B4A78;
            goto LABEL_137;
          }
        }
      }
    }
LABEL_157:
    uint64_t v68 = v5[1];
LABEL_158:
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t result = (WTF::StringImpl *)v5[3];
    if (result && v68)
    {
      uint64_t v101 = *(uint64_t (**)(void))(*(void *)result + 16);
LABEL_215:
      uint64_t result = (WTF::StringImpl *)v101();
      if (*v5) {
        goto LABEL_223;
      }
      goto LABEL_159;
    }
    goto LABEL_159;
  }
  if (v11 == 13 && v13 >= 0x100)
  {
    if ((unsigned __int16)IPC::ArgumentCoder<WebCore::StyleAppearance,void>::decode<IPC::Decoder>(v5) > 0xFFu)
    {
      if (*v5)
      {
        uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
        uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
        uint64_t v15 = &unk_1EE9B49B0;
        goto LABEL_21;
      }
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  if (v11 == 14 && v13 >= 0x100)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
    uint64_t v15 = &unk_1EE9B49D8;
    goto LABEL_21;
  }
  if (v11 == 15 && v13 >= 0x100)
  {
    if ((unsigned __int16)IPC::ArgumentCoder<WebCore::StyleAppearance,void>::decode<IPC::Decoder>(v5) > 0xFFu)
    {
      if (*v5)
      {
        uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
        uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
        uint64_t v15 = &unk_1EE9B4A00;
        goto LABEL_21;
      }
      goto LABEL_157;
    }
    goto LABEL_156;
  }
  if (v11 != 16 || v13 < 0x100)
  {
    if (v11 == 17 && v13 >= 0x100)
    {
      uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
      uint64_t result = (WTF::StringImpl *)WebCore::ControlPart::ControlPart();
      uint64_t v15 = &unk_1EE9B4A28;
      goto LABEL_21;
    }
    goto LABEL_159;
  }
  unint64_t v87 = v5[1];
  if (v87 <= v5[2] - v14)
  {
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v120 = v5[3];
    if (v120)
    {
      if (v87)
      {
        (*(void (**)(uint64_t))(*(void *)v120 + 16))(v120);
        uint64_t v118 = 0;
        uint64_t v131 = *v5;
        uint64_t v132 = v5[1];
        uint64_t v133 = v5[3];
        *unint64_t v5 = 0;
        v5[1] = 0;
        uint64_t v119 = 0;
        if (v133 && v132)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v133 + 16))(v133, v131);
          uint64_t v119 = *v5;
          uint64_t v118 = v5[1];
        }
      }
      else
      {
        uint64_t v118 = 0;
        uint64_t v119 = 0;
      }
    }
  }
  else
  {
    unsigned __int8 v88 = (unsigned __int8 *)v5[2];
    char v89 = v88 + 1;
    v5[2] = (uint64_t)(v88 + 1);
    unsigned int v90 = *v88;
    if (v90 < 0xF)
    {
      LODWORD(v11) = v90 | 0x100;
      goto LABEL_185;
    }
    uint64_t v118 = v87;
    uint64_t v119 = v14;
  }
  *unint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v121 = v5[3];
  if (!v121 || !v118)
  {
    LODWORD(v11) = 0;
    goto LABEL_265;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v121 + 16))(v121, v119, v118);
  LODWORD(v11) = 0;
  uint64_t v14 = *v5;
  unint64_t v87 = v5[1];
  char v89 = (unsigned __int8 *)v5[2];
LABEL_185:
  uint64_t v91 = &v89[-v14];
  if (v87 <= (unint64_t)v91)
  {
    uint64_t v130 = v5[3];
    *unint64_t v5 = 0;
    v5[1] = 0;
    if (!v87) {
      goto LABEL_266;
    }
    if (v130)
    {
      (*(void (**)(uint64_t))(*(void *)v130 + 16))(v130);
      uint64_t v14 = *v5;
      unint64_t v87 = v5[1];
LABEL_267:
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v122 = v5[3];
      if (v122)
      {
        if (v87)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 16))(v122, v14);
          uint64_t v14 = *v5;
          unint64_t v87 = v5[1];
LABEL_270:
          *unint64_t v5 = 0;
          v5[1] = 0;
          uint64_t v123 = v5[3];
          if (v123 && v87) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v123 + 16))(v123, v14);
          }
          unsigned int v94 = 0;
          goto LABEL_189;
        }
      }
      else
      {
        unint64_t v87 = 0;
      }
      uint64_t v14 = 0;
      goto LABEL_270;
    }
LABEL_265:
    unint64_t v87 = 0;
LABEL_266:
    uint64_t v14 = 0;
    goto LABEL_267;
  }
  uint64_t v92 = &v91[v14];
  v5[2] = (uint64_t)(v92 + 1);
  if (!v14) {
    goto LABEL_267;
  }
  unsigned int v93 = *v92;
  if (v93 >= 3) {
    goto LABEL_270;
  }
  unsigned int v94 = v93 | 0x100;
LABEL_189:
  uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v5, (uint64_t)&v137);
  uint64_t v96 = *v5;
  if (!*v5)
  {
    uint64_t v11 = 0;
    goto LABEL_194;
  }
  if (v11 > 0xFF && v94 > 0xFF && (_BYTE)v138)
  {
    uint64_t result = (WTF::StringImpl *)WebCore::ApplePayButtonPart::create();
    uint64_t v11 = v140[0];
LABEL_194:
    if ((_BYTE)v138)
    {
      uint64_t result = v137;
      v137 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v95);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (v96) {
      goto LABEL_97;
    }
    goto LABEL_212;
  }
  while (1)
  {
LABEL_223:
    __break(1u);
LABEL_224:
    uint64_t v102 = *v5;
    uint64_t v103 = v5[1];
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t v104 = v5[3];
    if (v104 && v103) {
      (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128))(*(void *)v104 + 16))(v104, v102, a3, a4, a5);
    }
LABEL_82:
    unint64_t v34 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v5);
    int v36 = v35;
    uint64_t v37 = v35;
    if (!(_BYTE)v35)
    {
      uint64_t v105 = *v5;
      uint64_t v106 = v5[1];
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v107 = v5[3];
      if (v107)
      {
        if (v106)
        {
          v135 = v34;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v107 + 16))(v107, v105);
          unint64_t v34 = v135;
        }
      }
    }
    v142 = v34;
    int v143 = v36;
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v5, (uint64_t)v140);
    IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v5, &v137);
    unint64_t v38 = (char *)*v5;
    unint64_t v39 = v5[1];
    unint64_t v40 = ((v5[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v5;
    if (v39 < v40 || v39 - v40 <= 7)
    {
      unint64_t v108 = 0;
      uint64_t v109 = 0;
      *unint64_t v5 = 0;
      v5[1] = 0;
      uint64_t v110 = v5[3];
      if (v110)
      {
        if (v39)
        {
          (*(void (**)(uint64_t))(*(void *)v110 + 16))(v110);
          uint64_t v109 = *v5;
          unint64_t v108 = v5[1];
        }
        else
        {
          unint64_t v108 = 0;
          uint64_t v109 = 0;
        }
      }
    }
    else
    {
      unint64_t v41 = (unint64_t *)&v38[v40];
      v5[2] = (uint64_t)(v41 + 1);
      if (v38)
      {
        int v42 = 0;
        a3.n128_u64[0] = *v41;
        goto LABEL_87;
      }
      unint64_t v108 = v39;
      uint64_t v109 = 0;
    }
    *unint64_t v5 = 0;
    v5[1] = 0;
    uint64_t result = (WTF::StringImpl *)v5[3];
    if (!result || !v108)
    {
      uint64_t v11 = 0;
      int v42 = 1;
      goto LABEL_93;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v109);
    int v42 = 1;
    if (!*v5) {
      break;
    }
    a3.n128_u64[0] = 0;
LABEL_87:
    if ((unsigned __int16)v11 > 0xFFu && v37 && v141 && v139 && !v42)
    {
      uint64_t result = (WTF::StringImpl *)WebCore::SliderTrackPart::create();
      int v42 = 0;
      uint64_t v11 = v136;
      goto LABEL_93;
    }
  }
  uint64_t v11 = 0;
LABEL_93:
  if (v139)
  {
    uint64_t result = v137;
    if (v137)
    {
      v137 = 0;
      LODWORD(v138) = 0;
      uint64_t result = (WTF::StringImpl *)WTF::fastFree(result, v38);
    }
  }
  if (v42)
  {
LABEL_212:
    uint64_t v68 = v5[1];
    goto LABEL_158;
  }
LABEL_97:
  if (*v5) {
    goto LABEL_22;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v11)
  {
    int v43 = *(_DWORD *)(v11 + 8) - 1;
    if (*(_DWORD *)(v11 + 8) == 1) {
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
LABEL_122:
    *(_DWORD *)(v11 + 8) = v43;
  }
  return result;
}

void sub_198879734(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, int a12, int a13, char a14)
{
  if (a14)
  {
    if (a11) {
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::FEBlend,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2 = *((void *)a1 + 2);
  if (v2 >= *((void *)a1 + 1))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v2) = *(unsigned char *)(a2 + 64);
    *((void *)a1 + 2) = v2 + 1;
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 72), *(unsigned int *)(a2 + 84));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= *((void *)a1 + 1))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v4) = *(unsigned char *)(a2 + 64);
    *((void *)a1 + 2) = v4 + 1;
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)(a2 + 72), *(unsigned int *)(a2 + 84));

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

_DWORD *IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)v9);
  if (v10)
  {
    unint64_t v5 = (int *)v9[0];
    unint64_t v6 = v9[1];
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = v6;
    if (!v6)
    {
LABEL_6:
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    if (!(v6 >> 30))
    {
      uint64_t v7 = 4 * v6;
      uint64_t result = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v6));
      *(_DWORD *)(a1 + 8) = v6;
      *(void *)a1 = result;
      do
      {
        int v8 = *v5++;
        *result++ = v8;
        v7 -= 4;
      }
      while (v7);
      goto LABEL_6;
    }
    __break(0xC471u);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return (_DWORD *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)(v3 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    int v7 = 1;
    uint64_t v8 = *(void *)(v6 + 8) - 1;
    *(void *)(v6 + 8) = v8;
    if (v8)
    {
      uint64_t v9 = 0;
      BOOL v10 = 1;
    }
    else
    {
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      BOOL v10 = v11 != 0;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1)
    {
      if (v8) {
        return a1;
      }
    }
    else
    {
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      uint64_t v9 = v13;
      if (v12) {
        return a1;
      }
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (!v10) {
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

unint64_t IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 16));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 20));
  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 36));
}

void *IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v4) = *(unsigned char *)a2;
    a1[2] = v4 + 1;
  }
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 4));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 8));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 12));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 16));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 20));
  char v5 = *(const void **)(a2 + 24);
  uint64_t v6 = *(unsigned int *)(a2 + 36);

  return IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v5, v6);
}

void IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v12 = *(_OWORD *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 80);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 88);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  char v5 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v5, v4);
  }
  long long v12 = *(_OWORD *)(a2 + 104);
  uint64_t v13 = *(void *)(a2 + 120);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 128);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  int v7 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v7, v6);
  }
  long long v12 = *(_OWORD *)(a2 + 144);
  uint64_t v13 = *(void *)(a2 + 160);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 168);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  uint64_t v9 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v9, v8);
  }
  long long v12 = *(_OWORD *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 200);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 208);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  uint64_t v11 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v11, v10);
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void sub_198879CE8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13)
{
  if (a12) {
    WTF::fastFree(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  long long v12 = *(_OWORD *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 80);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 88);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  char v5 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v5, v4);
  }
  long long v12 = *(_OWORD *)(a2 + 104);
  uint64_t v13 = *(void *)(a2 + 120);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 128);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  int v7 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v7, v6);
  }
  long long v12 = *(_OWORD *)(a2 + 144);
  uint64_t v13 = *(void *)(a2 + 160);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 168);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  uint64_t v9 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v9, v8);
  }
  long long v12 = *(_OWORD *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 200);
  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, a2 + 208);
  IPC::ArgumentCoder<WebCore::ComponentTransferFunction,void>::encode(a1, (uint64_t)&v12);
  uint64_t v11 = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    WTF::fastFree(v11, v10);
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void sub_198879E60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13)
{
  if (a12) {
    WTF::fastFree(a12, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::Decoder::decode<WebCore::ComponentTransferFunction>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_16;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v19 = v6;
    uint64_t v20 = 0;
    goto LABEL_17;
  }
  unsigned int v9 = *v8;
  if (v9 >= 6) {
    goto LABEL_18;
  }
  for (unsigned int i = v9 | 0x100; ; unsigned int i = 0)
  {
    uint64_t v11 = IPC::Decoder::decode<float>(a2);
    uint64_t v12 = IPC::Decoder::decode<float>(a2);
    uint64_t v13 = IPC::Decoder::decode<float>(a2);
    uint64_t v14 = IPC::Decoder::decode<float>(a2);
    uint64_t v15 = IPC::Decoder::decode<float>(a2);
    uint64_t result = IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v26, a2);
    if (!*(void *)a2) {
      break;
    }
    if (i > 0xFF
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && (v15 & 0xFF00000000) != 0
      && v27)
    {
      unsigned int v18 = v26[0];
      *(unsigned char *)a1 = i;
      *(_DWORD *)(a1 + 4) = v11;
      *(_DWORD *)(a1 + 8) = v12;
      *(_DWORD *)(a1 + 12) = v13;
      *(_DWORD *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = v18;
      *(WTF **)(a1 + 32) = v26[1];
      *(unsigned char *)(a1 + 40) = 1;
      return result;
    }
    __break(1u);
LABEL_16:
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v20 = *(void *)a2;
        unint64_t v19 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
LABEL_17:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_18:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23)
    {
      if (v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v5);
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (v27 && v26[0]) {
    WTF::fastFree(v26[0], v17);
  }
  uint64_t v24 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (_DWORD *)*((void *)a2 + 3);
  if (result && v24)
  {
    unint64_t v25 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (_DWORD *)v25();
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 76));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 80));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2 = *((void *)a1 + 2);
  if (v2 >= *((void *)a1 + 1))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v2++) = *(unsigned char *)(a2 + 64);
    *((void *)a1 + 2) = v2;
  }
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)a1 + v2;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v2;
    unint64_t v9 = v7 + v2 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v8) = *(_DWORD *)(a2 + 68);
      *((void *)a1 + 2) = v9;
      uint64_t v3 = *(void *)a1;
      unint64_t v2 = v9;
    }
  }
  unint64_t v11 = (v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v3 + v2);
  if (v11 >= v3 + v2)
  {
    unint64_t v13 = v11 - v3;
    unint64_t v14 = v12 + v2 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v13) = *(_DWORD *)(a2 + 72);
      *((void *)a1 + 2) = v14;
      uint64_t v3 = *(void *)a1;
      unint64_t v2 = v14;
    }
  }
  unint64_t v16 = (v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v3 + v2);
  if (v16 >= v3 + v2)
  {
    unint64_t v18 = v16 - v3;
    unint64_t v19 = v17 + v2 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v18) = *(_DWORD *)(a2 + 76);
      *((void *)a1 + 2) = v19;
      uint64_t v3 = *(void *)a1;
      unint64_t v2 = v19;
    }
  }
  uint64_t v21 = (_DWORD *)((v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v21 >= v3 + v2)
  {
    unint64_t v22 = (unint64_t)v21 - v3 + 4;
    if ((unint64_t)v21 - v3 > 0xFFFFFFFFFFFFFFFBLL || v22 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *uint64_t v21 = *(_DWORD *)(a2 + 80);
      *((void *)a1 + 2) = v22;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v9 = *(void *)(a2 + 64);
  IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)&v9);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 76));
  uint64_t v9 = *(void *)(a2 + 80);
  unint64_t v4 = IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)&v9);
  LOBYTE(v9) = *(unsigned char *)(a2 + 88);
  IPC::Encoder::operator<<<BOOL>(v4, (char *)&v9);
  float v5 = *(float *)(a2 + 96);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 92));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v5);
  char v6 = *(unsigned char *)(a2 + 100);
  unint64_t v7 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    *unint64_t v7 = v6;
    IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 104), *(unsigned int *)(a2 + 116));
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
  }
  else
  {
    __break(0xC471u);
  }
}

void IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = *(void *)(a2 + 64);
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v22);
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v12 = v7 >= v6;
  unint64_t v8 = v7 - v6;
  if (v12)
  {
    unint64_t v9 = v8 + v5;
    unint64_t v10 = v8 + v5 + 4;
    unint64_t v11 = a1[1];
    if (v9 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v12 = v10 >= v11;
      BOOL v13 = v10 == v11;
    }
    else
    {
      BOOL v12 = 1;
      BOOL v13 = 0;
    }
    if (!v13 && v12)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v9) = *(_DWORD *)(a2 + 72);
      a1[2] = v10;
      uint64_t v4 = *a1;
      unint64_t v5 = v10;
    }
  }
  unint64_t v14 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v14 >= v4 + v5)
  {
    unint64_t v15 = v14 - v4;
    unint64_t v16 = v14 - v4 + 4;
    unint64_t v17 = a1[1];
    if (v15 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v18 = v16 >= v17;
      BOOL v19 = v16 == v17;
    }
    else
    {
      BOOL v18 = 1;
      BOOL v19 = 0;
    }
    if (!v19 && v18)
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 76);
      a1[2] = v16;
    }
  }
  uint64_t v22 = *(void *)(a2 + 80);
  IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(a1, &v22);
  unint64_t v20 = a1[2];
  if (v20 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v20) = *(unsigned char *)(a2 + 88);
    a1[2] = v20 + 1;
  }
  uint64_t v22 = *(void *)(a2 + 92);
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v22);
  unint64_t v21 = a1[2];
  if (v21 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v21) = *(unsigned char *)(a2 + 100);
    a1[2] = v21 + 1;
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)(a2 + 104), *(unsigned int *)(a2 + 116));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 76));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 88));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 92));
  uint64_t v4 = *(_DWORD **)(a2 + 96);
  ++v4[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode(a1, (uint64_t)v4);
  if (v4[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[2];
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void sub_19887A624(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)(a2 + 72);
      a1[2] = v11;
      uint64_t v4 = *a1;
      unint64_t v5 = v11;
    }
  }
  unint64_t v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    unint64_t v15 = v13 - v4;
    unint64_t v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 76);
      a1[2] = v16;
      uint64_t v4 = *a1;
      unint64_t v5 = v16;
    }
  }
  unint64_t v18 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v18 - (v4 + v5);
  if (v18 >= v4 + v5)
  {
    unint64_t v20 = v18 - v4;
    unint64_t v21 = v19 + v5 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v20) = *(_DWORD *)(a2 + 88);
      a1[2] = v21;
      uint64_t v4 = *a1;
      unint64_t v5 = v21;
    }
  }
  uint64_t v23 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v23 >= v4 + v5)
  {
    unint64_t v24 = (unint64_t)v23 - v4 + 4;
    if ((unint64_t)v23 - v4 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *uint64_t v23 = *(_DWORD *)(a2 + 92);
      a1[2] = v24;
    }
  }
  unint64_t v26 = *(_DWORD **)(a2 + 96);
  ++v26[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode(a1, (uint64_t)v26);
  if (v26[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
  }
  else {
    --v26[2];
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

_DWORD *IPC::Decoder::decode<WTF::Ref<WebCore::LightSource,WTF::RawPtrTraits<WebCore::LightSource>,WTF::DefaultRefDerefTraits<WebCore::LightSource>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v22 = a2[3];
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
        uint64_t v21 = *a2;
        unint64_t v20 = a2[1];
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_23;
  }
  BOOL v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
LABEL_43:
    unint64_t v20 = v6;
    uint64_t v21 = v5;
LABEL_23:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_24;
  }
  unsigned int v9 = *v8;
  if (v9 >= 3)
  {
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v5);
    }
    goto LABEL_28;
  }
  if (v9 == 1)
  {
    unint64_t v31 = IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    uint64_t v32 = v5;
    if (*a2)
    {
      if ((v5 & 0xFF00000000) != 0)
      {
        WebCore::PointLightSource::create();
        uint64_t result = v30;
        goto LABEL_19;
      }
      goto LABEL_42;
    }
    goto LABEL_27;
  }
  if (v9)
  {
    unint64_t v13 = IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    uint64_t v15 = v14;
    unint64_t v31 = v13;
    uint64_t v32 = v14;
    IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    uint64_t v17 = v16;
    uint64_t v18 = IPC::Decoder::decode<float>(a2);
    uint64_t v19 = IPC::Decoder::decode<float>(a2);
    if (*a2)
    {
      if ((v15 & 0xFF00000000) != 0
        && (v17 & 0xFF00000000) != 0
        && (v18 & 0xFF00000000) != 0
        && (v19 & 0xFF00000000) != 0)
      {
        WebCore::SpotLightSource::create();
        uint64_t result = v29;
        goto LABEL_19;
      }
      goto LABEL_42;
    }
LABEL_27:
    uint64_t v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (!v26 || !v25 || ((*(void (**)(uint64_t, void))(*(void *)v26 + 16))(v26, 0), !*a2))
    {
LABEL_28:
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_29;
    }
    goto LABEL_42;
  }
  uint64_t v10 = IPC::Decoder::decode<float>(a2);
  uint64_t v11 = IPC::Decoder::decode<float>(a2);
  if (!*a2) {
    goto LABEL_27;
  }
  if ((v10 & 0xFF00000000) == 0 || (v11 & 0xFF00000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  WebCore::DistantLightSource::create((uint64_t *)&v31, (WebCore::DistantLightSource *)v11, *(float *)&v10, *(float *)&v11);
  uint64_t result = (_DWORD *)v31;
LABEL_19:
  if (*a2)
  {
    *(void *)a1 = result;
    a1[8] = 1;
    return result;
  }
  *a1 = 0;
  a1[8] = 0;
  if (result)
  {
    if (result[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
LABEL_29:
  uint64_t v27 = *a2;
  uint64_t v28 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (_DWORD *)a2[3];
  if (result)
  {
    if (v28) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)result + 16))(result, v27);
    }
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  char v5 = *(unsigned char *)(a2 + 65);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2 = *((void *)a1 + 2);
  if (v2 < *((void *)a1 + 1))
  {
    unint64_t v3 = v2 + 1;
    *(unsigned char *)(*(void *)a1 + v2) = *(unsigned char *)(a2 + 64);
    *((void *)a1 + 2) = v2 + 1;
    if (v2 + 1 < *((void *)a1 + 1))
    {
      v2 += 2;
      *(unsigned char *)(*(void *)a1 + v3) = *(unsigned char *)(a2 + 65);
      *((void *)a1 + 2) = v2;
      goto LABEL_4;
    }
    ++v2;
  }
  *((void *)a1 + 1) = 0;
LABEL_4:
  unint64_t v4 = *(void *)a1 + v2;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v2;
    unint64_t v9 = v8 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(void *)a1 + v8) = *(_DWORD *)(a2 + 68);
      *((void *)a1 + 2) = v9;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 64));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 76));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 80));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 88));

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)(a2 + 64);
      a1[2] = v11;
      uint64_t v4 = *a1;
      unint64_t v5 = v11;
    }
  }
  unint64_t v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    unint64_t v15 = v13 - v4;
    unint64_t v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 68);
      a1[2] = v16;
      uint64_t v4 = *a1;
      unint64_t v5 = v16;
    }
  }
  unint64_t v18 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v18 - (v4 + v5);
  if (v18 >= v4 + v5)
  {
    unint64_t v20 = v18 - v4;
    unint64_t v21 = v19 + v5 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v20) = *(_DWORD *)(a2 + 72);
      a1[2] = v21;
      uint64_t v4 = *a1;
      unint64_t v5 = v21;
    }
  }
  uint64_t v23 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v23 >= v4 + v5)
  {
    unint64_t v24 = (unint64_t)v23 - v4 + 4;
    if ((unint64_t)v23 - v4 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *uint64_t v23 = *(_DWORD *)(a2 + 76);
      a1[2] = v24;
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 80));
  uint64_t v26 = a1[2];
  unint64_t v27 = *a1 + v26;
  unint64_t v28 = (v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v28 >= v27;
  unint64_t v29 = v28 - v27;
  if (v8)
  {
    unint64_t v30 = v29 + v26;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v30) = *(_DWORD *)(a2 + 88);
      a1[2] = v30 + 4;
    }
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 72);
      a1[2] = v10;
    }
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 64));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
  char v4 = *(unsigned char *)(a2 + 72);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *((void *)a1 + 2);
  unint64_t v4 = *(void *)a1 + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v10 = v5 >= v4;
  unint64_t v6 = v5 - v4;
  if (v10)
  {
    unint64_t v7 = v6 + v3;
    unint64_t v8 = v6 + v3 + 4;
    unint64_t v9 = *((void *)a1 + 1);
    if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v10 = v8 >= v9;
      BOOL v11 = v8 == v9;
    }
    else
    {
      BOOL v10 = 1;
      BOOL v11 = 0;
    }
    if (!v11 && v10)
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v7) = *(_DWORD *)(a2 + 64);
      *((void *)a1 + 2) = v8;
      uint64_t v2 = *(void *)a1;
      unint64_t v3 = v8;
    }
  }
  unint64_t v12 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v13 = v12 - (v2 + v3);
  if (v12 >= v2 + v3)
  {
    unint64_t v14 = v12 - v2;
    unint64_t v15 = v13 + v3 + 4;
    unint64_t v16 = *((void *)a1 + 1);
    if (v14 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v17 = v15 >= v16;
      BOOL v18 = v15 == v16;
    }
    else
    {
      BOOL v17 = 1;
      BOOL v18 = 0;
    }
    if (!v18 && v17)
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v14) = *(_DWORD *)(a2 + 68);
      *((void *)a1 + 2) = v15;
      unint64_t v3 = v15;
    }
  }
  if (v3 >= *((void *)a1 + 1))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v3) = *(unsigned char *)(a2 + 72);
    *((void *)a1 + 2) = v3 + 1;
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

uint64_t IPC::ArgumentCoder<WebCore::FEImage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  *(void *)&long long v5 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(a2 + 64));
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)&v5);
  long long v5 = *(_OWORD *)(a2 + 104);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v5);
  LOBYTE(v5) = *(unsigned char *)(a2 + 120);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  LOBYTE(v5) = *(unsigned char *)(a2 + 121);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
}

uint64_t *IPC::ArgumentCoder<WebCore::FEImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(a2 + 64));
  uint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v10) = v4;
      a1[2] = v11;
    }
  }
  long long v15 = *(_OWORD *)(a2 + 104);
  uint64_t result = IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v15);
  unint64_t v14 = a1[2];
  if (v14 >= a1[1] || (*(unsigned char *)(*a1 + v14) = *(unsigned char *)(a2 + 120), a1[2] = v14 + 1, v14 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v14 + 1) = *(unsigned char *)(a2 + 121);
    a1[2] = v14 + 2;
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FEMerge,void>::encode(IPC::Encoder *a1, CFTypeRef *a2)
{
  int v4 = (*((uint64_t (**)(CFTypeRef *))*a2 + 12))(a2);
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, a2 + 7);
  }
}

void IPC::ArgumentCoder<WebCore::FEMerge,void>::encode(WTF::StringImpl *a1, CFTypeRef *a2)
{
  int v4 = (*((uint64_t (**)(CFTypeRef *))*a2 + 12))(a2);
  uint64_t v5 = *((void *)a1 + 2);
  unint64_t v6 = *(void *)a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(void *)a1 + v10) = v4;
      *((void *)a1 + 2) = v11;
    }
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, a2 + 7);
}

void IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  unint64_t v2 = *((void *)a1 + 2);
  if (v2 >= *((void *)a1 + 1))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v2++) = *(unsigned char *)(a2 + 64);
    *((void *)a1 + 2) = v2;
  }
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)a1 + v2;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v2;
    unint64_t v9 = v7 + v2 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v8) = *(_DWORD *)(a2 + 68);
      *((void *)a1 + 2) = v9;
      uint64_t v3 = *(void *)a1;
      unint64_t v2 = v9;
    }
  }
  unint64_t v11 = (_DWORD *)((v3 + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v11 >= v3 + v2)
  {
    unint64_t v12 = (unint64_t)v11 - v3 + 4;
    if ((unint64_t)v11 - v3 > 0xFFFFFFFFFFFFFFFBLL || v12 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *unint64_t v11 = *(_DWORD *)(a2 + 72);
      *((void *)a1 + 2) = v12;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 64));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *((void *)a1 + 2);
  unint64_t v4 = *(void *)a1 + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v10 = v5 >= v4;
  unint64_t v6 = v5 - v4;
  if (v10)
  {
    unint64_t v7 = v6 + v3;
    unint64_t v8 = v6 + v3 + 4;
    unint64_t v9 = *((void *)a1 + 1);
    if (v7 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v10 = v8 >= v9;
      BOOL v11 = v8 == v9;
    }
    else
    {
      BOOL v10 = 1;
      BOOL v11 = 0;
    }
    if (!v11 && v10)
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v7) = *(_DWORD *)(a2 + 64);
      *((void *)a1 + 2) = v8;
      uint64_t v2 = *(void *)a1;
      unint64_t v3 = v8;
    }
  }
  unint64_t v12 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v12 >= v2 + v3)
  {
    unint64_t v13 = v12 - v2;
    unint64_t v14 = v12 - v2 + 4;
    unint64_t v15 = *((void *)a1 + 1);
    if (v13 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      BOOL v16 = v14 >= v15;
      BOOL v17 = v14 == v15;
    }
    else
    {
      BOOL v16 = 1;
      BOOL v17 = 0;
    }
    if (!v17 && v16)
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 68);
      *((void *)a1 + 2) = v14;
    }
  }
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 80));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 84));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 88));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 92));
  unint64_t v4 = *(_DWORD **)(a2 + 96);
  ++v4[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode(a1, (uint64_t)v4);
  if (v4[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  }
  else {
    --v4[2];
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
}

void sub_19887B628(_Unwind_Exception *exception_object)
{
  if (v1[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 64));
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)(a2 + 72);
      a1[2] = v11;
      uint64_t v4 = *a1;
      unint64_t v5 = v11;
    }
  }
  unint64_t v13 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = v13 - (v4 + v5);
  if (v13 >= v4 + v5)
  {
    unint64_t v15 = v13 - v4;
    unint64_t v16 = v14 + v5 + 4;
    if (v15 > 0xFFFFFFFFFFFFFFFBLL || v16 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v15) = *(_DWORD *)(a2 + 80);
      a1[2] = v16;
      uint64_t v4 = *a1;
      unint64_t v5 = v16;
    }
  }
  unint64_t v18 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v18 - (v4 + v5);
  if (v18 >= v4 + v5)
  {
    unint64_t v20 = v18 - v4;
    unint64_t v21 = v19 + v5 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v20) = *(_DWORD *)(a2 + 84);
      a1[2] = v21;
      uint64_t v4 = *a1;
      unint64_t v5 = v21;
    }
  }
  unint64_t v23 = (v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v24 = v23 - (v4 + v5);
  if (v23 >= v4 + v5)
  {
    unint64_t v25 = v23 - v4;
    unint64_t v26 = v24 + v5 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v25) = *(_DWORD *)(a2 + 88);
      a1[2] = v26;
      uint64_t v4 = *a1;
      unint64_t v5 = v26;
    }
  }
  unint64_t v28 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v28 >= v4 + v5)
  {
    unint64_t v29 = (char *)v28 - v4;
    if ((unint64_t)v28 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v29 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *unint64_t v28 = *(_DWORD *)(a2 + 92);
      a1[2] = (uint64_t)(v29 + 4);
    }
  }
  unint64_t v30 = *(_DWORD **)(a2 + 96);
  ++v30[2];
  IPC::ArgumentCoder<WebCore::LightSource,void>::encode(a1, (uint64_t)v30);
  if (v30[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
  }
  else {
    --v30[2];
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)a1, (CFTypeRef *)(a2 + 56));
}

void IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v8 = *(unsigned char *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 68));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 72));
  int v7 = *(_DWORD *)(a2 + 76);
  IPC::Encoder::operator<<<int>(a1, &v7);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 80));
  char v4 = *(unsigned char *)(a2 + 84);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *unint64_t v5 = v4;
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
  }
  else
  {
    __break(0xC471u);
  }
}

void IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v3++) = *(unsigned char *)(a2 + 64);
    a1[2] = v3;
  }
  uint64_t v4 = *a1;
  unint64_t v5 = *a1 + v3;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v3;
    unint64_t v10 = v8 + v3 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v9) = *(_DWORD *)(a2 + 68);
      a1[2] = v10;
      uint64_t v4 = *a1;
      unint64_t v3 = v10;
    }
  }
  unint64_t v12 = (_DWORD *)((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v12 >= v4 + v3)
  {
    unint64_t v13 = (unint64_t)v12 - v4 + 4;
    if ((unint64_t)v12 - v4 > 0xFFFFFFFFFFFFFFFBLL || v13 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *unint64_t v12 = *(_DWORD *)(a2 + 72);
      a1[2] = v13;
    }
  }
  unint64_t v15 = (WTF::StringImpl *)IPC::StreamConnectionEncoder::operator<<<int>(a1, *(_DWORD *)(a2 + 76));
  unint64_t v17 = *((void *)v15 + 1);
  unint64_t v16 = *((void *)v15 + 2);
  unint64_t v18 = *(void *)v15 + v16;
  unint64_t v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v19 >= v18;
  unint64_t v20 = v19 - v18;
  if (v7)
  {
    unint64_t v21 = v20 + v16;
    unint64_t v22 = v20 + v16 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v17)
    {
      unint64_t v17 = 0;
      *((void *)v15 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(*(void *)v15 + v21) = *(_DWORD *)(a2 + 80);
      *((void *)v15 + 2) = v22;
      unint64_t v17 = *((void *)v15 + 1);
      unint64_t v16 = v22;
    }
  }
  if (v16 >= v17)
  {
    *((void *)v15 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)v15 + v16) = *(unsigned char *)(a2 + 84);
    *((void *)v15 + 2) = v16 + 1;
  }

  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v15, (CFTypeRef *)(a2 + 56));
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::SVGFilterExpressionTerm,void>::encode(IPC::Encoder *a1, int *a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, a2[1]);

  return IPC::ArgumentCoder<std::optional<WebCore::FilterEffectGeometry>,void>::encode<IPC::Encoder,std::optional<WebCore::FilterEffectGeometry> const&>(a1, (uint64_t)(a2 + 2));
}

void *IPC::ArgumentCoder<WebCore::GamepadEffectParameters,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    BOOL v7 = (uint64_t *)(v4 + v5);
    result[2] = v7 + 1;
    if (v4)
    {
      int v8 = 0;
      uint64_t v9 = *v7;
      goto LABEL_8;
    }
    unint64_t v32 = v3;
    uint64_t v33 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v2 = result[3];
    if (v2) {
      goto LABEL_74;
    }
  }
  while (1)
  {
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v2 = result[3];
    if (!v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v9 = 0;
LABEL_41:
      int v8 = 1;
      goto LABEL_8;
    }
    uint64_t v111 = result;
    uint64_t v122 = a2;
    if (v32)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 16))(v2, v33, v32);
      uint64_t v9 = 0;
      uint64_t result = v111;
      a2 = v122;
      uint64_t v4 = *v111;
      unint64_t v3 = v111[1];
      goto LABEL_41;
    }
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v9 = 0;
    int v8 = 1;
LABEL_8:
    unint64_t v10 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      unint64_t v12 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v12 + 1;
      if (v4)
      {
        int v13 = 0;
        uint64_t v14 = *v12;
        goto LABEL_15;
      }
      unint64_t v34 = v3;
      uint64_t v35 = 0;
    }
    else
    {
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v36 = result[3];
      if (v36)
      {
        int v106 = v8;
        uint64_t v96 = v9;
        uint64_t v117 = result;
        uint64_t v129 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
          uint64_t result = v117;
          a2 = v129;
          uint64_t v35 = *v117;
          unint64_t v34 = v117[1];
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v35 = 0;
        }
        uint64_t v9 = v96;
        int v8 = v106;
      }
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v2 = result[3];
    if (v2)
    {
      int v101 = v8;
      uint64_t v91 = v9;
      uint64_t v112 = result;
      uint64_t v123 = a2;
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 16))(v2, v35, v34);
        uint64_t v14 = 0;
        uint64_t result = v112;
        a2 = v123;
        uint64_t v4 = *v112;
        unint64_t v3 = v112[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        uint64_t v14 = 0;
      }
      int v13 = 1;
      uint64_t v9 = v91;
      int v8 = v101;
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v14 = 0;
      int v13 = 1;
    }
LABEL_15:
    unint64_t v15 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v15 || v3 - v15 <= 7)
    {
      unint64_t v37 = 0;
      uint64_t v38 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v39 = result[3];
      if (v39)
      {
        int v87 = v13;
        uint64_t v79 = v14;
        int v107 = v8;
        uint64_t v97 = v9;
        uint64_t v118 = result;
        uint64_t v130 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
          uint64_t result = v118;
          a2 = v130;
          uint64_t v38 = *v118;
          unint64_t v37 = v118[1];
        }
        else
        {
          unint64_t v37 = 0;
          uint64_t v38 = 0;
        }
        uint64_t v9 = v97;
        int v8 = v107;
        uint64_t v14 = v79;
        int v13 = v87;
      }
    }
    else
    {
      unint64_t v16 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v16 + 1;
      if (v4)
      {
        int v17 = 0;
        uint64_t v18 = *v16;
        goto LABEL_19;
      }
      unint64_t v37 = v3;
      uint64_t v38 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v2 = result[3];
    if (v2)
    {
      int v83 = v13;
      uint64_t v75 = v14;
      int v102 = v8;
      uint64_t v92 = v9;
      uint64_t v113 = result;
      uint64_t v124 = a2;
      if (v37)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 16))(v2, v38, v37);
        uint64_t v18 = 0;
        uint64_t result = v113;
        a2 = v124;
        uint64_t v4 = *v113;
        unint64_t v3 = v113[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        uint64_t v18 = 0;
      }
      int v17 = 1;
      uint64_t v9 = v92;
      int v8 = v102;
      uint64_t v14 = v75;
      int v13 = v83;
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v18 = 0;
      int v17 = 1;
    }
LABEL_19:
    unint64_t v19 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v19 || v3 - v19 <= 7)
    {
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v42 = result[3];
      if (v42)
      {
        int v72 = v17;
        uint64_t v66 = v18;
        int v88 = v13;
        uint64_t v80 = v14;
        int v108 = v8;
        uint64_t v98 = v9;
        uint64_t v119 = result;
        uint64_t v131 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
          uint64_t result = v119;
          a2 = v131;
          uint64_t v41 = *v119;
          unint64_t v40 = v119[1];
        }
        else
        {
          unint64_t v40 = 0;
          uint64_t v41 = 0;
        }
        uint64_t v9 = v98;
        int v8 = v108;
        uint64_t v14 = v80;
        int v13 = v88;
        uint64_t v18 = v66;
        int v17 = v72;
      }
    }
    else
    {
      unint64_t v20 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v20 + 1;
      if (v4)
      {
        int v21 = 0;
        uint64_t v22 = *v20;
        goto LABEL_23;
      }
      unint64_t v40 = v3;
      uint64_t v41 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v2 = result[3];
    if (v2)
    {
      int v69 = v17;
      uint64_t v63 = v18;
      int v84 = v13;
      uint64_t v76 = v14;
      int v103 = v8;
      uint64_t v93 = v9;
      uint64_t v114 = result;
      uint64_t v125 = a2;
      if (v40)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 16))(v2, v41, v40);
        uint64_t v22 = 0;
        uint64_t result = v114;
        a2 = v125;
        uint64_t v4 = *v114;
        unint64_t v3 = v114[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        uint64_t v22 = 0;
      }
      int v21 = 1;
      uint64_t v9 = v93;
      int v8 = v103;
      uint64_t v14 = v76;
      int v13 = v84;
      uint64_t v18 = v63;
      int v17 = v69;
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v22 = 0;
      int v21 = 1;
    }
LABEL_23:
    unint64_t v23 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v23 || v3 - v23 <= 7)
    {
      unint64_t v43 = 0;
      uint64_t v44 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v45 = result[3];
      if (v45)
      {
        int v61 = v21;
        uint64_t v57 = v22;
        int v73 = v17;
        uint64_t v67 = v18;
        int v89 = v13;
        uint64_t v81 = v14;
        int v109 = v8;
        uint64_t v99 = v9;
        uint64_t v120 = result;
        uint64_t v132 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
          uint64_t result = v120;
          a2 = v132;
          uint64_t v44 = *v120;
          unint64_t v43 = v120[1];
        }
        else
        {
          unint64_t v43 = 0;
          uint64_t v44 = 0;
        }
        uint64_t v9 = v99;
        int v8 = v109;
        uint64_t v14 = v81;
        int v13 = v89;
        uint64_t v18 = v67;
        int v17 = v73;
        uint64_t v22 = v57;
        int v21 = v61;
      }
    }
    else
    {
      unint64_t v24 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v24 + 1;
      if (v4)
      {
        int v25 = 0;
        uint64_t v26 = *v24;
        goto LABEL_27;
      }
      unint64_t v43 = v3;
      uint64_t v44 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v26 = 0;
    uint64_t v2 = result[3];
    if (v2)
    {
      int v59 = v21;
      uint64_t v55 = v22;
      int v70 = v17;
      uint64_t v64 = v18;
      int v85 = v13;
      uint64_t v77 = v14;
      int v104 = v8;
      uint64_t v94 = v9;
      uint64_t v115 = result;
      uint64_t v126 = a2;
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v2 + 16))(v2, v44, v43, 0.0);
        uint64_t result = v115;
        a2 = v126;
        uint64_t v4 = *v115;
        unint64_t v3 = v115[1];
        int v25 = 1;
        uint64_t v9 = v94;
        int v8 = v104;
        uint64_t v14 = v77;
        int v13 = v85;
        uint64_t v18 = v64;
        int v17 = v70;
        uint64_t v22 = v55;
        int v21 = v59;
        uint64_t v26 = 0;
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        int v25 = 1;
      }
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      int v25 = 1;
    }
LABEL_27:
    unint64_t v27 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v27 || v3 - v27 <= 7)
    {
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      *uint64_t result = 0;
      result[1] = 0;
      uint64_t v48 = result[3];
      if (v48)
      {
        int v54 = v25;
        uint64_t v52 = v26;
        int v62 = v21;
        uint64_t v58 = v22;
        int v74 = v17;
        uint64_t v68 = v18;
        int v90 = v13;
        uint64_t v82 = v14;
        int v110 = v8;
        uint64_t v100 = v9;
        uint64_t v121 = result;
        uint64_t v133 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
          uint64_t result = v121;
          a2 = v133;
          uint64_t v47 = *v121;
          unint64_t v46 = v121[1];
        }
        else
        {
          unint64_t v46 = 0;
          uint64_t v47 = 0;
        }
        uint64_t v9 = v100;
        int v8 = v110;
        uint64_t v14 = v82;
        int v13 = v90;
        uint64_t v18 = v68;
        int v17 = v74;
        uint64_t v22 = v58;
        int v21 = v62;
        uint64_t v26 = v52;
        int v25 = v54;
      }
    }
    else
    {
      unint64_t v28 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      result[2] = v28 + 1;
      if (v4)
      {
        int v29 = 0;
        uint64_t v30 = *v28;
        if (v8) {
          goto LABEL_73;
        }
        goto LABEL_31;
      }
      unint64_t v46 = v3;
      uint64_t v47 = 0;
    }
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v49 = result[3];
    if (!v49) {
      break;
    }
    if (!v46) {
      break;
    }
    uint64_t v56 = v22;
    int v60 = v21;
    unint64_t v50 = result;
    uint64_t v127 = a2;
    uint64_t v95 = v9;
    int v105 = v8;
    uint64_t v78 = v14;
    int v86 = v13;
    uint64_t v65 = v18;
    int v71 = v17;
    uint64_t v51 = v26;
    int v53 = v25;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v49 + 16))(v49, v47, v46);
    int v25 = v53;
    uint64_t v26 = v51;
    int v21 = v60;
    uint64_t v22 = v56;
    int v17 = v71;
    uint64_t v18 = v65;
    int v13 = v86;
    uint64_t v14 = v78;
    uint64_t v9 = v95;
    a2 = v127;
    if (!*v50) {
      break;
    }
    int v29 = 1;
    uint64_t v30 = 0;
    if (v105) {
      goto LABEL_73;
    }
LABEL_31:
    if (!v13 && !v17 && !v21 && !v25 && !v29)
    {
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v14;
      *(void *)(a2 + 16) = v18;
      *(void *)(a2 + 24) = v22;
      char v31 = 1;
      *(void *)(a2 + 32) = v26;
      *(void *)(a2 + 40) = v30;
      goto LABEL_37;
    }
LABEL_73:
    __break(1u);
LABEL_74:
    uint64_t v116 = result;
    uint64_t v128 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
      uint64_t result = v116;
      a2 = v128;
      uint64_t v33 = *v116;
      unint64_t v32 = v116[1];
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = 0;
    }
  }
  char v31 = 0;
  *(unsigned char *)a2 = 0;
LABEL_37:
  *(unsigned char *)(a2 + 48) = v31;
  return result;
}

void *IPC::ArgumentCoder<WebCore::StorageEstimate,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    unint64_t v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      unint64_t v8 = *v6;
      goto LABEL_8;
    }
    unint64_t v8 = v2;
    uint64_t v15 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v15 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    unint64_t v12 = (void *)result[3];
    if (v12) {
      goto LABEL_29;
    }
  }
  while (1)
  {
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (!v16)
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      unint64_t v8 = 0;
LABEL_20:
      int v7 = 1;
      goto LABEL_8;
    }
    uint64_t v22 = result;
    uint64_t v25 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v15, v8);
      unint64_t v8 = 0;
      uint64_t result = v22;
      a2 = v25;
      uint64_t v3 = *v22;
      unint64_t v2 = v22[1];
      goto LABEL_20;
    }
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    int v7 = 1;
LABEL_8:
    unint64_t v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v9 || v2 - v9 <= 7) {
      break;
    }
    unint64_t v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v12 = v11 + 1;
    result[2] = v11 + 1;
    if (!v3)
    {
      unint64_t v17 = v2;
      uint64_t v18 = 0;
      goto LABEL_22;
    }
    if (!v7)
    {
      uint64_t v13 = *v11;
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = v13;
      char v14 = 1;
      goto LABEL_16;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    unint64_t v23 = result;
    uint64_t v27 = a2;
    if (v2)
    {
      (*(void (**)(void *))(*v12 + 16))(v12);
      uint64_t result = v23;
      a2 = v27;
      uint64_t v15 = *v23;
      unint64_t v8 = v23[1];
    }
    else
    {
      unint64_t v8 = 0;
      uint64_t v15 = 0;
    }
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v19 = result[3];
  if (v19)
  {
    unint64_t v24 = result;
    uint64_t v28 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
      uint64_t result = v24;
      a2 = v28;
      uint64_t v18 = *v24;
      unint64_t v17 = v24[1];
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
    }
  }
LABEL_22:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v20 = result[3];
  if (v20)
  {
    if (v17)
    {
      int v21 = result;
      uint64_t v26 = a2;
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)v20 + 16))(result[3], v18, v17);
      a2 = v26;
      if (*v21) {
        goto LABEL_28;
      }
    }
  }
  char v14 = 0;
  *(unsigned char *)a2 = 0;
LABEL_16:
  *(unsigned char *)(a2 + 16) = v14;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 56));
  IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>> const&>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 80));
  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 81));
}

uint64_t IPC::ArgumentCoder<WebCore::RunJavaScriptParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v17);
  unsigned __int16 PartyWebsiteDataRemoval = IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>(a1);
  IPC::Decoder::decode<WTF::URL>(a1, v15);
  unsigned __int16 v5 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  IPC::Decoder::decode<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>(&v12, a1);
  unsigned __int16 v6 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  unsigned __int16 v7 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  if (!*(void *)a1) {
    goto LABEL_16;
  }
  if (!v18 || PartyWebsiteDataRemoval <= 0xFFu || !v16 || v5 <= 0xFFu || !v14 || v6 <= 0xFFu || v7 <= 0xFFu)
  {
    __break(1u);
LABEL_16:
    *a2 = 0;
    a2[88] = 0;
    goto LABEL_10;
  }
  WebCore::RunJavaScriptParameters::RunJavaScriptParameters((uint64_t)v11, &v17, PartyWebsiteDataRemoval, v15, v5 != 0, &v12, v6 != 0, v7 != 0);
  std::optional<WebCore::RunJavaScriptParameters>::optional[abi:sn180100]<WebCore::RunJavaScriptParameters,0>((uint64_t)a2, v11);
  WebCore::RunJavaScriptParameters::~RunJavaScriptParameters((WebCore::RunJavaScriptParameters *)v11, v9);
LABEL_10:
  if (v14 && v13 && v12) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v8);
  }
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, (WTF::StringImpl *)v8);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
}

void sub_19887C858(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  WebCore::RunJavaScriptParameters::~RunJavaScriptParameters((WebCore::RunJavaScriptParameters *)&a9, a2);
  if ((_BYTE)a23 && a21)
  {
    if (a20) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v31);
    }
  }
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a27, (WTF::StringImpl *)v31);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v29 - 64);
  _Unwind_Resume(a1);
}

void sub_19887C8B4()
{
}

uint64_t IPC::Decoder::decode<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16]) {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_19887C8FC(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<std::optional<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::RunJavaScriptParameters>::optional[abi:sn180100]<WebCore::RunJavaScriptParameters,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  WTF::URL::URL(a1 + 16, a2 + 2);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(void *)(a1 + 64) = 0;
    uint64_t v6 = a2[8];
    a2[8] = 0;
    *(void *)(a1 + 64) = v6;
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  *(unsigned char *)(a1 + 88) = 1;
  return a1;
}

void sub_19887C99C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RunJavaScriptParameters::~RunJavaScriptParameters(WebCore::RunJavaScriptParameters *this, void *a2)
{
  if (*((unsigned char *)this + 72))
  {
    uint64_t v5 = *((void *)this + 8);
    if (v5) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
    }
  }
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

uint64_t IPC::ArgumentCoder<WebCore::TextList,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 16));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 20));
}

uint64_t IPC::ArgumentCoder<WebCore::FontAttributes,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,void>::encode<IPC::Encoder,WebCore::Font>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::FontShadow,void>::encode(a1, a2 + 24);
  char v5 = *(unsigned char *)(a2 + 48);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 49);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::VectorArgumentCoder<false,WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 56);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 72));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 73));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 74));
}

unsigned int *IPC::ArgumentCoder<WebCore::FontAttributes,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *v2;
        uint64_t v10 = v2[1];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_9;
  }
  unsigned __int16 v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v10 = v4;
    uint64_t v11 = 0;
LABEL_9:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v13 = v2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *v2;
        unint64_t v4 = v2[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_10:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v14 = v2[3];
    if (v14 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    goto LABEL_11;
  }
  if (!v8)
  {
    int v99 = 0;
    unint64_t v9 = 0;
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::Font,void>::decode((uint64_t)&v100, (IPC::Decoder *)a1);
  if ((_BYTE)v101)
  {
    int v99 = 0;
    unint64_t v9 = v100;
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v15 = *v2;
  uint64_t v16 = v2[1];
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v17 = v2[3];
  if (v17 && v16) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
  }
  unint64_t v9 = 0;
  int v99 = 1;
LABEL_13:
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v119);
  if (!v120)
  {
    uint64_t v38 = *v2;
    uint64_t v39 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v40 = v2[3];
    if (v40)
    {
      if (v39) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v117);
  if (!v118)
  {
    uint64_t v41 = *v2;
    uint64_t v42 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v43 = v2[3];
    if (v43)
    {
      if (v42) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v41);
      }
    }
  }
  IPC::Decoder::decode<WebCore::FontShadow>((uint64_t)v114, v2);
  unint64_t v18 = v2[1];
  uint64_t v19 = *v2;
  unint64_t v20 = v2[2] - *v2;
  if (v18 <= v20)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v46 = v2[3];
    if (v46)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
        uint64_t v45 = *v2;
        uint64_t v44 = v2[1];
      }
      else
      {
        uint64_t v44 = 0;
        uint64_t v45 = 0;
      }
    }
    goto LABEL_51;
  }
  int v21 = (unsigned __int8 *)(v19 + v20);
  v2[2] = (uint64_t)(v21 + 1);
  if (!v19)
  {
    uint64_t v44 = v18;
    uint64_t v45 = 0;
LABEL_51:
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v47 = v2[3];
    if (v47)
    {
      if (v44)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v45, v44);
        uint64_t v19 = *v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_52;
  }
  unsigned int v22 = *v21;
  if (v22 < 3)
  {
    unsigned int v23 = v22 | 0x100;
    goto LABEL_19;
  }
LABEL_52:
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v48 = v2[3];
  if (!v48)
  {
    uint64_t v19 = 0;
    unsigned int v23 = 0;
    unint64_t v18 = 0;
    goto LABEL_54;
  }
  if (!v18)
  {
    uint64_t v19 = 0;
    unsigned int v23 = 0;
LABEL_54:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v49 = v2[3];
    if (v49)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v19);
        uint64_t v50 = *v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        uint64_t v50 = 0;
      }
    }
    else
    {
      uint64_t v50 = 0;
      unint64_t v18 = 0;
    }
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v19);
  unsigned int v23 = 0;
  uint64_t v19 = *v2;
  unint64_t v18 = v2[1];
LABEL_19:
  if (v18 <= v2[2] - v19) {
    goto LABEL_54;
  }
  unint64_t v24 = (unsigned __int8 *)v2[2];
  v2[2] = (uint64_t)(v24 + 1);
  if (!v19)
  {
    uint64_t v50 = 0;
LABEL_56:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v51 = v2[3];
    if (v51)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v50);
        uint64_t v19 = *v2;
        unint64_t v18 = v2[1];
      }
      else
      {
        uint64_t v19 = 0;
      }
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v18 = 0;
    }
    goto LABEL_58;
  }
  unsigned int v25 = *v24;
  if (v25 >= 5)
  {
LABEL_58:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v52 = v2[3];
    if (v52 && v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 16))(v52, v19);
    }
    unsigned int v26 = 0;
    goto LABEL_23;
  }
  unsigned int v26 = v25 | 0x100;
LABEL_23:
  unint64_t v27 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v28)
  {
    unint64_t v29 = v27;
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    if (v27 < 0xAAAA)
    {
      if (v27)
      {
        unsigned int v30 = 24 * v27;
        uint64_t v31 = WTF::fastMalloc((WTF *)(24 * v27));
        LODWORD(v122) = v30 / 0x18;
        uint64_t v121 = v31;
        do
        {
          IPC::Decoder::decode<WebCore::TextList>((uint64_t)&v100, (IPC::Decoder *)v2);
          if (!(_BYTE)v103) {
            goto LABEL_71;
          }
          if (HIDWORD(v122) == v122)
          {
            WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextList>((uint64_t)&v121, (unint64_t)&v100);
          }
          else
          {
            uint64_t v32 = v121 + 24 * HIDWORD(v122);
            *(unsigned char *)uint64_t v32 = (_BYTE)v100;
            uint64_t v33 = v101;
            int v101 = 0;
            *(void *)(v32 + 8) = v33;
            LODWORD(v33) = v102;
            *(unsigned char *)(v32 + 20) = BYTE4(v102);
            *(_DWORD *)(v32 + 16) = v33;
            ++HIDWORD(v122);
          }
          if ((_BYTE)v103)
          {
            unint64_t v34 = v101;
            int v101 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2) {
                WTF::StringImpl::destroy(v34, v28);
              }
              else {
                *(_DWORD *)v34 -= 2;
              }
            }
          }
          --v29;
        }
        while (v29);
        uint64_t v35 = v121;
        uint64_t v36 = v122;
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = 0;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v111 = v35;
      uint64_t v112 = v36;
LABEL_41:
      char v113 = 1;
      uint64_t v37 = WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v28);
      goto LABEL_73;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextList>((uint64_t)&v100, (IPC::Decoder *)v2);
      if (!(_BYTE)v103) {
        break;
      }
      if (HIDWORD(v122) == v122)
      {
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextList>((uint64_t)&v121, (unint64_t)&v100);
      }
      else
      {
        uint64_t v53 = v121 + 24 * HIDWORD(v122);
        *(unsigned char *)uint64_t v53 = (_BYTE)v100;
        int v54 = v101;
        int v101 = 0;
        *(void *)(v53 + 8) = v54;
        LODWORD(v54) = v102;
        *(unsigned char *)(v53 + 20) = BYTE4(v102);
        *(_DWORD *)(v53 + 16) = v54;
        ++HIDWORD(v122);
      }
      if ((_BYTE)v103)
      {
        uint64_t v55 = v101;
        int v101 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2) {
            WTF::StringImpl::destroy(v55, v28);
          }
          else {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      if (!--v29)
      {
        WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v121, HIDWORD(v122));
        uint64_t v111 = v121;
        uint64_t v56 = v122;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        uint64_t v112 = v56;
        goto LABEL_41;
      }
    }
LABEL_71:
    LOBYTE(v111) = 0;
    char v113 = 0;
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v28);
  }
  else
  {
    LOBYTE(v111) = 0;
    char v113 = 0;
  }
  uint64_t v57 = (char *)*v2;
  unint64_t v58 = v2[1];
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v37 = v2[3];
  if (v37) {
    goto LABEL_119;
  }
  while (1)
  {
LABEL_73:
    unint64_t v58 = v2[1];
    uint64_t v57 = (char *)*v2;
    unint64_t v59 = v2[2] - *v2;
    if (v58 <= v59)
    {
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v88 = v2[3];
      if (v88)
      {
        if (v58)
        {
          (*(void (**)(uint64_t))(*(void *)v88 + 16))(v88);
          uint64_t v87 = *v2;
          uint64_t v86 = v2[1];
        }
        else
        {
          uint64_t v86 = 0;
          uint64_t v87 = 0;
        }
      }
      goto LABEL_132;
    }
    int v60 = &v57[v59];
    uint64_t v61 = (uint64_t)&v57[v59 + 1];
    v2[2] = v61;
    if (!v57)
    {
      uint64_t v86 = v58;
      uint64_t v87 = 0;
LABEL_132:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v89 = v2[3];
      if (v89 && v86)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v89 + 16))(v89, v87, v86);
        unsigned int v62 = 0;
        uint64_t v57 = (char *)*v2;
        unint64_t v58 = v2[1];
      }
      else
      {
        unint64_t v58 = 0;
        uint64_t v57 = 0;
        unsigned int v62 = 0;
      }
      goto LABEL_134;
    }
    unsigned int v62 = *v60;
    if (v62 < 2)
    {
      int v63 = 0;
      char v64 = 1;
      goto LABEL_77;
    }
LABEL_134:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v90 = v2[3];
    if (!v90 || !v58)
    {
      char v65 = 0;
      uint64_t v91 = 0;
      uint64_t v57 = 0;
      int v63 = 1;
LABEL_136:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v92 = v2[3];
      if (v92 && v91)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v92 + 16))(v92, v57, v91);
        unsigned int v69 = 0;
        uint64_t v57 = (char *)*v2;
        unint64_t v58 = v2[1];
      }
      else
      {
        unint64_t v58 = 0;
        uint64_t v57 = 0;
        unsigned int v69 = 0;
      }
      goto LABEL_138;
    }
    uint64_t v37 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v90 + 16))(v90, v57);
    char v64 = 0;
    uint64_t v57 = (char *)*v2;
    unint64_t v58 = v2[1];
    int v63 = 1;
    uint64_t v61 = v2[2];
LABEL_77:
    if (v62) {
      char v65 = v64;
    }
    else {
      char v65 = 0;
    }
    unint64_t v66 = v61 - (void)v57;
    if (v58 <= v66)
    {
      uint64_t v91 = 0;
      uint64_t v98 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v98 && v58)
      {
        (*(void (**)(uint64_t))(*(void *)v98 + 16))(v98);
        uint64_t v57 = (char *)*v2;
        uint64_t v91 = v2[1];
      }
      else
      {
        uint64_t v57 = 0;
      }
      goto LABEL_136;
    }
    uint64_t v67 = &v57[v66];
    uint64_t v68 = (uint64_t)&v57[v66 + 1];
    v2[2] = v68;
    if (!v57)
    {
      uint64_t v91 = v58;
      goto LABEL_136;
    }
    unsigned int v69 = *v67;
    if (v69 < 2)
    {
      int v70 = 0;
      char v71 = 1;
      goto LABEL_84;
    }
LABEL_138:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v93 = v2[3];
    if (!v93 || !v58)
    {
      char v72 = 0;
      uint64_t v94 = 0;
      uint64_t v57 = 0;
      int v70 = 1;
LABEL_140:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v95 = v2[3];
      if (v95 && v94)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v95 + 16))(v95, v57, v94);
        uint64_t v57 = (char *)*v2;
        unint64_t v58 = v2[1];
      }
      else
      {
        unint64_t v58 = 0;
        uint64_t v57 = 0;
      }
      goto LABEL_142;
    }
    uint64_t v37 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v93 + 16))(v93, v57);
    char v71 = 0;
    uint64_t v57 = (char *)*v2;
    unint64_t v58 = v2[1];
    int v70 = 1;
    uint64_t v68 = v2[2];
LABEL_84:
    if (v69) {
      char v72 = v71;
    }
    else {
      char v72 = 0;
    }
    unint64_t v73 = v68 - (void)v57;
    if (v58 <= v73)
    {
      uint64_t v94 = 0;
      uint64_t v97 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v97 && v58)
      {
        (*(void (**)(uint64_t))(*(void *)v97 + 16))(v97);
        uint64_t v57 = (char *)*v2;
        uint64_t v94 = v2[1];
      }
      else
      {
        uint64_t v57 = 0;
      }
      goto LABEL_140;
    }
    int v74 = &v57[v73];
    v2[2] = (uint64_t)(v74 + 1);
    if (!v57)
    {
      uint64_t v94 = v58;
      goto LABEL_140;
    }
    unsigned int v75 = *v74;
    if (v75 <= 1)
    {
      int v76 = 0;
      uint64_t v2 = (uint64_t *)(v75 != 0);
      goto LABEL_91;
    }
LABEL_142:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v96 = v2[3];
    if (!v96 || !v58 || (uint64_t v37 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v96 + 16))(v96, v57), !*v2))
    {
      *a2 = 0;
      a2[80] = 0;
      goto LABEL_107;
    }
    uint64_t v2 = 0;
    int v76 = 1;
LABEL_91:
    if (!v99)
    {
      uint64_t v100 = v9;
      if (v120)
      {
        uint64_t v37 = WebCore::Color::Color();
        if (v118)
        {
          uint64_t v37 = WebCore::Color::Color();
          if (v116)
          {
            uint64_t v37 = WebCore::Color::Color();
            long long v104 = v115;
            if (v23 > 0xFF)
            {
              char v105 = v23;
              if (v26 > 0xFF)
              {
                char v106 = v26;
                if (v113)
                {
                  v107[0] = v111;
                  uint64_t v77 = v112;
                  uint64_t v111 = 0;
                  uint64_t v112 = 0;
                  v107[1] = v77;
                  if (!v63)
                  {
                    char v108 = v65;
                    if (!v70)
                    {
                      char v109 = v72;
                      if (!v76) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_119:
    if (v58) {
      uint64_t v37 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v37 + 16))(v37, v57);
    }
  }
  char v110 = (char)v2;
  WebCore::FontAttributes::FontAttributes((uint64_t)a2, (uint64_t *)&v100);
  a2[80] = 1;
  WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v107, v78);
  if ((v103 & 0x8000000000000) != 0)
  {
    int v83 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v83);
      WTF::fastFree((WTF *)v83, v57);
    }
  }
  if ((v102 & 0x8000000000000) != 0)
  {
    int v84 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v84);
      WTF::fastFree((WTF *)v84, v57);
    }
  }
  if (((unint64_t)v101 & 0x8000000000000) != 0)
  {
    int v85 = (unsigned int *)((unint64_t)v101 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v101 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v85);
      WTF::fastFree((WTF *)v85, v57);
    }
  }
  uint64_t v79 = v100;
  uint64_t v100 = 0;
  if (v79) {
    WTF::RefCounted<WebCore::Font>::deref(v79);
  }
  unint64_t v9 = 0;
LABEL_107:
  if (v113) {
    WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v111, v57);
  }
  uint64_t result = (unsigned int *)std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v114, v57);
  if (v118)
  {
    if ((v117 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v117 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v81);
      }
    }
  }
  if (v120)
  {
    if ((v119 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v81);
      }
    }
  }
  char v82 = v99;
  if (!v9) {
    char v82 = 1;
  }
  if ((v82 & 1) == 0) {
    return WTF::RefCounted<WebCore::Font>::deref(v9);
  }
  return result;
}

void sub_19887D814(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(unsigned char *)(v29 - 128))
  {
    uint64_t v31 = *(void *)(v29 - 136);
    if ((v31 & 0x8000000000000) != 0)
    {
      uint64_t v35 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, a2);
      }
    }
  }
  if (*(unsigned char *)(v29 - 112))
  {
    uint64_t v32 = *(void *)(v29 - 120);
    if ((v32 & 0x8000000000000) != 0)
    {
      unint64_t v34 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v34);
        WTF::fastFree((WTF *)v34, a2);
      }
    }
  }
  if (!v28) {
    a11 = 1;
  }
  if ((a11 & 1) == 0) {
    WTF::RefCounted<WebCore::Font>::deref(v28);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::Decoder::decode<WebCore::FontShadow>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v26);
  if (!v27)
  {
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18 && v17 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
  }
  uint64_t v5 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a2);
  char v6 = (char)v4;
  unint64_t v7 = a2[1];
  uint64_t v8 = *a2;
  unint64_t v9 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v7 >= v9 && v7 - v9 > 7)
  {
    uint64_t v11 = (uint64_t *)(v8 + v9);
    a2[2] = (uint64_t)(v11 + 1);
    if (v8)
    {
      int v12 = 0;
      uint64_t v13 = *v11;
      goto LABEL_9;
    }
    uint64_t v20 = v7;
    unint64_t v4 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v4 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = a2[3];
    if (v21)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v8, v7);
        unint64_t v4 = (void *)*a2;
        uint64_t v20 = a2[1];
      }
      else
      {
        uint64_t v20 = 0;
        unint64_t v4 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unsigned int *)a2[3];
  if (!result
    || !v20
    || (uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v4), !*a2))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    goto LABEL_13;
  }
  int v12 = 1;
  uint64_t v13 = 0;
LABEL_9:
  uint64_t v14 = v27;
  if (v27)
  {
    WebCore::Color::Color();
    if (v6)
    {
      *(void *)&long long v25 = v5;
      if (!v12)
      {
        *((void *)&v25 + 1) = v13;
        uint64_t result = (unsigned int *)WebCore::Color::Color();
        *(_OWORD *)(a1 + 8) = v25;
        *(unsigned char *)(a1 + 24) = 1;
        if ((*(void *)v24 & 0x8000000000000) != 0)
        {
          uint64_t result = (unsigned int *)(*(void *)v24 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, result);
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
          }
        }
LABEL_13:
        if (!v27) {
          goto LABEL_15;
        }
        uint64_t v14 = v26;
        if ((v26 & 0x8000000000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_18;
      }
    }
  }
  __break(1u);
LABEL_18:
  uint64_t result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
  }
LABEL_15:
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v22 = *a2;
    uint64_t v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unsigned int *)a2[3];
    if (result)
    {
      if (v23) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v22);
      }
    }
  }
  return result;
}

void sub_19887DC60(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::Font,void>::decode(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::FontInternalAttributes>(a2, (uint64_t)v103);
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(WTF::StringImpl **)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    *((void *)a2 + 2) = (char *)v5 + v6 + 4;
    if (v5)
    {
      int v8 = 0;
      goto LABEL_8;
    }
    unint64_t v78 = v4;
    uint64_t v79 = 0;
  }
  else
  {
    unint64_t v78 = 0;
    uint64_t v79 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v80 = *((void *)a2 + 3);
    if (v80)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v80 + 16))(v80, v5, v4);
        uint64_t v79 = *(WTF::StringImpl **)a2;
        unint64_t v78 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v78 = 0;
        uint64_t v79 = 0;
      }
    }
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v81 = *((void *)a2 + 3);
  if (v81 && v78) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v81 + 16))(v81, v79);
  }
  int v8 = 1;
LABEL_8:
  unsigned __int16 v9 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a2);
  if (v9 <= 0xFFu) {
    goto LABEL_102;
  }
  while (1)
  {
    unsigned __int16 v112 = v9;
    unsigned __int16 v10 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a2);
    if (v10 <= 0xFFu)
    {
      char v64 = *(WTF::StringImpl **)a2;
      uint64_t v65 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v66 = *((void *)a2 + 3);
      if (v66)
      {
        if (v65) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v66 + 16))(v66, v64);
        }
      }
    }
    unsigned __int16 v111 = v10;
    unsigned __int16 v11 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a2);
    unint64_t v12 = *((void *)a2 + 1);
    if (v11 <= 0xFFu)
    {
      uint64_t v67 = *(WTF::StringImpl **)a2;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v68 = *((void *)a2 + 3);
      if (!v68 || !v12)
      {
        unint64_t v69 = 0;
        int v70 = 0;
        unsigned __int16 v110 = v11;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
LABEL_110:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v71 = *((void *)a2 + 3);
        if (v71 && v69)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v71 + 16))(v71, v70, v69);
          unsigned int v17 = 0;
          uint64_t v13 = *(WTF::StringImpl **)a2;
          unint64_t v12 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v12 = 0;
          uint64_t v13 = 0;
          unsigned int v17 = 0;
        }
        goto LABEL_112;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v68 + 16))(v68, v67);
      unint64_t v12 = *((void *)a2 + 1);
    }
    unsigned __int16 v110 = v11;
    uint64_t v13 = *(WTF::StringImpl **)a2;
    unint64_t v14 = *((void *)a2 + 2) - *(void *)a2;
    if (v12 <= v14)
    {
      unint64_t v69 = 0;
      int v70 = 0;
      uint64_t v93 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v93)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v93 + 16))(v93);
          int v70 = *(WTF::StringImpl **)a2;
          unint64_t v69 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v69 = 0;
          int v70 = 0;
        }
      }
      goto LABEL_110;
    }
    uint64_t v15 = (unsigned __int8 *)v13 + v14;
    uint64_t v16 = (uint64_t)v13 + v14 + 1;
    *((void *)a2 + 2) = v16;
    if (!v13)
    {
      unint64_t v69 = v12;
      int v70 = 0;
      goto LABEL_110;
    }
    unsigned int v17 = *v15;
    if (v17 < 2)
    {
      int v18 = 0;
      unsigned int v19 = 1;
      goto LABEL_15;
    }
LABEL_112:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v72 = *((void *)a2 + 3);
    if (!v72 || !v12)
    {
      uint64_t v20 = 0;
      unint64_t v73 = 0;
      uint64_t v13 = 0;
      int v18 = 1;
LABEL_114:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v74 = *((void *)a2 + 3);
      if (v74 && v73)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v74 + 16))(v74, v13, v73);
        uint64_t v13 = *(WTF::StringImpl **)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      goto LABEL_116;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v72 + 16))(v72, v13);
    unsigned int v19 = 0;
    uint64_t v13 = *(WTF::StringImpl **)a2;
    unint64_t v12 = *((void *)a2 + 1);
    int v18 = 1;
    uint64_t v16 = *((void *)a2 + 2);
LABEL_15:
    if (v17) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    unint64_t v21 = v16 - (void)v13;
    if (v12 <= v21)
    {
      unint64_t v73 = 0;
      uint64_t v94 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v12 && v94)
      {
        (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
        uint64_t v13 = *(WTF::StringImpl **)a2;
        unint64_t v73 = *((void *)a2 + 1);
      }
      else
      {
        uint64_t v13 = 0;
      }
      goto LABEL_114;
    }
    uint64_t v22 = (unsigned __int8 *)v13 + v21;
    uint64_t v23 = (uint64_t)v13 + v21 + 1;
    *((void *)a2 + 2) = v23;
    if (!v13)
    {
      unint64_t v73 = v12;
      goto LABEL_114;
    }
    if (*v22 < 2u)
    {
      int v24 = 0;
      goto LABEL_22;
    }
LABEL_116:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v75 = *((void *)a2 + 3);
    if (!v75)
    {
      unint64_t v12 = 0;
LABEL_118:
      int v76 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      int v24 = 1;
LABEL_119:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v77 = *((void *)a2 + 3);
      if (v77 && v12) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v77 + 16))(v77, v76);
      }
LABEL_25:
      LOBYTE(v104) = 0;
      char v109 = 0;
      goto LABEL_78;
    }
    if (!v12) {
      goto LABEL_118;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v75 + 16))(v75, v13);
    uint64_t v13 = *(WTF::StringImpl **)a2;
    unint64_t v12 = *((void *)a2 + 1);
    int v24 = 1;
    uint64_t v23 = *((void *)a2 + 2);
LABEL_22:
    unint64_t v25 = v23 - (void)v13;
    if (v12 <= v25)
    {
      uint64_t v95 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      if (v95)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v95 + 16))(v95);
          int v76 = *(WTF::StringImpl **)a2;
          unint64_t v12 = *((void *)a2 + 1);
        }
        else
        {
          int v76 = 0;
        }
      }
      else
      {
        int v76 = 0;
        unint64_t v12 = 0;
      }
      goto LABEL_119;
    }
    uint64_t v26 = (unsigned __int8 *)v13 + v25;
    uint64_t v27 = (uint64_t)v13 + v25 + 1;
    *((void *)a2 + 2) = v27;
    if (!v13)
    {
      int v76 = 0;
      goto LABEL_119;
    }
    unsigned int v28 = *v26;
    if (v28 >= 2) {
      goto LABEL_25;
    }
    if (!v28)
    {
      int v99 = v18;
      int v100 = v8;
      unint64_t v38 = ((v27 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v13;
      BOOL v40 = v12 < v38 || v12 - v38 < 4;
      if (v40)
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v90 = *((void *)a2 + 3);
        if (v90)
        {
          (*(void (**)(uint64_t))(*(void *)v90 + 16))(v90);
          unsigned int v43 = 0;
          uint64_t v96 = *(WTF::StringImpl **)a2;
          uint64_t v97 = *((void *)a2 + 1);
          uint64_t v98 = *((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          int v8 = 0;
          if (!v98 || !v97) {
            goto LABEL_47;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v98 + 16))(v98, v96);
        }
        unsigned int v43 = 0;
        int v8 = 0;
      }
      else
      {
        uint64_t v41 = (int *)((char *)v13 + v38);
        int v42 = *v41;
        *((void *)a2 + 2) = v41 + 1;
        unsigned int v43 = v42 & 0xFFFFFF00;
        int v8 = v42;
      }
LABEL_47:
      IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(a2, (uint64_t)&v127);
      IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(a2, (uint64_t)&v122);
      IPC::Decoder::decode<std::optional<WebCore::FontPlatformSerializedAttributes>>(v124, a2);
      if (*(void *)a2)
      {
        if (v40) {
          goto LABEL_101;
        }
        LODWORD(v118) = v8 | v43;
        if (!(_BYTE)v128) {
          goto LABEL_101;
        }
        uint64_t v45 = v127;
        uint64_t v127 = 0;
        *(void *)&long long v119 = v45;
        int v8 = v100;
        if (!v123) {
          goto LABEL_101;
        }
        CFTypeRef v46 = v122;
        CFTypeRef v122 = 0;
        *((void *)&v119 + 1) = v46;
        if (!v126) {
          goto LABEL_101;
        }
        std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](v120, (uint64_t)v124);
        LODWORD(v113) = v118;
        long long v47 = v119;
        long long v119 = 0uLL;
        long long v114 = v47;
        std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](v115, (uint64_t)v120);
        char v117 = 1;
        if ((_BYTE)v121) {
          WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v120, v44);
        }
        uint64_t v48 = (const void *)*((void *)&v119 + 1);
        *((void *)&v119 + 1) = 0;
        if (v48) {
          CFRelease(v48);
        }
        uint64_t v49 = (const void *)v119;
        *(void *)&long long v119 = 0;
        int v18 = v99;
        if (v49) {
          CFRelease(v49);
        }
      }
      else
      {
        LOBYTE(v113) = 0;
        char v117 = 0;
        int v8 = v100;
        int v18 = v99;
      }
      if (v126 && v125) {
        WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v124, v44);
      }
      if (v123)
      {
        CFTypeRef v50 = v122;
        CFTypeRef v122 = 0;
        if (v50) {
          CFRelease(v50);
        }
      }
      if ((_BYTE)v128)
      {
        uint64_t v51 = v127;
        uint64_t v127 = 0;
        if (v51) {
          CFRelease(v51);
        }
      }
      if (v117) {
        goto LABEL_68;
      }
      uint64_t v53 = *(WTF::StringImpl **)a2;
      uint64_t v91 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v92 = *((void *)a2 + 3);
      if (!v92) {
        goto LABEL_140;
      }
      if (v91
        && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v92 + 16))(v92, v53),
            int v8 = v100,
            int v18 = v99,
            v117))
      {
LABEL_68:
        LODWORD(v104) = v113;
        long long v52 = v114;
        long long v114 = 0uLL;
        long long v105 = v52;
        std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](v106, (uint64_t)v115);
        int v108 = 0;
        char v54 = 1;
      }
      else
      {
LABEL_140:
        char v54 = 0;
        LOBYTE(v104) = 0;
      }
      char v109 = v54;
      std::__optional_destruct_base<WebCore::FontPlatformSerializedData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v53);
      goto LABEL_78;
    }
    IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v127);
    IPC::Decoder::decode<std::optional<WebCore::FontPlatformSerializedAttributes>>(v124, a2);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v122);
    if (*(void *)a2)
    {
      if (!v129) {
        goto LABEL_101;
      }
      char v118 = v127;
      uint64_t v30 = v128;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      *(void *)&long long v119 = v30;
      if (!v126) {
        goto LABEL_101;
      }
      int v31 = v24;
      uint64_t v32 = a1;
      a1 = v20;
      std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100]((unsigned char *)&v119 + 8, (uint64_t)v124);
      if (!v123) {
        goto LABEL_101;
      }
      CFTypeRef v33 = v122;
      CFTypeRef v122 = 0;
      uint64_t v121 = (uint64_t)v33;
      unint64_t v34 = v118;
      char v118 = 0;
      char v113 = v34;
      uint64_t v35 = v119;
      *(void *)&long long v119 = 0;
      *(void *)&long long v114 = v35;
      std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100]((unsigned char *)&v114 + 8, (uint64_t)&v119 + 8);
      uint64_t v116 = v121;
      char v117 = 1;
      uint64_t v121 = 0;
      if (v120[376]) {
        WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)((char *)&v119 + 8), v29);
      }
      uint64_t v36 = v118;
      if (v118)
      {
        char v118 = 0;
        LODWORD(v119) = 0;
        WTF::fastFree(v36, v29);
      }
    }
    else
    {
      int v31 = v24;
      uint64_t v32 = a1;
      LOBYTE(v113) = 0;
      char v117 = 0;
    }
    if (v123)
    {
      uint64_t v37 = (WTF::StringImpl *)v122;
      CFTypeRef v122 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v29);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
    }
    if (v126 && v125) {
      WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v124, v29);
    }
    a1 = v32;
    if (v129)
    {
      int v60 = v127;
      if (v127)
      {
        uint64_t v127 = 0;
        LODWORD(v128) = 0;
        WTF::fastFree(v60, v29);
      }
    }
    int v24 = v31;
    if (v117
      || (uint64_t v57 = *(WTF::StringImpl **)a2,
          uint64_t v88 = *((void *)a2 + 1),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          (uint64_t v89 = *((void *)a2 + 3)) != 0)
      && v88
      && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v89 + 16))(v89, v57), v117))
    {
      uint64_t v55 = v113;
      char v113 = 0;
      long long v104 = v55;
      uint64_t v56 = v114;
      *(void *)&long long v114 = 0;
      *(void *)&long long v105 = v56;
      std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100]((unsigned char *)&v105 + 8, (uint64_t)&v114 + 8);
      uint64_t v58 = v116;
      uint64_t v116 = 0;
      uint64_t v107 = v58;
      char v59 = 1;
      int v108 = 1;
    }
    else
    {
      char v59 = 0;
      LOBYTE(v104) = 0;
    }
    char v109 = v59;
    std::__optional_destruct_base<WebCore::FontPlatformSerializedCreationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v57);
LABEL_78:
    if (!v109)
    {
      char v82 = *(WTF::StringImpl **)a2;
      uint64_t v83 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v84 = *((void *)a2 + 3);
      if (v84)
      {
        if (v83) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v84 + 16))(v84, v82);
        }
      }
    }
    if (*(void *)a2)
    {
      if (v8 || v9 <= 0xFFu || v10 <= 0xFFu || v11 <= 0xFFu || v18 || v24 || !v109) {
        goto LABEL_101;
      }
      WebCore::FontPlatformData::fromIPCData();
    }
    else
    {
      v101[0] = 0;
      char v102 = 0;
    }
    if (v109 && v108 != -1) {
      ((void (*)(WTF **, WTF **))off_1EE9B4A90[v108])(&v113, &v104);
    }
    if (!v102)
    {
      int v85 = *(WTF::StringImpl **)a2;
      uint64_t v86 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v87 = *((void *)a2 + 3);
      if (v87)
      {
        if (v86) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v87 + 16))(v87, v85);
        }
      }
    }
    if (!*(void *)a2) {
      break;
    }
    if (v103[24] && v102)
    {
      WebCore::Font::create();
      *(void *)a1 = v104;
      *(unsigned char *)(a1 + 8) = 1;
      goto LABEL_96;
    }
LABEL_101:
    __break(1u);
LABEL_102:
    uint64_t v61 = *(WTF::StringImpl **)a2;
    uint64_t v62 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v63 = *((void *)a2 + 3);
    if (v63 && v62) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v63 + 16))(v63, v61);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
LABEL_96:
  if (v102) {
    WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v101);
  }
}

void sub_19887E8E0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
}

uint64_t IPC::Decoder::decode<WebCore::FontInternalAttributes>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::FontPlatformData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 12));
  LOBYTE(v11) = *(unsigned char *)(a2 + 13);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v11);
  LOBYTE(v11) = *(unsigned char *)(a2 + 14);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v11);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_11;
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 25);
  int v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9) {
    goto LABEL_11;
  }
  *int v8 = v7;
  WebCore::FontPlatformData::toIPCData(&v11, (WebCore::FontPlatformData *)a2);
  unsigned __int8 v14 = v13;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v14);
  if (!v14)
  {
    if (!v13)
    {
      IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v11);
      IPC::ArgumentCoder<__CFString const*,void>::encode(a1);
      IPC::ArgumentCoder<__CFString const*,void>::encode(a1);
      uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::FontPlatformSerializedAttributes>,void>::encode<IPC::Encoder,std::optional<WebCore::FontPlatformSerializedAttributes> const&>(a1, (uint64_t)&v12);
      goto LABEL_6;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x19887ECE4);
  }
  uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::FontPlatformSerializedData,WebCore::FontPlatformSerializedCreationData>,void>::encode<IPC::Encoder,std::variant<WebCore::FontPlatformSerializedData,WebCore::FontPlatformSerializedCreationData>,0ul>(a1, (uint64_t)&v11, v14);
LABEL_6:
  if (v13 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(char *, uint64_t *))off_1EE9B4A90[v13])(&v15, &v11);
  }
  return result;
}

void sub_19887ED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61)
{
  if (a61 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_1EE9B4A90[a61])(v61 - 33, &a9);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 1));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
}

uint64_t IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicyValue>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v20;
        uint64_t v11 = *v20;
        unint64_t v10 = v20[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_8;
  }
  char v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_8:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unsigned int v19 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v19;
        uint64_t v2 = *v19;
        unint64_t v1 = v19[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_9;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    int v7 = 1;
    goto LABEL_5;
  }
LABEL_9:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = a1[3];
  if (v6)
  {
    int v18 = a1;
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v2);
    }
    LODWORD(v6) = 0;
    int v7 = 0;
    a1 = v18;
  }
  else
  {
    int v7 = 0;
  }
LABEL_5:
  uint64_t v8 = v6 | (v7 << 8);
  if (v8 <= 0xFF)
  {
    uint64_t v14 = *a1;
    uint64_t v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      if (v15)
      {
        unsigned int v17 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
        return v17;
      }
    }
  }
  return v8;
}

unsigned char *IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  unsigned __int8 v30 = *(_DWORD *)(a2 + 32);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v30);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, v4, v30);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  char v5 = *(unsigned char *)(a2 + 56);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19887F0E4);
  }
  *uint64_t v6 = v5;
  char v8 = *(unsigned char *)(a2 + 57);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x19887F104);
  }
  *uint64_t v9 = v8;
  char v11 = *(unsigned char *)(a2 + 58);
  uint64_t v12 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x19887F124);
  }
  *uint64_t v12 = v11;
  char v14 = *(unsigned char *)(a2 + 59);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x19887F144);
  }
  *uint64_t v15 = v14;
  char v17 = *(unsigned char *)(a2 + 60);
  int v18 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x19887F164);
  }
  *int v18 = v17;
  if (*(unsigned char *)(a2 + 62))
  {
    uint64_t v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x19887F198);
    }
    *uint64_t v20 = 1;
    if (!*(unsigned char *)(a2 + 62))
    {
      unsigned int v28 = (unsigned char *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::decode(v28, v29);
    }
    char v22 = *(unsigned char *)(a2 + 61);
    uint64_t v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x19887F1B8);
    }
    *uint64_t v23 = v22;
  }
  else
  {
    char v31 = 0;
    IPC::Encoder::operator<<<BOOL>(a1, &v31);
  }
  char v25 = *(unsigned char *)(a2 + 63);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x19887F1D8);
  }
  *uint64_t result = v25;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::decode(unsigned char *a1, uint64_t *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, v65);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v63);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v61);
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[2] - *a2;
  if (v4 <= v6) {
    goto LABEL_51;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  uint64_t v8 = v5 + v6 + 1;
  a2[2] = v8;
  if (!v5)
  {
    uint64_t v30 = v4;
    uint64_t v31 = 0;
    goto LABEL_52;
  }
  unsigned int v9 = *v7;
  if (v9 >= 2) {
    goto LABEL_54;
  }
  int v59 = 0;
LABEL_5:
  unint64_t v10 = v8 - v5;
  if (v4 <= v10)
  {
    uint64_t i = 0;
    uint64_t v52 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v52 && v4)
    {
      (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
      uint64_t v5 = *a2;
      uint64_t i = a2[1];
    }
    else
    {
      uint64_t v5 = 0;
    }
    goto LABEL_56;
  }
  char v11 = (unsigned __int8 *)(v5 + v10);
  uint64_t v12 = v5 + v10 + 1;
  a2[2] = v12;
  if (v5)
  {
    if (*v11 >= 2u) {
      goto LABEL_58;
    }
    int v13 = 0;
LABEL_9:
    unint64_t v14 = v12 - v5;
    if (v4 <= v14)
    {
      uint64_t v38 = 0;
      uint64_t v53 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v53 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
        uint64_t v5 = *a2;
        uint64_t v38 = a2[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_60;
    }
    uint64_t v15 = (unsigned __int8 *)(v5 + v14);
    uint64_t v16 = v5 + v14 + 1;
    a2[2] = v16;
    if (!v5)
    {
      uint64_t v38 = v4;
      goto LABEL_60;
    }
    if (*v15 >= 2u) {
      goto LABEL_62;
    }
    int v17 = 0;
LABEL_13:
    unint64_t v18 = v16 - v5;
    if (v4 <= v18)
    {
      uint64_t v41 = 0;
      uint64_t v54 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v54 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
        uint64_t v5 = *a2;
        uint64_t v41 = a2[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_64;
    }
    uint64_t v19 = (unsigned __int8 *)(v5 + v18);
    uint64_t v20 = v5 + v18 + 1;
    a2[2] = v20;
    if (!v5)
    {
      uint64_t v41 = v4;
      goto LABEL_64;
    }
    if (*v19 >= 2u) {
      goto LABEL_66;
    }
    int v21 = 0;
LABEL_17:
    unint64_t v22 = v20 - v5;
    if (v4 <= v22)
    {
      uint64_t v44 = 0;
      uint64_t v55 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v55 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
        uint64_t v5 = *a2;
        uint64_t v44 = a2[1];
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v23 = (unsigned __int8 *)(v5 + v22);
      a2[2] = (uint64_t)(v23 + 1);
      if (v5)
      {
        if (*v23 < 2u)
        {
          int v24 = 0;
          goto LABEL_21;
        }
        goto LABEL_70;
      }
      uint64_t v44 = v4;
    }
    goto LABEL_68;
  }
  for (uint64_t i = v4; ; uint64_t i = 0)
  {
LABEL_56:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v36 = a2[3];
    if (v36 && i)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v5, i);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
    }
LABEL_58:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v37 = a2[3];
    if (v37 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v5);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
      int v13 = 1;
      uint64_t v12 = a2[2];
      goto LABEL_9;
    }
    uint64_t v38 = 0;
    uint64_t v5 = 0;
    int v13 = 1;
LABEL_60:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v39 = a2[3];
    if (v39 && v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v5, v38);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
    }
LABEL_62:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v40 = a2[3];
    if (v40 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v5);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
      int v17 = 1;
      uint64_t v16 = a2[2];
      goto LABEL_13;
    }
    uint64_t v41 = 0;
    uint64_t v5 = 0;
    int v17 = 1;
LABEL_64:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v42 = a2[3];
    if (v42 && v41)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v5, v41);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
    }
LABEL_66:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v43 = a2[3];
    if (v43 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v5);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
      int v21 = 1;
      uint64_t v20 = a2[2];
      goto LABEL_17;
    }
    uint64_t v44 = 0;
    uint64_t v5 = 0;
    int v21 = 1;
LABEL_68:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v45 = a2[3];
    if (v45 && v44)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v5, v44);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
    }
LABEL_70:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v46 = a2[3];
    if (v46 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v5);
    }
    int v24 = 1;
LABEL_21:
    uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a2);
    unint64_t v4 = a2[1];
    uint64_t v26 = (WTF::StringImpl *)*a2;
    unint64_t v27 = a2[2] - *a2;
    if (v4 <= v27)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v49 = a2[3];
      if (v49)
      {
        unsigned int v58 = result;
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
          uint64_t v48 = *a2;
          uint64_t v47 = a2[1];
        }
        else
        {
          uint64_t v47 = 0;
          uint64_t v48 = 0;
        }
        uint64_t result = v58;
      }
      goto LABEL_73;
    }
    unsigned int v28 = (unsigned __int8 *)v26 + v27;
    a2[2] = (uint64_t)(v28 + 1);
    if (!v26)
    {
      uint64_t v47 = v4;
      uint64_t v48 = 0;
LABEL_73:
      unint64_t v4 = 0;
      uint64_t v26 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v50 = a2[3];
      if (v50)
      {
        unsigned int v57 = result;
        if (v47)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48, v47);
          uint64_t v26 = (WTF::StringImpl *)*a2;
          unint64_t v4 = a2[1];
        }
        else
        {
          unint64_t v4 = 0;
          uint64_t v26 = 0;
        }
        uint64_t result = v57;
      }
      goto LABEL_74;
    }
    if (*v28 <= 1u)
    {
      int v29 = 0;
      goto LABEL_25;
    }
LABEL_74:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v51 = a2[3];
    if (!v51
      || !v4
      || (unsigned int v56 = result,
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v51 + 16))(v51, v26),
          uint64_t result = v56,
          !*a2))
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_36;
    }
    int v29 = 1;
LABEL_25:
    if (v67 && v64 && v62 && !v59 && !v13 && !v17 && !v21 && !v24 && (result & 0xFF0000) != 0 && !v29) {
      break;
    }
    __break(1u);
LABEL_51:
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v32 = a2[3];
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        uint64_t v31 = *a2;
        uint64_t v30 = a2[1];
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
LABEL_52:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v33 = a2[3];
    if (v33 && v30)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31, v30);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
    }
LABEL_54:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34 && v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v5);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
      int v59 = 1;
      uint64_t v8 = a2[2];
      goto LABEL_5;
    }
    uint64_t v5 = 0;
    int v59 = 1;
  }
  uint64_t result = WebCore::SecurityOrigin::create();
  *(void *)a1 = v60;
  a1[8] = 1;
LABEL_36:
  if (v62)
  {
    uint64_t result = (uint64_t)v61;
    uint64_t v61 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v64)
  {
    uint64_t result = (uint64_t)v63;
    uint64_t v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v67)
  {
    if (v66 != -1) {
      return ((uint64_t (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v66])(&v63, v65);
    }
  }
  return result;
}

void sub_19887FAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22)
{
  if (a22)
  {
    if (a20 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a20])(&a15, &a17);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19887FB54()
{
}

void sub_19887FB5C()
{
}

void sub_19887FB64()
{
}

void *IPC::Decoder::decode<WebCore::SameSiteInfo>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(a1);
  if (!(result >> 24))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::FormData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 24));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 32));
  uint64_t v4 = *(const void **)(a2 + 40);
  size_t v5 = *(unsigned int *)(a2 + 52);

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);
}

WTF *IPC::ArgumentCoder<WebCore::FormData,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v13, a2);
  IPC::Decoder::decode<long long>(a2);
  char v5 = v4;
  unsigned __int16 v6 = IPC::Decoder::decode<BOOL>(a2);
  uint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v10);
  if (!*(void *)a2) {
    goto LABEL_14;
  }
  if (!v14 || !v5 || v6 <= 0xFFu || !v12)
  {
    __break(1u);
LABEL_14:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_7;
  }
  uint64_t result = (WTF *)WebCore::FormData::create();
  *(void *)a1 = v9;
  a1[8] = 1;
LABEL_7:
  if (v12)
  {
    uint64_t result = v10;
    if (v10)
    {
      unint64_t v10 = 0;
      int v11 = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v8);
    }
  }
  if (v14) {
    return (WTF *)WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v8);
  }
  return result;
}

void sub_19887FD48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a14 && a11) {
    WTF::fastFree(a11, a2);
  }
  if (a20) {
    WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::RequestedScrollData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v10 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v10);
  unsigned __int8 v11 = *(_DWORD *)(a2 + 12);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v11);
  IPC::ArgumentCoder<std::variant<WebCore::FloatPoint,WebCore::FloatSize>,void>::encode<IPC::Encoder,std::variant<WebCore::FloatPoint,WebCore::FloatSize> const&>(a1, a2 + 4, v11);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 16));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 17));
  char v4 = *(unsigned char *)(a2 + 18);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19887FEE8);
  }
  *char v5 = v4;
  if (*(unsigned char *)(a2 + 40))
  {
    char v12 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v12);
    if (*(unsigned char *)(a2 + 40))
    {
      return (unsigned char *)IPC::ArgumentCoder<std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping>,void>::encode<IPC::Encoder,std::tuple<WebCore::ScrollRequestType,std::variant<WebCore::FloatPoint,WebCore::FloatSize>,WebCore::ScrollType,WebCore::ScrollClamping> const&,0ul,1ul,2ul,3ul>(a1, a2 + 20);
    }
    else
    {
      uint64_t v9 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>(v9);
    }
  }
  else
  {
    unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x19887FF08);
    }
    *unint64_t result = 0;
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>(unint64_t *a1)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v16 = a1[3];
    if (v16)
    {
      if (v2)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v3, v2);
        unint64_t v15 = *a1;
        unint64_t v14 = a1[1];
      }
      else
      {
        unint64_t v14 = 0;
        unint64_t v15 = 0;
      }
    }
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v17 = a1[3];
    if (!v17) {
      goto LABEL_4;
    }
    goto LABEL_21;
  }
  char v5 = (unsigned char *)(v3 + v4);
  a1[2] = (unint64_t)(v5 + 1);
  if (!v3)
  {
    unint64_t v14 = v2;
    unint64_t v15 = 0;
    goto LABEL_20;
  }
  if (*v5 <= 1u)
  {
    if (*v5)
    {
      char v10 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
      if (v11) {
        unint64_t v6 = (unint64_t)v10 & 0xFFFFFFFFFFFFFF00;
      }
      else {
        unint64_t v6 = 0;
      }
      if (!v11) {
        goto LABEL_5;
      }
LABEL_16:
      v6 |= v10;
      return v6;
    }
    char v10 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    if (v12)
    {
      unint64_t v6 = (unint64_t)v10 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_16;
    }
    unint64_t v6 = 0;
    unint64_t v15 = *a1;
    unint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v17 = a1[3];
    if (!v17) {
      goto LABEL_5;
    }
LABEL_21:
    if (v14) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15);
    }
  }
LABEL_4:
  unint64_t v6 = 0;
LABEL_5:
  unint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v9 = a1[3];
  if (v9 && v8) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v9 + 16))(v9, v7);
  }
  return v6;
}

unint64_t IPC::ArgumentCoder<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v8 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  IPC::VectorArgumentCoder<false,WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  IPC::VectorArgumentCoder<false,WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 40);
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 68));
  uint64_t v5 = *(unsigned int *)(a2 + 68);
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)(a2 + 56);
    uint64_t v7 = 8 * v5;
    do
    {
      unint64_t result = IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void IPC::Decoder::decode<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_28:
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = a2[3];
    if (v19) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
    }
    return;
  }
  unint64_t v6 = v4;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v4 >= 0x6666)
  {
    do
    {
      IPC::Decoder::decode<WebCore::SnapOffset<float>>((uint64_t)&v27, a2);
      if (!v32) {
        goto LABEL_27;
      }
      if (HIDWORD(v34) == v34)
      {
        WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<float>>((unsigned int *)&v33, (unint64_t)&v27);
      }
      else
      {
        int v13 = (char *)v33 + 40 * HIDWORD(v34);
        long long v14 = v27;
        unsigned char v13[16] = v28;
        *(_OWORD *)int v13 = v14;
        *((void *)v13 + 3) = 0;
        *((void *)v13 + 4) = 0;
        unint64_t v15 = v29;
        int v29 = 0;
        *((void *)v13 + 3) = v15;
        *((_DWORD *)v13 + 8) = v30;
        LODWORD(v15) = v31;
        int v31 = 0;
        *((_DWORD *)v13 + 9) = v15;
        ++HIDWORD(v34);
      }
      if (v32)
      {
        unint64_t v16 = v29;
        if (v29)
        {
          int v29 = 0;
          int v30 = 0;
          WTF::fastFree(v16, v5);
        }
      }
      --v6;
    }
    while (v6);
    unsigned int v21 = HIDWORD(v34);
    unint64_t v22 = v33;
    if (v34 > HIDWORD(v34))
    {
      uint64_t v23 = v33;
      if (HIDWORD(v34))
      {
        if (HIDWORD(v34) >= 0x6666667)
        {
          __break(0xC471u);
          return;
        }
        unsigned int v24 = 40 * HIDWORD(v34);
        char v25 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v34)));
        LODWORD(v34) = v24 / 0x28;
        uint64_t v33 = v25;
        uint64_t v23 = v22;
        if (v25 != v22)
        {
          WTF::VectorMover<false,WebCore::SnapOffset<float>>::move(v22, (WTF *)((char *)v22 + 40 * v21), (uint64_t)v25);
          uint64_t v23 = v33;
        }
      }
      if (v22)
      {
        if (v23 == v22)
        {
          uint64_t v33 = 0;
          LODWORD(v34) = 0;
        }
        WTF::fastFree(v22, v5);
        unint64_t v22 = v33;
      }
      else
      {
        unint64_t v22 = v23;
      }
    }
    *(void *)a1 = v22;
    uint64_t v26 = v34;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    *(void *)(a1 + 8) = v26;
    goto LABEL_17;
  }
  if (v4)
  {
    LODWORD(v34) = 40 * (int)v4 / 0x28u;
    uint64_t v33 = (WTF *)WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::SnapOffset<float>>((uint64_t)&v27, a2);
      if (!v32) {
        break;
      }
      if (HIDWORD(v34) == v34)
      {
        WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<float>>((unsigned int *)&v33, (unint64_t)&v27);
      }
      else
      {
        uint64_t v7 = (char *)v33 + 40 * HIDWORD(v34);
        long long v8 = v27;
        v7[16] = v28;
        *(_OWORD *)uint64_t v7 = v8;
        *((void *)v7 + 3) = 0;
        *((void *)v7 + 4) = 0;
        unint64_t v9 = v29;
        int v29 = 0;
        *((void *)v7 + 3) = v9;
        *((_DWORD *)v7 + 8) = v30;
        LODWORD(v9) = v31;
        int v31 = 0;
        *((_DWORD *)v7 + 9) = v9;
        ++HIDWORD(v34);
      }
      if (v32)
      {
        char v10 = v29;
        if (v29)
        {
          int v29 = 0;
          int v30 = 0;
          WTF::fastFree(v10, v5);
        }
      }
      if (!--v6)
      {
        char v11 = v33;
        uint64_t v12 = v34;
        goto LABEL_16;
      }
    }
LABEL_27:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
    goto LABEL_28;
  }
  char v11 = 0;
  uint64_t v12 = 0;
LABEL_16:
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
LABEL_17:
  *(unsigned char *)(a1 + 16) = 1;
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
}

void sub_198880478(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15)
  {
    if (a12) {
      WTF::fastFree(a12, a2);
    }
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::SnapOffset<float>,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  char v4 = *(unsigned char *)(a2 + 4);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 5));
    IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 8));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 16));
    uint64_t v7 = *(const void **)(a2 + 24);
    uint64_t v8 = *(unsigned int *)(a2 + 36);
    return IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v7, v8);
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::CDMMediaCapability,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 16));
}

uint64_t IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  char v6 = *(unsigned char *)(a2 + 16);
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaSelectionOption,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(a1);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v8);
  uint64_t result = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  if (*a1)
  {
    if (v4 > 0xFFu && v9 && (unsigned __int16)result > 0xFFu)
    {
      uint64_t v7 = v8;
      if (v8) {
        *(_DWORD *)v8 += 2;
      }
      *(unsigned char *)a2 = v4;
      *(void *)(a2 + 8) = v7;
      *(unsigned char *)(a2 + 16) = result;
      *(unsigned char *)(a2 + 24) = 1;
      goto LABEL_8;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (!v9) {
    return result;
  }
  uint64_t v7 = v8;
LABEL_8:
  uint64_t v8 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      return WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

void sub_1988806F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 4u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

unint64_t WebCore::BufferSource::span(WebCore::BufferSource *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if (v1 == -1)
  {
    BOOL v3 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<WebCore::FontShadow,void>::encode(v3, v4);
  }
  else
  {
    char v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::BufferSource *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v1])(&v6, this);
  }
}

unint64_t IPC::ArgumentCoder<WebCore::FontShadow,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  double v4 = *(double *)(a2 + 16);

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 4));
  IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(a1, (unsigned __int8 *)(a2 + 8));

  return IPC::ArgumentCoder<std::optional<WebCore::Color>,void>::encode<IPC::Encoder,std::optional<WebCore::Color> const&>(a1, (unsigned __int8 *)(a2 + 24));
}

unsigned int *IPC::ArgumentCoder<WebCore::CompositionHighlight,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    uint64_t v8 = (int *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      int v9 = 0;
      int v10 = *v8;
      unsigned int v11 = v10 & 0xFFFFFF00;
      int v12 = v10;
      uint64_t v13 = v5;
      goto LABEL_8;
    }
    uint64_t v13 = v4;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *a1;
        uint64_t v13 = a1[1];
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v24 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v26 = a1[3];
  if (!v26)
  {
    uint64_t v13 = 0;
LABEL_43:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v11 = 0;
    int v12 = 0;
    int v9 = 1;
    goto LABEL_8;
  }
  if (!v13) {
    goto LABEL_43;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24, v13);
  unsigned int v11 = 0;
  int v12 = 0;
  uint64_t v13 = *a1;
  unint64_t v4 = a1[1];
  int v9 = 1;
  uint64_t v5 = *a1;
LABEL_8:
  unint64_t v14 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
  if (v4 >= v14 && v4 - v14 > 3)
  {
    unint64_t v16 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (uint64_t)(v16 + 1);
    uint64_t v17 = v4;
    if (v5)
    {
      int v18 = 0;
      unsigned int v19 = *v16 & 0xFFFFFF00;
      int v20 = *v16;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = a1[3];
    if (v27)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v13 = *a1;
        uint64_t v17 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v13 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v28 = a1[3];
  if (v28 && v17) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v13, v17);
  }
  unsigned int v19 = 0;
  int v20 = 0;
  int v18 = 1;
LABEL_15:
  IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, &v37);
  uint64_t result = (unsigned int *)IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, &v34);
  uint64_t v23 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    a2[40] = 0;
    goto LABEL_24;
  }
  if (v9 || v18 || (uint64_t v23 = v39) == 0 || (uint64_t v23 = v36) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  WebCore::CompositionHighlight::CompositionHighlight(&v29, v12 | v11, v20 | v19, (uint64_t)&v37, (uint64_t)&v34);
  *(void *)a2 = v29;
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](a2 + 8, (uint64_t)&v30);
  uint64_t result = (unsigned int *)std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](a2 + 24, (uint64_t)&v32);
  a2[40] = 1;
  if (v33)
  {
    uint64_t v23 = v32;
    if ((v32 & 0x8000000000000) != 0)
    {
LABEL_32:
      uint64_t result = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
      }
    }
  }
  if (v31)
  {
    if ((v30 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
      }
    }
  }
LABEL_24:
  if (v36)
  {
    if (v35)
    {
      if ((v34 & 0x8000000000000) != 0)
      {
        uint64_t result = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v22);
        }
      }
    }
  }
  if (v39 && v38 && (v37 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v22);
    }
  }
  return result;
}

void sub_198880C70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(unsigned char *)(v26 + 16))
  {
    uint64_t v29 = *v27;
    if ((*v27 & 0x8000000000000) != 0)
    {
      uint64_t v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, a2);
      }
    }
  }
  if (a14)
  {
    if ((a13 & 0x8000000000000) != 0)
    {
      uint64_t v32 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, a2);
      }
    }
  }
  if (a12)
  {
    if ((a11 & 0x8000000000000) != 0)
    {
      char v31 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, a2);
      }
    }
  }
  if ((_BYTE)a18)
  {
    if (a16)
    {
      if ((a15 & 0x8000000000000) != 0)
      {
        char v33 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, a2);
        }
      }
    }
  }
  if ((_BYTE)a24 && a22 && (a21 & 0x8000000000000) != 0)
  {
    uint64_t v34 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::optional<WebCore::Color>>::~optional(uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 16) && *(unsigned char *)(result + 8) && (*(void *)result & 0x8000000000000) != 0)
  {
    int v2 = (unsigned int *)(*(void *)result & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      uint64_t v3 = result;
      WTF::fastFree((WTF *)v2, a2);
      return v3;
    }
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::FontChanges,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 32);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 48));

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 50));
}

uint64_t IPC::ArgumentCoder<WebCore::FontChanges,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v17);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v15);
  IPC::Decoder::decode<std::optional<double>>(a1, v13);
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<double>>(a1, v11);
  if (!*(void *)a1) {
    goto LABEL_6;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13[8])
  {
    if (!v12) {
      goto LABEL_26;
    }
    if (v11[8])
    {
LABEL_6:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 56) = 0;
      goto LABEL_15;
    }
  }
  int v6 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*(void *)a1) {
    goto LABEL_6;
  }
  if (!v18 || !v16 || !v14 || !v12 || (v6 & 0xFF0000) == 0 || (result & 0xFF0000) == 0)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  uint64_t result = WebCore::FontChanges::FontChanges();
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 48) = v10;
  *(unsigned char *)(a2 + 56) = 1;
LABEL_15:
  if (v16)
  {
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v18)
  {
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198880FDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 - 56))
  {
    unint64_t v4 = *(WTF::StringImpl **)(v2 - 64);
    *(void *)(v2 - 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v2 - 40))
  {
    uint64_t v5 = *(WTF::StringImpl **)(v2 - 48);
    *(void *)(v2 - 48) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebCore::FontAttributeChanges,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
        uint64_t v32 = *a1;
        uint64_t v31 = a1[1];
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_53;
  }
  long long v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v31 = v4;
    uint64_t v32 = 0;
LABEL_53:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v34 = a1[3];
    if (v34)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32, v31);
        uint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_54;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (v8)
    {
      __int16 v50 = 0;
      IPC::Decoder::operator>><unsigned char>(a1, &v50);
      int v9 = v50;
      if (HIBYTE(v50)) {
        BOOL v10 = v50 > 2u;
      }
      else {
        BOOL v10 = 1;
      }
      int v11 = v10;
      if (v11 == 1)
      {
        uint64_t v47 = *a1;
        uint64_t v48 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v49 = a1[3];
        if (v49 && v48) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
        }
        unsigned int v12 = 0;
      }
      else
      {
        unsigned int v12 = 0x10000;
      }
      if (v11) {
        int v13 = 0;
      }
      else {
        int v13 = v9;
      }
      int v14 = 256;
    }
    else
    {
      int v13 = 0;
      int v14 = 0;
      unsigned int v12 = 0x10000;
    }
    goto LABEL_18;
  }
LABEL_54:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v35 = a1[3];
  if (v35 && v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v5);
  }
  unsigned int v12 = 0;
  int v13 = 0;
  int v14 = 0;
LABEL_18:
  unsigned int v15 = v13 | v12 | v14;
  if (!HIWORD(v12))
  {
    uint64_t v36 = *a1;
    uint64_t v37 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v38 = a1[3];
    if (v38)
    {
      if (v37) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
      }
    }
  }
  unsigned int v72 = v15;
  IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, &v69);
  IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, &v66);
  unint64_t v16 = a1[1];
  uint64_t v17 = *a1;
  unint64_t v18 = a1[2] - *a1;
  if (v16 <= v18)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v41 = a1[3];
    if (v41)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
        uint64_t v40 = *a1;
        uint64_t v39 = a1[1];
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
      }
    }
    goto LABEL_60;
  }
  unsigned int v19 = (unsigned __int8 *)(v17 + v18);
  a1[2] = (uint64_t)(v19 + 1);
  if (!v17)
  {
    uint64_t v39 = v16;
    uint64_t v40 = 0;
LABEL_60:
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v42 = a1[3];
    if (v42)
    {
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40, v39);
        uint64_t v17 = *a1;
        unint64_t v16 = a1[1];
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_61;
  }
  unsigned int v20 = *v19;
  if (v20 < 2)
  {
    if (v20)
    {
      IPC::Decoder::decode<WebCore::FontShadow>((uint64_t)&v50, a1);
      char v22 = v52[0];
      if (v52[0])
      {
        WebCore::Color::Color();
        long long v63 = v51;
        char v22 = 1;
        char v64 = 1;
      }
      else
      {
        v62[0] = 0;
      }
    }
    else
    {
      LOBYTE(v50) = 0;
      v52[0] = 0;
      std::__optional_move_base<WebCore::FontShadow,false>::__optional_move_base[abi:sn180100]((uint64_t)v62, (uint64_t)&v50);
      char v22 = 1;
    }
    unsigned __int8 v65 = v22;
    std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v50, v21);
    goto LABEL_28;
  }
LABEL_61:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v43 = a1[3];
  if (v43 && v16) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v17);
  }
  v62[0] = 0;
  unsigned __int8 v65 = 0;
LABEL_28:
  if (!v65)
  {
    uint64_t v44 = *a1;
    uint64_t v45 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v46 = a1[3];
    if (v46)
    {
      if (v45) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v44);
      }
    }
  }
  int v23 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
  int v61 = v23;
  int v24 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
  int v60 = v24;
  IPC::Decoder::decode<WebCore::FontChanges>((IPC::Decoder *)a1, (uint64_t)v58);
  if (*a1)
  {
    uint64_t v26 = HIWORD(v15);
    if (!v26
      || (uint64_t v26 = v71) == 0
      || (uint64_t v26 = v68) == 0
      || (uint64_t v26 = v65) == 0
      || (v23 & 0xFF0000) == 0
      || (v24 & 0xFF0000) == 0
      || (uint64_t v26 = v59) == 0)
    {
      __break(1u);
LABEL_48:
      uint64_t result = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v25);
      }
      goto LABEL_43;
    }
    WebCore::FontAttributeChanges::FontAttributeChanges();
    *(_WORD *)a2 = v50;
    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 8), (uint64_t)&v51);
    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 24), (uint64_t)v52);
    std::__optional_move_base<WebCore::FontShadow,false>::__optional_move_base[abi:sn180100](a2 + 40, (uint64_t)v53);
    *(_DWORD *)(a2 + 72) = v53[8];
    long long v27 = v54;
    long long v28 = v55;
    long long v54 = 0uLL;
    *(_OWORD *)(a2 + 80) = v27;
    *(_OWORD *)(a2 + 96) = v28;
    *(_OWORD *)(a2 + 112) = v56;
    *(_DWORD *)(a2 + 128) = v57;
    *(unsigned char *)(a2 + 136) = 1;
    WebCore::FontAttributeChanges::~FontAttributeChanges((WebCore::FontAttributeChanges *)&v50, v29);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 136) = 0;
  }
  uint64_t result = (unsigned int *)std::__optional_destruct_base<WebCore::FontChanges,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, (WTF::StringImpl *)v25);
  if (v65) {
    uint64_t result = (unsigned int *)std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v25);
  }
  if (v68)
  {
    if (v67)
    {
      uint64_t v26 = v66;
      if ((v66 & 0x8000000000000) != 0) {
        goto LABEL_48;
      }
    }
  }
LABEL_43:
  if (v71 && v70 && (v69 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v69 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v25);
    }
  }
  return result;
}

void sub_198881624(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (*(unsigned char *)(v26 - 112)) {
    std::__optional_destruct_base<WebCore::FontShadow,false>::~__optional_destruct_base[abi:sn180100](v26 - 144, a2);
  }
  if (*(unsigned char *)(v26 - 88))
  {
    if (*(unsigned char *)(v26 - 96))
    {
      uint64_t v28 = *(void *)(v26 - 104);
      if ((v28 & 0x8000000000000) != 0)
      {
        uint64_t v31 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, a2);
        }
      }
    }
  }
  if (*(unsigned char *)(v26 - 64))
  {
    if (*(unsigned char *)(v26 - 72))
    {
      uint64_t v29 = *(void *)(v26 - 80);
      if ((v29 & 0x8000000000000) != 0)
      {
        uint64_t v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, a2);
        }
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19888175C()
{
}

uint64_t IPC::Decoder::decode<WebCore::FontChanges>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FontChanges,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988817D4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::FontChanges,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  unsigned __int8 v6 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  return IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::encode<IPC::Encoder,std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule> const&>(a1, a2 + 8, v6);
}

uint64_t IPC::ArgumentCoder<WebCore::TextManipulationControllerExclusionRule,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>>((WTF::StringImpl *)a1, (uint64_t)v9);
  if (!*a1) {
    goto LABEL_11;
  }
  if (v4 <= 0xFFu || (v6[0] = v4, !v11))
  {
    __break(1u);
LABEL_11:
    *a2 = 0;
    a2[32] = 0;
    goto LABEL_6;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v9);
  *a2 = v6[0];
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v7);
  a2[32] = 1;
  if (v8 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v8])(&v12, v7);
  }
LABEL_6:
  if (v11)
  {
    if (v10 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v10])(v6, v9);
    }
  }
  return result;
}

void sub_19888194C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, int a17, int a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a13])(v20 - 33, v19);
  }
  if (a19)
  {
    if (a17 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a17])(&a10, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 1u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

WTF::StringImpl *IPC::Decoder::decode<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198881AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore39TextManipulationControllerExclusionRule11ElementRuleENS7_13AttributeRuleENS7_9ClassRuleEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 16));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 24));
  char v6 = *(unsigned char *)(a2 + 32);
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

void *IPC::ArgumentCoder<WebCore::TextManipulationControllerManipulationFailure,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v26);
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v6 = v5;
  unint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v7 >= v9 && v7 - v9 > 7)
  {
    int v11 = (uint64_t *)(v8 + v9);
    *((void *)a1 + 2) = v11 + 1;
    if (v8)
    {
      int v12 = 0;
      uint64_t v13 = *v11;
      goto LABEL_8;
    }
    unint64_t v21 = v7;
    uint64_t v22 = 0;
  }
  else
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v8, v7);
        uint64_t v22 = *(void *)a1;
        unint64_t v21 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v24 = *((void *)a1 + 3);
  if (v24 && v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
  }
  uint64_t v13 = 0;
  int v12 = 1;
LABEL_8:
  __int16 v28 = 0;
  uint64_t result = IPC::Decoder::operator>><unsigned char>(a1, &v28);
  char v15 = v28;
  if (HIBYTE(v28)) {
    BOOL v16 = v28 > 4u;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = v16;
  if (v17 == 1) {
    goto LABEL_23;
  }
  while (*(void *)a1)
  {
    if (v27 && v6 && !v12 && !v17)
    {
      *(_OWORD *)a2 = v26;
      *(void *)(a2 + 16) = v4;
      *(void *)(a2 + 24) = v13;
      *(unsigned char *)(a2 + 32) = v15;
      char v18 = 1;
      goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    uint64_t v19 = *(void *)a1;
    uint64_t v20 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (void *)*((void *)a1 + 3);
    if (result)
    {
      int v25 = v17;
      if (v20) {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v19);
      }
      char v15 = 0;
      int v17 = v25;
    }
    else
    {
      char v15 = 0;
    }
  }
  char v18 = 0;
  *(unsigned char *)a2 = 0;
LABEL_21:
  *(unsigned char *)(a2 + 40) = v18;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 24));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 32));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 40));
  char v5 = *(unsigned char *)(a2 + 48);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 49);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 50));
}

uint64_t IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v59 = v4;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v60);
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    unint64_t v9 = (uint64_t *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (!v6)
    {
      uint64_t v33 = v5;
      uint64_t v34 = 0;
      goto LABEL_40;
    }
    int v10 = 0;
    uint64_t v57 = *v9;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v35 = a1[3];
    if (v35)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
        uint64_t v34 = *a1;
        uint64_t v33 = a1[1];
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
      }
    }
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v36 = a1[3];
    if (v36 && v33)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34, v33);
      uint64_t v57 = 0;
      uint64_t v6 = *a1;
      unint64_t v5 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v57 = 0;
    }
    int v10 = 1;
LABEL_8:
    unint64_t v11 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 >= v11 && v5 - v11 > 7)
    {
      uint64_t v13 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v13 + 1);
      if (v6)
      {
        int v14 = 0;
        uint64_t v15 = *v13;
        goto LABEL_15;
      }
      uint64_t v37 = v5;
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v39 = a1[3];
      if (v39)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
          uint64_t v38 = *a1;
          uint64_t v37 = a1[1];
        }
        else
        {
          uint64_t v37 = 0;
          uint64_t v38 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v40 = a1[3];
    if (v40 && v37)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38, v37);
      uint64_t v15 = 0;
      uint64_t v6 = *a1;
      unint64_t v5 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v15 = 0;
    }
    int v14 = 1;
LABEL_15:
    unint64_t v16 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v16 || v5 - v16 <= 7)
    {
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v43 = a1[3];
      if (v43)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
          uint64_t v42 = *a1;
          uint64_t v41 = a1[1];
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
        }
      }
    }
    else
    {
      int v17 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v17 + 1);
      if (v6)
      {
        int v18 = 0;
        uint64_t v19 = *v17;
        goto LABEL_19;
      }
      uint64_t v41 = v5;
      uint64_t v42 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v44 = a1[3];
    if (v44 && v41)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v42, v41);
      uint64_t v19 = 0;
      uint64_t v6 = *a1;
      unint64_t v5 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v19 = 0;
    }
    int v18 = 1;
LABEL_19:
    unint64_t v20 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v6;
    if (v5 < v20 || v5 - v20 <= 7)
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v47 = a1[3];
      if (v47)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
          uint64_t v46 = *a1;
          uint64_t v45 = a1[1];
        }
        else
        {
          uint64_t v45 = 0;
          uint64_t v46 = 0;
        }
      }
    }
    else
    {
      unint64_t v21 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v21 + 1);
      if (v6)
      {
        int v22 = 0;
        uint64_t v23 = *v21;
        goto LABEL_23;
      }
      uint64_t v45 = v5;
      uint64_t v46 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v48 = a1[3];
    if (v48 && v45) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46, v45);
    }
    uint64_t v23 = 0;
    int v22 = 1;
LABEL_23:
    unsigned __int16 v24 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    uint64_t result = IPC::Decoder::decode<WebCore::BackgroundFetchFailureReason>(a1);
    unint64_t v5 = a1[1];
    long long v26 = (WTF::StringImpl *)*a1;
    unint64_t v27 = a1[2] - *a1;
    if (v5 <= v27) {
      break;
    }
    __int16 v28 = (unsigned __int8 *)v26 + v27;
    a1[2] = (uint64_t)(v28 + 1);
    if (!v26)
    {
      uint64_t v49 = v5;
      uint64_t v50 = 0;
      goto LABEL_55;
    }
    unsigned int v29 = *v28;
    if (v29 > 1) {
      goto LABEL_56;
    }
    int v30 = 0;
    BOOL v31 = v29 != 0;
LABEL_27:
    if (v59)
    {
      if (v61)
      {
        uint64_t v32 = v60;
        int v60 = 0;
        if (!v10 && !v14 && !v18 && !v22 && v24 > 0xFFu && (unsigned __int16)result > 0xFFu && !v30)
        {
          *(void *)a2 = v58;
          *(void *)(a2 + 8) = v32;
          *(void *)(a2 + 16) = v57;
          *(void *)(a2 + 24) = v15;
          *(void *)(a2 + 32) = v19;
          *(void *)(a2 + 40) = v23;
          *(unsigned char *)(a2 + 48) = v24;
          *(unsigned char *)(a2 + 49) = result;
          *(unsigned char *)(a2 + 50) = v31;
          *(unsigned char *)(a2 + 56) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v51 = a1[3];
  if (v51)
  {
    unsigned int v56 = result;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
      uint64_t v50 = *a1;
      uint64_t v49 = a1[1];
    }
    else
    {
      uint64_t v49 = 0;
      uint64_t v50 = 0;
    }
    uint64_t result = v56;
  }
LABEL_55:
  unint64_t v5 = 0;
  long long v26 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v52 = a1[3];
  if (v52)
  {
    unsigned int v55 = result;
    if (v49)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52 + 16))(v52, v50, v49);
      long long v26 = (WTF::StringImpl *)*a1;
      unint64_t v5 = a1[1];
    }
    else
    {
      unint64_t v5 = 0;
      long long v26 = 0;
    }
    uint64_t result = v55;
  }
LABEL_56:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v53 = a1[3];
  if (v53)
  {
    if (v5)
    {
      unsigned int v54 = result;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v26);
      uint64_t result = v54;
      if (*a1)
      {
        BOOL v31 = 0;
        int v30 = 1;
        goto LABEL_27;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (v61)
  {
    uint64_t result = (uint64_t)v60;
    int v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198882448(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)a2);
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, a2 + 208);
  char v5 = *(unsigned char *)(a2 + 256);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, a2 + 264);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, a2 + 280);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 296));
  return IPC::ArgumentCoder<WTF::Markable<WebCore::ContentSecurityPolicyResponseHeaders,WebCore::ContentSecurityPolicyResponseHeaders::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WebCore::ContentSecurityPolicyResponseHeaders,WebCore::ContentSecurityPolicyResponseHeaders::MarkableTraits> const&>(a1, a2 + 304);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v53);
  IPC::Decoder::decode<WebCore::FetchOptions>(a1, (uint64_t)v78);
  unsigned __int16 Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)&v48, (uint64_t *)a1);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v46);
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(char **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if (v5 <= v7) {
    goto LABEL_35;
  }
  uint64_t v8 = &v6[v7];
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v35 = v5;
    uint64_t v36 = 0;
    goto LABEL_36;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_37;
  }
  if (v9)
  {
    int v61 = 0;
    char v62 = 1;
    uint64_t v59 = 0;
    uint64_t v41 = 0;
    uint64_t v60 = 0;
    uint64_t v42 = 0;
    int v43 = 0;
    char v44 = 1;
    char v45 = 1;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v6);
  }
  else
  {
    IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v59, a1);
    if (!v63) {
      goto LABEL_38;
    }
    uint64_t v11 = v59;
    uint64_t v59 = 0;
    int v57 = v61;
    char v58 = v62;
    v56[0] = 0;
    uint64_t v41 = v11;
    v56[1] = 0;
    uint64_t v12 = v60;
    uint64_t v60 = 0;
    uint64_t v42 = v12;
    int v43 = v61;
    char v44 = v62;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v10);
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v13);
    char v45 = 1;
  }
  while (1)
  {
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 336) = 0;
      goto LABEL_26;
    }
    if (v55)
    {
      WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v59, (uint64_t)v53);
      int v14 = v54;
      unsigned int v54 = 0;
      CFTypeRef cf = v14;
      if (v82)
      {
        v65[0] = v78[0];
        *(_DWORD *)((char *)v65 + 3) = *(_DWORD *)((char *)v78 + 3);
        uint64_t v15 = v79;
        uint64_t v79 = 0;
        uint64_t v66 = v15;
        long long v67 = v80;
        long long v68 = v81;
        if (Headers > 0xFFu)
        {
          char v69 = Headers;
          if (v52)
          {
            uint64_t v16 = v48;
            uint64_t v48 = 0;
            uint64_t v70 = v16;
            uint64_t v17 = v49;
            uint64_t v49 = 0;
            uint64_t v71 = v17;
            uint64_t v18 = v50;
            uint64_t v50 = 0;
            uint64_t v72 = v18;
            uint64_t v19 = v51;
            uint64_t v51 = 0;
            uint64_t v73 = v19;
            if (v47)
            {
              unint64_t v20 = v46;
              uint64_t v46 = 0;
              *(void *)&long long v74 = v20;
              if (v45) {
                break;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_35:
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (v37)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v37 + 16))(v37, v6);
        uint64_t v36 = *(char **)a1;
        unint64_t v35 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v35 = 0;
        uint64_t v36 = 0;
      }
    }
LABEL_36:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v38 = *((void *)a1 + 3);
    if (v38)
    {
      if (v35)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
        uint64_t v6 = *(char **)a1;
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_37:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v39 = *((void *)a1 + 3);
    if (v39 && v5) {
      (*(void (**)(uint64_t, char *))(*(void *)v39 + 16))(v39, v6);
    }
LABEL_38:
    LOBYTE(v41) = 0;
    char v45 = 0;
    uint64_t v6 = *(char **)a1;
    unint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40 && v5) {
      (*(void (**)(uint64_t, char *))(*(void *)v40 + 16))(v40, v6);
    }
  }
  *((void *)&v74 + 1) = v41;
  uint64_t v21 = v42;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v75 = v21;
  int v76 = v43;
  char v77 = v44;
  WebCore::ResourceRequestBase::ResourceRequestBase(a2, (uint64_t)&v59);
  int v22 = v66;
  *(void *)(a2 + 192) = cf;
  *(_DWORD *)(a2 + 208) = v65[0];
  *(_DWORD *)(a2 + 211) = *(_DWORD *)((char *)v65 + 3);
  CFTypeRef cf = 0;
  uint64_t v66 = 0;
  *(void *)(a2 + 216) = v22;
  long long v23 = v68;
  *(_OWORD *)(a2 + 224) = v67;
  *(_OWORD *)(a2 + 240) = v23;
  *(unsigned char *)(a2 + 256) = v69;
  uint64_t v24 = v70;
  uint64_t v70 = 0;
  *(void *)(a2 + 264) = v24;
  *(void *)(a2 + 272) = v71;
  *(void *)&long long v23 = v75;
  *(void *)(a2 + 288) = v73;
  *(_OWORD *)(a2 + 296) = v74;
  uint64_t v71 = 0;
  uint64_t v25 = v72;
  uint64_t v72 = 0;
  *(void *)(a2 + 280) = v25;
  long long v74 = 0uLL;
  uint64_t v73 = 0;
  uint64_t v75 = 0;
  *(void *)(a2 + 312) = v23;
  LODWORD(v25) = v76;
  *(unsigned char *)(a2 + 324) = v77;
  *(_DWORD *)(a2 + 320) = v25;
  *(unsigned char *)(a2 + 336) = 1;
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74 + 8, v26);
  __int16 v28 = (WTF::StringImpl *)v74;
  *(void *)&long long v74 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v27);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v72);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v70);
  int v30 = v66;
  uint64_t v66 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v29);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  CFTypeRef v31 = cf;
  CFTypeRef cf = 0;
  if (v31) {
    CFRelease(v31);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v59);
LABEL_26:
  if (v45) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v6);
  }
  if (v47)
  {
    uint64_t v32 = v46;
    uint64_t v46 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&v48);
  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v78, v33);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v53);
}

void sub_198882A5C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl *a7, char a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  if (a8 && a7)
  {
    if (*(_DWORD *)a7 == 2) {
      WTF::StringImpl::destroy(a7, a2);
    }
    else {
      *(_DWORD *)a7 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)va);
  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100](v8 - 144, v10);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)va1);
  _Unwind_Resume(a1);
}

void sub_198882B5C()
{
}

void sub_198882B64()
{
}

_DWORD *IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, a2 + 208);
  char v5 = *(unsigned char *)(a2 + 256);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, a2 + 264);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, a2 + 280);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 296));
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)a1, (uint64_t)v47);
  IPC::Decoder::decode<WebCore::FetchOptions>((IPC::Decoder *)a1, (uint64_t)v50);
  unsigned __int16 Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a1);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)&v42, a1);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v40);
  if (!*a1) {
    goto LABEL_22;
  }
  if (!v6) {
    goto LABEL_21;
  }
  if (!v49) {
    goto LABEL_21;
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v28, (uint64_t)v47);
  unsigned int v9 = v48;
  uint64_t v48 = 0;
  CFTypeRef cf = v9;
  if (!v54) {
    goto LABEL_21;
  }
  v30[0] = v50[0];
  *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)v50 + 3);
  int v10 = v51;
  uint64_t v51 = 0;
  CFTypeRef v31 = v10;
  long long v32 = v52;
  long long v33 = v53;
  if (Headers <= 0xFFu) {
    goto LABEL_21;
  }
  char v34 = Headers;
  if (!v46) {
    goto LABEL_21;
  }
  uint64_t v11 = v42;
  uint64_t v42 = 0;
  uint64_t v35 = v11;
  uint64_t v12 = v43;
  uint64_t v43 = 0;
  uint64_t v36 = v12;
  uint64_t v13 = v44;
  uint64_t v44 = 0;
  uint64_t v37 = v13;
  uint64_t v14 = v45;
  uint64_t v45 = 0;
  uint64_t v38 = v14;
  if (!v41)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 304) = 0;
    goto LABEL_15;
  }
  uint64_t v15 = v40;
  uint64_t v40 = 0;
  uint64_t v39 = v15;
  *(void *)a2 = v4;
  WebCore::ResourceRequestBase::ResourceRequestBase(a2 + 8, (uint64_t)v28);
  uint64_t v16 = v31;
  *(void *)(a2 + 200) = cf;
  *(_DWORD *)(a2 + 208) = v30[0];
  *(_DWORD *)(a2 + 211) = *(_DWORD *)((char *)v30 + 3);
  CFTypeRef cf = 0;
  CFTypeRef v31 = 0;
  *(void *)(a2 + 216) = v16;
  long long v17 = v33;
  *(_OWORD *)(a2 + 224) = v32;
  *(_OWORD *)(a2 + 240) = v17;
  *(unsigned char *)(a2 + 256) = v34;
  uint64_t v18 = v35;
  uint64_t v35 = 0;
  *(void *)(a2 + 264) = v18;
  uint64_t v19 = v36;
  uint64_t v36 = 0;
  *(void *)(a2 + 272) = v19;
  uint64_t v20 = v37;
  uint64_t v37 = 0;
  *(void *)(a2 + 280) = v20;
  uint64_t v21 = v38;
  uint64_t v38 = 0;
  *(void *)(a2 + 288) = v21;
  *(void *)(a2 + 296) = v39;
  *(unsigned char *)(a2 + 304) = 1;
  uint64_t v39 = 0;
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v37);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v35);
  long long v23 = v31;
  CFTypeRef v31 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  CFTypeRef v24 = cf;
  CFTypeRef cf = 0;
  if (v24) {
    CFRelease(v24);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v28);
LABEL_15:
  if (v41)
  {
    uint64_t v25 = v40;
    uint64_t v40 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v8);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&v42);
  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, v26);
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v47);
}

void sub_198882EB4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,WTF::StringImpl *a46,uint64_t a47,WTF::StringImpl *a48,char a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a46)
  {
    if (*(_DWORD *)a46 == 2) {
      WTF::StringImpl::destroy(a46, a2);
    }
    else {
      *(_DWORD *)a46 -= 2;
    }
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(v60);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v59);
  if (a36)
  {
    if (*(_DWORD *)a36 == 2) {
      WTF::StringImpl::destroy(a36, v63);
    }
    else {
      *(_DWORD *)a36 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v58);
  if (a49 && a48)
  {
    if (*(_DWORD *)a48 == 2) {
      WTF::StringImpl::destroy(a48, v64);
    }
    else {
      *(_DWORD *)a48 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](&a51);
  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100](v61 - 128, v65);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&a58);
  _Unwind_Resume(a1);
}

void sub_198882F94()
{
}

void sub_198882F9C()
{
}

uint64_t IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 24));
}

WTF *IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::decode@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  char v6 = *(char **)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    unsigned int v9 = (unint64_t *)&v6[v7];
    *((void *)a1 + 2) = v9 + 1;
    if (v6)
    {
      unint64_t v10 = *v9;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      if (v10 < 0x8000)
      {
        if (v10)
        {
          LODWORD(v60) = v10;
          uint64_t v59 = WTF::fastMalloc((WTF *)(32 * v10));
          do
          {
            IPC::Decoder::decode<WebCore::ImageResource>((uint64_t)&v54, a1);
            if (!v58) {
              goto LABEL_24;
            }
            if (HIDWORD(v60) == v60)
            {
              WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageResource>((unsigned int *)&v59, (unint64_t)&v54);
            }
            else
            {
              int v12 = HIDWORD(v60) + 1;
              uint64_t v13 = (void *)(v59 + 32 * HIDWORD(v60));
              uint64_t v14 = v54;
              uint64_t v54 = 0;
              *uint64_t v13 = v14;
              uint64_t v15 = v55;
              uint64_t v55 = 0;
              v13[1] = v15;
              uint64_t v16 = v56;
              uint64_t v56 = 0;
              v13[2] = v16;
              uint64_t v17 = v57;
              uint64_t v57 = 0;
              v13[3] = v17;
              HIDWORD(v60) = v12;
            }
            std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
            --v10;
          }
          while (v10);
          uint64_t v18 = v59;
          unsigned int v20 = v60;
          unsigned int v19 = HIDWORD(v60);
        }
        else
        {
          unsigned int v19 = 0;
          unsigned int v20 = 0;
          uint64_t v18 = 0;
        }
        uint64_t v59 = 0;
        uint64_t v51 = (WTF *)v18;
LABEL_18:
        uint64_t v60 = 0;
        unint64_t v52 = __PAIR64__(v19, v20);
        char v53 = 1;
        WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, a2);
        goto LABEL_26;
      }
      while (1)
      {
        IPC::Decoder::decode<WebCore::ImageResource>((uint64_t)&v54, a1);
        if (!v58) {
          break;
        }
        if (HIDWORD(v60) == v60)
        {
          WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageResource>((unsigned int *)&v59, (unint64_t)&v54);
        }
        else
        {
          int v21 = HIDWORD(v60) + 1;
          int v22 = (void *)(v59 + 32 * HIDWORD(v60));
          uint64_t v23 = v54;
          uint64_t v54 = 0;
          *int v22 = v23;
          uint64_t v24 = v55;
          uint64_t v55 = 0;
          v22[1] = v24;
          uint64_t v25 = v56;
          uint64_t v56 = 0;
          v22[2] = v25;
          uint64_t v26 = v57;
          uint64_t v57 = 0;
          v22[3] = v26;
          HIDWORD(v60) = v21;
        }
        std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
        if (!--v10)
        {
          uint64_t v47 = HIDWORD(v60);
          uint64_t result = (WTF *)v59;
          if (v60 > HIDWORD(v60))
          {
            uint64_t v48 = (WTF *)v59;
            if (HIDWORD(v60))
            {
              uint64_t v50 = (WTF::StringImpl *)v59;
              if (HIDWORD(v60) >> 27)
              {
                __break(0xC471u);
                return result;
              }
              char v49 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(32 * HIDWORD(v60)));
              LODWORD(v60) = v47;
              uint64_t v59 = (uint64_t)v49;
              uint64_t result = v50;
              uint64_t v48 = v50;
              if (v49 != (WTF::StringImpl **)v50)
              {
                WTF::VectorMover<false,WebCore::ImageResource>::move(v50, (WTF::StringImpl *)((char *)v50 + 32 * v47), v49);
                uint64_t result = v50;
                uint64_t v48 = (WTF *)v59;
              }
            }
            if (result)
            {
              if (v48 == result)
              {
                uint64_t v59 = 0;
                LODWORD(v60) = 0;
              }
              WTF::fastFree(result, a2);
              uint64_t result = (WTF *)v59;
            }
            else
            {
              uint64_t result = v48;
            }
          }
          uint64_t v59 = 0;
          uint64_t v51 = result;
          unsigned int v20 = v60;
          unsigned int v19 = HIDWORD(v60);
          goto LABEL_18;
        }
      }
LABEL_24:
      LOBYTE(v51) = 0;
      char v53 = 0;
      std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
      WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v27);
      goto LABEL_25;
    }
    unint64_t v41 = v5;
    uint64_t v42 = 0;
  }
  else
  {
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v43 = *((void *)a1 + 3);
    if (v43)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v43 + 16))(v43, v6, v5);
        uint64_t v42 = *(char **)a1;
        unint64_t v41 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v41 = 0;
        uint64_t v42 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v44 = *((void *)a1 + 3);
  if (v44 && v41) {
    (*(void (**)(uint64_t, char *))(*(void *)v44 + 16))(v44, v42);
  }
  LOBYTE(v51) = 0;
  char v53 = 0;
LABEL_25:
  __int16 v28 = *(char **)a1;
  uint64_t v29 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF *)*((void *)a1 + 3);
  if (result) {
    goto LABEL_46;
  }
LABEL_26:
  while (1)
  {
    uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v59);
    unint64_t v31 = *((void *)a1 + 1);
    long long v32 = *(char **)a1;
    unint64_t v33 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
    if (v31 < v33 || v31 - v33 <= 7) {
      break;
    }
    uint64_t v35 = (uint64_t *)&v32[v33];
    *((void *)a1 + 2) = v35 + 1;
    if (!v32)
    {
      unint64_t v45 = v31;
      __int16 v28 = 0;
      goto LABEL_52;
    }
    int v36 = 0;
    uint64_t v37 = *v35;
LABEL_33:
    if (v53)
    {
      if ((_BYTE)v60)
      {
        uint64_t v38 = v59;
        uint64_t v59 = 0;
        if (!v36)
        {
          uint64_t v39 = v51;
          uint64_t v51 = 0;
          uint64_t v54 = 0;
          *(void *)a3 = v39;
          uint64_t v55 = 0;
          unint64_t v40 = v52;
          unint64_t v52 = 0;
          *(void *)(a3 + 8) = v40;
          *(void *)(a3 + 16) = v38;
          *(void *)(a3 + 24) = v37;
          *(unsigned char *)(a3 + 32) = 1;
          uint64_t v56 = 0;
          uint64_t v57 = v37;
          uint64_t result = (WTF *)WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v28);
          goto LABEL_37;
        }
      }
    }
    __break(1u);
LABEL_46:
    if (v29) {
      (*(void (**)(WTF *, char *))(*(void *)result + 16))(result, v28);
    }
  }
  unint64_t v45 = 0;
  __int16 v28 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v46 = *((void *)a1 + 3);
  if (v46)
  {
    if (v31)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v46 + 16))(v46, v32, v31);
      __int16 v28 = *(char **)a1;
      unint64_t v45 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v45 = 0;
      __int16 v28 = 0;
    }
  }
LABEL_52:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF *)*((void *)a1 + 3);
  if (result)
  {
    if (v45)
    {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v28);
      if (*(void *)a1)
      {
        uint64_t v37 = 0;
        int v36 = 1;
        goto LABEL_33;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
LABEL_37:
  if ((_BYTE)v60)
  {
    uint64_t result = (WTF *)v59;
    uint64_t v59 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v53) {
    return (WTF *)WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v28);
  }
  return result;
}

void sub_1988834DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(unsigned char *)(v17 - 40))
  {
    unsigned int v19 = *(WTF::StringImpl **)(v17 - 48);
    *(void *)(v17 - 48) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, a2);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (a13) {
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::ImageResource,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 3);
}

unsigned char *IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ContentType,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 56));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 57));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 58));
  IPC::VectorArgumentCoder<false,WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 64);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 104);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 128);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 152);

  return IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 176);
}

void IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  int v2 = a1;
  IPC::Decoder::decode<WebCore::ContentType>(a1, (uint64_t)&v102);
  IPC::Decoder::decode<WTF::URL>(v2, &v98);
  uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 1);
  uint64_t v5 = *(void *)v2;
  unint64_t v6 = *((void *)v2 + 2) - *(void *)v2;
  if ((unint64_t)v4 <= v6) {
    goto LABEL_76;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  uint64_t v8 = v5 + v6 + 1;
  *((void *)v2 + 2) = v8;
  if (!v5)
  {
    uint64_t v38 = v4;
    uint64_t v39 = 0;
    goto LABEL_77;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *(void *)int v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v42 = *((void *)v2 + 3);
    if (!v42 || !v4)
    {
      char v12 = 0;
      uint64_t v43 = 0;
      uint64_t v5 = 0;
      int v10 = 1;
LABEL_81:
      *(void *)int v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v44 = *((void *)v2 + 3);
      if (v44 && v43)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v44 + 16))(v44, v5, v43);
        unsigned int v16 = 0;
        uint64_t v5 = *(void *)v2;
        uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 1);
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_83;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v5);
    char v11 = 0;
    uint64_t v5 = *(void *)v2;
    uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 1);
    int v10 = 1;
    uint64_t v8 = *((void *)v2 + 2);
LABEL_5:
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    unint64_t v13 = v8 - v5;
    if ((unint64_t)v4 <= v13)
    {
      uint64_t v43 = 0;
      uint64_t v49 = *((void *)v2 + 3);
      *(void *)int v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v49 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
        uint64_t v5 = *(void *)v2;
        uint64_t v43 = (unsigned __int8 *)*((void *)v2 + 1);
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_81;
    }
    uint64_t v14 = (unsigned __int8 *)(v5 + v13);
    uint64_t v15 = v5 + v13 + 1;
    *((void *)v2 + 2) = v15;
    if (!v5)
    {
      uint64_t v43 = v4;
      goto LABEL_81;
    }
    unsigned int v16 = *v14;
    if (v16 < 2)
    {
      int v17 = 0;
      char v18 = 1;
      goto LABEL_12;
    }
LABEL_83:
    *(void *)int v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v45 = *((void *)v2 + 3);
    if (!v45 || !v4)
    {
      char v19 = 0;
      int v21 = 0;
      uint64_t v5 = 0;
      int v17 = 1;
      goto LABEL_85;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v5);
    char v18 = 0;
    uint64_t v5 = *(void *)v2;
    uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 1);
    int v17 = 1;
    uint64_t v15 = *((void *)v2 + 2);
LABEL_12:
    if (v16) {
      char v19 = v18;
    }
    else {
      char v19 = 0;
    }
    unint64_t v20 = v15 - v5;
    if ((unint64_t)v4 <= v20)
    {
      int v21 = 0;
      uint64_t v50 = *((void *)v2 + 3);
      *(void *)int v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v50 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
        uint64_t v5 = *(void *)v2;
        int v21 = (unsigned __int8 *)*((void *)v2 + 1);
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_85;
    }
    int v21 = (unsigned __int8 *)(v5 + v20);
    *((void *)v2 + 2) = v21 + 1;
    if (!v5)
    {
      int v21 = v4;
LABEL_85:
      *(void *)int v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v46 = *((void *)v2 + 3);
      if (v46)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v46 + 16))(v46, v5, v21);
          LODWORD(v21) = 0;
          uint64_t v5 = *(void *)v2;
          uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 1);
        }
        else
        {
          uint64_t v4 = 0;
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        LODWORD(v21) = 0;
      }
      goto LABEL_87;
    }
    LODWORD(v21) = *v21;
    if (v21 < 2)
    {
      int v22 = 0;
      char v23 = 1;
      goto LABEL_19;
    }
LABEL_87:
    *(void *)int v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v47 = *((void *)v2 + 3);
    if (v47)
    {
      int v48 = (int)v21;
      if (v4) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v5);
      }
      char v23 = 0;
      int v22 = 1;
      LODWORD(v21) = v48;
    }
    else
    {
      char v23 = 0;
      int v22 = 1;
    }
LABEL_19:
    char v24 = v21 ? v23 : 0;
    IPC::Decoder::decode<WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v95, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v91, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v87, v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v83, (uint64_t *)v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v79, (uint64_t *)v2);
    IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)v76, (uint64_t *)v2);
    if (!*(void *)v2) {
      break;
    }
    if (v104)
    {
      uint64_t v26 = (uint64_t)v102;
      char v102 = 0;
      uint64_t v51 = v26;
      char v52 = v103;
      if (v101)
      {
        unint64_t v27 = v98;
        uint64_t v98 = 0;
        char v53 = v27;
        long long v54 = v99;
        long long v55 = v100;
        LODWORD(v99) = v99 & 0xFFFFFFFE;
        if (!v10)
        {
          char v56 = v12;
          if (!v17)
          {
            char v57 = v19;
            if (!v22)
            {
              char v58 = v24;
              if (v97)
              {
                uint64_t v59 = v95;
                uint64_t v28 = v96;
                uint64_t v95 = 0;
                uint64_t v96 = 0;
                uint64_t v60 = v28;
                if (v94)
                {
                  LOBYTE(v61) = 0;
                  char v63 = 0;
                  if (v93)
                  {
                    uint64_t v61 = v91;
                    uint64_t v29 = v92;
                    uint64_t v91 = 0;
                    uint64_t v92 = 0;
                    uint64_t v62 = v29;
                    char v63 = 1;
                  }
                  if (v90)
                  {
                    LOBYTE(v64) = 0;
                    char v66 = 0;
                    if (v89)
                    {
                      uint64_t v64 = v87;
                      uint64_t v30 = v88;
                      uint64_t v87 = 0;
                      uint64_t v88 = 0;
                      uint64_t v65 = v30;
                      char v66 = 1;
                    }
                    if (v86)
                    {
                      LOBYTE(v67) = 0;
                      char v69 = 0;
                      if (v85)
                      {
                        long long v67 = v83;
                        uint64_t v31 = v84;
                        uint64_t v83 = 0;
                        uint64_t v84 = 0;
                        uint64_t v68 = v31;
                        char v69 = 1;
                      }
                      if (v82)
                      {
                        LOBYTE(v70) = 0;
                        char v72 = 0;
                        int v2 = (IPC::Decoder *)v81;
                        if (v81)
                        {
                          uint64_t v70 = v79;
                          uint64_t v32 = v80;
                          uint64_t v79 = 0;
                          uint64_t v80 = 0;
                          uint64_t v71 = v32;
                          char v72 = 1;
                        }
                        if (v78)
                        {
                          LOBYTE(v73) = 0;
                          char v75 = 0;
                          int v33 = v77;
                          if (v77)
                          {
                            char v34 = v76[0];
                            v76[0] = 0;
                            uint64_t v73 = v34;
                            long long v74 = v76[1];
                            char v75 = 1;
                          }
                          WebCore::MediaEngineSupportParameters::MediaEngineSupportParameters((uint64_t)a2, &v51);
                          a2[200] = 1;
                          WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v51, v35);
                          goto LABEL_45;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_76:
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    *(void *)int v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v40 = *((void *)v2 + 3);
    if (v40)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        uint64_t v39 = *(void *)v2;
        uint64_t v38 = (unsigned __int8 *)*((void *)v2 + 1);
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
      }
    }
LABEL_77:
    *(void *)int v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v41 = *((void *)v2 + 3);
    if (v41 && v38)
    {
      (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v41 + 16))(v41, v39, v38);
      unsigned int v9 = 0;
      uint64_t v5 = *(void *)v2;
      uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 1);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v9 = 0;
    }
  }
  *a2 = 0;
  a2[200] = 0;
  int v33 = v77;
  if (!v78) {
    goto LABEL_48;
  }
LABEL_45:
  if (v33 && v76[0]) {
    WTF::fastFree(v76[0], v25);
  }
LABEL_48:
  if (v82 && v81 && v79) {
    WTF::fastFree(v79, v25);
  }
  if (v86 && v85 && v83) {
    WTF::fastFree(v83, v25);
  }
  if (v90 && v89) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v25);
  }
  if (v94 && v93) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v25);
  }
  if (v97) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v25);
  }
  if (v101)
  {
    int v36 = v98;
    uint64_t v98 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  if (v104)
  {
    uint64_t v37 = v102;
    char v102 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
}

void sub_198883D64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF *a35,uint64_t a36,uint64_t a37,uint64_t a38,WTF *a39,uint64_t a40,char a41,int a42,__int16 a43,char a44,char a45,WTF *a46,uint64_t a47,char a48,int a49,__int16 a50,char a51,char a52)
{
  if (*(unsigned char *)(v52 - 112))
  {
    long long v54 = *(WTF::StringImpl **)(v52 - 152);
    *(void *)(v52 - 152) = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2) {
        WTF::StringImpl::destroy(v54, a2);
      }
      else {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v52 - 88))
  {
    long long v55 = *(WTF::StringImpl **)(v52 - 104);
    *(void *)(v52 - 104) = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, a2);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ContentType>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ContentType,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 16);

  return IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 32);
}

int64_t IPC::ArgumentCoder<WebCore::SeekTarget,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v11);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v9);
  int64_t result = IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v7);
  if (!*(void *)a1) {
    goto LABEL_8;
  }
  if (!v12 || !v10 || !v8)
  {
    __break(1u);
LABEL_8:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return result;
  }
  long long v5 = v9;
  long long v6 = v7;
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 48) = 1;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::encode(IPC::Encoder *a1, double *a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)(a2 + 4));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)(a2 + 6));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)(a2 + 10));

  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)(a2 + 12));
}

void *IPC::ArgumentCoder<WebCore::GeolocationPositionData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    char v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v30 = v4;
    uint64_t v31 = 0;
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v32 = *((void *)a1 + 3);
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        uint64_t v31 = *(void *)a1;
        unint64_t v30 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v33 = *((void *)a1 + 3);
  if (v33 && v30)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31, v30);
    uint64_t v10 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v10 = 0;
  }
  int v9 = 1;
LABEL_8:
  unint64_t v11 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 >= v11 && v4 - v11 > 7)
  {
    unint64_t v13 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v13 + 1;
    if (v5)
    {
      int v14 = 0;
      uint64_t v15 = *v13;
      goto LABEL_15;
    }
    unint64_t v34 = v4;
    uint64_t v35 = 0;
  }
  else
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v36 = *((void *)a1 + 3);
    if (v36)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
        uint64_t v35 = *(void *)a1;
        unint64_t v34 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v37 = *((void *)a1 + 3);
  if (v37 && v34)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v37 + 16))(v37, v35, v34);
    uint64_t v15 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v15 = 0;
  }
  int v14 = 1;
LABEL_15:
  unint64_t v16 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v16 || v4 - v16 <= 7)
  {
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        uint64_t v39 = *(void *)a1;
        unint64_t v38 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v38 = 0;
        uint64_t v39 = 0;
      }
    }
  }
  else
  {
    int v17 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v17 + 1;
    if (v5)
    {
      int v18 = 0;
      uint64_t v19 = *v17;
      goto LABEL_19;
    }
    unint64_t v38 = v4;
    uint64_t v39 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v19 = 0;
  uint64_t v41 = *((void *)a1 + 3);
  if (v41 && v38)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
    uint64_t v5 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  int v18 = 1;
LABEL_19:
  unint64_t v20 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v20 || v4 - v20 <= 7)
  {
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        uint64_t v43 = *(void *)a1;
        unint64_t v42 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v42 = 0;
        uint64_t v43 = 0;
      }
    }
  }
  else
  {
    int v21 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v21 + 1;
    if (v5)
    {
      int v22 = 0;
      uint64_t v23 = *v21;
      goto LABEL_23;
    }
    unint64_t v42 = v4;
    uint64_t v43 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v23 = 0;
  uint64_t v45 = *((void *)a1 + 3);
  if (v45 && v42) {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v45 + 16))(v45, v43, v42);
  }
  int v22 = 1;
LABEL_23:
  IPC::Decoder::decode<std::optional<double>>(a1, &v54);
  IPC::Decoder::decode<std::optional<double>>(a1, &v52);
  IPC::Decoder::decode<std::optional<double>>(a1, &v50);
  IPC::Decoder::decode<std::optional<double>>(a1, &v48);
  int64_t result = IPC::Decoder::decode<std::optional<double>>(a1, &v46);
  uint64_t v25 = *(void *)a1;
  if (!*(void *)a1)
  {
LABEL_36:
    *(unsigned char *)a2 = 0;
    goto LABEL_34;
  }
  if (v9
    || v14
    || v18
    || v22
    || (LOBYTE(v25) = v55) == 0
    || (LOBYTE(v25) = v53) == 0
    || (LOBYTE(v25) = v51) == 0
    || (LOBYTE(v25) = v49) == 0
    || (LOBYTE(v25) = v47) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  long long v26 = v54;
  long long v27 = v52;
  long long v28 = v50;
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v23;
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v27;
  long long v29 = v48;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v29;
  LOBYTE(v25) = 1;
  *(_OWORD *)(a2 + 96) = v46;
LABEL_34:
  *(unsigned char *)(a2 + 112) = v25;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::AppHighlight,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(a1, *(WebCore::FragmentedSharedBuffer **)a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 24));
  char v4 = *(unsigned char *)(a2 + 25);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

unsigned int *IPC::ArgumentCoder<WebCore::AppHighlight,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(a1, &v14);
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v11);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
  int64_t result = (unsigned int *)IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
  if (!*(void *)a1)
  {
LABEL_21:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    if (!v13 || !v12) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  if (!v15
    || (long long v7 = v14, v14 = 0, !v13)
    || ((int v8 = v12) != 0 ? (v9 = v11, v11 = 0) : (v9 = 0), v4 <= 0xFFu || (unsigned __int16)result <= 0xFFu))
  {
    __break(1u);
    goto LABEL_21;
  }
  *(void *)a2 = v7;
  __int16 v10 = v4 | (unsigned __int16)((_WORD)result << 8);
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (!v8)
  {
    *(_WORD *)(a2 + 24) = v10;
    *(unsigned char *)(a2 + 32) = 1;
    goto LABEL_16;
  }
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = 1;
  *(_WORD *)(a2 + 24) = v10;
  *(unsigned char *)(a2 + 32) = 1;
LABEL_12:
  int64_t result = (unsigned int *)v11;
  unint64_t v11 = 0;
  if (result)
  {
    if (*result == 2) {
      int64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
    }
    else {
      *result -= 2;
    }
  }
LABEL_16:
  if (v15)
  {
    int64_t result = v14;
    int v14 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v6);
    }
  }
  return result;
}

void sub_1988846F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15, unsigned int *a16, char a17)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a17)
  {
    if (a16) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1988847CC(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v4 = *(unsigned int **)v2;
    *(void *)uint64_t v2 = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaDeviceHashSalts,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v10);
  int64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (*(void *)a1)
  {
    if (v11)
    {
      uint64_t v6 = v10;
      __int16 v10 = 0;
      if (v9)
      {
        BOOL v7 = v8;
        *(void *)a2 = v6;
        *(void *)(a2 + 8) = v7;
        *(unsigned char *)(a2 + 16) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v9)
  {
    int64_t result = v8;
    int v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        int64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_5:
  if (v11)
  {
    int64_t result = v10;
    __int16 v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988848C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  unsigned __int8 v6 = *(_DWORD *)(a2 + 32);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  return IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 16, v6);
}

uint64_t IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v5 = v4;
  LOWORD(v54) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v54);
  if (BYTE1(v54)) {
    BOOL v6 = v54 > 0xAu;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = v6;
  if (v7 == 1)
  {
    uint64_t v29 = *a1;
    uint64_t v30 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v31 = a1[3];
    if (v31)
    {
      if (v30) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
      }
    }
  }
  unint64_t v8 = a1[1];
  uint64_t v9 = *a1;
  unint64_t v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v34 = a1[3];
    if (v34)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
        uint64_t v33 = *a1;
        unint64_t v32 = a1[1];
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
      }
    }
    goto LABEL_44;
  }
  char v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    unint64_t v32 = v8;
    uint64_t v33 = 0;
LABEL_44:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v35 = a1[3];
    if (v35 && v32) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
    }
    goto LABEL_11;
  }
  unsigned int v12 = *v11;
  if (v12 <= 2)
  {
    if (!*v11)
    {
      uint64_t result = IPC::Decoder::decode<WebCore::DisplayList::ClearDropShadow>(a1);
      if ((unsigned __int16)result >= 0x100u)
      {
        int v61 = 0;
        char v62 = 1;
        goto LABEL_74;
      }
      goto LABEL_11;
    }
    if (v12 != 1)
    {
      unint64_t v20 = IPC::Decoder::decode<unsigned long long>(a1);
      if ((_BYTE)v21)
      {
        int v22 = (WTF *)v20;
        char v63 = 0;
        uint64_t v64 = 0;
        if (v20 >= 0xAAAA)
        {
          do
          {
            uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::SpeechRecognitionResultData>((uint64_t)&v54, (IPC::Decoder *)a1);
            if (!v57) {
              goto LABEL_70;
            }
            if (HIDWORD(v64) == v64)
            {
              uint64_t result = WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SpeechRecognitionResultData>((uint64_t)&v63, (unint64_t)&v54);
            }
            else
            {
              uint64_t v41 = (char *)v63 + 24 * HIDWORD(v64);
              *(void *)uint64_t v41 = 0;
              *((void *)v41 + 1) = 0;
              unint64_t v42 = v54;
              long long v54 = 0;
              *(void *)uint64_t v41 = v42;
              LODWORD(v42) = v55;
              LODWORD(v55) = 0;
              *((_DWORD *)v41 + 2) = v42;
              LODWORD(v42) = HIDWORD(v55);
              HIDWORD(v55) = 0;
              *((_DWORD *)v41 + 3) = v42;
              v41[16] = v56[0];
              ++HIDWORD(v64);
            }
            if (v57) {
              uint64_t result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v21);
            }
            int v22 = (WTF *)((char *)v22 - 1);
          }
          while (v22);
          unsigned int v43 = HIDWORD(v64);
          int v22 = v63;
          if (v64 > HIDWORD(v64))
          {
            uint64_t v44 = v63;
            if (HIDWORD(v64))
            {
              if (HIDWORD(v64) >= 0xAAAAAAB)
              {
                __break(0xC471u);
                return result;
              }
              uint64_t v45 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v64)));
              LODWORD(v64) = 24 * v43 / 0x18;
              char v63 = (WTF *)v45;
              uint64_t v44 = v22;
              if ((WTF *)v45 != v22)
              {
                WTF::VectorMover<false,WebCore::SpeechRecognitionResultData>::move((uint64_t)v22, (char *)v22 + 24 * v43, v45);
                uint64_t v44 = v63;
              }
            }
            if (v22)
            {
              if (v44 == v22)
              {
                char v63 = 0;
                LODWORD(v64) = 0;
              }
              WTF::fastFree(v22, v21);
LABEL_37:
              int v22 = v63;
            }
            else
            {
              int v22 = v44;
            }
          }
          long long v27 = v64;
          goto LABEL_40;
        }
        if (!v20)
        {
          long long v27 = 0;
LABEL_40:
          char v51 = v27;
          char v63 = 0;
          uint64_t v64 = 0;
          int v19 = 1;
          v56[0] = 1;
          WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v21);
          long long v54 = 0;
          uint64_t v55 = 0;
          uint64_t v59 = v22;
          uint64_t v60 = v51;
          int v61 = 2;
          uint64_t result = WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v28);
          goto LABEL_73;
        }
        unsigned int v23 = 24 * v20;
        uint64_t v24 = WTF::fastMalloc((WTF *)(24 * v20));
        LODWORD(v64) = v23 / 0x18;
        char v63 = (WTF *)v24;
        while (1)
        {
          IPC::Decoder::decode<WebCore::SpeechRecognitionResultData>((uint64_t)&v54, (IPC::Decoder *)a1);
          if (!v57) {
            break;
          }
          if (HIDWORD(v64) == v64)
          {
            WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SpeechRecognitionResultData>((uint64_t)&v63, (unint64_t)&v54);
          }
          else
          {
            uint64_t v25 = (char *)v63 + 24 * HIDWORD(v64);
            *(void *)uint64_t v25 = 0;
            *((void *)v25 + 1) = 0;
            long long v26 = v54;
            long long v54 = 0;
            *(void *)uint64_t v25 = v26;
            LODWORD(v26) = v55;
            LODWORD(v55) = 0;
            *((_DWORD *)v25 + 2) = v26;
            LODWORD(v26) = HIDWORD(v55);
            HIDWORD(v55) = 0;
            *((_DWORD *)v25 + 3) = v26;
            v25[16] = v56[0];
            ++HIDWORD(v64);
          }
          if (v57) {
            WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v21);
          }
          int v22 = (WTF *)((char *)v22 - 1);
          if (!v22) {
            goto LABEL_37;
          }
        }
LABEL_70:
        WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v21);
      }
LABEL_71:
      uint64_t v46 = *a1;
      uint64_t v47 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = a1[3];
      if (result && v47) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v46);
      }
      int v19 = 0;
      LOBYTE(v59) = 0;
      goto LABEL_73;
    }
    if (v8 <= (unint64_t)&v11[-v9 + 1])
    {
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v38 = a1[3];
      if (v38)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
        unint64_t v36 = 0;
        uint64_t v48 = *a1;
        uint64_t v49 = a1[1];
        uint64_t v50 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v37 = 0;
        if (v50)
        {
          if (v49)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48);
            uint64_t v37 = *a1;
            unint64_t v36 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v11 + 2);
      unsigned int v16 = v11[1];
      if (v16 < 8)
      {
        unsigned int v17 = v16 | 0x100;
LABEL_20:
        uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v54);
        if (*a1)
        {
          if (v17 <= 0xFF || !(_BYTE)v55)
          {
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          LOBYTE(v59) = v17;
          uint64_t v60 = v54;
          int v19 = 1;
          int v61 = 1;
LABEL_73:
          char v62 = v19;
          if (v19) {
            goto LABEL_74;
          }
          goto LABEL_12;
        }
        if ((_BYTE)v55)
        {
          uint64_t v40 = v54;
          long long v54 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v18);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
        }
        goto LABEL_71;
      }
      unint64_t v36 = v8;
      uint64_t v37 = v9;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v39 = a1[3];
    if (v39 && v36) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
    }
    unsigned int v17 = 0;
    goto LABEL_20;
  }
LABEL_11:
  LOBYTE(v59) = 0;
  char v62 = 0;
LABEL_12:
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result && v14) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v13);
  }
LABEL_74:
  if (*a1)
  {
    if (v5 && !v7 && v62)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v52, (uint64_t)&v59);
      WebCore::SpeechRecognitionUpdate::SpeechRecognitionUpdate();
      *(void *)a2 = v54;
      *(unsigned char *)(a2 + 8) = v55;
      uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::SpeechRecognitionError,WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 16, (uint64_t)v56);
      *(unsigned char *)(a2 + 40) = 1;
      if (v58 != -1) {
        uint64_t result = ((uint64_t (*)(WTF **, char *))off_1EE9B4AE0[v58])(&v63, v56);
      }
      int v58 = -1;
      if (v53 != -1) {
        uint64_t result = ((uint64_t (*)(WTF **, unsigned char *))off_1EE9B4AE0[v53])(&v63, v52);
      }
      int v53 = -1;
      goto LABEL_83;
    }
    goto LABEL_87;
  }
LABEL_88:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_83:
  if (v62)
  {
    if (v61 != -1) {
      return ((uint64_t (*)(WTF::StringImpl **, WTF **))off_1EE9B4AE0[v61])(&v54, &v59);
    }
  }
  return result;
}

void sub_198885094(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  }
  WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17 - 96, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(IPC::Encoder *a1, WebCore::ARKitBadgeSystemImage *this)
{
  uint64_t v6 = WebCore::ARKitBadgeSystemImage::imageIdentifier(this);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, &v6);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)this + 8));
  float v4 = *((float *)this + 9);

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(uint64_t *a1, WebCore::ARKitBadgeSystemImage *this)
{
  uint64_t v4 = WebCore::ARKitBadgeSystemImage::imageIdentifier(this);
  uint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v10) = v4;
      a1[2] = v11;
    }
  }

  return IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, (_DWORD *)this + 8);
}

uint64_t IPC::Decoder::decode<WebCore::VideoFrameRotation>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::VideoFrameRotation,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<__CVBuffer *>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

unint64_t IPC::Decoder::decode<WebCore::PlatformVideoColorSpace>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::decode(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::GradientColorStops,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (unint64_t *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      uint64_t v25 = v4;
      uint64_t v26 = 0;
      goto LABEL_39;
    }
    unint64_t v9 = *v8;
    uint64_t v34 = v36;
    uint64_t v35 = 2;
    if (v9 >= 0x10000)
    {
      do
      {
        IPC::Decoder::decode<WebCore::GradientColorStop>(v42, a1);
        if (!v43) {
          goto LABEL_51;
        }
        if (HIDWORD(v35) == v35)
        {
          WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GradientColorStop>((unsigned int *)&v34, (unint64_t)v42);
        }
        else
        {
          LODWORD(v34[HIDWORD(v35)]) = v42[0];
          WebCore::Color::Color();
          ++HIDWORD(v35);
        }
        std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v30);
        --v9;
      }
      while (v9);
      WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, HIDWORD(v35));
      WTF::VectorBuffer<WebCore::GradientColorStop,2ul,WTF::FastMalloc>::VectorBuffer((uint64_t)&v38, (uint64_t)&v34);
      goto LABEL_21;
    }
    if (v9 >= 3)
    {
      LODWORD(v35) = v9;
      uint64_t v34 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    }
    else if (!v9)
    {
      uint64_t v10 = 0;
      uint64_t v38 = v40;
      uint64_t v39 = 2;
      goto LABEL_19;
    }
    do
    {
      IPC::Decoder::decode<WebCore::GradientColorStop>(v42, a1);
      if (!v43) {
        goto LABEL_51;
      }
      if (HIDWORD(v35) == v35)
      {
        WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GradientColorStop>((unsigned int *)&v34, (unint64_t)v42);
      }
      else
      {
        LODWORD(v34[HIDWORD(v35)]) = v42[0];
        WebCore::Color::Color();
        ++HIDWORD(v35);
      }
      std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v12);
      --v9;
    }
    while (v9);
    uint64_t v14 = v34;
    uint64_t v38 = v40;
    uint64_t v39 = 2;
    if (v34 != v36)
    {
      uint64_t v34 = v36;
      uint64_t v38 = v14;
      int v15 = v35;
      LODWORD(v35) = 2;
      LODWORD(v39) = v15;
LABEL_20:
      int v16 = HIDWORD(v35);
      HIDWORD(v35) = 0;
      HIDWORD(v39) = v16;
LABEL_21:
      char v41 = 1;
      goto LABEL_22;
    }
    uint64_t v10 = HIDWORD(v35);
LABEL_19:
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v36, (unsigned int *)&v36[v10], (uint64_t)v40);
    goto LABEL_20;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v27 = a1[3];
  if (v27)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v5, v4);
      uint64_t v26 = *a1;
      uint64_t v25 = a1[1];
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
    }
  }
LABEL_39:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v28 = a1[3];
  if (v28 && v25) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
  }
  LOBYTE(v38) = 0;
  char v41 = 0;
LABEL_41:
  unint64_t v11 = (void *)*a1;
  uint64_t v29 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result && v29) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v11);
  }
  while (1)
  {
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 56) = 0;
      goto LABEL_32;
    }
    if (v41) {
      break;
    }
    __break(1u);
LABEL_51:
    LOBYTE(v38) = 0;
    char v41 = 0;
    std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v11);
LABEL_22:
    uint64_t result = WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v13);
    if (!v41) {
      goto LABEL_41;
    }
  }
  uint64_t v31 = v33;
  uint64_t v32 = 2;
  int v18 = v38;
  if (v38 == v40)
  {
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v40, (unsigned int *)&v40[HIDWORD(v39)], (uint64_t)v33);
    int v18 = v31;
  }
  else
  {
    uint64_t v38 = v40;
    uint64_t v31 = v18;
    int v22 = v39;
    LODWORD(v39) = 2;
    LODWORD(v32) = v22;
  }
  uint64_t v19 = HIDWORD(v39);
  HIDWORD(v39) = 0;
  HIDWORD(v32) = v19;
  uint64_t v34 = v36;
  uint64_t v35 = 2;
  if (v18 == v33)
  {
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v33, (unsigned int *)&v33[v19], (uint64_t)v36);
    LODWORD(v19) = HIDWORD(v32);
    int v18 = v34;
  }
  else
  {
    uint64_t v31 = v33;
    uint64_t v34 = v18;
    int v23 = v32;
    LODWORD(v32) = 2;
    LODWORD(v35) = v23;
  }
  HIDWORD(v32) = 0;
  HIDWORD(v35) = v19;
  char v37 = 0;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 2;
  if (v18 == v36)
  {
    WTF::VectorMover<false,WebCore::GradientColorStop>::move((unsigned int *)v36, (unsigned int *)&v36[v19], a2 + 16);
    LODWORD(v19) = HIDWORD(v35);
    char v20 = v37;
  }
  else
  {
    char v20 = 0;
    uint64_t v34 = v36;
    *(void *)a2 = v18;
    int v24 = v35;
    LODWORD(v35) = 2;
    *(_DWORD *)(a2 + 8) = v24;
  }
  HIDWORD(v35) = 0;
  *(_DWORD *)(a2 + 12) = v19;
  *(unsigned char *)(a2 + 48) = v20;
  *(unsigned char *)(a2 + 56) = 1;
  WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v11);
  uint64_t result = WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v21);
LABEL_32:
  if (v41) {
    return WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v11);
  }
  return result;
}

void sub_198885864(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a29) {
    WTF::Vector<WebCore::GradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 16));
  char v5 = *(unsigned char *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 25);
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

void IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
  char v6 = (char)v4;
  unint64_t v7 = a1[1];
  unint64_t v8 = *a1;
  unint64_t v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    unint64_t v11 = (int *)(v8 + v9);
    a1[2] = (unint64_t)(v11 + 1);
    if (!v8)
    {
      unint64_t v16 = v7;
      unint64_t v4 = 0;
      goto LABEL_20;
    }
    int v12 = 0;
    int v13 = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v16 = 0;
    unint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v17 = a1[3];
    if (v17)
    {
      if (v7)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v17 + 16))(v17, v8, v7);
        unint64_t v4 = (void *)*a1;
        unint64_t v16 = a1[1];
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v4 = 0;
      }
    }
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v18 = a1[3];
    if (v18 && v16) {
      (*(void (**)(unint64_t, void *))(*(void *)v18 + 16))(v18, v4);
    }
    int v13 = 0;
    int v12 = 1;
LABEL_8:
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a1, v4, (uint64_t)&cf);
    unsigned __int16 v14 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a1);
    if (v14 <= 0xFFu)
    {
      unint64_t v19 = *a1;
      unint64_t v20 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v21 = a1[3];
      if (v21)
      {
        if (v20) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19);
        }
      }
    }
    unsigned __int16 v15 = IPC::ArgumentCoder<WebCore::ReferrerPolicy,void>::decode<IPC::Decoder>(a1);
    if (v15 <= 0xFFu)
    {
      unint64_t v22 = *a1;
      unint64_t v23 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v24 = a1[3];
      if (v24)
      {
        if (v23)
        {
          unsigned __int16 v26 = v15;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v24 + 16))(v24, v22);
          unsigned __int16 v15 = v26;
        }
      }
    }
    unint64_t v8 = *a1;
    if (!*a1) {
      break;
    }
    if (v6)
    {
      if (!v12)
      {
        unint64_t v8 = v28;
        if (v28)
        {
          unint64_t v7 = v14;
          unint64_t v8 = (unint64_t)cf;
          CFTypeRef cf = 0;
          if (v14 > 0xFFu)
          {
            unint64_t v7 = v15;
            if (v15 > 0xFFu)
            {
              *(void *)a2 = v5;
              *(_DWORD *)(a2 + 8) = v13;
              *(void *)(a2 + 16) = v8;
              *(_WORD *)(a2 + 24) = v14 | (unsigned __int16)(v15 << 8);
              *(unsigned char *)(a2 + 32) = 1;
              return;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v28)
  {
    CFTypeRef v25 = cf;
    CFTypeRef cf = 0;
    if (v25) {
      CFRelease(v25);
    }
  }
}

void sub_198885BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::HueInterpolationMethod>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      int v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_7;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        uint64_t v2 = *v11;
        unint64_t v1 = v11[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 4) {
    return v5 | 0x100;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v2);
    }
    return 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65> const&>(a1, a2, v5);
  char v6 = *(unsigned char *)(a2 + 8);
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

unint64_t IPC::ArgumentCoder<WebCore::ColorInterpolationMethod,void>::decode(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v23 = a1[3];
    if (v23)
    {
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v3, v2);
        uint64_t v22 = *a1;
        unint64_t v21 = a1[1];
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
    goto LABEL_18;
  }
  unsigned __int8 v5 = (unsigned char *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    unint64_t v21 = v2;
    uint64_t v22 = 0;
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (!result)
    {
LABEL_19:
      char v16 = 0;
LABEL_20:
      uint64_t v24 = *a1;
      uint64_t v25 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v26 = a1[3];
      if (v26)
      {
        unint64_t v34 = result;
        char v35 = v16;
        if (v25) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
        }
        unint64_t result = v34;
        char v16 = v35;
      }
      goto LABEL_12;
    }
    if (v21) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v22);
    }
LABEL_49:
    unint64_t result = 0;
    goto LABEL_19;
  }
  unsigned int v6 = *v5;
  if (v6 > 0xD) {
    goto LABEL_49;
  }
  if (v6 == 6)
  {
    uint64_t v7 = 0x600000000;
    BOOL v8 = 1;
LABEL_6:
    LOBYTE(v9) = v8;
    unint64_t v10 = v7 & 0xFFFFFFFFFFFFFF00;
LABEL_7:
    uint64_t v11 = v10 | v7;
LABEL_8:
    uint64_t v9 = v9;
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFF00;
LABEL_9:
    uint64_t v11 = v11;
LABEL_10:
    unint64_t v13 = v12 | v11;
    unint64_t v14 = v13 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    switch(*v5)
    {
      case 0:
        unsigned __int16 v31 = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        unint64_t v14 = 0;
        uint64_t v9 = v31 > 0xFFu;
        if ((v31 & 0xFF00) != 0) {
          LOBYTE(v13) = v31;
        }
        else {
          LOBYTE(v13) = 0;
        }
        break;
      case 1:
        unsigned __int16 v32 = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        if (v32 >= 0x100u)
        {
          uint64_t v11 = v32;
          unint64_t v12 = 0x100000000;
          uint64_t v9 = 1;
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v11 = 0;
          unint64_t v12 = 0;
        }
        goto LABEL_10;
      case 2:
        unsigned __int16 v33 = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        if (v33 >= 0x100u)
        {
          unint64_t v12 = 0x200000000;
          LOBYTE(v11) = v33;
          uint64_t v9 = 1;
        }
        else
        {
          uint64_t v9 = 0;
          LOBYTE(v11) = 0;
          unint64_t v12 = 0;
        }
        goto LABEL_9;
      case 3:
        LOBYTE(v9) = (unsigned __int16)IPC::Decoder::decode<WebCore::DisplayList::ClearDropShadow>(a1) > 0xFFu;
        uint64_t v11 = 0x300000000;
        goto LABEL_8;
      case 4:
        LOWORD(v7) = IPC::Decoder::decode<WebCore::ColorInterpolationMethod::HSL>(a1);
        if ((unsigned __int16)v7 >= 0x100u)
        {
          unint64_t v10 = 0x400000000;
          LOBYTE(v9) = 1;
        }
        else
        {
          LOBYTE(v9) = 0;
          LOBYTE(v7) = 0;
          unint64_t v10 = 0;
        }
        goto LABEL_7;
      case 5:
        BOOL v8 = (unsigned __int16)IPC::Decoder::decode<WebCore::DisplayList::ClearDropShadow>(a1) > 0xFFu;
        uint64_t v7 = 0x500000000;
        goto LABEL_6;
      default:
        uint64_t v7 = IPC::ArgumentCoder<std::variant<WebCore::ColorInterpolationMethod::HSL,WebCore::ColorInterpolationMethod::HWB,WebCore::ColorInterpolationMethod::LCH,WebCore::ColorInterpolationMethod::Lab,WebCore::ColorInterpolationMethod::OKLCH,WebCore::ColorInterpolationMethod::OKLab,WebCore::ColorInterpolationMethod::SRGB,WebCore::ColorInterpolationMethod::SRGBLinear,WebCore::ColorInterpolationMethod::DisplayP3,WebCore::ColorInterpolationMethod::A98RGB,WebCore::ColorInterpolationMethod::ProPhotoRGB,WebCore::ColorInterpolationMethod::Rec2020,WebCore::ColorInterpolationMethod::XYZD50,WebCore::ColorInterpolationMethod::XYZD65>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(a1, *v5);
        goto LABEL_6;
    }
  }
  unint64_t result = v14 | v13;
  char v16 = v9;
  if (!v9) {
    goto LABEL_20;
  }
LABEL_12:
  unint64_t v17 = a1[1];
  uint64_t v18 = *a1;
  unint64_t v19 = a1[2] - *a1;
  if (v17 <= v19)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29)
    {
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        uint64_t v28 = *a1;
        unint64_t v27 = a1[1];
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
    goto LABEL_25;
  }
  unint64_t v20 = (unsigned __int8 *)(v18 + v19);
  a1[2] = (uint64_t)(v20 + 1);
  if (!v18)
  {
    unint64_t v27 = v17;
    uint64_t v28 = 0;
LABEL_25:
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v30 = a1[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
        uint64_t v18 = *a1;
        unint64_t v17 = a1[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_26;
  }
  if (*v20 < 2u)
  {
    if (v16) {
      return result;
    }
LABEL_62:
    __break(1u);
    JUMPOUT(0x198886214);
  }
LABEL_26:
  *a1 = 0;
  a1[1] = 0;
  unint64_t result = a1[3];
  if (result)
  {
    if (!v17) {
      return 0;
    }
    (*(void (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v18);
    if (!*a1) {
      return 0;
    }
    goto LABEL_62;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v5 = *a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = a2[1];
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

uint64_t *IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::encode(uint64_t *a1, unsigned char *a2)
{
  unint64_t v2 = a1[2];
  if (v2 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v2) = *a2;
    a1[2] = v2 + 1;
  }
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 8));
}

unsigned int *IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *a1;
        uint64_t v13 = a1[1];
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_19;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v13 = v4;
    uint64_t v14 = 0;
LABEL_19:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned int v8 = *v7;
  if (v8 < 5)
  {
    unsigned int v9 = v8 | 0x100;
    goto LABEL_5;
  }
LABEL_20:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v17 = a1[3];
  if (v17 && v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
  }
  unsigned int v9 = 0;
LABEL_5:
  unint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v20);
  if (!v21)
  {
    uint64_t v11 = (void *)*a1;
    uint64_t v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (unsigned int *)a1[3];
    if (result)
    {
      if (v18) {
        unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v11);
      }
    }
  }
  uint64_t v12 = *a1;
  if (*a1)
  {
    if (v9 <= 0xFF || (uint64_t v12 = v21) == 0)
    {
      __break(1u);
LABEL_14:
      unint64_t result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v11);
      }
      return result;
    }
    WebCore::Color::Color();
    *a2 = v9;
    unint64_t result = (unsigned int *)WebCore::Color::Color();
    a2[16] = 1;
    if ((*(void *)v19 & 0x8000000000000) != 0)
    {
      unint64_t result = (unsigned int *)(*(void *)v19 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v19 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  if (v21)
  {
    uint64_t v12 = v20;
    if ((v20 & 0x8000000000000) != 0) {
      goto LABEL_14;
    }
  }
  return result;
}

void sub_19888650C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && (a11 & 0x8000000000000) != 0)
  {
    uint64_t v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    float v7 = *(float *)(a2 + 28);
    return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v7);
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, (_DWORD *)a2);
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }
  unint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
  unint64_t v13 = a1[2];
  if (v13 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v13++) = *(unsigned char *)(a2 + 24);
    a1[2] = v13;
  }
  unint64_t v14 = *a1 + v13;
  unint64_t v15 = (v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v15 >= v14;
  unint64_t v16 = v15 - v14;
  if (v7)
  {
    unint64_t v17 = v16 + v13;
    unint64_t v18 = v17 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v17) = *(_DWORD *)(a2 + 28);
      a1[2] = v18;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PlatformMediaSessionRemoteCommandArgument,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<double>>(a1, &v6);
  uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (!*(void *)a1) {
    goto LABEL_7;
  }
  if (!v8 || (*(void *)&long long v5 = v6, BYTE8(v5) = v7, (result & 0xFF0000) == 0))
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return result;
  }
  *(_OWORD *)a2 = v5;
  *(_WORD *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::GenericCueData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 8);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 64));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 72));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 80));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 88));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 96));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 104));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 112));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 120));
  char v5 = *(unsigned char *)(a2 + 128);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 129);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = *(unsigned char *)(a2 + 130);
  return IPC::Encoder::operator<<<BOOL>(a1, &v7);
}

void IPC::ArgumentCoder<WebCore::GenericCueData,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  char v5 = *(char **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v53 = 0;
    long long v54 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v55 = *((void *)a1 + 3);
    if (v55)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v55 + 16))(v55);
        long long v54 = *(char **)a1;
        unint64_t v53 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v53 = 0;
        long long v54 = 0;
      }
    }
  }
  else
  {
    char v7 = &v5[v6];
    *((void *)a1 + 2) = v7 + 1;
    if (v5)
    {
      unsigned int v8 = *v7;
      if (v8 >= 2) {
        goto LABEL_97;
      }
      if (v8)
      {
        uint64_t v92 = 0;
LABEL_7:
        uint64_t v94 = 1;
        goto LABEL_8;
      }
      uint64_t v92 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(a1);
      if (v9) {
        goto LABEL_7;
      }
      goto LABEL_96;
    }
    unint64_t v53 = v4;
    long long v54 = 0;
  }
  unint64_t v4 = 0;
  char v5 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v56 = *((void *)a1 + 3);
  if (!v56) {
    goto LABEL_97;
  }
  if (v53)
  {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v56 + 16))(v56, v54, v53);
LABEL_96:
    char v5 = *(char **)a1;
    unint64_t v4 = *((void *)a1 + 1);
    goto LABEL_97;
  }
  unint64_t v4 = 0;
  char v5 = 0;
LABEL_97:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v57 = *((void *)a1 + 3);
  if (v57 && v4) {
    (*(void (**)(uint64_t, char *))(*(void *)v57 + 16))(v57, v5);
  }
  int v58 = *(char **)a1;
  uint64_t v59 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v60 = *((void *)a1 + 3);
  if (v60 && v59) {
    (*(void (**)(uint64_t, char *))(*(void *)v60 + 16))(v60, v58);
  }
  uint64_t v92 = 0;
  uint64_t v94 = 0;
LABEL_8:
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v120);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v118);
  IPC::Decoder::decode<WTF::AtomString>(a1, &v116);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v114);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v112);
  unint64_t v10 = *((void *)a1 + 1);
  uint64_t v11 = *(char **)a1;
  unint64_t v12 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v10 < v12 || v10 - v12 <= 7)
  {
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v66 = *((void *)a1 + 3);
    if (v66)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v66 + 16))(v66);
        uint64_t v65 = *(char **)a1;
        unint64_t v64 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v64 = 0;
        uint64_t v65 = 0;
      }
    }
  }
  else
  {
    unint64_t v13 = (uint64_t *)&v11[v12];
    *((void *)a1 + 2) = v13 + 1;
    if (v11)
    {
      unsigned int v93 = 0;
      uint64_t v14 = *v13;
      goto LABEL_12;
    }
    unint64_t v64 = v10;
    uint64_t v65 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v14 = 0;
  uint64_t v67 = *((void *)a1 + 3);
  if (v67 && v64)
  {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v67 + 16))(v67, v65, v64);
    uint64_t v11 = *(char **)a1;
    unint64_t v10 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  unsigned int v93 = 1;
LABEL_12:
  unint64_t v15 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v11;
  if (v10 < v15 || v10 - v15 <= 7)
  {
    unint64_t v68 = 0;
    char v69 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v70 = *((void *)a1 + 3);
    if (v70)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
        char v69 = *(char **)a1;
        unint64_t v68 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v68 = 0;
        char v69 = 0;
      }
    }
  }
  else
  {
    unint64_t v16 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v16 + 1;
    if (v11)
    {
      int v17 = 0;
      uint64_t v18 = *v16;
      goto LABEL_16;
    }
    unint64_t v68 = v10;
    char v69 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v18 = 0;
  uint64_t v71 = *((void *)a1 + 3);
  if (v71 && v68)
  {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v71 + 16))(v71, v69, v68);
    uint64_t v11 = *(char **)a1;
    unint64_t v10 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  int v17 = 1;
LABEL_16:
  unint64_t v19 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v11;
  if (v10 < v19 || v10 - v19 <= 7)
  {
    unint64_t v72 = 0;
    uint64_t v73 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v74 = *((void *)a1 + 3);
    if (v74)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v74 + 16))(v74);
        uint64_t v73 = *(char **)a1;
        unint64_t v72 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v72 = 0;
        uint64_t v73 = 0;
      }
    }
  }
  else
  {
    uint64_t v20 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v20 + 1;
    if (v11)
    {
      int v21 = 0;
      uint64_t v22 = *v20;
      goto LABEL_20;
    }
    unint64_t v72 = v10;
    uint64_t v73 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v22 = 0;
  uint64_t v75 = *((void *)a1 + 3);
  if (v75 && v72)
  {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v75 + 16))(v75, v73, v72);
    uint64_t v11 = *(char **)a1;
    unint64_t v10 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  int v21 = 1;
LABEL_20:
  unint64_t v23 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v11;
  if (v10 < v23 || v10 - v23 <= 7)
  {
    unint64_t v76 = 0;
    unsigned __int8 v77 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v78 = *((void *)a1 + 3);
    if (v78)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v78 + 16))(v78);
        unsigned __int8 v77 = *(char **)a1;
        unint64_t v76 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v76 = 0;
        unsigned __int8 v77 = 0;
      }
    }
  }
  else
  {
    uint64_t v24 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v24 + 1;
    if (v11)
    {
      int v25 = 0;
      uint64_t v26 = *v24;
      goto LABEL_24;
    }
    unint64_t v76 = v10;
    unsigned __int8 v77 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v26 = 0;
  uint64_t v79 = *((void *)a1 + 3);
  if (v79 && v76)
  {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v79 + 16))(v79, v77, v76);
    uint64_t v11 = *(char **)a1;
    unint64_t v10 = *((void *)a1 + 1);
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  int v25 = 1;
LABEL_24:
  unint64_t v27 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v11;
  if (v10 < v27 || v10 - v27 <= 7)
  {
    unint64_t v80 = 0;
    unsigned __int8 v81 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v82 = *((void *)a1 + 3);
    if (v82)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v82 + 16))(v82);
        unsigned __int8 v81 = *(char **)a1;
        unint64_t v80 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v80 = 0;
        unsigned __int8 v81 = 0;
      }
    }
  }
  else
  {
    uint64_t v28 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v28 + 1;
    if (v11)
    {
      int v29 = 0;
      uint64_t v30 = *v28;
      goto LABEL_28;
    }
    unint64_t v80 = v10;
    unsigned __int8 v81 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v30 = 0;
  uint64_t v83 = *((void *)a1 + 3);
  if (v83 && v80) {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v83 + 16))(v83, v81, v80);
  }
  int v29 = 1;
LABEL_28:
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v110);
  if (!v111)
  {
    int v61 = *(char **)a1;
    uint64_t v62 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v63 = *((void *)a1 + 3);
    if (v63)
    {
      if (v62) {
        (*(void (**)(uint64_t, char *))(*(void *)v63 + 16))(v63, v61);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v108);
  if (!v109)
  {
    uint64_t v84 = *(char **)a1;
    uint64_t v85 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v86 = *((void *)a1 + 3);
    if (v86)
    {
      if (v85) {
        (*(void (**)(uint64_t, char *))(*(void *)v86 + 16))(v86, v84);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v106);
  if (!v107)
  {
    uint64_t v87 = *(char **)a1;
    uint64_t v88 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v89 = *((void *)a1 + 3);
    if (v89)
    {
      if (v88) {
        (*(void (**)(uint64_t, char *))(*(void *)v89 + 16))(v89, v87);
      }
    }
  }
  unsigned __int16 v31 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a1);
  unsigned __int16 v32 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a1);
  *(_WORD *)uint64_t v95 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v95);
  char v34 = v95[0];
  if (v95[1]) {
    BOOL v35 = v95[0] > 2u;
  }
  else {
    BOOL v35 = 1;
  }
  int v36 = v35;
  if (v36 == 1)
  {
    unsigned __int16 v33 = *(char **)a1;
    uint64_t v90 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v91 = *((void *)a1 + 3);
    if (v91 && v90) {
      (*(void (**)(uint64_t, char *))(*(void *)v91 + 16))(v91, v33);
    }
    char v34 = 0;
  }
  if (!*(void *)a1)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 136) = 0;
    goto LABEL_63;
  }
  unint64_t m_colorAndFlags = v94;
  if ((_BYTE)v94)
  {
    unint64_t m_colorAndFlags = v121;
    if (v121)
    {
      unint64_t m_colorAndFlags = v119;
      if (v119)
      {
        unint64_t m_colorAndFlags = v117;
        if (v117)
        {
          unint64_t m_colorAndFlags = v115;
          if (v115)
          {
            unint64_t m_colorAndFlags = v113;
            if (v113)
            {
              unint64_t m_colorAndFlags = v93;
              if (!v93 && !v17 && !v21 && !v25 && !v29)
              {
                unint64_t m_colorAndFlags = v111;
                if (v111)
                {
                  unint64_t m_colorAndFlags = v109;
                  if (v109)
                  {
                    unint64_t m_colorAndFlags = v107;
                    if (v107)
                    {
                      unint64_t m_colorAndFlags = v31;
                      if (v31 > 0xFFu)
                      {
                        unint64_t m_colorAndFlags = v32;
                        if (v32 > 0xFFu && !v36)
                        {
                          *(void *)uint64_t v95 = v92;
                          *(_OWORD *)&v95[8] = v120;
                          *(_OWORD *)&v95[24] = v118;
                          uint64_t v38 = v116;
                          if (v116) {
                            *(_DWORD *)v116 += 2;
                          }
                          *(void *)&long long v96 = v38;
                          uint64_t v39 = v114;
                          if (v114) {
                            *(_DWORD *)v114 += 2;
                          }
                          *((void *)&v96 + 1) = v39;
                          uint64_t v40 = v112;
                          if (v112) {
                            *(_DWORD *)v112 += 2;
                          }
                          char v97 = v40;
                          *(void *)&long long v98 = v14;
                          *((void *)&v98 + 1) = v18;
                          *(void *)&long long v99 = v22;
                          *((void *)&v99 + 1) = v26;
                          uint64_t v100 = v30;
                          WebCore::Color::Color((WebCore::Color *)&v101, &v110);
                          WebCore::Color::Color((WebCore::Color *)&v102, &v108);
                          WebCore::Color::Color((WebCore::Color *)&v103, &v106);
                          LOBYTE(v104) = v31;
                          HIBYTE(v104) = v32;
                          char v105 = v34;
                          long long v41 = *(_OWORD *)&v95[16];
                          *(_OWORD *)a2 = *(_OWORD *)v95;
                          *(_OWORD *)(a2 + 16) = v41;
                          *(void *)(a2 + 29) = *(void *)&v95[29];
                          long long v42 = v96;
                          long long v96 = 0uLL;
                          *(_OWORD *)(a2 + 40) = v42;
                          char v43 = v97;
                          char v97 = 0;
                          *(void *)(a2 + 56) = v43;
                          long long v44 = v98;
                          long long v45 = v99;
                          *(void *)(a2 + 96) = v100;
                          *(_OWORD *)(a2 + 64) = v44;
                          *(_OWORD *)(a2 + 80) = v45;
                          WebCore::Color::Color();
                          WebCore::Color::Color();
                          WebCore::Color::Color();
                          *(_WORD *)(a2 + 128) = v104;
                          *(unsigned char *)(a2 + 130) = v105;
                          *(unsigned char *)(a2 + 136) = 1;
                          WebCore::GenericCueData::~GenericCueData((WebCore::GenericCueData *)v95, v46);
LABEL_63:
                          if (!v107) {
                            goto LABEL_65;
                          }
                          unint64_t m_colorAndFlags = v106.m_colorAndFlags;
                          if ((v106.m_colorAndFlags & 0x8000000000000) == 0) {
                            goto LABEL_65;
                          }
                          goto LABEL_86;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __break(1u);
LABEL_86:
  uint64_t v50 = (unsigned int *)(m_colorAndFlags & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v50);
    WTF::fastFree((WTF *)v50, v33);
  }
LABEL_65:
  if (v109)
  {
    if ((v108.m_colorAndFlags & 0x8000000000000) != 0)
    {
      char v51 = (unsigned int *)(v108.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v108.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v33);
      }
    }
  }
  if (v111)
  {
    if ((v110.m_colorAndFlags & 0x8000000000000) != 0)
    {
      long long v52 = (unsigned int *)(v110.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v110.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, v33);
      }
    }
  }
  if (v113)
  {
    uint64_t v47 = v112;
    unsigned __int16 v112 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v33);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
  }
  if (v115)
  {
    uint64_t v48 = v114;
    long long v114 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v33);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
  if (v117)
  {
    uint64_t v49 = v116;
    uint64_t v116 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v33);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
}

void sub_1988873BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,WTF::StringImpl *a36,char a37)
{
  if (a31)
  {
    if ((a30 & 0x8000000000000) != 0)
    {
      long long v41 = (unsigned int *)(a30 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, a2);
      }
    }
  }
  if (a33)
  {
    if ((a32 & 0x8000000000000) != 0)
    {
      uint64_t v40 = (unsigned int *)(a32 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a32 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, a2);
      }
    }
  }
  if (a35)
  {
    if ((a34 & 0x8000000000000) != 0)
    {
      uint64_t v39 = (unsigned int *)(a34 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a34 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v39);
        WTF::fastFree((WTF *)v39, a2);
      }
    }
  }
  if (a37 && a36)
  {
    if (*(_DWORD *)a36 == 2) {
      WTF::StringImpl::destroy(a36, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a36 -= 2;
    }
  }
  if (*(unsigned char *)(v37 - 208))
  {
    long long v42 = *(WTF::StringImpl **)(v37 - 216);
    *(void *)(v37 - 216) = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v37 - 192))
  {
    char v43 = *(WTF::StringImpl **)(v37 - 200);
    *(void *)(v37 - 200) = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 3u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t IPC::ArgumentCoder<WebCore::ImageDecoderFrameInfo,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = (unsigned __int8 *)a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if ((unint64_t)v4 <= v6) {
    goto LABEL_14;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v7 = v4;
    uint64_t v14 = 0;
    goto LABEL_15;
  }
  LODWORD(v7) = *v7;
  if (v7 >= 2) {
    goto LABEL_17;
  }
  int v8 = 0;
  char v9 = 1;
  while (1)
  {
    char v10 = v7 ? v9 : 0;
    uint64_t result = IPC::Decoder::decode<WTF::Seconds>(a1);
    uint64_t v13 = *a1;
    if (!*a1) {
      break;
    }
    if (!v8 && v12)
    {
      *(unsigned char *)a2 = v10;
      *(void *)(a2 + 8) = result;
      LOBYTE(v13) = 1;
      goto LABEL_12;
    }
    __break(1u);
LABEL_14:
    uint64_t v7 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *a1;
        uint64_t v7 = (unsigned __int8 *)a1[1];
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v14 = 0;
      }
    }
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v16 + 16))(v16, v14, v7);
        LODWORD(v7) = 0;
        uint64_t v5 = *a1;
        int v4 = (unsigned __int8 *)a1[1];
      }
      else
      {
        int v4 = 0;
        uint64_t v5 = 0;
      }
    }
    else
    {
      int v4 = 0;
      uint64_t v5 = 0;
      LODWORD(v7) = 0;
    }
LABEL_17:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      int v18 = (int)v7;
      if (v4) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
      }
      char v9 = 0;
      int v8 = 1;
      LODWORD(v7) = v18;
    }
    else
    {
      char v9 = 0;
      int v8 = 1;
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_12:
  *(unsigned char *)(a2 + 16) = v13;
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::encode(IPC::Encoder *a1, long long *a2)
{
  long long v6 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v6);
  LOBYTE(v6) = *((unsigned char *)a2 + 16);
  WebCore::Color::Color((WebCore::Color *)((char *)&v6 + 8), (const Color *)a2 + 3);
  char v7 = v6;
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  uint64_t result = (unsigned int *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)((char *)&v6 + 8));
  if ((*((void *)&v6 + 1) & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(*((void *)&v6 + 1) & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v6 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_1988879DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    int v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::encode(uint64_t *a1, long long *a2)
{
  long long v6 = *a2;
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v6);
  LOBYTE(v6) = *((unsigned char *)a2 + 16);
  WebCore::Color::Color((WebCore::Color *)((char *)&v6 + 8), (const Color *)a2 + 3);
  uint64_t result = (unsigned int *)IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::encode(a1, &v6);
  if ((*((void *)&v6 + 1) & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(*((void *)&v6 + 1) & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v6 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_198887AA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    int v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawDotsForDocumentMarker,void>::decode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v14);
  IPC::Decoder::decode<WebCore::DocumentMarkerLineStyle>((uint64_t *)a1, v11);
  if (!*a1)
  {
    *a2 = 0;
    a2[32] = 0;
    return std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v4);
  }
  uint64_t v5 = v15;
  if (v15 && (uint64_t v5 = v13) != 0)
  {
    long long v8 = v14;
    char v9 = v11[0];
    WebCore::Color::Color((WebCore::Color *)&v10, &v12);
    *(_OWORD *)a2 = v8;
    a2[16] = v9;
    WebCore::Color::Color();
    a2[32] = 1;
    uint64_t v5 = v10;
    if ((v10 & 0x8000000000000) == 0) {
      return std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v4);
    }
  }
  else
  {
    __break(1u);
  }
  char v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
  if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v4);
  }
  return std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v4);
}

void sub_198887BB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if ((a6 & 0x8000000000000) != 0)
  {
    char v7 = (unsigned int *)(a6 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *IPC::Decoder::decode<WebCore::DocumentMarkerLineStyle>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DocumentMarkerLineStyle,void>::decode(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198887C68(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::ImageOrientation::Orientation>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      long long v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  int v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      unsigned __int8 v13 = a1;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
        a1 = v13;
        uint64_t v2 = *v13;
        unint64_t v1 = v13[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 9)
  {
    int v6 = 256;
    return v6 | v5;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v2);
  }
  unsigned int v5 = 0;
  int v6 = 0;
  return v6 | v5;
}

uint64_t IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(IPC::Encoder *a1, unsigned char *a2)
{
  char v5 = a2[1] & 0xF;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *a2 & 0x1F;
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = *a2 >> 5;
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  char v8 = *(unsigned __int16 *)a2 >> 12;
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  char v9 = a2[2] & 0xF;
  return IPC::Encoder::operator<<<BOOL>(a1, &v9);
}

uint64_t IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v30 = a1[3];
    if (v30)
    {
      unsigned __int8 v117 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
        a1 = v117;
        uint64_t v29 = *v117;
        unint64_t v28 = v117[1];
      }
      else
      {
        unint64_t v28 = 0;
        uint64_t v29 = 0;
      }
    }
    goto LABEL_29;
  }
  int v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    unint64_t v28 = v1;
    uint64_t v29 = 0;
LABEL_29:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v31 = a1[3];
    if (v31)
    {
      uint64_t v116 = a1;
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29, v28);
        a1 = v116;
        uint64_t v2 = *v116;
        unint64_t v1 = v116[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_30;
  }
  unsigned int v6 = *v4;
  if (v6 < 0xE)
  {
    int v7 = 0;
    goto LABEL_5;
  }
LABEL_30:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v32 = a1[3];
  if (!v32)
  {
    unsigned int v6 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
    goto LABEL_32;
  }
  unsigned __int8 v115 = a1;
  if (!v1)
  {
    unsigned int v6 = 0;
    unint64_t v32 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (v33)
    {
      unsigned int v90 = v6;
      int v102 = v7;
      long long v114 = a1;
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v2, v32);
        a1 = v114;
        uint64_t v2 = *v114;
        unint64_t v1 = v114[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
      unsigned int v6 = v90;
      int v7 = v102;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
    goto LABEL_34;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v32 + 16))(v32, v2);
  unsigned int v6 = 0;
  a1 = v115;
  uint64_t v2 = *v115;
  unint64_t v1 = v115[1];
  int v7 = 1;
  uint64_t v5 = v115[2];
LABEL_5:
  unint64_t v8 = v5 - v2;
  if (v1 <= v8)
  {
    unsigned int v79 = v6;
    int v91 = v7;
    unint64_t v32 = 0;
    uint64_t v39 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v103 = a1;
    if (v39 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
      a1 = v103;
      uint64_t v2 = *v103;
      unint64_t v32 = v103[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v6 = v79;
    int v7 = v91;
    goto LABEL_32;
  }
  char v9 = (unsigned __int8 *)(v2 + v8);
  uint64_t v10 = v2 + v8 + 1;
  a1[2] = v10;
  if (!v2)
  {
    unint64_t v32 = v1;
    goto LABEL_32;
  }
  int v11 = *v9;
  if ((v11 - 1) < 0x12)
  {
    int v12 = 0;
    goto LABEL_9;
  }
LABEL_34:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v34 = a1[3];
  if (!v34)
  {
    int v11 = 0;
    uint64_t v2 = 0;
    int v12 = 1;
    goto LABEL_36;
  }
  unsigned int v89 = v6;
  int v101 = v7;
  unsigned __int8 v113 = a1;
  if (!v1)
  {
    int v11 = 0;
    unint64_t v34 = 0;
    uint64_t v2 = 0;
    int v12 = 1;
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v35 = a1[3];
    if (v35)
    {
      int v69 = v12;
      int v78 = v11;
      unsigned int v88 = v6;
      int v100 = v7;
      unsigned __int16 v112 = a1;
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v2, v34);
        a1 = v112;
        uint64_t v2 = *v112;
        unint64_t v1 = v112[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
      unsigned int v6 = v88;
      int v7 = v100;
      int v11 = v78;
      int v12 = v69;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
    goto LABEL_38;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v34 + 16))(v34, v2);
  int v11 = 0;
  a1 = v113;
  uint64_t v2 = *v113;
  unint64_t v1 = v113[1];
  int v12 = 1;
  uint64_t v10 = v113[2];
  unsigned int v6 = v89;
  int v7 = v101;
LABEL_9:
  unint64_t v13 = v10 - v2;
  if (v1 <= v13)
  {
    int v61 = v12;
    int v70 = v11;
    unsigned int v80 = v6;
    int v92 = v7;
    unint64_t v34 = 0;
    uint64_t v40 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    __int16 v104 = a1;
    if (v40 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
      a1 = v104;
      uint64_t v2 = *v104;
      unint64_t v34 = v104[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v6 = v80;
    int v7 = v92;
    int v11 = v70;
    int v12 = v61;
    goto LABEL_36;
  }
  long long v14 = (unsigned __int8 *)(v2 + v13);
  uint64_t v15 = v2 + v13 + 1;
  a1[2] = v15;
  if (!v2)
  {
    unint64_t v34 = v1;
    goto LABEL_36;
  }
  unsigned int v16 = *v14;
  if (v16 < 3)
  {
    int v17 = 0;
    goto LABEL_13;
  }
LABEL_38:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v36 = a1[3];
  if (!v36)
  {
    unsigned int v16 = 0;
    uint64_t v2 = 0;
    int v17 = 1;
    goto LABEL_40;
  }
  int v68 = v12;
  int v77 = v11;
  unsigned int v87 = v6;
  int v99 = v7;
  unsigned __int8 v111 = a1;
  if (!v1)
  {
    unsigned int v16 = 0;
    unint64_t v36 = 0;
    uint64_t v2 = 0;
    int v17 = 1;
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v37 = a1[3];
    if (v37)
    {
      int v54 = v17;
      unsigned int v60 = v16;
      int v67 = v12;
      int v76 = v11;
      unsigned int v86 = v6;
      int v98 = v7;
      Color v110 = a1;
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v37 + 16))(v37, v2, v36);
        a1 = v110;
        uint64_t v2 = *v110;
        unint64_t v1 = v110[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
      unsigned int v6 = v86;
      int v7 = v98;
      int v11 = v76;
      unsigned int v16 = v60;
      int v12 = v67;
      int v17 = v54;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
    goto LABEL_42;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v36 + 16))(v36, v2);
  unsigned int v16 = 0;
  a1 = v111;
  uint64_t v2 = *v111;
  unint64_t v1 = v111[1];
  int v17 = 1;
  uint64_t v15 = v111[2];
  unsigned int v6 = v87;
  int v7 = v99;
  int v11 = v77;
  int v12 = v68;
LABEL_13:
  unint64_t v18 = v15 - v2;
  if (v1 <= v18)
  {
    int v49 = v17;
    unsigned int v55 = v16;
    int v62 = v12;
    int v71 = v11;
    unsigned int v81 = v6;
    int v93 = v7;
    unint64_t v36 = 0;
    uint64_t v41 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    char v105 = a1;
    if (v41 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
      a1 = v105;
      uint64_t v2 = *v105;
      unint64_t v36 = v105[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v6 = v81;
    int v7 = v93;
    int v11 = v71;
    unsigned int v16 = v55;
    int v12 = v62;
    int v17 = v49;
    goto LABEL_40;
  }
  unint64_t v19 = (unsigned __int8 *)(v2 + v18);
  uint64_t v20 = v2 + v18 + 1;
  a1[2] = v20;
  if (!v2)
  {
    unint64_t v36 = v1;
    goto LABEL_40;
  }
  unsigned int v21 = *v19;
  if (v21 < 9)
  {
    int v22 = 0;
    goto LABEL_17;
  }
LABEL_42:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v26 = a1[3];
  if (!v26)
  {
    unsigned int v21 = 0;
    uint64_t v2 = 0;
    int v22 = 1;
LABEL_44:
    *a1 = 0;
    a1[1] = 0;
    uint64_t i = a1[3];
    if (i) {
      goto LABEL_69;
    }
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    goto LABEL_46;
  }
  int v53 = v17;
  unsigned int v59 = v16;
  int v66 = v12;
  int v75 = v11;
  unsigned int v85 = v6;
  int v97 = v7;
  unsigned __int8 v109 = a1;
  if (!v1)
  {
    unsigned int v21 = 0;
    uint64_t v26 = 0;
    uint64_t v2 = 0;
    int v22 = 1;
    goto LABEL_44;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v2);
  unsigned int v21 = 0;
  a1 = v109;
  uint64_t v2 = *v109;
  unint64_t v1 = v109[1];
  int v22 = 1;
  uint64_t v20 = v109[2];
  unsigned int v6 = v85;
  int v7 = v97;
  int v11 = v75;
  unsigned int v16 = v59;
  int v12 = v66;
  int v17 = v53;
LABEL_17:
  unint64_t v23 = v20 - v2;
  if (v1 <= v23)
  {
    int v43 = v22;
    unsigned int v46 = v21;
    int v50 = v17;
    unsigned int v56 = v16;
    int v63 = v12;
    int v72 = v11;
    unsigned int v82 = v6;
    int v94 = v7;
    uint64_t v26 = 0;
    uint64_t v42 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    Color v106 = a1;
    if (v42 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
      a1 = v106;
      uint64_t v2 = *v106;
      uint64_t v26 = v106[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v6 = v82;
    int v7 = v94;
    int v11 = v72;
    unsigned int v16 = v56;
    int v12 = v63;
    unsigned int v21 = v46;
    int v17 = v50;
    int v22 = v43;
    goto LABEL_44;
  }
  uint64_t v24 = (unsigned __int8 *)(v2 + v23);
  uint64_t i = (uint64_t)(v24 + 1);
  a1[2] = v24 + 1;
  if (!v2)
  {
    uint64_t v26 = v1;
    goto LABEL_44;
  }
  uint64_t v26 = *v24;
  if (v26 > 4) {
    goto LABEL_46;
  }
  if (v7) {
    goto LABEL_68;
  }
  for (uint64_t i = 0; v12 || v17 || v22 || i; uint64_t i = 1)
  {
    do
    {
LABEL_68:
      __break(1u);
LABEL_69:
      int v45 = v22;
      unsigned int v48 = v21;
      int v52 = v17;
      unsigned int v58 = v16;
      int v65 = v12;
      int v74 = v11;
      unsigned int v84 = v6;
      int v96 = v7;
      Color v108 = a1;
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)i + 16))(i, v2, v26);
        a1 = v108;
        uint64_t v2 = *v108;
        unint64_t v1 = v108[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
      unsigned int v6 = v84;
      int v7 = v96;
      int v11 = v74;
      unsigned int v16 = v58;
      int v12 = v65;
      unsigned int v21 = v48;
      int v17 = v52;
      int v22 = v45;
LABEL_46:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v38 = a1[3];
      if (!v38) {
        return 0;
      }
      int v44 = v22;
      unsigned int v47 = v21;
      int v51 = v17;
      unsigned int v57 = v16;
      int v64 = v12;
      int v73 = v11;
      unsigned int v83 = v6;
      unsigned int v95 = v7;
      unsigned __int8 v107 = a1;
      if (!v1) {
        return 0;
      }
      a1 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v2);
      if (!*v107) {
        return 0;
      }
      int v11 = v73;
      unsigned int v6 = v83;
      unsigned int v16 = v57;
      int v12 = v64;
      unsigned int v21 = v47;
      int v17 = v51;
      int v22 = v44;
      uint64_t v26 = v95;
    }
    while (v95);
  }
  return v11 | (v6 << 8) | (v21 << 12) | (32 * v16) | (v26 << 16) | 0x1000000;
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::Seconds>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::Seconds>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<WebCore::CrossOriginOpenerPolicy,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
}

uint64_t IPC::Decoder::decode<WebCore::PolicyContainer>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PolicyContainer,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19888885C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::PolicyContainer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  int v5 = *(_DWORD *)(a2 + 16);
  IPC::Encoder::operator<<<int>(a1, &v5);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, a2 + 24);
  IPC::ArgumentCoder<WebCore::CrossOriginOpenerPolicy,void>::encode(a1, a2 + 48);
  char v6 = *(unsigned char *)(a2 + 72);
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::ContentSecurityPolicyResponseHeaders const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  int v5 = *(_DWORD *)(a2 + 16);
  IPC::Encoder::operator<<<int>(a1, &v5);
  return a1;
}

uint64_t IPC::ArgumentCoder<WebCore::PolicyContainer,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v31, a1);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v28, a1);
  IPC::Decoder::decode<WebCore::CrossOriginOpenerPolicy>((uint64_t)&v25, a1);
  unsigned __int16 v5 = IPC::ArgumentCoder<WebCore::ReferrerPolicy,void>::decode<IPC::Decoder>(a1);
  if (v5 <= 0xFFu) {
    goto LABEL_12;
  }
  while (*(void *)a1)
  {
    if (v35)
    {
      uint64_t v6 = v31;
      uint64_t v7 = v32;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v16 = v33;
      char v17 = v34;
      if (v30)
      {
        __int16 v8 = v28;
        __int16 v18 = v28;
        long long v9 = v29;
        long long v29 = 0uLL;
        if (v27)
        {
          __int16 v10 = v25;
          __int16 v21 = v25;
          long long v11 = v26;
          long long v26 = 0uLL;
          if (v5 > 0xFFu)
          {
            char v24 = v5;
            v15[0] = 0;
            v15[1] = 0;
            *(void *)a2 = v6;
            *(void *)(a2 + 8) = v7;
            *(_DWORD *)(a2 + 16) = v33;
            *(unsigned char *)(a2 + 20) = v34;
            *(_WORD *)(a2 + 24) = v8;
            *(_OWORD *)(a2 + 32) = v9;
            *(_WORD *)(a2 + 48) = v10;
            *(_OWORD *)(a2 + 56) = v11;
            *(unsigned char *)(a2 + 72) = v5;
            *(unsigned char *)(a2 + 80) = 1;
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            uint64_t v22 = 0;
            uint64_t v23 = 0;
            WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v4);
            goto LABEL_8;
          }
        }
      }
    }
    __break(1u);
LABEL_12:
    IPC::Decoder::markInvalid(a1);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
LABEL_8:
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, (WTF::StringImpl *)v4);
  uint64_t result = std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v12);
  if (v35) {
    return WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v14);
  }
  return result;
}

void sub_198888A94(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v12 - 96, v14);
  if (*(unsigned char *)(v12 - 40)) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 64, v15);
  }
  _Unwind_Resume(a1);
}

void sub_198888ACC()
{
}

uint64_t IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    __int16 v8 = (unint64_t *)(v5 + v6);
    *((void *)a2 + 2) = v8 + 1;
    if (!v5)
    {
      unint64_t v22 = v4;
      uint64_t v23 = 0;
      goto LABEL_36;
    }
    unint64_t v9 = *v8;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    if (v9 < 0x10000)
    {
      if (!v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        goto LABEL_10;
      }
      LODWORD(v39) = v9;
      uint64_t v38 = WTF::fastMalloc((WTF *)(16 * v9));
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v34, a2);
        if (!(_BYTE)v36) {
          break;
        }
        if (HIDWORD(v39) == v39)
        {
          WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v38, (unint64_t)&v34);
        }
        else
        {
          int v27 = HIDWORD(v39) + 1;
          uint64_t v28 = v38 + 16 * HIDWORD(v39);
          long long v29 = v34;
          char v34 = 0;
          *(void *)uint64_t v28 = v29;
          *(unsigned char *)(v28 + 8) = v35;
          HIDWORD(v39) = v27;
        }
        std::optional<WebKit::WebPageGroupData>::~optional((uint64_t)&v34, v26);
        if (!--v9)
        {
          uint64_t v10 = v38;
          uint64_t v11 = v39;
LABEL_10:
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = v10;
          uint64_t v32 = v11;
LABEL_11:
          unsigned __int8 v33 = 1;
          WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, a2);
          goto LABEL_12;
        }
      }
      LOBYTE(v31) = 0;
      unsigned __int8 v33 = 0;
      std::optional<WebKit::WebPageGroupData>::~optional((uint64_t)&v34, v26);
LABEL_33:
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v17);
      goto LABEL_38;
    }
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v34, a2);
      if (!(_BYTE)v36)
      {
        LOBYTE(v31) = 0;
        unsigned __int8 v33 = 0;
        goto LABEL_33;
      }
      if (HIDWORD(v39) != v39) {
        break;
      }
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>((uint64_t)&v38, (unint64_t)&v34);
      if ((_BYTE)v36) {
        goto LABEL_25;
      }
LABEL_28:
      if (!--v9)
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v38, HIDWORD(v39));
        uint64_t v31 = v38;
        uint64_t v30 = v39;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v32 = v30;
        goto LABEL_11;
      }
    }
    int v18 = HIDWORD(v39) + 1;
    uint64_t v19 = v38 + 16 * HIDWORD(v39);
    uint64_t v20 = v34;
    char v34 = 0;
    *(void *)uint64_t v19 = v20;
    *(unsigned char *)(v19 + 8) = v35;
    HIDWORD(v39) = v18;
LABEL_25:
    __int16 v21 = v34;
    char v34 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    goto LABEL_28;
  }
  while (1)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v24 = *((void *)a2 + 3);
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v5, v4);
        uint64_t v23 = *(void *)a2;
        unint64_t v22 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
LABEL_36:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25 && v22) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
    }
    LOBYTE(v31) = 0;
    unsigned __int8 v33 = 0;
LABEL_38:
    IPC::Decoder::markInvalid(a2);
LABEL_12:
    uint64_t result = IPC::Decoder::decode<unsigned int>(a2);
    uint64_t v14 = *(void *)a2;
    if (!*(void *)a2) {
      break;
    }
    uint64_t v5 = v33;
    if (v33 && (result & 0xFF00000000) != 0)
    {
      uint64_t v15 = v31;
      uint64_t v31 = 0;
      int v36 = result;
      char v37 = 0;
      char v34 = 0;
      *(void *)a1 = v15;
      uint64_t v35 = 0;
      uint64_t v16 = v32;
      uint64_t v32 = 0;
      *(void *)(a1 + 8) = v16;
      *(_DWORD *)(a1 + 16) = result;
      *(unsigned char *)(a1 + 20) = 0;
      *(unsigned char *)(a1 + 24) = 1;
      uint64_t result = WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v13);
      goto LABEL_16;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_16:
  if (v33) {
    uint64_t result = WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v13);
  }
  if (!v14) {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_198888E0C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::optional<WebKit::WebPageGroupData>::~optional((uint64_t)va, a2);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v6);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::SubstituteData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,void>::encode<IPC::Encoder,WebCore::FragmentedSharedBuffer>(a1, (WebCore::FragmentedSharedBuffer **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(a2 + 48));
  char v4 = *(unsigned char *)(a2 + 304);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::SubstituteData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(&v19, a1);
  IPC::Decoder::decode<WTF::URL>(a1, v17);
  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v16);
  unsigned __int16 v4 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  if (!*(void *)a1) {
    goto LABEL_24;
  }
  if (!v20 || !v18 || !v16[256] || v4 <= 0xFFu)
  {
    __break(1u);
LABEL_24:
    *a2 = 0;
    a2[312] = 0;
    goto LABEL_14;
  }
  WebCore::SubstituteData::SubstituteData((uint64_t)&v12, (uint64_t *)&v19, (uint64_t)v17, (WebCore::ResourceResponseBase *)v16, v4 != 0);
  WebCore::SubstituteData::SubstituteData((uint64_t)a2, (uint64_t *)&v12);
  a2[312] = 1;
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v14, v6);
  __int16 v8 = v13;
  unint64_t v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, v5);
  }
LABEL_14:
  uint64_t result = std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v16, v5);
  if (v18)
  {
    uint64_t result = (WTF::StringImpl *)v17[0];
    v17[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v20)
  {
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (result) {
      return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v11);
    }
  }
  return result;
}

void sub_198889018(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,CFTypeRef cf,uint64_t a46,uint64_t a47,char a48)
{
  int v51 = (WebCore::ResourceResponseBase *)(v48 + 48);
  if (cf) {
    CFRelease(cf);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v51, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v52);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, v52);
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&a48, v52);
  if (*(unsigned char *)(v49 - 56))
  {
    int v54 = *(WTF::StringImpl **)(v49 - 96);
    *(void *)(v49 - 96) = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2) {
        WTF::StringImpl::destroy(v54, v53);
      }
      else {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v49 - 40))
  {
    unsigned int v55 = *(unsigned int **)(v49 - 48);
    *(void *)(v49 - 48) = 0;
    if (v55) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v55, v53);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v12 = *((void *)a2 + 3);
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  __int16 v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(void *)a1 = 0;
    goto LABEL_8;
  }
  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::decode(a2, &v18);
  *a1 = 0;
  a1[8] = 0;
  if (v19)
  {
    *(void *)a1 = v18;
LABEL_8:
    a1[8] = 1;
    return;
  }
LABEL_13:
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v17 = *((void *)a2 + 3);
  if (v17)
  {
    if (v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
  }
}

unint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 16);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 32);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = *(unsigned char *)(a2 + 33);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, a2 + 120);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 136);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 160));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 162));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 164));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 165));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 168));
  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 176);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)&v86);
  unsigned __int16 v3 = IPC::ArgumentCoder<WebCore::ServiceWorkerClientType,void>::decode<IPC::Decoder>(a1);
  if (v3 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  LOWORD(v66) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v66);
  char v4 = v66;
  if (BYTE1(v66)) {
    BOOL v5 = v66 > 3u;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  if (v6 == 1) {
    goto LABEL_63;
  }
  while (1)
  {
    IPC::Decoder::decode<WTF::URL>(a1, &v62);
    IPC::Decoder::decode<WTF::URL>(a1, &v58);
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, &v55);
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, (uint64_t)&v52);
    unsigned __int16 NavigationWasApp = IPC::Decoder::decode<WebCore::LastNavigationWasAppInitiated>(a1);
    int v8 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(a1);
    unint64_t v9 = *((void *)a1 + 1);
    unint64_t v10 = *(char **)a1;
    unint64_t v11 = *((void *)a1 + 2) - *(void *)a1;
    if (v9 <= v11)
    {
      unint64_t v33 = 0;
      char v34 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v35 = *((void *)a1 + 3);
      if (v35)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
          char v34 = *(char **)a1;
          unint64_t v33 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v33 = 0;
          char v34 = 0;
        }
      }
      goto LABEL_65;
    }
    uint64_t v12 = &v10[v11];
    uint64_t v13 = (uint64_t)&v10[v11 + 1];
    *((void *)a1 + 2) = v13;
    if (!v10)
    {
      unint64_t v33 = v9;
      char v34 = 0;
LABEL_65:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v36 = *((void *)a1 + 3);
      if (v36 && v33)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v36 + 16))(v36, v34, v33);
        unsigned int v14 = 0;
        unint64_t v10 = *(char **)a1;
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v10 = 0;
        unsigned int v14 = 0;
      }
      goto LABEL_67;
    }
    unsigned int v14 = *v12;
    if (v14 < 2)
    {
      int v48 = 0;
      char v15 = 1;
      goto LABEL_14;
    }
LABEL_67:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (!v37 || !v9)
    {
      unint64_t v38 = 0;
      unint64_t v10 = 0;
      char v47 = 0;
      int v48 = 1;
LABEL_69:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v39 = *((void *)a1 + 3);
      if (v39 && v38)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v39 + 16))(v39, v10, v38);
        unsigned int v18 = 0;
        unint64_t v10 = *(char **)a1;
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v10 = 0;
        unsigned int v18 = 0;
      }
      goto LABEL_71;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v37 + 16))(v37, v10);
    char v15 = 0;
    unint64_t v10 = *(char **)a1;
    unint64_t v9 = *((void *)a1 + 1);
    int v48 = 1;
    uint64_t v13 = *((void *)a1 + 2);
LABEL_14:
    if (!v14) {
      char v15 = 0;
    }
    char v47 = v15;
    unint64_t v16 = v13 - (void)v10;
    if (v9 <= v16)
    {
      unint64_t v38 = 0;
      uint64_t v45 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v45 && v9)
      {
        (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
        unint64_t v10 = *(char **)a1;
        unint64_t v38 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v10 = 0;
      }
      goto LABEL_69;
    }
    uint64_t v17 = &v10[v16];
    *((void *)a1 + 2) = v17 + 1;
    if (!v10)
    {
      unint64_t v38 = v9;
      goto LABEL_69;
    }
    unsigned int v18 = *v17;
    if (v18 < 2)
    {
      int v19 = 0;
      char v20 = 1;
      goto LABEL_20;
    }
LABEL_71:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v40 + 16))(v40, v10);
        char v20 = 0;
        unint64_t v10 = *(char **)a1;
        unint64_t v9 = *((void *)a1 + 1);
        goto LABEL_74;
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v10 = 0;
    char v20 = 0;
LABEL_74:
    int v19 = 1;
LABEL_20:
    char v21 = v18 ? v20 : 0;
    unint64_t v22 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v10;
    if (v9 < v22 || v9 - v22 <= 7)
    {
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v43 = *((void *)a1 + 3);
      if (v43)
      {
        if (v9)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
          uint64_t v42 = *(char **)a1;
          unint64_t v41 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v41 = 0;
          uint64_t v42 = 0;
        }
      }
    }
    else
    {
      uint64_t v23 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)a1 + 2) = v23 + 1;
      if (v10)
      {
        int v24 = 0;
        uint64_t v25 = *v23;
        goto LABEL_27;
      }
      unint64_t v41 = v9;
      uint64_t v42 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44 && v41) {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v44 + 16))(v44, v42, v41);
    }
    uint64_t v25 = 0;
    int v24 = 1;
LABEL_27:
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v49);
    if (!*(void *)a1)
    {
      *a2 = 0;
      a2[192] = 0;
      goto LABEL_47;
    }
    if (v88)
    {
      long long v66 = v86;
      uint64_t v67 = v87;
      if (v3 > 0xFFu)
      {
        char v68 = v3;
        if (!v6)
        {
          char v69 = v4;
          if (v65)
          {
            uint64_t v28 = v62;
            int v62 = 0;
            int v70 = v28;
            long long v71 = v63;
            long long v72 = v64;
            LODWORD(v63) = v63 & 0xFFFFFFFE;
            if (v61)
            {
              long long v29 = v58;
              unsigned int v58 = 0;
              int v73 = v29;
              long long v74 = v59;
              long long v75 = v60;
              LODWORD(v59) = v59 & 0xFFFFFFFE;
              if (v57)
              {
                uint64_t v76 = v55;
                char v77 = v56;
                if (v54)
                {
                  long long v78 = v52;
                  char v79 = v53;
                  if (NavigationWasApp > 0xFFu)
                  {
                    char v80 = NavigationWasApp;
                    if ((v8 & 0xFF0000) != 0)
                    {
                      __int16 v81 = v8;
                      if (!v48)
                      {
                        char v82 = v47;
                        if (!v19)
                        {
                          char v83 = v21;
                          if (!v24)
                          {
                            uint64_t v84 = v25;
                            if (v51) {
                              break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_63:
    IPC::Decoder::markInvalid(a1);
    char v4 = 0;
  }
  v85[0] = v49;
  uint64_t v30 = v50;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  v85[1] = v30;
  std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::__optional_destruct_base[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)a2, &v66);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v85, v31);
  uint64_t v32 = v73;
  int v73 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v27);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  uint64_t result = v70;
  int v70 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_47:
  if (v51) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v27);
  }
  if (v61)
  {
    uint64_t result = v58;
    unsigned int v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v65)
  {
    uint64_t result = v62;
    int v62 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198889A24(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a21, a2);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a27, v28);
  _Unwind_Resume(a1);
}

void sub_198889A7C()
{
}

void sub_198889A84()
{
}

uint64_t IPC::Decoder::decode<WebCore::ServiceWorkerClientType>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::ServiceWorkerClientType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<WebCore::LastNavigationWasAppInitiated>(IPC::Decoder *a1)
{
  __int16 v5 = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v5);
  int v2 = HIBYTE(v5);
  if (HIBYTE(v5))
  {
    int v3 = v5;
  }
  else
  {
    IPC::Decoder::markInvalid(a1);
    int v3 = 0;
  }
  return v3 | (v2 << 8);
}

void WebCore::ServiceWorkerClientData::~ServiceWorkerClientData(WebCore::ServiceWorkerClientData *this, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  char v4 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  __int16 v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

unsigned int *IPC::Decoder::decode<WebCore::MessageWithMessagePorts>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (unsigned int *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198889C08(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ServiceWorkerData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 64))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198889C8C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerClientQueryOptions,void>::decode(IPC::Decoder *a1)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)a1 + 1);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *((void *)a1 + 2) - *(void *)a1;
  if ((unint64_t)v2 <= v4) {
    goto LABEL_14;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  *((void *)a1 + 2) = v5 + 1;
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  LODWORD(v5) = *v5;
  if (v5 >= 2) {
    goto LABEL_17;
  }
  int v6 = 0;
  __int16 v7 = 1;
  while (1)
  {
    __int16 v8 = v5 ? v7 : 0;
    unsigned __int16 v9 = IPC::Decoder::decode<WebCore::ServiceWorkerClientType>(a1);
    uint64_t v10 = *(void *)a1;
    if (!*(void *)a1) {
      break;
    }
    if (!v6 && v9 > 0xFFu)
    {
      LODWORD(v10) = 1;
      return (unsigned __int16)(v8 | (v9 << 8)) | (v10 << 16);
    }
    __break(1u);
LABEL_14:
    uint64_t v5 = 0;
    uint64_t v12 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v13 = *((void *)a1 + 3);
    if (v13)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a1;
        uint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v12 = 0;
      }
    }
LABEL_15:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v14 = *((void *)a1 + 3);
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v14 + 16))(v14, v12, v5);
        LODWORD(v5) = 0;
        uint64_t v3 = *(void *)a1;
        uint64_t v2 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v2 = 0;
      uint64_t v3 = 0;
      LODWORD(v5) = 0;
    }
LABEL_17:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v15 = *((void *)a1 + 3);
    if (v15)
    {
      int v16 = (int)v5;
      if (v2) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v3);
      }
      __int16 v7 = 0;
      int v6 = 1;
      LODWORD(v5) = v16;
    }
    else
    {
      __int16 v7 = 0;
      int v6 = 1;
    }
  }
  __int16 v8 = 0;
  return (unsigned __int16)(v8 | (v9 << 8)) | (v10 << 16);
}

unint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  char v5 = *(unsigned char *)(a2 + 56);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 57));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v9 = v8;
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v19);
  unsigned __int16 v10 = IPC::Decoder::decode<WebCore::ServiceWorkerState>(a1);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::UserStyleLevel>(a1);
  if (!*a1) {
    goto LABEL_18;
  }
  if (!v6) {
    goto LABEL_17;
  }
  *(void *)&long long v14 = v4;
  if (!v9) {
    goto LABEL_17;
  }
  *((void *)&v14 + 1) = v7;
  if (!v22
    || (uint64_t v13 = v19, v19 = 0, v15 = v13, v16 = v20, v17 = v21, LODWORD(v20) = v20 & 0xFFFFFFFE, v10 <= 0xFFu)
    || (LOBYTE(v18) = v10, (unsigned __int16)result <= 0xFFu))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
    goto LABEL_11;
  }
  HIBYTE(v18) = (_BYTE)result;
  *(_OWORD *)a2 = v14;
  WTF::URL::URL(a2 + 16, (uint64_t *)&v15);
  *(_WORD *)(a2 + 56) = v18;
  *(unsigned char *)(a2 + 64) = 1;
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_11:
  if (v22)
  {
    uint64_t result = v19;
    int v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19888A034(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a22 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ServiceWorkerState>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 5u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

IPC::Decoder *IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)(a2 + 256);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v5);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)&v5 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  LOBYTE(v5) = *(_DWORD *)(a2 + 104);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 80, v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 112));
  LOBYTE(v5) = *(_DWORD *)(a2 + 192);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&>(a1, a2 + 160, v5);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 208));
  LOBYTE(v5) = *(unsigned char *)(a2 + 209);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 216));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 224));
  return IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationOptions>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationOptions> const&>(a1, a2 + 232);
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)v51);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v49);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v47);
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v68);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v45);
  IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>((IPC::Decoder *)a1, v67);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a1);
  LOWORD(v52) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v52);
  unsigned int v5 = v52;
  if (BYTE1(v52)) {
    BOOL v6 = v52 > 2u;
  }
  else {
    BOOL v6 = 1;
  }
  unsigned int v7 = v6;
  if (v7 == 1) {
    goto LABEL_79;
  }
  while (1)
  {
    if (v7) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = v5 | 0x100;
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v43);
    unint64_t v8 = a1[1];
    uint64_t v9 = (WTF::StringImpl *)*a1;
    unint64_t v10 = a1[2] - *a1;
    if (v8 <= v10)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v29 = a1[3];
      if (v29)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
          uint64_t v28 = *a1;
          uint64_t v27 = a1[1];
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
        }
      }
      goto LABEL_83;
    }
    int v11 = (unsigned __int8 *)v9 + v10;
    a1[2] = (uint64_t)(v11 + 1);
    if (!v9)
    {
      uint64_t v27 = v8;
      uint64_t v28 = 0;
LABEL_83:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v30 = a1[3];
      if (v30 && v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28, v27);
        unsigned int v5 = 0;
        uint64_t v9 = (WTF::StringImpl *)*a1;
        unint64_t v8 = a1[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
        unsigned int v5 = 0;
      }
      goto LABEL_85;
    }
    unsigned int v5 = *v11;
    if (v5 < 2)
    {
      int v12 = 0;
      goto LABEL_15;
    }
LABEL_85:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v31 = a1[3];
    if (!v31 || !v8)
    {
      uint64_t v9 = 0;
      unint64_t v8 = 0;
      int v12 = 1;
LABEL_87:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v32 = a1[3];
      if (v32)
      {
        if (v8)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v32 + 16))(v32, v9);
          uint64_t v33 = *a1;
          unint64_t v8 = a1[1];
        }
        else
        {
          uint64_t v33 = 0;
        }
      }
      else
      {
        uint64_t v33 = 0;
        unint64_t v8 = 0;
      }
      goto LABEL_89;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v31 + 16))(v31, v9);
    uint64_t v9 = (WTF::StringImpl *)*a1;
    unint64_t v8 = a1[1];
    int v12 = 1;
LABEL_15:
    if (v8 <= a1[2] - (uint64_t)v9) {
      goto LABEL_87;
    }
    __int16 v13 = (WTF::StringImpl *)a1[2];
    a1[2] = (uint64_t)v13 + 1;
    if (!v9)
    {
      uint64_t v33 = 0;
LABEL_89:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v34 = a1[3];
      if (v34)
      {
        if (v8)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v33);
          uint64_t v9 = (WTF::StringImpl *)*a1;
          unint64_t v8 = a1[1];
        }
        else
        {
          uint64_t v9 = 0;
        }
      }
      else
      {
        uint64_t v9 = 0;
        unint64_t v8 = 0;
      }
LABEL_91:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v35 = a1[3];
      if (v35 && v8) {
        goto LABEL_93;
      }
      goto LABEL_96;
    }
    LODWORD(v13) = *(unsigned __int8 *)v13;
    if (v13 >= 2) {
      goto LABEL_91;
    }
    if (!v13)
    {
      LOBYTE(v40) = 0;
LABEL_25:
      char v41 = (char)v13;
      char v42 = 1;
      goto LABEL_26;
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v52);
    unsigned int v5 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a1);
    int v14 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
    if (*a1)
    {
      if (!v53) {
        goto LABEL_78;
      }
      __int16 v13 = v52;
      long long v52 = 0;
      if ((unsigned __int16)v5 <= 0xFFu || (unsigned __int16)v14 <= 0xFFu) {
        goto LABEL_78;
      }
      unsigned int v5 = v5 | (v14 << 8);
      uint64_t v40 = v13;
      LOBYTE(v13) = 1;
      goto LABEL_25;
    }
    if (v53)
    {
      uint64_t v39 = v52;
      long long v52 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, v9);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    uint64_t v9 = (WTF::StringImpl *)*a1;
    uint64_t v36 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v35 = a1[3];
    if (v35 && v36) {
LABEL_93:
    }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v35 + 16))(v35, v9);
LABEL_96:
    LOBYTE(v40) = 0;
    char v42 = 0;
    uint64_t v9 = (WTF::StringImpl *)*a1;
    uint64_t v37 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v38 = a1[3];
    if (!v38 || !v37 || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v38 + 16))(v38, v9), !*a1))
    {
LABEL_34:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 272) = 0;
      goto LABEL_48;
    }
LABEL_26:
    unsigned int v15 = v7 >> 8;
    if (v7 >> 8 && !(_BYTE)v7)
    {
      if (!v42) {
        goto LABEL_78;
      }
      if (v41) {
        goto LABEL_35;
      }
    }
    if (v15 && !(_BYTE)v7) {
      goto LABEL_34;
    }
    if (v42) {
      break;
    }
LABEL_78:
    __break(1u);
LABEL_79:
    uint64_t v24 = *a1;
    uint64_t v25 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26 && v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
    }
  }
  if (v41) {
    goto LABEL_34;
  }
LABEL_35:
  if (!v51[16] || !v50 || !v48 || !v70 || !v46 || !v67[48] || v4 <= 0xFFu || !v15 || !v44 || v12) {
    goto LABEL_78;
  }
  WebCore::ServiceWorkerJobData::ServiceWorkerJobData();
  WTF::URL::URL(a2, (uint64_t *)&v52);
  WTF::URL::URL(a2 + 40, v54);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 80, (uint64_t)&v55);
  WTF::URL::URL(a2 + 112, v56);
  long long v17 = v58;
  *(_OWORD *)(a2 + 160) = v57;
  *(_OWORD *)(a2 + 176) = v17;
  *(_OWORD *)(a2 + 192) = v59;
  *(_WORD *)(a2 + 208) = v60;
  uint64_t v18 = v61;
  uint64_t v61 = 0;
  *(void *)(a2 + 216) = v18;
  *(unsigned char *)(a2 + 224) = v62;
  *(unsigned char *)(a2 + 232) = 0;
  *(unsigned char *)(a2 + 248) = 0;
  if (v65)
  {
    uint64_t v19 = v63;
    uint64_t v63 = 0;
    *(void *)(a2 + 232) = v19;
    *(_WORD *)(a2 + 240) = v64;
    *(unsigned char *)(a2 + 248) = 1;
  }
  *(_OWORD *)(a2 + 256) = v66;
  *(unsigned char *)(a2 + 272) = 1;
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)&v52, v16);
LABEL_48:
  if (v42 && v41 && v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v9);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  if (v44)
  {
    long long v20 = v43;
    uint64_t v43 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v9);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  if (v46)
  {
    long long v21 = v45;
    uint64_t v45 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v9);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  if (v70 && v69 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v69])(&v52, v68);
  }
  if (v48)
  {
    char v22 = v47;
    char v47 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v9);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if (v50)
  {
    uint64_t v23 = v49;
    uint64_t v49 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v9);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
}

void sub_19888A9A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,WTF::StringImpl *a47,char a48)
{
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a27 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (*(unsigned char *)(v48 - 80))
  {
    uint64_t v50 = *(unsigned int *)(v48 - 88);
    if (v50 != -1) {
      ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v50])(v48 - 176, v48 - 112);
    }
  }
  if (a33 && a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  if (a39 && a34)
  {
    if (*(_DWORD *)a34 == 2) {
      WTF::StringImpl::destroy(a34, a2);
    }
    else {
      *(_DWORD *)a34 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, a2);

  return IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
}

unsigned int *IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>>(a1, (uint64_t)&v11);
  uint64_t result = (unsigned int *)IPC::Decoder::decode<WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)&v8);
  if (*(void *)a1)
  {
    if (v12)
    {
      BOOL v6 = v11;
      int v11 = 0;
      if (v10)
      {
        unsigned int v7 = v8;
        *(void *)a2 = v6;
        *(void *)(a2 + 8) = v7;
        *(void *)(a2 + 16) = v9;
        *(unsigned char *)(a2 + 24) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v10)
  {
    uint64_t result = (unsigned int *)v8;
    if (v8)
    {
      unint64_t v8 = 0;
      LODWORD(v9) = 0;
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
LABEL_5:
  if (v12)
  {
    uint64_t result = v11;
    int v11 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

void sub_19888AD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, char a14)
{
  if (a14)
  {
    if (a13) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19888ADD4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    unsigned __int16 v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 1));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 2));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RequestStorageAccessResult,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  LOWORD(v22) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v22);
  char v4 = (char)v22;
  if (BYTE1(v22)) {
    BOOL v5 = v22 > 2u;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  if (v6 == 1) {
    goto LABEL_24;
  }
  while (1)
  {
    LOWORD(v22) = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v22);
    int v7 = BYTE1(v22);
    if (BYTE1(v22))
    {
      char v8 = (char)v22;
    }
    else
    {
      uint64_t v17 = *a1;
      uint64_t v18 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v19 = a1[3];
      if (v19 && v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
      char v8 = 0;
    }
    unsigned __int16 v9 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a1);
    IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)a1, (uint64_t)&v22);
    unint64_t result = IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)a1, (uint64_t)&v20);
    if (!*a1) {
      break;
    }
    if (!v6)
    {
      if (v7)
      {
        if (v9 > 0xFFu)
        {
          if (v23)
          {
            char v12 = v22;
            char v22 = 0;
            if (v21)
            {
              __int16 v13 = v20;
              *(unsigned char *)a2 = v4;
              *(unsigned char *)(a2 + 1) = v8;
              *(unsigned char *)(a2 + 2) = v9;
              *(void *)(a2 + 8) = v12;
              *(void *)(a2 + 16) = v13;
              *(unsigned char *)(a2 + 24) = 1;
              goto LABEL_17;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_24:
    uint64_t v14 = *a1;
    uint64_t v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16 && v15) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
    }
    char v4 = 0;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v21)
  {
    unint64_t result = v20;
    long long v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_17:
  if (v23)
  {
    unint64_t result = v22;
    char v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19888B05C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::Exception,void>::encode(IPC::Encoder *a1, char *a2)
{
  BOOL v3 = (uint64_t *)(a2 + 8);
  char v5 = *a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v3);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::Exception,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::ExceptionCode>(a1);
  unint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v8);
  if (*a1)
  {
    if (v4 > 0xFFu && v9)
    {
      int v7 = v8;
      *(unsigned char *)a2 = v4;
      *(void *)(a2 + 8) = v7;
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v9)
  {
    unint64_t result = v8;
    char v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ExceptionCode>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ExceptionCode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::MessagePortIdentifier,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a1);
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::SecurityPolicyViolationEventInit,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, (char *)a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 1));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 2));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 72));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 74));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 76));
  int v4 = *(_DWORD *)(a2 + 80);

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

void IPC::ArgumentCoder<WebCore::SecurityPolicyViolationEventInit,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  char v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_79;
  }
  uint64_t v7 = (unsigned __int8 *)v5 + v6;
  uint64_t v8 = (uint64_t)v5 + v6 + 1;
  *((void *)a1 + 2) = v8;
  if (!v5)
  {
    unint64_t v39 = v4;
    uint64_t v40 = 0;
    goto LABEL_80;
  }
  unsigned int v9 = *v7;
  if (v9 >= 2) {
    goto LABEL_82;
  }
  int v62 = 0;
LABEL_5:
  unint64_t v10 = v8 - (void)v5;
  if (v4 <= v10)
  {
    unint64_t i = 0;
    uint64_t v56 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v56 && v4)
    {
      (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
      char v5 = *(WTF::StringImpl **)a1;
      unint64_t i = *((void *)a1 + 1);
    }
    else
    {
      char v5 = 0;
    }
    goto LABEL_84;
  }
  int v11 = (unsigned __int8 *)v5 + v10;
  uint64_t v12 = (uint64_t)v5 + v10 + 1;
  *((void *)a1 + 2) = v12;
  if (v5)
  {
    if (*v11 >= 2u) {
      goto LABEL_86;
    }
    int v61 = 0;
LABEL_9:
    unint64_t v13 = v12 - (void)v5;
    if (v4 <= v13)
    {
      unint64_t v47 = 0;
      uint64_t v57 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v57 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
        char v5 = *(WTF::StringImpl **)a1;
        unint64_t v47 = *((void *)a1 + 1);
      }
      else
      {
        char v5 = 0;
      }
    }
    else
    {
      uint64_t v14 = (unsigned __int8 *)v5 + v13;
      *((void *)a1 + 2) = v14 + 1;
      if (v5)
      {
        if (*v14 < 2u)
        {
          int v15 = 0;
          goto LABEL_13;
        }
        goto LABEL_90;
      }
      unint64_t v47 = v4;
    }
    goto LABEL_88;
  }
  for (unint64_t i = v4; ; unint64_t i = 0)
  {
LABEL_84:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v45 = *((void *)a1 + 3);
    if (v45 && i)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v45 + 16))(v45, v5, i);
      char v5 = *(WTF::StringImpl **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      char v5 = 0;
    }
LABEL_86:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v46 = *((void *)a1 + 3);
    if (v46 && v4)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v46 + 16))(v46, v5);
      char v5 = *(WTF::StringImpl **)a1;
      unint64_t v4 = *((void *)a1 + 1);
      int v61 = 1;
      uint64_t v12 = *((void *)a1 + 2);
      goto LABEL_9;
    }
    unint64_t v47 = 0;
    char v5 = 0;
    int v61 = 1;
LABEL_88:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v48 = *((void *)a1 + 3);
    if (v48 && v47)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v48 + 16))(v48, v5, v47);
      char v5 = *(WTF::StringImpl **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      char v5 = 0;
    }
LABEL_90:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v49 = *((void *)a1 + 3);
    if (v49 && v4) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v49 + 16))(v49, v5);
    }
    int v15 = 1;
LABEL_13:
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v85);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v83);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v81);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v79);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v77);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v75);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v73);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v71);
    unsigned __int16 v16 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
    int v17 = IPC::Decoder::decode<unsigned short>(a1);
    unint64_t v4 = *((void *)a1 + 1);
    uint64_t v18 = *(WTF::StringImpl **)a1;
    unint64_t v19 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
    if (v4 < v19 || v4 - v19 <= 3)
    {
      char v21 = 0;
      uint64_t v50 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v51 = *((void *)a1 + 3);
      if (v51)
      {
        int v55 = v17;
        if (v4)
        {
          (*(void (**)(void))(*(void *)v51 + 16))(*((void *)a1 + 3));
          uint64_t v50 = *(WTF::StringImpl **)a1;
          char v21 = (WTF::StringImpl *)*((void *)a1 + 1);
        }
        else
        {
          char v21 = 0;
          uint64_t v50 = 0;
        }
        int v17 = v55;
      }
    }
    else
    {
      *((void *)a1 + 2) = (char *)v18 + v19 + 4;
      if (v18)
      {
        int v20 = 0;
        char v21 = v18;
        goto LABEL_17;
      }
      char v21 = (WTF::StringImpl *)v4;
      uint64_t v50 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v52 = *((void *)a1 + 3);
    if (v52)
    {
      int v58 = v17;
      if (v21)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v50, v21);
        char v21 = *(WTF::StringImpl **)a1;
        unint64_t v4 = *((void *)a1 + 1);
        int v20 = 1;
        uint64_t v18 = *(WTF::StringImpl **)a1;
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v18 = 0;
        int v20 = 1;
      }
      int v17 = v58;
    }
    else
    {
      char v21 = 0;
      unint64_t v4 = 0;
      uint64_t v18 = 0;
      int v20 = 1;
    }
LABEL_17:
    unint64_t v22 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v18;
    if (v4 < v22 || v4 - v22 <= 3)
    {
      unint64_t v23 = 0;
      char v21 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v53 = *((void *)a1 + 3);
      if (v53)
      {
        int v60 = v17;
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
          char v21 = *(WTF::StringImpl **)a1;
          unint64_t v23 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v23 = 0;
          char v21 = 0;
        }
        int v17 = v60;
      }
    }
    else
    {
      *((void *)a1 + 2) = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      unint64_t v23 = v4;
      if (v18)
      {
        int v24 = 0;
        goto LABEL_21;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v54 = *((void *)a1 + 3);
    if (!v54
      || !v23
      || (int v59 = v17,
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v54 + 16))(v54, v21, v23),
          int v17 = v59,
          !*(void *)a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 88) = 0;
      goto LABEL_37;
    }
    int v24 = 1;
LABEL_21:
    if (!v62
      && !v61
      && !v15
      && v86
      && v84
      && v82
      && v80
      && v78
      && v76
      && v74
      && v72
      && v16 > 0xFFu
      && (v17 & 0xFF0000) != 0
      && !v20
      && !v24)
    {
      break;
    }
    __break(1u);
LABEL_79:
    unint64_t v39 = 0;
    uint64_t v40 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v41 = *((void *)a1 + 3);
    if (v41)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
        uint64_t v40 = *(WTF::StringImpl **)a1;
        unint64_t v39 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v39 = 0;
        uint64_t v40 = 0;
      }
    }
LABEL_80:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v42 = *((void *)a1 + 3);
    if (v42 && v39)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v42 + 16))(v42, v40, v39);
      char v5 = *(WTF::StringImpl **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      char v5 = 0;
    }
LABEL_82:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v43 = *((void *)a1 + 3);
    if (v43 && v4)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v43 + 16))(v43, v5);
      char v5 = *(WTF::StringImpl **)a1;
      unint64_t v4 = *((void *)a1 + 1);
      int v62 = 1;
      uint64_t v8 = *((void *)a1 + 2);
      goto LABEL_5;
    }
    char v5 = 0;
    int v62 = 1;
  }
  WebCore::SecurityPolicyViolationEventInit::SecurityPolicyViolationEventInit();
  *(_WORD *)a2 = v63;
  *(unsigned char *)(a2 + 2) = v64;
  long long v25 = v65;
  long long v65 = 0u;
  *(_OWORD *)(a2 + 8) = v25;
  long long v26 = v66;
  long long v66 = 0u;
  *(_OWORD *)(a2 + 24) = v26;
  long long v27 = v67;
  long long v67 = 0u;
  *(_OWORD *)(a2 + 40) = v27;
  long long v28 = v68;
  long long v68 = 0u;
  *(_OWORD *)(a2 + 56) = v28;
  uint64_t v29 = v69;
  *(_DWORD *)(a2 + 80) = v70;
  *(void *)(a2 + 72) = v29;
  *(unsigned char *)(a2 + 88) = 1;
  WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit((WebCore::SecurityPolicyViolationEventInit *)&v63, v30);
LABEL_37:
  if (v72)
  {
    uint64_t v31 = v71;
    uint64_t v71 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v18);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  if (v74)
  {
    uint64_t v32 = v73;
    int v73 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v18);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  if (v76)
  {
    uint64_t v33 = v75;
    long long v75 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v18);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  if (v78)
  {
    uint64_t v34 = v77;
    char v77 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v18);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  if (v80)
  {
    uint64_t v35 = v79;
    char v79 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v18);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  if (v82)
  {
    uint64_t v36 = v81;
    __int16 v81 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v18);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  if (v84)
  {
    uint64_t v37 = v83;
    char v83 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v18);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  if (v86)
  {
    uint64_t v38 = v85;
    unsigned int v85 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v18);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
}

void sub_19888BC98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,char a27,WTF::StringImpl *a28,char a29,WTF::StringImpl *a30,char a31)
{
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a29 && a28)
  {
    if (*(_DWORD *)a28 == 2) {
      WTF::StringImpl::destroy(a28, a2);
    }
    else {
      *(_DWORD *)a28 -= 2;
    }
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, a2);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  if (*(unsigned char *)(v32 - 160))
  {
    uint64_t v34 = *v31;
    *uint64_t v31 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, a2);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v32 - 144))
  {
    uint64_t v35 = v31[2];
    v31[2] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, a2);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v32 - 128))
  {
    uint64_t v36 = v31[4];
    v31[4] = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, a2);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v32 - 112))
  {
    uint64_t v37 = v31[6];
    v31[6] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, a2);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v32 - 96))
  {
    uint64_t v38 = v31[8];
    v31[8] = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, a2);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  return IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2, v5);
}

uint64_t IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v10) {
      __break(1u);
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v8);
    uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v6);
    a2[32] = 1;
    if (v7 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v7])(&v5, v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  if (v10)
  {
    if (v9 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v9])(v6, v8);
    }
  }
  return result;
}

void sub_19888BF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24)
{
  if (a17 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a17])(&a13, &a14);
  }
  if (a24)
  {
    if (a22 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a22])(&a14, &a19);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19888BFEC()
{
}

uint64_t *IPC::Decoder::decode<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19888C06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 32))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 24);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::SecurityOriginData::Tuple,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);

  return IPC::ArgumentCoder<std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>>,void>::encode<IPC::Encoder,std::optional<WTF::OptionSet<WebKit::WebExtensionMenuItemContextType>> const&>(a1, (uint64_t)(a2 + 2));
}

unint64_t IPC::Decoder::decode<std::optional<unsigned short>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      uint64_t v33 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        a1 = v33;
        uint64_t v18 = *v33;
        unint64_t v17 = v33[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_15;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
  {
    unint64_t v17 = v1;
    uint64_t v18 = 0;
LABEL_15:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20)
    {
      uint64_t v32 = a1;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        a1 = v32;
        uint64_t v2 = *v32;
        unint64_t v1 = v32[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    if (v6)
    {
      unint64_t v7 = ((v5 + 1) & 0xFFFFFFFFFFFFFFFELL) - v2;
      if (v1 < v7 || v1 - v7 <= 1)
      {
        *a1 = 0;
        a1[1] = 0;
        uint64_t v25 = a1[3];
        if (!v25)
        {
LABEL_25:
          int v14 = 0;
          uint64_t v12 = 0;
          uint64_t v11 = 0;
          uint64_t v13 = 0x10000;
          goto LABEL_12;
        }
        long long v26 = a1;
        (*(void (**)(void))(*(void *)v25 + 16))(a1[3]);
        int v14 = 0;
        uint64_t v27 = *v26;
        uint64_t v28 = v26[1];
        uint64_t v29 = v26[3];
        uint64_t v13 = 0x10000;
        *long long v26 = 0;
        v26[1] = 0;
        uint64_t v30 = v26;
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        if (v29)
        {
          a1 = v26;
          if (!v28) {
            goto LABEL_12;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
          a1 = v26;
          goto LABEL_25;
        }
        goto LABEL_20;
      }
      int v9 = (unsigned __int16 *)(v2 + v7);
      unsigned __int16 v10 = *v9;
      a1[2] = v9 + 1;
      uint64_t v11 = v10 & 0xFF00;
      uint64_t v12 = v10;
      uint64_t v13 = 0x10000;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v12 = 0;
      uint64_t v11 = 0;
    }
    int v14 = 1;
    goto LABEL_12;
  }
LABEL_16:
  int v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v21 = a1[3];
  if (v21)
  {
    uint64_t v30 = a1;
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v2);
    }
    int v14 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
LABEL_20:
    a1 = v30;
  }
LABEL_12:
  unint64_t v15 = (v12 | v13 | v11) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v14 & 1) << 32);
  if (!v14)
  {
    uint64_t v22 = *a1;
    uint64_t v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v24 = a1[3];
    if (v24)
    {
      if (v23)
      {
        unint64_t v31 = (v12 | v13 | v11) & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v14 & 1) << 32);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
        return v31;
      }
    }
  }
  return v15;
}

uint64_t IPC::Decoder::decode<std::optional<int>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<int>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

void WebCore::StringConstraint::~StringConstraint(WebCore::StringConstraint *this, void *a2)
{
  *(void *)this = &unk_1EE9B53F8;
  uint64_t v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);
}

{
  char *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9B53F8;
  uint64_t v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);

  JUMPOUT(0x199740C10);
}

uint64_t IPC::ArgumentCoder<WebCore::VideoPresetData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v9 = *(_DWORD *)a2;
  IPC::Encoder::operator<<<int>(a1, &v9);
  int v8 = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<int>(a1, &v8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 20));
  uint64_t v4 = *(unsigned int *)(a2 + 20);
  if (v4)
  {
    uint64_t v5 = *(double **)(a2 + 8);
    uint64_t v6 = &v5[2 * v4];
    do
    {
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *v5);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v5[1]);
      v5 += 2;
    }
    while (v5 != v6);
  }
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 32));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 40));
}

unsigned char *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSupportedConstraints,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v4 = *a2;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_39;
  }
  *uint64_t v5 = v4;
  char v7 = a2[1];
  int v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C7F8);
  }
  *int v8 = v7;
  char v10 = a2[2];
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C818);
  }
  *uint64_t v11 = v10;
  char v13 = a2[3];
  int v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C838);
  }
  *int v14 = v13;
  char v16 = a2[4];
  unint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C858);
  }
  *unint64_t v17 = v16;
  char v19 = a2[5];
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C878);
  }
  *uint64_t v20 = v19;
  char v22 = a2[6];
  uint64_t v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C898);
  }
  *uint64_t v23 = v22;
  char v25 = a2[7];
  long long v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C8B8);
  }
  *long long v26 = v25;
  char v28 = a2[8];
  uint64_t v29 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C8D8);
  }
  *uint64_t v29 = v28;
  char v31 = a2[9];
  uint64_t v32 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C8F8);
  }
  *uint64_t v32 = v31;
  char v34 = a2[10];
  uint64_t v35 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v36)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C918);
  }
  *uint64_t v35 = v34;
  char v37 = a2[11];
  uint64_t v38 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v39)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C938);
  }
  *uint64_t v38 = v37;
  char v40 = a2[12];
  uint64_t v41 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C958);
  }
  *uint64_t v41 = v40;
  char v43 = a2[13];
  char v44 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v45)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C978);
  }
  *char v44 = v43;
  char v46 = a2[14];
  unint64_t v47 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C998);
  }
  *unint64_t v47 = v46;
  char v49 = a2[15];
  uint64_t v50 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v51)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C9B8);
  }
  *uint64_t v50 = v49;
  char v52 = a2[16];
  uint64_t v53 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C9D8);
  }
  *uint64_t v53 = v52;
  char v55 = a2[17];
  uint64_t v56 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v57)
  {
    __break(0xC471u);
    JUMPOUT(0x19888C9F8);
  }
  *uint64_t v56 = v55;
  char v58 = a2[18];
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v60)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19888C7D8);
  }
  *uint64_t result = v58;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode(IPC::Encoder *a1, int *a2)
{
  float v4 = *(float *)a2;
  uint64_t v5 = (float *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    __break(0xC471u);
    goto LABEL_20;
  }
  *uint64_t v5 = v4;
  int v7 = a2[1];
  int v8 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v9 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19888CC24);
  }
  *int v8 = v7;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *((float *)a2 + 2));
  char v32 = *((unsigned char *)a2 + 12);
  IPC::Encoder::operator<<<BOOL>(a1, &v32);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)a2 + 2));
  int v10 = a2[6];
  uint64_t v11 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v12 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19888CC44);
  }
  *uint64_t v11 = v10;
  int v13 = a2[7];
  int v14 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v15 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19888CC64);
  }
  *int v14 = v13;
  char v16 = *((unsigned char *)a2 + 32);
  unint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x19888CC84);
  }
  *unint64_t v17 = v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2 + 7);
  char v33 = *((unsigned char *)a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v33);
  char v19 = *((unsigned char *)a2 + 65);
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x19888CCA4);
  }
  *uint64_t v20 = v19;
  char v34 = *((unsigned char *)a2 + 66);
  IPC::Encoder::operator<<<BOOL>(a1, &v34);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)a2 + 9));
  char v22 = *((unsigned char *)a2 + 80);
  uint64_t v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x19888CCC4);
  }
  *uint64_t v23 = v22;
  char v25 = *((unsigned char *)a2 + 81);
  long long v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x19888CCE4);
  }
  *long long v26 = v25;
  char v28 = *((unsigned char *)a2 + 82);
  uint64_t v29 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v30)
  {
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x19888CC04);
  }
  *uint64_t v29 = v28;
  return IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSupportedConstraints,void>::encode(a1, (char *)a2 + 83);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    int v8 = (int *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      int v129 = 0;
      int v9 = *v8;
      int v118 = v9;
      unsigned int v119 = v9 & 0xFFFFFF00;
      uint64_t v10 = v5;
      goto LABEL_8;
    }
    uint64_t v10 = v4;
    uint64_t v71 = 0;
    goto LABEL_107;
  }
  while (1)
  {
    uint64_t v10 = 0;
    uint64_t v71 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v72 = a1[3];
    if (v72)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v72 + 16))(v72);
        uint64_t v71 = *a1;
        uint64_t v10 = a1[1];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v71 = 0;
      }
    }
LABEL_107:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v73 = a1[3];
    if (!v73)
    {
      uint64_t v10 = 0;
LABEL_109:
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      int v118 = 0;
      unsigned int v119 = 0;
      int v129 = 1;
      goto LABEL_8;
    }
    if (!v10) {
      goto LABEL_109;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v71, v10);
    int v118 = 0;
    unsigned int v119 = 0;
    uint64_t v10 = *a1;
    unint64_t v4 = a1[1];
    int v129 = 1;
    uint64_t v5 = *a1;
LABEL_8:
    unint64_t v11 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
    if (v4 >= v11 && v4 - v11 > 3)
    {
      int v13 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v13 + 1);
      unint64_t v14 = v4;
      if (v5)
      {
        int v128 = 0;
        int v116 = *v13;
        unsigned int v117 = *v13 & 0xFFFFFF00;
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v10 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v74 = a1[3];
      if (v74)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v74 + 16))(v74);
          uint64_t v10 = *a1;
          unint64_t v14 = a1[1];
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v10 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v75 = a1[3];
    if (v75 && v14) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v75 + 16))(v75, v10, v14);
    }
    int v116 = 0;
    unsigned int v117 = 0;
    int v128 = 1;
LABEL_15:
    uint64_t v127 = IPC::Decoder::decode<float>(a1);
    unsigned __int16 v126 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(a1);
    unint64_t v15 = a1[1];
    uint64_t v16 = *a1;
    unint64_t v17 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v15 < v17 || v15 - v17 <= 7)
    {
      uint64_t v19 = 0;
      uint64_t v76 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v77 = a1[3];
      if (v77)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(void *)v77 + 16))(v77);
          uint64_t v76 = *a1;
          uint64_t v19 = a1[1];
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v76 = 0;
        }
      }
    }
    else
    {
      uint64_t v18 = (uint64_t *)(v16 + v17);
      a1[2] = (uint64_t)(v18 + 1);
      if (v16)
      {
        int v125 = 0;
        uint64_t v115 = *v18;
        uint64_t v19 = v16;
        goto LABEL_19;
      }
      uint64_t v19 = v15;
      uint64_t v76 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v78 = a1[3];
    if (v78)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v78 + 16))(v78, v76, v19);
        uint64_t v115 = 0;
        uint64_t v19 = *a1;
        unint64_t v15 = a1[1];
        int v125 = 1;
        uint64_t v16 = *a1;
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v115 = 0;
    int v125 = 1;
LABEL_19:
    unint64_t v20 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v16;
    if (v15 < v20 || v15 - v20 <= 3)
    {
      unint64_t v79 = 0;
      uint64_t v19 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v80 = a1[3];
      if (v80)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(void *)v80 + 16))(v80);
          uint64_t v19 = *a1;
          unint64_t v79 = a1[1];
        }
        else
        {
          unint64_t v79 = 0;
          uint64_t v19 = 0;
        }
      }
    }
    else
    {
      uint64_t v21 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v21 + 1);
      if (v16)
      {
        int v124 = 0;
        int v22 = *v21;
        LODWORD(v114) = v22;
        HIDWORD(v114) = v22 & 0xFFFFFF00;
        goto LABEL_23;
      }
      unint64_t v79 = v15;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v81 = a1[3];
    if (v81 && v79)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v81 + 16))(v81, v19, v79);
      uint64_t v114 = 0;
      uint64_t v19 = *a1;
      unint64_t v15 = a1[1];
      int v124 = 1;
      uint64_t v16 = *a1;
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v114 = 0;
      int v124 = 1;
    }
LABEL_23:
    unint64_t v23 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v16;
    if (v15 < v23 || v15 - v23 <= 3)
    {
      unint64_t v82 = 0;
      uint64_t v19 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v83 = a1[3];
      if (v83)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(void *)v83 + 16))(v83);
          uint64_t v19 = *a1;
          unint64_t v82 = a1[1];
        }
        else
        {
          unint64_t v82 = 0;
          uint64_t v19 = 0;
        }
      }
    }
    else
    {
      uint64_t v24 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      char v25 = v24 + 1;
      a1[2] = (uint64_t)(v24 + 1);
      if (v16)
      {
        int v123 = 0;
        int v113 = *v24;
        goto LABEL_27;
      }
      unint64_t v82 = v15;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v84 = a1[3];
    if (!v84 || !v82)
    {
      int v113 = 0;
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      int v123 = 1;
      goto LABEL_123;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v84 + 16))(v84, v19, v82);
    int v113 = 0;
    uint64_t v16 = *a1;
    unint64_t v15 = a1[1];
    char v25 = (_DWORD *)a1[2];
    int v123 = 1;
    uint64_t v19 = *a1;
LABEL_27:
    long long v26 = (char *)v25 - v16;
    if (v15 <= (unint64_t)v26)
    {
      uint64_t v19 = 0;
      uint64_t v105 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v105 && v15)
      {
        (*(void (**)(uint64_t))(*(void *)v105 + 16))(v105);
        uint64_t v16 = *a1;
        uint64_t v19 = a1[1];
      }
      else
      {
        uint64_t v16 = 0;
      }
LABEL_123:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v85 = a1[3];
      if (v85)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v85 + 16))(v85, v16, v19);
          unsigned int v28 = 0;
          uint64_t v19 = *a1;
          unint64_t v15 = a1[1];
          goto LABEL_126;
        }
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v19 = 0;
      }
      unsigned int v28 = 0;
      goto LABEL_126;
    }
    uint64_t v27 = &v26[v16];
    a1[2] = (uint64_t)(v27 + 1);
    if (!v16)
    {
      uint64_t v19 = v15;
      goto LABEL_123;
    }
    unsigned int v28 = *v27;
    if (v28 < 2)
    {
      int v29 = 0;
      char v30 = 1;
      goto LABEL_31;
    }
LABEL_126:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v86 = a1[3];
    if (v86 && v15) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v19);
    }
    char v30 = 0;
    int v29 = 1;
LABEL_31:
    char v31 = v28 ? v30 : 0;
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v136);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v134);
    int v122 = v29;
    char v112 = v31;
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v132);
    *(_WORD *)uint64_t v130 = 0;
    IPC::Decoder::operator>><unsigned char>(a1, v130);
    BOOL v32 = !v130[1] || v130[0] > 4u;
    BOOL v33 = v32;
    unint64_t v34 = a1[1];
    if (v33)
    {
      uint64_t v87 = *a1;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v88 = a1[3];
      if (!v88 || !v34)
      {
        char v111 = 0;
        unint64_t v34 = 0;
        uint64_t v35 = *a1;
LABEL_130:
        *a1 = 0;
        a1[1] = 0;
        uint64_t v89 = a1[3];
        if (v89)
        {
          if (v34)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v89 + 16))(v89, v35);
            uint64_t v90 = *a1;
            unint64_t v34 = a1[1];
          }
          else
          {
            uint64_t v90 = 0;
          }
        }
        else
        {
          uint64_t v90 = 0;
          unint64_t v34 = 0;
        }
        goto LABEL_132;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v88 + 16))(v88, v87);
      char v111 = 0;
      unint64_t v34 = a1[1];
    }
    else
    {
      char v111 = v130[0];
    }
    uint64_t v35 = *a1;
    unint64_t v36 = a1[2] - *a1;
    if (v34 <= v36) {
      goto LABEL_130;
    }
    char v37 = (unsigned __int8 *)(v35 + v36);
    a1[2] = (uint64_t)(v37 + 1);
    if (v35)
    {
      unsigned int v38 = *v37;
      if (v38 < 2)
      {
        int v121 = 0;
        char v39 = 1;
        goto LABEL_46;
      }
      goto LABEL_135;
    }
    uint64_t v90 = 0;
LABEL_132:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v91 = a1[3];
    if (!v91)
    {
      unint64_t v34 = 0;
LABEL_134:
      uint64_t v35 = 0;
      unsigned int v38 = 0;
      goto LABEL_135;
    }
    if (!v34) {
      goto LABEL_134;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 16))(v91, v90);
    unsigned int v38 = 0;
    uint64_t v35 = *a1;
    unint64_t v34 = a1[1];
LABEL_135:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v92 = a1[3];
    if (v92 && v34) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v92 + 16))(v92, v35);
    }
    char v39 = 0;
    int v121 = 1;
LABEL_46:
    if (!v38) {
      char v39 = 0;
    }
    char v110 = v39;
    unsigned __int16 v40 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a1);
    unint64_t v41 = a1[1];
    uint64_t v42 = *a1;
    unint64_t v43 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v41 < v43 || v41 - v43 <= 7)
    {
      unint64_t v93 = 0;
      uint64_t v94 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v95 = a1[3];
      if (v95)
      {
        if (v41)
        {
          (*(void (**)(uint64_t))(*(void *)v95 + 16))(v95);
          uint64_t v94 = *a1;
          unint64_t v93 = a1[1];
        }
        else
        {
          unint64_t v93 = 0;
          uint64_t v94 = 0;
        }
      }
    }
    else
    {
      char v44 = (uint64_t *)(v42 + v43);
      uint64_t v45 = v42 + v43 + 8;
      a1[2] = v45;
      if (v42)
      {
        int v120 = 0;
        uint64_t v109 = *v44;
        goto LABEL_52;
      }
      unint64_t v93 = v41;
      uint64_t v94 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v96 = a1[3];
    if (!v96)
    {
      uint64_t v109 = 0;
      unint64_t v93 = 0;
LABEL_144:
      uint64_t v42 = 0;
      int v120 = 1;
LABEL_145:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v97 = a1[3];
      if (v97 && v93)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v97 + 16))(v97, v42, v93);
        unsigned int v49 = 0;
        uint64_t v42 = *a1;
        unint64_t v41 = a1[1];
      }
      else
      {
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        unsigned int v49 = 0;
      }
      goto LABEL_147;
    }
    if (!v93)
    {
      uint64_t v109 = 0;
      goto LABEL_144;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v96 + 16))(v96, v94, v93);
    uint64_t v109 = 0;
    uint64_t v42 = *a1;
    unint64_t v41 = a1[1];
    int v120 = 1;
    uint64_t v45 = a1[2];
LABEL_52:
    unint64_t v46 = v45 - v42;
    if (v41 <= v46)
    {
      unint64_t v93 = 0;
      uint64_t v106 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v106 && v41)
      {
        (*(void (**)(uint64_t))(*(void *)v106 + 16))(v106);
        uint64_t v42 = *a1;
        unint64_t v93 = a1[1];
      }
      else
      {
        uint64_t v42 = 0;
      }
      goto LABEL_145;
    }
    unint64_t v47 = (unsigned __int8 *)(v42 + v46);
    uint64_t v48 = v42 + v46 + 1;
    a1[2] = v48;
    if (!v42)
    {
      unint64_t v93 = v41;
      goto LABEL_145;
    }
    unsigned int v49 = *v47;
    if (v49 < 2)
    {
      int v50 = 0;
      char v51 = 1;
      goto LABEL_56;
    }
LABEL_147:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v98 = a1[3];
    if (!v98 || !v41)
    {
      char v52 = 0;
      unint64_t v99 = 0;
      uint64_t v42 = 0;
      int v50 = 1;
LABEL_149:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v100 = a1[3];
      if (v100 && v99)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v100 + 16))(v100, v42, v99);
        unsigned int v56 = 0;
        uint64_t v42 = *a1;
        unint64_t v41 = a1[1];
      }
      else
      {
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        unsigned int v56 = 0;
      }
      goto LABEL_151;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v98 + 16))(v98, v42);
    char v51 = 0;
    uint64_t v42 = *a1;
    unint64_t v41 = a1[1];
    int v50 = 1;
    uint64_t v48 = a1[2];
LABEL_56:
    if (v49) {
      char v52 = v51;
    }
    else {
      char v52 = 0;
    }
    unint64_t v53 = v48 - v42;
    if (v41 <= v53)
    {
      unint64_t v99 = 0;
      uint64_t v107 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v107 && v41)
      {
        (*(void (**)(uint64_t))(*(void *)v107 + 16))(v107);
        uint64_t v42 = *a1;
        unint64_t v99 = a1[1];
      }
      else
      {
        uint64_t v42 = 0;
      }
      goto LABEL_149;
    }
    uint64_t v54 = (unsigned __int8 *)(v42 + v53);
    uint64_t v55 = v42 + v53 + 1;
    a1[2] = v55;
    if (!v42)
    {
      unint64_t v99 = v41;
      goto LABEL_149;
    }
    unsigned int v56 = *v54;
    if (v56 < 2)
    {
      int v57 = 0;
      char v58 = 1;
      goto LABEL_63;
    }
LABEL_151:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v101 = a1[3];
    if (!v101 || !v41)
    {
      char v59 = 0;
      unint64_t v102 = 0;
      uint64_t v42 = 0;
      int v57 = 1;
LABEL_153:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v103 = a1[3];
      if (v103 && v102)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v103 + 16))(v103, v42, v102);
        unsigned int v62 = 0;
        uint64_t v42 = *a1;
        unint64_t v41 = a1[1];
      }
      else
      {
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        unsigned int v62 = 0;
      }
      goto LABEL_155;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v101 + 16))(v101, v42);
    char v58 = 0;
    uint64_t v42 = *a1;
    unint64_t v41 = a1[1];
    int v57 = 1;
    uint64_t v55 = a1[2];
LABEL_63:
    if (v56) {
      char v59 = v58;
    }
    else {
      char v59 = 0;
    }
    unint64_t v60 = v55 - v42;
    if (v41 <= v60)
    {
      unint64_t v102 = 0;
      uint64_t v108 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v108 && v41)
      {
        (*(void (**)(uint64_t))(*(void *)v108 + 16))(v108);
        uint64_t v42 = *a1;
        unint64_t v102 = a1[1];
      }
      else
      {
        uint64_t v42 = 0;
      }
      goto LABEL_153;
    }
    int v61 = (unsigned __int8 *)(v42 + v60);
    a1[2] = (uint64_t)(v61 + 1);
    if (!v42)
    {
      unint64_t v102 = v41;
      goto LABEL_153;
    }
    unsigned int v62 = *v61;
    if (v62 < 2)
    {
      int v63 = 0;
      char v64 = 1;
      goto LABEL_70;
    }
LABEL_155:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v104 = a1[3];
    if (v104 && v41) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v104 + 16))(v104, v42);
    }
    char v64 = 0;
    int v63 = 1;
LABEL_70:
    char v65 = v62 ? v64 : 0;
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::RealtimeMediaSourceSupportedConstraints>(v130, a1);
    if (!*a1) {
      break;
    }
    if (!v129
      && !v128
      && (v127 & 0xFF00000000) != 0
      && v126 > 0xFFu
      && !v125
      && !v124
      && !v123
      && !v122
      && v137
      && v135
      && v133
      && !v33
      && !v121
      && v40 > 0xFFu
      && !v120
      && !v50
      && !v57
      && !v63
      && v131)
    {
      long long v68 = v136;
      uint64_t v136 = 0;
      uint64_t v69 = v134;
      unint64_t v134 = 0;
      int v70 = v132;
      uint64_t v132 = 0;
      *(_DWORD *)a2 = v118 | v119;
      *(_DWORD *)(a2 + 4) = v116 | v117;
      *(_DWORD *)(a2 + 8) = v127;
      *(unsigned char *)(a2 + 12) = v126;
      *(void *)(a2 + 16) = v115;
      *(_DWORD *)(a2 + 24) = v114 | HIDWORD(v114);
      *(_DWORD *)(a2 + 28) = v113;
      *(unsigned char *)(a2 + 32) = v112;
      *(void *)(a2 + 40) = v68;
      *(void *)(a2 + 48) = v69;
      *(void *)(a2 + 56) = v70;
      *(unsigned char *)(a2 + 64) = v111;
      *(unsigned char *)(a2 + 65) = v110;
      *(unsigned char *)(a2 + 66) = v40;
      *(void *)(a2 + 72) = v109;
      *(unsigned char *)(a2 + 80) = v52;
      *(unsigned char *)(a2 + 81) = v59;
      *(unsigned char *)(a2 + 82) = v65;
      *(_OWORD *)(a2 + 83) = *(_OWORD *)v130;
      *(_DWORD *)(a2 + 98) = *(_DWORD *)&v130[15];
      *(unsigned char *)(a2 + 104) = 1;
      goto LABEL_94;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 104) = 0;
  if (v133)
  {
    uint64_t result = v132;
    uint64_t v132 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v67);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_94:
  if (v135)
  {
    uint64_t result = v134;
    unint64_t v134 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v67);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v137)
  {
    uint64_t result = v136;
    uint64_t v136 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v67);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19888DBF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,char a27)
{
  if (a27 && a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (*(unsigned char *)(v27 - 112))
  {
    int v29 = *(WTF::StringImpl **)(v27 - 120);
    *(void *)(v27 - 120) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, a2);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v27 - 96))
  {
    char v30 = *(WTF::StringImpl **)(v27 - 104);
    *(void *)(v27 - 104) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, a2);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::Decoder::decode<WebCore::RealtimeMediaSourceSupportedConstraints>(char *result, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a2[2];
  uint64_t v4 = *a2;
  unint64_t v5 = v2[1];
  unint64_t v6 = v3 - v4;
  if (v5 <= v6)
  {
    unint64_t v142 = 0;
    uint64_t v143 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v144 = v2[3];
    if (v144)
    {
      v540 = v2;
      v541 = result;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v144 + 16))(v144);
        uint64_t v2 = v540;
        uint64_t v143 = *v540;
        unint64_t v142 = v540[1];
        uint64_t result = v541;
      }
      else
      {
        unint64_t v142 = 0;
        uint64_t v143 = 0;
      }
    }
    goto LABEL_150;
  }
  int v7 = (unsigned __int8 *)(v4 + v6);
  uint64_t v8 = v4 + v6 + 1;
  v2[2] = v8;
  if (!v4)
  {
    unint64_t v142 = v5;
    uint64_t v143 = 0;
LABEL_150:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v145 = v2[3];
    if (v145)
    {
      v538 = v2;
      v539 = result;
      if (v142)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v145 + 16))(v145, v143, v142);
        unsigned int v9 = 0;
        uint64_t v2 = v538;
        uint64_t v4 = *v538;
        unint64_t v5 = v538[1];
        uint64_t result = v539;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v9 = 0;
      }
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v9 = 0;
    }
    goto LABEL_152;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
LABEL_152:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v146 = v2[3];
  if (!v146)
  {
    char v12 = 0;
    uint64_t v4 = 0;
    int v10 = 1;
    goto LABEL_154;
  }
  v536 = v2;
  v537 = result;
  if (!v5)
  {
    char v12 = 0;
    unint64_t v146 = 0;
    uint64_t v4 = 0;
    int v10 = 1;
LABEL_154:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v147 = v2[3];
    if (v147)
    {
      int v532 = v10;
      char v533 = v12;
      v534 = v2;
      v535 = result;
      if (v146)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v147 + 16))(v147, v4, v146);
        unsigned int v16 = 0;
        uint64_t v2 = v534;
        uint64_t v4 = *v534;
        unint64_t v5 = v534[1];
        uint64_t result = v535;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v16 = 0;
      }
      char v12 = v533;
      int v10 = v532;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v16 = 0;
    }
    goto LABEL_156;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v146 + 16))(v146, v4);
  char v11 = 0;
  uint64_t v2 = v536;
  uint64_t v4 = *v536;
  unint64_t v5 = v536[1];
  int v10 = 1;
  uint64_t v8 = v536[2];
  uint64_t result = v537;
LABEL_5:
  if (v9) {
    char v12 = v11;
  }
  else {
    char v12 = 0;
  }
  unint64_t v13 = v8 - v4;
  if (v5 <= v13)
  {
    int v180 = v10;
    char v181 = v12;
    v182 = result;
    unint64_t v146 = 0;
    uint64_t v183 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v184 = v2;
    if (v5 && v183)
    {
      (*(void (**)(uint64_t))(*(void *)v183 + 16))(v183);
      uint64_t v2 = v184;
      uint64_t v4 = *v184;
      unint64_t v146 = v184[1];
      uint64_t result = v182;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v182;
    }
    char v12 = v181;
    int v10 = v180;
    goto LABEL_154;
  }
  unint64_t v14 = (unsigned __int8 *)(v4 + v13);
  uint64_t v15 = v4 + v13 + 1;
  v2[2] = v15;
  if (!v4)
  {
    unint64_t v146 = v5;
    goto LABEL_154;
  }
  unsigned int v16 = *v14;
  if (v16 < 2)
  {
    int v17 = 0;
    char v18 = 1;
    goto LABEL_12;
  }
LABEL_156:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v148 = v2[3];
  if (!v148)
  {
    char v19 = 0;
    uint64_t v4 = 0;
    int v17 = 1;
    goto LABEL_158;
  }
  int v528 = v10;
  char v529 = v12;
  v530 = v2;
  v531 = result;
  if (!v5)
  {
    char v19 = 0;
    unint64_t v148 = 0;
    uint64_t v4 = 0;
    int v17 = 1;
LABEL_158:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v149 = v2[3];
    if (v149)
    {
      int v522 = v17;
      char v523 = v19;
      int v524 = v10;
      char v525 = v12;
      v526 = v2;
      v527 = result;
      if (v148)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v149 + 16))(v149, v4, v148);
        unsigned int v23 = 0;
        uint64_t v2 = v526;
        uint64_t v4 = *v526;
        unint64_t v5 = v526[1];
        uint64_t result = v527;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v23 = 0;
      }
      char v12 = v525;
      int v10 = v524;
      char v19 = v523;
      int v17 = v522;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v23 = 0;
    }
    goto LABEL_160;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v148 + 16))(v148, v4);
  char v18 = 0;
  uint64_t v2 = v530;
  uint64_t v4 = *v530;
  unint64_t v5 = v530[1];
  int v17 = 1;
  uint64_t v15 = v530[2];
  uint64_t result = v531;
  char v12 = v529;
  int v10 = v528;
LABEL_12:
  if (v16) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  unint64_t v20 = v15 - v4;
  if (v5 <= v20)
  {
    int v185 = v17;
    char v186 = v19;
    int v187 = v10;
    char v188 = v12;
    v189 = result;
    unint64_t v148 = 0;
    uint64_t v190 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v191 = v2;
    if (v5 && v190)
    {
      (*(void (**)(uint64_t))(*(void *)v190 + 16))(v190);
      uint64_t v2 = v191;
      uint64_t v4 = *v191;
      unint64_t v148 = v191[1];
      uint64_t result = v189;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v189;
    }
    char v12 = v188;
    int v10 = v187;
    char v19 = v186;
    int v17 = v185;
    goto LABEL_158;
  }
  uint64_t v21 = (unsigned __int8 *)(v4 + v20);
  uint64_t v22 = v4 + v20 + 1;
  v2[2] = v22;
  if (!v4)
  {
    unint64_t v148 = v5;
    goto LABEL_158;
  }
  unsigned int v23 = *v21;
  if (v23 < 2)
  {
    uint64_t v24 = 0;
    char v25 = 1;
    goto LABEL_19;
  }
LABEL_160:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v150 = v2[3];
  if (!v150)
  {
    char v26 = 0;
    uint64_t v4 = 0;
    uint64_t v24 = 1;
    goto LABEL_162;
  }
  int v516 = v17;
  char v517 = v19;
  int v518 = v10;
  char v519 = v12;
  v520 = v2;
  v521 = result;
  if (!v5)
  {
    unint64_t v150 = 0;
    uint64_t v4 = 0;
    char v26 = 0;
    uint64_t v24 = 1;
LABEL_162:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v151 = v2[3];
    if (v151)
    {
      uint64_t v508 = v24;
      char v509 = v26;
      int v510 = v17;
      char v511 = v19;
      int v512 = v10;
      char v513 = v12;
      v514 = v2;
      v515 = result;
      if (v150)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v151 + 16))(v151, v4, v150);
        unsigned int v30 = 0;
        uint64_t v2 = v514;
        uint64_t v4 = *v514;
        unint64_t v5 = v514[1];
        uint64_t result = v515;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v30 = 0;
      }
      char v12 = v513;
      int v10 = v512;
      char v19 = v511;
      int v17 = v510;
      char v26 = v509;
      uint64_t v24 = v508;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v30 = 0;
    }
    goto LABEL_164;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v150 + 16))(v150, v4);
  char v25 = 0;
  uint64_t v2 = v520;
  uint64_t v4 = *v520;
  unint64_t v5 = v520[1];
  uint64_t v24 = 1;
  uint64_t v22 = v2[2];
  uint64_t result = v521;
  char v12 = v519;
  int v10 = v518;
  char v19 = v517;
  int v17 = v516;
LABEL_19:
  if (v23) {
    char v26 = v25;
  }
  else {
    char v26 = 0;
  }
  unint64_t v27 = v22 - v4;
  if (v5 <= v27)
  {
    uint64_t v192 = v24;
    char v193 = v26;
    int v194 = v17;
    char v195 = v19;
    int v196 = v10;
    char v197 = v12;
    v198 = result;
    unint64_t v150 = 0;
    uint64_t v199 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v200 = v2;
    if (v5 && v199)
    {
      (*(void (**)(uint64_t))(*(void *)v199 + 16))(v199);
      uint64_t v2 = v200;
      uint64_t v4 = *v200;
      unint64_t v150 = v200[1];
      uint64_t result = v198;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v198;
    }
    char v12 = v197;
    int v10 = v196;
    char v19 = v195;
    int v17 = v194;
    char v26 = v193;
    uint64_t v24 = v192;
    goto LABEL_162;
  }
  unsigned int v28 = (unsigned __int8 *)(v4 + v27);
  uint64_t v29 = v4 + v27 + 1;
  v2[2] = v29;
  if (!v4)
  {
    unint64_t v150 = v5;
    goto LABEL_162;
  }
  unsigned int v30 = *v28;
  if (v30 < 2)
  {
    int v31 = 0;
    char v32 = 1;
    goto LABEL_26;
  }
LABEL_164:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v152 = v2[3];
  if (!v152)
  {
    char v33 = 0;
    uint64_t v4 = 0;
    int v31 = 1;
    goto LABEL_166;
  }
  uint64_t v500 = v24;
  char v501 = v26;
  int v502 = v17;
  char v503 = v19;
  int v504 = v10;
  char v505 = v12;
  v506 = v2;
  v507 = result;
  if (!v5)
  {
    char v33 = 0;
    unint64_t v152 = 0;
    uint64_t v4 = 0;
    int v31 = 1;
    char v26 = v501;
    uint64_t v24 = v500;
LABEL_166:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v153 = v2[3];
    if (v153)
    {
      int v924 = v31;
      char v492 = v33;
      uint64_t v493 = v24;
      int v494 = v17;
      char v495 = v19;
      int v496 = v10;
      char v497 = v12;
      v498 = v2;
      v499 = result;
      if (v152)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v153 + 16))(v153, v4, v152);
        unsigned int v37 = 0;
        uint64_t v2 = v498;
        uint64_t v4 = *v498;
        unint64_t v5 = v498[1];
        uint64_t result = v499;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v37 = 0;
      }
      char v12 = v497;
      int v10 = v496;
      char v19 = v495;
      int v17 = v494;
      uint64_t v24 = v493;
      char v33 = v492;
      int v31 = v924;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v37 = 0;
    }
    goto LABEL_168;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v152 + 16))(v152, v4);
  char v32 = 0;
  uint64_t v2 = v506;
  uint64_t v4 = *v506;
  unint64_t v5 = v506[1];
  int v31 = 1;
  uint64_t v29 = v506[2];
  uint64_t result = v507;
  char v12 = v505;
  int v10 = v504;
  char v19 = v503;
  int v17 = v502;
  char v26 = v501;
  uint64_t v24 = v500;
LABEL_26:
  if (v30) {
    char v33 = v32;
  }
  else {
    char v33 = 0;
  }
  unint64_t v34 = v29 - v4;
  if (v5 <= v34)
  {
    int v201 = v31;
    char v202 = v33;
    uint64_t v203 = v24;
    int v204 = v17;
    char v205 = v19;
    int v206 = v10;
    char v207 = v12;
    v208 = result;
    unint64_t v152 = 0;
    uint64_t v209 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v210 = v2;
    if (v5 && v209)
    {
      (*(void (**)(uint64_t))(*(void *)v209 + 16))(v209);
      uint64_t v2 = v210;
      uint64_t v4 = *v210;
      unint64_t v152 = v210[1];
      uint64_t result = v208;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v208;
    }
    char v12 = v207;
    int v10 = v206;
    char v19 = v205;
    int v17 = v204;
    uint64_t v24 = v203;
    char v33 = v202;
    int v31 = v201;
    goto LABEL_166;
  }
  uint64_t v35 = (unsigned __int8 *)(v4 + v34);
  uint64_t v36 = v4 + v34 + 1;
  v2[2] = v36;
  if (!v4)
  {
    unint64_t v152 = v5;
    goto LABEL_166;
  }
  unsigned int v37 = *v35;
  if (v37 < 2)
  {
    int v38 = 0;
    char v39 = 1;
    goto LABEL_33;
  }
LABEL_168:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v154 = v2[3];
  if (!v154)
  {
    char v40 = 0;
    uint64_t v4 = 0;
    int v38 = 1;
    goto LABEL_170;
  }
  int v923 = v31;
  char v484 = v33;
  uint64_t v485 = v24;
  int v486 = v17;
  char v487 = v19;
  int v488 = v10;
  char v489 = v12;
  v490 = v2;
  v491 = result;
  if (!v5)
  {
    unint64_t v154 = 0;
    uint64_t v4 = 0;
    int v38 = 1;
    uint64_t v24 = v485;
    char v40 = 0;
LABEL_170:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v155 = v2[3];
    if (v155)
    {
      char v885 = v40;
      int v922 = v31;
      int v746 = v38;
      char v475 = v26;
      char v476 = v33;
      uint64_t v477 = v24;
      int v478 = v17;
      char v479 = v19;
      int v480 = v10;
      char v481 = v12;
      v482 = v2;
      v483 = result;
      if (v154)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v155 + 16))(v155, v4, v154);
        unsigned int v44 = 0;
        uint64_t v2 = v482;
        uint64_t v4 = *v482;
        unint64_t v5 = v482[1];
        uint64_t result = v483;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v44 = 0;
      }
      char v12 = v481;
      int v10 = v480;
      char v19 = v479;
      int v17 = v478;
      uint64_t v24 = v477;
      char v33 = v476;
      char v26 = v475;
      char v40 = v885;
      int v31 = v922;
      int v38 = v746;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v44 = 0;
    }
    goto LABEL_172;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v154 + 16))(v154, v4);
  char v39 = 0;
  uint64_t v2 = v490;
  uint64_t v4 = *v490;
  unint64_t v5 = v490[1];
  int v38 = 1;
  uint64_t v36 = v490[2];
  uint64_t result = v491;
  char v12 = v489;
  int v10 = v488;
  char v19 = v487;
  int v17 = v486;
  uint64_t v24 = v485;
  char v33 = v484;
  int v31 = v923;
LABEL_33:
  if (v37) {
    char v40 = v39;
  }
  else {
    char v40 = 0;
  }
  unint64_t v41 = v36 - v4;
  if (v5 <= v41)
  {
    char v852 = v40;
    int v886 = v31;
    int v211 = v38;
    char v212 = v33;
    uint64_t v213 = v24;
    char v214 = v26;
    int v215 = v17;
    char v216 = v19;
    int v217 = v10;
    char v218 = v12;
    v219 = result;
    unint64_t v154 = 0;
    uint64_t v220 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v221 = v2;
    if (v5 && v220)
    {
      (*(void (**)(uint64_t))(*(void *)v220 + 16))(v220);
      uint64_t v2 = v221;
      uint64_t v4 = *v221;
      unint64_t v154 = v221[1];
      uint64_t result = v219;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v219;
    }
    char v12 = v218;
    int v10 = v217;
    char v19 = v216;
    int v17 = v215;
    char v26 = v214;
    uint64_t v24 = v213;
    char v33 = v212;
    char v40 = v852;
    int v31 = v886;
    int v38 = v211;
    goto LABEL_170;
  }
  uint64_t v42 = (unsigned __int8 *)(v4 + v41);
  uint64_t v43 = v4 + v41 + 1;
  v2[2] = v43;
  if (!v4)
  {
    unint64_t v154 = v5;
    goto LABEL_170;
  }
  unsigned int v44 = *v42;
  if (v44 < 2)
  {
    int v45 = 0;
    char v46 = 1;
    goto LABEL_40;
  }
LABEL_172:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v156 = v2[3];
  if (!v156)
  {
    char v47 = 0;
    uint64_t v4 = 0;
    int v45 = 1;
    goto LABEL_174;
  }
  char v884 = v40;
  int v921 = v31;
  int v745 = v38;
  char v466 = v26;
  char v467 = v33;
  uint64_t v468 = v24;
  int v469 = v17;
  char v470 = v19;
  int v471 = v10;
  char v472 = v12;
  v473 = v2;
  v474 = result;
  if (!v5)
  {
    unint64_t v156 = 0;
    uint64_t v4 = 0;
    char v47 = 0;
    uint64_t v24 = v468;
    char v26 = v466;
    int v45 = 1;
    char v40 = v884;
LABEL_174:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v157 = v2[3];
    if (v157)
    {
      int v824 = v45;
      char v851 = v47;
      char v883 = v40;
      int v920 = v31;
      int v744 = v38;
      char v458 = v33;
      char v459 = v26;
      int v460 = v17;
      char v461 = v19;
      int v462 = v10;
      char v463 = v12;
      v464 = v2;
      v465 = result;
      if (v156)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v157 + 16))(v157, v4, v156);
        unsigned int v51 = 0;
        uint64_t v2 = v464;
        uint64_t v4 = *v464;
        unint64_t v5 = v464[1];
        uint64_t result = v465;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v51 = 0;
      }
      char v12 = v463;
      int v10 = v462;
      char v19 = v461;
      int v17 = v460;
      char v26 = v459;
      char v33 = v458;
      char v40 = v883;
      int v31 = v920;
      int v38 = v744;
      int v45 = v824;
      char v47 = v851;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v51 = 0;
    }
    goto LABEL_176;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v156 + 16))(v156, v4);
  char v46 = 0;
  uint64_t v2 = v473;
  uint64_t v4 = *v473;
  unint64_t v5 = v473[1];
  uint64_t v43 = v473[2];
  uint64_t result = v474;
  char v12 = v472;
  int v10 = v471;
  char v19 = v470;
  int v17 = v469;
  uint64_t v24 = v468;
  char v33 = v467;
  char v26 = v466;
  int v45 = 1;
  char v40 = v884;
  int v31 = v921;
  int v38 = v745;
LABEL_40:
  if (v44) {
    char v47 = v46;
  }
  else {
    char v47 = 0;
  }
  unint64_t v48 = v43 - v4;
  if (v5 <= v48)
  {
    int v799 = v45;
    char v825 = v47;
    char v853 = v40;
    int v887 = v31;
    int v222 = v38;
    uint64_t v223 = v24;
    char v224 = v33;
    char v225 = v26;
    uint64_t v226 = v223;
    int v227 = v17;
    char v228 = v19;
    int v229 = v10;
    char v230 = v12;
    v231 = result;
    unint64_t v156 = 0;
    uint64_t v232 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v233 = v2;
    if (v5 && v232)
    {
      (*(void (**)(uint64_t))(*(void *)v232 + 16))(v232);
      uint64_t v2 = v233;
      uint64_t v4 = *v233;
      unint64_t v156 = v233[1];
      uint64_t result = v231;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v231;
    }
    char v12 = v230;
    int v10 = v229;
    char v19 = v228;
    int v17 = v227;
    uint64_t v234 = v226;
    char v26 = v225;
    char v33 = v224;
    uint64_t v24 = v234;
    char v40 = v853;
    int v31 = v887;
    int v38 = v222;
    int v45 = v799;
    char v47 = v825;
    goto LABEL_174;
  }
  unsigned int v49 = (unsigned __int8 *)(v4 + v48);
  uint64_t v50 = v4 + v48 + 1;
  v2[2] = v50;
  if (!v4)
  {
    unint64_t v156 = v5;
    goto LABEL_174;
  }
  unsigned int v51 = *v49;
  if (v51 < 2)
  {
    int v52 = 0;
    char v53 = 1;
    goto LABEL_47;
  }
LABEL_176:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v158 = v2[3];
  if (!v158)
  {
    char v54 = 0;
    uint64_t v4 = 0;
    int v52 = 1;
    goto LABEL_178;
  }
  int v823 = v45;
  char v850 = v47;
  char v882 = v40;
  int v919 = v31;
  int v743 = v38;
  char v450 = v33;
  char v451 = v26;
  int v452 = v17;
  char v453 = v19;
  int v454 = v10;
  char v455 = v12;
  v456 = v2;
  v457 = result;
  if (!v5)
  {
    char v54 = 0;
    unint64_t v158 = 0;
    uint64_t v4 = 0;
    int v52 = 1;
    char v26 = v451;
    char v40 = v882;
    int v45 = v823;
    char v47 = v850;
LABEL_178:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v159 = v2[3];
    if (v159)
    {
      int v767 = v52;
      char v798 = v54;
      int v822 = v45;
      char v849 = v47;
      char v881 = v40;
      int v918 = v31;
      int v742 = v38;
      char v441 = v33;
      uint64_t v442 = v24;
      char v443 = v26;
      int v444 = v17;
      char v445 = v19;
      int v446 = v10;
      char v447 = v12;
      v448 = v2;
      v449 = result;
      if (v158)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v159 + 16))(v159, v4, v158);
        unsigned int v58 = 0;
        uint64_t v2 = v448;
        uint64_t v4 = *v448;
        unint64_t v5 = v448[1];
        uint64_t result = v449;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v58 = 0;
      }
      char v12 = v447;
      int v10 = v446;
      char v19 = v445;
      int v17 = v444;
      char v26 = v443;
      uint64_t v24 = v442;
      char v33 = v441;
      char v40 = v881;
      int v31 = v918;
      int v38 = v742;
      int v52 = v767;
      int v45 = v822;
      char v47 = v849;
      char v54 = v798;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v58 = 0;
    }
    goto LABEL_180;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v158 + 16))(v158, v4);
  char v53 = 0;
  uint64_t v2 = v456;
  uint64_t v4 = *v456;
  unint64_t v5 = v456[1];
  uint64_t v50 = v456[2];
  uint64_t result = v457;
  char v12 = v455;
  int v10 = v454;
  char v19 = v453;
  int v17 = v452;
  int v52 = 1;
  char v26 = v451;
  char v33 = v450;
  char v40 = v882;
  int v31 = v919;
  int v38 = v743;
  int v45 = v823;
  char v47 = v850;
LABEL_47:
  if (v51) {
    char v54 = v53;
  }
  else {
    char v54 = 0;
  }
  unint64_t v55 = v50 - v4;
  if (v5 <= v55)
  {
    int v747 = v52;
    char v768 = v54;
    int v800 = v45;
    char v826 = v47;
    char v854 = v40;
    int v888 = v31;
    uint64_t v235 = v24;
    int v236 = v38;
    char v237 = v33;
    char v238 = v26;
    int v239 = v17;
    char v240 = v19;
    int v241 = v10;
    char v242 = v12;
    v243 = result;
    unint64_t v158 = 0;
    uint64_t v244 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v245 = v2;
    if (v5 && v244)
    {
      (*(void (**)(uint64_t))(*(void *)v244 + 16))(v244);
      uint64_t v2 = v245;
      uint64_t v4 = *v245;
      unint64_t v158 = v245[1];
      uint64_t result = v243;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v243;
    }
    char v12 = v242;
    int v10 = v241;
    char v19 = v240;
    int v17 = v239;
    char v26 = v238;
    char v33 = v237;
    char v40 = v854;
    int v31 = v888;
    int v38 = v236;
    uint64_t v24 = v235;
    int v45 = v800;
    char v47 = v826;
    int v52 = v747;
    char v54 = v768;
    goto LABEL_178;
  }
  unsigned int v56 = (unsigned __int8 *)(v4 + v55);
  uint64_t v57 = v4 + v55 + 1;
  v2[2] = v57;
  if (!v4)
  {
    unint64_t v158 = v5;
    goto LABEL_178;
  }
  unsigned int v58 = *v56;
  if (v58 < 2)
  {
    int v59 = 0;
    char v60 = 1;
    goto LABEL_54;
  }
LABEL_180:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v160 = v2[3];
  if (!v160)
  {
    char v61 = 0;
    uint64_t v4 = 0;
    int v59 = 1;
    goto LABEL_182;
  }
  int v766 = v52;
  char v797 = v54;
  int v821 = v45;
  char v848 = v47;
  char v880 = v40;
  int v917 = v31;
  int v741 = v38;
  char v432 = v33;
  uint64_t v433 = v24;
  char v434 = v26;
  int v435 = v17;
  char v436 = v19;
  int v437 = v10;
  char v438 = v12;
  v439 = v2;
  v440 = result;
  if (!v5)
  {
    unint64_t v160 = 0;
    uint64_t v4 = 0;
    int v59 = 1;
    char v61 = 0;
    char v26 = v434;
    uint64_t v24 = v433;
    char v40 = v880;
    int v52 = v766;
    int v45 = v821;
    char v47 = v848;
LABEL_182:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v161 = v2[3];
    if (v161)
    {
      int v694 = v59;
      char v716 = v61;
      int v765 = v52;
      char v796 = v54;
      int v820 = v45;
      char v847 = v47;
      char v879 = v40;
      int v916 = v31;
      int v740 = v38;
      char v423 = v33;
      uint64_t v424 = v24;
      char v425 = v26;
      int v426 = v17;
      char v427 = v19;
      int v428 = v10;
      char v429 = v12;
      v430 = v2;
      v431 = result;
      if (v160)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v161 + 16))(v161, v4, v160);
        unsigned int v65 = 0;
        uint64_t v2 = v430;
        uint64_t v4 = *v430;
        unint64_t v5 = v430[1];
        uint64_t result = v431;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v65 = 0;
      }
      char v12 = v429;
      int v10 = v428;
      char v19 = v427;
      int v17 = v426;
      char v26 = v425;
      uint64_t v24 = v424;
      char v33 = v423;
      char v40 = v879;
      int v31 = v916;
      int v38 = v740;
      int v52 = v765;
      int v45 = v820;
      char v47 = v847;
      char v54 = v796;
      int v59 = v694;
      char v61 = v716;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v65 = 0;
    }
    goto LABEL_184;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v160 + 16))(v160, v4);
  char v60 = 0;
  uint64_t v2 = v439;
  uint64_t v4 = *v439;
  unint64_t v5 = v439[1];
  int v59 = 1;
  uint64_t v57 = v439[2];
  uint64_t result = v440;
  char v12 = v438;
  int v10 = v437;
  char v19 = v436;
  int v17 = v435;
  char v26 = v434;
  uint64_t v24 = v433;
  char v33 = v432;
  char v40 = v880;
  int v31 = v917;
  int v38 = v741;
  int v52 = v766;
  int v45 = v821;
  char v47 = v848;
  char v54 = v797;
LABEL_54:
  if (v58) {
    char v61 = v60;
  }
  else {
    char v61 = 0;
  }
  unint64_t v62 = v57 - v4;
  if (v5 <= v62)
  {
    int v667 = v59;
    char v695 = v61;
    int v748 = v52;
    char v769 = v54;
    int v801 = v45;
    char v827 = v47;
    char v855 = v40;
    int v889 = v31;
    int v246 = v38;
    char v247 = v33;
    uint64_t v248 = v24;
    char v249 = v26;
    int v250 = v17;
    char v251 = v19;
    int v252 = v10;
    char v253 = v12;
    v254 = result;
    unint64_t v160 = 0;
    uint64_t v255 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v256 = v2;
    if (v5 && v255)
    {
      (*(void (**)(uint64_t))(*(void *)v255 + 16))(v255);
      uint64_t v2 = v256;
      uint64_t v4 = *v256;
      unint64_t v160 = v256[1];
      uint64_t result = v254;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v254;
    }
    char v12 = v253;
    int v10 = v252;
    char v19 = v251;
    int v17 = v250;
    char v26 = v249;
    uint64_t v24 = v248;
    char v33 = v247;
    char v40 = v855;
    int v31 = v889;
    int v38 = v246;
    int v45 = v801;
    char v47 = v827;
    int v52 = v748;
    char v54 = v769;
    int v59 = v667;
    char v61 = v695;
    goto LABEL_182;
  }
  int v63 = (unsigned __int8 *)(v4 + v62);
  uint64_t v64 = v4 + v62 + 1;
  v2[2] = v64;
  if (!v4)
  {
    unint64_t v160 = v5;
    goto LABEL_182;
  }
  unsigned int v65 = *v63;
  if (v65 < 2)
  {
    int v66 = 0;
    char v67 = 1;
    goto LABEL_61;
  }
LABEL_184:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v162 = v2[3];
  if (!v162)
  {
    char v68 = 0;
    uint64_t v4 = 0;
    int v66 = 1;
    goto LABEL_186;
  }
  int v693 = v59;
  char v715 = v61;
  int v764 = v52;
  char v795 = v54;
  char v846 = v47;
  char v878 = v40;
  int v915 = v31;
  int v739 = v38;
  char v416 = v33;
  unsigned int v568 = v24;
  int v417 = v17;
  char v418 = v19;
  int v419 = v10;
  char v420 = v12;
  v421 = v2;
  v422 = result;
  if (!v5)
  {
    unint64_t v162 = 0;
    uint64_t v4 = 0;
    int v66 = 1;
    char v68 = 0;
    uint64_t v24 = v568;
    char v40 = v878;
    int v52 = v764;
    char v47 = v846;
    char v61 = v715;
LABEL_186:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v163 = v2[3];
    if (v163)
    {
      char v666 = v68;
      int v692 = v59;
      char v714 = v61;
      int v763 = v52;
      char v794 = v54;
      int v819 = v45;
      char v845 = v47;
      char v877 = v40;
      int v914 = v31;
      int v738 = v38;
      char v408 = v33;
      uint64_t v409 = v24;
      int v410 = v17;
      char v411 = v19;
      int v412 = v10;
      char v413 = v12;
      v414 = v2;
      v415 = result;
      if (v162)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v163 + 16))(v163, v4, v162);
        unsigned int v72 = 0;
        uint64_t v2 = v414;
        uint64_t v4 = *v414;
        unint64_t v5 = v414[1];
        uint64_t result = v415;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v72 = 0;
      }
      char v12 = v413;
      int v10 = v412;
      char v19 = v411;
      int v17 = v410;
      uint64_t v24 = v409;
      char v33 = v408;
      char v40 = v877;
      int v31 = v914;
      int v38 = v738;
      int v52 = v763;
      int v45 = v819;
      char v47 = v845;
      char v54 = v794;
      int v59 = v692;
      char v61 = v714;
      char v68 = v666;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v72 = 0;
    }
    goto LABEL_188;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v162 + 16))(v162, v4);
  char v67 = 0;
  uint64_t v2 = v421;
  uint64_t v4 = *v421;
  unint64_t v5 = v421[1];
  int v66 = 1;
  uint64_t v64 = v421[2];
  uint64_t result = v422;
  char v12 = v420;
  int v10 = v419;
  char v19 = v418;
  int v17 = v417;
  uint64_t v24 = v568;
  char v33 = v416;
  char v40 = v878;
  int v31 = v915;
  int v38 = v739;
  int v52 = v764;
  char v47 = v846;
  char v54 = v795;
  int v59 = v693;
  char v61 = v715;
LABEL_61:
  if (v65) {
    char v68 = v67;
  }
  else {
    char v68 = 0;
  }
  unint64_t v69 = v64 - v4;
  if (v5 <= v69)
  {
    char v645 = v68;
    int v668 = v59;
    char v696 = v61;
    int v749 = v52;
    char v770 = v54;
    int v802 = v45;
    char v828 = v47;
    char v856 = v40;
    int v890 = v31;
    int v257 = v38;
    char v258 = v33;
    uint64_t v259 = v24;
    char v260 = v26;
    int v261 = v17;
    char v262 = v19;
    int v263 = v10;
    char v264 = v12;
    v265 = result;
    unint64_t v162 = 0;
    uint64_t v266 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v267 = v2;
    if (v5 && v266)
    {
      (*(void (**)(uint64_t))(*(void *)v266 + 16))(v266);
      uint64_t v2 = v267;
      uint64_t v4 = *v267;
      unint64_t v162 = v267[1];
      uint64_t result = v265;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v265;
    }
    char v12 = v264;
    int v10 = v263;
    char v19 = v262;
    int v17 = v261;
    char v26 = v260;
    uint64_t v24 = v259;
    char v33 = v258;
    char v40 = v856;
    int v31 = v890;
    int v38 = v257;
    int v45 = v802;
    char v47 = v828;
    int v52 = v749;
    char v54 = v770;
    int v59 = v668;
    char v61 = v696;
    char v68 = v645;
    goto LABEL_186;
  }
  int v70 = (unsigned __int8 *)(v4 + v69);
  uint64_t v71 = v4 + v69 + 1;
  v2[2] = v71;
  if (!v4)
  {
    unint64_t v162 = v5;
    goto LABEL_186;
  }
  unsigned int v72 = *v70;
  if (v72 < 2)
  {
    int v73 = 0;
    char v74 = 1;
    goto LABEL_68;
  }
LABEL_188:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v164 = v2[3];
  if (!v164)
  {
    char v75 = 0;
    uint64_t v4 = 0;
    int v73 = 1;
    goto LABEL_190;
  }
  char v665 = v68;
  int v691 = v59;
  char v713 = v61;
  int v762 = v52;
  char v793 = v54;
  int v818 = v45;
  char v876 = v40;
  int v913 = v31;
  int v737 = v38;
  char v400 = v33;
  unsigned int v567 = v24;
  char v401 = v26;
  int v402 = v17;
  char v403 = v19;
  int v404 = v10;
  char v405 = v12;
  v406 = v2;
  v407 = result;
  if (!v5)
  {
    char v75 = 0;
    unint64_t v164 = 0;
    uint64_t v4 = 0;
    int v73 = 1;
    char v26 = v401;
    uint64_t v24 = v567;
    char v40 = v876;
    int v52 = v762;
    int v45 = v818;
    char v61 = v713;
    char v68 = v665;
    goto LABEL_190;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v164 + 16))(v164, v4);
  char v74 = 0;
  uint64_t v2 = v406;
  uint64_t v4 = *v406;
  unint64_t v5 = v406[1];
  int v73 = 1;
  uint64_t v71 = v406[2];
  uint64_t result = v407;
  char v12 = v405;
  int v10 = v404;
  char v19 = v403;
  int v17 = v402;
  char v26 = v401;
  uint64_t v24 = v567;
  char v33 = v400;
  char v40 = v876;
  int v31 = v913;
  int v38 = v737;
  int v52 = v762;
  int v45 = v818;
  char v54 = v793;
  int v59 = v691;
  char v61 = v713;
  char v68 = v665;
LABEL_68:
  if (v72) {
    char v75 = v74;
  }
  else {
    char v75 = 0;
  }
  unint64_t v76 = v71 - v4;
  char v932 = v75;
  if (v5 <= v76)
  {
    int v614 = v73;
    char v646 = v68;
    int v669 = v59;
    char v697 = v61;
    int v750 = v52;
    char v771 = v54;
    int v803 = v45;
    char v829 = v47;
    char v857 = v40;
    int v891 = v31;
    int v268 = v38;
    char v269 = v33;
    uint64_t v270 = v24;
    int v271 = v17;
    char v272 = v19;
    int v273 = v10;
    char v274 = v12;
    v275 = result;
    unint64_t v164 = 0;
    uint64_t v276 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v277 = v2;
    if (v5 && v276)
    {
      (*(void (**)(uint64_t))(*(void *)v276 + 16))(v276);
      uint64_t v2 = v277;
      uint64_t v4 = *v277;
      unint64_t v164 = v277[1];
      uint64_t result = v275;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v275;
    }
    char v12 = v274;
    int v10 = v273;
    char v19 = v272;
    int v17 = v271;
    uint64_t v24 = v270;
    char v33 = v269;
    char v40 = v857;
    int v31 = v891;
    int v38 = v268;
    int v45 = v803;
    char v47 = v829;
    int v52 = v750;
    char v54 = v771;
    int v59 = v669;
    char v61 = v697;
    char v68 = v646;
    int v73 = v614;
    char v75 = v932;
  }
  else
  {
    uint64_t v77 = (unsigned __int8 *)(v4 + v76);
    uint64_t v78 = v4 + v76 + 1;
    v2[2] = v78;
    if (v4)
    {
      unsigned int v79 = *v77;
      if (v79 < 2)
      {
        int v80 = 0;
        char v81 = 1;
        goto LABEL_75;
      }
      goto LABEL_355;
    }
    unint64_t v164 = v5;
  }
LABEL_190:
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v165 = v2[3];
  if (v165)
  {
    char v932 = v75;
    int v635 = v73;
    char v664 = v68;
    int v690 = v59;
    char v712 = v61;
    int v736 = v38;
    int v761 = v52;
    char v792 = v54;
    int v817 = v45;
    char v844 = v47;
    char v875 = v40;
    int v912 = v31;
    char v391 = v33;
    uint64_t v392 = v24;
    char v393 = v26;
    int v394 = v17;
    char v395 = v19;
    int v396 = v10;
    char v397 = v12;
    v398 = v2;
    v399 = result;
    if (v164)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v165 + 16))(v165, v4, v164);
      unsigned int v79 = 0;
      uint64_t v2 = v398;
      uint64_t v4 = *v398;
      unint64_t v5 = v398[1];
      uint64_t result = v399;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v79 = 0;
    }
    char v12 = v397;
    int v10 = v396;
    char v19 = v395;
    int v17 = v394;
    char v26 = v393;
    uint64_t v24 = v392;
    char v33 = v391;
    char v40 = v875;
    int v31 = v912;
    int v38 = v736;
    int v52 = v761;
    int v45 = v817;
    char v47 = v844;
    char v54 = v792;
    int v59 = v690;
    char v61 = v712;
    char v68 = v664;
    int v73 = v635;
LABEL_355:
    char v75 = v932;
    goto LABEL_192;
  }
  unint64_t v5 = 0;
  uint64_t v4 = 0;
  unsigned int v79 = 0;
LABEL_192:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v166 = v2[3];
  if (!v166)
  {
    char v167 = 0;
    uint64_t v4 = 0;
    int v80 = 1;
    goto LABEL_194;
  }
  char v932 = v75;
  int v634 = v73;
  char v663 = v68;
  int v689 = v59;
  char v711 = v61;
  int v735 = v38;
  int v760 = v52;
  char v791 = v54;
  int v816 = v45;
  char v843 = v47;
  char v874 = v40;
  int v911 = v31;
  char v382 = v33;
  uint64_t v383 = v24;
  char v384 = v26;
  int v385 = v17;
  char v386 = v19;
  int v387 = v10;
  char v388 = v12;
  v389 = v2;
  v390 = result;
  if (!v5)
  {
    char v167 = 0;
    unint64_t v166 = 0;
    uint64_t v4 = 0;
    int v80 = 1;
    char v26 = v384;
    uint64_t v24 = v383;
    char v40 = v874;
    int v52 = v760;
    int v45 = v816;
    char v47 = v843;
    char v61 = v711;
    char v68 = v663;
    goto LABEL_194;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v166 + 16))(v166, v4);
  char v81 = 0;
  uint64_t v2 = v389;
  uint64_t v4 = *v389;
  unint64_t v5 = v389[1];
  int v80 = 1;
  uint64_t v78 = v389[2];
  uint64_t result = v390;
  char v12 = v388;
  int v10 = v387;
  char v19 = v386;
  int v17 = v385;
  char v26 = v384;
  uint64_t v24 = v383;
  char v33 = v382;
  char v40 = v874;
  int v31 = v911;
  int v38 = v735;
  int v52 = v760;
  int v45 = v816;
  char v47 = v843;
  char v54 = v791;
  int v59 = v689;
  char v61 = v711;
  char v68 = v663;
  int v73 = v634;
LABEL_75:
  if (!v79) {
    char v81 = 0;
  }
  char v931 = v81;
  unint64_t v82 = v78 - v4;
  if (v5 <= v82)
  {
    int v595 = v80;
    int v615 = v73;
    char v647 = v68;
    int v670 = v59;
    char v698 = v61;
    int v751 = v52;
    char v772 = v54;
    int v804 = v45;
    char v830 = v47;
    char v858 = v40;
    int v892 = v31;
    int v278 = v38;
    char v279 = v33;
    uint64_t v280 = v24;
    char v281 = v26;
    int v282 = v17;
    char v283 = v19;
    int v284 = v10;
    char v285 = v12;
    v286 = result;
    unint64_t v166 = 0;
    uint64_t v287 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v288 = v2;
    if (v5 && v287)
    {
      (*(void (**)(uint64_t))(*(void *)v287 + 16))(v287);
      uint64_t v2 = v288;
      uint64_t v4 = *v288;
      unint64_t v166 = v288[1];
      uint64_t result = v286;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v286;
    }
    char v12 = v285;
    int v10 = v284;
    char v19 = v283;
    int v17 = v282;
    char v26 = v281;
    uint64_t v24 = v280;
    char v33 = v279;
    char v40 = v858;
    int v31 = v892;
    int v38 = v278;
    int v45 = v804;
    char v47 = v830;
    int v52 = v751;
    char v54 = v772;
    int v59 = v670;
    char v61 = v698;
    char v68 = v647;
    int v80 = v595;
    int v73 = v615;
  }
  else
  {
    uint64_t v83 = (unsigned __int8 *)(v4 + v82);
    uint64_t v84 = v4 + v82 + 1;
    v2[2] = v84;
    if (v4)
    {
      int v940 = v17;
      unsigned int v85 = *v83;
      if (v85 < 2)
      {
        int v938 = 0;
        char v86 = 1;
        goto LABEL_81;
      }
      goto LABEL_349;
    }
    unint64_t v166 = v5;
  }
  char v167 = v931;
  char v75 = v932;
LABEL_194:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v5 = v2[3];
  if (v5)
  {
    char v931 = v167;
    char v932 = v75;
    int v613 = v80;
    int v633 = v73;
    char v662 = v68;
    int v688 = v59;
    char v710 = v61;
    int v759 = v52;
    char v790 = v54;
    int v815 = v45;
    char v842 = v47;
    char v873 = v40;
    int v910 = v31;
    int v734 = v38;
    uint64_t v371 = v24;
    char v372 = v33;
    char v373 = v26;
    uint64_t v374 = v371;
    int v375 = v17;
    char v376 = v19;
    int v377 = v10;
    char v378 = v12;
    v379 = v2;
    v380 = result;
    if (v166)
    {
      (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v4, v166);
      unsigned int v85 = 0;
      uint64_t v2 = v379;
      uint64_t v4 = *v379;
      unint64_t v5 = v379[1];
      uint64_t result = v380;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v85 = 0;
    }
    char v12 = v378;
    int v10 = v377;
    char v19 = v376;
    int v17 = v375;
    uint64_t v381 = v374;
    char v26 = v373;
    char v33 = v372;
    uint64_t v24 = v381;
    char v40 = v873;
    int v31 = v910;
    int v38 = v734;
    int v52 = v759;
    int v45 = v815;
    char v47 = v842;
    char v54 = v790;
    int v59 = v688;
    char v61 = v710;
    char v68 = v662;
    int v80 = v613;
    int v73 = v633;
LABEL_349:
    char v167 = v931;
    char v75 = v932;
    goto LABEL_196;
  }
  uint64_t v4 = 0;
  unsigned int v85 = 0;
LABEL_196:
  int v940 = v17;
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v168 = v2[3];
  if (!v168)
  {
    char v930 = 0;
    uint64_t v4 = 0;
    int v169 = 1;
    goto LABEL_198;
  }
  char v931 = v167;
  char v932 = v75;
  int v612 = v80;
  int v632 = v73;
  char v661 = v68;
  int v687 = v59;
  char v709 = v61;
  char v789 = v54;
  int v814 = v45;
  char v841 = v47;
  char v872 = v40;
  int v909 = v31;
  int v733 = v38;
  uint64_t v361 = v24;
  char v362 = v33;
  char v363 = v26;
  uint64_t v364 = v361;
  char v365 = v19;
  int v366 = v10;
  char v367 = v12;
  v368 = v2;
  v369 = result;
  if (!v5)
  {
    char v930 = 0;
    unint64_t v168 = 0;
    uint64_t v4 = 0;
    int v169 = 1;
    char v26 = v363;
    uint64_t v24 = v361;
    char v40 = v872;
    int v45 = v814;
    char v47 = v841;
    char v61 = v709;
    char v68 = v661;
    int v80 = v612;
    goto LABEL_198;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v168 + 16))(v168, v4);
  char v86 = 0;
  uint64_t v2 = v368;
  uint64_t v4 = *v368;
  unint64_t v5 = v368[1];
  int v938 = 1;
  uint64_t v84 = v368[2];
  uint64_t result = v369;
  char v12 = v367;
  int v10 = v366;
  char v19 = v365;
  uint64_t v370 = v364;
  char v26 = v363;
  char v33 = v362;
  uint64_t v24 = v370;
  char v40 = v872;
  int v31 = v909;
  int v38 = v733;
  int v45 = v814;
  char v47 = v841;
  char v54 = v789;
  int v59 = v687;
  char v61 = v709;
  char v68 = v661;
  int v80 = v612;
  int v73 = v632;
LABEL_81:
  char v929 = v19;
  if (v85) {
    char v87 = v86;
  }
  else {
    char v87 = 0;
  }
  unint64_t v88 = v84 - v4;
  if (v5 <= v88)
  {
    char v930 = v87;
    int v596 = v80;
    int v616 = v73;
    char v648 = v68;
    int v671 = v59;
    char v699 = v61;
    char v773 = v54;
    char v831 = v47;
    char v859 = v40;
    int v893 = v31;
    int v717 = v38;
    uint64_t v289 = v24;
    char v290 = v33;
    char v291 = v26;
    int v292 = v10;
    char v293 = v12;
    v294 = result;
    unint64_t v168 = 0;
    uint64_t v295 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v296 = v2;
    if (v5 && v295)
    {
      (*(void (**)(uint64_t))(*(void *)v295 + 16))(v295);
      uint64_t v2 = v296;
      uint64_t v4 = *v296;
      unint64_t v168 = v296[1];
      uint64_t result = v294;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v294;
    }
    char v12 = v293;
    int v10 = v292;
    char v19 = v929;
    char v26 = v291;
    char v33 = v290;
    uint64_t v24 = v289;
    char v40 = v859;
    int v31 = v893;
    int v38 = v717;
    char v47 = v831;
    char v54 = v773;
    int v59 = v671;
    char v61 = v699;
    char v68 = v648;
    int v80 = v596;
    int v73 = v616;
  }
  else
  {
    uint64_t v89 = (unsigned __int8 *)(v4 + v88);
    uint64_t v90 = v4 + v88 + 1;
    v2[2] = v90;
    if (v4)
    {
      char v928 = v12;
      unsigned int v91 = *v89;
      if (v91 < 2)
      {
        int v92 = 0;
        char v93 = 1;
        goto LABEL_88;
      }
      char v930 = v87;
      char v19 = v929;
      goto LABEL_343;
    }
    char v930 = v87;
    unint64_t v168 = v5;
    char v19 = v929;
  }
  char v167 = v931;
  char v75 = v932;
  int v169 = v938;
LABEL_198:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v5 = v2[3];
  if (v5)
  {
    int v938 = v169;
    char v931 = v167;
    char v932 = v75;
    int v611 = v80;
    int v631 = v73;
    char v660 = v68;
    int v686 = v59;
    char v708 = v61;
    int v758 = v52;
    char v788 = v54;
    int v813 = v45;
    char v840 = v47;
    char v871 = v40;
    int v908 = v31;
    int v732 = v38;
    char v353 = v33;
    uint64_t v354 = v24;
    char v355 = v26;
    char v356 = v19;
    int v357 = v10;
    char v358 = v12;
    v359 = v2;
    v360 = result;
    if (v168)
    {
      (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v4, v168);
      unsigned int v91 = 0;
      uint64_t v2 = v359;
      uint64_t v4 = *v359;
      unint64_t v5 = v359[1];
      uint64_t result = v360;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
      unsigned int v91 = 0;
    }
    char v12 = v358;
    int v10 = v357;
    char v19 = v356;
    char v26 = v355;
    uint64_t v24 = v354;
    char v33 = v353;
    char v40 = v871;
    int v31 = v908;
    int v38 = v732;
    int v52 = v758;
    int v45 = v813;
    char v47 = v840;
    char v54 = v788;
    int v59 = v686;
    char v61 = v708;
    char v68 = v660;
    int v80 = v611;
    int v73 = v631;
LABEL_343:
    char v167 = v931;
    char v75 = v932;
    int v169 = v938;
    goto LABEL_200;
  }
  uint64_t v4 = 0;
  unsigned int v91 = 0;
LABEL_200:
  char v928 = v12;
  char v929 = v19;
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v170 = v2[3];
  if (!v170)
  {
    char v93 = 0;
    uint64_t v4 = 0;
    int v92 = 1;
    goto LABEL_202;
  }
  int v938 = v169;
  char v931 = v167;
  char v932 = v75;
  int v610 = v80;
  int v630 = v73;
  char v659 = v68;
  int v685 = v59;
  char v707 = v61;
  char v787 = v54;
  int v812 = v45;
  char v839 = v47;
  int v907 = v31;
  int v731 = v38;
  char v349 = v33;
  int v350 = v10;
  v351 = v2;
  v352 = result;
  if (!v5)
  {
    char v93 = 0;
    unint64_t v170 = 0;
    uint64_t v4 = 0;
    int v92 = 1;
    int v45 = v812;
    char v47 = v839;
    char v61 = v707;
    char v68 = v659;
    goto LABEL_423;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v170 + 16))(v170, v4);
  char v93 = 0;
  uint64_t v2 = v351;
  uint64_t v4 = *v351;
  unint64_t v5 = v351[1];
  int v92 = 1;
  uint64_t v90 = v351[2];
  uint64_t result = v352;
  int v10 = v350;
  char v33 = v349;
  int v31 = v907;
  int v38 = v731;
  int v45 = v812;
  char v47 = v839;
  char v54 = v787;
  int v59 = v685;
  char v61 = v707;
  char v68 = v659;
  int v80 = v610;
  int v73 = v630;
  char v87 = v930;
LABEL_88:
  int v94 = v10;
  if (!v91) {
    char v93 = 0;
  }
  unint64_t v95 = v90 - v4;
  if (v5 <= v95)
  {
    int v569 = v92;
    char v582 = v93;
    char v930 = v87;
    int v597 = v80;
    int v617 = v73;
    int v672 = v59;
    int v752 = v52;
    char v774 = v54;
    int v894 = v31;
    int v718 = v38;
    char v297 = v33;
    unsigned int v559 = v24;
    v298 = result;
    unint64_t v170 = 0;
    uint64_t v299 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v300 = v2;
    if (v5 && v299)
    {
      (*(void (**)(uint64_t))(*(void *)v299 + 16))(v299);
      uint64_t v2 = v300;
      uint64_t v4 = *v300;
      unint64_t v170 = v300[1];
      uint64_t result = v298;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v298;
    }
    int v10 = v94;
    uint64_t v24 = v559;
    int v92 = v569;
    char v33 = v297;
    int v31 = v894;
    int v38 = v718;
    int v52 = v752;
    char v54 = v774;
    int v59 = v672;
    int v80 = v597;
    int v73 = v617;
    char v167 = v931;
    char v75 = v932;
    int v169 = v938;
    char v93 = v582;
    goto LABEL_202;
  }
  uint64_t v96 = (unsigned __int8 *)(v4 + v95);
  uint64_t v97 = v4 + v95 + 1;
  v2[2] = v97;
  if (!v4)
  {
    char v930 = v87;
    unint64_t v170 = v5;
    int v10 = v94;
LABEL_423:
    char v167 = v931;
    char v75 = v932;
    int v169 = v938;
LABEL_202:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v5 = v2[3];
    char v931 = v167;
    if (v5)
    {
      int v581 = v92;
      char v594 = v93;
      int v939 = v169;
      int v609 = v80;
      int v629 = v73;
      char v934 = v75;
      int v684 = v59;
      char v786 = v54;
      int v811 = v45;
      char v838 = v47;
      char v870 = v40;
      int v906 = v31;
      int v730 = v38;
      char v344 = v33;
      uint64_t v345 = v24;
      int v346 = v10;
      v347 = v2;
      v348 = result;
      if (v170)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v4, v170);
        unsigned int v98 = 0;
        uint64_t v2 = v347;
        uint64_t v4 = *v347;
        unint64_t v5 = v347[1];
        uint64_t result = v348;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v98 = 0;
      }
      int v10 = v346;
      uint64_t v24 = v345;
      char v33 = v344;
      char v40 = v870;
      int v31 = v906;
      int v38 = v730;
      int v45 = v811;
      char v47 = v838;
      char v54 = v786;
      int v59 = v684;
      int v80 = v609;
      int v73 = v629;
      char v75 = v934;
      int v169 = v939;
      int v92 = v581;
      char v93 = v594;
    }
    else
    {
      uint64_t v4 = 0;
      unsigned int v98 = 0;
    }
    goto LABEL_204;
  }
  unsigned int v98 = *v96;
  if (v98 < 2)
  {
    int v99 = v73;
    int v937 = 0;
    char v100 = 1;
    goto LABEL_94;
  }
  char v930 = v87;
  int v10 = v94;
  char v75 = v932;
  int v169 = v938;
LABEL_204:
  int v99 = v73;
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v171 = v2[3];
  if (!v171)
  {
    char v927 = 0;
    uint64_t v4 = 0;
    int v937 = 1;
    goto LABEL_206;
  }
  int v570 = v92;
  char v583 = v93;
  int v938 = v169;
  int v598 = v80;
  int v618 = v73;
  char v932 = v75;
  int v636 = v66;
  char v649 = v68;
  int v673 = v59;
  char v700 = v61;
  int v753 = v52;
  char v775 = v54;
  int v805 = v45;
  char v832 = v47;
  char v860 = v40;
  int v895 = v31;
  int v719 = v38;
  char v341 = v33;
  int v94 = v10;
  v342 = v2;
  v343 = result;
  if (!v5)
  {
    char v927 = 0;
    unint64_t v171 = 0;
    uint64_t v4 = 0;
    int v937 = 1;
    uint64_t v24 = v24;
LABEL_289:
    char v40 = v860;
    int v31 = v895;
    int v38 = v719;
    int v52 = v753;
    int v45 = v805;
    char v47 = v832;
    char v54 = v775;
    int v59 = v673;
    char v61 = v700;
    int v66 = v636;
    char v68 = v649;
    int v80 = v598;
    int v99 = v618;
    char v75 = v932;
    int v169 = v938;
    int v92 = v570;
    char v93 = v583;
    goto LABEL_206;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v171 + 16))(v171, v4);
  char v100 = 0;
  uint64_t v2 = v342;
  uint64_t v4 = *v342;
  unint64_t v5 = v342[1];
  int v937 = 1;
  uint64_t v97 = v342[2];
  uint64_t result = v343;
  uint64_t v24 = v24;
  int v92 = v570;
  char v33 = v341;
  char v40 = v860;
  int v31 = v895;
  int v38 = v719;
  int v45 = v805;
  char v47 = v832;
  char v54 = v775;
  int v59 = v673;
  int v80 = v598;
  int v99 = v618;
  char v87 = v930;
  char v93 = v583;
LABEL_94:
  if (v98) {
    char v101 = v100;
  }
  else {
    char v101 = 0;
  }
  char v927 = v101;
  unint64_t v102 = v97 - v4;
  if (v5 <= v102)
  {
    int v570 = v92;
    char v583 = v93;
    char v930 = v87;
    int v598 = v80;
    int v618 = v99;
    int v636 = v66;
    char v649 = v68;
    int v673 = v59;
    char v700 = v61;
    int v753 = v52;
    char v775 = v54;
    int v805 = v45;
    char v832 = v47;
    char v860 = v40;
    int v895 = v31;
    int v719 = v38;
    char v301 = v33;
    unsigned int v560 = v24;
    v302 = result;
    unint64_t v171 = 0;
    uint64_t v303 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v304 = v2;
    if (v5 && v303)
    {
      (*(void (**)(uint64_t))(*(void *)v303 + 16))(v303);
      uint64_t v2 = v304;
      uint64_t v4 = *v304;
      unint64_t v171 = v304[1];
      uint64_t result = v302;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v302;
    }
    int v10 = v94;
    uint64_t v24 = v560;
    char v33 = v301;
    goto LABEL_289;
  }
  uint64_t v103 = (unsigned __int8 *)(v4 + v102);
  uint64_t v104 = v4 + v102 + 1;
  v2[2] = v104;
  if (!v4)
  {
    char v930 = v87;
    unint64_t v171 = v5;
    int v10 = v94;
    char v75 = v932;
    int v169 = v938;
LABEL_206:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v5 = v2[3];
    int v938 = v169;
    if (v5)
    {
      int v580 = v92;
      char v593 = v93;
      int v608 = v80;
      int v628 = v99;
      char v933 = v75;
      int v683 = v59;
      char v785 = v54;
      int v810 = v45;
      char v837 = v47;
      char v869 = v40;
      int v905 = v31;
      int v729 = v38;
      char v336 = v33;
      uint64_t v337 = v24;
      int v338 = v10;
      v339 = v2;
      v340 = result;
      if (v171)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v4, v171);
        unsigned int v105 = 0;
        uint64_t v2 = v339;
        uint64_t v4 = *v339;
        unint64_t v5 = v339[1];
        uint64_t result = v340;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v105 = 0;
      }
      int v10 = v338;
      uint64_t v24 = v337;
      char v33 = v336;
      char v40 = v869;
      int v31 = v905;
      int v38 = v729;
      int v45 = v810;
      char v47 = v837;
      char v54 = v785;
      int v59 = v683;
      int v80 = v608;
      int v99 = v628;
      char v75 = v933;
      int v92 = v580;
      char v93 = v593;
    }
    else
    {
      uint64_t v4 = 0;
      unsigned int v105 = 0;
    }
    goto LABEL_208;
  }
  unsigned int v105 = *v103;
  if (v105 < 2)
  {
    int v106 = v80;
    int v936 = 0;
    char v107 = 1;
    goto LABEL_101;
  }
  char v930 = v87;
  int v10 = v94;
  char v75 = v932;
LABEL_208:
  int v106 = v80;
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v172 = v2[3];
  char v932 = v75;
  if (!v172)
  {
    char v926 = 0;
    uint64_t v4 = 0;
    int v936 = 1;
    goto LABEL_210;
  }
  int v571 = v92;
  char v584 = v93;
  int v599 = v80;
  int v619 = v99;
  int v637 = v66;
  char v650 = v68;
  int v674 = v59;
  char v701 = v61;
  int v754 = v52;
  char v776 = v54;
  int v806 = v45;
  char v833 = v47;
  char v861 = v40;
  int v896 = v31;
  int v720 = v38;
  char v332 = v26;
  char v333 = v33;
  int v94 = v10;
  v334 = v2;
  v335 = result;
  if (!v5)
  {
    char v926 = 0;
    unint64_t v172 = 0;
    uint64_t v4 = 0;
    int v936 = 1;
    uint64_t v24 = v24;
    char v26 = v332;
LABEL_294:
    char v40 = v861;
    int v31 = v896;
    int v38 = v720;
    int v52 = v754;
    int v45 = v806;
    char v47 = v833;
    char v54 = v776;
    int v59 = v674;
    char v61 = v701;
    int v66 = v637;
    char v68 = v650;
    int v106 = v599;
    int v99 = v619;
    int v92 = v571;
    char v93 = v584;
    goto LABEL_210;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v172 + 16))(v172, v4);
  char v107 = 0;
  uint64_t v2 = v334;
  uint64_t v4 = *v334;
  unint64_t v5 = v334[1];
  int v936 = 1;
  uint64_t v104 = v334[2];
  uint64_t result = v335;
  uint64_t v24 = v24;
  int v92 = v571;
  char v33 = v333;
  char v26 = v332;
  char v40 = v861;
  int v31 = v896;
  int v38 = v720;
  char v54 = v776;
  int v59 = v674;
  char v61 = v701;
  char v68 = v650;
  int v106 = v599;
  int v99 = v619;
  char v87 = v930;
  char v93 = v584;
LABEL_101:
  char v930 = v87;
  if (v105) {
    char v108 = v107;
  }
  else {
    char v108 = 0;
  }
  unint64_t v109 = v104 - v4;
  char v926 = v108;
  if (v5 <= v109)
  {
    int v571 = v92;
    char v584 = v93;
    int v599 = v106;
    int v619 = v99;
    int v637 = v66;
    char v650 = v68;
    int v674 = v59;
    char v701 = v61;
    int v754 = v52;
    char v776 = v54;
    int v806 = v45;
    char v833 = v47;
    char v861 = v40;
    int v896 = v31;
    int v720 = v38;
    char v305 = v26;
    char v306 = v33;
    v307 = result;
    unint64_t v172 = 0;
    uint64_t v308 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v309 = v2;
    if (v5 && v308)
    {
      (*(void (**)(uint64_t))(*(void *)v308 + 16))(v308);
      uint64_t v2 = v309;
      uint64_t v4 = *v309;
      unint64_t v172 = v309[1];
      uint64_t result = v307;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t result = v307;
    }
    int v10 = v94;
    uint64_t v24 = v24;
    char v33 = v306;
    char v26 = v305;
    goto LABEL_294;
  }
  char v110 = v68;
  char v111 = (unsigned __int8 *)(v4 + v109);
  uint64_t v112 = v4 + v109 + 1;
  v2[2] = v112;
  if (!v4)
  {
    unint64_t v172 = v5;
    int v10 = v94;
LABEL_210:
    char v110 = v68;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v5 = v2[3];
    if (v5)
    {
      int v579 = v92;
      char v592 = v93;
      int v607 = v106;
      int v627 = v99;
      char v658 = v68;
      int v682 = v59;
      char v706 = v61;
      char v784 = v54;
      char v868 = v40;
      int v904 = v31;
      int v728 = v38;
      char v558 = v33;
      int v329 = v10;
      v330 = v2;
      v331 = result;
      if (v172)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v4, v172);
        unsigned int v113 = 0;
        uint64_t v2 = v330;
        uint64_t v4 = *v330;
        unint64_t v5 = v330[1];
        uint64_t result = v331;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v113 = 0;
      }
      int v10 = v329;
      char v33 = v558;
      uint64_t v24 = v24;
      char v40 = v868;
      int v31 = v904;
      int v38 = v728;
      char v54 = v784;
      int v59 = v682;
      char v61 = v706;
      char v110 = v658;
      int v106 = v607;
      int v99 = v627;
      int v92 = v579;
      char v93 = v592;
    }
    else
    {
      uint64_t v4 = 0;
      unsigned int v113 = 0;
    }
    goto LABEL_212;
  }
  unsigned int v113 = *v111;
  if (v113 < 2)
  {
    int v935 = 0;
    char v114 = 1;
    goto LABEL_108;
  }
  int v10 = v94;
LABEL_212:
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v173 = v2[3];
  if (!v173)
  {
    int v115 = v66;
    int v116 = v59;
    char v925 = 0;
    uint64_t v4 = 0;
    int v935 = 1;
    goto LABEL_214;
  }
  int v572 = v92;
  char v585 = v93;
  int v600 = v106;
  int v620 = v99;
  int v638 = v66;
  char v651 = v110;
  int v675 = v59;
  char v702 = v61;
  int v755 = v52;
  char v777 = v54;
  int v807 = v45;
  char v834 = v47;
  char v862 = v40;
  int v897 = v31;
  int v721 = v38;
  char v551 = v33;
  unsigned int v561 = v24;
  int v94 = v10;
  v312 = v2;
  v310 = result;
  if (!v5)
  {
    char v925 = 0;
    unint64_t v173 = 0;
    uint64_t v4 = 0;
    int v935 = 1;
    goto LABEL_450;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v173 + 16))(v173, v4);
  char v114 = 0;
  uint64_t v2 = v312;
  uint64_t v4 = *v312;
  unint64_t v5 = v312[1];
  int v935 = 1;
  uint64_t v112 = v312[2];
  uint64_t result = v310;
  char v33 = v551;
  uint64_t v24 = v24;
  int v31 = v897;
  int v38 = v721;
  int v45 = v807;
  char v47 = v834;
  char v54 = v777;
  int v59 = v675;
  char v110 = v651;
  int v106 = v600;
  int v99 = v620;
  int v92 = v572;
  char v93 = v585;
LABEL_108:
  int v115 = v66;
  int v116 = v59;
  if (!v113) {
    char v114 = 0;
  }
  char v925 = v114;
  unint64_t v117 = v112 - v4;
  if (v5 <= v117)
  {
    int v572 = v92;
    char v585 = v93;
    int v600 = v106;
    int v620 = v99;
    int v638 = v66;
    char v651 = v110;
    int v675 = v59;
    char v702 = v61;
    int v755 = v52;
    char v777 = v54;
    int v807 = v45;
    char v834 = v47;
    char v862 = v40;
    int v897 = v31;
    int v721 = v38;
    char v551 = v33;
    unsigned int v561 = v24;
    v310 = result;
    unint64_t v173 = 0;
    uint64_t v311 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v312 = v2;
    if (v5 && v311)
    {
      (*(void (**)(uint64_t))(*(void *)v311 + 16))(v311);
      uint64_t v2 = v312;
      uint64_t v4 = *v312;
      unint64_t v173 = v312[1];
      uint64_t result = v310;
LABEL_298:
      int v10 = v94;
      char v33 = v551;
      uint64_t v24 = v561;
      char v40 = v862;
      int v31 = v897;
      int v38 = v721;
      int v52 = v755;
      int v45 = v807;
      char v47 = v834;
      char v54 = v777;
      int v116 = v675;
      char v61 = v702;
      int v115 = v638;
      char v110 = v651;
      int v106 = v600;
      int v99 = v620;
      int v92 = v572;
      char v93 = v585;
      goto LABEL_214;
    }
    uint64_t v4 = 0;
LABEL_450:
    uint64_t result = v310;
    uint64_t v2 = v312;
    goto LABEL_298;
  }
  char v118 = v61;
  char v119 = v54;
  int v120 = (unsigned __int8 *)(v4 + v117);
  uint64_t v121 = v4 + v117 + 1;
  v2[2] = v121;
  if (!v4)
  {
    unint64_t v173 = v5;
    int v10 = v94;
LABEL_214:
    char v118 = v61;
    char v119 = v54;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v5 = v2[3];
    if (v5)
    {
      int v578 = v92;
      char v591 = v93;
      int v606 = v106;
      int v626 = v99;
      int v644 = v115;
      char v657 = v110;
      int v681 = v116;
      char v705 = v61;
      char v783 = v54;
      char v867 = v40;
      int v903 = v31;
      int v727 = v38;
      char v557 = v33;
      int v547 = v10;
      char v550 = v26;
      v327 = v2;
      v328 = result;
      if (v173)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v4, v173);
        unsigned int v123 = 0;
        uint64_t v2 = v327;
        uint64_t v4 = *v327;
        unint64_t v5 = v327[1];
        uint64_t result = v328;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v123 = 0;
      }
      int v10 = v547;
      char v26 = v550;
      char v33 = v557;
      uint64_t v24 = v24;
      char v40 = v867;
      int v31 = v903;
      int v122 = v727;
      char v119 = v783;
      int v116 = v681;
      char v118 = v705;
      int v115 = v644;
      char v110 = v657;
      int v106 = v606;
      int v99 = v626;
      int v92 = v578;
      char v93 = v591;
    }
    else
    {
      int v122 = v38;
      uint64_t v4 = 0;
      unsigned int v123 = 0;
    }
    goto LABEL_216;
  }
  int v122 = v38;
  unsigned int v123 = *v120;
  if (v123 < 2)
  {
    int v124 = v31;
    int v125 = 0;
    char v126 = 1;
    goto LABEL_114;
  }
  int v10 = v94;
LABEL_216:
  int v124 = v31;
  *uint64_t v2 = 0;
  v2[1] = 0;
  unint64_t v174 = v2[3];
  if (!v174)
  {
    char v127 = v33;
    char v128 = 0;
    uint64_t v4 = 0;
    int v125 = 1;
    goto LABEL_218;
  }
  int v573 = v92;
  char v586 = v93;
  int v601 = v106;
  int v621 = v99;
  int v639 = v115;
  char v652 = v110;
  int v676 = v116;
  char v703 = v118;
  int v756 = v52;
  char v778 = v119;
  int v808 = v45;
  char v835 = v47;
  char v863 = v40;
  int v898 = v31;
  int v722 = v122;
  char v552 = v33;
  unsigned int v562 = v24;
  int v542 = v10;
  char v548 = v26;
  v315 = v2;
  v313 = result;
  if (!v5)
  {
    char v128 = 0;
    unint64_t v174 = 0;
    uint64_t v4 = 0;
    int v125 = 1;
    goto LABEL_452;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v174 + 16))(v174, v4);
  char v126 = 0;
  uint64_t v2 = v315;
  uint64_t v4 = *v315;
  unint64_t v5 = v315[1];
  int v125 = 1;
  uint64_t v121 = v315[2];
  uint64_t result = v313;
  int v94 = v542;
  char v26 = v548;
  char v33 = v552;
  uint64_t v24 = v562;
  int v124 = v898;
  int v122 = v722;
  char v119 = v778;
  int v116 = v676;
  int v115 = v639;
  char v110 = v652;
  int v106 = v601;
  int v99 = v621;
  int v92 = v573;
  char v93 = v586;
LABEL_114:
  char v127 = v33;
  if (v123) {
    char v128 = v126;
  }
  else {
    char v128 = 0;
  }
  unint64_t v129 = v121 - v4;
  if (v5 <= v129)
  {
    int v573 = v92;
    char v586 = v93;
    int v601 = v106;
    int v621 = v99;
    int v639 = v115;
    char v652 = v110;
    int v676 = v116;
    char v703 = v118;
    int v756 = v52;
    char v778 = v119;
    int v808 = v45;
    char v835 = v47;
    char v863 = v40;
    int v898 = v124;
    int v722 = v122;
    char v552 = v33;
    unsigned int v562 = v24;
    int v542 = v94;
    char v548 = v26;
    v313 = result;
    unint64_t v174 = 0;
    uint64_t v314 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v315 = v2;
    if (v5 && v314)
    {
      (*(void (**)(uint64_t))(*(void *)v314 + 16))(v314);
      uint64_t v2 = v315;
      uint64_t v4 = *v315;
      unint64_t v174 = v315[1];
      uint64_t result = v313;
LABEL_302:
      int v10 = v542;
      char v26 = v548;
      char v127 = v552;
      uint64_t v24 = v562;
      char v40 = v863;
      int v124 = v898;
      int v122 = v722;
      int v52 = v756;
      int v45 = v808;
      char v47 = v835;
      char v119 = v778;
      int v116 = v676;
      char v118 = v703;
      int v115 = v639;
      char v110 = v652;
      int v106 = v601;
      int v99 = v621;
      int v92 = v573;
      char v93 = v586;
      goto LABEL_218;
    }
    uint64_t v4 = 0;
LABEL_452:
    uint64_t result = v313;
    uint64_t v2 = v315;
    goto LABEL_302;
  }
  int v130 = v24;
  char v131 = (unsigned __int8 *)(v4 + v129);
  uint64_t v132 = v4 + v129 + 1;
  v2[2] = v132;
  if (!v4)
  {
    unint64_t v174 = v5;
    int v10 = v94;
LABEL_218:
    int v130 = v24;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v5 = v2[3];
    if (v5)
    {
      int v577 = v92;
      char v590 = v93;
      int v605 = v106;
      int v625 = v99;
      int v643 = v115;
      char v656 = v110;
      int v680 = v116;
      char v782 = v119;
      int v902 = v124;
      int v726 = v122;
      char v556 = v127;
      int v566 = v24;
      int v546 = v10;
      v325 = v2;
      v326 = result;
      if (v174)
      {
        (*(void (**)(unint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4, v174, v24);
        unsigned int v133 = 0;
        uint64_t v2 = v325;
        uint64_t v4 = *v325;
        unint64_t v5 = v325[1];
        uint64_t result = v326;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v4 = 0;
        unsigned int v133 = 0;
      }
      int v10 = v546;
      char v127 = v556;
      int v130 = v566;
      int v124 = v902;
      int v122 = v726;
      char v119 = v782;
      int v116 = v680;
      int v115 = v643;
      char v110 = v656;
      int v106 = v605;
      int v99 = v625;
      int v92 = v577;
      char v93 = v590;
    }
    else
    {
      uint64_t v4 = 0;
      unsigned int v133 = 0;
    }
    goto LABEL_220;
  }
  unsigned int v133 = *v131;
  if (v133 < 2)
  {
    int v134 = 0;
    char v135 = 1;
    goto LABEL_121;
  }
  int v10 = v94;
LABEL_220:
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v175 = v2[3];
  if (!v175)
  {
    char v136 = 0;
    unint64_t v176 = 0;
    uint64_t v4 = 0;
    int v134 = 1;
    goto LABEL_222;
  }
  int v574 = v92;
  char v587 = v93;
  int v602 = v106;
  int v622 = v99;
  int v640 = v115;
  char v653 = v110;
  int v677 = v116;
  char v704 = v118;
  int v757 = v52;
  char v779 = v119;
  int v809 = v45;
  char v836 = v47;
  char v864 = v40;
  int v899 = v124;
  int v723 = v122;
  char v553 = v127;
  int v563 = v130;
  int v543 = v10;
  char v549 = v26;
  v318 = v2;
  v324 = result;
  if (!v5)
  {
    char v136 = 0;
    uint64_t v4 = 0;
    int v134 = 1;
    unint64_t v176 = 0;
    goto LABEL_454;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v175 + 16))(v175, v4);
  char v135 = 0;
  uint64_t v2 = v318;
  uint64_t v4 = *v318;
  unint64_t v5 = v318[1];
  int v134 = 1;
  uint64_t v132 = v318[2];
  uint64_t result = v324;
  int v94 = v543;
  char v127 = v553;
  int v130 = v563;
  char v40 = v864;
  int v124 = v899;
  int v122 = v723;
  char v119 = v779;
  int v116 = v677;
  int v115 = v640;
  char v110 = v653;
  int v106 = v602;
  int v99 = v622;
  int v92 = v574;
  char v93 = v587;
LABEL_121:
  if (v133) {
    char v136 = v135;
  }
  else {
    char v136 = 0;
  }
  unint64_t v137 = v132 - v4;
  if (v5 <= v137)
  {
    int v574 = v92;
    char v587 = v93;
    int v602 = v106;
    int v622 = v99;
    int v640 = v115;
    char v653 = v110;
    int v677 = v116;
    char v704 = v118;
    int v757 = v52;
    char v779 = v119;
    int v809 = v45;
    char v836 = v47;
    char v864 = v40;
    int v899 = v124;
    int v723 = v122;
    char v553 = v127;
    int v563 = v130;
    int v543 = v94;
    char v549 = v26;
    v316 = result;
    uint64_t v317 = v2[3];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v318 = v2;
    if (v5 && v317)
    {
      (*(void (**)(uint64_t))(*(void *)v317 + 16))(v317);
      uint64_t v2 = v318;
      uint64_t v4 = *v318;
      uint64_t result = v316;
      unint64_t v176 = v318[1];
LABEL_306:
      int v10 = v543;
      char v26 = v549;
      char v127 = v553;
      int v130 = v563;
      char v40 = v864;
      int v124 = v899;
      int v122 = v723;
      int v52 = v757;
      int v45 = v809;
      char v47 = v836;
      char v119 = v779;
      int v116 = v677;
      char v118 = v704;
      int v115 = v640;
      char v110 = v653;
      int v106 = v602;
      int v99 = v622;
      int v92 = v574;
      char v93 = v587;
      goto LABEL_222;
    }
    uint64_t v4 = 0;
    uint64_t result = v316;
    unint64_t v176 = 0;
LABEL_454:
    uint64_t v2 = v318;
    goto LABEL_306;
  }
  v138 = (unsigned __int8 *)(v4 + v137);
  v2[2] = v138 + 1;
  if (!v4)
  {
    int v10 = v94;
    unint64_t v176 = v5;
LABEL_222:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v177 = v2[3];
    if (v177)
    {
      int v576 = v92;
      char v589 = v93;
      int v604 = v106;
      int v624 = v99;
      int v642 = v115;
      char v655 = v110;
      int v679 = v116;
      char v781 = v119;
      char v866 = v40;
      int v901 = v124;
      int v725 = v122;
      char v555 = v127;
      int v565 = v130;
      int v545 = v10;
      v321 = v2;
      unint64_t v322 = v176;
      v323 = result;
      unint64_t v5 = v322;
      if (v322)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v177 + 16))(v177, v4, v322);
        uint64_t v2 = v321;
        uint64_t v4 = *v321;
        unint64_t v5 = v321[1];
        uint64_t result = v323;
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v2 = v321;
      }
      int v10 = v545;
      char v127 = v555;
      int v130 = v565;
      char v40 = v866;
      int v124 = v901;
      int v122 = v725;
      char v119 = v781;
      int v116 = v679;
      int v115 = v642;
      char v110 = v655;
      int v106 = v604;
      int v99 = v624;
      int v92 = v576;
      char v93 = v589;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v4 = 0;
    }
    goto LABEL_224;
  }
  unsigned int v139 = *v138;
  int v10 = v94;
  if (v139 <= 1)
  {
    BOOL v140 = v139 != 0;
    if (v94) {
      goto LABEL_496;
    }
    int v141 = 0;
LABEL_129:
    if (!v940
      && !v130
      && !v124
      && !v122
      && !v45
      && !v52
      && !v116
      && !v115
      && !v99
      && !v106
      && !v938
      && !v92
      && !v937
      && !v936
      && !v935
      && !v125
      && !v134
      && !v141)
    {
      *uint64_t result = v928;
      result[1] = v929;
      result[2] = v26;
      result[3] = v127;
      result[4] = v40;
      result[5] = v47;
      result[6] = v119;
      result[7] = v118;
      result[8] = v110;
      result[9] = v932;
      result[10] = v931;
      result[11] = v930;
      result[12] = v93;
      result[13] = v927;
      result[14] = v926;
      result[15] = v925;
      result[16] = v128;
      result[17] = v136;
      result[18] = v140;
      result[19] = 1;
      return result;
    }
LABEL_496:
    __break(1u);
    return result;
  }
LABEL_224:
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v178 = v2[3];
  if (v178)
  {
    int v575 = v92;
    char v588 = v93;
    int v603 = v106;
    int v623 = v99;
    int v641 = v115;
    char v654 = v110;
    int v678 = v116;
    char v780 = v119;
    char v865 = v40;
    int v900 = v124;
    int v724 = v122;
    char v554 = v127;
    int v564 = v130;
    int v544 = v10;
    v319 = v2;
    v320 = result;
    if (v5)
    {
      uint64_t result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v178 + 16))(v178, v4);
      if (*v319)
      {
        char v127 = v554;
        int v130 = v564;
        int v92 = v575;
        char v40 = v865;
        int v124 = v900;
        int v122 = v724;
        char v119 = v780;
        int v116 = v678;
        int v115 = v641;
        char v110 = v654;
        int v106 = v603;
        int v99 = v623;
        char v93 = v588;
        BOOL v140 = v544;
        if (v544) {
          goto LABEL_496;
        }
        uint64_t result = v320;
        int v141 = 1;
        goto LABEL_129;
      }
      uint64_t v2 = v319;
      unint64_t v5 = v319[1];
      uint64_t v178 = v319[3];
      uint64_t result = v320;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  *uint64_t result = 0;
  result[19] = 0;
  *uint64_t v2 = 0;
  v2[1] = 0;
  if (v178 && v5)
  {
    v179 = *(uint64_t (**)(uint64_t, void))(*(void *)v178 + 16);
    return (char *)v179(v178, 0);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v19 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v19);
  uint64_t v4 = (uint64_t *)WebCore::CaptureDevice::label((WebCore::CaptureDevice *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
  unint64_t v5 = (uint64_t *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6 || !*(_DWORD *)(v6 + 4)) {
    unint64_t v5 = (uint64_t *)a2;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v5);
  char v7 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9) {
    goto LABEL_12;
  }
  *uint64_t v8 = v7;
  char v10 = *(unsigned char *)(a2 + 33);
  char v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19889126CLL);
  }
  *char v11 = v10;
  char v13 = *(unsigned char *)(a2 + 34);
  unint64_t v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19889128CLL);
  }
  *unint64_t v14 = v13;
  char v16 = *(unsigned char *)(a2 + 35);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x19889124CLL);
  }
  *uint64_t result = v16;
  return result;
}

_UNKNOWN **WebCore::CaptureDevice::label(WebCore::CaptureDevice *this)
{
  {
    WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
    WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
  }
  if (*((unsigned __int8 *)this + 8) - 1 > 1 || !*((void *)this + 2) || WTF::StringImpl::find() == -1) {
    return (_UNKNOWN **)((char *)this + 16);
  }
  else {
    return &WebCore::CaptureDevice::label(void)const::airPods;
  }
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CaptureDevice,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v85);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::CaptureDevice::DeviceType>((uint64_t *)a1);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v83);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v81);
  unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if ((unint64_t)v5 <= v7) {
    goto LABEL_63;
  }
  uint64_t v8 = (unsigned __int8 *)v6 + v7;
  uint64_t v9 = v8 + 1;
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    uint64_t v8 = v5;
    uint64_t v29 = 0;
    goto LABEL_64;
  }
  LODWORD(v8) = *v8;
  if (v8 < 2)
  {
    int v10 = 0;
    int v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v32 = *((void *)a1 + 3);
    if (!v32 || (int v74 = (int)v8, !v5))
    {
      int v11 = 0;
      char v13 = 0;
      uint64_t v6 = 0;
      int v10 = 1;
      goto LABEL_68;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v32 + 16))(v32, v6);
    int v11 = 0;
    uint64_t v6 = *(WTF::StringImpl **)a1;
    unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
    int v10 = 1;
    uint64_t v9 = (unsigned __int8 *)*((void *)a1 + 2);
    LODWORD(v8) = v74;
LABEL_5:
    if (!v8) {
      int v11 = 0;
    }
    if ((unint64_t)v5 <= v9 - (unsigned __int8 *)v6)
    {
      int v68 = v11;
      int v78 = v10;
      char v13 = 0;
      uint64_t v39 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v39 && v5)
      {
        (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
        uint64_t v6 = *(WTF::StringImpl **)a1;
        char v13 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v6 = 0;
      }
      int v11 = v68;
      int v10 = v78;
      goto LABEL_68;
    }
    uint64_t v12 = v9 + 1;
    *((void *)a1 + 2) = v9 + 1;
    if (!v6)
    {
      char v13 = v5;
LABEL_68:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v33 = *((void *)a1 + 3);
      if (v33)
      {
        int v67 = v11;
        int v77 = v10;
        if (v13)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v33 + 16))(v33, v6, v13);
          LODWORD(v13) = 0;
          uint64_t v6 = *(WTF::StringImpl **)a1;
          unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
        }
        else
        {
          unint64_t v5 = 0;
          uint64_t v6 = 0;
        }
        int v11 = v67;
        int v10 = v77;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
        LODWORD(v13) = 0;
      }
      goto LABEL_70;
    }
    LODWORD(v13) = *v9;
    if (v13 < 2)
    {
      int v14 = 0;
      int v15 = 1;
      goto LABEL_11;
    }
LABEL_70:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v34 = *((void *)a1 + 3);
    if (!v34)
    {
      int v15 = 0;
      int v17 = 0;
      uint64_t v6 = 0;
      int v14 = 1;
      goto LABEL_72;
    }
    int v57 = (int)v13;
    int v64 = v11;
    int v73 = v10;
    if (!v5)
    {
      int v15 = 0;
      int v17 = 0;
      uint64_t v6 = 0;
      int v14 = 1;
LABEL_72:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v35 = *((void *)a1 + 3);
      if (v35)
      {
        int v52 = v15;
        int v59 = v14;
        int v66 = v11;
        int v76 = v10;
        if (v17)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v35 + 16))(v35, v6, v17);
          LODWORD(v17) = 0;
          uint64_t v6 = *(WTF::StringImpl **)a1;
          unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
        }
        else
        {
          unint64_t v5 = 0;
          uint64_t v6 = 0;
        }
        int v11 = v66;
        int v10 = v76;
        int v15 = v52;
        int v14 = v59;
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
        LODWORD(v17) = 0;
      }
      goto LABEL_74;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v34 + 16))(v34, v6);
    int v15 = 0;
    uint64_t v6 = *(WTF::StringImpl **)a1;
    unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
    int v14 = 1;
    uint64_t v12 = (unsigned __int8 *)*((void *)a1 + 2);
    int v11 = v64;
    int v10 = v73;
    LODWORD(v13) = v57;
LABEL_11:
    if (!v13) {
      int v15 = 0;
    }
    if ((unint64_t)v5 <= v12 - (unsigned __int8 *)v6)
    {
      int v53 = v15;
      int v60 = v14;
      int v69 = v11;
      int v79 = v10;
      int v17 = 0;
      uint64_t v40 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v40 && v5)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        uint64_t v6 = *(WTF::StringImpl **)a1;
        int v17 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v6 = 0;
      }
      int v11 = v69;
      int v10 = v79;
      int v15 = v53;
      int v14 = v60;
      goto LABEL_72;
    }
    char v16 = v12 + 1;
    *((void *)a1 + 2) = v12 + 1;
    if (!v6)
    {
      int v17 = v5;
      goto LABEL_72;
    }
    LODWORD(v17) = *v12;
    if (v17 < 2)
    {
      int v18 = 0;
      int v19 = 1;
      goto LABEL_17;
    }
LABEL_74:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v36 = *((void *)a1 + 3);
    if (!v36)
    {
      int v19 = 0;
      unsigned int v37 = 0;
      uint64_t v6 = 0;
      int v18 = 1;
      goto LABEL_76;
    }
    int v46 = (int)v17;
    int v50 = v15;
    int v56 = v14;
    int v63 = v11;
    int v72 = v10;
    if (!v5)
    {
      int v19 = 0;
      unsigned int v37 = 0;
      uint64_t v6 = 0;
      int v18 = 1;
      goto LABEL_76;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v36 + 16))(v36, v6);
    int v19 = 0;
    uint64_t v6 = *(WTF::StringImpl **)a1;
    unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
    int v18 = 1;
    char v16 = (unsigned __int8 *)*((void *)a1 + 2);
    int v11 = v63;
    int v10 = v72;
    int v15 = v50;
    int v14 = v56;
    LODWORD(v17) = v46;
LABEL_17:
    if (!v17) {
      int v19 = 0;
    }
    if ((unint64_t)v5 <= v16 - (unsigned __int8 *)v6) {
      break;
    }
    *((void *)a1 + 2) = v16 + 1;
    if (!v6)
    {
      unsigned int v37 = v5;
      goto LABEL_76;
    }
    unsigned int v20 = *v16;
    if (v20 > 1) {
      goto LABEL_78;
    }
    int v21 = 0;
    BOOL v22 = v20 != 0;
LABEL_23:
    if (v86 && v4 > 0xFFu && v84 && v82 && !v10 && !v14 && !v18 && !v21)
    {
      unsigned int v23 = v85;
      if (v85) {
        *(_DWORD *)v85 += 2;
      }
      uint64_t v24 = v83;
      if (v83) {
        *(_DWORD *)v83 += 2;
      }
      uint64_t result = v81;
      if (v81) {
        *(_DWORD *)v81 += 2;
      }
      if (v15) {
        int v26 = 256;
      }
      else {
        int v26 = 0;
      }
      if (v19) {
        int v27 = 0x10000;
      }
      else {
        int v27 = 0;
      }
      if (v22) {
        int v28 = 0x1000000;
      }
      else {
        int v28 = 0;
      }
      *(void *)a2 = v23;
      *(unsigned char *)(a2 + 8) = v4;
      *(void *)(a2 + 16) = v24;
      *(void *)(a2 + 24) = result;
      *(_DWORD *)(a2 + 32) = v26 | v28 | v11 | v27;
      *(unsigned char *)(a2 + 40) = 1;
      goto LABEL_47;
    }
    __break(1u);
LABEL_63:
    uint64_t v8 = 0;
    uint64_t v29 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v30 = *((void *)a1 + 3);
    if (v30)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
        uint64_t v29 = *(WTF::StringImpl **)a1;
        uint64_t v8 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v29 = 0;
      }
    }
LABEL_64:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v31 = *((void *)a1 + 3);
    if (v31)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v31 + 16))(v31, v29, v8);
        LODWORD(v8) = 0;
        uint64_t v6 = *(WTF::StringImpl **)a1;
        unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      LODWORD(v8) = 0;
    }
  }
  int v44 = v18;
  int v48 = v19;
  int v54 = v15;
  int v61 = v14;
  int v70 = v11;
  int v80 = v10;
  unsigned int v37 = 0;
  uint64_t v41 = *((void *)a1 + 3);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if (v41 && v5)
  {
    (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
    uint64_t v6 = *(WTF::StringImpl **)a1;
    unsigned int v37 = (unsigned __int8 *)*((void *)a1 + 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  int v11 = v70;
  int v10 = v80;
  int v15 = v54;
  int v14 = v61;
  int v18 = v44;
  int v19 = v48;
LABEL_76:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v38 = *((void *)a1 + 3);
  if (v38)
  {
    int v43 = v18;
    int v47 = v19;
    int v51 = v15;
    int v58 = v14;
    int v65 = v11;
    int v75 = v10;
    if (v37)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v38 + 16))(v38, v6, v37);
      uint64_t v6 = *(WTF::StringImpl **)a1;
      unint64_t v5 = (unsigned __int8 *)*((void *)a1 + 1);
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    int v11 = v65;
    int v10 = v75;
    int v15 = v51;
    int v14 = v58;
    int v18 = v43;
    int v19 = v47;
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
  }
LABEL_78:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v5)
    {
      int v42 = v18;
      int v45 = v19;
      int v49 = v15;
      int v55 = v14;
      int v62 = v11;
      int v71 = v10;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v6);
      int v11 = v62;
      int v10 = v71;
      int v15 = v49;
      int v14 = v55;
      int v18 = v42;
      int v19 = v45;
      if (*(void *)a1)
      {
        BOOL v22 = 0;
        int v21 = 1;
        goto LABEL_23;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (!v82) {
    goto LABEL_51;
  }
  uint64_t result = v81;
LABEL_47:
  char v81 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_51:
  if (v84)
  {
    uint64_t result = v83;
    uint64_t v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v86)
  {
    uint64_t result = v85;
    unsigned int v85 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198891ADC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (*(unsigned char *)(v16 - 40))
  {
    int v18 = *(WTF::StringImpl **)(v16 - 48);
    *(void *)(v16 - 48) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, a2);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::CaptureDevice::DeviceType>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 6u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t IPC::ArgumentCoder<WebCore::CaptureDeviceWithCapabilities,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::CaptureDevice>(a1, (uint64_t)&v18);
  IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>((uint64_t *)a1, v16);
  if (!*(void *)a1) {
    goto LABEL_20;
  }
  if (!v22 || (v11 = v18, v12 = v19, long long v5 = v20, v18 = 0, v20 = 0uLL, *(_OWORD *)v13 = v5, v14 = v21, !v17))
  {
    __break(1u);
LABEL_20:
    *a2 = 0;
    a2[232] = 0;
    goto LABEL_16;
  }
  WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities((uint64_t)v15, v16);
  std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::__optional_destruct_base[abi:sn180100]<WebCore::CaptureDeviceWithCapabilities>((uint64_t)a2, (uint64_t *)&v11);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v15, v6);
  uint64_t v7 = v13[1];
  v13[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v13[0];
  v13[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v11;
  int v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v4);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
LABEL_16:
  if (v17) {
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v16, v4);
  }
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v4);
}

void sub_198891D7C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities(v62, a2);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v65);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v65);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v65);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a62) {
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&a38, v65);
  }
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100](v63 - 80, v65);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CaptureDevice>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CaptureDevice,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198891E94(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::decode(a1, a2);
  if (!a2[192])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198891F18(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 192)) {
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v17 = *(_DWORD *)a2;
  IPC::Encoder::operator<<<int>(a1, &v17);
  int v17 = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<int>(a1, &v17);
  int v17 = *(_DWORD *)(a2 + 8);
  IPC::Encoder::operator<<<int>(a1, &v17);
  int v17 = *(_DWORD *)(a2 + 12);
  IPC::Encoder::operator<<<int>(a1, &v17);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 16));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 32));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 40));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 60));
  uint64_t v4 = *(unsigned int *)(a2 + 60);
  if (v4)
  {
    uint64_t v5 = *(char **)(a2 + 48);
    do
    {
      char v6 = *v5++;
      LOBYTE(v17) = v6;
      IPC::Encoder::operator<<<BOOL>(a1, (char *)&v17);
      --v4;
    }
    while (v4);
  }
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 64));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 72));
  int v17 = *(_DWORD *)(a2 + 80);
  IPC::Encoder::operator<<<int>(a1, &v17);
  int v17 = *(_DWORD *)(a2 + 84);
  IPC::Encoder::operator<<<int>(a1, &v17);
  int v17 = *(_DWORD *)(a2 + 88);
  IPC::Encoder::operator<<<int>(a1, &v17);
  int v17 = *(_DWORD *)(a2 + 92);
  IPC::Encoder::operator<<<int>(a1, &v17);
  char v7 = *(unsigned char *)(a2 + 96);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9) {
    goto LABEL_10;
  }
  *uint64_t v8 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 104));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 112));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 120));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 128));
  IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 136);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 152));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 160));
  char v10 = *(unsigned char *)(a2 + 168);
  int v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198892184);
  }
  *int v11 = v10;
  LOBYTE(v17) = *(unsigned char *)(a2 + 169);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v17);
  char v13 = *(unsigned char *)(a2 + 170);
  int v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198892164);
  }
  *int v14 = v13;
  return IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSupportedConstraints,void>::encode(a1, (char *)(a2 + 171));
}

WTF *IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL v3 = a1;
  unint64_t v5 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(a1);
  LOBYTE(v7) = v6;
  unint64_t v8 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(v3);
  char v10 = v9;
  IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v116, v3);
  IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v114, v3);
  int v11 = (WTF *)IPC::Decoder::decode<unsigned long long>(v3);
  if (!v12) {
    goto LABEL_21;
  }
  char v13 = v11;
  long long v78 = 0uLL;
  if ((unint64_t)v11 >= 0x100000)
  {
    while (1)
    {
      unsigned __int16 v21 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(v3);
      LOWORD(v112) = v21;
      if (v21 < 0x100u) {
        break;
      }
      int v19 = HIDWORD(v78);
      if (HIDWORD(v78) == DWORD2(v78))
      {
        long long v20 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v78, (WTF *)(HIDWORD(v78) + 1), (unint64_t)&v112);
        int v19 = HIDWORD(v78);
        *(unsigned char *)(v78 + HIDWORD(v78)) = *v20;
      }
      else
      {
        *(unsigned char *)(v78 + HIDWORD(v78)) = v21;
      }
      HIDWORD(v78) = v19 + 1;
      char v13 = (WTF *)((char *)v13 - 1);
      if (!v13)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v78, (void *)(v19 + 1));
        int v72 = (WTF *)v78;
        int v18 = DWORD2(v78);
        int v2 = HIDWORD(v78);
        goto LABEL_11;
      }
    }
LABEL_19:
    char v22 = (WTF *)v78;
    if ((void)v78)
    {
      *(void *)&long long v78 = 0;
      DWORD2(v78) = 0;
      WTF::fastFree(v22, v15);
    }
LABEL_21:
    unsigned int v23 = (void *)*v3;
    uint64_t v24 = v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t result = (WTF *)v3[3];
    if (result) {
      goto LABEL_87;
    }
    goto LABEL_22;
  }
  if (v11)
  {
    DWORD2(v78) = v11;
    *(void *)&long long v78 = WTF::fastMalloc(v11);
    do
    {
      unsigned __int16 v14 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(v3);
      LOWORD(v112) = v14;
      if (v14 < 0x100u) {
        goto LABEL_19;
      }
      int v16 = HIDWORD(v78);
      if (HIDWORD(v78) == DWORD2(v78))
      {
        int v17 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v78, (WTF *)(HIDWORD(v78) + 1), (unint64_t)&v112);
        int v16 = HIDWORD(v78);
        *(unsigned char *)(v78 + HIDWORD(v78)) = *v17;
      }
      else
      {
        *(unsigned char *)(v78 + HIDWORD(v78)) = v14;
      }
      int v2 = v16 + 1;
      HIDWORD(v78) = v16 + 1;
      char v13 = (WTF *)((char *)v13 - 1);
    }
    while (v13);
    int v72 = (WTF *)v78;
    int v18 = DWORD2(v78);
LABEL_11:
    int v65 = v18;
  }
  else
  {
    int v2 = 0;
    int v65 = 0;
    int v72 = 0;
  }
  for (unsigned int i = 0; ; unsigned int i = 1)
  {
    IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v112, v3);
    unint64_t v70 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(v3);
    char v75 = v26;
    unint64_t v68 = v8;
    unint64_t v69 = v5;
    unint64_t v67 = IPC::Decoder::decode<WebCore::LongCapabilityRange>(v3);
    char v74 = v27;
    LOWORD(v78) = 0;
    IPC::Decoder::operator>><BOOL>(v3, &v78);
    int v73 = BYTE1(v78);
    if (BYTE1(v78))
    {
      char v66 = v78;
    }
    else
    {
      uint64_t v51 = *v3;
      uint64_t v52 = v3[1];
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t v53 = v3[3];
      if (v53 && v52) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v51);
      }
      char v66 = 0;
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v110);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)&v108);
    IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v106, v3);
    IPC::Decoder::decode<WTF::Vector<WebCore::MeteringMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&__src, v3);
    IPC::Decoder::decode<WebCore::DoubleCapabilityRange>((uint64_t)&v101, v3);
    unint64_t v28 = v3[1];
    uint64_t v29 = *v3;
    unint64_t v30 = v3[2] - *v3;
    int v71 = a2;
    if (v28 <= v30)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t v56 = v3[3];
      if (v56)
      {
        if (v28)
        {
          (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
          uint64_t v55 = *v3;
          uint64_t v54 = v3[1];
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
      }
      goto LABEL_92;
    }
    uint64_t v31 = (unsigned __int8 *)(v29 + v30);
    v3[2] = (uint64_t)(v31 + 1);
    if (!v29)
    {
      uint64_t v54 = v28;
      uint64_t v55 = 0;
LABEL_92:
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t v57 = v3[3];
      if (v57 && v54)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 16))(v57, v55, v54);
        unsigned int v32 = 0;
        uint64_t v29 = *v3;
        unint64_t v28 = v3[1];
      }
      else
      {
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        unsigned int v32 = 0;
      }
      goto LABEL_94;
    }
    unsigned int v32 = *v31;
    if (v32 < 2)
    {
      char v33 = v7;
      unint64_t v8 = 0;
      unsigned int v34 = 1;
      goto LABEL_29;
    }
LABEL_94:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v58 = v3[3];
    if (v58)
    {
      char v33 = v7;
      if (v28) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v29);
      }
    }
    else
    {
      char v33 = v7;
    }
    unsigned int v34 = 0;
    unint64_t v8 = 1;
LABEL_29:
    if (v32) {
      a2 = (unsigned char *)v34;
    }
    else {
      a2 = 0;
    }
    LOWORD(v78) = 0;
    IPC::Decoder::operator>><unsigned char>(v3, &v78);
    char v35 = v78;
    if (BYTE1(v78)) {
      BOOL v36 = v78 > 2u;
    }
    else {
      BOOL v36 = 1;
    }
    int v7 = v36;
    unint64_t v37 = v3[1];
    if (v7 == 1)
    {
      uint64_t v59 = *v3;
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t v60 = v3[3];
      if (!v60 || !v37)
      {
        char v35 = 0;
        unint64_t v37 = 0;
        uint64_t v38 = *v3;
LABEL_99:
        uint64_t *v3 = 0;
        v3[1] = 0;
        uint64_t v61 = v3[3];
        if (v61)
        {
          if (v37)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 16))(v61, v38);
            uint64_t v62 = *v3;
            unint64_t v37 = v3[1];
          }
          else
          {
            uint64_t v62 = 0;
          }
        }
        else
        {
          uint64_t v62 = 0;
          unint64_t v37 = 0;
        }
        goto LABEL_101;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v59);
      char v35 = 0;
      unint64_t v37 = v3[1];
    }
    uint64_t v38 = *v3;
    unint64_t v39 = v3[2] - *v3;
    if (v37 <= v39) {
      goto LABEL_99;
    }
    uint64_t v40 = (unsigned __int8 *)(v38 + v39);
    v3[2] = (uint64_t)(v40 + 1);
    if (v38)
    {
      unsigned int v41 = *v40;
      if (v41 < 2)
      {
        unint64_t v5 = 0;
        char v42 = 1;
        goto LABEL_43;
      }
      goto LABEL_104;
    }
    uint64_t v62 = 0;
LABEL_101:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v63 = v3[3];
    if (!v63)
    {
      unint64_t v37 = 0;
LABEL_103:
      uint64_t v38 = 0;
      unsigned int v41 = 0;
      goto LABEL_104;
    }
    if (!v37) {
      goto LABEL_103;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 16))(v63, v62);
    unsigned int v41 = 0;
    uint64_t v38 = *v3;
    unint64_t v37 = v3[1];
LABEL_104:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v64 = v3[3];
    if (v64 && v37) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 16))(v64, v38);
    }
    char v42 = 0;
    unint64_t v5 = 1;
LABEL_43:
    char v43 = v41 ? v42 : 0;
    uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::RealtimeMediaSourceSupportedConstraints>(v99, v3);
    if (!*v3) {
      break;
    }
    BOOL v3 = (uint64_t *)i;
    if (v33
      && v10
      && v117
      && v115
      && !i
      && v113
      && v75
      && v74
      && v73
      && v111
      && v109
      && v107
      && v105
      && v102
      && !v8
      && !v7
      && !v5
      && v100)
    {
      long long v76 = v101;
      *(void *)&long long v78 = v69;
      *((void *)&v78 + 1) = v68;
      long long v79 = v116;
      long long v80 = v114;
      char v81 = v72;
      int v82 = v65;
      int v83 = v2;
      long long v84 = v112;
      unint64_t v85 = v70;
      unint64_t v86 = v67;
      char v87 = v66;
      int v44 = v110;
      char v110 = 0;
      int v45 = v108;
      char v108 = 0;
      unint64_t v88 = v44;
      uint64_t v89 = v45;
      long long v90 = v106;
      size_t v46 = v104;
      unsigned int v91 = 0;
      int v92 = 0;
      unsigned int v93 = v104;
      if (v104)
      {
        int v47 = (void *)WTF::fastMalloc((WTF *)v104);
        int v92 = v46;
        unsigned int v91 = v47;
        memcpy(v47, __src, v46);
      }
      long long v94 = v76;
      char v95 = (char)a2;
      char v96 = v35;
      char v97 = v43;
      *(_OWORD *)unsigned int v98 = *(_OWORD *)v99;
      *(_DWORD *)&v98[15] = *(_DWORD *)&v99[15];
      *(unsigned char *)(WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities((uint64_t)v71, &v78) + 192) = 1;
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v78, v48);
      int v49 = 0;
      goto LABEL_68;
    }
    __break(1u);
LABEL_87:
    if (v24) {
      (*(void (**)(WTF *, void *))(*(void *)result + 16))(result, v23);
    }
LABEL_22:
    int v72 = 0;
  }
  int v49 = v72;
  *int v71 = 0;
  v71[192] = 0;
  LOBYTE(v3) = i;
  if (!v105) {
    goto LABEL_70;
  }
LABEL_68:
  uint64_t result = (WTF *)__src;
  if (__src)
  {
    __src = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v23);
  }
LABEL_70:
  if (v109)
  {
    uint64_t result = v108;
    char v108 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v111)
  {
    uint64_t result = v110;
    char v110 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v49) {
    char v50 = (char)v3;
  }
  else {
    char v50 = 1;
  }
  if ((v50 & 1) == 0) {
    return (WTF *)WTF::fastFree(v49, v23);
  }
  return result;
}

void sub_198892994(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,char a22,WTF *a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36,WTF::StringImpl *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF *a53,uint64_t a54,char a55)
{
  if (a55 && a53) {
    WTF::fastFree(a53, a2);
  }
  if (*(unsigned char *)(v55 - 216))
  {
    uint64_t v57 = *(WTF::StringImpl **)(v55 - 224);
    *(void *)(v55 - 224) = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v55 - 200))
  {
    uint64_t v58 = *(WTF::StringImpl **)(v55 - 208);
    *(void *)(v55 - 208) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2) {
        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v58 -= 2;
      }
    }
  }
  if (!a16) {
    a22 = 1;
  }
  if ((a22 & 1) == 0) {
    WTF::fastFree(a16, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebCore::LongCapabilityRange>(void *a1)
{
  uint64_t v2 = IPC::Decoder::decode<unsigned int>(a1);
  uint64_t v3 = IPC::Decoder::decode<unsigned int>(a1);
  if (!*a1) {
    goto LABEL_15;
  }
  if (BYTE4(v2) && BYTE4(v3))
  {
    BOOL v5 = (int)v2 < (int)v3;
    if (v2 == v3) {
      goto LABEL_13;
    }
LABEL_10:
    if (v5) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v3 = a1[3];
    if (!v3) {
      return 0;
    }
LABEL_19:
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    return 0;
  }
  if (BYTE4(v2)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = BYTE4(v3) != 0;
  }
  if ((BYTE4(v2) == 0) == (BYTE4(v3) != 0)) {
    goto LABEL_10;
  }
LABEL_11:
  if (!BYTE4(v2) || !BYTE4(v3))
  {
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if ((int)v2 <= (int)v3) {
    return v2 | ((unint64_t)v3 << 32);
  }
  unint64_t result = 48;
  __break(0xC471u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::DoubleCapabilityRange>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v22 = a2[3];
    if (v22)
    {
      unint64_t v39 = a2;
      uint64_t v35 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v3);
        a2 = v39;
        uint64_t v21 = *v39;
        unint64_t v20 = v39[1];
        unint64_t result = v35;
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_42;
  }
  char v6 = (double *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v20 = v2;
    uint64_t v21 = 0;
LABEL_42:
    *a2 = 0;
    a2[1] = 0;
    double v8 = 0.0;
    uint64_t v3 = a2[3];
    if (v3)
    {
      uint64_t v38 = a2;
      uint64_t v34 = result;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v3 + 16))(v3, v21, v20, 0.0);
        int v9 = 0;
        a2 = v38;
        unint64_t v2 = v38[1];
        int v7 = 1;
        uint64_t v3 = *v38;
        unint64_t result = v34;
        double v8 = 0.0;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        int v9 = 0;
        int v7 = 1;
      }
    }
    else
    {
      unint64_t v2 = 0;
      int v9 = 0;
      int v7 = 1;
    }
    goto LABEL_8;
  }
  int v7 = 0;
  double v8 = *v6;
  int v9 = 1;
LABEL_8:
  unint64_t v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v10 || v2 - v10 <= 7)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25)
    {
      int v30 = v7;
      int v32 = v9;
      double v28 = v8;
      uint64_t v40 = a2;
      uint64_t v36 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v3);
        a2 = v40;
        uint64_t v24 = *v40;
        unint64_t v23 = v40[1];
        unint64_t result = v36;
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      double v8 = v28;
      int v7 = v30;
      int v9 = v32;
    }
    goto LABEL_45;
  }
  char v12 = (double *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  a2[2] = v12 + 1;
  if (!v3)
  {
    unint64_t v23 = v2;
    uint64_t v24 = 0;
LABEL_45:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (!v26) {
      goto LABEL_31;
    }
    int v29 = v7;
    int v31 = v9;
    double v27 = v8;
    unint64_t v37 = a2;
    uint64_t v33 = result;
    if (!v23
      || ((*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24, v23), !*v37))
    {
      unint64_t result = v33;
      a2 = v37;
      goto LABEL_31;
    }
    int v17 = 0;
    double v13 = 0.0;
    int v16 = 1;
    unint64_t result = v33;
    a2 = v37;
    double v8 = v27;
    int v7 = v29;
    int v9 = v31;
    goto LABEL_29;
  }
  double v13 = *v12;
  if (v9)
  {
    if (v8 == v13) {
      int v14 = 0;
    }
    else {
      int v14 = -127;
    }
    if (v8 > v13) {
      int v14 = 1;
    }
    if (v8 < v13) {
      int v14 = -1;
    }
    if (v14 == -127 || (char)v14 >= 1) {
      goto LABEL_31;
    }
    goto LABEL_38;
  }
  int v16 = 0;
  int v17 = 1;
LABEL_29:
  if ((v17 & (v9 ^ 1) & 1) != 0 || v9 == v17)
  {
    if (v7 || v16)
    {
      __break(1u);
      goto LABEL_50;
    }
LABEL_38:
    if (v8 <= v13)
    {
      *(double *)unint64_t result = v8;
      *(double *)(result + 8) = v13;
      *(unsigned char *)(result + 16) = 1;
      return result;
    }
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x198892E24);
  }
LABEL_31:
  *(unsigned char *)unint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v18)
  {
    int v19 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v19();
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::MeteringMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = (WTF *)IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_12:
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = (WTF *)a2[3];
    if (result) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v13);
    }
    return result;
  }
  char v6 = v4;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if ((unint64_t)v4 >= 0x100000)
  {
    while (1)
    {
      unsigned __int16 v20 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a2);
      unsigned __int16 v22 = v20;
      if (v20 < 0x100u) {
        goto LABEL_25;
      }
      int v18 = HIDWORD(v24);
      if (HIDWORD(v24) == v24)
      {
        int v19 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        int v18 = HIDWORD(v24);
        *((unsigned char *)v23 + HIDWORD(v24)) = *v19;
      }
      else
      {
        *((unsigned char *)v23 + HIDWORD(v24)) = v20;
      }
      HIDWORD(v24) = v18 + 1;
      char v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v23, (void *)(v18 + 1));
        int v17 = 0;
        *(void *)a1 = v23;
        uint64_t v21 = v24;
        unint64_t v23 = 0;
        uint64_t v24 = 0;
        *(void *)(a1 + 8) = v21;
        goto LABEL_19;
      }
    }
  }
  if (v4)
  {
    LODWORD(v24) = v4;
    unint64_t v23 = (WTF *)WTF::fastMalloc(v4);
    while (1)
    {
      unsigned __int16 v7 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a2);
      unsigned __int16 v22 = v7;
      if (v7 < 0x100u) {
        break;
      }
      int v8 = HIDWORD(v24);
      if (HIDWORD(v24) == v24)
      {
        int v9 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, (WTF *)(HIDWORD(v24) + 1), (unint64_t)&v22);
        int v8 = HIDWORD(v24);
        *((unsigned char *)v23 + HIDWORD(v24)) = *v9;
      }
      else
      {
        *((unsigned char *)v23 + HIDWORD(v24)) = v7;
      }
      int v10 = v8 + 1;
      HIDWORD(v24) = v10;
      char v6 = (WTF *)((char *)v6 - 1);
      if (!v6)
      {
        int v11 = v23;
        int v12 = v24;
        goto LABEL_18;
      }
    }
LABEL_25:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    int v17 = 1;
    goto LABEL_26;
  }
  int v10 = 0;
  int v12 = 0;
  int v11 = 0;
LABEL_18:
  int v17 = 0;
  unint64_t v23 = 0;
  *(void *)a1 = v11;
  HIDWORD(v24) = 0;
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 12) = v10;
LABEL_19:
  *(unsigned char *)(a1 + 16) = 1;
LABEL_26:
  unint64_t result = v23;
  if (v23)
  {
    unint64_t v23 = 0;
    LODWORD(v24) = 0;
    unint64_t result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v17) {
    goto LABEL_12;
  }
  return result;
}

void sub_198893198(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, a2 + 4);

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 6);
}

void *IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(void *a1, unsigned char *a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2 + 4);

  return IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2 + 6);
}

unint64_t IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::decode(uint64_t *a1)
{
  int v2 = IPC::Decoder::decode<std::optional<WebCore::PlatformVideoColorPrimaries>>(a1);
  int v3 = IPC::Decoder::decode<std::optional<WebCore::PlatformVideoTransferCharacteristics>>(a1);
  int v4 = IPC::Decoder::decode<std::optional<WebCore::PlatformVideoMatrixCoefficients>>(a1);
  uint64_t v5 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
  if (*a1)
  {
    if ((v2 & 0xFF0000) != 0 && (v3 & 0xFF0000) != 0 && (v4 & 0xFF0000) != 0 && (v5 & 0xFF0000) != 0) {
      return ((unint64_t)(unsigned __int16)v4 << 32) | (v5 << 48) | (v3 << 16) | (unint64_t)(unsigned __int16)v2;
    }
    __break(1u);
  }
  return 0;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PlatformVideoColorPrimaries>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PlatformVideoTransferCharacteristics>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoTransferCharacteristics>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::PlatformVideoMatrixCoefficients>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoMatrixCoefficients>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::RTCDataChannelIdentifier,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  if (!v6 || !v8)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  LOBYTE(v9) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ContentRuleListResults::Result,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 3);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 4);

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)(a2 + 8));
}

uint64_t IPC::ArgumentCoder<WebCore::ContentRuleListResults,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = (unsigned __int8 *)*((void *)a1 + 1);
  char v6 = *(unsigned char **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if ((unint64_t)v5 <= v7)
  {
    unsigned int v41 = 0;
    char v42 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v43 = *((void *)a1 + 3);
    if (v43)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
        char v42 = *(unsigned char **)a1;
        unsigned int v41 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        unsigned int v41 = 0;
        char v42 = 0;
      }
    }
    goto LABEL_46;
  }
  char v8 = &v6[v7];
  uint64_t v9 = (uint64_t)&v6[v7 + 1];
  *((void *)a1 + 2) = v9;
  if (!v6)
  {
    unsigned int v41 = v5;
    char v42 = 0;
LABEL_46:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44 && v41)
    {
      (*(void (**)(uint64_t, unsigned char *, unsigned __int8 *))(*(void *)v44 + 16))(v44, v42, v41);
      unsigned int v10 = 0;
      char v6 = *(unsigned char **)a1;
      char v5 = (unsigned __int8 *)*((void *)a1 + 1);
    }
    else
    {
      char v5 = 0;
      char v6 = 0;
      unsigned int v10 = 0;
    }
    goto LABEL_48;
  }
  unsigned int v10 = *v8;
  if (v10 < 2)
  {
    int v11 = 0;
    char v12 = 1;
    goto LABEL_5;
  }
LABEL_48:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v45 = *((void *)a1 + 3);
  if (!v45 || !v5)
  {
    char v13 = 0;
    size_t v46 = 0;
    char v6 = 0;
    int v11 = 1;
    goto LABEL_50;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v45 + 16))(v45, v6);
  char v12 = 0;
  char v6 = *(unsigned char **)a1;
  char v5 = (unsigned __int8 *)*((void *)a1 + 1);
  int v11 = 1;
  uint64_t v9 = *((void *)a1 + 2);
LABEL_5:
  if (v10) {
    char v13 = v12;
  }
  else {
    char v13 = 0;
  }
  unint64_t v14 = v9 - (void)v6;
  if ((unint64_t)v5 <= v14)
  {
    int v72 = v11;
    size_t v46 = 0;
    uint64_t v73 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v5 && v73)
    {
      (*(void (**)(uint64_t))(*(void *)v73 + 16))(v73);
      char v6 = *(unsigned char **)a1;
      size_t v46 = (unsigned __int8 *)*((void *)a1 + 1);
    }
    else
    {
      char v6 = 0;
    }
    int v11 = v72;
    goto LABEL_50;
  }
  uint64_t v15 = &v6[v14];
  uint64_t v16 = (uint64_t)&v6[v14 + 1];
  *((void *)a1 + 2) = v16;
  if (!v6)
  {
    size_t v46 = v5;
LABEL_50:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v47 = *((void *)a1 + 3);
    if (v47)
    {
      int v2 = v11;
      if (v46)
      {
        (*(void (**)(uint64_t, unsigned char *, unsigned __int8 *))(*(void *)v47 + 16))(v47, v6, v46);
        unsigned int v17 = 0;
        char v6 = *(unsigned char **)a1;
        char v5 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        char v5 = 0;
        char v6 = 0;
        unsigned int v17 = 0;
      }
      int v11 = v2;
    }
    else
    {
      char v5 = 0;
      char v6 = 0;
      unsigned int v17 = 0;
    }
    goto LABEL_52;
  }
  unsigned int v17 = *v15;
  if (v17 < 2)
  {
    int v18 = 0;
    int v19 = 1;
    goto LABEL_12;
  }
LABEL_52:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v48 = *((void *)a1 + 3);
  if (!v48)
  {
    LODWORD(v20) = 0;
    unsigned __int16 v22 = 0;
    char v6 = 0;
    int v18 = 1;
    goto LABEL_54;
  }
  int v2 = v11;
  if (!v5)
  {
    LODWORD(v20) = 0;
    unsigned __int16 v22 = 0;
    char v6 = 0;
    int v18 = 1;
LABEL_54:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v49 = *((void *)a1 + 3);
    if (v49)
    {
      int v93 = (int)v20;
      int v2 = v18;
      int v80 = v11;
      if (v22)
      {
        (*(void (**)(uint64_t, unsigned char *, unsigned __int8 *))(*(void *)v49 + 16))(v49, v6, v22);
        LODWORD(v22) = 0;
        char v6 = *(unsigned char **)a1;
        char v5 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        char v5 = 0;
        char v6 = 0;
      }
      int v11 = v80;
      int v18 = v2;
      LODWORD(v20) = v93;
    }
    else
    {
      char v5 = 0;
      char v6 = 0;
      LODWORD(v22) = 0;
    }
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v48 + 16))(v48, v6);
  int v19 = 0;
  char v6 = *(unsigned char **)a1;
  char v5 = (unsigned __int8 *)*((void *)a1 + 1);
  int v18 = 1;
  uint64_t v16 = *((void *)a1 + 2);
  int v11 = v2;
LABEL_12:
  if (v17) {
    LODWORD(v20) = v19;
  }
  else {
    LODWORD(v20) = 0;
  }
  unint64_t v21 = v16 - (void)v6;
  if ((unint64_t)v5 <= v21)
  {
    int v88 = (int)v20;
    int v2 = v18;
    int v74 = v11;
    unsigned __int16 v22 = 0;
    uint64_t v75 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v5 && v75)
    {
      (*(void (**)(uint64_t))(*(void *)v75 + 16))(v75);
      char v6 = *(unsigned char **)a1;
      unsigned __int16 v22 = (unsigned __int8 *)*((void *)a1 + 1);
    }
    else
    {
      char v6 = 0;
    }
    int v11 = v74;
    int v18 = v2;
    LODWORD(v20) = v88;
    goto LABEL_54;
  }
  unsigned __int16 v22 = &v6[v21];
  unint64_t v23 = v22 + 1;
  *((void *)a1 + 2) = v22 + 1;
  if (!v6)
  {
    unsigned __int16 v22 = v5;
    goto LABEL_54;
  }
  LODWORD(v22) = *v22;
  if (v22 < 2)
  {
    int v24 = 0;
    char v25 = 1;
    goto LABEL_19;
  }
LABEL_56:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v50 = *((void *)a1 + 3);
  if (!v50)
  {
    char v25 = 0;
    uint64_t v51 = 0;
    char v6 = 0;
    int v24 = 1;
    goto LABEL_58;
  }
  int v87 = v18;
  int v92 = (int)v20;
  int v79 = v11;
  if (!v5)
  {
    char v25 = 0;
    uint64_t v51 = 0;
    char v6 = 0;
    int v24 = 1;
    LODWORD(v20) = v92;
LABEL_58:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v52 = *((void *)a1 + 3);
    if (v52)
    {
      char v83 = v25;
      int v86 = v24;
      int v91 = (int)v20;
      int v2 = v18;
      int v78 = v11;
      if (v51)
      {
        (*(void (**)(uint64_t, unsigned char *, unsigned __int8 *))(*(void *)v52 + 16))(v52, v6, v51);
        char v6 = *(unsigned char **)a1;
        char v5 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        char v5 = 0;
        char v6 = 0;
      }
      int v11 = v78;
      int v18 = v2;
      int v24 = v86;
      LODWORD(v20) = v91;
      char v25 = v83;
    }
    else
    {
      char v5 = 0;
      char v6 = 0;
    }
LABEL_60:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v53 = *((void *)a1 + 3);
    if (v53)
    {
      char v82 = v25;
      int v85 = v24;
      int v90 = v11;
      if (v5)
      {
        int v2 = v18;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v53 + 16))(v53, v6);
        char v6 = *(unsigned char **)a1;
        if (*(void *)a1)
        {
          char v25 = v82;
          int v24 = v85;
          BOOL v27 = v90;
          if (v90) {
            goto LABEL_144;
          }
          int v18 = v2;
          int v28 = 1;
          goto LABEL_26;
        }
        char v5 = (unsigned __int8 *)*((void *)a1 + 1);
        uint64_t v53 = *((void *)a1 + 3);
      }
    }
    else
    {
      char v5 = 0;
    }
    LOBYTE(v103) = 0;
    char v108 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v53 && v5) {
      (*(void (**)(uint64_t, void))(*(void *)v53 + 16))(v53, 0);
    }
    goto LABEL_30;
  }
  int v2 = (int)v22;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v50 + 16))(v50, v6);
  char v25 = 0;
  char v6 = *(unsigned char **)a1;
  char v5 = (unsigned __int8 *)*((void *)a1 + 1);
  int v24 = 1;
  unint64_t v23 = (unsigned __int8 *)*((void *)a1 + 2);
  int v11 = v79;
  int v18 = v87;
  LODWORD(v20) = v92;
  LODWORD(v22) = v2;
LABEL_19:
  if (!v22) {
    char v25 = 0;
  }
  if ((unint64_t)v5 <= v23 - v6)
  {
    char v81 = v25;
    int v84 = v24;
    int v89 = (int)v20;
    int v2 = v18;
    int v76 = v11;
    uint64_t v51 = 0;
    uint64_t v77 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v5 && v77)
    {
      (*(void (**)(uint64_t))(*(void *)v77 + 16))(v77);
      char v6 = *(unsigned char **)a1;
      uint64_t v51 = (unsigned __int8 *)*((void *)a1 + 1);
    }
    else
    {
      char v6 = 0;
    }
    int v11 = v76;
    int v18 = v2;
    int v24 = v84;
    LODWORD(v20) = v89;
    char v25 = v81;
    goto LABEL_58;
  }
  *((void *)a1 + 2) = v23 + 1;
  if (!v6)
  {
    uint64_t v51 = v5;
    goto LABEL_58;
  }
  unsigned int v26 = *v23;
  if (v26 > 1) {
    goto LABEL_60;
  }
  BOOL v27 = v26 != 0;
  if (v11) {
    goto LABEL_144;
  }
  int v28 = 0;
LABEL_26:
  LOBYTE(v94) = v13;
  if (v18) {
    goto LABEL_144;
  }
  BYTE1(v94) = (_BYTE)v20;
  if (v24) {
    goto LABEL_144;
  }
  BYTE2(v94) = v25;
  if (v28) {
    goto LABEL_144;
  }
  BYTE3(v94) = v27;
  int v103 = v94;
  uint64_t v95 = 0;
  uint64_t v104 = 0;
  uint64_t v96 = 0;
  uint64_t v105 = 0;
  uint64_t v97 = 0;
  uint64_t v106 = 0;
  uint64_t v98 = 0;
  uint64_t v107 = 0;
  char v108 = 1;
  WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v6);
  WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v29);
LABEL_30:
  unint64_t v30 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v31)
  {
    unint64_t v32 = v30;
    char v109 = 0;
    uint64_t v110 = 0;
    if (v30 < 0x8000)
    {
      if (v30)
      {
        uint64_t v33 = WTF::fastMalloc((WTF *)(32 * v30));
        LODWORD(v110) = v32;
        char v109 = (WTF::StringImpl *)v33;
        unsigned __int16 v20 = &v95;
        do
        {
          IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((uint64_t)&v94, a1);
          if (!(_BYTE)v98) {
            goto LABEL_79;
          }
          if (HIDWORD(v110) == v110)
          {
            WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((unsigned int *)&v109, (unint64_t)&v94);
          }
          else
          {
            uint64_t v35 = (char *)v109 + 32 * HIDWORD(v110);
            uint64_t v36 = v94;
            uint64_t v94 = 0;
            *(void *)uint64_t v35 = v36;
            LODWORD(v36) = v95;
            v35[12] = BYTE4(v95);
            *((_DWORD *)v35 + 2) = v36;
            *((void *)v35 + 2) = 0;
            *((void *)v35 + 3) = 0;
            uint64_t v37 = v96;
            uint64_t v96 = 0;
            *((void *)v35 + 2) = v37;
            LODWORD(v37) = v97;
            LODWORD(v97) = 0;
            *((_DWORD *)v35 + 6) = v37;
            LODWORD(v37) = HIDWORD(v97);
            HIDWORD(v97) = 0;
            *((_DWORD *)v35 + 7) = v37;
            ++HIDWORD(v110);
          }
          std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94, v34);
          --v32;
        }
        while (v32);
        uint64_t v38 = v109;
        LODWORD(v20) = v110;
        int v2 = HIDWORD(v110);
      }
      else
      {
        int v2 = 0;
        LODWORD(v20) = 0;
        uint64_t v38 = 0;
      }
      char v109 = 0;
      char v100 = v38;
      goto LABEL_43;
    }
    unsigned __int16 v20 = &v95;
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((uint64_t)&v94, a1);
      if (!(_BYTE)v98) {
        break;
      }
      if (HIDWORD(v110) == v110)
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>((unsigned int *)&v109, (unint64_t)&v94);
      }
      else
      {
        uint64_t v54 = (char *)v109 + 32 * HIDWORD(v110);
        uint64_t v55 = v94;
        uint64_t v94 = 0;
        *(void *)uint64_t v54 = v55;
        LODWORD(v55) = v95;
        v54[12] = BYTE4(v95);
        *((_DWORD *)v54 + 2) = v55;
        *((void *)v54 + 2) = 0;
        *((void *)v54 + 3) = 0;
        uint64_t v56 = v96;
        uint64_t v96 = 0;
        *((void *)v54 + 2) = v56;
        LODWORD(v56) = v97;
        LODWORD(v97) = 0;
        *((_DWORD *)v54 + 6) = v56;
        LODWORD(v56) = HIDWORD(v97);
        HIDWORD(v97) = 0;
        *((_DWORD *)v54 + 7) = v56;
        ++HIDWORD(v110);
      }
      std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94, v34);
      if (!--v32)
      {
        uint64_t v57 = HIDWORD(v110);
        uint64_t v58 = v109;
        if (v110 <= HIDWORD(v110)) {
          goto LABEL_78;
        }
        uint64_t v59 = v109;
        if (!HIDWORD(v110)) {
          goto LABEL_76;
        }
        if (HIDWORD(v110) >> 27)
        {
          __break(0xC471u);
        }
        else
        {
          uint64_t v60 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v110)));
          LODWORD(v110) = v57;
          char v109 = (WTF::StringImpl *)v60;
          uint64_t v59 = v58;
          if ((WTF::StringImpl *)v60 != v58)
          {
            WTF::VectorMover<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>>::move(v58, (WTF::StringImpl *)((char *)v58 + 32 * v57), v60);
            uint64_t v59 = v109;
          }
LABEL_76:
          if (v58)
          {
            if (v59 == v58)
            {
              char v109 = 0;
              LODWORD(v110) = 0;
            }
            WTF::fastFree(v58, v31);
            uint64_t v58 = v109;
          }
          else
          {
            uint64_t v58 = v59;
          }
LABEL_78:
          char v109 = 0;
          char v100 = v58;
          LODWORD(v20) = v110;
          int v2 = HIDWORD(v110);
LABEL_43:
          uint64_t v110 = 0;
          unint64_t v101 = __PAIR64__(v2, v20);
          char v102 = 1;
          WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v31);
          int v40 = 0;
          if (!*(void *)a1)
          {
            *(unsigned char *)a2 = 0;
            *(unsigned char *)(a2 + 56) = 0;
            goto LABEL_86;
          }
LABEL_83:
          if (v108)
          {
            LODWORD(v94) = v103;
            uint64_t v64 = v104;
            uint64_t v104 = 0;
            uint64_t v65 = v105;
            uint64_t v105 = 0;
            uint64_t v66 = v106;
            uint64_t v106 = 0;
            uint64_t v67 = v107;
            uint64_t v107 = 0;
            if (!v40)
            {
              unint64_t v68 = v100;
              char v100 = 0;
              unint64_t v101 = 0;
              *(_DWORD *)a2 = v103;
              uint64_t v95 = 0;
              *(void *)(a2 + 8) = v64;
              uint64_t v96 = 0;
              *(void *)(a2 + 16) = v65;
              uint64_t v97 = 0;
              *(void *)(a2 + 24) = v66;
              uint64_t v98 = 0;
              *(void *)(a2 + 32) = v67;
              v99[0] = 0;
              *(void *)(a2 + 40) = v68;
              v99[1] = 0;
              *(_DWORD *)(a2 + 48) = v20;
              *(_DWORD *)(a2 + 52) = v2;
              *(unsigned char *)(a2 + 56) = 1;
              WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v99, v39);
              WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v69);
              WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v70);
LABEL_86:
              WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v39);
              return std::__optional_destruct_base<WebCore::ContentRuleListResults::Summary,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v103, v39);
            }
          }
LABEL_144:
          __break(1u);
        }
        JUMPOUT(0x198893F88);
      }
    }
LABEL_79:
    LOBYTE(v100) = 0;
    char v102 = 0;
    std::__optional_destruct_base<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94, v34);
    WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v61);
  }
  else
  {
    LOBYTE(v100) = 0;
    char v102 = 0;
  }
  unint64_t v39 = *(unsigned char **)a1;
  uint64_t v62 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v63 = *((void *)a1 + 3);
  if (v63 && v62) {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v63 + 16))(v63, v39);
  }
  if (*(void *)a1)
  {
    int v40 = 1;
    goto LABEL_83;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 56) = 0;
  return std::__optional_destruct_base<WebCore::ContentRuleListResults::Summary,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v103, v39);
}

void sub_198893FA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__optional_destruct_base<WebCore::ContentRuleListResults::Summary,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::SourceImage>::optional[abi:sn180100]<WebCore::SourceImage,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  std::__optional_move_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::__optional_move_base[abi:sn180100]((unsigned char *)(v4 + 16), a2 + 16);
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void sub_198894034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9B4B40[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::LinkIcon,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 40);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 56);
  return IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 64);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::LinkIcon,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, &v31);
  LOWORD(v19) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v19);
  if (!BYTE1(v19)
    || ((char v4 = (char)v19, v19 <= 4u) ? (v5 = ((1 << (char)v19) & 0x16) == 0) : (v5 = 1), v5))
  {
    unint64_t v7 = *(WTF::StringImpl **)a1;
    uint64_t v8 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_37;
    }
    goto LABEL_8;
  }
  for (int i = 0; ; int i = 1)
  {
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v29);
    uint64_t v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
    char v12 = v11;
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v26);
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      goto LABEL_23;
    }
    if (v34)
    {
      uint64_t v13 = v31;
      int v31 = 0;
      int v19 = v13;
      long long v20 = v32;
      long long v21 = v33;
      LODWORD(v32) = v32 & 0xFFFFFFFE;
      if (!i)
      {
        char v22 = v4;
        if (v30)
        {
          unint64_t v14 = v29;
          int v29 = 0;
          v23[0] = v14;
          if (v12)
          {
            LODWORD(v23[1]) = v10;
            BYTE4(v23[1]) = BYTE4(v10);
            if (v28) {
              break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_37:
    if (v8) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v7);
    }
LABEL_8:
    char v4 = 0;
  }
  uint64_t v24 = v26;
  uint64_t v15 = v27;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = v15;
  WTF::URL::URL(a2, (uint64_t *)&v19);
  *(unsigned char *)(a2 + 40) = v22;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v23;
  v23[0] = 0;
  *(void *)(a2 + 64) = v24;
  uint64_t v16 = v25;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  *(void *)(a2 + 72) = v16;
  *(unsigned char *)(a2 + 80) = 1;
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v17);
  int v18 = v23[0];
  v23[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v7);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t result = v19;
  int v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_23:
  if (v28) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v7);
  }
  if (v30)
  {
    uint64_t result = v29;
    int v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v34)
  {
    uint64_t result = v31;
    int v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198894354(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,WTF::StringImpl *a23,char a24)
{
  if (*(unsigned char *)(v24 - 56))
  {
    uint64_t v26 = *(WTF::StringImpl **)(v24 - 96);
    *(void *)(v24 - 96) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, a2);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988944A0(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 32);

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 48);
}

uint64_t IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<double>>(a1, &v15);
  IPC::Decoder::decode<std::optional<WTF::Seconds>>((uint64_t *)a1, &v12);
  IPC::Decoder::decode<std::optional<WTF::Seconds>>((uint64_t *)a1, &v9);
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (!*(void *)a1) {
    goto LABEL_9;
  }
  if (!v17
    || (*(void *)&long long v6 = v15, BYTE8(v6) = v16, !v14)
    || (*(void *)&long long v7 = v12, BYTE8(v7) = v13, !v11)
    || (*(void *)&long long v8 = v9, BYTE8(v8) = v10, !v5))
  {
    __break(1u);
LABEL_9:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    return result;
  }
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 48) = result;
  *(unsigned char *)(a2 + 52) = BYTE4(result);
  *(unsigned char *)(a2 + 56) = 1;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned short const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::VectorArgumentCoder<false,CGSize,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 32));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 36));
  char v5 = *(unsigned char *)(a2 + 40);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

uint64_t *IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = *(const void **)a2;
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  uint64_t v6 = *result;
  unint64_t v7 = result[2];
  unint64_t v8 = *result + v7;
  unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v15 = v9 >= v8;
  unint64_t v10 = v9 - v8;
  if (v15)
  {
    unint64_t v11 = v10 + v7;
    unint64_t v12 = v10 + v7 + 8;
    if (v11 > 0xFFFFFFFFFFFFFFF7 || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(v6 + v11) = v5;
      result[2] = v12;
      uint64_t v6 = *result;
      unint64_t v7 = v12;
    }
  }
  char v14 = (char *)((v6 + v7 + 1) & 0xFFFFFFFFFFFFFFFELL);
  if (v5) {
    BOOL v15 = (unint64_t)v14 >= v6 + v7;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    unint64_t v16 = (unint64_t)&v14[2 * v5 - v6];
    if (__CFADD__(&v14[-v6], 2 * v5) || v16 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      uint64_t result = (uint64_t *)memcpy(v14, v4, 2 * v5);
      v3[2] = v16;
      uint64_t v6 = *v3;
      unint64_t v7 = v16;
    }
  }
  uint64_t v17 = *(unsigned int *)(a2 + 28);
  unint64_t v18 = (v6 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = v18 - (v6 + v7);
  if (v18 >= v6 + v7)
  {
    unint64_t v20 = v18 - v6;
    unint64_t v21 = v19 + v7 + 8;
    if (v20 > 0xFFFFFFFFFFFFFFF7 || v21 > v3[1])
    {
      v3[1] = 0;
    }
    else
    {
      *(void *)(v6 + v20) = v17;
      v3[2] = v21;
      uint64_t v17 = *(unsigned int *)(a2 + 28);
      unint64_t v7 = v21;
    }
  }
  if (v17)
  {
    unint64_t v23 = *(void **)(a2 + 16);
    uint64_t v24 = &v23[2 * v17];
    do
    {
      uint64_t v25 = *v3;
      unint64_t v26 = *v3 + v7;
      unint64_t v27 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
      BOOL v15 = v27 >= v26;
      unint64_t v28 = v27 - v26;
      if (v15)
      {
        unint64_t v29 = v28 + v7;
        unint64_t v30 = v28 + v7 + 8;
        if (v29 > 0xFFFFFFFFFFFFFFF7 || v30 > v3[1])
        {
          v3[1] = 0;
        }
        else
        {
          *(void *)(v25 + v29) = *v23;
          v3[2] = v30;
          uint64_t v25 = *v3;
          unint64_t v7 = v30;
        }
      }
      unint64_t v32 = (v25 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = v32 - (v25 + v7);
      if (v32 >= v25 + v7)
      {
        unint64_t v34 = v32 - v25;
        unint64_t v35 = v33 + v7 + 8;
        if (v34 > 0xFFFFFFFFFFFFFFF7 || v35 > v3[1])
        {
          v3[1] = 0;
        }
        else
        {
          *(void *)(v25 + v34) = v23[1];
          v3[2] = v35;
          unint64_t v7 = v35;
        }
      }
      v23 += 2;
    }
    while (v23 != v24);
  }
  uint64_t v37 = *v3;
  unint64_t v38 = *v3 + v7;
  unint64_t v39 = (v38 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v15 = v39 >= v38;
  unint64_t v40 = v39 - v38;
  if (v15)
  {
    unint64_t v41 = v40 + v7;
    unint64_t v42 = v40 + v7 + 4;
    if (v41 > 0xFFFFFFFFFFFFFFFBLL || v42 > v3[1])
    {
      v3[1] = 0;
    }
    else
    {
      *(_DWORD *)(v37 + v41) = *(_DWORD *)(a2 + 32);
      v3[2] = v42;
      uint64_t v37 = *v3;
      unint64_t v7 = v42;
    }
  }
  unint64_t v44 = (v37 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v45 = v44 - (v37 + v7);
  if (v44 >= v37 + v7)
  {
    unint64_t v46 = v44 - v37;
    unint64_t v47 = v45 + v7 + 4;
    if (v46 > 0xFFFFFFFFFFFFFFFBLL || v47 > v3[1])
    {
      v3[1] = 0;
    }
    else
    {
      *(_DWORD *)(v37 + v46) = *(_DWORD *)(a2 + 36);
      v3[2] = v47;
      unint64_t v7 = v47;
    }
  }
  if (v7 >= v3[1])
  {
    v3[1] = 0;
  }
  else
  {
    *(unsigned char *)(*v3 + v7) = *(unsigned char *)(a2 + 40);
    v3[2] = v7 + 1;
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = IPC::Decoder::decode<WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v49, a1);
  unint64_t v8 = a1[1];
  unint64_t v9 = *a1;
  unint64_t v10 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v8 >= v10 && v8 - v10 > 7)
  {
    unint64_t v12 = (WTF **)(v9 + v10);
    a1[2] = (unint64_t)(v12 + 1);
    if (!v9)
    {
      unint64_t v31 = v8;
      unint64_t v32 = 0;
      goto LABEL_44;
    }
    unint64_t v2 = (unint64_t)*v12;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    if (v2 >= 0x10000)
    {
      do
      {
        uint64_t v5 = (uint64_t)IPC::Decoder::decode<CGSize>((uint64_t)&v52, a1, v7);
        if (!v53) {
          goto LABEL_38;
        }
        int v41 = HIDWORD(v55);
        if (HIDWORD(v55) == v55)
        {
          __n128 v7 = WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize>((uint64_t)&v54, (unint64_t)&v52);
        }
        else
        {
          __n128 v7 = v52;
          *((__n128 *)v54 + HIDWORD(v55)) = v52;
          HIDWORD(v55) = v41 + 1;
        }
        --v2;
      }
      while (v2);
      int v17 = v55;
      int v16 = HIDWORD(v55);
      unint64_t v2 = (unint64_t)v54;
      if (v55 > HIDWORD(v55))
      {
        if (HIDWORD(v55))
        {
          uint64_t v5 = WTF::fastRealloc(v54, (void *)(16 * HIDWORD(v55)));
          unint64_t v2 = v5;
          int v17 = v16;
        }
        else if (v54)
        {
          uint64_t v54 = 0;
          uint64_t v5 = WTF::fastFree((WTF *)v2, v6);
          int v16 = 0;
          int v17 = 0;
          unint64_t v2 = 0;
        }
        else
        {
          int v16 = 0;
        }
      }
    }
    else
    {
      if (v2)
      {
        char v13 = (WTF *)WTF::fastMalloc((WTF *)(16 * v2));
        LODWORD(v55) = v2;
        uint64_t v54 = v13;
        goto LABEL_10;
      }
      int v16 = 0;
      int v17 = 0;
    }
LABEL_15:
    if (!*a1) {
      goto LABEL_42;
    }
    if (!v51) {
      goto LABEL_56;
    }
    if (HIDWORD(v50) != v16) {
      goto LABEL_42;
    }
    uint64_t v5 = (uint64_t)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    unint64_t v18 = a1[1];
    uint64_t v20 = v19;
    if (!v19)
    {
      unint64_t v35 = *a1;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v36 = a1[3];
      if (!v36 || !v18)
      {
        unint64_t v18 = 0;
        uint64_t v6 = (char *)*a1;
        goto LABEL_49;
      }
      uint64_t v48 = v5;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v36 + 16))(v36, v35);
      uint64_t v5 = v48;
      unint64_t v18 = a1[1];
      uint64_t v20 = 0;
    }
    uint64_t v6 = (char *)*a1;
    unint64_t v21 = a1[2] - *a1;
    if (v18 > v21)
    {
      char v22 = (unsigned __int8 *)&v6[v21];
      a1[2] = (unint64_t)(v22 + 1);
      if (v6)
      {
        LODWORD(v22) = *v22;
        if (v22 < 4)
        {
          int v23 = 0;
          goto LABEL_23;
        }
LABEL_52:
        uint64_t v6 = (char *)*a1;
        unint64_t v40 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        char v22 = (unsigned __int8 *)a1[3];
        if (v22)
        {
          uint64_t v42 = v20;
          uint64_t v45 = v5;
          if (!v40)
          {
            LOBYTE(v22) = 0;
            int v23 = 1;
LABEL_23:
            if (*a1)
            {
              if (!v20 || v23) {
                goto LABEL_56;
              }
              uint64_t v24 = v49;
              int v25 = v50;
              uint64_t v49 = 0;
              uint64_t v50 = 0;
              *(void *)a2 = v24;
              *(_DWORD *)(a2 + 8) = v25;
              *(_DWORD *)(a2 + 12) = v16;
              *(void *)(a2 + 16) = v2;
              *(_DWORD *)(a2 + 24) = v17;
              *(_DWORD *)(a2 + 28) = v16;
              *(void *)(a2 + 32) = v5;
              char v26 = 1;
              *(unsigned char *)(a2 + 40) = (_BYTE)v22;
              unint64_t v2 = 0;
              goto LABEL_27;
            }
LABEL_42:
            char v26 = 0;
            *(unsigned char *)a2 = 0;
LABEL_27:
            *(unsigned char *)(a2 + 48) = v26;
            if (v2) {
              WTF::fastFree((WTF *)v2, v6);
            }
            goto LABEL_29;
          }
          (*(void (**)(unsigned __int8 *, char *))(*(void *)v22 + 16))(v22, v6);
          uint64_t v20 = v42;
          uint64_t v5 = v45;
          LOBYTE(v22) = 0;
        }
        int v23 = 1;
        goto LABEL_23;
      }
      unint64_t v38 = 0;
LABEL_51:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v39 = a1[3];
      if (v39)
      {
        uint64_t v43 = v20;
        uint64_t v46 = v5;
        if (v18) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v38);
        }
        uint64_t v20 = v43;
        uint64_t v5 = v46;
      }
      goto LABEL_52;
    }
LABEL_49:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v37 = a1[3];
    if (v37)
    {
      uint64_t v44 = v20;
      uint64_t v47 = v5;
      if (v18)
      {
        (*(void (**)(unint64_t, char *))(*(void *)v37 + 16))(v37, v6);
        uint64_t v20 = v44;
        uint64_t v5 = v47;
        unint64_t v38 = *a1;
        unint64_t v18 = a1[1];
      }
      else
      {
        unint64_t v38 = 0;
      }
    }
    else
    {
      unint64_t v38 = 0;
      unint64_t v18 = 0;
    }
    goto LABEL_51;
  }
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  *a1 = 0;
  a1[1] = 0;
  unint64_t v33 = a1[3];
  if (v33)
  {
    if (v8)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v9, v8);
      unint64_t v32 = *a1;
      unint64_t v31 = a1[1];
    }
    else
    {
      unint64_t v31 = 0;
      unint64_t v32 = 0;
    }
  }
LABEL_44:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v34 = a1[3];
  if (v34 && v31) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32);
  }
  while (1)
  {
    uint64_t v6 = (char *)*a1;
    unint64_t v29 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v30 = a1[3];
    if (!v30) {
      break;
    }
    if (!v29) {
      break;
    }
    uint64_t v5 = (*(uint64_t (**)(unint64_t, char *))(*(void *)v30 + 16))(v30, v6);
    if (!*a1) {
      break;
    }
LABEL_56:
    __break(1u);
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v6);
      if (!v53) {
        break;
      }
      do
      {
        int v15 = HIDWORD(v55);
        if (HIDWORD(v55) == v55)
        {
          __n128 v14 = WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize>((uint64_t)&v54, (unint64_t)&v52);
        }
        else
        {
          __n128 v14 = v52;
          *((__n128 *)v54 + HIDWORD(v55)) = v52;
          HIDWORD(v55) = v15 + 1;
        }
        if (!--v2)
        {
          unint64_t v2 = (unint64_t)v54;
          int v17 = v55;
          int v16 = HIDWORD(v55);
          goto LABEL_15;
        }
LABEL_10:
        uint64_t v5 = (uint64_t)IPC::ArgumentCoder<CGSize,void>::decode(a1, (uint64_t)&v52, v14);
      }
      while (v53);
      uint64_t v6 = (char *)*a1;
      unint64_t v27 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v5 = a1[3];
    }
    while (v5 && v27 != 0);
LABEL_38:
    if (v54) {
      WTF::fastFree(v54, v6);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
LABEL_29:
  if (v51)
  {
    if (v49) {
      WTF::fastFree(v49, v6);
    }
  }
}

uint64_t IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 32);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 56);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 72);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 88));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 89));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 96);
  char v5 = *(unsigned char *)(a2 + 112);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v75);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, (uint64_t)&v72);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v7, (uint64_t)&v69);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v67);
  IPC::Decoder::decode<std::optional<double>>(a1, &v58);
  IPC::Decoder::decode<std::optional<double>>(a1, &v78);
  unint64_t v8 = *(char **)a1;
  if (!*(void *)a1) {
    goto LABEL_56;
  }
  if (!(_BYTE)v59 || !v80) {
    goto LABEL_55;
  }
  uint64_t v3 = *(void *)((char *)&v58 + 1);
  char v9 = v58;
  *(void *)((char *)&v82 + 7) = v78;
  HIBYTE(v82) = v79;
  long long v81 = v82;
  unint64_t v10 = v8;
  while (1)
  {
    unint64_t v11 = *((void *)a1 + 1);
    if (v11 <= *((void *)a1 + 2) - (void)v10)
    {
      unint64_t v48 = 0;
      uint64_t v49 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v50 = *((void *)a1 + 3);
      if (v50)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
          uint64_t v49 = *(char **)a1;
          unint64_t v48 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v48 = 0;
          uint64_t v49 = 0;
        }
      }
      goto LABEL_59;
    }
    unint64_t v12 = (unsigned __int8 *)*((void *)a1 + 2);
    char v13 = v12 + 1;
    *((void *)a1 + 2) = v12 + 1;
    if (!v10)
    {
      unint64_t v48 = v11;
      uint64_t v49 = 0;
LABEL_59:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v51 = *((void *)a1 + 3);
      if (v51 && v48)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v51 + 16))(v51, v49, v48);
        unsigned int v14 = 0;
        unint64_t v10 = *(char **)a1;
        unint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v10 = 0;
        unsigned int v14 = 0;
      }
      goto LABEL_61;
    }
    unsigned int v14 = *v12;
    if (v14 < 2)
    {
      int v15 = 0;
      char v16 = 1;
      goto LABEL_9;
    }
LABEL_61:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v52 = *((void *)a1 + 3);
    if (!v52 || !v11)
    {
      char v17 = 0;
      unint64_t v53 = 0;
      unint64_t v10 = 0;
      int v15 = 1;
LABEL_63:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v54 = *((void *)a1 + 3);
      if (v54 && v53)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v54 + 16))(v54, v10, v53);
        unsigned int v20 = 0;
        unint64_t v10 = *(char **)a1;
        unint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v10 = 0;
        unsigned int v20 = 0;
      }
      goto LABEL_65;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v52 + 16))(v52, v10);
    char v16 = 0;
    unint64_t v10 = *(char **)a1;
    unint64_t v11 = *((void *)a1 + 1);
    int v15 = 1;
    char v13 = (unsigned __int8 *)*((void *)a1 + 2);
LABEL_9:
    if (v14) {
      char v17 = v16;
    }
    else {
      char v17 = 0;
    }
    unint64_t v18 = v13 - (unsigned __int8 *)v10;
    if (v11 <= v18)
    {
      unint64_t v53 = 0;
      uint64_t v57 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v57 && v11)
      {
        (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
        unint64_t v10 = *(char **)a1;
        unint64_t v53 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v10 = 0;
      }
      goto LABEL_63;
    }
    unsigned __int8 v19 = &v10[v18];
    *((void *)a1 + 2) = v19 + 1;
    if (!v10)
    {
      unint64_t v53 = v11;
      goto LABEL_63;
    }
    unsigned int v20 = *v19;
    if (v20 < 2)
    {
      int v21 = 0;
      char v22 = 1;
      goto LABEL_16;
    }
LABEL_65:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v55 = *((void *)a1 + 3);
    if (v55 && v11) {
      (*(void (**)(uint64_t, char *))(*(void *)v55 + 16))(v55, v10);
    }
    char v22 = 0;
    int v21 = 1;
LABEL_16:
    if (v20) {
      char v23 = v22;
    }
    else {
      char v23 = 0;
    }
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v10, (uint64_t)&v78);
    LOWORD(v58) = 0;
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::operator>><unsigned char>(a1, &v58);
    char v26 = v58;
    if (BYTE1(v58)) {
      BOOL v27 = v58 > 2u;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = v27;
    if (v28 == 1)
    {
      int v25 = *(char **)a1;
      uint64_t v56 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
      if (result && v56) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)result + 16))(result, v25);
      }
      char v26 = 0;
    }
    if (!*(void *)a1)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 120) = 0;
      goto LABEL_41;
    }
    if (v77)
    {
      uint64_t v29 = v75;
      *(void *)&long long v58 = v75;
      unsigned int v30 = v76;
      unsigned int v31 = HIDWORD(v76);
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      *((void *)&v58 + 1) = __PAIR64__(v31, v30);
      if (v74)
      {
        uint64_t v32 = v72;
        uint64_t v59 = v72;
        unsigned int v33 = v73;
        unsigned int v34 = HIDWORD(v73);
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        unint64_t v60 = __PAIR64__(v34, v33);
        if (v71)
        {
          v61[1] = 0;
          uint64_t v35 = v69;
          uint64_t v36 = v70;
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          if (v68)
          {
            unint64_t v37 = v67;
            uint64_t v67 = 0;
            if (v8)
            {
              v63[0] = v9;
              *(void *)&v63[1] = v3;
              *(_OWORD *)&v63[9] = v81;
              if (!v15)
              {
                LOBYTE(v64) = v17;
                if (!v21)
                {
                  HIBYTE(v64) = v23;
                  if (v80)
                  {
                    uint64_t v38 = v78;
                    uint64_t v39 = v79;
                    uint64_t v78 = 0;
                    uint64_t v79 = 0;
                    if (!v28) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_55:
    __break(1u);
LABEL_56:
    uint64_t v46 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v47 = *((void *)a1 + 3);
    if (v47 && v46)
    {
      (*(void (**)(uint64_t, void))(*(void *)v47 + 16))(v47, 0);
      char v9 = 0;
      unint64_t v10 = *(char **)a1;
    }
    else
    {
      unint64_t v10 = 0;
      char v9 = 0;
    }
  }
  char v66 = v26;
  *(void *)&long long v58 = 0;
  *(void *)a3 = v29;
  *((void *)&v58 + 1) = 0;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a3 + 12) = v31;
  uint64_t v59 = 0;
  *(void *)(a3 + 16) = v32;
  unint64_t v60 = 0;
  *(_DWORD *)(a3 + 24) = v33;
  *(_DWORD *)(a3 + 28) = v34;
  *(void *)(a3 + 32) = v35;
  *(void *)(a3 + 40) = v36;
  v61[0] = 0;
  uint64_t v62 = 0;
  *(void *)(a3 + 48) = v37;
  long long v40 = *(_OWORD *)v63;
  long long v41 = *(_OWORD *)&v63[16];
  *(_WORD *)(a3 + 88) = v64;
  *(_OWORD *)(a3 + 72) = v41;
  *(_OWORD *)(a3 + 56) = v40;
  v65[0] = 0;
  *(void *)(a3 + 96) = v38;
  v65[1] = 0;
  *(void *)(a3 + 104) = v39;
  *(unsigned char *)(a3 + 112) = v26;
  *(unsigned char *)(a3 + 120) = 1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v63);
  uint64_t v43 = v62;
  uint64_t v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v42);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v61, v42);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v44);
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v45);
LABEL_41:
  if (v80) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v25);
  }
  if (v68)
  {
    uint64_t result = v67;
    uint64_t v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v71) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v25);
  }
  if (v74) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v25);
  }
  if (v77) {
    return (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v25);
  }
  return result;
}

void sub_198895524(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44)
{
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a32) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, a2);
  }
  if (a38) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a34, a2);
  }
  if (a44) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a40, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaControlsContextMenuItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 24));

  return IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 32);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaControlsContextMenuItem,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = (WTF::StringImpl *)*((void *)a1 + 1);
  char v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if ((unint64_t)v4 >= v6 && (unint64_t)v4 - v6 > 7)
  {
    unint64_t v8 = (uint64_t *)((char *)v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (!v5)
    {
      char v22 = v4;
      char v23 = 0;
      goto LABEL_37;
    }
    int v9 = 0;
    uint64_t v10 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    char v22 = 0;
    char v23 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v24 + 16))(v24, v5, v4);
        char v23 = *(WTF::StringImpl **)a1;
        char v22 = (WTF::StringImpl *)*((void *)a1 + 1);
      }
      else
      {
        char v22 = 0;
        char v23 = 0;
      }
    }
LABEL_37:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (v25 && v22) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v25 + 16))(v25, v23);
    }
    uint64_t v10 = 0;
    int v9 = 1;
LABEL_8:
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v37);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v35);
    unint64_t v11 = (unsigned __int8 *)*((void *)a1 + 1);
    unint64_t v12 = *(WTF::StringImpl **)a1;
    unint64_t v13 = *((void *)a1 + 2) - *(void *)a1;
    if ((unint64_t)v11 <= v13)
    {
      unsigned int v14 = 0;
      char v26 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v27 = *((void *)a1 + 3);
      if (v27)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
          char v26 = *(WTF::StringImpl **)a1;
          unsigned int v14 = (unsigned __int8 *)*((void *)a1 + 1);
        }
        else
        {
          unsigned int v14 = 0;
          char v26 = 0;
        }
      }
      goto LABEL_40;
    }
    unsigned int v14 = (unsigned __int8 *)v12 + v13;
    *((void *)a1 + 2) = v14 + 1;
    if (!v12)
    {
      unsigned int v14 = v11;
      char v26 = 0;
LABEL_40:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v28 = *((void *)a1 + 3);
      if (v28)
      {
        if (v14)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v28 + 16))(v28, v26, v14);
          LODWORD(v14) = 0;
          unint64_t v12 = *(WTF::StringImpl **)a1;
          unint64_t v11 = (unsigned __int8 *)*((void *)a1 + 1);
        }
        else
        {
          unint64_t v11 = 0;
          unint64_t v12 = 0;
        }
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v12 = 0;
        LODWORD(v14) = 0;
      }
      goto LABEL_42;
    }
    LODWORD(v14) = *v14;
    if (v14 < 2)
    {
      int v15 = 0;
      char v16 = 1;
      goto LABEL_12;
    }
LABEL_42:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v29 = *((void *)a1 + 3);
    if (v29)
    {
      int v30 = (int)v14;
      if (v11) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v29 + 16))(v29, v12);
      }
      char v16 = 0;
      int v15 = 1;
      LODWORD(v14) = v30;
    }
    else
    {
      char v16 = 0;
      int v15 = 1;
    }
LABEL_12:
    char v17 = v14 ? v16 : 0;
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v32, a1);
    char v5 = *(WTF::StringImpl **)a1;
    if (!*(void *)a1) {
      break;
    }
    if (!v9)
    {
      char v5 = (WTF::StringImpl *)v38;
      if (v38)
      {
        char v5 = v37;
        unint64_t v37 = 0;
        char v4 = (WTF::StringImpl *)v36;
        if (v36)
        {
          char v4 = v35;
          uint64_t v35 = 0;
          if (!v15)
          {
            if (v34)
            {
              uint64_t v20 = v32;
              uint64_t v32 = 0;
              *(void *)a2 = v10;
              *(void *)(a2 + 8) = v5;
              *(void *)(a2 + 16) = v4;
              *(unsigned char *)(a2 + 24) = v17;
              v31[0] = 0;
              *(void *)(a2 + 32) = v20;
              v31[1] = 0;
              uint64_t v21 = v33;
              uint64_t v33 = 0;
              *(void *)(a2 + 40) = v21;
              *(unsigned char *)(a2 + 48) = 1;
              WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v19);
              uint64_t result = 0;
              goto LABEL_22;
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
LABEL_22:
  if (v34) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v19);
  }
  if (v36)
  {
    uint64_t result = v35;
    uint64_t v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v38)
  {
    uint64_t result = v37;
    unint64_t v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198895A0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (*(unsigned char *)(v20 - 56))
  {
    char v22 = *(WTF::StringImpl **)(v20 - 64);
    *(void *)(v20 - 64) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, a2);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198895AEC(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::WorkerOptions,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  char v5 = *(unsigned char *)(a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::WorkerOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a1);
  unsigned __int16 ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>((IPC::Decoder *)a1);
  unint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v9);
  if (*a1)
  {
    if (v4 > 0xFFu && ShouldOpenExternalURLs > 0xFFu && v10)
    {
      unint64_t v8 = v9;
      *(_WORD *)a2 = v4 | (unsigned __int16)(ShouldOpenExternalURLs << 8);
      *(void *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v10)
  {
    unint64_t result = v9;
    int v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 128));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 136));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v11);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(a1, (uint64_t)v23);
  int v4 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>((IPC::Decoder *)a1);
  unint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v9);
  if (!*a1) {
    goto LABEL_24;
  }
  if (!v14
    || (result = (WTF::StringImpl *)std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)v15, (uint64_t)v11), !v25)|| (long long v18 = v23[0], v19 = v23[1], LOBYTE(v20) = v24, (v4 & 0xFF0000) == 0)|| (v21 = v4, !v10))
  {
    __break(1u);
LABEL_24:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 144) = 0;
    goto LABEL_11;
  }
  BOOL v7 = v9;
  int v9 = 0;
  char v22 = v7;
  unint64_t result = (WTF::StringImpl *)std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v15);
  long long v8 = v19;
  *(_OWORD *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = v20;
  *(_WORD *)(a2 + 128) = v21;
  *(void *)(a2 + 136) = v22;
  *(unsigned char *)(a2 + 144) = 1;
  char v22 = 0;
  if (v17)
  {
    unint64_t result = v16;
    char v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_11:
  if (v10)
  {
    unint64_t result = v9;
    int v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v14)
  {
    if (v13)
    {
      unint64_t result = v12;
      unint64_t v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198895E3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41)
{
  if (a41)
  {
    if (*(_DWORD *)a41 == 2) {
      WTF::StringImpl::destroy(a41, a2);
    }
    else {
      *(_DWORD *)a41 -= 2;
    }
  }
  if (a32 && a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if ((_BYTE)a21 && a19 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 72))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_198895F88(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 72)) {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(a1, (WebCore::ScriptBuffer *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<__SecTrust *,void>::encode(a1);
  IPC::Encoder::operator<<<WebCore::ContentSecurityPolicyResponseHeaders const&>(a1, (uint64_t)(a2 + 7));
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, (uint64_t)(a2 + 10));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 13);

  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(a1, (WebCore::ResourceError *)(a2 + 14));
}

void IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ScriptBuffer>(a1, &v65);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v61);
  IPC::Decoder::decode<WebCore::CertificateInfo>(a1, (uint64_t)&v59);
  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v54, (IPC::Decoder *)a1);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v51, (IPC::Decoder *)a1);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v49);
  IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)a1, (uint64_t)&v40);
  if (!*a1) {
    goto LABEL_30;
  }
  if (!v66) {
    goto LABEL_29;
  }
  uint64_t v5 = v65;
  uint64_t v65 = 0;
  char v24 = v5;
  if (!v64) {
    goto LABEL_29;
  }
  uint64_t v6 = (uint64_t)v61;
  uint64_t v61 = 0;
  uint64_t v25 = v6;
  long long v26 = v62;
  long long v27 = v63;
  LODWORD(v62) = v62 & 0xFFFFFFFE;
  if (!v60) {
    goto LABEL_29;
  }
  BOOL v7 = v59;
  uint64_t v59 = 0;
  *(void *)&long long v28 = v7;
  if (!v58) {
    goto LABEL_29;
  }
  *((void *)&v28 + 1) = v54;
  uint64_t v8 = v55;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v29 = v8;
  int v30 = v56;
  char v31 = v57;
  if (!v53 || (v32 = v51, long long v9 = v52, v52 = 0uLL, v33 = v9, !v50) || (v10 = v49, v49 = 0, v34[0] = v10, !v48))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 192) = 0;
    goto LABEL_10;
  }
  long long v11 = v40;
  long long v40 = 0uLL;
  *(_OWORD *)&v34[1] = v11;
  *(_OWORD *)&v34[3] = v41;
  *(_OWORD *)&v34[5] = v42;
  LODWORD(v41) = v41 & 0xFFFFFFFE;
  uint64_t v35 = v43;
  int v36 = v44;
  __int16 v37 = v45;
  uint64_t v12 = v46;
  uint64_t v43 = 0;
  uint64_t v46 = 0;
  uint64_t v38 = v12;
  char v39 = v47;
  char v24 = 0;
  *(void *)a2 = v5;
  WTF::URL::URL(a2 + 8, &v25);
  long long v13 = v28;
  long long v28 = 0u;
  *(_OWORD *)(a2 + 48) = v13;
  *(void *)&long long v13 = v29;
  uint64_t v29 = 0;
  *(void *)(a2 + 64) = v13;
  *(_DWORD *)(a2 + 72) = v30;
  *(unsigned char *)(a2 + 76) = v31;
  *(_WORD *)(a2 + 80) = v32;
  long long v14 = v33;
  long long v33 = 0u;
  *(_OWORD *)(a2 + 88) = v14;
  long long v15 = *(_OWORD *)v34;
  *(_OWORD *)char v34 = 0u;
  *(_OWORD *)(a2 + 104) = v15;
  WTF::URL::URL(a2 + 120, &v34[2]);
  uint64_t v16 = v38;
  *(void *)(a2 + 160) = v35;
  *(_DWORD *)(a2 + 168) = v36;
  *(_WORD *)(a2 + 172) = v37;
  uint64_t v35 = 0;
  uint64_t v38 = 0;
  *(void *)(a2 + 176) = v16;
  *(unsigned char *)(a2 + 184) = v39;
  *(unsigned char *)(a2 + 192) = 1;
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v24, v17);
LABEL_10:
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, v4);
  if (v50)
  {
    long long v19 = v49;
    uint64_t v49 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v18);
  if (v58) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v20);
  }
  if (v60)
  {
    char v23 = v59;
    uint64_t v59 = 0;
    if (v23) {
      CFRelease(v23);
    }
  }
  if (v64)
  {
    __int16 v21 = v61;
    uint64_t v61 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  if (v66)
  {
    char v22 = v65;
    uint64_t v65 = 0;
    if (v22) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v20);
    }
  }
}

void sub_198896340(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v38 = *(WTF::StringImpl **)(v33 + 112);
  *(void *)(v33 + 112) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, a2);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  char v39 = *(WTF::StringImpl **)(v33 + 104);
  *(void *)(v33 + 104) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, a2);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  long long v40 = *(WTF::StringImpl **)(v33 + 96);
  *(void *)(v33 + 96) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, a2);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  long long v41 = *(WTF::StringImpl **)(v33 + 88);
  *(void *)(v33 + 88) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, a2);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v35, a2);
  uint64_t v43 = *(const void **)(v33 + 48);
  *(void *)(v33 + 48) = 0;
  if (v43) {
    CFRelease(v43);
  }
  int v44 = *v34;
  *char v34 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v42);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  __int16 v45 = *(unsigned int **)v33;
  *(void *)uint64_t v33 = 0;
  if (v45) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v45, v42);
  }
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&a9, v42);
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a33, v46);
  if (*(unsigned char *)(v36 - 200))
  {
    char v48 = *(WTF::StringImpl **)(v36 - 208);
    *(void *)(v36 - 208) = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v47);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v36 - 192, v47);
  if (*(unsigned char *)(v36 - 136)) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v36 - 160, v49);
  }
  if (*(unsigned char *)(v36 - 120))
  {
    __int16 v51 = *(const void **)(v36 - 128);
    *(void *)(v36 - 128) = 0;
    if (v51) {
      CFRelease(v51);
    }
  }
  if (*(unsigned char *)(v36 - 72))
  {
    char v50 = *(WTF::StringImpl **)(v36 - 112);
    *(void *)(v36 - 112) = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2) {
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v49);
      }
      else {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v36 - 56))
  {
    long long v52 = *(unsigned int **)(v36 - 64);
    *(void *)(v36 - 64) = 0;
    if (v52) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v52, v49);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::ScriptBuffer>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_198896588(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v4 = *(unsigned int **)v2;
    *(void *)uint64_t v2 = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::CertificateInfo>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::CertificateInfo,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
}

_DWORD *IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 104));
}

uint64_t IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v27);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v14);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v12);
  if (!*a1) {
    goto LABEL_25;
  }
  if (!v28[32]) {
    goto LABEL_24;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v19, (uint64_t)v27);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v21, (uint64_t)v28);
  if (!v17 || (uint64_t v5 = v14, v14 = 0, v23 = v5, v24 = v15, v25 = v16, LODWORD(v15) = v15 & 0xFFFFFFFE, !v13))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 112) = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  long long v26 = v6;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)v19);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 32, (uint64_t)v21);
  v7.n128_f64[0] = WTF::URL::URL(a2 + 64, (uint64_t *)&v23);
  uint64_t v8 = v23;
  *(void *)(a2 + 104) = v26;
  *(unsigned char *)(a2 + 112) = 1;
  long long v26 = 0;
  char v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  if (v22 != -1) {
    ((void (*)(char *, unsigned char *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v22])(&v18, v21, v7);
  }
  int v22 = -1;
  if (v20 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v20])(&v18, v19);
  }
LABEL_13:
  if (v13)
  {
    long long v9 = v12;
    uint64_t v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (v17)
  {
    char v10 = v14;
    long long v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v4);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27);
}

void sub_198896864(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,WTF::StringImpl *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36)
{
  uint64_t v40 = v36;
  uint64_t v46 = v40;
  uint64_t v42 = *(unsigned int *)(v40 + 56);
  if (v42 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v42])(&a22, v38);
  }
  uint64_t v43 = *(unsigned int *)(v46 + 24);
  *(_DWORD *)(v46 + 56) = -1;
  if (v43 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v43])(&a22, v46);
  }
  *(_DWORD *)(v46 + 24) = -1;
  int v44 = a36;
  a36 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, a2);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  __int16 v45 = a31;
  a31 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, a2);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  if (a30 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a30])(&a22, v37);
  }
  a30 = -1;
  if (a26 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a26])(&a22, &a23);
  }
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a17 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100](v39 - 112);
  _Unwind_Resume(a1);
}

void sub_198896A20()
{
}

_DWORD *IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2, v5);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v13);
  unint64_t result = IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, v7);
  if (!*a1) {
    goto LABEL_20;
  }
  if (!v15 || !v8)
  {
    __break(1u);
LABEL_20:
    *a2 = 0;
    a2[72] = 0;
    goto LABEL_10;
  }
  MEMORY[0x199738D30](v10, v13, v7);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v10);
  v6.n128_f64[0] = WTF::URL::URL((uint64_t)(a2 + 32), (uint64_t *)&v12);
  a2[72] = 1;
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v11 != -1) {
    unint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v11])(&v9, v10, v6);
  }
LABEL_10:
  if (v8)
  {
    unint64_t result = v7[0];
    v7[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v15)
  {
    if (v14 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v14])(v10, v13);
    }
  }
  return result;
}

void sub_198896BE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,WTF::StringImpl *a24)
{
  uint64_t v26 = v24;
  uint64_t v28 = v26;
  uint64_t v29 = *(unsigned int *)(v26 + 24);
  if (v29 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v29])(&a19, v28);
  }
  *(_DWORD *)(v28 + 24) = -1;
  int v30 = a24;
  a24 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, a2);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (a23 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a23])(&a19, &a20);
  }
  if (a14 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (*(unsigned char *)(v25 - 32))
  {
    uint64_t v31 = *(unsigned int *)(v25 - 40);
    if (v31 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v31])(&a20, v25 - 64);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode(a1, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 80));
  char v4 = *(unsigned char *)(a2 + 120);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 128));
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2 + 136);
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2 + 208);
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, a2 + 280);
}

uint64_t IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v61);
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v36);
  unsigned __int16 v7 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  uint64_t v8 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  char v10 = v9;
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v32);
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v28);
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerData>>(a1, (uint64_t)v24);
  if (!*a1) {
    goto LABEL_60;
  }
  if (!v65) {
    goto LABEL_59;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v41, (uint64_t)v61);
  uint64_t v12 = v62;
  long long v62 = 0;
  uint64_t v43 = v12;
  long long v44 = v63;
  long long v45 = v64;
  LODWORD(v63) = v63 & 0xFFFFFFFE;
  if (!v6) {
    goto LABEL_59;
  }
  uint64_t v46 = v4;
  if (!v39) {
    goto LABEL_59;
  }
  char v13 = v36;
  uint64_t v36 = 0;
  char v47 = v13;
  long long v48 = v37;
  long long v49 = v38;
  LODWORD(v37) = v37 & 0xFFFFFFFE;
  if (v7 <= 0xFFu
    || (char v50 = v7, !v10)
    || (uint64_t v51 = v8, !v35)
    || (std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)&v52, (uint64_t)v32), !v31)|| (std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)&v55, (uint64_t)v28), !v27))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    *a2 = 0;
    a2[352] = 0;
    goto LABEL_35;
  }
  std::__optional_move_base<WebCore::ServiceWorkerData,false>::__optional_move_base[abi:sn180100]((uint64_t)&v58, (uint64_t)v24);
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)a2, (uint64_t)v41);
  a2[352] = 1;
  if (v60)
  {
    int v14 = v59;
    uint64_t v59 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  if (v57)
  {
    char v15 = v56;
    int v56 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v11);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  if (v54)
  {
    uint64_t v16 = v53;
    char v53 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v11);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  char v17 = v47;
  char v47 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v11);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  char v18 = v43;
  uint64_t v43 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v11);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  if (v42 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v42])(&v40, v41);
  }
LABEL_35:
  if (v27)
  {
    if (v26)
    {
      long long v19 = v25;
      uint64_t v25 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v11);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
  }
  if (v31)
  {
    if (v30)
    {
      int v20 = v29;
      uint64_t v29 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v11);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
  }
  if (v35)
  {
    if (v34)
    {
      __int16 v21 = v33;
      uint64_t v33 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v11);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
  }
  if (v39)
  {
    int v22 = v36;
    uint64_t v36 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v11);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  return std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v11);
}

void sub_198897110(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, char a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,char a30,uint64_t a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,int a40,char a41,WTF::StringImpl *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,int a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,uint64_t a55,int a56,WTF::StringImpl *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,WTF::StringImpl *a63)
{
  if (LOBYTE(STACK[0x280]))
  {
    char v74 = (WTF::StringImpl *)STACK[0x250];
    STACK[0x250] = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, a2);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x238]))
  {
    uint64_t v75 = (WTF::StringImpl *)STACK[0x208];
    STACK[0x208] = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, a2);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  if (a72)
  {
    uint64_t v76 = a71;
    a71 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2) {
        WTF::StringImpl::destroy(v76, a2);
      }
      else {
        *(_DWORD *)v76 -= 2;
      }
    }
  }
  char v77 = a63;
  a63 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2) {
      WTF::StringImpl::destroy(v77, a2);
    }
    else {
      *(_DWORD *)v77 -= 2;
    }
  }
  uint64_t v78 = a57;
  a57 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2) {
      WTF::StringImpl::destroy(v78, a2);
    }
    else {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (a56 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a56])(&a52, &a53);
  }
  if (a19 && a17 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a30 && a28 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a41 && a39 && a33)
  {
    if (*(_DWORD *)a33 == 2) {
      WTF::StringImpl::destroy(a33, a2);
    }
    else {
      *(_DWORD *)a33 -= 2;
    }
  }
  if (a47 && a42)
  {
    if (*(_DWORD *)a42 == 2) {
      WTF::StringImpl::destroy(a42, a2);
    }
    else {
      *(_DWORD *)a42 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100](v72 - 152, a2);
  _Unwind_Resume(a1);
}

void sub_198897328()
{
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::decode(a1, a2);
  if (!a2[72])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF::StringImpl *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988973A0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(a1, (WebCore::ScriptBuffer *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 6);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ScriptBuffer>(a1, &v19);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v15);
  unint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v13);
  if (!*a1) {
    goto LABEL_25;
  }
  if (!v20) {
    goto LABEL_24;
  }
  uint64_t v6 = v19;
  long long v19 = 0;
  if (!v18 || (BOOL v7 = v15, v15 = 0, v9 = v7, v10 = v16, v11 = v17, LODWORD(v16) = v16 & 0xFFFFFFFE, !v14))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    goto LABEL_10;
  }
  uint64_t v12 = v13;
  char v13 = 0;
  *(void *)a2 = v6;
  WTF::URL::URL(a2 + 8, (uint64_t *)&v9);
  uint64_t v8 = v9;
  *(void *)(a2 + 48) = v12;
  *(unsigned char *)(a2 + 56) = 1;
  uint64_t v12 = 0;
  char v9 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unint64_t result = 0;
LABEL_10:
  if (v14)
  {
    unint64_t result = v13;
    char v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v18)
  {
    unint64_t result = v15;
    char v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v20)
  {
    unint64_t result = v19;
    long long v19 = 0;
    if (result) {
      return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v5);
    }
  }
  return result;
}

void sub_198897588(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  char v26 = v24;
  uint64_t v28 = *v26;
  *char v26 = 0;
  if (v28) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, a2);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, a2);
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a24 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (*(unsigned char *)(v25 - 24))
  {
    uint64_t v29 = *(unsigned int **)(v25 - 32);
    *(void *)(v25 - 32) = 0;
    if (v29) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v29, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(IPC::Encoder *a1, WebCore::ScriptBuffer *this)
{
  WebCore::ScriptBuffer::ipcData(v3, this);
  unsigned __int8 v5 = v4;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::encode<IPC::Encoder,std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>>(a1, (unint64_t)v3, v5);
  if (v4 != -1) {
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
  }
     + v4))((int)&v6, (WTF::MachSendRight *)v3);
}

void sub_1988976FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  if (a13 != -1) {
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
  }
     + a13))(v13 - 17, (WTF::MachSendRight *)&a10);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>>(a1, (uint64_t)v4);
  if (*a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WebCore::ScriptBuffer::fromIPCData();
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v6)
  {
    if (v5 != -1) {
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
    }
       + v5))((int)&v7, (WTF::MachSendRight *)v4);
  }
}

void sub_1988977B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1) {
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
    }
       + a12))(v14 - 17, (WTF::MachSendRight *)&a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::variant<WebCore::ShareableResourceHandle,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_198897868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 32))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 24);
    if (v15 != -1) {
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore23ShareableResourceHandleEN3WTF6RefPtrINS6_22FragmentedSharedBufferENS8_12RawPtrTraitsISA_EENS8_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix
    }
       + v15))((int)&a13, (WTF::MachSendRight *)v13);
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&>(a1, a2);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(a1, a2 + 24);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 376));
  IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode(a1, (WebCore::ScriptBuffer *)(a2 + 384));
  IPC::ArgumentCoder<__SecTrust *,void>::encode(a1);
  IPC::Encoder::operator<<<WebCore::ContentSecurityPolicyResponseHeaders const&>(a1, a2 + 400);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, a2 + 424);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 448));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 456));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 496));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 497));
  IPC::ArgumentCoder<std::optional<WebCore::UserStyleLevel>,void>::encode<IPC::Encoder,std::optional<WebCore::UserStyleLevel> const&>(a1, a2 + 498);
  IPC::ArgumentCoder<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits> const&>(a1, a2 + 504);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(a1, a2 + 528);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 576));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 584));
}

void IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>(a1, (uint64_t)&v160);
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(v4, v196);
  uint64_t v129 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v4);
  char v132 = v6;
  IPC::Decoder::decode<WebCore::ScriptBuffer>(v4, &v158);
  IPC::Decoder::decode<WebCore::CertificateInfo>(v4, (uint64_t)&cf);
  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v151, (IPC::Decoder *)v4);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v148, (IPC::Decoder *)v4);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v4, (uint64_t)&v146);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v4, &v142);
  unsigned __int16 v131 = IPC::Decoder::decode<WebCore::UserStyleLevel>(v4);
  unint64_t v7 = v4[1];
  uint64_t v8 = *v4;
  unint64_t v9 = v4[2] - *v4;
  uint64_t v125 = a2;
  char v135 = v4;
  if (v7 <= v9)
  {
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v107 = v4[3];
    if (v107)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v107 + 16))(v107);
        uint64_t v106 = *v4;
        uint64_t v105 = v4[1];
      }
      else
      {
        uint64_t v105 = 0;
        uint64_t v106 = 0;
      }
    }
    goto LABEL_192;
  }
  long long v10 = (unsigned __int8 *)(v8 + v9);
  v4[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    uint64_t v105 = v7;
    uint64_t v106 = 0;
LABEL_192:
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v108 = v4[3];
    if (v108)
    {
      if (v105)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v108 + 16))(v108, v106, v105);
        unsigned int v11 = 0;
        uint64_t v8 = *v4;
        unint64_t v7 = v4[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
        unsigned int v11 = 0;
      }
    }
    else
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      unsigned int v11 = 0;
    }
    goto LABEL_194;
  }
  unsigned int v11 = *v10;
  if (v11 < 2)
  {
    int v128 = 0;
    char v12 = 1;
    goto LABEL_5;
  }
LABEL_194:
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v109 = v4[3];
  if (!v109)
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
    char v127 = 0;
    int v128 = 1;
    goto LABEL_196;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    char v127 = 0;
    int v128 = 1;
LABEL_196:
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v110 = v4[3];
    if (v110)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v110 + 16))(v110, v8);
        uint64_t v111 = *v4;
        unint64_t v7 = v4[1];
      }
      else
      {
        uint64_t v111 = 0;
      }
    }
    else
    {
      uint64_t v111 = 0;
      unint64_t v7 = 0;
    }
    goto LABEL_198;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v109 + 16))(v109, v8);
  char v12 = 0;
  uint64_t v8 = *v4;
  unint64_t v7 = v4[1];
  int v128 = 1;
LABEL_5:
  if (!v11) {
    char v12 = 0;
  }
  char v127 = v12;
  if (v7 <= v4[2] - v8) {
    goto LABEL_196;
  }
  uint64_t v13 = (unsigned __int8 *)v4[2];
  v4[2] = (uint64_t)(v13 + 1);
  if (!v8)
  {
    uint64_t v111 = 0;
LABEL_198:
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v112 = v4[3];
    if (v112)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v112 + 16))(v112, v111);
        uint64_t v8 = *v4;
        unint64_t v7 = v4[1];
      }
      else
      {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v7 = 0;
    }
LABEL_200:
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v113 = v4[3];
    if (v113)
    {
      if (!v7)
      {
        unsigned int v16 = 0;
        uint64_t v126 = 0;
        goto LABEL_16;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v113 + 16))(v113, v8);
    }
    unsigned int v16 = 0;
    uint64_t v126 = 0;
    goto LABEL_16;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2) {
    goto LABEL_200;
  }
  if (v14)
  {
    unsigned __int16 NavigationWasApp = IPC::Decoder::decode<WebCore::LastNavigationWasAppInitiated>((IPC::Decoder *)v4);
    unsigned int v16 = (NavigationWasApp > 0xFFu) << 16;
    if ((NavigationWasApp & 0xFF00) != 0) {
      int v17 = NavigationWasApp;
    }
    else {
      int v17 = 0;
    }
    LODWORD(v126) = 256;
    HIDWORD(v126) = v17;
  }
  else
  {
    uint64_t v126 = 0;
    unsigned int v16 = 0x10000;
  }
LABEL_16:
  uint64_t v18 = v4[1];
  unsigned int v130 = v16;
  if (HIWORD(v16))
  {
    unint64_t v19 = v4[1];
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v114 = *v4;
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v115 = v4[3];
    if (v115)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v115 + 16))(v115, v114, v18);
        unint64_t v19 = v4[1];
      }
      else
      {
        unint64_t v19 = 0;
      }
    }
  }
  uint64_t v20 = *v4;
  unint64_t v21 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
  if (v19 < v21 || v19 - v21 <= 3)
  {
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v118 = v4[3];
    if (v118)
    {
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v118 + 16))(v118);
        uint64_t v117 = *v4;
        uint64_t v116 = v4[1];
      }
      else
      {
        uint64_t v116 = 0;
        uint64_t v117 = 0;
      }
    }
    goto LABEL_206;
  }
  int v22 = (int *)(v20 + v21);
  v4[2] = (uint64_t)(v22 + 1);
  if (!v20)
  {
    uint64_t v116 = v19;
    uint64_t v117 = 0;
LABEL_206:
    uint64_t Table = 0;
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v119 = v4[3];
    if (v119)
    {
      if (v116) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v119 + 16))(v119, v117, v116);
      }
      uint64_t Table = 0;
    }
    goto LABEL_139;
  }
  int v134 = *v22;
  int v23 = 0;
  if (!*v22)
  {
    uint64_t Table = 0;
    uint64_t v3 = 0;
    unsigned int v137 = 0;
    int v141 = 0;
    LOBYTE(v2) = 0;
    goto LABEL_141;
  }
  int v141 = 0;
  unsigned int v137 = 0;
  uint64_t v3 = 0;
  uint64_t Table = 0;
  int v25 = 0;
  while (1)
  {
    IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v4, &v163);
    if (!v166) {
      break;
    }
    uint64_t v26 = (uint64_t)IPC::Decoder::decode<WebCore::ServiceWorkerImportedScript>(v4, (uint64_t)v207);
    int v136 = v25;
    if (!v210) {
      goto LABEL_100;
    }
    if (!v166) {
      goto LABEL_188;
    }
    if (v163 == (WTF::StringImpl *)-1
      || (uint64_t v26 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(&v163),
          (v26 & 1) != 0))
    {
LABEL_100:
      char v61 = 0;
      v133 &= 0xFFFFFFFFFFFFFF00;
      goto LABEL_85;
    }
    if (!v166 || !v210) {
      goto LABEL_188;
    }
    char v167 = (uint64_t *)v207;
    if (10 * (unint64_t)v137 >= 9 * (unint64_t)v3
      || (_BYTE)v23 && 2 * v137 >= v3)
    {
      unsigned int v139 = (WTF *)Table;
      unsigned int v29 = 2 * v3;
      if (v3) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 8;
      }
      uint64_t Table = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::allocateTable(v30);
      unint64_t v32 = (~(Table << 32) + Table) ^ ((unint64_t)(~(Table << 32) + Table) >> 22);
      unint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      unint64_t v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      int v141 = (v34 >> 31) ^ v34;
      if (v3)
      {
        uint64_t v35 = 0;
        uint64_t v138 = v3;
        unsigned int v36 = v29 - 1;
        long long v37 = v139;
        do
        {
          long long v38 = (WTF::StringImpl **)((char *)v37 + 96 * v35);
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v38) & 1) == 0)
          {
            unsigned int v39 = *((_DWORD *)*v38 + 4);
            if (v39 >= 0x100) {
              unsigned int v40 = v39 >> 8;
            }
            else {
              unsigned int v40 = WTF::StringImpl::hashSlowCase(*v38);
            }
            unsigned int v41 = (v40 ^ v141) & v36;
            int v42 = (WTF::StringImpl **)(Table + 96 * v41);
            if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v42) & 1) == 0)
            {
              unsigned int v43 = 0;
              do
              {
                unsigned int v44 = *((_DWORD *)*v42 + 4);
                if (v44 >= 0x100) {
                  unsigned int v45 = v44 >> 8;
                }
                else {
                  unsigned int v45 = WTF::StringImpl::hashSlowCase(*v42);
                }
                unsigned int v46 = (v41 + v30 - ((v45 ^ v141) & v36)) & v36;
                if (v43 > v46)
                {
                  std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t *)v38, (uint64_t)v42);
                  unsigned int v43 = v46;
                }
                unsigned int v41 = (v41 + 1) & v36;
                int v42 = (WTF::StringImpl **)(Table + 96 * v41);
                ++v43;
              }
              while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v42));
            }
            WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)v42, (uint64_t)v38);
            long long v37 = v139;
          }
          uint64_t v2 = (uint64_t)v37 + 96 * v35;
          char v47 = *(WTF::StringImpl **)(v2 + 88);
          *(void *)(v2 + 88) = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2) {
              WTF::StringImpl::destroy(v47, v31);
            }
            else {
              *(_DWORD *)v47 -= 2;
            }
          }
          long long v48 = (char *)v37 + 96 * v35;
          long long v49 = (WTF::StringImpl *)*((void *)v48 + 6);
          *((void *)v48 + 6) = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2) {
              WTF::StringImpl::destroy(v49, v31);
            }
            else {
              *(_DWORD *)v49 -= 2;
            }
          }
          char v50 = *(unsigned int **)(v2 + 40);
          *(void *)(v2 + 40) = 0;
          if (v50) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v50, v31);
          }
          uint64_t v51 = *v38;
          *long long v38 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2) {
              WTF::StringImpl::destroy(v51, v31);
            }
            else {
              *(_DWORD *)v51 -= 2;
            }
          }
          ++v35;
        }
        while (v35 != v138);
      }
      else
      {
        long long v37 = v139;
        if (!v139)
        {
          LOBYTE(v23) = 0;
          uint64_t v3 = 8;
          goto LABEL_69;
        }
      }
      WTF::fastFree(v37, v31);
      LOBYTE(v23) = 0;
      uint64_t v3 = v30;
    }
LABEL_69:
    uint64_t v140 = Table;
    unsigned int v52 = *((_DWORD *)v163 + 4);
    if (v52 >= 0x100) {
      unsigned int v53 = v52 >> 8;
    }
    else {
      unsigned int v53 = WTF::StringImpl::hashSlowCase(v163);
    }
    unsigned int v54 = v3 - 1;
    uint64_t v55 = (v53 ^ v141) & (v3 - 1);
    int v56 = (WTF::StringImpl **)(v140 + 96 * v55);
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v56))
    {
LABEL_83:
      WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::URL,WebCore::ServiceWorkerImportedScript>(WTF::URL &&,WebCore::ServiceWorkerImportedScript &&)::{lambda(void)#1}>((uint64_t)v56, (uint64_t)&v163, &v167);
    }
    else
    {
      LODWORD(v2) = 0;
      while (1)
      {
        unsigned int v58 = *((_DWORD *)*v56 + 4);
        int v59 = v58 >= 0x100 ? v58 >> 8 : WTF::StringImpl::hashSlowCase(*v56);
        unsigned int v60 = (v55 + v3 - ((v59 ^ v141) & v54)) & v54;
        if (v2 > v60) {
          break;
        }
        if (v59 == v53 && WTF::equal(*v56, v163, v57))
        {
          uint64_t v4 = v135;
          uint64_t Table = v140;
          goto LABEL_100;
        }
        uint64_t v55 = (v55 + 1) & v54;
        int v56 = (WTF::StringImpl **)(v140 + 96 * v55);
        LODWORD(v2) = v2 + 1;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v56))
        {
          if (v2 > 0x7F) {
            LOBYTE(v23) = 1;
          }
          goto LABEL_83;
        }
      }
      if (v2 > 0x7F) {
        LOBYTE(v23) = 1;
      }
      WTF::URL::URL((uint64_t)&v168, (uint64_t *)v56);
      uint64_t v64 = v140 + 96 * v55;
      uint64_t v66 = *(unsigned int **)(v64 + 40);
      char v65 = (void *)(v64 + 40);
      *char v65 = 0;
      unint64_t v171 = v66;
      uint64_t v67 = (WTF::StringImpl **)(v65 + 1);
      WTF::URL::URL((uint64_t)&v172, v65 + 1);
      uint64_t v69 = v140 + 96 * v55;
      uint64_t v70 = *(WTF::StringImpl **)(v69 + 88);
      *(void *)(v69 + 88) = 0;
      unint64_t v173 = v70;
      char v71 = *(WTF::StringImpl **)(v69 + 88);
      *(void *)(v69 + 88) = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2) {
          WTF::StringImpl::destroy(v71, v68);
        }
        else {
          *(_DWORD *)v71 -= 2;
        }
      }
      uint64_t v72 = *v67;
      *uint64_t v67 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2) {
          WTF::StringImpl::destroy(v72, v68);
        }
        else {
          *(_DWORD *)v72 -= 2;
        }
      }
      uint64_t v73 = (unsigned int *)*v65;
      *char v65 = 0;
      if (v73) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v73, v68);
      }
      char v74 = *v56;
      *int v56 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2) {
          WTF::StringImpl::destroy(v74, v68);
        }
        else {
          *(_DWORD *)v74 -= 2;
        }
      }
      WTF::URL::URL((WTF::URL *)v56);
      WTF::GenericHashTraits<WebCore::ServiceWorkerImportedScript>::emptyValue((uint64_t)v65);
      WTF::HashMapTranslator<WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>,WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>> WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineAdd<WTF::URL,WebCore::ServiceWorkerImportedScript>(WTF::URL &&,WebCore::ServiceWorkerImportedScript &&)::{lambda(void)#1}>((uint64_t)v56, (uint64_t)&v163, &v167);
      while (1)
      {
        LODWORD(v55) = (v55 + 1) & v54;
        uint64_t v2 = v140 + 96 * v55;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v2)) {
          break;
        }
        unsigned int v75 = *(_DWORD *)(*(void *)v2 + 16);
        if (v75 >= 0x100) {
          unsigned int v76 = v75 >> 8;
        }
        else {
          unsigned int v76 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v2);
        }
        ++v60;
        unsigned int v77 = (v55 + v3 - ((v76 ^ v141) & v54)) & v54;
        if (v60 > v77)
        {
          std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t *)&v168, v2);
          unsigned int v60 = v77;
        }
      }
      WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>(v2, (uint64_t)&v168);
      uint64_t v78 = v173;
      unint64_t v173 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2) {
          WTF::StringImpl::destroy(v78, v27);
        }
        else {
          *(_DWORD *)v78 -= 2;
        }
      }
      uint64_t v79 = v172;
      unint64_t v172 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2) {
          WTF::StringImpl::destroy(v79, v27);
        }
        else {
          *(_DWORD *)v79 -= 2;
        }
      }
      char v80 = v171;
      unint64_t v171 = 0;
      if (v80) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v80, v27);
      }
      long long v81 = (WTF::StringImpl *)v168;
      *(void *)&long long v168 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2) {
          WTF::StringImpl::destroy(v81, v27);
        }
        else {
          *(_DWORD *)v81 -= 2;
        }
      }
    }
    ++v137;
    char v61 = 1;
    uint64_t v4 = v135;
    uint64_t Table = v140;
LABEL_85:
    std::__optional_destruct_base<WebCore::ServiceWorkerImportedScript,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v207, v27);
    if (!v166) {
      goto LABEL_89;
    }
    long long v63 = v163;
    uint64_t v163 = 0;
    if (!v63) {
      goto LABEL_89;
    }
    if (*(_DWORD *)v63 != 2)
    {
      *(_DWORD *)v63 -= 2;
LABEL_89:
      if ((v61 & 1) == 0) {
        goto LABEL_136;
      }
      goto LABEL_92;
    }
    WTF::StringImpl::destroy(v63, v62);
    if ((v61 & 1) == 0) {
      goto LABEL_136;
    }
LABEL_92:
    int v25 = v136 + 1;
    if (v136 + 1 == v134)
    {
      LOBYTE(v2) = v23;
      int v23 = 0;
      goto LABEL_141;
    }
  }
  v133 &= 0xFFFFFFFFFFFFFF00;
LABEL_136:
  if (Table) {
    WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)Table, (WTF::StringImpl *)v3);
  }
  uint64_t Table = v133;
LABEL_139:
  char v27 = (WTF::StringImpl *)*v4;
  uint64_t v28 = v4[1];
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v26 = v4[3];
  if (v26) {
    goto LABEL_189;
  }
  while (1)
  {
    int v23 = 1;
LABEL_141:
    IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(v4, (uint64_t)v207);
    uint64_t v26 = (uint64_t)IPC::Decoder::decode<WebCore::NavigationPreloadState>((IPC::Decoder *)v4, (uint64_t)&v163);
    if (!*v4) {
      break;
    }
    if (v162)
    {
      uint64_t v4 = (uint64_t *)&v168;
      long long v168 = v160;
      LOBYTE(v169) = v161;
      if (v206)
      {
        uint64_t v26 = WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v170, (uint64_t)v196);
        if (v132)
        {
          uint64_t v174 = v129;
          if (v159)
          {
            long long v82 = v158;
            unint64_t v158 = 0;
            *(void *)&long long v175 = v82;
            if (v157)
            {
              CFTypeRef v83 = cf;
              CFTypeRef cf = 0;
              *((void *)&v175 + 1) = v83;
              if (v155)
              {
                uint64_t v176 = v151;
                uint64_t v84 = v152;
                uint64_t v151 = 0;
                uint64_t v152 = 0;
                uint64_t v177 = v84;
                int v178 = v153;
                char v179 = v154;
                if (v150)
                {
                  __int16 v180 = v148;
                  long long v85 = v149;
                  long long v149 = 0uLL;
                  long long v181 = v85;
                  if (v147)
                  {
                    int v86 = v146;
                    unint64_t v146 = 0;
                    v182 = v86;
                    if (v145)
                    {
                      int v87 = v142;
                      unint64_t v142 = 0;
                      uint64_t v183 = v87;
                      long long v184 = v143;
                      long long v185 = v144;
                      LODWORD(v143) = v143 & 0xFFFFFFFE;
                      if (v131 > 0xFFu)
                      {
                        LOBYTE(v186) = v131;
                        if (!v128)
                        {
                          BYTE1(v186) = v127;
                          if ((HIDWORD(v126) | v130 | v126) >> 16)
                          {
                            HIWORD(v186) = WORD2(v126) | v130 | v126;
                            if (!v23)
                            {
                              uint64_t v187 = Table;
                              unint64_t v188 = __PAIR64__(v137, v3);
                              int v189 = v141;
                              char v190 = v2;
                              if (v209)
                              {
                                long long v191 = v207[0];
                                long long v192 = v207[1];
                                LOBYTE(v193) = v208;
                                if (v165)
                                {
                                  char v194 = (char)v163;
                                  int v88 = v164;
                                  unint64_t v164 = 0;
                                  char v195 = v88;
                                  *(_OWORD *)uint64_t v125 = v168;
                                  *(void *)(v125 + 16) = v169;
                                  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v125 + 24, (uint64_t)v170);
                                  uint64_t v89 = v176;
                                  *(void *)(v125 + 376) = v174;
                                  long long v90 = v175;
                                  long long v175 = 0u;
                                  *(_OWORD *)(v125 + 384) = v90;
                                  uint64_t v176 = 0;
                                  *(void *)(v125 + 400) = v89;
                                  *(void *)&long long v90 = v177;
                                  uint64_t v177 = 0;
                                  *(void *)(v125 + 408) = v90;
                                  *(_DWORD *)(v125 + 416) = v178;
                                  *(unsigned char *)(v125 + 420) = v179;
                                  *(_WORD *)(v125 + 424) = v180;
                                  long long v91 = v181;
                                  long long v181 = 0u;
                                  *(_OWORD *)(v125 + 432) = v91;
                                  int v92 = v182;
                                  v182 = 0;
                                  *(void *)(v125 + 448) = v92;
                                  WTF::URL::URL(v125 + 456, (uint64_t *)&v183);
                                  *(_DWORD *)(v125 + 496) = v186;
                                  uint64_t v93 = v187;
                                  uint64_t v187 = 0;
                                  *(void *)(v125 + 504) = v93;
                                  unint64_t v94 = v188;
                                  unint64_t v188 = 0;
                                  *(void *)(v125 + 512) = v94;
                                  LODWORD(v93) = v189;
                                  int v189 = 0;
                                  *(_DWORD *)(v125 + 520) = v93;
                                  LOBYTE(v93) = v190;
                                  char v190 = 0;
                                  *(unsigned char *)(v125 + 524) = v93;
                                  long long v95 = v192;
                                  *(_OWORD *)(v125 + 528) = v191;
                                  *(_OWORD *)(v125 + 544) = v95;
                                  *(_OWORD *)(v125 + 560) = v193;
                                  *(unsigned char *)(v125 + 576) = v194;
                                  uint64_t v96 = v195;
                                  char v195 = 0;
                                  *(void *)(v125 + 584) = v96;
                                  *(unsigned char *)(v125 + 592) = 1;
                                  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)&v168, v97);
                                  uint64_t v3 = 0;
                                  uint64_t Table = 0;
                                  goto LABEL_158;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_188:
    __break(1u);
LABEL_189:
    if (v28) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v27);
    }
  }
  *(unsigned char *)uint64_t v125 = 0;
  *(unsigned char *)(v125 + 592) = 0;
LABEL_158:
  if (v165)
  {
    uint64_t v98 = v164;
    unint64_t v164 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2) {
        WTF::StringImpl::destroy(v98, v27);
      }
      else {
        *(_DWORD *)v98 -= 2;
      }
    }
  }
  if (Table) {
    char v99 = v23;
  }
  else {
    char v99 = 1;
  }
  if ((v99 & 1) == 0) {
    WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)Table, (WTF::StringImpl *)v3);
  }
  if (v145)
  {
    char v100 = v142;
    unint64_t v142 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2) {
        WTF::StringImpl::destroy(v100, v27);
      }
      else {
        *(_DWORD *)v100 -= 2;
      }
    }
  }
  if (v147)
  {
    unint64_t v101 = v146;
    unint64_t v146 = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 == 2) {
        WTF::StringImpl::destroy(v101, v27);
      }
      else {
        *(_DWORD *)v101 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v148, v27);
  if (v155) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v102);
  }
  if (v157)
  {
    CFTypeRef v104 = cf;
    CFTypeRef cf = 0;
    if (v104) {
      CFRelease(v104);
    }
  }
  if (v159)
  {
    int v103 = v158;
    unint64_t v158 = 0;
    if (v103) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v103, v102);
    }
  }
  if (v206)
  {
    if (v205)
    {
      int v120 = v204;
      int v204 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2) {
          WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v102);
        }
        else {
          *(_DWORD *)v120 -= 2;
        }
      }
    }
    if (v203)
    {
      uint64_t v121 = v202;
      char v202 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2) {
          WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v102);
        }
        else {
          *(_DWORD *)v121 -= 2;
        }
      }
    }
    if (v201)
    {
      int v122 = v200;
      v200 = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2) {
          WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v102);
        }
        else {
          *(_DWORD *)v122 -= 2;
        }
      }
    }
    unsigned int v123 = v199;
    uint64_t v199 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2) {
        WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v102);
      }
      else {
        *(_DWORD *)v123 -= 2;
      }
    }
    int v124 = v198;
    v198 = 0;
    if (v124)
    {
      if (*(_DWORD *)v124 == 2) {
        WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v102);
      }
      else {
        *(_DWORD *)v124 -= 2;
      }
    }
    if (v197 != -1) {
      ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v197])(&v168, v196);
    }
  }
}

void sub_198898A40(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,WTF::StringImpl *a30,char a31,int a32,__int16 a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,CFTypeRef cf,char a42,uint64_t a43,char a44)
{
  if (a29 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, a2);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a33, a2);
  if (a40) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a37, v46);
  }
  if (a42)
  {
    CFTypeRef v48 = cf;
    CFTypeRef cf = 0;
    if (v48) {
      CFRelease(v48);
    }
  }
  if (a44)
  {
    char v47 = (unsigned int *)a43;
    a43 = 0;
    if (v47) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v46);
    }
  }
  if (LOBYTE(STACK[0x528]))
  {
    if (LOBYTE(STACK[0x520]))
    {
      long long v49 = (WTF::StringImpl *)STACK[0x4F0];
      STACK[0x4F0] = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2) {
          WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v46);
        }
        else {
          *(_DWORD *)v49 -= 2;
        }
      }
    }
    if (LOBYTE(STACK[0x4D8]))
    {
      char v50 = (WTF::StringImpl *)STACK[0x4A8];
      STACK[0x4A8] = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2) {
          WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v46);
        }
        else {
          *(_DWORD *)v50 -= 2;
        }
      }
    }
    if (LOBYTE(STACK[0x490]))
    {
      uint64_t v51 = (WTF::StringImpl *)STACK[0x460];
      STACK[0x460] = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2) {
          WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v46);
        }
        else {
          *(_DWORD *)v51 -= 2;
        }
      }
    }
    unsigned int v52 = (WTF::StringImpl *)STACK[0x418];
    STACK[0x418] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v46);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
    unsigned int v53 = (WTF::StringImpl *)STACK[0x3E8];
    STACK[0x3E8] = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2) {
        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v46);
      }
      else {
        *(_DWORD *)v53 -= 2;
      }
    }
    uint64_t v54 = LODWORD(STACK[0x3E0]);
    if (v54 != -1) {
      ((void (*)(uint64_t, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v54])(v44 - 176, &STACK[0x3C8]);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::decode(a1, a2);
  if (!a2[352])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198899024(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 352))
  {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v13 + 280, a2);
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v13 + 208, v15);
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](v13 + 136, v16);
    uint64_t v18 = *(WTF::StringImpl **)(v13 + 80);
    *(void *)(v13 + 80) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    unint64_t v19 = *(WTF::StringImpl **)(v13 + 32);
    *(void *)(v13 + 32) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = *(unsigned int *)(v13 + 24);
    if (v20 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v20])(&a13, v13);
    }
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::NavigationPreloadState>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::NavigationPreloadState,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

void WebCore::Region::Shape::~Shape(WebCore::Region::Shape *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 18);
  if ((WebCore::Region::Shape *)((char *)this + 160) != v3 && v3 != 0)
  {
    *((void *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v5 = *(WTF **)this;
  if ((WebCore::Region::Shape *)((char *)this + 16) != *(WebCore::Region::Shape **)this && v5 != 0)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v5, a2);
  }
}

WTF *IPC::ArgumentCoder<WebCore::Region,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, *(void *)(a2 + 16));
    WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v11, v3 + 144);
  }
  else
  {
    WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v7, (const IntRect *)a2);
  }
  IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v7, v9);
  IPC::VectorArgumentCoder<false,WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)&v11);
  uint64_t v5 = v11;
  if (&v13 != (uint64_t *)v11 && v11)
  {
    unsigned int v11 = 0;
    int v12 = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t result = v7;
  if (&v10 != (uint64_t *)v7)
  {
    if (v7)
    {
      BOOL v7 = 0;
      int v8 = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

void sub_198899284(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if ((WTF *)(v10 + 16) != a9 && a9 != 0) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, (uint64_t)(a2 + 5));
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, (uint64_t)(a2 + 7));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 13);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 12);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 9);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 11);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v18);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v17);
  IPC::Decoder::decode<WTF::AtomString>(a1, &v15);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v9);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  if (!*(void *)a1) {
    goto LABEL_37;
  }
  if (!v18[16] || !v17[16] || !v16 || !v14 || !v12 || !v10 || !v8)
  {
    __break(1u);
LABEL_37:
    *a2 = 0;
    a2[112] = 0;
    goto LABEL_10;
  }
  WebCore::ISOWebVTTCue::ISOWebVTTCue();
  WebCore::ISOWebVTTCue::ISOWebVTTCue();
  a2[112] = 1;
  uint64_t result = (WTF::StringImpl *)MEMORY[0x199730B40](&v6);
LABEL_10:
  if (v8)
  {
    uint64_t result = v7;
    BOOL v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v10)
  {
    uint64_t result = v9;
    unsigned int v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v12)
  {
    uint64_t result = v11;
    unsigned int v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v14)
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v16)
  {
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::HidConfiguration> const&>(a1, a2 + 56);
  IPC::ArgumentCoder<std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration> const&>(a1, (uint64_t)(a2 + 96));

  return IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t)(a2 + 136));
}

uint64_t IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v8 = *((void *)a1 + 1);
  unsigned int v9 = *(WTF::StringImpl **)a1;
  unint64_t v10 = *((void *)a1 + 2) - *(void *)a1;
  if (v8 <= v10)
  {
    unint64_t v140 = 0;
    int v141 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v142 = *((void *)a1 + 3);
    if (v142)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v142 + 16))(v142);
        int v141 = *(WTF::StringImpl **)a1;
        unint64_t v140 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v140 = 0;
        int v141 = 0;
      }
    }
    goto LABEL_231;
  }
  unsigned int v11 = (unsigned __int8 *)v9 + v10;
  *((void *)a1 + 2) = v11 + 1;
  if (!v9)
  {
    unint64_t v140 = v8;
    int v141 = 0;
LABEL_231:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v143 = *((void *)a1 + 3);
    if (v143 && v140)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v143 + 16))(v143, v141, v140);
      unsigned int v12 = 0;
      unsigned int v9 = *(WTF::StringImpl **)a1;
      unint64_t v8 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v8 = 0;
      unsigned int v9 = 0;
      unsigned int v12 = 0;
    }
    goto LABEL_233;
  }
  unsigned int v12 = *v11;
  if (v12 < 2)
  {
    int v443 = 0;
    char v13 = 1;
    goto LABEL_5;
  }
LABEL_233:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v144 = *((void *)a1 + 3);
  if (!v144 || !v8)
  {
    unsigned int v9 = 0;
    char v14 = 0;
    unint64_t v8 = 0;
    int v443 = 1;
LABEL_235:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v145 = *((void *)a1 + 3);
    if (v145)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v145 + 16))(v145, v9);
        unint64_t v146 = *(WTF::StringImpl **)a1;
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v146 = 0;
      }
    }
    else
    {
      unint64_t v146 = 0;
      unint64_t v8 = 0;
    }
    goto LABEL_237;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v144 + 16))(v144, v9);
  char v13 = 0;
  unsigned int v9 = *(WTF::StringImpl **)a1;
  unint64_t v8 = *((void *)a1 + 1);
  int v443 = 1;
LABEL_5:
  if (v12) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  if (v8 <= *((void *)a1 + 2) - (void)v9) {
    goto LABEL_235;
  }
  uint64_t v15 = (unsigned __int8 *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v15 + 1;
  if (!v9)
  {
    unint64_t v146 = 0;
LABEL_237:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v147 = *((void *)a1 + 3);
    if (v147)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v147 + 16))(v147, v146);
        unsigned int v9 = *(WTF::StringImpl **)a1;
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        unsigned int v9 = 0;
      }
    }
    else
    {
      unsigned int v9 = 0;
      unint64_t v8 = 0;
    }
    goto LABEL_239;
  }
  unsigned int v16 = *v15;
  if (v16 >= 2)
  {
LABEL_239:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v148 = *((void *)a1 + 3);
    if (v148 && v8) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v148 + 16))(v148, v9);
    }
    LOBYTE(v469) = 0;
    char v473 = 0;
    goto LABEL_59;
  }
  if (!v16)
  {
    LOBYTE(v444) = 0;
    v445[32] = 0;
    LOBYTE(v469) = 0;
    unsigned __int8 v472 = 0;
LABEL_57:
    char v473 = 1;
    uint64_t result = std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v444, v9);
    goto LABEL_60;
  }
  LOWORD(v464) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v464);
  LOWORD(v3) = v464;
  if (BYTE1(v464)) {
    BOOL v17 = v464 > 3u;
  }
  else {
    BOOL v17 = 1;
  }
  int v4 = v17;
  unint64_t v18 = *((void *)a1 + 1);
  if (v4 == 1)
  {
    unint64_t v164 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v165 = *((void *)a1 + 3);
    if (!v165)
    {
      unint64_t v18 = 0;
      goto LABEL_259;
    }
    if (!v18) {
      goto LABEL_259;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v165 + 16))(v165, v164);
    unint64_t v18 = *((void *)a1 + 1);
  }
  unint64_t v19 = *(WTF::StringImpl **)a1;
  unint64_t v20 = *((void *)a1 + 2) - *(void *)a1;
  if (v18 <= v20)
  {
    uint64_t v220 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (!v220)
    {
      char v166 = 0;
      unint64_t v18 = 0;
      goto LABEL_260;
    }
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v220 + 16))(v220);
      char v166 = *(WTF::StringImpl **)a1;
      unint64_t v18 = *((void *)a1 + 1);
      goto LABEL_260;
    }
LABEL_259:
    char v166 = 0;
    goto LABEL_260;
  }
  unint64_t v21 = (unsigned __int8 *)v19 + v20;
  *((void *)a1 + 2) = v21 + 1;
  if (!v19)
  {
    char v166 = 0;
LABEL_260:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v167 = *((void *)a1 + 3);
    if (v167)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v167 + 16))(v167, v166);
        unsigned int v22 = 0;
        unint64_t v19 = *(WTF::StringImpl **)a1;
        unint64_t v18 = *((void *)a1 + 1);
        goto LABEL_263;
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    unint64_t v19 = 0;
    unsigned int v22 = 0;
    goto LABEL_263;
  }
  unsigned int v22 = *v21;
  if (v22 < 2)
  {
    int v23 = 0;
    int v24 = 1;
    goto LABEL_23;
  }
LABEL_263:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v168 = *((void *)a1 + 3);
  if (v168 && v18) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v168 + 16))(v168, v19);
  }
  int v24 = 0;
  int v23 = 1;
LABEL_23:
  if (v22) {
    int v25 = v24;
  }
  else {
    int v25 = 0;
  }
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v464);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v459);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v474);
  uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v478);
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    if (v4 || v23) {
      goto LABEL_449;
    }
    __int16 v28 = v25 ? 256 : 0;
    if (!(_BYTE)v465) {
      goto LABEL_449;
    }
    unsigned int v29 = v464;
    v464 = 0;
    if (!(_BYTE)v460) {
      goto LABEL_449;
    }
    uint64_t v30 = v459;
    char v459 = 0;
    if (!(_BYTE)v475) {
      goto LABEL_449;
    }
    char v31 = v474;
    v474 = 0;
    if (!(_BYTE)v479) {
      goto LABEL_449;
    }
    LOWORD(v444) = v28 | v3;
    *(void *)char v445 = v29;
    *(void *)&v445[8] = v30;
    *(void *)&v445[16] = v31;
    *(void *)&v445[24] = v478;
    int v3 = 1;
    v445[32] = 1;
  }
  else
  {
    int v3 = 0;
    LOBYTE(v444) = 0;
    v445[32] = 0;
    if ((_BYTE)v479)
    {
      uint64_t v169 = v478;
      int v478 = 0;
      if (v169)
      {
        if (*(_DWORD *)v169 != 2)
        {
          int v3 = 0;
          *(_DWORD *)v169 -= 2;
          goto LABEL_37;
        }
        WTF::StringImpl::destroy(v169, v9);
      }
      int v3 = 0;
    }
  }
LABEL_37:
  if ((_BYTE)v475)
  {
    unint64_t v32 = v474;
    v474 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v9);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  if ((_BYTE)v460)
  {
    unint64_t v33 = v459;
    char v459 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v9);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  if (!(_BYTE)v465 || (unint64_t v34 = v464, v464 = 0, !v34))
  {
LABEL_52:
    if (!v2) {
      goto LABEL_307;
    }
    goto LABEL_55;
  }
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
    goto LABEL_52;
  }
  WTF::StringImpl::destroy(v34, v9);
  if (!v2)
  {
LABEL_307:
    unsigned int v9 = *(WTF::StringImpl **)a1;
    uint64_t v202 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v203 = *((void *)a1 + 3);
    if (v203 && v202)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v203 + 16))(v203, v9);
      int v3 = v445[32];
    }
  }
LABEL_55:
  if (v3)
  {
    __int16 v469 = (__int16)v444;
    long long v470 = *(_OWORD *)v445;
    long long v35 = *(_OWORD *)&v445[16];
    memset(v445, 0, 32);
    long long v471 = v35;
    unsigned __int8 v472 = 1;
    goto LABEL_57;
  }
  LOBYTE(v469) = 0;
  char v473 = 0;
  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v444, v9);
LABEL_59:
  unsigned int v36 = *(WTF::StringImpl **)a1;
  uint64_t v37 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result && v37) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v36);
  }
LABEL_60:
  unint64_t v38 = *((void *)a1 + 1);
  unsigned int v39 = *(char **)a1;
  unint64_t v40 = *((void *)a1 + 2) - *(void *)a1;
  if (v38 <= v40)
  {
    unint64_t v149 = 0;
    char v150 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v151 = *((void *)a1 + 3);
    if (v151)
    {
      if (v38)
      {
        (*(void (**)(uint64_t))(*(void *)v151 + 16))(v151);
        char v150 = *(WTF::StringImpl **)a1;
        unint64_t v149 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v149 = 0;
        char v150 = 0;
      }
    }
    goto LABEL_242;
  }
  unsigned int v41 = &v39[v40];
  *((void *)a1 + 2) = v41 + 1;
  if (!v39)
  {
    unint64_t v149 = v38;
    char v150 = 0;
LABEL_242:
    unint64_t v38 = 0;
    unsigned int v39 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v152 = *((void *)a1 + 3);
    if (v152)
    {
      if (v149)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v152 + 16))(v152, v150, v149);
        unsigned int v39 = *(char **)a1;
        unint64_t v38 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v38 = 0;
        unsigned int v39 = 0;
      }
    }
    goto LABEL_243;
  }
  unsigned int v42 = *v41;
  if (v42 < 2)
  {
    if (!v42)
    {
      LOBYTE(v464) = 0;
      unsigned __int8 v467 = 0;
      char v468 = 1;
      goto LABEL_143;
    }
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v39, (uint64_t)&v474);
    LOWORD(v459) = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v459);
    int v3 = BYTE1(v459);
    if (BYTE1(v459))
    {
      int v4 = v459;
    }
    else
    {
      unint64_t v170 = *(WTF::StringImpl **)a1;
      uint64_t v171 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v172 = *((void *)a1 + 3);
      if (v172 && v171) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v172 + 16))(v172, v170);
      }
      int v4 = 0;
    }
    LOWORD(v459) = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v459);
    int v43 = BYTE1(v459);
    if (BYTE1(v459))
    {
      char v44 = (char)v459;
    }
    else
    {
      unint64_t v173 = *(WTF::StringImpl **)a1;
      uint64_t v174 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v175 = *((void *)a1 + 3);
      if (v175 && v174) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v175 + 16))(v175, v173);
      }
      char v44 = 0;
    }
    LOWORD(v459) = 0;
    IPC::Decoder::operator>><unsigned char>(a1, &v459);
    char v45 = (char)v459;
    if (BYTE1(v459)) {
      BOOL v46 = v459 > 6u;
    }
    else {
      BOOL v46 = 1;
    }
    uint64_t v47 = v46;
    unint64_t v27 = *((void *)a1 + 1);
    if (v47 == 1)
    {
      uint64_t v176 = *(WTF::StringImpl **)a1;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v177 = *((void *)a1 + 3);
      if (!v177)
      {
        char v45 = 0;
        unint64_t v27 = 0;
        int v178 = 0;
        goto LABEL_275;
      }
      uint64_t v237 = v47;
      if (!v27)
      {
        char v45 = 0;
        int v178 = 0;
        goto LABEL_275;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v177 + 16))(v177, v176);
      char v45 = 0;
      unint64_t v27 = *((void *)a1 + 1);
      uint64_t v47 = v237;
    }
    CFTypeRef v48 = *(char **)a1;
    unint64_t v49 = *((void *)a1 + 2) - *(void *)a1;
    if (v27 <= v49)
    {
      char v238 = v45;
      uint64_t v239 = v47;
      int v178 = 0;
      uint64_t v240 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v27 && v240)
      {
        (*(void (**)(uint64_t))(*(void *)v240 + 16))(v240);
        int v178 = *(WTF::StringImpl **)a1;
        unint64_t v27 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v27 = 0;
      }
      uint64_t v47 = v239;
      char v45 = v238;
    }
    else
    {
      char v50 = &v48[v49];
      uint64_t v51 = (uint64_t)&v48[v49 + 1];
      *((void *)a1 + 2) = v51;
      if (v48)
      {
        unsigned int v52 = *v50;
        if (v52 < 2)
        {
          int v53 = 0;
          char v54 = 1;
          goto LABEL_79;
        }
LABEL_277:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v180 = *((void *)a1 + 3);
        if (!v180)
        {
          char v54 = 0;
          unint64_t v181 = 0;
          CFTypeRef v48 = 0;
          int v53 = 1;
          goto LABEL_279;
        }
        char v330 = v45;
        uint64_t v232 = v47;
        if (!v27)
        {
          char v54 = 0;
          unint64_t v181 = 0;
          CFTypeRef v48 = 0;
          int v53 = 1;
          goto LABEL_279;
        }
        (*(void (**)(uint64_t, char *))(*(void *)v180 + 16))(v180, v48);
        char v54 = 0;
        CFTypeRef v48 = *(char **)a1;
        unint64_t v27 = *((void *)a1 + 1);
        int v53 = 1;
        uint64_t v51 = *((void *)a1 + 2);
        uint64_t v47 = v232;
        char v45 = v330;
LABEL_79:
        if (!v52) {
          char v54 = 0;
        }
        unint64_t v55 = v51 - (void)v48;
        if (v27 <= v55)
        {
          int v415 = v53;
          char v436 = v54;
          char v241 = v45;
          uint64_t v242 = v47;
          unint64_t v181 = 0;
          uint64_t v243 = *((void *)a1 + 3);
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          if (v27 && v243)
          {
            (*(void (**)(uint64_t))(*(void *)v243 + 16))(v243);
            CFTypeRef v48 = *(char **)a1;
            unint64_t v181 = *((void *)a1 + 1);
          }
          else
          {
            CFTypeRef v48 = 0;
          }
          uint64_t v47 = v242;
          char v45 = v241;
          int v53 = v415;
          char v54 = v436;
        }
        else
        {
          int v56 = &v48[v55];
          uint64_t v57 = (uint64_t)&v48[v55 + 1];
          *((void *)a1 + 2) = v57;
          if (v48)
          {
            unsigned int v58 = *v56;
            if (v58 < 2)
            {
              int v59 = 0;
              char v60 = 1;
              goto LABEL_85;
            }
LABEL_281:
            *(void *)a1 = 0;
            *((void *)a1 + 1) = 0;
            uint64_t v183 = *((void *)a1 + 3);
            if (!v183)
            {
              char v60 = 0;
              unint64_t v184 = 0;
              CFTypeRef v48 = 0;
              int v59 = 1;
              goto LABEL_283;
            }
            int v410 = v53;
            char v431 = v54;
            char v328 = v45;
            uint64_t v230 = v47;
            if (!v27)
            {
              char v60 = 0;
              unint64_t v184 = 0;
              CFTypeRef v48 = 0;
              int v59 = 1;
              goto LABEL_283;
            }
            (*(void (**)(uint64_t, char *))(*(void *)v183 + 16))(v183, v48);
            char v60 = 0;
            CFTypeRef v48 = *(char **)a1;
            unint64_t v27 = *((void *)a1 + 1);
            int v59 = 1;
            uint64_t v57 = *((void *)a1 + 2);
            uint64_t v47 = v230;
            char v45 = v328;
            int v53 = v410;
            char v54 = v431;
LABEL_85:
            if (!v58) {
              char v60 = 0;
            }
            unint64_t v61 = v57 - (void)v48;
            if (v27 <= v61)
            {
              int v377 = v59;
              char v395 = v60;
              int v416 = v53;
              char v437 = v54;
              char v244 = v45;
              uint64_t v245 = v47;
              unint64_t v184 = 0;
              uint64_t v246 = *((void *)a1 + 3);
              *(void *)a1 = 0;
              *((void *)a1 + 1) = 0;
              if (v27 && v246)
              {
                (*(void (**)(uint64_t))(*(void *)v246 + 16))(v246);
                CFTypeRef v48 = *(char **)a1;
                unint64_t v184 = *((void *)a1 + 1);
              }
              else
              {
                CFTypeRef v48 = 0;
              }
              uint64_t v47 = v245;
              char v45 = v244;
              int v53 = v416;
              char v54 = v437;
              int v59 = v377;
              char v60 = v395;
            }
            else
            {
              long long v62 = &v48[v61];
              uint64_t v63 = (uint64_t)&v48[v61 + 1];
              *((void *)a1 + 2) = v63;
              if (v48)
              {
                unsigned int v64 = *v62;
                if (v64 < 2)
                {
                  int v65 = 0;
                  char v66 = 1;
                  goto LABEL_91;
                }
LABEL_285:
                *(void *)a1 = 0;
                *((void *)a1 + 1) = 0;
                uint64_t v186 = *((void *)a1 + 3);
                if (!v186)
                {
                  char v66 = 0;
                  unint64_t v187 = 0;
                  CFTypeRef v48 = 0;
                  int v65 = 1;
                  goto LABEL_287;
                }
                int v372 = v59;
                char v390 = v60;
                int v408 = v53;
                char v429 = v54;
                char v326 = v45;
                uint64_t v228 = v47;
                if (!v27)
                {
                  char v66 = 0;
                  unint64_t v187 = 0;
                  CFTypeRef v48 = 0;
                  int v65 = 1;
                  goto LABEL_287;
                }
                (*(void (**)(uint64_t, char *))(*(void *)v186 + 16))(v186, v48);
                char v66 = 0;
                CFTypeRef v48 = *(char **)a1;
                unint64_t v27 = *((void *)a1 + 1);
                int v65 = 1;
                uint64_t v63 = *((void *)a1 + 2);
                uint64_t v47 = v228;
                char v45 = v326;
                int v53 = v408;
                char v54 = v429;
                int v59 = v372;
                char v60 = v390;
LABEL_91:
                if (!v64) {
                  char v66 = 0;
                }
                unint64_t v67 = v63 - (void)v48;
                if (v27 <= v67)
                {
                  int v345 = v65;
                  char v360 = v66;
                  int v378 = v59;
                  char v396 = v60;
                  int v417 = v53;
                  char v438 = v54;
                  char v247 = v45;
                  uint64_t v248 = v47;
                  unint64_t v187 = 0;
                  uint64_t v249 = *((void *)a1 + 3);
                  *(void *)a1 = 0;
                  *((void *)a1 + 1) = 0;
                  if (v27 && v249)
                  {
                    (*(void (**)(uint64_t))(*(void *)v249 + 16))(v249);
                    CFTypeRef v48 = *(char **)a1;
                    unint64_t v187 = *((void *)a1 + 1);
                  }
                  else
                  {
                    CFTypeRef v48 = 0;
                  }
                  uint64_t v47 = v248;
                  char v45 = v247;
                  int v53 = v417;
                  char v54 = v438;
                  int v59 = v378;
                  char v60 = v396;
                  int v65 = v345;
                  char v66 = v360;
                }
                else
                {
                  char v68 = &v48[v67];
                  uint64_t v69 = (uint64_t)&v48[v67 + 1];
                  *((void *)a1 + 2) = v69;
                  if (v48)
                  {
                    unsigned int v70 = *v68;
                    if (v70 < 2)
                    {
                      int v71 = 0;
                      char v72 = 1;
                      goto LABEL_97;
                    }
LABEL_289:
                    *(void *)a1 = 0;
                    *((void *)a1 + 1) = 0;
                    uint64_t v189 = *((void *)a1 + 3);
                    if (!v189)
                    {
                      char v73 = 0;
                      unint64_t v190 = 0;
                      CFTypeRef v48 = 0;
                      int v71 = 1;
                      goto LABEL_291;
                    }
                    int v340 = v65;
                    char v355 = v66;
                    int v370 = v59;
                    char v388 = v60;
                    int v406 = v53;
                    char v427 = v54;
                    char v324 = v45;
                    uint64_t v226 = v47;
                    if (!v27)
                    {
                      char v73 = 0;
                      unint64_t v190 = 0;
                      CFTypeRef v48 = 0;
                      int v71 = 1;
                      goto LABEL_291;
                    }
                    (*(void (**)(uint64_t, char *))(*(void *)v189 + 16))(v189, v48);
                    char v72 = 0;
                    CFTypeRef v48 = *(char **)a1;
                    unint64_t v27 = *((void *)a1 + 1);
                    int v71 = 1;
                    uint64_t v69 = *((void *)a1 + 2);
                    uint64_t v47 = v226;
                    char v45 = v324;
                    int v65 = v340;
                    int v53 = v406;
                    char v54 = v427;
                    int v59 = v370;
                    char v60 = v388;
                    char v66 = v355;
LABEL_97:
                    if (v70) {
                      char v73 = v72;
                    }
                    else {
                      char v73 = 0;
                    }
                    unint64_t v74 = v69 - (void)v48;
                    if (v27 <= v74)
                    {
                      int v305 = v71;
                      char v317 = v73;
                      int v346 = v65;
                      char v361 = v66;
                      int v379 = v59;
                      char v397 = v60;
                      int v418 = v53;
                      char v439 = v54;
                      char v250 = v45;
                      uint64_t v251 = v47;
                      unint64_t v190 = 0;
                      uint64_t v252 = *((void *)a1 + 3);
                      *(void *)a1 = 0;
                      *((void *)a1 + 1) = 0;
                      if (v27 && v252)
                      {
                        (*(void (**)(uint64_t))(*(void *)v252 + 16))(v252);
                        CFTypeRef v48 = *(char **)a1;
                        unint64_t v190 = *((void *)a1 + 1);
                      }
                      else
                      {
                        CFTypeRef v48 = 0;
                      }
                      uint64_t v47 = v251;
                      char v45 = v250;
                      int v53 = v418;
                      char v54 = v439;
                      int v59 = v379;
                      char v60 = v397;
                      int v65 = v346;
                      char v66 = v361;
                      int v71 = v305;
                      char v73 = v317;
                    }
                    else
                    {
                      unsigned int v75 = &v48[v74];
                      uint64_t v76 = (uint64_t)&v48[v74 + 1];
                      *((void *)a1 + 2) = v76;
                      if (v48)
                      {
                        unsigned int v77 = *v75;
                        if (v77 < 2)
                        {
                          int v78 = 0;
                          char v79 = 1;
                          goto LABEL_104;
                        }
LABEL_293:
                        *(void *)a1 = 0;
                        *((void *)a1 + 1) = 0;
                        uint64_t v192 = *((void *)a1 + 3);
                        if (!v192)
                        {
                          char v80 = 0;
                          unint64_t v193 = 0;
                          CFTypeRef v48 = 0;
                          int v78 = 1;
                          goto LABEL_295;
                        }
                        int v300 = v71;
                        char v312 = v73;
                        int v338 = v65;
                        char v353 = v66;
                        int v368 = v59;
                        char v386 = v60;
                        int v404 = v53;
                        char v425 = v54;
                        char v323 = v45;
                        uint64_t v223 = v47;
                        if (!v27)
                        {
                          char v80 = 0;
                          unint64_t v193 = 0;
                          CFTypeRef v48 = 0;
                          int v78 = 1;
                          goto LABEL_295;
                        }
                        (*(void (**)(uint64_t, char *))(*(void *)v192 + 16))(v192, v48);
                        char v79 = 0;
                        CFTypeRef v48 = *(char **)a1;
                        unint64_t v27 = *((void *)a1 + 1);
                        int v78 = 1;
                        uint64_t v76 = *((void *)a1 + 2);
                        uint64_t v47 = v223;
                        char v45 = v323;
                        int v65 = v338;
                        int v53 = v404;
                        char v54 = v425;
                        int v59 = v368;
                        char v60 = v386;
                        char v66 = v353;
                        int v71 = v300;
                        char v73 = v312;
LABEL_104:
                        if (v77) {
                          char v80 = v79;
                        }
                        else {
                          char v80 = 0;
                        }
                        unint64_t v81 = v76 - (void)v48;
                        if (v27 <= v81)
                        {
                          int v285 = v78;
                          char v294 = v80;
                          int v306 = v71;
                          char v318 = v73;
                          int v347 = v65;
                          char v362 = v66;
                          int v380 = v59;
                          char v398 = v60;
                          int v419 = v53;
                          char v440 = v54;
                          char v253 = v45;
                          uint64_t v254 = v47;
                          unint64_t v193 = 0;
                          uint64_t v255 = *((void *)a1 + 3);
                          *(void *)a1 = 0;
                          *((void *)a1 + 1) = 0;
                          if (v27 && v255)
                          {
                            (*(void (**)(uint64_t))(*(void *)v255 + 16))(v255);
                            CFTypeRef v48 = *(char **)a1;
                            unint64_t v193 = *((void *)a1 + 1);
                          }
                          else
                          {
                            CFTypeRef v48 = 0;
                          }
                          uint64_t v47 = v254;
                          char v45 = v253;
                          int v53 = v419;
                          char v54 = v440;
                          int v59 = v380;
                          char v60 = v398;
                          int v65 = v347;
                          char v66 = v362;
                          int v71 = v306;
                          char v73 = v318;
                          int v78 = v285;
                          char v80 = v294;
                        }
                        else
                        {
                          long long v82 = &v48[v81];
                          uint64_t v83 = (uint64_t)&v48[v81 + 1];
                          *((void *)a1 + 2) = v83;
                          if (v48)
                          {
                            unsigned int v84 = *v82;
                            if (v84 < 2)
                            {
                              int v85 = 0;
                              char v86 = 1;
                              goto LABEL_111;
                            }
LABEL_297:
                            *(void *)a1 = 0;
                            *((void *)a1 + 1) = 0;
                            uint64_t v195 = *((void *)a1 + 3);
                            if (!v195)
                            {
                              char v87 = 0;
                              unint64_t v196 = 0;
                              CFTypeRef v48 = 0;
                              int v85 = 1;
                              goto LABEL_299;
                            }
                            int v281 = v78;
                            char v290 = v80;
                            int v299 = v71;
                            char v311 = v73;
                            int v337 = v65;
                            char v352 = v66;
                            int v367 = v59;
                            char v385 = v60;
                            int v403 = v53;
                            char v424 = v54;
                            char v322 = v45;
                            uint64_t v222 = v47;
                            if (!v27)
                            {
                              char v87 = 0;
                              unint64_t v196 = 0;
                              CFTypeRef v48 = 0;
                              int v85 = 1;
                              goto LABEL_299;
                            }
                            (*(void (**)(uint64_t, char *))(*(void *)v195 + 16))(v195, v48);
                            char v86 = 0;
                            CFTypeRef v48 = *(char **)a1;
                            unint64_t v27 = *((void *)a1 + 1);
                            int v85 = 1;
                            uint64_t v83 = *((void *)a1 + 2);
                            uint64_t v47 = v222;
                            char v45 = v322;
                            int v65 = v337;
                            int v53 = v403;
                            char v54 = v424;
                            int v59 = v367;
                            char v60 = v385;
                            char v66 = v352;
                            int v71 = v299;
                            char v73 = v311;
                            int v78 = v281;
                            char v80 = v290;
LABEL_111:
                            if (v84) {
                              char v87 = v86;
                            }
                            else {
                              char v87 = 0;
                            }
                            unint64_t v88 = v83 - (void)v48;
                            if (v27 <= v88)
                            {
                              int v271 = v85;
                              char v277 = v87;
                              int v286 = v78;
                              char v295 = v80;
                              int v307 = v71;
                              char v319 = v73;
                              int v348 = v65;
                              char v363 = v66;
                              int v381 = v59;
                              char v399 = v60;
                              int v420 = v53;
                              char v441 = v54;
                              char v256 = v45;
                              uint64_t v257 = v47;
                              unint64_t v196 = 0;
                              uint64_t v258 = *((void *)a1 + 3);
                              *(void *)a1 = 0;
                              *((void *)a1 + 1) = 0;
                              if (v27 && v258)
                              {
                                (*(void (**)(uint64_t))(*(void *)v258 + 16))(v258);
                                CFTypeRef v48 = *(char **)a1;
                                unint64_t v196 = *((void *)a1 + 1);
                              }
                              else
                              {
                                CFTypeRef v48 = 0;
                              }
                              uint64_t v47 = v257;
                              char v45 = v256;
                              int v53 = v420;
                              char v54 = v441;
                              int v59 = v381;
                              char v60 = v399;
                              int v65 = v348;
                              char v66 = v363;
                              int v71 = v307;
                              char v73 = v319;
                              int v78 = v286;
                              char v80 = v295;
                              int v85 = v271;
                              char v87 = v277;
                            }
                            else
                            {
                              uint64_t v89 = &v48[v88];
                              uint64_t v90 = (uint64_t)&v48[v88 + 1];
                              *((void *)a1 + 2) = v90;
                              if (v48)
                              {
                                uint64_t v2 = *v89;
                                if (v2 < 2)
                                {
                                  int v91 = 0;
                                  char v92 = 1;
                                  goto LABEL_118;
                                }
LABEL_301:
                                *(void *)a1 = 0;
                                *((void *)a1 + 1) = 0;
                                uint64_t v198 = *((void *)a1 + 3);
                                if (!v198)
                                {
                                  char v93 = 0;
                                  unint64_t v199 = 0;
                                  CFTypeRef v48 = 0;
                                  int v91 = 1;
                                  goto LABEL_303;
                                }
                                int v268 = v85;
                                char v274 = v87;
                                int v280 = v78;
                                char v289 = v80;
                                int v298 = v71;
                                char v310 = v73;
                                int v336 = v65;
                                char v351 = v66;
                                int v366 = v59;
                                char v384 = v60;
                                int v402 = v53;
                                char v423 = v54;
                                char v321 = v45;
                                unsigned int v264 = v47;
                                if (!v27)
                                {
                                  char v93 = 0;
                                  unint64_t v199 = 0;
                                  CFTypeRef v48 = 0;
                                  int v91 = 1;
                                  uint64_t v47 = v47;
                                  goto LABEL_303;
                                }
                                (*(void (**)(uint64_t, char *))(*(void *)v198 + 16))(v198, v48);
                                char v92 = 0;
                                CFTypeRef v48 = *(char **)a1;
                                unint64_t v27 = *((void *)a1 + 1);
                                int v91 = 1;
                                uint64_t v90 = *((void *)a1 + 2);
                                uint64_t v47 = v264;
                                int v85 = v268;
                                char v45 = v321;
                                int v65 = v336;
                                int v53 = v402;
                                char v54 = v423;
                                int v59 = v366;
                                char v60 = v384;
                                char v66 = v351;
                                int v71 = v298;
                                char v73 = v310;
                                int v78 = v280;
                                char v80 = v289;
                                char v87 = v274;
LABEL_118:
                                if (v2) {
                                  char v93 = v92;
                                }
                                else {
                                  char v93 = 0;
                                }
                                unint64_t v94 = v90 - (void)v48;
                                if (v27 <= v94)
                                {
                                  char v320 = v73;
                                  int v266 = v91;
                                  int v272 = v85;
                                  char v278 = v87;
                                  int v287 = v78;
                                  char v296 = v80;
                                  int v308 = v71;
                                  int v349 = v65;
                                  char v364 = v66;
                                  int v382 = v59;
                                  char v400 = v60;
                                  int v421 = v53;
                                  char v442 = v54;
                                  char v259 = v45;
                                  uint64_t v260 = v47;
                                  unint64_t v199 = 0;
                                  uint64_t v261 = *((void *)a1 + 3);
                                  *(void *)a1 = 0;
                                  *((void *)a1 + 1) = 0;
                                  if (v27 && v261)
                                  {
                                    (*(void (**)(uint64_t))(*(void *)v261 + 16))(v261);
                                    CFTypeRef v48 = *(char **)a1;
                                    unint64_t v199 = *((void *)a1 + 1);
                                  }
                                  else
                                  {
                                    CFTypeRef v48 = 0;
                                  }
                                  uint64_t v47 = v260;
                                  char v45 = v259;
                                  int v53 = v421;
                                  char v54 = v442;
                                  int v59 = v382;
                                  char v60 = v400;
                                  int v65 = v349;
                                  char v66 = v364;
                                  int v71 = v308;
                                  char v73 = v320;
                                  int v78 = v287;
                                  char v80 = v296;
                                  int v85 = v272;
                                  char v87 = v278;
                                  int v91 = v266;
                                }
                                else
                                {
                                  long long v95 = &v48[v94];
                                  *((void *)a1 + 2) = v95 + 1;
                                  if (v48)
                                  {
                                    unsigned int v96 = *v95;
                                    if (v96 <= 1)
                                    {
                                      uint64_t result = 0;
                                      BOOL v97 = v96 != 0;
                                      goto LABEL_125;
                                    }
LABEL_305:
                                    *(void *)a1 = 0;
                                    *((void *)a1 + 1) = 0;
                                    uint64_t v201 = *((void *)a1 + 3);
                                    if (!v201) {
                                      goto LABEL_306;
                                    }
                                    if (!v27) {
                                      goto LABEL_306;
                                    }
                                    char v309 = v73;
                                    int v263 = v91;
                                    int v267 = v85;
                                    char v273 = v87;
                                    int v279 = v78;
                                    char v288 = v80;
                                    int v297 = v71;
                                    int v335 = v65;
                                    char v350 = v66;
                                    int v365 = v59;
                                    char v383 = v60;
                                    int v401 = v53;
                                    char v422 = v54;
                                    char v221 = v45;
                                    uint64_t v2 = v47;
                                    (*(void (**)(uint64_t, char *))(*(void *)v201 + 16))(v201, v48);
                                    char v45 = v221;
                                    int v53 = v401;
                                    char v54 = v422;
                                    int v59 = v365;
                                    char v60 = v383;
                                    int v65 = v335;
                                    char v66 = v350;
                                    int v71 = v297;
                                    char v73 = v309;
                                    int v78 = v279;
                                    char v80 = v288;
                                    int v85 = v267;
                                    char v87 = v273;
                                    int v91 = v263;
                                    if (!*(void *)a1)
                                    {
LABEL_306:
                                      LOBYTE(v444) = 0;
                                      v445[24] = 0;
                                      uint64_t v2 = 1;
                                      goto LABEL_138;
                                    }
                                    LODWORD(v47) = v2;
                                    BOOL v97 = 0;
                                    uint64_t result = 1;
LABEL_125:
                                    unsigned int v9 = (WTF::StringImpl *)v476;
                                    if (!(_BYTE)v476) {
                                      goto LABEL_449;
                                    }
                                    unsigned int v9 = v474;
                                    uint64_t v5 = v475;
                                    v474 = 0;
                                    uint64_t v475 = 0;
                                    if (!v3) {
                                      goto LABEL_449;
                                    }
                                    v461[0] = v4;
                                    if (!v43) {
                                      goto LABEL_449;
                                    }
                                    v461[1] = v44;
                                    if (v47) {
                                      goto LABEL_449;
                                    }
                                    v461[2] = v45;
                                    if (v53) {
                                      goto LABEL_449;
                                    }
                                    v461[3] = v54;
                                    if (v59) {
                                      goto LABEL_449;
                                    }
                                    v461[4] = v60;
                                    if (v65) {
                                      goto LABEL_449;
                                    }
                                    v461[5] = v66;
                                    if (v71) {
                                      goto LABEL_449;
                                    }
                                    v461[6] = v73;
                                    if (v78) {
                                      goto LABEL_449;
                                    }
                                    v461[7] = v80;
                                    if (v85) {
                                      goto LABEL_449;
                                    }
                                    v461[8] = v87;
                                    if (v91) {
                                      goto LABEL_449;
                                    }
                                    v461[9] = v93;
                                    if (result) {
                                      goto LABEL_449;
                                    }
                                    v461[10] = v97;
                                    char v459 = 0;
                                    uint64_t v460 = 0;
                                    int v444 = v9;
                                    *(void *)&v445[8] = *(void *)v461;
                                    *(_DWORD *)&v445[15] = *(_DWORD *)&v461[7];
                                    v445[24] = 1;
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v459, v9);
                                    uint64_t v2 = 0;
LABEL_138:
                                    if ((_BYTE)v476) {
                                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v474, v48);
                                    }
                                    if (!v2)
                                    {
                                      uint64_t v98 = v444;
                                      int v444 = 0;
                                      *(void *)char v445 = 0;
                                      v464 = v98;
                                      uint64_t v465 = v5;
                                      v466[0] = *(void *)&v445[8];
                                      *(_DWORD *)((char *)v466 + 7) = *(_DWORD *)&v445[15];
                                      uint64_t v2 = 1;
                                      unsigned __int8 v467 = 1;
                                      uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v444, v48);
                                      char v468 = 1;
                                      goto LABEL_143;
                                    }
                                    unsigned int v39 = *(char **)a1;
                                    uint64_t v217 = *((void *)a1 + 1);
                                    *(void *)a1 = 0;
                                    *((void *)a1 + 1) = 0;
                                    uint64_t v153 = *((void *)a1 + 3);
                                    if (!v153 || !v217) {
                                      goto LABEL_330;
                                    }
                                    goto LABEL_245;
                                  }
                                  unint64_t v199 = v27;
                                }
LABEL_303:
                                *(void *)a1 = 0;
                                *((void *)a1 + 1) = 0;
                                uint64_t v200 = *((void *)a1 + 3);
                                if (v200)
                                {
                                  char v313 = v73;
                                  int v265 = v91;
                                  int v269 = v85;
                                  char v275 = v87;
                                  int v282 = v78;
                                  char v291 = v80;
                                  int v301 = v71;
                                  int v339 = v65;
                                  char v354 = v66;
                                  int v369 = v59;
                                  char v387 = v60;
                                  int v405 = v53;
                                  char v426 = v54;
                                  char v224 = v45;
                                  uint64_t v225 = v47;
                                  if (v199)
                                  {
                                    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v200 + 16))(v200, v48, v199);
                                    CFTypeRef v48 = *(char **)a1;
                                    unint64_t v27 = *((void *)a1 + 1);
                                  }
                                  else
                                  {
                                    unint64_t v27 = 0;
                                    CFTypeRef v48 = 0;
                                  }
                                  uint64_t v47 = v225;
                                  char v45 = v224;
                                  int v53 = v405;
                                  char v54 = v426;
                                  int v59 = v369;
                                  char v60 = v387;
                                  int v65 = v339;
                                  char v66 = v354;
                                  int v71 = v301;
                                  char v73 = v313;
                                  int v78 = v282;
                                  char v80 = v291;
                                  int v85 = v269;
                                  char v87 = v275;
                                  int v91 = v265;
                                }
                                else
                                {
                                  unint64_t v27 = 0;
                                  CFTypeRef v48 = 0;
                                }
                                goto LABEL_305;
                              }
                              unint64_t v196 = v27;
                            }
LABEL_299:
                            *(void *)a1 = 0;
                            *((void *)a1 + 1) = 0;
                            uint64_t v197 = *((void *)a1 + 3);
                            if (v197)
                            {
                              int v270 = v85;
                              char v276 = v87;
                              int v283 = v78;
                              char v292 = v80;
                              int v302 = v71;
                              char v314 = v73;
                              int v341 = v65;
                              char v356 = v66;
                              int v371 = v59;
                              char v389 = v60;
                              int v407 = v53;
                              char v428 = v54;
                              char v325 = v45;
                              uint64_t v227 = v47;
                              if (v196)
                              {
                                (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v197 + 16))(v197, v48, v196);
                                uint64_t v2 = 0;
                                CFTypeRef v48 = *(char **)a1;
                                unint64_t v27 = *((void *)a1 + 1);
                              }
                              else
                              {
                                unint64_t v27 = 0;
                                CFTypeRef v48 = 0;
                                uint64_t v2 = 0;
                              }
                              uint64_t v47 = v227;
                              char v45 = v325;
                              int v65 = v341;
                              int v53 = v407;
                              char v54 = v428;
                              int v59 = v371;
                              char v60 = v389;
                              char v66 = v356;
                              int v71 = v302;
                              char v73 = v314;
                              int v78 = v283;
                              char v80 = v292;
                              int v85 = v270;
                              char v87 = v276;
                            }
                            else
                            {
                              unint64_t v27 = 0;
                              CFTypeRef v48 = 0;
                              uint64_t v2 = 0;
                            }
                            goto LABEL_301;
                          }
                          unint64_t v193 = v27;
                        }
LABEL_295:
                        *(void *)a1 = 0;
                        *((void *)a1 + 1) = 0;
                        uint64_t v194 = *((void *)a1 + 3);
                        if (v194)
                        {
                          int v284 = v78;
                          char v293 = v80;
                          int v303 = v71;
                          char v315 = v73;
                          int v342 = v65;
                          char v357 = v66;
                          int v373 = v59;
                          char v391 = v60;
                          int v409 = v53;
                          char v430 = v54;
                          char v327 = v45;
                          uint64_t v229 = v47;
                          if (v193)
                          {
                            (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v194 + 16))(v194, v48, v193);
                            unsigned int v84 = 0;
                            CFTypeRef v48 = *(char **)a1;
                            unint64_t v27 = *((void *)a1 + 1);
                          }
                          else
                          {
                            unint64_t v27 = 0;
                            CFTypeRef v48 = 0;
                            unsigned int v84 = 0;
                          }
                          uint64_t v47 = v229;
                          char v45 = v327;
                          int v65 = v342;
                          int v53 = v409;
                          char v54 = v430;
                          int v59 = v373;
                          char v60 = v391;
                          char v66 = v357;
                          int v71 = v303;
                          char v73 = v315;
                          int v78 = v284;
                          char v80 = v293;
                        }
                        else
                        {
                          unint64_t v27 = 0;
                          CFTypeRef v48 = 0;
                          unsigned int v84 = 0;
                        }
                        goto LABEL_297;
                      }
                      unint64_t v190 = v27;
                    }
LABEL_291:
                    *(void *)a1 = 0;
                    *((void *)a1 + 1) = 0;
                    uint64_t v191 = *((void *)a1 + 3);
                    if (v191)
                    {
                      int v304 = v71;
                      char v316 = v73;
                      int v343 = v65;
                      char v358 = v66;
                      int v374 = v59;
                      char v392 = v60;
                      int v411 = v53;
                      char v432 = v54;
                      char v329 = v45;
                      uint64_t v231 = v47;
                      if (v190)
                      {
                        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v191 + 16))(v191, v48, v190);
                        unsigned int v77 = 0;
                        CFTypeRef v48 = *(char **)a1;
                        unint64_t v27 = *((void *)a1 + 1);
                      }
                      else
                      {
                        unint64_t v27 = 0;
                        CFTypeRef v48 = 0;
                        unsigned int v77 = 0;
                      }
                      uint64_t v47 = v231;
                      char v45 = v329;
                      int v65 = v343;
                      int v53 = v411;
                      char v54 = v432;
                      int v59 = v374;
                      char v60 = v392;
                      char v66 = v358;
                      int v71 = v304;
                      char v73 = v316;
                    }
                    else
                    {
                      unint64_t v27 = 0;
                      CFTypeRef v48 = 0;
                      unsigned int v77 = 0;
                    }
                    goto LABEL_293;
                  }
                  unint64_t v187 = v27;
                }
LABEL_287:
                *(void *)a1 = 0;
                *((void *)a1 + 1) = 0;
                uint64_t v188 = *((void *)a1 + 3);
                if (v188)
                {
                  int v344 = v65;
                  char v359 = v66;
                  int v375 = v59;
                  char v393 = v60;
                  int v412 = v53;
                  char v433 = v54;
                  char v331 = v45;
                  uint64_t v233 = v47;
                  if (v187)
                  {
                    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v188 + 16))(v188, v48, v187);
                    unsigned int v70 = 0;
                    CFTypeRef v48 = *(char **)a1;
                    unint64_t v27 = *((void *)a1 + 1);
                  }
                  else
                  {
                    unint64_t v27 = 0;
                    CFTypeRef v48 = 0;
                    unsigned int v70 = 0;
                  }
                  uint64_t v47 = v233;
                  char v45 = v331;
                  int v65 = v344;
                  int v53 = v412;
                  char v54 = v433;
                  int v59 = v375;
                  char v60 = v393;
                  char v66 = v359;
                }
                else
                {
                  unint64_t v27 = 0;
                  CFTypeRef v48 = 0;
                  unsigned int v70 = 0;
                }
                goto LABEL_289;
              }
              unint64_t v184 = v27;
            }
LABEL_283:
            *(void *)a1 = 0;
            *((void *)a1 + 1) = 0;
            uint64_t v185 = *((void *)a1 + 3);
            if (v185)
            {
              int v376 = v59;
              char v394 = v60;
              int v413 = v53;
              char v434 = v54;
              char v332 = v45;
              uint64_t v234 = v47;
              if (v184)
              {
                (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v185 + 16))(v185, v48, v184);
                unsigned int v64 = 0;
                CFTypeRef v48 = *(char **)a1;
                unint64_t v27 = *((void *)a1 + 1);
              }
              else
              {
                unint64_t v27 = 0;
                CFTypeRef v48 = 0;
                unsigned int v64 = 0;
              }
              uint64_t v47 = v234;
              char v45 = v332;
              int v53 = v413;
              char v54 = v434;
              int v59 = v376;
              char v60 = v394;
            }
            else
            {
              unint64_t v27 = 0;
              CFTypeRef v48 = 0;
              unsigned int v64 = 0;
            }
            goto LABEL_285;
          }
          unint64_t v181 = v27;
        }
LABEL_279:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v182 = *((void *)a1 + 3);
        if (v182)
        {
          int v414 = v53;
          char v435 = v54;
          char v333 = v45;
          uint64_t v235 = v47;
          if (v181)
          {
            (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v182 + 16))(v182, v48, v181);
            unsigned int v58 = 0;
            CFTypeRef v48 = *(char **)a1;
            unint64_t v27 = *((void *)a1 + 1);
          }
          else
          {
            unint64_t v27 = 0;
            CFTypeRef v48 = 0;
            unsigned int v58 = 0;
          }
          uint64_t v47 = v235;
          char v45 = v333;
          int v53 = v414;
          char v54 = v435;
        }
        else
        {
          unint64_t v27 = 0;
          CFTypeRef v48 = 0;
          unsigned int v58 = 0;
        }
        goto LABEL_281;
      }
      int v178 = 0;
    }
LABEL_275:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v179 = *((void *)a1 + 3);
    if (v179)
    {
      char v334 = v45;
      uint64_t v236 = v47;
      if (v27)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v179 + 16))(v179, v178);
        unsigned int v52 = 0;
        CFTypeRef v48 = *(char **)a1;
        unint64_t v27 = *((void *)a1 + 1);
      }
      else
      {
        CFTypeRef v48 = 0;
        unsigned int v52 = 0;
      }
      uint64_t v47 = v236;
      char v45 = v334;
    }
    else
    {
      unint64_t v27 = 0;
      CFTypeRef v48 = 0;
      unsigned int v52 = 0;
    }
    goto LABEL_277;
  }
LABEL_243:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v153 = *((void *)a1 + 3);
  if (v153 && v38) {
LABEL_245:
  }
    (*(void (**)(uint64_t, char *))(*(void *)v153 + 16))(v153, v39);
LABEL_330:
  LOBYTE(v464) = 0;
  char v468 = 0;
  char v218 = *(WTF::StringImpl **)a1;
  uint64_t v219 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result && v219) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v218);
  }
LABEL_143:
  unint64_t v99 = *((void *)a1 + 1);
  char v100 = *(WTF::StringImpl **)a1;
  unint64_t v101 = *((void *)a1 + 2) - *(void *)a1;
  if (v99 <= v101)
  {
    unint64_t v154 = 0;
    char v155 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v156 = *((void *)a1 + 3);
    if (v156)
    {
      if (v99)
      {
        (*(void (**)(uint64_t))(*(void *)v156 + 16))(v156);
        char v155 = *(WTF::StringImpl **)a1;
        unint64_t v154 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v154 = 0;
        char v155 = 0;
      }
    }
    goto LABEL_247;
  }
  char v102 = (unsigned __int8 *)v100 + v101;
  *((void *)a1 + 2) = v102 + 1;
  if (!v100)
  {
    unint64_t v154 = v99;
    char v155 = 0;
LABEL_247:
    unint64_t v99 = 0;
    char v100 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v157 = *((void *)a1 + 3);
    if (v157)
    {
      if (v154)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v157 + 16))(v157, v155, v154);
        char v100 = *(WTF::StringImpl **)a1;
        unint64_t v99 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v99 = 0;
        char v100 = 0;
      }
    }
LABEL_248:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v158 = *((void *)a1 + 3);
    if (!v158 || !v99) {
      goto LABEL_326;
    }
    goto LABEL_250;
  }
  unsigned int v103 = *v102;
  if (v103 >= 2) {
    goto LABEL_248;
  }
  if (v103)
  {
    LOWORD(v474) = 0;
    IPC::Decoder::operator>><unsigned char>(a1, &v474);
    LOBYTE(v3) = (_BYTE)v474;
    if (BYTE1(v474)) {
      BOOL v105 = v474 > 4u;
    }
    else {
      BOOL v105 = 1;
    }
    int v4 = v105;
    if (v4 == 1)
    {
      CFTypeRef v104 = *(WTF::StringImpl **)a1;
      uint64_t v204 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v205 = *((void *)a1 + 3);
      if (v205 && v204) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v205 + 16))(v205, v104);
      }
      LOBYTE(v3) = 0;
    }
    uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v104, (uint64_t)&v478);
    unint64_t v27 = *((void *)a1 + 1);
    unsigned int v9 = *(WTF::StringImpl **)a1;
    unint64_t v106 = *((void *)a1 + 2) - *(void *)a1;
    if (v27 <= v106)
    {
      unint64_t v206 = 0;
      char v207 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v208 = *((void *)a1 + 3);
      if (v208)
      {
        if (v27)
        {
          (*(void (**)(uint64_t))(*(void *)v208 + 16))(v208);
          char v207 = *(WTF::StringImpl **)a1;
          unint64_t v206 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v206 = 0;
          char v207 = 0;
        }
      }
    }
    else
    {
      uint64_t v107 = (unsigned __int8 *)v9 + v106;
      uint64_t v108 = (uint64_t)v9 + v106 + 1;
      *((void *)a1 + 2) = v108;
      if (v9)
      {
        uint64_t v2 = *v107;
        if (v2 < 2)
        {
          int v109 = 0;
          char v110 = 1;
          goto LABEL_158;
        }
LABEL_315:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t result = *((void *)a1 + 3);
        if (result) {
          goto LABEL_450;
        }
        goto LABEL_316;
      }
      unint64_t v206 = v27;
      char v207 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v209 = *((void *)a1 + 3);
    if (v209 && v206)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v209 + 16))(v209, v207, v206);
      uint64_t v2 = 0;
      unsigned int v9 = *(WTF::StringImpl **)a1;
      unint64_t v27 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v27 = 0;
      unsigned int v9 = 0;
      uint64_t v2 = 0;
    }
    goto LABEL_315;
  }
  LOBYTE(v459) = 0;
  unsigned __int8 v462 = 0;
  char v463 = 1;
LABEL_174:
  unint64_t v27 = *((void *)a1 + 1);
  unsigned int v9 = *(WTF::StringImpl **)a1;
  unint64_t v118 = *((void *)a1 + 2) - *(void *)a1;
  if (v27 <= v118)
  {
    unint64_t v159 = 0;
    long long v160 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v161 = *((void *)a1 + 3);
    if (v161)
    {
      if (v27)
      {
        (*(void (**)(uint64_t))(*(void *)v161 + 16))(v161);
        long long v160 = *(WTF::StringImpl **)a1;
        unint64_t v159 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v159 = 0;
        long long v160 = 0;
      }
    }
    goto LABEL_252;
  }
  uint64_t v119 = (unsigned __int8 *)v9 + v118;
  *((void *)a1 + 2) = v119 + 1;
  if (!v9)
  {
    unint64_t v159 = v27;
    long long v160 = 0;
LABEL_252:
    unint64_t v27 = 0;
    unsigned int v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v162 = *((void *)a1 + 3);
    if (v162)
    {
      if (v159)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v162 + 16))(v162, v160, v159);
        unsigned int v9 = *(WTF::StringImpl **)a1;
        unint64_t v27 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v27 = 0;
        unsigned int v9 = 0;
      }
    }
LABEL_253:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v163 = *((void *)a1 + 3);
    if (v163 && v27) {
      goto LABEL_255;
    }
    goto LABEL_323;
  }
  unsigned int v120 = *v119;
  if (v120 >= 2) {
    goto LABEL_253;
  }
  if (!v120)
  {
    int v3 = 0;
    LOBYTE(v474) = 0;
    LOBYTE(v476) = 0;
    LOBYTE(v477) = 1;
    goto LABEL_186;
  }
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v9, (uint64_t)&v444);
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    if (v445[8])
    {
      uint64_t v121 = v444;
      int v444 = 0;
      uint64_t v5 = *(void *)v445;
      *(void *)char v445 = 0;
      v481[0] = 0;
      int v478 = v121;
      v481[1] = 0;
      char v480 = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v481, v9);
      goto LABEL_181;
    }
LABEL_449:
    while (1)
    {
      __break(1u);
LABEL_450:
      if (!v27) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v9);
      char v110 = 0;
      unsigned int v9 = *(WTF::StringImpl **)a1;
      unint64_t v27 = *((void *)a1 + 1);
      int v109 = 1;
      uint64_t v108 = *((void *)a1 + 2);
LABEL_158:
      if (v2) {
        char v111 = v110;
      }
      else {
        char v111 = 0;
      }
      unint64_t v112 = v108 - (void)v9;
      if (v27 <= v112)
      {
        unint64_t v210 = 0;
        uint64_t v262 = *((void *)a1 + 3);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        if (v27 && v262)
        {
          (*(void (**)(uint64_t))(*(void *)v262 + 16))(v262);
          unsigned int v9 = *(WTF::StringImpl **)a1;
          unint64_t v210 = *((void *)a1 + 1);
        }
        else
        {
          unsigned int v9 = 0;
        }
        goto LABEL_317;
      }
      uint64_t v113 = (unsigned __int8 *)v9 + v112;
      *((void *)a1 + 2) = v113 + 1;
      if (!v9)
      {
        unint64_t v210 = v27;
        goto LABEL_317;
      }
      unsigned int v114 = *v113;
      if (v114 > 1)
      {
LABEL_319:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v212 = *((void *)a1 + 3);
        if (!v212
          || !v27
          || (uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v212 + 16))(v212, v9),
              !*(void *)a1))
        {
          LOBYTE(v3) = 0;
          LOBYTE(v444) = 0;
          v445[24] = 0;
          int v117 = 1;
LABEL_169:
          if (v480) {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v478, v9);
          }
          if (!v117)
          {
            *(_OWORD *)char v445 = 0uLL;
            uint64_t v460 = v2;
            *(void *)char v461 = v5;
            *(_WORD *)&v461[8] = v4;
            uint64_t v2 = 1;
            unsigned __int8 v462 = 1;
            uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v445, v9);
            LOBYTE(v459) = v3;
            char v463 = 1;
            goto LABEL_174;
          }
          char v100 = *(WTF::StringImpl **)a1;
          uint64_t v214 = *((void *)a1 + 1);
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          uint64_t v158 = *((void *)a1 + 3);
          if (v158 && v214) {
LABEL_250:
          }
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v158 + 16))(v158, v100);
LABEL_326:
          LOBYTE(v459) = 0;
          char v463 = 0;
          int v215 = *(WTF::StringImpl **)a1;
          uint64_t v216 = *((void *)a1 + 1);
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          uint64_t result = *((void *)a1 + 3);
          if (result && v216) {
            uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v215);
          }
          goto LABEL_174;
        }
        BOOL v116 = 0;
        int v115 = 1;
        if (!v4)
        {
LABEL_165:
          LOBYTE(v474) = v3;
          if (v480)
          {
            uint64_t v2 = (uint64_t)v478;
            uint64_t v5 = v479;
            int v478 = 0;
            uint64_t v479 = 0;
            if (!v109)
            {
              LOBYTE(v477) = v111;
              if (!v115)
              {
                HIBYTE(v477) = v116;
                LOBYTE(v444) = v3;
                uint64_t v475 = 0;
                uint64_t v476 = 0;
                int v4 = v477;
                *(_WORD *)&v445[16] = v477;
                v445[24] = 1;
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v475, v9);
                int v117 = 0;
                goto LABEL_169;
              }
            }
          }
        }
      }
      else
      {
        int v115 = 0;
        BOOL v116 = v114 != 0;
        if (!v4) {
          goto LABEL_165;
        }
      }
    }
LABEL_316:
    char v111 = 0;
    unint64_t v210 = 0;
    unsigned int v9 = 0;
    int v109 = 1;
LABEL_317:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v211 = *((void *)a1 + 3);
    if (v211 && v210)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v211 + 16))(v211, v9, v210);
      unsigned int v9 = *(WTF::StringImpl **)a1;
      unint64_t v27 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v27 = 0;
      unsigned int v9 = 0;
    }
    goto LABEL_319;
  }
  LOBYTE(v478) = 0;
  char v480 = 0;
LABEL_181:
  if (v445[8]) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v444, v9);
  }
  if (v2)
  {
    int v122 = v478;
    int v478 = 0;
    uint64_t v479 = 0;
    v474 = v122;
    uint64_t v475 = v5;
    uint64_t v2 = 1;
    LOBYTE(v476) = 1;
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v478, v9);
    int v3 = 0;
    LOBYTE(v477) = 1;
    goto LABEL_186;
  }
  unsigned int v9 = *(WTF::StringImpl **)a1;
  uint64_t v213 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v163 = *((void *)a1 + 3);
  if (v163 && v213) {
LABEL_255:
  }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v163 + 16))(v163, v9);
LABEL_323:
  LOBYTE(v474) = 0;
  LOBYTE(v477) = 0;
  unsigned int v9 = *(WTF::StringImpl **)a1;
  unint64_t v27 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result && v27) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v9);
  }
  int v3 = 1;
LABEL_186:
  if (*(void *)a1)
  {
    if (v443) {
      goto LABEL_449;
    }
    LOBYTE(v444) = v14;
    if (!v473) {
      goto LABEL_449;
    }
    v445[0] = 0;
    char v446 = 0;
    int v123 = v472;
    if (v472)
    {
      *(_WORD *)char v445 = v469;
      long long v124 = v470;
      long long v470 = 0u;
      long long v125 = v471;
      long long v471 = 0u;
      *(_OWORD *)&v445[8] = v124;
      *(_OWORD *)&v445[24] = v125;
      char v446 = 1;
    }
    if (!v468) {
      goto LABEL_449;
    }
    LOBYTE(v447) = 0;
    char v450 = 0;
    int v126 = v467;
    if (v467)
    {
      char v447 = v464;
      uint64_t v127 = v465;
      v464 = 0;
      uint64_t v465 = 0;
      uint64_t v448 = v127;
      v449[0] = v466[0];
      *(_DWORD *)((char *)v449 + 7) = *(_DWORD *)((char *)v466 + 7);
      char v450 = 1;
    }
    if (!v463) {
      goto LABEL_449;
    }
    char v451 = 0;
    unsigned __int8 v455 = 0;
    int v128 = v462;
    if (v462)
    {
      char v129 = (char)v459;
      char v451 = (char)v459;
      uint64_t v452 = v460;
      uint64_t v130 = *(void *)v461;
      uint64_t v460 = 0;
      *(void *)char v461 = 0;
      uint64_t v453 = v130;
      __int16 v454 = *(_WORD *)&v461[8];
      int v131 = 1;
      unsigned __int8 v455 = 1;
      if (v3) {
        goto LABEL_449;
      }
    }
    else
    {
      char v129 = 0;
      int v131 = 0;
      if (v3) {
        goto LABEL_449;
      }
    }
    LOBYTE(v456) = 0;
    char v458 = 0;
    int v132 = v476;
    if ((_BYTE)v476)
    {
      v456 = v474;
      uint64_t v133 = v475;
      v474 = 0;
      uint64_t v475 = 0;
      uint64_t v457 = v133;
      char v458 = 1;
    }
    *(unsigned char *)a2 = v14;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 48) = 0;
    if (v123)
    {
      *(_WORD *)(a2 + 8) = *(_WORD *)v445;
      long long v134 = *(_OWORD *)&v445[8];
      long long v135 = *(_OWORD *)&v445[24];
      memset(&v445[8], 0, 32);
      *(_OWORD *)(a2 + 16) = v134;
      *(_OWORD *)(a2 + 32) = v135;
      *(unsigned char *)(a2 + 48) = 1;
    }
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 88) = 0;
    if (v126)
    {
      *(void *)(a2 + 56) = v447;
      uint64_t v136 = v448;
      char v447 = 0;
      uint64_t v448 = 0;
      *(void *)(a2 + 64) = v136;
      *(void *)(a2 + 72) = v449[0];
      *(_DWORD *)(a2 + 79) = *(_DWORD *)((char *)v449 + 7);
      *(unsigned char *)(a2 + 88) = 1;
    }
    *(unsigned char *)(a2 + 96) = 0;
    *(unsigned char *)(a2 + 128) = 0;
    if (v128)
    {
      *(unsigned char *)(a2 + 96) = v129;
      *(void *)(a2 + 104) = v452;
      uint64_t v137 = v453;
      uint64_t v452 = 0;
      uint64_t v453 = 0;
      *(void *)(a2 + 112) = v137;
      *(_WORD *)(a2 + 120) = v454;
      *(unsigned char *)(a2 + 128) = 1;
    }
    *(unsigned char *)(a2 + 136) = 0;
    *(unsigned char *)(a2 + 152) = 0;
    if (v132)
    {
      *(void *)(a2 + 136) = v456;
      uint64_t v138 = v457;
      v456 = 0;
      uint64_t v457 = 0;
      *(void *)(a2 + 144) = v138;
      *(unsigned char *)(a2 + 152) = 1;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v456, v9);
      int v131 = v455;
    }
    *(unsigned char *)(a2 + 160) = 1;
    if (v131) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v452, v9);
    }
    if (v450) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v447, v9);
    }
    uint64_t result = std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v445, v9);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 160) = 0;
    int v132 = v476;
  }
  if (v132) {
    char v139 = v3;
  }
  else {
    char v139 = 1;
  }
  if ((v139 & 1) == 0) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v474, v9);
  }
  if (v463 && v462) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v460, v9);
  }
  if (v468 && v467) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v464, v9);
  }
  if (v473) {
    return std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v469, v9);
  }
  return result;
}

void sub_19889BAB4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF::StringImpl *a38,char a39,uint64_t a40,uint64_t a41,char a42,int a43,__int16 a44,char a45,char a46,WTF::StringImpl *a47,char a48,uint64_t a49,uint64_t a50,char a51,int a52,__int16 a53,char a54,char a55)
{
}

WTF *IPC::ArgumentCoder<WebCore::DigitalCredentialRequestOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v8)
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = v7;
      *(unsigned char *)(a2 + 16) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    if (v8)
    {
      uint64_t result = v6;
      if (v6)
      {
        uint64_t v6 = 0;
        LODWORD(v7) = 0;
        return (WTF *)WTF::fastFree(result, v5);
      }
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::IdentityRequestProvider,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19889BD08(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    int v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::MockCameraProperties,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::VectorArgumentCoder<false,WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 32));
  IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 40);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 56));
}

uint64_t IPC::ArgumentCoder<WebCore::MockDisplayProperties,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 8));
  int v7 = *(_DWORD *)(a2 + 16);
  IPC::Encoder::operator<<<int>(a1, &v7);
  int v6 = *(_DWORD *)(a2 + 20);
  return IPC::Encoder::operator<<<int>(a1, &v6);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  char v5 = *(unsigned char *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  unsigned __int8 v6 = *(_DWORD *)(a2 + 88);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  return IPC::ArgumentCoder<std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,void>::encode<IPC::Encoder,std::variant<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties> const&>(a1, (int *)(a2 + 24), v6);
}

void IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v101);
  uint64_t v7 = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v99);
  unint64_t v8 = *((void *)a1 + 1);
  unsigned int v9 = *(WTF::StringImpl **)a1;
  unint64_t v10 = *((void *)a1 + 2) - *(void *)a1;
  if (v8 <= v10)
  {
    unint64_t v43 = 0;
    unsigned int v12 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        unsigned int v12 = *(WTF::StringImpl **)a1;
        unint64_t v43 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v43 = 0;
        unsigned int v12 = 0;
      }
    }
    goto LABEL_87;
  }
  unsigned int v11 = (unsigned __int8 *)v9 + v10;
  unsigned int v12 = (WTF::StringImpl *)(v11 + 1);
  *((void *)a1 + 2) = v11 + 1;
  if (!v9)
  {
    unint64_t v43 = v8;
    unsigned int v12 = 0;
LABEL_87:
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v45 = *((void *)a1 + 3);
    if (v45)
    {
      if (v43)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v45 + 16))(v45, v12, v43);
        unsigned int v9 = *(WTF::StringImpl **)a1;
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        unsigned int v9 = 0;
      }
    }
    goto LABEL_88;
  }
  unsigned int v13 = *v11;
  if (v13 < 4)
  {
    unsigned int v14 = v13 | 0x100;
    goto LABEL_5;
  }
LABEL_88:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v46 = *((void *)a1 + 3);
  if (!v46 || !v8)
  {
    unsigned int v9 = 0;
    unsigned int v14 = 0;
    unint64_t v8 = 0;
LABEL_90:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v47 = *((void *)a1 + 3);
    if (v47)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v47 + 16))(v47, v9);
        CFTypeRef v48 = *(WTF::StringImpl **)a1;
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        CFTypeRef v48 = 0;
      }
    }
    else
    {
      CFTypeRef v48 = 0;
      unint64_t v8 = 0;
    }
LABEL_92:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7 && v8) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v7 + 16))(v7, v48);
    }
    goto LABEL_8;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v46 + 16))(v46, v9);
  unsigned int v14 = 0;
  unsigned int v9 = *(WTF::StringImpl **)a1;
  unint64_t v8 = *((void *)a1 + 1);
LABEL_5:
  if (v8 <= *((void *)a1 + 2) - (void)v9) {
    goto LABEL_90;
  }
  unsigned int v12 = (WTF::StringImpl *)*((void *)a1 + 2);
  uint64_t v15 = (unsigned __int8 *)v12 + 1;
  *((void *)a1 + 2) = (char *)v12 + 1;
  if (!v9)
  {
    CFTypeRef v48 = 0;
    goto LABEL_92;
  }
  unsigned int v12 = (WTF::StringImpl *)*(unsigned __int8 *)v12;
  if (v12 >= 4)
  {
LABEL_8:
    LOBYTE(v124) = 0;
    unsigned __int8 v128 = 0;
    goto LABEL_19;
  }
  if (v12)
  {
    if (v12 == 1)
    {
      IPC::Decoder::decode<WTF::String>(a1, (uint64_t)v118);
      uint64_t v7 = IPC::Decoder::decode<unsigned int>(a1);
      unsigned int v12 = *(WTF::StringImpl **)a1;
      unint64_t v16 = LOBYTE(v118[1]);
      if (*(void *)a1)
      {
        if (!LOBYTE(v118[1])) {
          goto LABEL_190;
        }
        unint64_t v16 = (unint64_t)v118[0];
        v118[0] = 0;
        if ((v7 & 0xFF00000000) == 0) {
          goto LABEL_190;
        }
        unint64_t v124 = v16;
        char v17 = 1;
        int v125 = v7;
        int v127 = 1;
      }
      else
      {
        if (LOBYTE(v118[1]))
        {
          uint64_t v98 = v118[0];
          v118[0] = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2) {
              WTF::StringImpl::destroy(v98, v9);
            }
            else {
              *(_DWORD *)v98 -= 2;
            }
          }
        }
        unsigned int v9 = *(WTF::StringImpl **)a1;
        uint64_t v51 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v7 = *((void *)a1 + 3);
        if (v7 && v51) {
          uint64_t v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v7 + 16))(v7, v9);
        }
        char v17 = 0;
        LOBYTE(v124) = 0;
      }
      goto LABEL_18;
    }
    if (v12 != 2)
    {
      LOWORD(v2) = IPC::Decoder::decode<WebCore::CaptureDevice::DeviceType>((uint64_t *)a1);
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v115);
      if (!(_BYTE)v116)
      {
        unsigned int v58 = *(WTF::StringImpl **)a1;
        uint64_t v59 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v60 = *((void *)a1 + 3);
        if (v60)
        {
          if (v59) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v60 + 16))(v60, v58);
          }
        }
      }
      uint64_t v7 = (uint64_t)IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a1);
      if (*(void *)a1)
      {
        unint64_t v16 = (unsigned __int16)v2;
        if ((unsigned __int16)v2 <= 0xFFu) {
          goto LABEL_190;
        }
        LOBYTE(v103) = (_BYTE)v2;
        unint64_t v16 = v116;
        if (!(_BYTE)v116) {
          goto LABEL_190;
        }
        uint64_t v39 = v7;
        char v40 = (char)v38;
        uint64_t v2 = &v104;
        uint64_t v7 = WebCore::Color::Color();
        if (!v40) {
          goto LABEL_190;
        }
        BOOL v105 = (WTF *)v39;
        LOBYTE(v118[0]) = (_BYTE)v103;
        WebCore::Color::Color();
        uint64_t v119 = v105;
        LOBYTE(v120[0]) = 1;
        if (((unint64_t)v104 & 0x8000000000000) != 0)
        {
          int v53 = (unsigned int *)((unint64_t)v104 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v104 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v53);
            WTF::fastFree((WTF *)v53, v38);
          }
        }
      }
      else
      {
        LOBYTE(v118[0]) = 0;
        LOBYTE(v120[0]) = 0;
      }
      if ((_BYTE)v116)
      {
        if (((unint64_t)v115 & 0x8000000000000) != 0)
        {
          unsigned int v52 = (unsigned int *)((unint64_t)v115 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v115 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v52);
            WTF::fastFree((WTF *)v52, v38);
          }
        }
      }
      if (LOBYTE(v120[0])
        || (unsigned int v41 = *(WTF::StringImpl **)a1,
            uint64_t v61 = *((void *)a1 + 1),
            *(void *)a1 = 0,
            *((void *)a1 + 1) = 0,
            (uint64_t v62 = *((void *)a1 + 3)) != 0)
        && v61
        && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v62 + 16))(v62, v41), LOBYTE(v120[0])))
      {
        LOBYTE(v124) = v118[0];
        WebCore::Color::Color();
        int v126 = v119;
        int v127 = 3;
        char v42 = 1;
      }
      else
      {
        char v42 = 0;
        LOBYTE(v124) = 0;
      }
      unsigned __int8 v128 = v42;
      uint64_t v7 = std::__optional_destruct_base<WebCore::MockDisplayProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v41);
      goto LABEL_19;
    }
    unint64_t v24 = ((unint64_t)(v15 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v9;
    BOOL v3 = v8 < v24 || v8 - v24 < 8;
    if (v3)
    {
      int v4 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v54 = *((void *)a1 + 3);
      if (v54)
      {
        (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
        int v4 = 0;
        unint64_t v55 = *(WTF::StringImpl **)a1;
        uint64_t v56 = *((void *)a1 + 1);
        uint64_t v57 = *((void *)a1 + 3);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        if (v57)
        {
          if (v56)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v55);
            int v4 = 0;
          }
        }
      }
    }
    else
    {
      uint64_t v26 = (WTF::StringImpl **)((char *)v9 + v24);
      int v4 = *v26;
      *((void *)a1 + 2) = v26 + 1;
    }
    LOWORD(v2) = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>((uint64_t *)a1);
    unint64_t v27 = IPC::Decoder::decode<unsigned long long>(a1);
    if ((_BYTE)v28)
    {
      unint64_t v29 = v27;
      char v110 = 0;
      uint64_t v111 = 0;
      if (v27 >= 0x5555)
      {
        do
        {
          IPC::Decoder::decode<WebCore::VideoPresetData>((uint64_t)&v103, (unint64_t *)a1);
          if (!(_BYTE)v108) {
            goto LABEL_136;
          }
          if (HIDWORD(v111) == v111)
          {
            WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::VideoPresetData>((unsigned int *)&v110, (unint64_t)&v103);
          }
          else
          {
            uint64_t v63 = (char *)v110 + 48 * HIDWORD(v111);
            unsigned int v64 = v103;
            *((void *)v63 + 1) = 0;
            *((void *)v63 + 2) = 0;
            *(void *)uint64_t v63 = v64;
            int v65 = v104;
            CFTypeRef v104 = 0;
            *((void *)v63 + 1) = v65;
            *((_DWORD *)v63 + 4) = v105;
            LODWORD(v65) = HIDWORD(v105);
            HIDWORD(v105) = 0;
            *((_DWORD *)v63 + 5) = v65;
            LOBYTE(v65) = (_BYTE)v107;
            *(_OWORD *)(v63 + 24) = v106;
            v63[40] = (char)v65;
            ++HIDWORD(v111);
          }
          if ((_BYTE)v108)
          {
            char v66 = v104;
            if (v104)
            {
              CFTypeRef v104 = 0;
              LODWORD(v105) = 0;
              WTF::fastFree(v66, v28);
            }
          }
          --v29;
        }
        while (v29);
        unsigned int v67 = HIDWORD(v111);
        char v68 = v110;
        if (v111 > HIDWORD(v111))
        {
          uint64_t v69 = v110;
          if (HIDWORD(v111))
          {
            if (HIDWORD(v111) >= 0x5555556)
            {
              __break(0xC471u);
              return;
            }
            unsigned int v70 = 48 * HIDWORD(v111);
            int v71 = (WTF *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v111)));
            LODWORD(v111) = v70 / 0x30;
            char v110 = v71;
            uint64_t v69 = v68;
            if (v71 != v68)
            {
              WTF::VectorMover<false,WebCore::VideoPresetData>::move(v68, (WTF *)((char *)v68 + 48 * v67), (uint64_t)v71);
              uint64_t v69 = v110;
            }
          }
          if (v68)
          {
            if (v69 == v68)
            {
              char v110 = 0;
              LODWORD(v111) = 0;
            }
            WTF::fastFree(v68, v28);
            char v68 = v110;
          }
          else
          {
            char v68 = v69;
          }
        }
        int v115 = v68;
        uint64_t v97 = v111;
        char v110 = 0;
        uint64_t v111 = 0;
        uint64_t v116 = v97;
      }
      else
      {
        if (v27)
        {
          unsigned int v30 = 48 * v27;
          char v31 = (WTF *)WTF::fastMalloc((WTF *)(48 * v27));
          LODWORD(v111) = v30 / 0x30;
          char v110 = v31;
          while (1)
          {
            IPC::Decoder::decode<WebCore::VideoPresetData>((uint64_t)&v103, (unint64_t *)a1);
            if (!(_BYTE)v108) {
              break;
            }
            if (HIDWORD(v111) == v111)
            {
              WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::VideoPresetData>((unsigned int *)&v110, (unint64_t)&v103);
            }
            else
            {
              unint64_t v32 = (char *)v110 + 48 * HIDWORD(v111);
              unint64_t v33 = v103;
              *((void *)v32 + 1) = 0;
              *((void *)v32 + 2) = 0;
              *(void *)unint64_t v32 = v33;
              unint64_t v34 = v104;
              CFTypeRef v104 = 0;
              *((void *)v32 + 1) = v34;
              *((_DWORD *)v32 + 4) = v105;
              LODWORD(v34) = HIDWORD(v105);
              HIDWORD(v105) = 0;
              *((_DWORD *)v32 + 5) = v34;
              LOBYTE(v34) = (_BYTE)v107;
              *(_OWORD *)(v32 + 24) = v106;
              v32[40] = (char)v34;
              ++HIDWORD(v111);
            }
            if ((_BYTE)v108)
            {
              long long v35 = v104;
              if (v104)
              {
                CFTypeRef v104 = 0;
                LODWORD(v105) = 0;
                WTF::fastFree(v35, v28);
              }
            }
            if (!--v29)
            {
              unsigned int v36 = v110;
              uint64_t v37 = v111;
              goto LABEL_84;
            }
          }
LABEL_136:
          LOBYTE(v115) = 0;
          unsigned __int8 v117 = 0;
          WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v110, v28);
          goto LABEL_137;
        }
        unsigned int v36 = 0;
        uint64_t v37 = 0;
LABEL_84:
        char v110 = 0;
        uint64_t v111 = 0;
        int v115 = v36;
        uint64_t v116 = v37;
      }
      unsigned __int8 v117 = 1;
      WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v110, v28);
      goto LABEL_138;
    }
    LOBYTE(v115) = 0;
    unsigned __int8 v117 = 0;
LABEL_137:
    char v72 = *(WTF::StringImpl **)a1;
    uint64_t v73 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v74 = *((void *)a1 + 3);
    if (v74 && v73) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v74 + 16))(v74, v72);
    }
LABEL_138:
    IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v113);
    if (!v114)
    {
      uint64_t v90 = *(WTF::StringImpl **)a1;
      uint64_t v91 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v92 = *((void *)a1 + 3);
      if (v92)
      {
        if (v91) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v92 + 16))(v92, v90);
        }
      }
    }
    uint64_t v7 = (uint64_t)IPC::Decoder::decode<WTF::Vector<WebCore::MeteringMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v110, (uint64_t *)a1);
    unsigned int v75 = (WTF::StringImpl *)*((void *)a1 + 1);
    uint64_t v76 = *(char **)a1;
    unint64_t v77 = *((void *)a1 + 2) - *(void *)a1;
    if ((unint64_t)v75 <= v77)
    {
      unint64_t v16 = 0;
      unsigned int v12 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v93 = *((void *)a1 + 3);
      if (v93)
      {
        if (v75)
        {
          (*(void (**)(uint64_t))(*(void *)v93 + 16))(v93);
          unsigned int v12 = *(WTF::StringImpl **)a1;
          unint64_t v16 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v16 = 0;
          unsigned int v12 = 0;
        }
      }
    }
    else
    {
      int v78 = &v76[v77];
      unsigned int v12 = (WTF::StringImpl *)(v78 + 1);
      *((void *)a1 + 2) = v78 + 1;
      if (v76)
      {
        unint64_t v16 = *v78;
        if (v16 > 1) {
          goto LABEL_171;
        }
        int v79 = 0;
        BOOL v80 = v16 != 0;
        if (!v3) {
          goto LABEL_143;
        }
        while (1)
        {
          do
          {
LABEL_190:
            __break(1u);
LABEL_191:
            if (v16)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v7 + 16))(v7, v12, v16);
              uint64_t v76 = *(char **)a1;
              unsigned int v75 = (WTF::StringImpl *)*((void *)a1 + 1);
            }
            else
            {
              unsigned int v75 = 0;
              uint64_t v76 = 0;
            }
LABEL_171:
            *(void *)a1 = 0;
            *((void *)a1 + 1) = 0;
            uint64_t v94 = *((void *)a1 + 3);
            if (!v94
              || !v75
              || (uint64_t v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v94 + 16))(v94, v76),
                  (unint64_t v16 = *(void *)a1) == 0))
            {
              LOBYTE(v118[0]) = 0;
              char v122 = 0;
              goto LABEL_150;
            }
            BOOL v80 = 0;
            int v79 = 1;
          }
          while (v3);
LABEL_143:
          unsigned int v103 = v4;
          unint64_t v16 = (unsigned __int16)v2;
          if ((unsigned __int16)v2 > 0xFFu)
          {
            LOBYTE(v104) = (_BYTE)v2;
            unint64_t v16 = v117;
            if (v117)
            {
              BOOL v105 = v115;
              uint64_t v81 = v116;
              int v115 = 0;
              uint64_t v116 = 0;
              *(void *)&long long v106 = v81;
              unint64_t v16 = v114;
              if (v114)
              {
                uint64_t v2 = &v105;
                uint64_t v7 = WebCore::Color::Color();
                unint64_t v16 = v112;
                if (v112)
                {
                  unint64_t v16 = (unint64_t)v110;
                  uint64_t v107 = v110;
                  uint64_t v82 = v111;
                  char v110 = 0;
                  uint64_t v111 = 0;
                  uint64_t v108 = v82;
                  if (!v79) {
                    break;
                  }
                }
              }
            }
          }
        }
        __int16 v109 = v80;
        v118[0] = v103;
        LOBYTE(v118[1]) = (_BYTE)v104;
        uint64_t v119 = v105;
        uint64_t v83 = v106;
        BOOL v105 = 0;
        *(void *)&long long v106 = 0;
        v120[0] = v83;
        WebCore::Color::Color();
        v120[2] = v107;
        uint64_t v85 = v108;
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        v120[3] = v85;
        __int16 v121 = v109;
        char v122 = 1;
        if ((*((void *)&v106 + 1) & 0x8000000000000) != 0)
        {
          uint64_t v89 = (unsigned int *)(*((void *)&v106 + 1) & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v106 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v89);
            WTF::fastFree((WTF *)v89, v84);
          }
        }
        WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v84);
LABEL_150:
        if (v112 && v110) {
          WTF::fastFree(v110, v76);
        }
        if (v114)
        {
          if ((v113 & 0x8000000000000) != 0)
          {
            unint64_t v88 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v88);
              WTF::fastFree((WTF *)v88, v76);
            }
          }
        }
        if (v117) {
          WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v115, v76);
        }
        if (v122
          || (char v86 = *(WTF::StringImpl **)a1,
              uint64_t v95 = *((void *)a1 + 1),
              *(void *)a1 = 0,
              *((void *)a1 + 1) = 0,
              (uint64_t v96 = *((void *)a1 + 3)) != 0)
          && v95
          && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v96 + 16))(v96, v86), v122))
        {
          std::__variant_detail::__alt<2ul,WebCore::MockCameraProperties>::__alt[abi:sn180100]<WebCore::MockCameraProperties>((uint64_t)&v124, (uint64_t *)v118);
          int v127 = 2;
          char v87 = 1;
        }
        else
        {
          char v87 = 0;
          LOBYTE(v124) = 0;
        }
        unsigned __int8 v128 = v87;
        uint64_t v7 = std::__optional_destruct_base<WebCore::MockCameraProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v86);
        goto LABEL_19;
      }
      unint64_t v16 = (unint64_t)v75;
      unsigned int v12 = 0;
    }
    unsigned int v75 = 0;
    uint64_t v76 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7) {
      goto LABEL_191;
    }
    goto LABEL_171;
  }
  uint64_t v7 = IPC::Decoder::decode<unsigned int>(a1);
  unint64_t v16 = *(void *)a1;
  if (!*(void *)a1)
  {
    uint64_t v50 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7 && v50) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    }
    goto LABEL_8;
  }
  if ((v7 & 0xFF00000000) == 0) {
    goto LABEL_190;
  }
  LODWORD(v124) = v7;
  int v127 = 0;
  char v17 = 1;
LABEL_18:
  unsigned __int8 v128 = v17;
LABEL_19:
  if (!v128)
  {
    unsigned int v9 = *(WTF::StringImpl **)a1;
    uint64_t v49 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7)
    {
      if (v49) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v7 + 16))(v7, v9);
      }
    }
  }
  if (*(void *)a1)
  {
    unint64_t v16 = v102;
    if (!v102) {
      goto LABEL_190;
    }
    unint64_t v18 = v101;
    unint64_t v101 = 0;
    v118[0] = v18;
    unint64_t v16 = v100;
    if (!v100) {
      goto LABEL_190;
    }
    unint64_t v16 = (unint64_t)v99;
    unint64_t v99 = 0;
    v118[1] = (WTF::StringImpl *)v16;
    if (v14 <= 0xFF) {
      goto LABEL_190;
    }
    LOBYTE(v119) = v14;
    unint64_t v16 = v128;
    if (!v128) {
      goto LABEL_190;
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v120, (uint64_t)&v124);
    long long v19 = *(_OWORD *)v118;
    v118[0] = 0;
    v118[1] = 0;
    *(_OWORD *)a2 = v19;
    *(unsigned char *)(a2 + 16) = (_BYTE)v119;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 24, (uint64_t)v120);
    *(unsigned char *)(a2 + 96) = 1;
    if (v123 != -1) {
      ((void (*)(WTF::StringImpl **, void *))off_1EE9B4B80[v123])(&v103, v120);
    }
    int v123 = -1;
    unint64_t v20 = v118[1];
    v118[1] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v9);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    unint64_t v21 = v118[0];
    v118[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v9);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 96) = 0;
  }
  if (v128 && v127 != -1) {
    ((void (*)(WTF::StringImpl **, unint64_t *))off_1EE9B4B80[v127])(v118, &v124);
  }
  if (v100)
  {
    unsigned int v22 = v99;
    unint64_t v99 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v9);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if (v102)
  {
    int v23 = v101;
    unint64_t v101 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v9);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
}

void sub_19889CD14(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, int a13, __int16 a14, char a15, char a16, WTF *a17, int a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,uint64_t a23,WTF *a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,WTF::StringImpl *a35,WTF::StringImpl *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  std::__optional_destruct_base<WebCore::MockCameraProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a35, a2);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v47);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v47);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::OffsetRotation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
}

unint64_t IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<std::optional<WebCore::TransformOperationData>,void>::encode<IPC::Encoder,std::optional<WebCore::TransformOperationData> const&>(a1, a2 + 4);
  ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(a1, a2 + 96);
  ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(a1, a2 + 104);
  char v5 = *(unsigned char *)(a2 + 112);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 120);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(a1, (uint64_t *)(a2 + 136));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(a1, (uint64_t *)(a2 + 144));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,void>::encode<IPC::Encoder,WebCore::TransformOperation>(a1, (uint64_t *)(a2 + 152));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::PathOperation,WTF::RawPtrTraits<WebCore::PathOperation>,WTF::DefaultRefDerefTraits<WebCore::PathOperation>>,void>::encode<IPC::Encoder,WebCore::PathOperation>(a1, (uint64_t *)(a2 + 160));
  ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(a1, a2 + 168);
  ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(a1, a2 + 176);
  ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(a1, a2 + 184);
  ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(a1, a2 + 192);
  ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(a1, a2 + 200);
  IPC::ArgumentCoder<WebCore::OffsetRotation,void>::encode(a1, a2 + 208);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 216);
  return IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 232);
}

WebCore::Length *IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::decode(unsigned char *a1, unint64_t *a2)
{
  uint64_t v388 = *MEMORY[0x1E4F143B8];
  uint64_t v287 = IPC::Decoder::decode<float>(a2);
  unint64_t v3 = a2[1];
  unint64_t v4 = *a2;
  unint64_t v5 = a2[2] - *a2;
  if (v3 <= v5) {
    goto LABEL_375;
  }
  unsigned __int8 v6 = (unsigned __int8 *)(v4 + v5);
  a2[2] = (unint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v173 = v3;
    unint64_t v174 = 0;
    goto LABEL_376;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_377:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v177 = a2[3];
    if (v177 && v3) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v177 + 16))(v177, v4);
    }
    goto LABEL_410;
  }
  if (!v7)
  {
    char v283 = 0;
    int v20 = 0;
    long long v284 = 0u;
    goto LABEL_27;
  }
  IPC::Decoder::decode<WebCore::FloatRect>(a2, (uint64_t)&v303);
  unint64_t v8 = a2[1];
  unint64_t v9 = *a2;
  unint64_t v10 = a2[2] - *a2;
  if (v8 <= v10)
  {
    unint64_t v196 = 0;
    unint64_t v197 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v198 = a2[3];
    if (v198)
    {
      if (v8)
      {
        (*(void (**)(unint64_t))(*(void *)v198 + 16))(v198);
        unint64_t v197 = *a2;
        unint64_t v196 = a2[1];
      }
      else
      {
        unint64_t v196 = 0;
        unint64_t v197 = 0;
      }
    }
    goto LABEL_402;
  }
  unsigned int v11 = (unsigned __int8 *)(v9 + v10);
  a2[2] = (unint64_t)(v11 + 1);
  if (!v9)
  {
    unint64_t v196 = v8;
    unint64_t v197 = 0;
LABEL_402:
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v199 = a2[3];
    if (v199)
    {
      if (v196)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v199 + 16))(v199, v197, v196);
        unint64_t v9 = *a2;
        unint64_t v8 = a2[1];
      }
      else
      {
        unint64_t v8 = 0;
        unint64_t v9 = 0;
      }
    }
    goto LABEL_403;
  }
  unsigned int v12 = *v11;
  if (v12 >= 2)
  {
LABEL_403:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v200 = a2[3];
    if (v200 && v8) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v200 + 16))(v200, v9);
    }
    goto LABEL_424;
  }
  if (!v12)
  {
    int v18 = 0;
    char v281 = 0;
    char v19 = 0;
    goto LABEL_19;
  }
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a2, (uint64_t)v335);
  int v13 = v335[48];
  if (!v335[48])
  {
    unint64_t v212 = *a2;
    unint64_t v213 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v214 = a2[3];
    if (v214)
    {
      if (v213) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v214 + 16))(v214, v212);
      }
    }
  }
  int v279 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  uint64_t v15 = v14;
  if (!v14)
  {
    unint64_t v215 = *a2;
    unint64_t v216 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v217 = a2[3];
    if (v217)
    {
      if (v216) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v217 + 16))(v217, v215);
      }
    }
  }
  char v278 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  uint64_t v17 = v16;
  if (!v16)
  {
    unint64_t v218 = *a2;
    unint64_t v3 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v219 = a2[3];
    if (v219)
    {
      if (v3) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v219 + 16))(v219, v218);
      }
    }
  }
  unint64_t v9 = *a2;
  if (!*a2)
  {
    unint64_t v220 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v221 = a2[3];
    if (v221 && v220) {
      (*(void (**)(unint64_t, void))(*(void *)v221 + 16))(v221, 0);
    }
LABEL_424:
    unint64_t v222 = *a2;
    unint64_t v223 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v224 = a2[3];
    if (v224 && v223)
    {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v224 + 16))(v224, v222);
      char v19 = 0;
      unint64_t v9 = *a2;
    }
    else
    {
      unint64_t v9 = 0;
      char v19 = 0;
    }
    int v18 = 1;
    goto LABEL_19;
  }
  if (!v13 || !v15 || !v17) {
    goto LABEL_374;
  }
  int v18 = 0;
  char v19 = v335[0];
  long long v386 = *(_OWORD *)&v335[1];
  *(_OWORD *)char v387 = *(_OWORD *)&v335[17];
  *(_OWORD *)&v387[15] = *(_OWORD *)&v335[32];
  char v281 = 1;
LABEL_19:
  char v282 = v19;
  unint64_t v3 = a2[1];
  if (v3 <= a2[2] - v9)
  {
    unint64_t v201 = 0;
    unint64_t v202 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v203 = a2[3];
    if (v203)
    {
      if (v3)
      {
        (*(void (**)(unint64_t))(*(void *)v203 + 16))(v203);
        unint64_t v202 = *a2;
        unint64_t v201 = a2[1];
      }
      else
      {
        unint64_t v201 = 0;
        unint64_t v202 = 0;
      }
    }
    goto LABEL_407;
  }
  unint64_t v21 = (unsigned __int8 *)a2[2];
  a2[2] = (unint64_t)(v21 + 1);
  if (!v9)
  {
    unint64_t v201 = v3;
    unint64_t v202 = 0;
LABEL_407:
    unint64_t v3 = 0;
    unint64_t v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v204 = a2[3];
    if (v204)
    {
      if (v201)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v204 + 16))(v204, v202, v201);
        unint64_t v9 = *a2;
        unint64_t v3 = a2[1];
      }
      else
      {
        unint64_t v3 = 0;
        unint64_t v9 = 0;
      }
    }
    goto LABEL_408;
  }
  unsigned int v22 = *v21;
  if (v22 <= 1)
  {
    int v23 = 0;
    BOOL v24 = v22 != 0;
    goto LABEL_23;
  }
LABEL_408:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v205 = a2[3];
  if (!v205 || !v3)
  {
    *a2 = 0;
    a2[1] = 0;
LABEL_410:
    unint64_t v206 = *a2;
    unint64_t v207 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    long long v284 = 0u;
    unint64_t v208 = a2[3];
    if (v208 && v207) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v208 + 16))(v208, v206);
    }
    int v20 = 1;
    goto LABEL_27;
  }
  (*(void (**)(unint64_t, unint64_t))(*(void *)v205 + 16))(v205, v9);
  if (!*a2)
  {
    unint64_t v269 = a2[1];
    unint64_t v270 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v270 && v269) {
      (*(void (**)(unint64_t, void))(*(void *)v270 + 16))(v270, 0);
    }
    goto LABEL_410;
  }
  BOOL v24 = 0;
  int v23 = 1;
LABEL_23:
  if (!v304 || v18 || v23) {
    goto LABEL_374;
  }
  BOOL v280 = v24;
  int v20 = 0;
  long long v284 = v303;
  long long v384 = v386;
  v385[0] = *(_OWORD *)v387;
  *(_OWORD *)((char *)v385 + 15) = *(_OWORD *)&v387[15];
  char v283 = 1;
LABEL_27:
  IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)&v305, (uint64_t *)a2);
  int v286 = v20;
  *(_WORD *)int v335 = 0;
  IPC::Decoder::operator>><unsigned char>(a2, v335);
  char v25 = v335[0];
  if (v335[1]) {
    BOOL v26 = v335[0] > 4u;
  }
  else {
    BOOL v26 = 1;
  }
  int v27 = v26;
  if (v27 == 1)
  {
    unint64_t v178 = *a2;
    unint64_t v179 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v180 = a2[3];
    if (v180 && v179) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v180 + 16))(v180, v178);
    }
    char v25 = 0;
  }
  unint64_t v28 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v29)
  {
    v335[0] = 0;
    v335[16] = 0;
LABEL_66:
    unint64_t v43 = (void *)*a2;
    unint64_t v56 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v57 = a2[3];
    if (v57)
    {
      if (v56)
      {
        (*(void (**)(unint64_t, void *))(*(void *)v57 + 16))(v57, v43);
        if (*a2) {
          goto LABEL_374;
        }
      }
    }
    int v42 = 0;
    goto LABEL_68;
  }
  unint64_t v30 = v28;
  long long v386 = 0uLL;
  if (v28 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v288, (uint64_t *)a2);
      if (!(_BYTE)v289)
      {
LABEL_65:
        v335[0] = 0;
        v335[16] = 0;
        WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v386, v29);
        goto LABEL_66;
      }
      int v48 = HIDWORD(v386);
      if (HIDWORD(v386) != DWORD2(v386)) {
        break;
      }
      uint64_t v49 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v386, HIDWORD(v386) + 1, (unint64_t)&v288);
      uint64_t v50 = HIDWORD(v386);
      int v51 = HIDWORD(v386) + 1;
      uint64_t v52 = v386;
      uint64_t v53 = *v49;
      *uint64_t v49 = 0;
      *(void *)(v52 + 8 * v50) = v53;
      HIDWORD(v386) = v51;
      if ((_BYTE)v289) {
        goto LABEL_59;
      }
LABEL_63:
      if (!--v30)
      {
        WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v386, HIDWORD(v386));
        uint64_t v228 = *((void *)&v386 + 1);
        *(void *)int v335 = v386;
        long long v386 = 0uLL;
        *(void *)&v335[8] = v228;
        goto LABEL_52;
      }
    }
    uint64_t v54 = v288;
    char v288 = 0;
    *(void *)(v386 + 8 * HIDWORD(v386)) = v54;
    HIDWORD(v386) = v48 + 1;
LABEL_59:
    unint64_t v55 = v288;
    char v288 = 0;
    if (v55)
    {
      if (*((_DWORD *)v55 + 2) == 1) {
        (*(void (**)(WTF *))(*(void *)v55 + 8))(v55);
      }
      else {
        --*((_DWORD *)v55 + 2);
      }
    }
    goto LABEL_63;
  }
  if (v28)
  {
    uint64_t v31 = WTF::fastMalloc((WTF *)(8 * v28));
    DWORD2(v386) = v30;
    *(void *)&long long v386 = v31;
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v288, (uint64_t *)a2);
      if (!(_BYTE)v289) {
        goto LABEL_65;
      }
      int v32 = HIDWORD(v386);
      if (HIDWORD(v386) != DWORD2(v386)) {
        break;
      }
      unint64_t v33 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v386, HIDWORD(v386) + 1, (unint64_t)&v288);
      uint64_t v34 = HIDWORD(v386);
      int v35 = HIDWORD(v386) + 1;
      uint64_t v36 = v386;
      uint64_t v37 = *v33;
      *unint64_t v33 = 0;
      *(void *)(v36 + 8 * v34) = v37;
      HIDWORD(v386) = v35;
      if ((_BYTE)v289) {
        goto LABEL_43;
      }
LABEL_47:
      if (!--v30)
      {
        uint64_t v41 = *((void *)&v386 + 1);
        uint64_t v40 = v386;
        goto LABEL_51;
      }
    }
    unint64_t v38 = v288;
    char v288 = 0;
    *(void *)(v386 + 8 * HIDWORD(v386)) = v38;
    HIDWORD(v386) = v32 + 1;
LABEL_43:
    uint64_t v39 = v288;
    char v288 = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 2) == 1) {
        (*(void (**)(WTF *))(*(void *)v39 + 8))(v39);
      }
      else {
        --*((_DWORD *)v39 + 2);
      }
    }
    goto LABEL_47;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
LABEL_51:
  long long v386 = 0uLL;
  *(void *)int v335 = v40;
  *(void *)&v335[8] = v41;
LABEL_52:
  int v42 = 1;
  v335[16] = 1;
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v386, v29);
  if (*a2)
  {
    uint64_t v44 = WebCore::TransformOperations::TransformOperations();
    uint64_t v45 = *((void *)&v386 + 1);
    *(void *)&long long v303 = v386;
    long long v386 = 0uLL;
    *((void *)&v303 + 1) = v45;
    char v304 = 1;
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v44, v46);
    int v47 = 0;
    if (!v335[16]) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
LABEL_68:
  LOBYTE(v303) = 0;
  char v304 = 0;
  int v47 = 1;
  if (v42) {
LABEL_69:
  }
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v335, v43);
LABEL_70:
  if (v47)
  {
    unint64_t v181 = *a2;
    unint64_t v182 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v183 = a2[3];
    if (v183)
    {
      if (v182) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v183 + 16))(v183, v181);
      }
    }
  }
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v301, (uint64_t *)a2);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v299, (uint64_t *)a2);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v297, (uint64_t *)a2);
  unint64_t v58 = a2[1];
  unint64_t v59 = *a2;
  unint64_t v60 = a2[2] - *a2;
  if (v58 <= v60)
  {
    unint64_t v184 = 0;
    unint64_t v185 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v186 = a2[3];
    if (v186)
    {
      if (v58)
      {
        (*(void (**)(unint64_t))(*(void *)v186 + 16))(v186);
        unint64_t v185 = *a2;
        unint64_t v184 = a2[1];
      }
      else
      {
        unint64_t v184 = 0;
        unint64_t v185 = 0;
      }
    }
    goto LABEL_386;
  }
  uint64_t v61 = (unsigned __int8 *)(v59 + v60);
  a2[2] = (unint64_t)(v61 + 1);
  if (!v59)
  {
    unint64_t v184 = v58;
    unint64_t v185 = 0;
LABEL_386:
    unint64_t v58 = 0;
    unint64_t v59 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v187 = a2[3];
    if (v187)
    {
      if (v184)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v187 + 16))(v187, v185, v184);
        unint64_t v59 = *a2;
        unint64_t v58 = a2[1];
      }
      else
      {
        unint64_t v58 = 0;
        unint64_t v59 = 0;
      }
    }
    goto LABEL_387;
  }
  unsigned int v62 = *v61;
  if (v62 >= 2)
  {
LABEL_387:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v188 = a2[3];
    if (v188 && v58) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v188 + 16))(v188, v59);
    }
    goto LABEL_474;
  }
  if (!v62)
  {
    int v71 = 0;
    unsigned int v70 = 0;
    goto LABEL_259;
  }
  *(_WORD *)int v335 = 0;
  IPC::Decoder::operator>><unsigned char>(a2, v335);
  int v63 = v335[0];
  if (v335[1]) {
    BOOL v64 = v335[0] >= 4u;
  }
  else {
    BOOL v64 = 1;
  }
  char v65 = !v64;
  if (v64)
  {
    unint64_t v209 = *a2;
    unint64_t v210 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v211 = a2[3];
    if (v211 && v210) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v211 + 16))(v211, v209);
    }
    int v63 = 0;
  }
  unint64_t v66 = *a2;
  if (!*a2) {
    goto LABEL_474;
  }
  char v67 = v65 ^ 1;
  if (v63) {
    char v68 = 1;
  }
  else {
    char v68 = v65 ^ 1;
  }
  if ((v68 & 1) == 0)
  {
    IPC::Decoder::decode<std::optional<WebCore::Path>>(v335, a2);
    unint64_t v69 = *a2;
    if (*a2)
    {
      if (!BYTE4(v337)) {
        goto LABEL_374;
      }
      WebCore::ReferencePathOperation::create();
      unsigned int v70 = (WTF *)v386;
    }
    else
    {
      unsigned int v70 = 0;
    }
    if (BYTE4(v337) && BYTE4(v336) && *(_DWORD *)&v335[64] != -1) {
      ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[*(unsigned int *)&v335[64]])(&v386, &v335[8]);
    }
    if (!v69)
    {
      unint64_t v225 = *a2;
      unint64_t v226 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v227 = a2[3];
      if (!v227 || !v226) {
        goto LABEL_474;
      }
      goto LABEL_466;
    }
LABEL_95:
    if (*a2) {
      goto LABEL_258;
    }
    if (v70)
    {
      if (*((_DWORD *)v70 + 2) == 1) {
        (*(void (**)(WTF *))(*(void *)v70 + 8))(v70);
      }
      else {
        --*((_DWORD *)v70 + 2);
      }
    }
    goto LABEL_474;
  }
  if (v63 != 1) {
    char v67 = 1;
  }
  if ((v67 & 1) == 0)
  {
    unint64_t v72 = a2[1];
    if (v72 <= a2[2] - v66)
    {
      unint64_t v229 = 0;
      unint64_t v230 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v231 = a2[3];
      if (v231)
      {
        if (v72)
        {
          (*(void (**)(unint64_t))(*(void *)v231 + 16))(v231);
          unint64_t v229 = 0;
          unint64_t v271 = *a2;
          unint64_t v272 = a2[1];
          unint64_t v273 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          unint64_t v230 = 0;
          if (v273 && v272)
          {
            (*(void (**)(unint64_t, unint64_t))(*(void *)v273 + 16))(v273, v271);
            unint64_t v230 = *a2;
            unint64_t v229 = a2[1];
          }
        }
        else
        {
          unint64_t v229 = 0;
          unint64_t v230 = 0;
        }
      }
    }
    else
    {
      uint64_t v73 = (unsigned __int8 *)a2[2];
      a2[2] = (unint64_t)(v73 + 1);
      if (*v73 < 5u)
      {
        switch(*v73)
        {
          case 0u:
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)v335, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)&v386, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeRadius>((uint64_t)&v288, (uint64_t *)a2);
            unint64_t v74 = *a2;
            if (*a2)
            {
              if (!v335[20] || !v387[4] || !BYTE4(v289)) {
                goto LABEL_374;
              }
              WebCore::BasicShapeCircle::create();
              unsigned int v75 = v321;
            }
            else
            {
              unsigned int v75 = 0;
            }
            if (BYTE4(v289) && BYTE4(v288) == 11) {
              WebCore::Length::deref((WebCore::Length *)&v288);
            }
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](&v386);
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](v335);
            if (v74) {
              goto LABEL_252;
            }
            unint64_t v76 = *a2;
            unint64_t v77 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            unint64_t v78 = a2[3];
            if (!v78 || !v77) {
              goto LABEL_523;
            }
            goto LABEL_593;
          case 1u:
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)v335, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)&v386, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeRadius>((uint64_t)&v288, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeRadius>((uint64_t)&v321, (uint64_t *)a2);
            unint64_t v118 = *a2;
            if (*a2)
            {
              if (!v335[20] || !v387[4] || !BYTE4(v289) || !v323) {
                goto LABEL_374;
              }
              WebCore::BasicShapeEllipse::create();
              unsigned int v75 = v291;
            }
            else
            {
              unsigned int v75 = 0;
            }
            if (v323 && BYTE4(v321) == 11) {
              WebCore::Length::deref((WebCore::Length *)&v321);
            }
            if (BYTE4(v289) && BYTE4(v288) == 11) {
              WebCore::Length::deref((WebCore::Length *)&v288);
            }
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](&v386);
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](v335);
            if (v118) {
              goto LABEL_252;
            }
            unint64_t v76 = *a2;
            unint64_t v119 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            unint64_t v78 = a2[3];
            if (v78 && v119) {
              goto LABEL_593;
            }
            goto LABEL_523;
          case 2u:
            unsigned __int16 v92 = IPC::Decoder::decode<WebCore::RotationDirection>(a2);
            unint64_t v93 = IPC::Decoder::decode<unsigned long long>(a2);
            if (!(_BYTE)v94)
            {
              v335[0] = 0;
              v335[16] = 0;
              goto LABEL_482;
            }
            unint64_t v95 = v93;
            long long v386 = 0uLL;
            if (v93 < 0x20000)
            {
              if (!v93)
              {
                uint64_t v122 = 0;
                uint64_t v123 = 0;
LABEL_230:
                long long v386 = 0uLL;
                *(void *)int v335 = v122;
                *(void *)&v335[8] = v123;
LABEL_231:
                int v124 = 1;
                v335[16] = 1;
                WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v386, v94);
                int v126 = 0;
                goto LABEL_232;
              }
              uint64_t v96 = WTF::fastMalloc((WTF *)(8 * v93));
              DWORD2(v386) = v95;
              *(void *)&long long v386 = v96;
              while (1)
              {
                IPC::Decoder::decode<WebCore::Length>((uint64_t)&v288, (uint64_t *)a2);
                int v97 = v289;
                if ((_BYTE)v289)
                {
                  if (HIDWORD(v386) != DWORD2(v386))
                  {
                    uint64_t v98 = v386 + 8 * HIDWORD(v386);
                    *(_DWORD *)uint64_t v98 = 0;
                    *(_WORD *)(v98 + 5) = 0;
                    unsigned int v99 = BYTE4(v288);
                    *(_WORD *)(v98 + 4) = WORD2(v288);
                    if (v99 <= 0xD)
                    {
                      int v100 = 1 << v99;
                      if ((v100 & 0x7FC) != 0)
                      {
                        int v101 = BYTE6(v288);
                        *(unsigned char *)(v98 + 6) = BYTE6(v288);
                        if (v101)
                        {
                          *(_DWORD *)uint64_t v98 = v288;
                          goto LABEL_163;
                        }
                        int v102 = (int)v288;
                      }
                      else
                      {
                        if ((v100 & 0x3003) != 0)
                        {
                          *(_DWORD *)uint64_t v98 = 0;
                          goto LABEL_163;
                        }
                        int v102 = (int)v288;
                        LODWORD(v288) = 0;
                      }
                      *(_DWORD *)uint64_t v98 = v102;
                    }
LABEL_163:
                    BYTE4(v288) = 0;
                    ++HIDWORD(v386);
                    goto LABEL_164;
                  }
                  WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v386, (unint64_t)&v288);
                }
LABEL_164:
                if ((_BYTE)v289) {
                  BOOL v103 = BYTE4(v288) == 11;
                }
                else {
                  BOOL v103 = 0;
                }
                if (v103)
                {
                  WebCore::Length::deref((WebCore::Length *)&v288);
                  if (!v97) {
                    goto LABEL_512;
                  }
                }
                else if (!v97)
                {
                  goto LABEL_512;
                }
                if (!--v95)
                {
                  v335[16] = 0;
                  uint64_t v123 = *((void *)&v386 + 1);
                  uint64_t v122 = v386;
                  goto LABEL_230;
                }
              }
            }
            while (1)
            {
              IPC::Decoder::decode<WebCore::Length>((uint64_t)&v288, (uint64_t *)a2);
              int v251 = v289;
              if ((_BYTE)v289)
              {
                if (HIDWORD(v386) != DWORD2(v386))
                {
                  uint64_t v252 = v386 + 8 * HIDWORD(v386);
                  *(_DWORD *)uint64_t v252 = 0;
                  *(_WORD *)(v252 + 5) = 0;
                  unsigned int v253 = BYTE4(v288);
                  *(_WORD *)(v252 + 4) = WORD2(v288);
                  if (v253 <= 0xD)
                  {
                    int v254 = 1 << v253;
                    if ((v254 & 0x7FC) != 0)
                    {
                      int v255 = BYTE6(v288);
                      *(unsigned char *)(v252 + 6) = BYTE6(v288);
                      if (v255)
                      {
                        *(_DWORD *)uint64_t v252 = v288;
                        goto LABEL_503;
                      }
                      int v256 = (int)v288;
                    }
                    else
                    {
                      if ((v254 & 0x3003) != 0)
                      {
                        *(_DWORD *)uint64_t v252 = 0;
                        goto LABEL_503;
                      }
                      int v256 = (int)v288;
                      LODWORD(v288) = 0;
                    }
                    *(_DWORD *)uint64_t v252 = v256;
                  }
LABEL_503:
                  BYTE4(v288) = 0;
                  ++HIDWORD(v386);
                  goto LABEL_504;
                }
                WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v386, (unint64_t)&v288);
              }
LABEL_504:
              if ((_BYTE)v289) {
                BOOL v257 = BYTE4(v288) == 11;
              }
              else {
                BOOL v257 = 0;
              }
              if (v257)
              {
                WebCore::Length::deref((WebCore::Length *)&v288);
                if (!v251)
                {
LABEL_512:
                  v335[0] = 0;
                  v335[16] = 0;
                  WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v386, v94);
LABEL_482:
                  int v125 = (void *)*a2;
                  unint64_t v3 = a2[1];
                  *a2 = 0;
                  a2[1] = 0;
                  unint64_t v250 = a2[3];
                  if (v250 && v3) {
                    (*(void (**)(unint64_t, void *))(*(void *)v250 + 16))(v250, v125);
                  }
                  int v124 = 0;
                  int v126 = 1;
LABEL_232:
                  unint64_t v127 = *a2;
                  if (*a2)
                  {
                    if (v92 > 0xFFu && !v126)
                    {
                      WebCore::BasicShapePolygon::create();
                      unsigned int v75 = (_DWORD *)v386;
                      if (v335[16]) {
                        goto LABEL_236;
                      }
                      goto LABEL_237;
                    }
LABEL_374:
                    __break(1u);
LABEL_375:
                    unint64_t v173 = 0;
                    unint64_t v174 = 0;
                    *a2 = 0;
                    a2[1] = 0;
                    unint64_t v175 = a2[3];
                    if (v175)
                    {
                      if (v3)
                      {
                        (*(void (**)(unint64_t))(*(void *)v175 + 16))(v175);
                        unint64_t v174 = *a2;
                        unint64_t v173 = a2[1];
                      }
                      else
                      {
                        unint64_t v173 = 0;
                        unint64_t v174 = 0;
                      }
                    }
LABEL_376:
                    unint64_t v3 = 0;
                    unint64_t v4 = 0;
                    *a2 = 0;
                    a2[1] = 0;
                    unint64_t v176 = a2[3];
                    if (v176)
                    {
                      if (v173)
                      {
                        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v176 + 16))(v176, v174, v173);
                        unint64_t v4 = *a2;
                        unint64_t v3 = a2[1];
                      }
                      else
                      {
                        unint64_t v3 = 0;
                        unint64_t v4 = 0;
                      }
                    }
                    goto LABEL_377;
                  }
                  unsigned int v75 = 0;
                  if (v124) {
LABEL_236:
                  }
                    WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v335, v125);
LABEL_237:
                  if (!v127)
                  {
                    unint64_t v76 = *a2;
                    unint64_t v128 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    unint64_t v78 = a2[3];
                    if (v78 && v128)
                    {
LABEL_593:
                      (*(void (**)(unint64_t, unint64_t))(*(void *)v78 + 16))(v78, v76);
                      if (*a2) {
                        goto LABEL_374;
                      }
                    }
LABEL_523:
                    unint64_t v263 = *a2;
                    unint64_t v264 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    unint64_t v265 = a2[3];
                    if (v265 && v264) {
                      (*(void (**)(unint64_t, unint64_t))(*(void *)v265 + 16))(v265, v263);
                    }
                    unsigned int v75 = 0;
                    int v137 = 1;
LABEL_254:
                    unsigned __int16 v138 = IPC::Decoder::decode<WebCore::CSSBoxType>((uint64_t *)a2);
                    if (*a2)
                    {
                      if (v137) {
                        goto LABEL_374;
                      }
                      char v139 = v138;
                      if (v138 <= 0xFFu) {
                        goto LABEL_374;
                      }
                      uint64_t v140 = WTF::fastMalloc((WTF *)0x18);
                      unsigned int v70 = (WTF *)v140;
                      *(_DWORD *)(v140 + 8) = 1;
                      *(unsigned char *)(v140 + 12) = 1;
                      *(unsigned char *)(v140 + 13) = v139;
                      *(void *)uint64_t v140 = &unk_1EE9B47B8;
                      *(void *)(v140 + 16) = v75;
                      if (*a2)
                      {
LABEL_258:
                        int v71 = 0;
                        goto LABEL_259;
                      }
                      *(void *)(v140 + 16) = 0;
                      if (v75)
                      {
                        if (v75[2] == 1) {
                          (*(void (**)(_DWORD *))(*(void *)v75 + 8))(v75);
                        }
                        else {
                          --v75[2];
                        }
                      }
LABEL_473:
                      WTF::fastFree(v70, v82);
                      goto LABEL_474;
                    }
                    if (v75) {
                      char v233 = v137;
                    }
                    else {
                      char v233 = 1;
                    }
                    if ((v233 & 1) == 0)
                    {
                      if (v75[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v75 + 8))(v75);
                      }
                      else {
                        --v75[2];
                      }
                    }
                    unint64_t v225 = *a2;
                    unint64_t v236 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    unint64_t v227 = a2[3];
                    if (!v227 || !v236) {
                      goto LABEL_474;
                    }
LABEL_466:
                    (*(void (**)(unint64_t, unint64_t))(*(void *)v227 + 16))(v227, v225);
LABEL_467:
                    if (*a2) {
                      goto LABEL_374;
                    }
                    goto LABEL_474;
                  }
LABEL_252:
                  if (!*a2)
                  {
                    if (v75)
                    {
                      if (v75[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v75 + 8))(v75);
                      }
                      else {
                        --v75[2];
                      }
                    }
                    goto LABEL_523;
                  }
                  int v137 = 0;
                  goto LABEL_254;
                }
              }
              else if (!v251)
              {
                goto LABEL_512;
              }
              if (!--v95)
              {
                v335[16] = 0;
                uint64_t v258 = HIDWORD(v386);
                char v259 = (int *)v386;
                if (DWORD2(v386) > HIDWORD(v386))
                {
                  uint64_t v260 = (int *)v386;
                  if (HIDWORD(v386))
                  {
                    if (HIDWORD(v386) >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19889F80CLL);
                    }
                    uint64_t v261 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v386)));
                    DWORD2(v386) = v258;
                    *(void *)&long long v386 = v261;
                    uint64_t v260 = v259;
                    if ((int *)v261 != v259)
                    {
                      WTF::VectorMover<false,WebCore::Length>::move(v259, &v259[2 * v258], v261);
                      uint64_t v260 = (int *)v386;
                    }
                  }
                  if (v259)
                  {
                    if (v260 == v259)
                    {
                      *(void *)&long long v386 = 0;
                      DWORD2(v386) = 0;
                    }
                    WTF::fastFree((WTF *)v259, v94);
                    char v259 = (int *)v386;
                  }
                  else
                  {
                    char v259 = v260;
                  }
                }
                *(void *)int v335 = v259;
                uint64_t v268 = *((void *)&v386 + 1);
                long long v386 = 0uLL;
                *(void *)&v335[8] = v268;
                goto LABEL_231;
              }
            }
          case 3u:
            if (v72 <= (unint64_t)&v73[-v66 + 1])
            {
              unint64_t v246 = 0;
              unint64_t v247 = 0;
              *a2 = 0;
              a2[1] = 0;
              unint64_t v248 = a2[3];
              if (v248)
              {
                (*(void (**)(unint64_t))(*(void *)v248 + 16))(v248);
                unint64_t v246 = 0;
                unint64_t v275 = *a2;
                unint64_t v276 = a2[1];
                unint64_t v277 = a2[3];
                *a2 = 0;
                a2[1] = 0;
                unint64_t v247 = 0;
                if (v277)
                {
                  if (v276)
                  {
                    (*(void (**)(unint64_t, unint64_t))(*(void *)v277 + 16))(v277, v275);
                    unint64_t v247 = *a2;
                    unint64_t v246 = a2[1];
                  }
                }
              }
            }
            else
            {
              a2[2] = (unint64_t)(v73 + 2);
              unsigned int v104 = v73[1];
              if (v104 < 2)
              {
                if (!v104)
                {
                  int v117 = 0;
                  char v321 = 0;
                  int v116 = 1;
                  LOBYTE(v322) = 1;
                  goto LABEL_244;
                }
                IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a2, v335);
                unint64_t v106 = *a2;
                if (*a2)
                {
                  if (!v335[16]) {
                    goto LABEL_374;
                  }
                  char v288 = 0;
                  uint64_t v107 = WTF::fastMalloc((WTF *)0x60);
                  *(_DWORD *)uint64_t v107 = 1;
                  *(void *)(v107 + 8) = *(void *)v335;
                  uint64_t v109 = *(void *)&v335[8];
                  *(void *)int v335 = 0;
                  *(void *)&v335[8] = 0;
                  *(void *)(v107 + 16) = v109;
                  *(_DWORD *)(v107 + 88) = 0;
                  *(void *)&long long v386 = 0;
                  if (_MergedGlobals_47)
                  {
                    int v110 = dword_1EB358D30[0] + 1;
                  }
                  else
                  {
                    unk_1EB358D80 = 0u;
                    unk_1EB358D70 = 0u;
                    unk_1EB358D60 = 0u;
                    unk_1EB358D50 = 0u;
                    unk_1EB358D40 = 0u;
                    *(_OWORD *)dword_1EB358D30 = 0u;
                    int v110 = 2;
                    _MergedGlobals_47 = 1;
                  }
                  dword_1EB358D30[0] = v110;
                  *((void *)&v386 + 1) = v107;
                  int v111 = 1;
                  v387[0] = 1;
                  uint64_t v289 = 0;
                  WTF::RefCounted<WebCore::SVGPathByteStream::Data>::deref(dword_1EB358D30, v108);
                  WTF::WeakPtrFactory<WebCore::SVGPathByteStream,WTF::SingleThreadWeakPtrImpl>::~WeakPtrFactory(&v288, v112);
                }
                else
                {
                  int v111 = 0;
                  LOBYTE(v386) = 0;
                  v387[0] = 0;
                }
                if (v335[16])
                {
                  uint64_t v172 = *(WTF **)v335;
                  if (*(void *)v335)
                  {
                    *(void *)int v335 = 0;
                    *(_DWORD *)&v335[8] = 0;
                    WTF::fastFree(v172, v105);
                  }
                }
                if (!v106)
                {
                  BOOL v105 = (void *)*a2;
                  unint64_t v266 = a2[1];
                  *a2 = 0;
                  a2[1] = 0;
                  unint64_t v267 = a2[3];
                  if (v267)
                  {
                    if (v266)
                    {
                      (*(void (**)(unint64_t, void *))(*(void *)v267 + 16))(v267, v105);
                      int v111 = v387[0];
                    }
                  }
                }
                if (v111)
                {
                  uint64_t v113 = (void *)WTF::fastMalloc((WTF *)0x10);
                  *uint64_t v113 = 0;
                  if (_MergedGlobals_47)
                  {
                    int v115 = dword_1EB358D30[0] + 1;
                  }
                  else
                  {
                    unk_1EB358D80 = 0u;
                    unk_1EB358D70 = 0u;
                    unk_1EB358D60 = 0u;
                    unk_1EB358D50 = 0u;
                    unk_1EB358D40 = 0u;
                    *(_OWORD *)dword_1EB358D30 = 0u;
                    int v115 = 2;
                    _MergedGlobals_47 = 1;
                  }
                  dword_1EB358D30[0] = v115;
                  v113[1] = *((void *)&v386 + 1);
                  *((void *)&v386 + 1) = dword_1EB358D30;
                  char v321 = v113;
                  int v116 = 1;
                  LOBYTE(v322) = 1;
                  std::__optional_destruct_base<WebCore::SVGPathByteStream,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v386, v114);
                  int v117 = 0;
                  goto LABEL_244;
                }
                LOBYTE(v321) = 0;
                LOBYTE(v322) = 0;
                std::__optional_destruct_base<WebCore::SVGPathByteStream,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v386, v105);
LABEL_242:
                unint64_t v129 = *a2;
                unint64_t v130 = a2[1];
                *a2 = 0;
                a2[1] = 0;
                unint64_t v131 = a2[3];
                if (v131 && v130) {
                  (*(void (**)(unint64_t, unint64_t))(*(void *)v131 + 16))(v131, v129);
                }
                int v116 = 0;
                int v117 = 1;
LABEL_244:
                uint64_t v132 = IPC::Decoder::decode<float>(a2);
                unsigned __int16 v133 = IPC::Decoder::decode<WebCore::RotationDirection>(a2);
                unint64_t v135 = *a2;
                if (*a2)
                {
                  if (v117 || (v132 & 0xFF00000000) == 0 || v133 <= 0xFFu) {
                    goto LABEL_374;
                  }
                  WebCore::BasicShapePath::create();
                  unsigned int v75 = *(_DWORD **)v335;
                  if (!(_BYTE)v322)
                  {
LABEL_251:
                    if (!v135)
                    {
                      unint64_t v76 = *a2;
                      unint64_t v262 = a2[1];
                      *a2 = 0;
                      a2[1] = 0;
                      unint64_t v78 = a2[3];
                      if (v78 && v262) {
                        goto LABEL_593;
                      }
                      goto LABEL_523;
                    }
                    goto LABEL_252;
                  }
                }
                else
                {
                  unsigned int v75 = 0;
                  if (!v116) {
                    goto LABEL_251;
                  }
                }
                uint64_t v136 = (uint64_t)v321;
                char v321 = 0;
                if (v136) {
                  std::default_delete<WebCore::SVGPathByteStream>::operator()[abi:sn180100](v136, v134);
                }
                goto LABEL_251;
              }
              unint64_t v246 = v72;
              unint64_t v247 = v66;
            }
            *a2 = 0;
            a2[1] = 0;
            unint64_t v249 = a2[3];
            if (v249 && v246) {
              (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v249 + 16))(v249, v247, v246);
            }
            LOBYTE(v321) = 0;
            LOBYTE(v322) = 0;
            goto LABEL_242;
          default:
            IPC::Decoder::decode<WebCore::Length>((uint64_t)&v291, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::Length>((uint64_t)&v331, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::Length>((uint64_t)v329, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::Length>((uint64_t)v327, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)v335, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)&v386, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)&v288, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)&v321, (uint64_t *)a2);
            unint64_t v120 = *a2;
            if (*a2)
            {
              if (!(_BYTE)v292 || !v334 || !v330 || !v328 || !v335[16] || !v387[0] || !v290 || !v326) {
                goto LABEL_374;
              }
              WebCore::BasicShapeInset::create();
              unsigned int v75 = v320;
            }
            else
            {
              unsigned int v75 = 0;
            }
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v321);
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v288);
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v386);
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)v335);
            if (v328 && v327[4] == 11) {
              WebCore::Length::deref((WebCore::Length *)v327);
            }
            if (v330 && v329[4] == 11) {
              WebCore::Length::deref((WebCore::Length *)v329);
            }
            if (v334 && v332 == 11) {
              WebCore::Length::deref((WebCore::Length *)&v331);
            }
            if ((_BYTE)v292 && BYTE4(v291) == 11)
            {
              WebCore::Length::deref((WebCore::Length *)&v291);
              if (v120) {
                goto LABEL_252;
              }
            }
            else if (v120)
            {
              goto LABEL_252;
            }
            unint64_t v76 = *a2;
            unint64_t v121 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            unint64_t v78 = a2[3];
            if (v78 && v121) {
              goto LABEL_593;
            }
            goto LABEL_523;
        }
      }
      unint64_t v229 = v72;
      unint64_t v230 = v66;
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v232 = a2[3];
    if (v232 && v229) {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v232 + 16))(v232, v230, v229);
    }
    goto LABEL_523;
  }
  if (v63 == 2) {
    char v79 = v65 ^ 1;
  }
  else {
    char v79 = 1;
  }
  if (v79)
  {
    if (v63 == 3) {
      char v83 = v65 ^ 1;
    }
    else {
      char v83 = 1;
    }
    if (v83) {
      goto LABEL_474;
    }
    uint64_t v84 = IPC::Decoder::decode<float>(a2);
    *(_WORD *)int v335 = 0;
    IPC::Decoder::operator>><unsigned char>(a2, v335);
    if (v335[1]) {
      BOOL v85 = v335[0] > 4u;
    }
    else {
      BOOL v85 = 1;
    }
    int v86 = v85;
    unint64_t v87 = a2[1];
    if (v86 != 1)
    {
LABEL_137:
      unint64_t v88 = *a2;
      unint64_t v89 = a2[2] - *a2;
      if (v87 <= v89)
      {
        unint64_t v239 = 0;
        unint64_t v274 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v87 && v274)
        {
          (*(void (**)(unint64_t))(*(void *)v274 + 16))(v274);
          unint64_t v239 = *a2;
          unint64_t v87 = a2[1];
        }
        else
        {
          unint64_t v87 = 0;
        }
      }
      else
      {
        uint64_t v90 = (unsigned __int8 *)(v88 + v89);
        a2[2] = (unint64_t)(v90 + 1);
        if (v88)
        {
          if (*v90 < 2u)
          {
            int v91 = 0;
LABEL_141:
            IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)v335, (uint64_t *)a2);
            if (!*a2)
            {
              std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)v335);
              unint64_t v225 = *a2;
              unint64_t v242 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              unint64_t v227 = a2[3];
              if (!v227 || !v242) {
                goto LABEL_474;
              }
              goto LABEL_466;
            }
            if ((v84 & 0xFF00000000) == 0 || v86 || v91 || !v335[16]) {
              goto LABEL_374;
            }
            WebCore::RayPathOperation::create();
            unsigned int v70 = (WTF *)v386;
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)v335);
            goto LABEL_95;
          }
LABEL_462:
          *a2 = 0;
          a2[1] = 0;
          unint64_t v241 = a2[3];
          if (v241 && v87) {
            (*(void (**)(unint64_t, unint64_t))(*(void *)v241 + 16))(v241, v88);
          }
          int v91 = 1;
          goto LABEL_141;
        }
        unint64_t v239 = 0;
      }
LABEL_459:
      *a2 = 0;
      a2[1] = 0;
      unint64_t v240 = a2[3];
      if (v240)
      {
        if (v87)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v240 + 16))(v240, v239);
          unint64_t v88 = *a2;
          unint64_t v87 = a2[1];
          goto LABEL_462;
        }
      }
      else
      {
        unint64_t v87 = 0;
      }
      unint64_t v88 = 0;
      goto LABEL_462;
    }
    unint64_t v237 = *a2;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v238 = a2[3];
    if (v238)
    {
      if (v87)
      {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v238 + 16))(v238, v237);
        unint64_t v87 = a2[1];
        goto LABEL_137;
      }
    }
    else
    {
      unint64_t v87 = 0;
    }
    unint64_t v239 = 0;
    goto LABEL_459;
  }
  unsigned __int16 v80 = IPC::Decoder::decode<WebCore::CSSBoxType>((uint64_t *)a2);
  if (*a2)
  {
    char v81 = v80;
    if (v80 <= 0xFFu) {
      goto LABEL_374;
    }
    unsigned int v70 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *((_DWORD *)v70 + 2) = 1;
    *((unsigned char *)v70 + 12) = 2;
    *((unsigned char *)v70 + 13) = v81;
    *(void *)unsigned int v70 = &unk_1EE9B4800;
    if (*a2) {
      goto LABEL_258;
    }
    goto LABEL_473;
  }
  unint64_t v234 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v235 = a2[3];
  if (v235 && v234)
  {
    (*(void (**)(unint64_t, void))(*(void *)v235 + 16))(v235, 0);
    goto LABEL_467;
  }
LABEL_474:
  unint64_t v243 = *a2;
  unint64_t v244 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v245 = a2[3];
  if (v245 && v244) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v245 + 16))(v245, v243);
  }
  unsigned int v70 = 0;
  int v71 = 1;
LABEL_259:
  IPC::Decoder::decode<WebCore::Length>((uint64_t)&v331, (uint64_t *)a2);
  IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)&v321, (uint64_t *)a2);
  IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)&v291, (uint64_t *)a2);
  unint64_t v141 = a2[1];
  unint64_t v142 = *a2;
  unint64_t v143 = a2[2] - *a2;
  if (v141 <= v143)
  {
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v191 = a2[3];
    if (v191)
    {
      if (v141)
      {
        (*(void (**)(unint64_t))(*(void *)v191 + 16))(v191);
        unint64_t v190 = *a2;
        unint64_t v189 = a2[1];
      }
      else
      {
        unint64_t v189 = 0;
        unint64_t v190 = 0;
      }
    }
    goto LABEL_391;
  }
  uint64_t v144 = (unsigned __int8 *)(v142 + v143);
  a2[2] = (unint64_t)(v144 + 1);
  if (!v142)
  {
    unint64_t v189 = v141;
    unint64_t v190 = 0;
LABEL_391:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v192 = a2[3];
    if (v192 && v189)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v192 + 16))(v192, v190, v189);
      unsigned int v145 = 0;
      unint64_t v142 = *a2;
      unint64_t v141 = a2[1];
    }
    else
    {
      unint64_t v141 = 0;
      unint64_t v142 = 0;
      unsigned int v145 = 0;
    }
    goto LABEL_393;
  }
  unsigned int v145 = *v144;
  if (v145 < 2)
  {
    int v146 = 0;
    int v147 = 1;
    goto LABEL_263;
  }
LABEL_393:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v193 = a2[3];
  if (v193 && v141) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v193 + 16))(v193, v142);
  }
  int v147 = 0;
  int v146 = 1;
LABEL_263:
  if (v145) {
    int v148 = v147;
  }
  else {
    int v148 = 0;
  }
  uint64_t v149 = IPC::Decoder::decode<float>(a2);
  unint64_t v150 = *a2;
  if (*a2)
  {
    if (v146 || (v149 & 0xFF00000000) == 0) {
      goto LABEL_374;
    }
    if (v148) {
      uint64_t v151 = 0x100000000;
    }
    else {
      uint64_t v151 = 0;
    }
    unint64_t v152 = v151 & 0xFFFFFFFF00000000 | v149;
  }
  else
  {
    unint64_t v152 = 0;
    unint64_t v194 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v195 = a2[3];
    if (v195)
    {
      if (v194) {
        (*(void (**)(unint64_t, void))(*(void *)v195 + 16))(v195, 0);
      }
      unint64_t v152 = 0;
    }
  }
  IPC::Decoder::decode<WebCore::FilterOperations>((uint64_t)&v386, (uint64_t *)a2);
  IPC::Decoder::decode<WebCore::FilterOperations>((uint64_t)&v288, (uint64_t *)a2);
  if (*a2)
  {
    if ((v287 & 0xFF00000000) == 0
      || v286
      || !v313
      || v27
      || !v304
      || !v302
      || !v300
      || !v298
      || v71
      || !v334
      || !v326
      || !v296
      || !v150
      || !v387[0]
      || !v290)
    {
      goto LABEL_374;
    }
    *(_OWORD *)&v335[4] = v284;
    *(_OWORD *)&v335[21] = v384;
    *(_DWORD *)int v335 = v287;
    v335[20] = v282;
    *(_OWORD *)&v335[37] = v385[0];
    *(_OWORD *)&v335[52] = *(_OWORD *)((char *)v385 + 15);
    int v336 = v279;
    int v337 = v278;
    char v338 = v281;
    __int16 v339 = v318;
    char v340 = v319;
    BOOL v341 = v280;
    char v343 = v317;
    __int16 v342 = v316;
    char v344 = v283;
    __int16 v345 = v314;
    char v346 = v315;
    int v347 = 0;
    char v350 = 0;
    unsigned __int8 v348 = v306;
    char v349 = v307;
    if (v306 - 2 >= 9)
    {
      if (v306 != 11) {
        goto LABEL_296;
      }
      int v154 = v305;
      int v305 = 0;
    }
    else
    {
      char v350 = v308;
      if (v308)
      {
        int v347 = v305;
        goto LABEL_296;
      }
      int v154 = v305;
    }
    int v347 = v154;
LABEL_296:
    unsigned __int8 v306 = 0;
    int v351 = 0;
    char v354 = 0;
    unsigned __int8 v352 = v310;
    char v353 = v311;
    if (v310 - 2 >= 9)
    {
      if (v310 != 11) {
        goto LABEL_303;
      }
      int v155 = v309;
      int v309 = 0;
    }
    else
    {
      char v354 = v312;
      if (v312)
      {
        int v351 = v309;
        goto LABEL_303;
      }
      int v155 = v309;
    }
    int v351 = v155;
LABEL_303:
    unsigned __int8 v310 = 0;
    char v355 = v25;
    uint64_t v156 = *((void *)&v303 + 1);
    uint64_t v356 = v303;
    long long v303 = 0uLL;
    uint64_t v357 = v156;
    uint64_t v157 = v301;
    int v301 = 0;
    uint64_t v158 = v299;
    int v299 = 0;
    char v358 = v157;
    char v359 = v158;
    unint64_t v159 = v297;
    int v297 = 0;
    char v360 = v159;
    char v361 = v70;
    int v362 = 0;
    char v364 = 0;
    __int16 v363 = v332;
    if (v332 - 2 >= 9)
    {
      if (v332 != 11) {
        goto LABEL_310;
      }
      int v160 = v331;
      int v331 = 0;
    }
    else
    {
      char v364 = v333;
      if (v333)
      {
        int v362 = v331;
        goto LABEL_310;
      }
      int v160 = v331;
    }
    int v362 = v160;
LABEL_310:
    LOBYTE(v332) = 0;
    int v365 = 0;
    char v367 = 0;
    __int16 v366 = WORD2(v321);
    if (BYTE4(v321) - 2 >= 9)
    {
      if (BYTE4(v321) != 11) {
        goto LABEL_317;
      }
      int v161 = (int)v321;
      LODWORD(v321) = 0;
    }
    else
    {
      char v367 = BYTE6(v321);
      if (BYTE6(v321))
      {
        int v365 = (int)v321;
        goto LABEL_317;
      }
      int v161 = (int)v321;
    }
    int v365 = v161;
LABEL_317:
    BYTE4(v321) = 0;
    int v368 = 0;
    char v371 = 0;
    unsigned __int8 v369 = v323;
    char v370 = v324;
    if (v323 - 2 >= 9)
    {
      if (v323 != 11) {
        goto LABEL_324;
      }
      int v162 = v322;
      int v322 = 0;
    }
    else
    {
      char v371 = v325;
      if (v325)
      {
        int v368 = v322;
        goto LABEL_324;
      }
      int v162 = v322;
    }
    int v368 = v162;
LABEL_324:
    unsigned __int8 v323 = 0;
    int v372 = 0;
    char v374 = 0;
    __int16 v373 = WORD2(v291);
    if (BYTE4(v291) - 2 >= 9)
    {
      if (BYTE4(v291) != 11) {
        goto LABEL_331;
      }
      int v163 = (int)v291;
      LODWORD(v291) = 0;
    }
    else
    {
      char v374 = BYTE6(v291);
      if (BYTE6(v291))
      {
        int v372 = (int)v291;
        goto LABEL_331;
      }
      int v163 = (int)v291;
    }
    int v372 = v163;
LABEL_331:
    BYTE4(v291) = 0;
    int v375 = 0;
    char v378 = 0;
    unsigned __int8 v376 = v293;
    char v377 = v294;
    if (v293 - 2 >= 9)
    {
      if (v293 != 11) {
        goto LABEL_338;
      }
      int v164 = v292;
      int v292 = 0;
    }
    else
    {
      char v378 = v295;
      if (v295)
      {
        int v375 = v292;
LABEL_338:
        unsigned __int8 v293 = 0;
        unint64_t v379 = v152;
        uint64_t v165 = *((void *)&v386 + 1);
        uint64_t v380 = v386;
        long long v386 = 0uLL;
        uint64_t v381 = v165;
        char v166 = v288;
        char v288 = 0;
        int v382 = v166;
        uint64_t v167 = v289;
        uint64_t v289 = 0;
        uint64_t v383 = v167;
        *(unsigned char *)(WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)a1, (uint64_t)v335) + 248) = 1;
        WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v335, v168);
        unsigned int v70 = 0;
LABEL_339:
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v288, v153);
        goto LABEL_340;
      }
      int v164 = v292;
    }
    int v375 = v164;
    goto LABEL_338;
  }
  *a1 = 0;
  a1[248] = 0;
  if (v290) {
    goto LABEL_339;
  }
LABEL_340:
  if (v387[0]) {
    WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v386, v153);
  }
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v291);
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v321);
  if (v334 && v332 == 11) {
    WebCore::Length::deref((WebCore::Length *)&v331);
  }
  if (v70) {
    char v170 = v71;
  }
  else {
    char v170 = 1;
  }
  if ((v170 & 1) == 0)
  {
    if (*((_DWORD *)v70 + 2) == 1) {
      (*(void (**)(WTF *))(*(void *)v70 + 8))(v70);
    }
    else {
      --*((_DWORD *)v70 + 2);
    }
  }
  if (v298 && v297)
  {
    if (v297[2] == 1) {
      (*(void (**)(void))(*(void *)v297 + 8))();
    }
    else {
      --v297[2];
    }
  }
  if (v300 && v299)
  {
    if (v299[2] == 1) {
      (*(void (**)(void))(*(void *)v299 + 8))();
    }
    else {
      --v299[2];
    }
  }
  if (v302 && v301)
  {
    if (v301[2] == 1) {
      (*(void (**)(void))(*(void *)v301 + 8))();
    }
    else {
      --v301[2];
    }
  }
  if (v304) {
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v303, v169);
  }
  return std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v305);
}

void sub_19889F824(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,char a26,_DWORD *a27,char a28,_DWORD *a29,char a30,int a31,__int16 a32,uint64_t a33,char a34,int a35,__int16 a36)
{
  std::__optional_destruct_base<WebCore::SVGPathByteStream,false>::~__optional_destruct_base[abi:sn180100](v36 - 160, a2);
  if (a26 && a25)
  {
    if (a25[2] == 1) {
      (*(void (**)(void))(*(void *)a25 + 8))();
    }
    else {
      --a25[2];
    }
  }
  if (a28 && a27)
  {
    if (a27[2] == 1) {
      (*(void (**)(void))(*(void *)a27 + 8))();
    }
    else {
      --a27[2];
    }
  }
  if (a30 && a29)
  {
    if (a29[2] == 1) {
      (*(void (**)(void))(*(void *)a29 + 8))();
    }
    else {
      --a29[2];
    }
  }
  if (a34) {
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a32, v38);
  }
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&a36);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>(uint64_t result, uint64_t *a2)
{
  unint64_t v3 = (unsigned char *)result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    unsigned char *v3 = 0;
    v3[8] = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(void *)unint64_t result = 0;
    goto LABEL_8;
  }
  unint64_t result = IPC::ArgumentCoder<WebCore::TransformOperation,void>::decode((uint64_t)&v17, a2);
  unsigned char *v3 = 0;
  v3[8] = 0;
  if (v18)
  {
    *(void *)unint64_t v3 = v17;
LABEL_8:
    v3[8] = 1;
    return result;
  }
LABEL_13:
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v15)
  {
    unsigned __int8 v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v16();
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::FilterOperations>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v5)
  {
    unint64_t v6 = v4;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    if (v4 < 0x20000)
    {
      if (v4)
      {
        LODWORD(v41) = v4;
        uint64_t v40 = WTF::fastMalloc((WTF *)(8 * v4));
        while (1)
        {
          IPC::Decoder::decode<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>((uint64_t)&v38, a2);
          if (!v39) {
            goto LABEL_31;
          }
          int v7 = HIDWORD(v41);
          if (HIDWORD(v41) != v41) {
            break;
          }
          unint64_t v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v38);
          uint64_t v9 = HIDWORD(v41);
          int v10 = HIDWORD(v41) + 1;
          uint64_t v11 = v40;
          uint64_t v12 = *v8;
          *unint64_t v8 = 0;
          *(void *)(v11 + 8 * v9) = v12;
          HIDWORD(v41) = v10;
          if (v39) {
            goto LABEL_10;
          }
LABEL_13:
          if (!--v6)
          {
            uint64_t v15 = v40;
            uint64_t v16 = v41;
            goto LABEL_17;
          }
        }
        uint64_t v13 = v38;
        unint64_t v38 = 0;
        *(void *)(v40 + 8 * HIDWORD(v41)) = v13;
        HIDWORD(v41) = v7 + 1;
LABEL_10:
        uint64_t v14 = v38;
        unint64_t v38 = 0;
        if (v14 && atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
        }
        goto LABEL_13;
      }
      uint64_t v15 = 0;
      uint64_t v16 = 0;
LABEL_17:
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v35 = v15;
      uint64_t v36 = v16;
LABEL_18:
      int v17 = 1;
      char v37 = 1;
      uint64_t result = WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v5);
      if (*a2)
      {
        WebCore::FilterOperations::FilterOperations();
        *(void *)a1 = v40;
        uint64_t v20 = v41;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        *(void *)(a1 + 8) = v20;
        *(unsigned char *)(a1 + 16) = 1;
        uint64_t result = WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v21);
        int v22 = 0;
        if (!v37)
        {
LABEL_36:
          if (!v22) {
            return result;
          }
          goto LABEL_41;
        }
LABEL_35:
        uint64_t result = WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v19);
        goto LABEL_36;
      }
LABEL_34:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 16) = 0;
      int v22 = 1;
      if (!v17) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>((uint64_t)&v38, a2);
      if (!v39)
      {
LABEL_31:
        LOBYTE(v35) = 0;
        char v37 = 0;
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v5);
        goto LABEL_32;
      }
      int v23 = HIDWORD(v41);
      if (HIDWORD(v41) != v41) {
        break;
      }
      BOOL v24 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v38);
      uint64_t v25 = HIDWORD(v41);
      int v26 = HIDWORD(v41) + 1;
      uint64_t v27 = v40;
      uint64_t v28 = *v24;
      *BOOL v24 = 0;
      *(void *)(v27 + 8 * v25) = v28;
      HIDWORD(v41) = v26;
      if (v39) {
        goto LABEL_26;
      }
LABEL_29:
      if (!--v6)
      {
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v40, HIDWORD(v41));
        uint64_t v35 = v40;
        uint64_t v34 = v41;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v36 = v34;
        goto LABEL_18;
      }
    }
    unint64_t v29 = v38;
    unint64_t v38 = 0;
    *(void *)(v40 + 8 * HIDWORD(v41)) = v29;
    HIDWORD(v41) = v23 + 1;
LABEL_26:
    unint64_t v30 = v38;
    unint64_t v38 = 0;
    if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
    }
    goto LABEL_29;
  }
  LOBYTE(v35) = 0;
  char v37 = 0;
LABEL_32:
  char v19 = (void *)*a2;
  uint64_t v31 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (!result
    || !v31
    || (uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v19), !*a2))
  {
    int v17 = 0;
    goto LABEL_34;
  }
  __break(1u);
LABEL_41:
  uint64_t v32 = *a2;
  uint64_t v33 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v33) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v32);
    }
  }
  return result;
}

void sub_1988A027C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, char a8, ...)
{
  va_start(va, a8);
  if (a8 && a7 && atomic_fetch_add((atomic_uint *volatile)a7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, a7 + 2);
    (*(void (**)(unsigned int *))(*(void *)a7 + 8))(a7);
  }
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>>(unint64_t result, unint64_t *a2)
{
  unint64_t v3 = (unsigned char *)result;
  unint64_t v4 = a2[2];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v12 + 16))(v12);
        unint64_t v11 = *a2;
        unint64_t v10 = a2[1];
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v10 = v6;
    unint64_t v11 = 0;
LABEL_10:
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        unint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v14 = a2[3];
    if (v14 && v6) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    unsigned char *v3 = 0;
    v3[8] = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(void *)uint64_t result = 0;
    goto LABEL_8;
  }
  uint64_t result = IPC::ArgumentCoder<WebCore::TimingFunction,void>::decode((unint64_t)&v17, a2);
  unsigned char *v3 = 0;
  v3[8] = 0;
  if (v18)
  {
    *(void *)unint64_t v3 = v17;
LABEL_8:
    v3[8] = 1;
    return result;
  }
LABEL_13:
  unint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v15)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v16();
  }
  return result;
}

WebCore::Length *IPC::Decoder::decode<WebCore::AcceleratedEffectValues>(unsigned char *a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::decode(a1, a2);
  if (!a1[248])
  {
    unint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WebCore::Length *)a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WebCore::Length *)(*(uint64_t (**)(WebCore::Length *, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988A055C(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 248)) {
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::AcceleratedEffectProperty>>(uint64_t *a1)
{
  int v2 = IPC::Decoder::decode<unsigned short>(a1);
  BOOL v3 = (v2 & 0xE001) != 0 || (v2 & 0xFF0000) == 0;
  if (v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      __int16 v10 = v2;
      BOOL v9 = v3;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      BOOL v3 = v9;
      LOWORD(v2) = v10;
    }
  }
  if (v3) {
    return 0;
  }
  else {
    return (unsigned __int16)v2 | 0x10000u;
  }
}

unsigned char *IPC::ArgumentCoder<WebCore::AcceleratedEffect,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t v4 = *(_DWORD **)(a2 + 24);
  if (v4) {
    ++v4[2];
  }
  *(void *)uint64_t v17 = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v17[8] = *(_OWORD *)(a2 + 32);
  long long v18 = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v19 = *(_OWORD *)(a2 + 64);
  long long v20 = v6;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(a1, (double **)v17);
  char v21 = v17[8];
  IPC::Encoder::operator<<<BOOL>(a1, &v21);
  char v21 = v17[9];
  IPC::Encoder::operator<<<BOOL>(a1, &v21);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)&v17[16]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)&v18);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)&v18 + 1));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)&v19);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)&v19 + 1));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)&v20);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)&v20 + 1));
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    }
    else {
      --v4[2];
    }
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 108));
  unsigned int v7 = *(_DWORD *)(a2 + 108);
  if (v7)
  {
    uint64_t v8 = 280 * v7;
    uint64_t v9 = *(void *)(a2 + 96) + 264;
    do
    {
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(v9 - 256));
      IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::encode(a1, v9 - 248);
      IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(a1, (double **)v9);
      unsigned int v10 = *(unsigned __int16 *)(v9 + 8);
      unint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (v10 > 0xFF)
      {
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1988A08CCLL);
        }
        *unint64_t v11 = 1;
        v17[0] = v10;
        IPC::Encoder::operator<<<BOOL>(a1, v17);
      }
      else
      {
        if (!v12) {
          goto LABEL_19;
        }
        *unint64_t v11 = 0;
      }
      IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(v9 + 10));
      v9 += 280;
      v8 -= 280;
    }
    while (v8);
  }
  v17[0] = *(unsigned char *)(a2 + 112);
  IPC::Encoder::operator<<<BOOL>(a1, v17);
  v17[0] = *(unsigned char *)(a2 + 113);
  IPC::Encoder::operator<<<BOOL>(a1, v17);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,void>::encode<IPC::Encoder,WebCore::TimingFunction>(a1, (double **)(a2 + 120));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 128));
  char v13 = *(unsigned char *)(a2 + 132);
  unint64_t v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1988A08ACLL);
  }
  *unint64_t v14 = v13;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 136));
  *(_OWORD *)uint64_t v17 = *(_OWORD *)(a2 + 144);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)v17);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)(a2 + 160);
  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)v17);
}

void sub_1988A08F0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (v1[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v1 + 16))(v1);
    }
    else {
      --v1[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::CredentialBase::NonPlatformData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  char v5 = *(unsigned char *)(a2 + 16);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

void IPC::ArgumentCoder<WebCore::Credential,void>::encode(IPC::Encoder *a1, WebCore::Credential *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  WebCore::Credential::ipcData(v5, this);
  unsigned __int8 v3 = v6;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v3);
  IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::encode<IPC::Encoder,std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>>(a1, (uint64_t)v5, v3);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v6])(&v4, v5);
  }
}

void sub_1988A0A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
}

void IPC::ArgumentCoder<WebCore::Credential,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>>(a1, (uint64_t)v7);
  if (*a1)
  {
    if (!v9) {
      __break(1u);
    }
    WebCore::Credential::fromIPCData();
    *(_OWORD *)a2 = v4;
    *(unsigned char *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v6;
    *(unsigned char *)(a2 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
  }
  if (v9)
  {
    if (v8 != -1) {
      ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v8])(&v4, v7);
    }
  }
}

void sub_1988A0B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  if (a18)
  {
    if (a16 != -1) {
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[a16])(&a9, &a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::variant<WebCore::CredentialBase::NonPlatformData,WTF::RetainPtr<NSURLCredential>>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1988A0BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 32))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 24);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14CredentialBase15NonPlatformDataEN3WTF9RetainPtrI15NSURLCredentialEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebCore::ShapeDetection::BarcodeDetectorOptions,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v8)
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = v7;
      *(unsigned char *)(a2 + 16) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    if (v8)
    {
      uint64_t result = v6;
      if (v6)
      {
        uint64_t v6 = 0;
        LODWORD(v7) = 0;
        return (WTF *)WTF::fastFree(result, v5);
      }
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988A0D34(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  char v5 = *(unsigned char *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::VectorArgumentCoder<false,WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 32);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v11);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::ShapeDetection::BarcodeFormat>((uint64_t *)a1);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v9, a1);
  if (*a1)
  {
    if (v14)
    {
      if (v12)
      {
        BOOL v7 = v11;
        unint64_t v11 = 0;
        if (v4 > 0xFFu)
        {
          if (v10)
          {
            char v8 = v9[0];
            *(_OWORD *)a2 = v13;
            *(void *)(a2 + 16) = v7;
            *(unsigned char *)(a2 + 24) = v4;
            *(void *)(a2 + 32) = v8;
            *(WTF **)(a2 + 40) = v9[1];
            *(unsigned char *)(a2 + 48) = 1;
            goto LABEL_7;
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (v10)
  {
    uint64_t result = v9[0];
    if (v9[0]) {
      uint64_t result = (WTF::StringImpl *)WTF::fastFree(v9[0], v6);
    }
  }
LABEL_7:
  if (v12)
  {
    uint64_t result = v11;
    unint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A0EC4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::ShapeDetection::BarcodeFormat>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 0xDu;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_12:
    unint64_t v12 = *a2;
    unint64_t v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result) {
      BOOL v15 = v13 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15) {
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v12);
    }
    return result;
  }
  unint64_t v6 = v4;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v4 >= 0x20000)
  {
    while (1)
    {
      uint64_t result = (WTF *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
      if (!(_BYTE)v5) {
        break;
      }
      unint64_t v30 = result;
      int v31 = (int)v5;
      if (HIDWORD(v33) == v33)
      {
        uint64_t result = (WTF *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
        *((void *)v32 + HIDWORD(v33)) = *(void *)result;
      }
      else
      {
        *((void *)v32 + HIDWORD(v33)) = result;
      }
      uint64_t v17 = ++HIDWORD(v33);
      if (!--v6)
      {
        long long v18 = v32;
        if (v33 <= v17) {
          goto LABEL_47;
        }
        long long v19 = v32;
        if (!v17) {
          goto LABEL_36;
        }
        if (!(v17 >> 29))
        {
          long long v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v17));
          LODWORD(v33) = v17;
          uint64_t v32 = v20;
          long long v19 = v18;
          if (v20 != v18)
          {
            char v21 = v18;
            uint64_t v22 = 8 * v17;
            do
            {
              uint64_t v23 = *(void *)v21;
              char v21 = (WTF *)((char *)v21 + 8);
              *(void *)long long v20 = v23;
              long long v20 = (WTF *)((char *)v20 + 8);
              v22 -= 8;
            }
            while (v22);
            long long v19 = v32;
          }
LABEL_36:
          if (v18)
          {
            if (v19 == v18)
            {
              uint64_t v32 = 0;
              LODWORD(v33) = 0;
            }
            WTF::fastFree(v18, v5);
            long long v18 = v32;
          }
          else
          {
            long long v18 = v19;
          }
LABEL_47:
          int v16 = 0;
          *(void *)a1 = v18;
          uint64_t v27 = v33;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          *(void *)(a1 + 8) = v27;
          goto LABEL_19;
        }
        __break(0xC471u);
        return result;
      }
    }
    unsigned int v5 = (void *)*a2;
    unint64_t v28 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v25 = a2[3];
    if (v25) {
      BOOL v29 = v28 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (v29) {
      goto LABEL_45;
    }
LABEL_44:
    (*(void (**)(unint64_t, void *))(*(void *)v25 + 16))(v25, v5);
LABEL_45:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    int v16 = 1;
    goto LABEL_20;
  }
  if (v4)
  {
    LODWORD(v33) = v4;
    uint64_t v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    while (1)
    {
      uint64_t v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
      if (!(_BYTE)v5) {
        break;
      }
      unint64_t v30 = v7;
      int v31 = (int)v5;
      if (HIDWORD(v33) == v33)
      {
        uint64_t v8 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
        *((void *)v32 + HIDWORD(v33)) = *v8;
      }
      else
      {
        *((void *)v32 + HIDWORD(v33)) = v7;
      }
      int v9 = ++HIDWORD(v33);
      if (!--v6)
      {
        char v10 = v32;
        int v11 = v33;
        goto LABEL_18;
      }
    }
    unsigned int v5 = (void *)*a2;
    unint64_t v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v25 = a2[3];
    if (v25) {
      BOOL v26 = v24 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  int v9 = 0;
  int v11 = 0;
  char v10 = 0;
LABEL_18:
  int v16 = 0;
  uint64_t v32 = 0;
  *(void *)a1 = v10;
  HIDWORD(v33) = 0;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v9;
LABEL_19:
  *(unsigned char *)(a1 + 16) = 1;
LABEL_20:
  uint64_t result = v32;
  if (v32)
  {
    uint64_t v32 = 0;
    LODWORD(v33) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v5);
  }
  if (v16) {
    goto LABEL_12;
  }
  return result;
}

void sub_1988A12A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13) {
    WTF::fastFree(a13, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedFace,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v15);
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v11);
  if (*a1)
  {
    if (v16 && v14)
    {
      if (v13)
      {
        uint64_t v6 = v11;
        uint64_t v11 = 0;
        char v7 = 1;
        char v10 = 1;
        *(_OWORD *)a2 = v15;
        v9[0] = 0;
        *(void *)(a2 + 16) = v6;
        v9[1] = 0;
        uint64_t v8 = v12;
        uint64_t v12 = 0;
        *(void *)(a2 + 24) = v8;
        uint64_t result = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
      }
      else
      {
        char v7 = 0;
        *(_OWORD *)a2 = v15;
        *(unsigned char *)(a2 + 16) = 0;
      }
      *(unsigned char *)(a2 + 32) = v7;
      *(unsigned char *)(a2 + 40) = 1;
      goto LABEL_8;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_8:
  if (v14)
  {
    if (v13) {
      return WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v5);
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988A1434(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 24))
  {
    if (*(unsigned char *)(v2 + 16)) {
      WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));

  return IPC::VectorArgumentCoder<false,WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v10);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v8, a1);
  if (*a1)
  {
    if (v13)
    {
      if (v11)
      {
        unint64_t v6 = v10;
        char v10 = 0;
        if (v9)
        {
          BOOL v7 = v8[0];
          *(_OWORD *)a2 = v12;
          *(void *)(a2 + 16) = v6;
          *(void *)(a2 + 24) = v7;
          *(WTF **)(a2 + 32) = v8[1];
          *(unsigned char *)(a2 + 40) = 1;
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v9)
  {
    uint64_t result = v8[0];
    if (v8[0]) {
      uint64_t result = (WTF::StringImpl *)WTF::fastFree(v8[0], v5);
    }
  }
LABEL_6:
  if (v11)
  {
    uint64_t result = v10;
    char v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A1588(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::encode(void *a1, uint64_t a2)
{
  uint64_t result = IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(a1, (_WORD *)a2);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 2);
    a1[2] = v5 + 1;
  }
  return result;
}

void *IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(void *result, _WORD *a2)
{
  uint64_t v2 = result[2];
  unint64_t v3 = *result + v2;
  unint64_t v4 = (v3 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v9 = v4 >= v3;
  unint64_t v5 = v4 - v3;
  if (v9)
  {
    unint64_t v6 = v5 + v2;
    unint64_t v7 = v6 + 2;
    unint64_t v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 == v8;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(_WORD *)(*result + v6) = *a2;
      result[2] = v7;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::ShapeDetection::FaceDetectorOptions,void>::decode(uint64_t *a1)
{
  unsigned int v2 = IPC::Decoder::decode<unsigned short>(a1);
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unsigned int v16 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        unint64_t v8 = (unsigned __int8 *)*a1;
        uint64_t v9 = a1[1];
      }
      else
      {
        uint64_t v9 = 0;
        unint64_t v8 = 0;
      }
      unsigned int v2 = v16;
    }
LABEL_8:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v3 = a1[3];
    if (v3) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  unint64_t v8 = v7 + 1;
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v9 = v4;
    unint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v9 = *v7;
  if (v9 >= 2) {
    goto LABEL_9;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    unsigned int v10 = (unsigned __int16)v2 | ((v9 != 0) << 16);
    uint64_t v11 = 1;
  }
  else
  {
    while (1)
    {
      __break(1u);
LABEL_15:
      unsigned int v15 = v2;
      if (v9)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v3 + 16))(v3, v8, v9);
        uint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
      unsigned int v2 = v15;
LABEL_9:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v11 = a1[3];
      if (!v11) {
        break;
      }
      unsigned int v14 = v2;
      if (!v4)
      {
        uint64_t v11 = 0;
        break;
      }
      unsigned int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v5);
      uint64_t v11 = *a1;
      if (!*a1) {
        break;
      }
      uint64_t v9 = v14;
    }
    unsigned int v10 = 0;
  }
  return v10 | (unint64_t)(v11 << 32);
}

void IPC::ArgumentCoder<WebCore::TextExtraction::TextItemData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::CharacterRange>,void>::encode<IPC::Encoder,std::optional<WebCore::CharacterRange> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));

  IPC::ArgumentCoder<std::optional<WebCore::TextExtraction::Editable>,void>::encode<IPC::Encoder,std::optional<WebCore::TextExtraction::Editable> const&>(a1, a2 + 48);
}

unint64_t IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 80);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,void>::encode<IPC::Encoder,std::variant<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData> const&>(a1, a2, v5);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 88));
  return IPC::VectorArgumentCoder<false,WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 104));
}

uint64_t IPC::ArgumentCoder<WebCore::TextExtraction::Item,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = a1;
  v182[2] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = *((void *)a1 + 1);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *((void *)a1 + 2) - *(void *)a1;
  if (v11 <= v13)
  {
    unint64_t v33 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v34 = *((void *)a1 + 3);
    if (v34)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v12, v11);
        unint64_t v33 = *((void *)v9 + 1);
      }
      else
      {
        unint64_t v33 = 0;
      }
    }
    goto LABEL_53;
  }
  unsigned int v14 = (unsigned char *)(v12 + v13);
  *((void *)a1 + 2) = v14 + 1;
  if (!v12)
  {
    unint64_t v33 = v11;
LABEL_53:
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t v35 = *((void *)v9 + 3);
    if (!v35 || !v33) {
      goto LABEL_4;
    }
    uint64_t v36 = *(void (**)(void))(*(void *)v35 + 16);
    goto LABEL_56;
  }
  unsigned int v15 = *v14;
  if (v15 > 3)
  {
LABEL_4:
    LOBYTE(v143[0]) = 0;
    unsigned __int8 v150 = 0;
LABEL_5:
    unsigned int v16 = *(WTF::StringImpl **)v9;
    uint64_t v17 = *((void *)v9 + 1);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t v18 = *((void *)v9 + 3);
    if (v18 && v17) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v18 + 16))(v18, v16);
    }
    goto LABEL_157;
  }
  if (!*v14)
  {
    LOWORD(v171) = 0;
    uint64_t v2 = (uint64_t)&v171;
    IPC::Decoder::operator>><unsigned char>(a1, &v171);
    if (!BYTE1(v171) || v171 >= 9u)
    {
      char v37 = *(WTF::StringImpl **)v9;
      uint64_t v38 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v39 = *((void *)v9 + 3);
      if (v39 && v38) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v37);
      }
      goto LABEL_4;
    }
    LOBYTE(v143[0]) = v171;
    int v149 = 0;
LABEL_32:
    unsigned __int8 v150 = 1;
    goto LABEL_157;
  }
  if (v15 == 1)
  {
    unint64_t v19 = IPC::Decoder::decode<unsigned long long>(a1);
    if ((_BYTE)v20)
    {
      unint64_t v21 = v19;
      uint64_t v151 = 0;
      uint64_t v152 = 0;
      if (v19 < 0x4924)
      {
        if (v19)
        {
          LODWORD(v152) = 56 * (int)v19 / 0x38u;
          uint64_t v151 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * v19));
          do
          {
            IPC::Decoder::decode<std::pair<WTF::URL,WebCore::CharacterRange>>((uint64_t)&v171, v9);
            if (!v174[16]) {
              goto LABEL_80;
            }
            unsigned int v23 = HIDWORD(v152);
            if (HIDWORD(v152) == v152)
            {
              WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::URL,WebCore::CharacterRange>>((unsigned int *)&v151, (unint64_t)&v171);
            }
            else
            {
              uint64_t v5 = (uint64_t)v151;
              WTF::URL::URL((uint64_t)v151 + 56 * HIDWORD(v152), (uint64_t *)&v171);
              *(_OWORD *)(v5 + 56 * v23 + 40) = *(_OWORD *)v174;
              ++HIDWORD(v152);
            }
            if (v174[16])
            {
              unint64_t v24 = (WTF::StringImpl *)v171;
              *(void *)&long long v171 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2) {
                  WTF::StringImpl::destroy(v24, v20);
                }
                else {
                  *(_DWORD *)v24 -= 2;
                }
              }
            }
            --v21;
          }
          while (v21);
          unint64_t v25 = v151;
          uint64_t v26 = v152;
        }
        else
        {
          unint64_t v25 = 0;
          uint64_t v26 = 0;
        }
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        char v166 = v25;
        uint64_t v167 = v26;
LABEL_46:
        char v168 = 1;
        WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v20);
LABEL_82:
        int v48 = &v171;
        unint64_t v49 = *((void *)v9 + 1);
        uint64_t v50 = *(WTF::StringImpl **)v9;
        unint64_t v51 = *((void *)v9 + 2) - *(void *)v9;
        if (v49 <= v51)
        {
          unint64_t v54 = 0;
          unint64_t v55 = 0;
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          uint64_t v56 = *((void *)v9 + 3);
          if (v56)
          {
            if (v49)
            {
              (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
              unint64_t v55 = *(WTF::StringImpl **)v9;
              unint64_t v54 = *((void *)v9 + 1);
            }
            else
            {
              unint64_t v54 = 0;
              unint64_t v55 = 0;
            }
          }
        }
        else
        {
          uint64_t v52 = (unsigned __int8 *)v50 + v51;
          *((void *)v9 + 2) = v52 + 1;
          if (v50)
          {
            unsigned int v53 = *v52;
            if (v53 < 2)
            {
              if (!v53)
              {
                uint64_t v2 = (uint64_t)&v171;
                unsigned int v4 = 0;
                char v142 = 0;
                LOBYTE(v3) = 0;
                goto LABEL_96;
              }
              IPC::Decoder::decode<WebCore::CharacterRange>(v9, (uint64_t)&v171);
              if ((_BYTE)v172)
              {
                unsigned int v4 = 0;
                LOBYTE(v3) = v171;
                v182[0] = *(void *)((char *)&v171 + 1);
                uint64_t v2 = (uint64_t)&v171;
                *(void *)((char *)v182 + 7) = *((void *)&v171 + 1);
                char v142 = 1;
                goto LABEL_96;
              }
LABEL_94:
              unint64_t v59 = *(WTF::StringImpl **)v9;
              uint64_t v60 = *((void *)v9 + 1);
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              uint64_t v61 = *((void *)v9 + 3);
              if (v61 && v60) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v61 + 16))(v61, v59);
              }
              uint64_t v2 = (uint64_t)&v171;
              LOBYTE(v3) = 0;
              unsigned int v4 = 1;
LABEL_96:
              IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v164);
              unint64_t v62 = *((void *)v9 + 1);
              int v63 = *(WTF::StringImpl **)v9;
              unint64_t v64 = *((void *)v9 + 2) - *(void *)v9;
              if (v62 <= v64)
              {
                unint64_t v117 = 0;
                unint64_t v118 = 0;
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
                uint64_t v119 = *((void *)v9 + 3);
                if (v119)
                {
                  if (v62)
                  {
                    (*(void (**)(uint64_t))(*(void *)v119 + 16))(v119);
                    unint64_t v118 = *(WTF::StringImpl **)v9;
                    unint64_t v117 = *((void *)v9 + 1);
                  }
                  else
                  {
                    unint64_t v117 = 0;
                    unint64_t v118 = 0;
                  }
                }
              }
              else
              {
                char v65 = (unsigned __int8 *)v63 + v64;
                *((void *)v9 + 2) = v65 + 1;
                if (v63)
                {
                  unsigned int v66 = *v65;
                  if (v66 < 2)
                  {
                    if (!v66)
                    {
                      LOBYTE(v171) = 0;
                      BYTE8(v172) = 0;
                      LOBYTE(v160[0]) = 0;
                      char v162 = 0;
                      LOBYTE(v48) = 1;
                      char v163 = 1;
                      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v63);
                      uint64_t v29 = 0;
                      goto LABEL_129;
                    }
                    IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v151);
                    IPC::Decoder::decode<WTF::String>(v9, (uint64_t)&v169);
                    unint64_t v67 = *((void *)v9 + 1);
                    char v68 = *(WTF::StringImpl **)v9;
                    unint64_t v69 = *((void *)v9 + 2) - *(void *)v9;
                    if (v67 <= v69)
                    {
                      unint64_t v124 = 0;
                      int v125 = 0;
                      *(void *)uint64_t v9 = 0;
                      *((void *)v9 + 1) = 0;
                      uint64_t v126 = *((void *)v9 + 3);
                      if (v126)
                      {
                        if (v67)
                        {
                          (*(void (**)(uint64_t))(*(void *)v126 + 16))(v126);
                          int v125 = *(WTF::StringImpl **)v9;
                          unint64_t v124 = *((void *)v9 + 1);
                        }
                        else
                        {
                          unint64_t v124 = 0;
                          int v125 = 0;
                        }
                      }
                    }
                    else
                    {
                      unsigned int v70 = (unsigned __int8 *)v68 + v69;
                      int v71 = v70 + 1;
                      *((void *)v9 + 2) = v70 + 1;
                      if (v68)
                      {
                        unsigned int v72 = *v70;
                        if (v72 < 2)
                        {
                          int v6 = 0;
                          LODWORD(v29) = 1;
LABEL_104:
                          if (v72) {
                            uint64_t v29 = v29;
                          }
                          else {
                            uint64_t v29 = 0;
                          }
                          unint64_t v73 = v71 - (unsigned __int8 *)v68;
                          if (v67 <= v73)
                          {
                            uint64_t v5 = v29;
                            uint64_t v29 = 0;
                            uint64_t v140 = *((void *)v9 + 3);
                            *(void *)uint64_t v9 = 0;
                            *((void *)v9 + 1) = 0;
                            if (v67 && v140)
                            {
                              (*(void (**)(uint64_t))(*(void *)v140 + 16))(v140);
                              char v68 = *(WTF::StringImpl **)v9;
                              uint64_t v29 = *((void *)v9 + 1);
                              goto LABEL_221;
                            }
                            goto LABEL_296;
                          }
                          unint64_t v74 = (unsigned __int8 *)v68 + v73;
                          *((void *)v9 + 2) = v74 + 1;
                          if (!v68)
                          {
                            uint64_t v5 = v29;
                            uint64_t v29 = v67;
                            goto LABEL_221;
                          }
                          unsigned int v75 = *v74;
                          if (v75 > 1)
                          {
                            uint64_t v5 = v29;
                            goto LABEL_223;
                          }
                          int v76 = 0;
                          __int16 v77 = (v75 != 0) << 8;
                          goto LABEL_111;
                        }
LABEL_219:
                        *(void *)uint64_t v9 = 0;
                        *((void *)v9 + 1) = 0;
                        uint64_t v128 = *((void *)v9 + 3);
                        if (!v128 || !v67)
                        {
                          uint64_t v5 = 0;
                          uint64_t v29 = 0;
                          char v68 = 0;
                          int v6 = 1;
                          goto LABEL_221;
                        }
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v128 + 16))(v128, v68);
                        LODWORD(v29) = 0;
                        char v68 = *(WTF::StringImpl **)v9;
                        unint64_t v67 = *((void *)v9 + 1);
                        int v6 = 1;
                        int v71 = (unsigned __int8 *)*((void *)v9 + 2);
                        goto LABEL_104;
                      }
                      unint64_t v124 = v67;
                      int v125 = 0;
                    }
                    *(void *)uint64_t v9 = 0;
                    *((void *)v9 + 1) = 0;
                    uint64_t v127 = *((void *)v9 + 3);
                    if (v127 && v124)
                    {
                      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v127 + 16))(v127, v125, v124);
                      unsigned int v72 = 0;
                      char v68 = *(WTF::StringImpl **)v9;
                      unint64_t v67 = *((void *)v9 + 1);
                    }
                    else
                    {
                      unint64_t v67 = 0;
                      char v68 = 0;
                      unsigned int v72 = 0;
                    }
                    goto LABEL_219;
                  }
LABEL_210:
                  *(void *)uint64_t v9 = 0;
                  *((void *)v9 + 1) = 0;
                  uint64_t v121 = *((void *)v9 + 3);
                  if (v121 && v62) {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v121 + 16))(v121, v63);
                  }
                  LOBYTE(v160[0]) = 0;
                  char v163 = 0;
                  goto LABEL_127;
                }
                unint64_t v117 = v62;
                unint64_t v118 = 0;
              }
              unint64_t v62 = 0;
              int v63 = 0;
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              uint64_t v120 = *((void *)v9 + 3);
              if (v120)
              {
                if (v117)
                {
                  (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v120 + 16))(v120, v118, v117);
                  int v63 = *(WTF::StringImpl **)v9;
                  unint64_t v62 = *((void *)v9 + 1);
                }
                else
                {
                  unint64_t v62 = 0;
                  int v63 = 0;
                }
              }
              goto LABEL_210;
            }
LABEL_93:
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v58 = *((void *)v9 + 3);
            if (v58 && v49) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v58 + 16))(v58, v50);
            }
            goto LABEL_94;
          }
          unint64_t v54 = v49;
          unint64_t v55 = 0;
        }
        unint64_t v49 = 0;
        uint64_t v50 = 0;
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v57 = *((void *)v9 + 3);
        if (v57)
        {
          if (v54)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v57 + 16))(v57, v55, v54);
            uint64_t v50 = *(WTF::StringImpl **)v9;
            unint64_t v49 = *((void *)v9 + 1);
          }
          else
          {
            unint64_t v49 = 0;
            uint64_t v50 = 0;
          }
        }
        goto LABEL_93;
      }
      uint64_t v3 = (long long *)v174;
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::URL,WebCore::CharacterRange>>((uint64_t)&v171, v9);
        if (!v174[16]) {
          break;
        }
        unsigned int v40 = HIDWORD(v152);
        if (HIDWORD(v152) == v152)
        {
          WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::URL,WebCore::CharacterRange>>((unsigned int *)&v151, (unint64_t)&v171);
        }
        else
        {
          uint64_t v5 = (uint64_t)v151;
          WTF::URL::URL((uint64_t)v151 + 56 * HIDWORD(v152), (uint64_t *)&v171);
          *(_OWORD *)(v5 + 56 * v40 + 40) = *(_OWORD *)v174;
          ++HIDWORD(v152);
        }
        if (v174[16])
        {
          uint64_t v41 = (WTF::StringImpl *)v171;
          *(void *)&long long v171 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v20);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
        }
        if (!--v21)
        {
          unsigned int v4 = HIDWORD(v152);
          uint64_t v2 = (uint64_t)v151;
          if (v152 > HIDWORD(v152))
          {
            int v42 = v151;
            if (HIDWORD(v152))
            {
              uint64_t v29 = 76695845;
              if (HIDWORD(v152) >= 0x4924925)
              {
                __break(0xC471u);
                goto LABEL_295;
              }
              unsigned int v43 = 56 * HIDWORD(v152);
              uint64_t v44 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * HIDWORD(v152)));
              LODWORD(v152) = v43 / 0x38;
              uint64_t v151 = v44;
              int v42 = (WTF::StringImpl *)v2;
              if (v44 != (WTF::StringImpl *)v2)
              {
                WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move((WTF::StringImpl *)v2, (WTF::StringImpl *)(v2 + 56 * v4), (uint64_t)v44);
                int v42 = v151;
              }
            }
            if (v2)
            {
              if (v42 == (WTF::StringImpl *)v2)
              {
                uint64_t v151 = 0;
                LODWORD(v152) = 0;
              }
              WTF::fastFree((WTF *)v2, v20);
              uint64_t v2 = (uint64_t)v151;
            }
            else
            {
              uint64_t v2 = (uint64_t)v42;
            }
          }
          char v166 = (WTF *)v2;
          uint64_t v139 = v152;
          uint64_t v151 = 0;
          uint64_t v152 = 0;
          uint64_t v167 = v139;
          goto LABEL_46;
        }
      }
LABEL_80:
      LOBYTE(v166) = 0;
      char v168 = 0;
      WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v22);
    }
    else
    {
      LOBYTE(v166) = 0;
      char v168 = 0;
    }
    uint64_t v45 = *(WTF::StringImpl **)v9;
    uint64_t v46 = *((void *)v9 + 1);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t v47 = *((void *)v9 + 3);
    if (v47 && v46) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v47 + 16))(v47, v45);
    }
    goto LABEL_82;
  }
  if (v15 == 2)
  {
    uint64_t v27 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    uint64_t v29 = *(void *)v9;
    if (*(void *)v9)
    {
      if (!v28) {
        goto LABEL_295;
      }
      *(void *)&v143[0] = v27;
      int v149 = 2;
      goto LABEL_32;
    }
    uint64_t v133 = *((void *)v9 + 1);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t v134 = *((void *)v9 + 3);
    if (!v134 || !v133) {
      goto LABEL_4;
    }
    uint64_t v36 = *(void (**)(void))(*(void *)v134 + 16);
LABEL_56:
    v36();
    goto LABEL_4;
  }
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v151);
  IPC::Decoder::decode<WTF::String>(v9, (uint64_t)v160);
  uint64_t v2 = *(void *)v9;
  if (!*(void *)v9)
  {
    LODWORD(v3) = 0;
    LOBYTE(v171) = 0;
    LOBYTE(v172) = 0;
    if (LOBYTE(v160[1]))
    {
      unint64_t v135 = v160[0];
      v160[0] = 0;
      if (v135)
      {
        if (*(_DWORD *)v135 != 2)
        {
          LODWORD(v3) = 0;
          *(_DWORD *)v135 -= 2;
          goto LABEL_37;
        }
        WTF::StringImpl::destroy(v135, v30);
      }
      LODWORD(v3) = 0;
    }
LABEL_37:
    if ((_BYTE)v152)
    {
      int v31 = v151;
      uint64_t v151 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::destroy(v31, v30);
          if (!v2)
          {
LABEL_237:
            unint64_t v30 = *(WTF::StringImpl **)v9;
            uint64_t v136 = *((void *)v9 + 1);
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            uint64_t v137 = *((void *)v9 + 3);
            if (v137 && v136)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v137 + 16))(v137, v30);
              LODWORD(v3) = v172;
            }
          }
LABEL_48:
          if (v3)
          {
            long long v32 = v171;
            long long v171 = 0uLL;
            v143[0] = v32;
            int v149 = 3;
            uint64_t v2 = 1;
          }
          else
          {
            uint64_t v2 = 0;
            LOBYTE(v143[0]) = 0;
          }
          unsigned __int8 v150 = v2;
          std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v30);
          goto LABEL_156;
        }
        *(_DWORD *)v31 -= 2;
      }
    }
    if (!v2) {
      goto LABEL_237;
    }
    goto LABEL_48;
  }
  uint64_t v29 = v152;
  if ((_BYTE)v152)
  {
    uint64_t v29 = (uint64_t)v151;
    uint64_t v151 = 0;
    if (LOBYTE(v160[1]))
    {
      *(void *)&long long v171 = v29;
      *((WTF::StringImpl **)&v171 + 1) = v160[0];
      LODWORD(v3) = 1;
      LOBYTE(v172) = 1;
      goto LABEL_37;
    }
  }
  while (1)
  {
    while (1)
    {
LABEL_295:
      __break(1u);
LABEL_296:
      char v68 = (WTF::StringImpl *)v29;
LABEL_221:
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v129 = *((void *)v9 + 3);
      if (v129 && v29)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v129 + 16))(v129, v68, v29);
        char v68 = *(WTF::StringImpl **)v9;
        unint64_t v67 = *((void *)v9 + 1);
      }
      else
      {
        unint64_t v67 = 0;
        char v68 = 0;
      }
LABEL_223:
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v130 = *((void *)v9 + 3);
      if (!v130
        || !v67
        || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v130 + 16))(v130, v68), !*(void *)v9))
      {
        LOBYTE(v171) = 0;
        BYTE8(v172) = 0;
        if (v170)
        {
          unint64_t v141 = v169;
          uint64_t v169 = 0;
          if (v141)
          {
            if (*(_DWORD *)v141 != 2)
            {
              LODWORD(v48) = 0;
              *(_DWORD *)v141 -= 2;
              goto LABEL_226;
            }
            WTF::StringImpl::destroy(v141, v68);
          }
        }
        LODWORD(v48) = 0;
LABEL_226:
        uint64_t v5 = 1;
        goto LABEL_116;
      }
      __int16 v77 = 0;
      int v76 = 1;
      uint64_t v29 = v5;
LABEL_111:
      if ((_BYTE)v152)
      {
        unint64_t v78 = v151;
        uint64_t v151 = 0;
        if (v170)
        {
          char v79 = v169;
          uint64_t v169 = 0;
          if (!v6 && !v76) {
            break;
          }
        }
      }
    }
    uint64_t v5 = 0;
    *(void *)&long long v171 = v78;
    *((void *)&v171 + 1) = v79;
    LOWORD(v172) = v77 | v29;
    LODWORD(v48) = 1;
    BYTE8(v172) = 1;
LABEL_116:
    if ((_BYTE)v152)
    {
      unsigned __int16 v80 = v151;
      uint64_t v151 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
        {
          WTF::StringImpl::destroy(v80, v68);
          if (!v5) {
            goto LABEL_124;
          }
          goto LABEL_227;
        }
        *(_DWORD *)v80 -= 2;
      }
    }
    if (!v5) {
      goto LABEL_124;
    }
LABEL_227:
    char v68 = *(WTF::StringImpl **)v9;
    uint64_t v131 = *((void *)v9 + 1);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t v132 = *((void *)v9 + 3);
    if (v132 && v131)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v132 + 16))(v132, v68);
      LODWORD(v48) = BYTE8(v172);
    }
LABEL_124:
    if (v48)
    {
      uint64_t v7 = *((void *)&v171 + 1);
      unint64_t v82 = v171;
      long long v171 = 0uLL;
      *(_OWORD *)int v160 = __PAIR128__(v7, v82);
      __int16 v8 = v172;
      __int16 v161 = v172;
      char v162 = 1;
      char v163 = 1;
      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v68);
      uint64_t v29 = 0;
      LOBYTE(v48) = 0;
    }
    else
    {
      LOBYTE(v160[0]) = 0;
      char v163 = 0;
      std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v68);
LABEL_127:
      char v81 = *(WTF::StringImpl **)v9;
      uint64_t v83 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v84 = *((void *)v9 + 3);
      if (v84 && v83) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v84 + 16))(v84, v81);
      }
      uint64_t v29 = 1;
    }
LABEL_129:
    if (!*(void *)v9) {
      break;
    }
    if (v168)
    {
      BOOL v85 = v166;
      uint64_t v5 = v167;
      int v6 = HIDWORD(v167);
      char v166 = 0;
      uint64_t v167 = 0;
      if (!v4)
      {
        LOBYTE(v153) = (_BYTE)v3;
        *(void *)((char *)&v153 + 1) = v182[0];
        *((void *)&v153 + 1) = *(void *)(v2 + 143);
        LOBYTE(v154) = v142;
        if (v165)
        {
          uint64_t v2 = (uint64_t)v164;
          int v164 = 0;
          if (!v29)
          {
            LOBYTE(v156) = 0;
            char v159 = 0;
            if ((v48 & 1) == 0)
            {
              int v86 = v160[0];
              v160[0] = 0;
              v160[1] = 0;
              uint64_t v156 = v86;
              uint64_t v157 = v7;
              __int16 v158 = v8;
              char v159 = 1;
            }
            unsigned int v4 = 0;
            *(void *)&long long v171 = v85;
            uint64_t v151 = 0;
            uint64_t v152 = 0;
            *((void *)&v171 + 1) = __PAIR64__(v6, v5);
            long long v172 = v153;
            int v155 = 0;
            uint64_t v173 = v154;
            *(void *)unint64_t v174 = v2;
            v174[8] = 0;
            unsigned __int8 v176 = 0;
            if ((v48 & 1) == 0)
            {
              unint64_t v87 = v156;
              uint64_t v156 = 0;
              uint64_t v157 = 0;
              *(void *)&v174[8] = v87;
              *(void *)&v174[16] = v7;
              __int16 v175 = v8;
              unsigned int v4 = 1;
              unsigned __int8 v176 = 1;
            }
            LOBYTE(v177) = 1;
            std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v156, v81);
            unint64_t v89 = v155;
            int v155 = 0;
            if (v89)
            {
              if (*(_DWORD *)v89 == 2) {
                WTF::StringImpl::destroy(v89, v88);
              }
              else {
                *(_DWORD *)v89 -= 2;
              }
            }
            WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v88);
            uint64_t v7 = 1;
            goto LABEL_143;
          }
        }
      }
    }
  }
  unsigned int v4 = 0;
  uint64_t v7 = 0;
  LODWORD(v3) = 0;
  int v90 = 0;
  LOBYTE(v171) = 0;
  LOBYTE(v177) = 0;
  if ((v29 & 1) == 0)
  {
LABEL_143:
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v160, v81);
    LODWORD(v3) = v4;
    int v90 = v7;
  }
  if (v165)
  {
    int v91 = v164;
    int v164 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2) {
        WTF::StringImpl::destroy(v91, v81);
      }
      else {
        *(_DWORD *)v91 -= 2;
      }
    }
  }
  if (v168) {
    WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v166, v81);
  }
  if (v90)
  {
LABEL_152:
    uint64_t v92 = v171;
    long long v171 = 0uLL;
    *(void *)&v143[0] = v92;
    *((void *)&v143[0] + 1) = __PAIR64__(v6, v5);
    v143[1] = v172;
    *(void *)unint64_t v174 = 0;
    uint64_t v144 = v173;
    uint64_t v145 = v2;
    LOBYTE(v146) = 0;
    char v148 = 0;
    if (v3)
    {
      long long v93 = *(_OWORD *)&v174[8];
      *(_OWORD *)&v174[8] = 0uLL;
      long long v146 = v93;
      __int16 v147 = v175;
      char v148 = 1;
    }
    uint64_t v2 = 1;
    int v149 = 1;
  }
  else
  {
    char v81 = *(WTF::StringImpl **)v9;
    uint64_t v122 = *((void *)v9 + 1);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t v123 = *((void *)v9 + 3);
    if (v123)
    {
      if (v122)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v123 + 16))(v123, v81);
        if ((_BYTE)v177)
        {
          uint64_t v5 = DWORD2(v171);
          int v6 = HIDWORD(v171);
          uint64_t v2 = *(void *)v174;
          LODWORD(v3) = v176;
          goto LABEL_152;
        }
      }
    }
    uint64_t v2 = 0;
    LOBYTE(v143[0]) = 0;
  }
  unsigned __int8 v150 = v2;
  std::__optional_destruct_base<WebCore::TextExtraction::TextItemData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v81);
LABEL_156:
  if (!v2) {
    goto LABEL_5;
  }
LABEL_157:
  IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)v9, (uint64_t)v160);
  unint64_t v94 = IPC::Decoder::decode<unsigned long long>(v9);
  if (!(_BYTE)v95)
  {
    LOBYTE(v151) = 0;
    LOBYTE(v153) = 0;
LABEL_168:
    BOOL v105 = *(WTF::StringImpl **)v9;
    uint64_t v106 = *((void *)v9 + 1);
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t result = *((void *)v9 + 3);
    if (result && v106) {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v105);
    }
    goto LABEL_191;
  }
  uint64_t v2 = v94;
  char v166 = 0;
  uint64_t v167 = 0;
  if (v94 >= 0x2222)
  {
    uint64_t v3 = &v178;
    unsigned int v4 = 120;
    while (1)
    {
      IPC::Decoder::decode<WebCore::TextExtraction::Item>(&v171, v9);
      if (!v181) {
        break;
      }
      unsigned int v108 = HIDWORD(v167);
      if (HIDWORD(v167) == v167)
      {
        WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextExtraction::Item>((uint64_t)&v166, (unint64_t)&v171);
      }
      else
      {
        uint64_t v5 = (uint64_t)v166;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v166 + 120 * HIDWORD(v167), (uint64_t)&v171);
        uint64_t v110 = v5 + 120 * v108;
        *(_OWORD *)(v110 + 88) = v178;
        *(void *)(v110 + 104) = 0;
        *(void *)(v110 + 112) = 0;
        int v111 = v179;
        unint64_t v179 = 0;
        *(void *)(v110 + 104) = v111;
        LODWORD(v111) = v180;
        LODWORD(v180) = 0;
        *(_DWORD *)(v110 + 112) = v111;
        LODWORD(v111) = HIDWORD(v180);
        HIDWORD(v180) = 0;
        *(_DWORD *)(v110 + 116) = v111;
        ++HIDWORD(v167);
      }
      std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v109);
      if (!--v2)
      {
        unsigned int v4 = HIDWORD(v167);
        uint64_t v2 = (uint64_t)v166;
        if (v167 > HIDWORD(v167))
        {
          unsigned __int8 v112 = v166;
          if (HIDWORD(v167))
          {
            if (HIDWORD(v167) >= 0x2222223)
            {
              __break(0xC471u);
              JUMPOUT(0x1988A2C68);
            }
            LODWORD(v3) = 120 * HIDWORD(v167);
            uint64_t v113 = (WTF *)WTF::fastMalloc((WTF *)(120 * HIDWORD(v167)));
            LODWORD(v167) = v3 / 0x78;
            char v166 = v113;
            unsigned __int8 v112 = (WTF *)v2;
            if (v113 != (WTF *)v2)
            {
              WTF::VectorMover<false,WebCore::TextExtraction::Item>::move(v2, v2 + 120 * v4, (uint64_t)v113);
              unsigned __int8 v112 = v166;
            }
          }
          if (v2)
          {
            if (v112 == (WTF *)v2)
            {
              char v166 = 0;
              LODWORD(v167) = 0;
            }
            WTF::fastFree((WTF *)v2, v95);
            uint64_t v2 = (uint64_t)v166;
          }
          else
          {
            uint64_t v2 = (uint64_t)v112;
          }
        }
        uint64_t v151 = (WTF::StringImpl *)v2;
        uint64_t v138 = v167;
        char v166 = 0;
        uint64_t v167 = 0;
        uint64_t v152 = v138;
        goto LABEL_173;
      }
    }
LABEL_189:
    LOBYTE(v151) = 0;
    LOBYTE(v153) = 0;
    std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v98);
  }
  else
  {
    if (v94)
    {
      unsigned int v96 = 120 * v94;
      int v97 = (WTF *)WTF::fastMalloc((WTF *)(120 * v94));
      LODWORD(v167) = v96 / 0x78;
      char v166 = v97;
      uint64_t v3 = &v178;
      unsigned int v4 = 120;
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextExtraction::Item>(&v171, v9);
        if (!v181) {
          goto LABEL_189;
        }
        unsigned int v99 = HIDWORD(v167);
        if (HIDWORD(v167) == v167)
        {
          WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextExtraction::Item>((uint64_t)&v166, (unint64_t)&v171);
        }
        else
        {
          uint64_t v5 = (uint64_t)v166;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v166 + 120 * HIDWORD(v167), (uint64_t)&v171);
          uint64_t v101 = v5 + 120 * v99;
          *(_OWORD *)(v101 + 88) = v178;
          *(void *)(v101 + 104) = 0;
          *(void *)(v101 + 112) = 0;
          int v102 = v179;
          unint64_t v179 = 0;
          *(void *)(v101 + 104) = v102;
          LODWORD(v102) = v180;
          LODWORD(v180) = 0;
          *(_DWORD *)(v101 + 112) = v102;
          LODWORD(v102) = HIDWORD(v180);
          HIDWORD(v180) = 0;
          *(_DWORD *)(v101 + 116) = v102;
          ++HIDWORD(v167);
        }
        std::__optional_destruct_base<WebCore::TextExtraction::Item,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v171, v100);
        if (!--v2)
        {
          BOOL v103 = v166;
          uint64_t v104 = v167;
          goto LABEL_172;
        }
      }
    }
    BOOL v103 = 0;
    uint64_t v104 = 0;
LABEL_172:
    char v166 = 0;
    uint64_t v167 = 0;
    uint64_t v151 = v103;
    uint64_t v152 = v104;
LABEL_173:
    LOBYTE(v153) = 1;
  }
  uint64_t result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v166, v95);
  if (!(_BYTE)v153) {
    goto LABEL_168;
  }
LABEL_191:
  if (*(void *)v9)
  {
    uint64_t v29 = v150;
    if (!v150) {
      goto LABEL_295;
    }
    uint64_t v9 = (IPC::Decoder *)&v171;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v171, (uint64_t)v143);
    uint64_t v29 = v161;
    if (!(_BYTE)v161) {
      goto LABEL_295;
    }
    uint64_t v2 = (uint64_t)&v178;
    long long v178 = *(_OWORD *)v160;
    uint64_t v29 = v153;
    if (!(_BYTE)v153) {
      goto LABEL_295;
    }
    unint64_t v179 = v151;
    uint64_t v114 = v152;
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    uint64_t v180 = v114;
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextExtraction::ContainerType,WebCore::TextExtraction::TextItemData,WebCore::TextExtraction::ScrollableItemData,WebCore::TextExtraction::ImageItemData>,(std::__variant_detail::_Trait)1>::__move_constructor(a2, (uint64_t)&v171);
    *(_OWORD *)(a2 + 88) = v178;
    *(void *)(a2 + 104) = v179;
    uint64_t v115 = v180;
    unint64_t v179 = 0;
    uint64_t v180 = 0;
    *(void *)(a2 + 112) = v115;
    *(unsigned char *)(a2 + 120) = 1;
    uint64_t result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v179, v116);
    if (v177 != -1) {
      uint64_t result = ((uint64_t (*)(WTF **, long long *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v177])(&v166, &v171);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 120) = 0;
  }
  if ((_BYTE)v153) {
    uint64_t result = WTF::Vector<WebCore::TextExtraction::Item,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v105);
  }
  if (v150)
  {
    if (v149 != -1) {
      return ((uint64_t (*)(long long *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14TextExtraction13ContainerTypeENS7_12TextItemDataENS7_18ScrollableItemDataENS7_13ImageItemDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v149])(&v171, v143);
    }
  }
  return result;
}

void sub_1988A2C90(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23,WTF::StringImpl *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF::StringImpl *a42,char a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,WTF::StringImpl *a50,char a51)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v51 - 256, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 16);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 17);
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

uint64_t IPC::ArgumentCoder<WebCore::WritingTools::Session,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)v7);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>((uint64_t *)a1);
  uint64_t result = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a1);
  uint64_t v6 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_8;
  }
  LOBYTE(v6) = v8;
  if (!v8 || (LOBYTE(v6) = v4, v4 <= 0xFFu) || (LOBYTE(v6) = result, (unsigned __int16)result <= 0xFFu))
  {
    __break(1u);
LABEL_8:
    *(unsigned char *)a2 = 0;
    goto LABEL_6;
  }
  uint64_t v6 = v7[1];
  *(void *)a2 = v7[0];
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = result;
  LOBYTE(v6) = 1;
LABEL_6:
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(a1, a2 + 2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 7);

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 8);
}

uint64_t IPC::ArgumentCoder<WebCore::WritingTools::Context,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WebCore::AttributedString>(a1, v7);
  uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v5);
  if (*(void *)a1)
  {
    if (v13)
    {
      long long v9 = v12;
      if (v8)
      {
        uint64_t result = WebCore::AttributedString::AttributedString();
        if (v6)
        {
          long long v11 = v5;
          *(_OWORD *)a2 = v9;
          WebCore::AttributedString::AttributedString();
          *(_OWORD *)(a2 + 56) = v11;
          *(unsigned char *)(a2 + 80) = 1;
          uint64_t result = MEMORY[0x199732DE0](&v10);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 80) = 0;
LABEL_6:
  if (v8) {
    return MEMORY[0x199732DE0](v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  char v5 = *(unsigned char *)(a2 + 40);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::WritingTools::TextSuggestion,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::UUID>(a1, (uint64_t)&v12);
  IPC::Decoder::decode<WebCore::CharacterRange>(a1, (uint64_t)&v10);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a1);
  if (*(void *)a1)
  {
    if (v13)
    {
      if (v11)
      {
        long long v7 = v10;
        if (v9)
        {
          char v6 = v8;
          char v8 = 0;
          if ((unsigned __int16)result > 0xFFu)
          {
            *(_OWORD *)a2 = v12;
            *(_OWORD *)(a2 + 16) = v7;
            *(void *)(a2 + 32) = v6;
            *(unsigned char *)(a2 + 40) = (_BYTE)result;
            *(unsigned char *)(a2 + 48) = 1;
            return result;
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (v9)
  {
    uint64_t result = v8;
    char v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A3300(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15)
{
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::CaptureSourceError,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 9);
  return IPC::Encoder::operator<<<BOOL>(a1, &v6);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CaptureSourceError,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::MediaAccessDenialReason>((uint64_t *)a1);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::MediaConstraintType>((uint64_t *)a1);
  if (*(void *)a1)
  {
    if (v8 && v4 > 0xFFu && (unsigned __int16)result > 0xFFu)
    {
      *(void *)a2 = v7;
      *(_WORD *)(a2 + 8) = v4 | (unsigned __int16)((_WORD)result << 8);
      *(unsigned char *)(a2 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v8)
  {
    uint64_t result = v7;
    long long v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A3464(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::MediaAccessDenialReason>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 8u;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t IPC::Decoder::decode<WebCore::MediaConstraintType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MediaConstraintType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WebCore::MediaSettingsRange>,void>::encode<IPC::Encoder,std::optional<WebCore::MediaSettingsRange> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::MediaSettingsRange>,void>::encode<IPC::Encoder,std::optional<WebCore::MediaSettingsRange> const&>(a1, a2 + 64);

  return IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 120);
}

WTF *IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *((void *)a1 + 1);
  BOOL v6 = *(char **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if (v5 <= v7)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v28 = *((void *)a1 + 3);
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
        uint64_t v27 = *(char **)a1;
        unint64_t v26 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = 0;
      }
    }
    goto LABEL_37;
  }
  uint64_t v8 = &v6[v7];
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v26 = v5;
    uint64_t v27 = 0;
LABEL_37:
    unint64_t v5 = 0;
    BOOL v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v29 = *((void *)a1 + 3);
    if (v29)
    {
      if (v26)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v29 + 16))(v29, v27, v26);
        BOOL v6 = *(char **)a1;
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        BOOL v6 = 0;
      }
    }
    goto LABEL_38;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (v9)
    {
      LOWORD(v49[0]) = 0;
      IPC::Decoder::operator>><unsigned char>(a1, v49);
      int v10 = LOBYTE(v49[0]);
      if (BYTE1(v49[0])) {
        BOOL v11 = LOBYTE(v49[0]) > 2u;
      }
      else {
        BOOL v11 = 1;
      }
      int v12 = v11;
      if (v12 == 1)
      {
        uint64_t v38 = *(char **)a1;
        uint64_t v39 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v40 = *((void *)a1 + 3);
        if (v40 && v39) {
          (*(void (**)(uint64_t, char *))(*(void *)v40 + 16))(v40, v38);
        }
        unsigned int v13 = 0;
      }
      else
      {
        unsigned int v13 = 0x10000;
      }
      if (v12) {
        int v14 = 0;
      }
      else {
        int v14 = v10;
      }
      int v15 = 256;
    }
    else
    {
      int v14 = 0;
      int v15 = 0;
      unsigned int v13 = 0x10000;
    }
    goto LABEL_18;
  }
LABEL_38:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v30 = *((void *)a1 + 3);
  if (v30 && v5) {
    (*(void (**)(uint64_t, char *))(*(void *)v30 + 16))(v30, v6);
  }
  unsigned int v13 = 0;
  int v14 = 0;
  int v15 = 0;
LABEL_18:
  if (!HIWORD(v13))
  {
    int v31 = *(char **)a1;
    uint64_t v32 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v33 = *((void *)a1 + 3);
    if (v33)
    {
      if (v32) {
        (*(void (**)(uint64_t, char *))(*(void *)v33 + 16))(v33, v31);
      }
    }
  }
  IPC::Decoder::decode<std::optional<WebCore::MediaSettingsRange>>(v49, a1);
  uint64_t result = (WTF *)IPC::Decoder::decode<std::optional<WebCore::MediaSettingsRange>>(v46, a1);
  unint64_t v18 = *((void *)a1 + 1);
  unint64_t v19 = *(char **)a1;
  unint64_t v20 = *((void *)a1 + 2) - *(void *)a1;
  if (v18 <= v20)
  {
    unint64_t v34 = 0;
    uint64_t v22 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v35 = *((void *)a1 + 3);
    if (v35)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
        uint64_t v22 = *(char **)a1;
        unint64_t v34 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v22 = 0;
      }
    }
    goto LABEL_44;
  }
  unint64_t v21 = &v19[v20];
  LODWORD(v22) = v21 + 1;
  *((void *)a1 + 2) = v21 + 1;
  if (!v19)
  {
    unint64_t v34 = v18;
    uint64_t v22 = 0;
LABEL_44:
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v36 = *((void *)a1 + 3);
    if (v36)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v36 + 16))(v36, v22, v34);
        unint64_t v19 = *(char **)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
      }
    }
LABEL_45:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (v37 && v18) {
      goto LABEL_47;
    }
    goto LABEL_62;
  }
  unsigned int v23 = *v21;
  if (v23 >= 2) {
    goto LABEL_45;
  }
  if (!v23)
  {
    unint64_t v25 = 0;
    LODWORD(v22) = 1;
    goto LABEL_64;
  }
  uint64_t result = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v19) {
    goto LABEL_61;
  }
  unint64_t v24 = result;
  *(void *)uint64_t v52 = 0;
  *(void *)&v52[8] = 0;
  if ((unint64_t)result >= 0x100000)
  {
    uint64_t v41 = 0;
    LODWORD(v2) = 0;
    while (1)
    {
      uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
      *(_WORD *)unsigned int v53 = (_WORD)result;
      if ((unsigned __int16)result < 0x100u) {
        break;
      }
      if (v2 == *(_DWORD *)&v52[8])
      {
        uint64_t result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, (WTF *)(v2 + 1), (unint64_t)v53);
        LODWORD(v2) = *(_DWORD *)&v52[12];
        uint64_t v41 = *(WTF **)v52;
        *(unsigned char *)(*(void *)v52 + *(unsigned int *)&v52[12]) = *(unsigned char *)result;
      }
      else
      {
        *((unsigned char *)v41 + v2) = (_BYTE)result;
      }
      uint64_t v2 = (v2 + 1);
      *(_DWORD *)&v52[12] = v2;
      unint64_t v24 = (WTF *)((char *)v24 - 1);
      if (!v24)
      {
        if (*(_DWORD *)&v52[8] > v2)
        {
          if (v2)
          {
            *(_DWORD *)&v52[8] = v2;
            uint64_t result = (WTF *)WTF::fastRealloc(v41, (void *)v2);
            *(void *)uint64_t v52 = result;
          }
          else
          {
            *(void *)uint64_t v52 = 0;
            *(_DWORD *)&v52[8] = 0;
            uint64_t result = (WTF *)WTF::fastFree(v41, v19);
          }
        }
        unint64_t v25 = *(WTF **)v52;
        int v17 = *(_DWORD *)&v52[8];
        LODWORD(v2) = *(_DWORD *)&v52[12];
        goto LABEL_35;
      }
    }
    unint64_t v25 = *(WTF **)v52;
    if (*(void *)v52)
    {
LABEL_60:
      *(void *)uint64_t v52 = 0;
      *(_DWORD *)&v52[8] = 0;
      WTF::fastFree(v25, v19);
    }
LABEL_61:
    unint64_t v19 = *(char **)a1;
    uint64_t v42 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (v37 && v42) {
LABEL_47:
    }
      (*(void (**)(uint64_t, char *))(*(void *)v37 + 16))(v37, v19);
LABEL_62:
    unint64_t v19 = *(char **)a1;
    unint64_t v18 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_80;
    }
    goto LABEL_63;
  }
  if (result)
  {
    unint64_t v25 = (WTF *)WTF::fastMalloc(result);
    LODWORD(v2) = 0;
    *(_DWORD *)&v52[8] = v24;
    *(void *)uint64_t v52 = v25;
    do
    {
      uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
      *(_WORD *)unsigned int v53 = (_WORD)result;
      if ((unsigned __int16)result < 0x100u) {
        goto LABEL_60;
      }
      if (v2 == *(_DWORD *)&v52[8])
      {
        uint64_t result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, (WTF *)(v2 + 1), (unint64_t)v53);
        LODWORD(v2) = *(_DWORD *)&v52[12];
        unint64_t v25 = *(WTF **)v52;
        *(unsigned char *)(*(void *)v52 + *(unsigned int *)&v52[12]) = *(unsigned char *)result;
      }
      else
      {
        *((unsigned char *)v25 + v2) = (_BYTE)result;
      }
      LODWORD(v2) = v2 + 1;
      *(_DWORD *)&v52[12] = v2;
      unint64_t v24 = (WTF *)((char *)v24 - 1);
    }
    while (v24);
    int v17 = *(_DWORD *)&v52[8];
  }
  else
  {
    int v17 = 0;
    unint64_t v25 = 0;
    LODWORD(v2) = 0;
  }
LABEL_35:
  unsigned int v23 = 0;
  LODWORD(v22) = 0;
  while (1)
  {
LABEL_64:
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 144) = 0;
      goto LABEL_75;
    }
    unsigned int v43 = v14 | v13 | v15;
    if (HIWORD(v43))
    {
      if (v51)
      {
        *(_OWORD *)&v53[6] = v49[0];
        *(_OWORD *)&v53[22] = v49[1];
        *(_OWORD *)&v53[38] = v49[2];
        v53[54] = v50;
        if (v48)
        {
          *(_OWORD *)&v52[7] = v46[0];
          *(_OWORD *)&v52[23] = v46[1];
          *(_OWORD *)&v52[39] = v46[2];
          v52[55] = v47;
          if (!v23) {
            break;
          }
        }
      }
    }
    __break(1u);
LABEL_80:
    if (v18) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v19);
    }
LABEL_63:
    unint64_t v25 = 0;
    unsigned int v23 = 1;
  }
  *(_OWORD *)(a2 + 2) = *(_OWORD *)v53;
  *(_OWORD *)(a2 + 18) = *(_OWORD *)&v53[16];
  *(_OWORD *)(a2 + 34) = *(_OWORD *)&v53[32];
  long long v44 = *(_OWORD *)&v52[16];
  *(_OWORD *)(a2 + 57) = *(_OWORD *)v52;
  if (v22) {
    uint64_t v45 = v25;
  }
  else {
    uint64_t v45 = 0;
  }
  *(_WORD *)a2 = v43;
  *(void *)(a2 + 49) = *(void *)&v53[47];
  *(_OWORD *)(a2 + 73) = v44;
  *(_OWORD *)(a2 + 89) = *(_OWORD *)&v52[32];
  *(void *)(a2 + 105) = *(void *)&v52[48];
  *(unsigned char *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  if ((v22 & 1) == 0)
  {
    *(void *)(a2 + 120) = v25;
    *(_DWORD *)(a2 + 128) = v17;
    *(_DWORD *)(a2 + 132) = v2;
    *(unsigned char *)(a2 + 136) = 1;
  }
  *(unsigned char *)(a2 + 144) = 1;
  unint64_t v25 = v45;
LABEL_75:
  if (((v22 | v23) & 1) == 0)
  {
    if (v25) {
      return (WTF *)WTF::fastFree(v25, v19);
    }
  }
  return result;
}

void sub_1988A3CF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26)
{
  if (a26) {
    WTF::fastFree(a26, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::Decoder::decode<std::optional<WebCore::MediaSettingsRange>>(unsigned char *result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
LABEL_14:
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *(void *)a2;
        unint64_t v13 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_15;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v13 = v6;
    uint64_t v14 = 0;
LABEL_15:
    unint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
LABEL_16:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17 && v6)
    {
      unint64_t v18 = *(void (**)(void))(*(void *)v17 + 16);
LABEL_31:
      v18();
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_16;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    result[48] = 0;
    goto LABEL_11;
  }
  IPC::Decoder::decode<std::optional<double>>(a2, &v29);
  IPC::Decoder::decode<std::optional<double>>(a2, &v26);
  uint64_t result = IPC::Decoder::decode<std::optional<double>>(a2, &v23);
  if (*(void *)a2)
  {
    if (v31)
    {
      if (v28)
      {
        uint64_t v10 = v30;
        *(void *)((char *)&v35 + 7) = v26;
        HIBYTE(v35) = v27;
        if (v25)
        {
          *(void *)((char *)&v34 + 7) = v23;
          HIBYTE(v34) = v24;
          long long v11 = v35;
          long long v33 = v35;
          long long v32 = v34;
          long long v12 = v34;
          unsigned char *v3 = v29;
          *(void *)(v3 + 1) = v10;
          *(_OWORD *)(v3 + 9) = v11;
          *(_OWORD *)(v3 + 25) = v12;
          v3[48] = 1;
LABEL_11:
          v3[56] = 1;
          return result;
        }
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v20 = *((void *)a2 + 3);
  if (v20 && v19)
  {
    unint64_t v18 = *(void (**)(void))(*(void *)v20 + 16);
    goto LABEL_31;
  }
LABEL_20:
  unsigned char *v3 = 0;
  v3[56] = 0;
  uint64_t v21 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (unsigned char *)*((void *)a2 + 3);
  if (result && v21)
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v22();
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::PhotoSettings,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 24);

  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 40));
}

uint64_t IPC::ArgumentCoder<WebCore::PhotoSettings,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = IPC::Decoder::decode<std::optional<WebCore::FillLightMode>>(a1);
  IPC::Decoder::decode<std::optional<double>>((IPC::Decoder *)a1, &v9);
  IPC::Decoder::decode<std::optional<double>>((IPC::Decoder *)a1, &v6);
  uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)a1);
  if (!*a1) {
    goto LABEL_9;
  }
  if ((v4 & 0xFF0000) == 0
    || !v11
    || (*(void *)&v13[6] = v9, v13[14] = v10, !v8)
    || (*(void *)((char *)&v12 + 7) = v6, HIBYTE(v12) = v7, (result & 0xFF0000) == 0))
  {
    __break(1u);
LABEL_9:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return result;
  }
  *(_WORD *)a2 = v4;
  *(void *)(a2 + 2) = *(void *)v13;
  *(void *)(a2 + 9) = *(void *)&v13[7];
  *(_OWORD *)(a2 + 17) = v12;
  *(_WORD *)(a2 + 40) = result;
  *(unsigned char *)(a2 + 48) = 1;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::FillLightMode>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::FillLightMode>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CookieStoreGetOptions,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v10);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (*(void *)a1)
  {
    if (v11)
    {
      BOOL v6 = v10;
      char v10 = 0;
      if (v9)
      {
        uint64_t v7 = v8;
        *(void *)a2 = v6;
        *(void *)(a2 + 8) = v7;
        *(unsigned char *)(a2 + 16) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v9)
  {
    uint64_t result = v8;
    char v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_5:
  if (v11)
  {
    uint64_t result = v10;
    char v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A4298(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::CookieChangeSubscription,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v10);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (*(void *)a1)
  {
    if (v11 && v9)
    {
      BOOL v6 = v10;
      char v10 = 0;
      uint64_t v7 = v8;
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = v7;
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_5;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v9)
  {
    uint64_t result = v8;
    char v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_5:
  if (v11)
  {
    uint64_t result = v10;
    char v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A43A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::InspectorOverlayLabel,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v4 = *((unsigned int *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)a2 + 32 * v4;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v5);
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v5 + 8));
      char v10 = *(unsigned char *)(v5 + 16);
      IPC::Encoder::operator<<<BOOL>(a1, &v10);
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(v5 + 24));
      v5 += 32;
    }
    while (v5 != v6);
  }
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[5]);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 6));
  char v8 = *((unsigned char *)a2 + 32);
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  char v9 = *((unsigned char *)a2 + 33);
  return IPC::Encoder::operator<<<BOOL>(a1, &v9);
}

unint64_t IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(a1, a2 + 2);
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 10));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 14));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 18));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 22));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 26));

  return IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 30));
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988A45B4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    goto LABEL_22;
  }
  unint64_t v6 = v4;
  uint64_t v33 = 0;
  long long v34 = 0;
  if (v4 >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayLabel>((uint64_t)&v27, a2);
      if (!v32) {
        goto LABEL_21;
      }
      unsigned int v17 = HIDWORD(v34);
      if (HIDWORD(v34) == v34)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel>((uint64_t)&v33, (unint64_t)&v27);
      }
      else
      {
        uint64_t v19 = v33;
        uint64_t v20 = v33 + 40 * HIDWORD(v34);
        *(void *)uint64_t v20 = 0;
        *(void *)(v20 + 8) = 0;
        uint64_t v21 = v27;
        uint64_t v27 = 0;
        *(void *)uint64_t v20 = v21;
        LODWORD(v21) = v28;
        int v28 = 0;
        *(_DWORD *)(v20 + 8) = v21;
        LODWORD(v21) = v29;
        int v29 = 0;
        *(_DWORD *)(v20 + 12) = v21;
        *(void *)(v20 + 16) = v30;
        WebCore::Color::Color();
        *(_WORD *)(v19 + 40 * v17 + 32) = v31;
        ++HIDWORD(v34);
      }
      std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v18);
      if (!--v6)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v33, HIDWORD(v34));
        uint64_t v22 = v33;
        uint64_t v33 = 0;
        *(void *)a1 = v22;
        int v15 = (int)v34;
        int v14 = HIDWORD(v34);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v34) = 40 * (int)v4 / 0x28u;
    uint64_t v33 = WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayLabel>((uint64_t)&v27, a2);
      if (!v32) {
        break;
      }
      unsigned int v8 = HIDWORD(v34);
      if (HIDWORD(v34) == v34)
      {
        WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayLabel>((uint64_t)&v33, (unint64_t)&v27);
      }
      else
      {
        uint64_t v10 = v33;
        uint64_t v11 = v33 + 40 * HIDWORD(v34);
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        uint64_t v12 = v27;
        uint64_t v27 = 0;
        *(void *)uint64_t v11 = v12;
        LODWORD(v12) = v28;
        int v28 = 0;
        *(_DWORD *)(v11 + 8) = v12;
        LODWORD(v12) = v29;
        int v29 = 0;
        *(_DWORD *)(v11 + 12) = v12;
        *(void *)(v11 + 16) = v30;
        WebCore::Color::Color();
        *(_WORD *)(v10 + 40 * v8 + 32) = v31;
        ++HIDWORD(v34);
      }
      std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v9);
      if (!--v6)
      {
        uint64_t v13 = v33;
        int v15 = (int)v34;
        int v14 = HIDWORD(v34);
        goto LABEL_13;
      }
    }
LABEL_21:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v7);
    WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v23);
LABEL_22:
    uint64_t v24 = *(void *)a2;
    uint64_t v25 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result) {
      BOOL v26 = v25 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    if (!v26) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v24);
    }
    return result;
  }
  int v14 = 0;
  int v15 = 0;
  uint64_t v13 = 0;
LABEL_13:
  uint64_t v33 = 0;
  *(void *)a1 = v13;
LABEL_14:
  long long v34 = 0;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
}

void sub_1988A4884(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  std::__optional_destruct_base<WebCore::InspectorOverlayLabel,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v17);
  WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v18);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  IPC::VectorArgumentCoder<false,WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
  IPC::VectorArgumentCoder<false,WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 5);

  return IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 7));
}

uint64_t IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 24));
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 32));
  char v5 = a2[40];
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::VectorArgumentCoder<false,WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 48));
  IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 64));
  IPC::VectorArgumentCoder<false,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 80));
  return IPC::Encoder::operator<<<BOOL>(a1, a2 + 96);
}

void IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v130);
  if (!v131)
  {
    uint64_t v22 = *v2;
    uint64_t v23 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v24 = v2[3];
    if (v24 && v23 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v128);
  if (!v129)
  {
    uint64_t v26 = *v2;
    uint64_t v27 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v28 = v2[3];
    if (v28)
    {
      if (v27) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v126);
  if (!v127)
  {
    uint64_t v29 = *v2;
    uint64_t v30 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v31 = v2[3];
    if (v31)
    {
      if (v30) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v124);
  if (!v125)
  {
    uint64_t v32 = *v2;
    uint64_t v33 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v34 = v2[3];
    if (v34)
    {
      if (v33) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
      }
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(v2, &v122);
  if (!v123)
  {
    uint64_t v35 = *v2;
    uint64_t v36 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v37 = v2[3];
    if (v37)
    {
      if (v36) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
      }
    }
  }
  LOWORD(v132) = 0;
  IPC::Decoder::operator>><unsigned char>(v2, &v132);
  char v4 = v132;
  if (BYTE1(v132)) {
    BOOL v5 = v132 > 3u;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  if (v6 == 1)
  {
    uint64_t v38 = *v2;
    uint64_t v39 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v40 = v2[3];
    if (v40 && v39) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
    }
    char v4 = 0;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)v2, (uint64_t)&v119);
  unint64_t v7 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v8)
  {
    unint64_t v9 = v7;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    if (v7 >= 0x38E3)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v132, v2);
        if (!(_BYTE)v139) {
          break;
        }
        unsigned int v41 = HIDWORD(v114);
        if (HIDWORD(v114) == v114)
        {
          WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v113, (unint64_t)&v132);
        }
        else
        {
          uint64_t v43 = v113;
          WebCore::Color::Color();
          uint64_t v44 = v43 + 72 * v41;
          *(void *)(v44 + 8) = 0;
          *(void *)(v44 + 16) = 0;
          uint64_t v45 = v133;
          *(void *)&long long v133 = 0;
          *(void *)(v44 + 8) = v45;
          LODWORD(v45) = DWORD2(v133);
          DWORD2(v133) = 0;
          *(_DWORD *)(v44 + 16) = v45;
          LODWORD(v45) = HIDWORD(v133);
          HIDWORD(v133) = 0;
          *(_DWORD *)(v44 + 20) = v45;
          *(void *)(v44 + 24) = 0;
          *(void *)(v44 + 32) = 0;
          uint64_t v46 = v134;
          *(void *)&long long v134 = 0;
          *(void *)(v44 + 24) = v46;
          LODWORD(v46) = DWORD2(v134);
          DWORD2(v134) = 0;
          *(_DWORD *)(v44 + 32) = v46;
          LODWORD(v46) = HIDWORD(v134);
          HIDWORD(v134) = 0;
          *(_DWORD *)(v44 + 36) = v46;
          *(void *)(v44 + 40) = 0;
          *(void *)(v44 + 48) = 0;
          uint64_t v47 = v135;
          uint64_t v135 = 0;
          *(void *)(v44 + 40) = v47;
          LODWORD(v47) = v136;
          LODWORD(v136) = 0;
          *(_DWORD *)(v44 + 48) = v47;
          LODWORD(v47) = HIDWORD(v136);
          HIDWORD(v136) = 0;
          *(_DWORD *)(v44 + 52) = v47;
          *(void *)(v44 + 56) = 0;
          *(void *)(v44 + 64) = 0;
          uint64_t v48 = v137;
          uint64_t v137 = 0;
          *(void *)(v44 + 56) = v48;
          LODWORD(v48) = v138;
          LODWORD(v138) = 0;
          *(_DWORD *)(v44 + 64) = v48;
          LODWORD(v48) = HIDWORD(v138);
          HIDWORD(v138) = 0;
          *(_DWORD *)(v44 + 68) = v48;
          ++HIDWORD(v114);
        }
        std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100](&v132, v42);
        if (!--v9)
        {
          WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v113, HIDWORD(v114));
          uint64_t v49 = v113;
          uint64_t v113 = 0;
          uint64_t v116 = v49;
          unsigned int v21 = v114;
          unsigned int v20 = HIDWORD(v114);
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (!v7)
      {
        unsigned int v20 = 0;
        unsigned int v21 = 0;
        uint64_t v19 = 0;
LABEL_25:
        uint64_t v113 = 0;
        uint64_t v116 = v19;
LABEL_26:
        uint64_t v114 = 0;
        unint64_t v117 = __PAIR64__(v20, v21);
        char v118 = 1;
        WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v8);
        goto LABEL_54;
      }
      LODWORD(v114) = 72 * (int)v7 / 0x48u;
      uint64_t v113 = WTF::fastMalloc((WTF *)(72 * v7));
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v132, v2);
        if (!(_BYTE)v139) {
          break;
        }
        unsigned int v11 = HIDWORD(v114);
        if (HIDWORD(v114) == v114)
        {
          WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::GridHighlightOverlay>((uint64_t)&v113, (unint64_t)&v132);
        }
        else
        {
          uint64_t v13 = v113;
          WebCore::Color::Color();
          uint64_t v14 = v13 + 72 * v11;
          *(void *)(v14 + 8) = 0;
          *(void *)(v14 + 16) = 0;
          uint64_t v15 = v133;
          *(void *)&long long v133 = 0;
          *(void *)(v14 + 8) = v15;
          LODWORD(v15) = DWORD2(v133);
          DWORD2(v133) = 0;
          *(_DWORD *)(v14 + 16) = v15;
          LODWORD(v15) = HIDWORD(v133);
          HIDWORD(v133) = 0;
          *(_DWORD *)(v14 + 20) = v15;
          *(void *)(v14 + 24) = 0;
          *(void *)(v14 + 32) = 0;
          uint64_t v16 = v134;
          *(void *)&long long v134 = 0;
          *(void *)(v14 + 24) = v16;
          LODWORD(v16) = DWORD2(v134);
          DWORD2(v134) = 0;
          *(_DWORD *)(v14 + 32) = v16;
          LODWORD(v16) = HIDWORD(v134);
          HIDWORD(v134) = 0;
          *(_DWORD *)(v14 + 36) = v16;
          *(void *)(v14 + 40) = 0;
          *(void *)(v14 + 48) = 0;
          uint64_t v17 = v135;
          uint64_t v135 = 0;
          *(void *)(v14 + 40) = v17;
          LODWORD(v17) = v136;
          LODWORD(v136) = 0;
          *(_DWORD *)(v14 + 48) = v17;
          LODWORD(v17) = HIDWORD(v136);
          HIDWORD(v136) = 0;
          *(_DWORD *)(v14 + 52) = v17;
          *(void *)(v14 + 56) = 0;
          *(void *)(v14 + 64) = 0;
          uint64_t v18 = v137;
          uint64_t v137 = 0;
          *(void *)(v14 + 56) = v18;
          LODWORD(v18) = v138;
          LODWORD(v138) = 0;
          *(_DWORD *)(v14 + 64) = v18;
          LODWORD(v18) = HIDWORD(v138);
          HIDWORD(v138) = 0;
          *(_DWORD *)(v14 + 68) = v18;
          ++HIDWORD(v114);
        }
        std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100](&v132, v12);
        if (!--v9)
        {
          uint64_t v19 = v113;
          unsigned int v21 = v114;
          unsigned int v20 = HIDWORD(v114);
          goto LABEL_25;
        }
      }
    }
    LOBYTE(v116) = 0;
    char v118 = 0;
    std::__optional_destruct_base<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,false>::~__optional_destruct_base[abi:sn180100](&v132, v10);
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v50);
  }
  else
  {
    LOBYTE(v116) = 0;
    char v118 = 0;
  }
  uint64_t v51 = *v2;
  uint64_t v52 = v2[1];
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v53 = v2[3];
  if (v53 && v52) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v51);
  }
LABEL_54:
  unint64_t v54 = IPC::Decoder::decode<unsigned long long>(v2);
  if ((_BYTE)v55)
  {
    unint64_t v56 = v54;
    uint64_t v151 = 0;
    uint64_t v152 = 0;
    if (v54 >> 1 < 0xF0F)
    {
      if (v54)
      {
        unsigned int v57 = 136 * v54;
        uint64_t v58 = WTF::fastMalloc((WTF *)(136 * v54));
        LODWORD(v152) = v57 / 0x88;
        uint64_t v151 = v58;
        do
        {
          IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v132, v2);
          if (!v150) {
            goto LABEL_80;
          }
          unsigned int v60 = HIDWORD(v152);
          if (HIDWORD(v152) == v152)
          {
            WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v151, (unint64_t)&v132);
          }
          else
          {
            uint64_t v61 = v151;
            WebCore::Color::Color();
            uint64_t v62 = v61 + 136 * v60;
            long long v63 = v133;
            *(_OWORD *)(v62 + 24) = v134;
            *(_OWORD *)(v62 + 8) = v63;
            *(void *)(v62 + 40) = 0;
            *(void *)(v62 + 48) = 0;
            uint64_t v64 = v135;
            uint64_t v135 = 0;
            *(void *)(v62 + 40) = v64;
            LODWORD(v64) = v136;
            LODWORD(v136) = 0;
            *(_DWORD *)(v62 + 48) = v64;
            LODWORD(v64) = HIDWORD(v136);
            HIDWORD(v136) = 0;
            *(_DWORD *)(v62 + 52) = v64;
            *(void *)(v62 + 56) = 0;
            *(void *)(v62 + 64) = 0;
            uint64_t v65 = v137;
            uint64_t v137 = 0;
            *(void *)(v62 + 56) = v65;
            LODWORD(v65) = v138;
            LODWORD(v138) = 0;
            *(_DWORD *)(v62 + 64) = v65;
            LODWORD(v65) = HIDWORD(v138);
            HIDWORD(v138) = 0;
            *(_DWORD *)(v62 + 68) = v65;
            *(void *)(v62 + 72) = 0;
            *(void *)(v62 + 80) = 0;
            unint64_t v66 = v139;
            unint64_t v139 = 0;
            *(void *)(v62 + 72) = v66;
            LODWORD(v66) = v140;
            LODWORD(v140) = 0;
            *(_DWORD *)(v62 + 80) = v66;
            LODWORD(v66) = HIDWORD(v140);
            HIDWORD(v140) = 0;
            *(_DWORD *)(v62 + 84) = v66;
            *(void *)(v62 + 88) = 0;
            *(void *)(v62 + 96) = 0;
            unint64_t v67 = v141;
            unint64_t v141 = 0;
            *(void *)(v62 + 88) = v67;
            LODWORD(v67) = v142;
            int v142 = 0;
            *(_DWORD *)(v62 + 96) = v67;
            LODWORD(v67) = v143;
            int v143 = 0;
            *(_DWORD *)(v62 + 100) = v67;
            *(void *)(v62 + 104) = 0;
            *(void *)(v62 + 112) = 0;
            uint64_t v68 = v144;
            uint64_t v144 = 0;
            *(void *)(v62 + 104) = v68;
            LODWORD(v68) = v145;
            int v145 = 0;
            *(_DWORD *)(v62 + 112) = v68;
            LODWORD(v68) = v146;
            int v146 = 0;
            *(_DWORD *)(v62 + 116) = v68;
            *(void *)(v62 + 120) = 0;
            *(void *)(v62 + 128) = 0;
            uint64_t v69 = v147;
            uint64_t v147 = 0;
            *(void *)(v62 + 120) = v69;
            LODWORD(v69) = v148;
            int v148 = 0;
            *(_DWORD *)(v62 + 128) = v69;
            LODWORD(v69) = v149;
            int v149 = 0;
            *(_DWORD *)(v62 + 132) = v69;
            ++HIDWORD(v152);
          }
          if (v150) {
            WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)&v132, v55);
          }
          --v56;
        }
        while (v56);
        uint64_t v70 = v151;
        int v71 = v152;
      }
      else
      {
        uint64_t v70 = 0;
        int v71 = 0;
      }
      uint64_t v151 = 0;
      uint64_t v152 = 0;
      uint64_t v113 = v70;
      uint64_t v114 = v71;
LABEL_69:
      char v115 = 1;
      uint64_t v72 = WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v55);
      goto LABEL_82;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v132, v2);
      if (!v150) {
        break;
      }
      unsigned int v73 = HIDWORD(v152);
      if (HIDWORD(v152) == v152)
      {
        WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorOverlayHighlight::FlexHighlightOverlay>((uint64_t)&v151, (unint64_t)&v132);
      }
      else
      {
        uint64_t v75 = v151;
        WebCore::Color::Color();
        uint64_t v76 = v75 + 136 * v73;
        long long v77 = v133;
        *(_OWORD *)(v76 + 24) = v134;
        *(_OWORD *)(v76 + 8) = v77;
        *(void *)(v76 + 40) = 0;
        *(void *)(v76 + 48) = 0;
        uint64_t v78 = v135;
        uint64_t v135 = 0;
        *(void *)(v76 + 40) = v78;
        LODWORD(v78) = v136;
        LODWORD(v136) = 0;
        *(_DWORD *)(v76 + 48) = v78;
        LODWORD(v78) = HIDWORD(v136);
        HIDWORD(v136) = 0;
        *(_DWORD *)(v76 + 52) = v78;
        *(void *)(v76 + 56) = 0;
        *(void *)(v76 + 64) = 0;
        uint64_t v79 = v137;
        uint64_t v137 = 0;
        *(void *)(v76 + 56) = v79;
        LODWORD(v79) = v138;
        LODWORD(v138) = 0;
        *(_DWORD *)(v76 + 64) = v79;
        LODWORD(v79) = HIDWORD(v138);
        HIDWORD(v138) = 0;
        *(_DWORD *)(v76 + 68) = v79;
        *(void *)(v76 + 72) = 0;
        *(void *)(v76 + 80) = 0;
        unint64_t v80 = v139;
        unint64_t v139 = 0;
        *(void *)(v76 + 72) = v80;
        LODWORD(v80) = v140;
        LODWORD(v140) = 0;
        *(_DWORD *)(v76 + 80) = v80;
        LODWORD(v80) = HIDWORD(v140);
        HIDWORD(v140) = 0;
        *(_DWORD *)(v76 + 84) = v80;
        *(void *)(v76 + 88) = 0;
        *(void *)(v76 + 96) = 0;
        char v81 = v141;
        unint64_t v141 = 0;
        *(void *)(v76 + 88) = v81;
        LODWORD(v81) = v142;
        int v142 = 0;
        *(_DWORD *)(v76 + 96) = v81;
        LODWORD(v81) = v143;
        int v143 = 0;
        *(_DWORD *)(v76 + 100) = v81;
        *(void *)(v76 + 104) = 0;
        *(void *)(v76 + 112) = 0;
        uint64_t v82 = v144;
        uint64_t v144 = 0;
        *(void *)(v76 + 104) = v82;
        LODWORD(v82) = v145;
        int v145 = 0;
        *(_DWORD *)(v76 + 112) = v82;
        LODWORD(v82) = v146;
        int v146 = 0;
        *(_DWORD *)(v76 + 116) = v82;
        *(void *)(v76 + 120) = 0;
        *(void *)(v76 + 128) = 0;
        uint64_t v83 = v147;
        uint64_t v147 = 0;
        *(void *)(v76 + 120) = v83;
        LODWORD(v83) = v148;
        int v148 = 0;
        *(_DWORD *)(v76 + 128) = v83;
        LODWORD(v83) = v149;
        int v149 = 0;
        *(_DWORD *)(v76 + 132) = v83;
        ++HIDWORD(v152);
      }
      if (v150) {
        WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)&v132, v74);
      }
      if (!--v56)
      {
        WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v151, HIDWORD(v152));
        uint64_t v113 = v151;
        uint64_t v84 = v152;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        uint64_t v114 = v84;
        goto LABEL_69;
      }
    }
LABEL_80:
    LOBYTE(v113) = 0;
    char v115 = 0;
    WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v151, v59);
  }
  else
  {
    LOBYTE(v113) = 0;
    char v115 = 0;
  }
  BOOL v85 = (char *)*v2;
  unint64_t v86 = v2[1];
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v72 = v2[3];
  if (v72) {
    goto LABEL_116;
  }
LABEL_82:
  while (1)
  {
    unint64_t v86 = v2[1];
    BOOL v85 = (char *)*v2;
    unint64_t v87 = v2[2] - *v2;
    if (v86 <= v87) {
      break;
    }
    unint64_t v88 = &v85[v87];
    v2[2] = (uint64_t)(v88 + 1);
    if (!v85)
    {
      uint64_t v108 = v86;
      uint64_t v109 = 0;
      goto LABEL_129;
    }
    unsigned int v89 = *v88;
    if (v89 > 1) {
      goto LABEL_130;
    }
    int v90 = 0;
    BOOL v91 = v89 != 0;
LABEL_86:
    if (v131)
    {
      uint64_t v2 = &v132;
      uint64_t v72 = WebCore::Color::Color();
      if (v129)
      {
        uint64_t v2 = (uint64_t *)&v133;
        uint64_t v72 = WebCore::Color::Color();
        if (v127)
        {
          uint64_t v72 = WebCore::Color::Color();
          if (v125)
          {
            uint64_t v72 = WebCore::Color::Color();
            if (v123)
            {
              uint64_t v72 = WebCore::Color::Color();
              if (!v6)
              {
                LOBYTE(v135) = v4;
                if (v121)
                {
                  uint64_t v136 = v119;
                  uint64_t v92 = v120;
                  uint64_t v119 = 0;
                  uint64_t v120 = 0;
                  uint64_t v137 = v92;
                  if (v118)
                  {
                    uint64_t v138 = v116;
                    unint64_t v93 = v117;
                    uint64_t v116 = 0;
                    unint64_t v117 = 0;
                    unint64_t v139 = v93;
                    if (v115)
                    {
                      uint64_t v140 = v113;
                      unint64_t v94 = v114;
                      uint64_t v113 = 0;
                      uint64_t v114 = 0;
                      unint64_t v141 = v94;
                      if (!v90)
                      {
                        LOBYTE(v142) = v91;
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        WebCore::Color::Color();
                        *(unsigned char *)(a2 + 40) = v135;
                        unint64_t v95 = v136;
                        uint64_t v136 = 0;
                        *(void *)(a2 + 48) = v95;
                        uint64_t v96 = v137;
                        uint64_t v137 = 0;
                        *(void *)(a2 + 56) = v96;
                        uint64_t v97 = v138;
                        uint64_t v138 = 0;
                        *(void *)(a2 + 64) = v97;
                        unint64_t v98 = v139;
                        unint64_t v139 = 0;
                        *(void *)(a2 + 72) = v98;
                        uint64_t v99 = v140;
                        uint64_t v140 = 0;
                        *(void *)(a2 + 80) = v99;
                        int v100 = v141;
                        unint64_t v141 = 0;
                        *(void *)(a2 + 88) = v100;
                        *(unsigned char *)(a2 + 96) = v142;
                        *(unsigned char *)(a2 + 104) = 1;
                        WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)&v132, v101);
                        goto LABEL_97;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_116:
    if (v86) {
      uint64_t v72 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v72 + 16))(v72, v85);
    }
  }
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v110 = v2[3];
  if (v110)
  {
    if (v86)
    {
      (*(void (**)(uint64_t))(*(void *)v110 + 16))(v110);
      uint64_t v109 = *v2;
      uint64_t v108 = v2[1];
    }
    else
    {
      uint64_t v108 = 0;
      uint64_t v109 = 0;
    }
  }
LABEL_129:
  unint64_t v86 = 0;
  BOOL v85 = 0;
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v111 = v2[3];
  if (v111)
  {
    if (v108)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v111 + 16))(v111, v109, v108);
      BOOL v85 = (char *)*v2;
      unint64_t v86 = v2[1];
    }
    else
    {
      unint64_t v86 = 0;
      BOOL v85 = 0;
    }
  }
LABEL_130:
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v112 = v2[3];
  if (v112)
  {
    if (v86)
    {
      uint64_t v72 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v112 + 16))(v112, v85);
      if (*v2)
      {
        BOOL v91 = 0;
        int v90 = 1;
        goto LABEL_86;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 104) = 0;
LABEL_97:
  if (v115) {
    WTF::Vector<WebCore::InspectorOverlayHighlight::FlexHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v85);
  }
  if (v118) {
    WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v85);
  }
  if (v121)
  {
    int v102 = v119;
    if (v119)
    {
      uint64_t v119 = 0;
      LODWORD(v120) = 0;
      WTF::fastFree(v102, v85);
    }
  }
  if (v123)
  {
    if ((v122 & 0x8000000000000) != 0)
    {
      BOOL v103 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v122 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v103);
        WTF::fastFree((WTF *)v103, v85);
      }
    }
  }
  if (v125)
  {
    if ((v124 & 0x8000000000000) != 0)
    {
      uint64_t v104 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v124 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v104);
        WTF::fastFree((WTF *)v104, v85);
      }
    }
  }
  if (v127)
  {
    if ((v126 & 0x8000000000000) != 0)
    {
      BOOL v105 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v126 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v105);
        WTF::fastFree((WTF *)v105, v85);
      }
    }
  }
  if (v129)
  {
    if ((v128 & 0x8000000000000) != 0)
    {
      uint64_t v106 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v128 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v106);
        WTF::fastFree((WTF *)v106, v85);
      }
    }
  }
  if (v131 && (v130 & 0x8000000000000) != 0)
  {
    uint64_t v107 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v130 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v107);
      WTF::fastFree((WTF *)v107, v85);
    }
  }
}

void sub_1988A5734(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, WTF *a19, int a20,int a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a24)
  {
    if ((a23 & 0x8000000000000) != 0)
    {
      unint64_t v55 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, a2);
      }
    }
  }
  if (a26)
  {
    if ((a25 & 0x8000000000000) != 0)
    {
      unint64_t v54 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, a2);
      }
    }
  }
  if (a28)
  {
    if ((a27 & 0x8000000000000) != 0)
    {
      uint64_t v53 = (unsigned int *)(a27 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a27 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v53);
        WTF::fastFree((WTF *)v53, a2);
      }
    }
  }
  if (a30)
  {
    if ((a29 & 0x8000000000000) != 0)
    {
      uint64_t v52 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, a2);
      }
    }
  }
  if (a32 && (a31 & 0x8000000000000) != 0)
  {
    uint64_t v51 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v51);
      WTF::fastFree((WTF *)v51, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DiagnosticLoggingDictionary,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>>(a1, &v6);
  if (*a1)
  {
    if (v7)
    {
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    if (v7)
    {
      uint64_t result = v6;
      if (v6) {
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988A5B70(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(void *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::FontCachePrewarmInformation,void>::decode@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v18);
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)&v15);
  if (*(void *)a1)
  {
    if (v20)
    {
      uint64_t v8 = v18;
      uint64_t v9 = v19;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      if (v17)
      {
        uint64_t v10 = v15;
        uint64_t v15 = 0;
        v13[0] = 0;
        *(void *)a3 = v8;
        v13[1] = 0;
        *(void *)(a3 + 8) = v9;
        v14[0] = 0;
        *(void *)(a3 + 16) = v10;
        v14[1] = 0;
        uint64_t v11 = v16;
        uint64_t v16 = 0;
        *(void *)(a3 + 24) = v11;
        *(unsigned char *)(a3 + 32) = 1;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v7);
        uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v12);
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
LABEL_5:
  if (v17) {
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v7);
  }
  if (v20) {
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
  }
  return result;
}

void sub_1988A5C7C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 24)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 16);
}

uint64_t IPC::ArgumentCoder<WebCore::PrewarmInformation,void>::decode@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::FontCachePrewarmInformation>(a1, a2, (uint64_t)&v14);
  if (!*(void *)a1)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    return std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v6);
  }
  if (v18)
  {
    uint64_t v7 = v14;
    uint64_t v14 = 0;
    uint64_t v8 = v16;
    uint64_t v16 = 0;
    v12[0] = 0;
    *(void *)a3 = v7;
    v12[1] = 0;
    uint64_t v9 = v15;
    uint64_t v15 = 0;
    *(void *)(a3 + 8) = v9;
    v13[0] = 0;
    *(void *)(a3 + 16) = v8;
    v13[1] = 0;
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    *(void *)(a3 + 24) = v10;
    *(unsigned char *)(a3 + 32) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v6);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v11);
    return std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v6);
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::FontCachePrewarmInformation>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FontCachePrewarmInformation,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 32))
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_1988A5E04(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::RemoteUserInputEventData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v5);
  LODWORD(v5) = *(_DWORD *)(a2 + 16);
  IPC::Encoder::operator<<<int>(a1, (int *)&v5);
  LODWORD(v5) = *(_DWORD *)(a2 + 20);
  return IPC::Encoder::operator<<<int>(a1, (int *)&v5);
}

unint64_t *IPC::ArgumentCoder<WebCore::RemoteUserInputEventData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v14);
  uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v7 = *(void *)a1;
    if (!*(void *)a1) {
      break;
    }
    if (v15 && v6)
    {
      *(_OWORD *)a2 = v14;
      *(void *)(a2 + 16) = result;
      LOBYTE(v7) = 1;
      goto LABEL_6;
    }
    __break(1u);
LABEL_8:
    uint64_t v8 = *(void *)a1;
    uint64_t v9 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (v10) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = v6;
      uint64_t v13 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      uint64_t v6 = v12;
      uint64_t result = v13;
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_6:
  *(unsigned char *)(a2 + 24) = v7;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::LinkDecorationFilteringData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v9);
  if (*(void *)a1)
  {
    if (v14 && v12 && v10)
    {
      uint64_t v6 = v13;
      uint64_t v13 = 0;
      uint64_t v7 = v11;
      BOOL v11 = 0;
      uint64_t v8 = v9;
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + 16) = v8;
      *(unsigned char *)(a2 + 24) = 1;
      goto LABEL_6;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v10)
  {
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_6:
  if (v12)
  {
    uint64_t result = v11;
    BOOL v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v14)
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A6070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 24));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v23);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v21);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v19);
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if (v5 <= v7) {
    goto LABEL_22;
  }
  uint64_t v8 = (unsigned __int8 *)v6 + v7;
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v15 = v5;
    uint64_t v16 = 0;
    goto LABEL_23;
  }
  unsigned int v9 = *v8;
  if (v9 > 1) {
    goto LABEL_24;
  }
  int v10 = 0;
  for (BOOL i = v9 != 0; ; BOOL i = 0)
  {
    if (v24)
    {
      char v12 = v23;
      uint64_t v23 = 0;
      if (v22)
      {
        uint64_t v13 = v21;
        unsigned int v21 = 0;
        if (v20)
        {
          char v14 = v19;
          uint64_t v19 = 0;
          if (!v10)
          {
            *(void *)a2 = v12;
            *(void *)(a2 + 8) = v13;
            *(void *)(a2 + 16) = v14;
            *(unsigned char *)(a2 + 24) = i;
            *(unsigned char *)(a2 + 32) = 1;
            goto LABEL_10;
          }
        }
      }
    }
    __break(1u);
LABEL_22:
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
        uint64_t v16 = *(WTF::StringImpl **)a1;
        unint64_t v15 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
LABEL_23:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
        uint64_t v6 = *(WTF::StringImpl **)a1;
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
LABEL_24:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result) {
      break;
    }
    if (!v5) {
      break;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v6);
    if (!*(void *)a1) {
      break;
    }
    int v10 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v20)
  {
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_10:
  if (v22)
  {
    uint64_t result = v21;
    unsigned int v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v24)
  {
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A634C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 16));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 24));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 32));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 40));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 48));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 56));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 64));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 72));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 80));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 96));
  char v4 = *(unsigned char *)(a2 + 98);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A6620);
  }
  *unint64_t v5 = v4 & 1;
  char v7 = *(unsigned char *)(a2 + 98);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A6640);
  }
  *uint64_t v8 = (v7 & 2) != 0;
  char v10 = *(unsigned char *)(a2 + 98);
  BOOL v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A6660);
  }
  *BOOL v11 = (v10 & 4) != 0;
  char v13 = *(unsigned char *)(a2 + 98);
  char v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A6680);
  }
  *char v14 = (v13 & 8) != 0;
  char v16 = *(unsigned char *)(a2 + 98);
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A66A0);
  }
  *uint64_t v17 = (v16 & 0x10) != 0;
  char v19 = *(unsigned char *)(a2 + 98);
  char v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A66C0);
  }
  *char v20 = (v19 & 0x20) != 0;
  char v22 = *(unsigned char *)(a2 + 98);
  uint64_t v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A66E0);
  }
  *uint64_t v23 = (v22 & 0x40) != 0;
  unsigned int v25 = *(unsigned __int8 *)(a2 + 98);
  uint64_t v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A6700);
  }
  *uint64_t v26 = v25 >> 7;
  char v31 = *(unsigned char *)(a2 + 99);
  IPC::Encoder::operator<<<BOOL>(a1, &v31);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 104));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 112));
  if (*(void *)(a2 + 120))
  {
    char v32 = 1;
    uint64_t v30 = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v32);
    return (unsigned char *)IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::encode(v30, *(void *)(a2 + 120));
  }
  else
  {
    uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x1988A6720);
    }
    *uint64_t result = 0;
  }
  return result;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v159 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v160 = v4;
  char v128 = v4;
  uint64_t v157 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v158 = v5;
  char v127 = v5;
  uint64_t v155 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v156 = v6;
  char v126 = v6;
  uint64_t v153 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v154 = v7;
  char v125 = v7;
  uint64_t v151 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v152 = v8;
  char v124 = v8;
  uint64_t v149 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v150 = v9;
  char v123 = v9;
  uint64_t v147 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v148 = v10;
  char v122 = v10;
  uint64_t v145 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v146 = v11;
  char v121 = v11;
  uint64_t v143 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v144 = v12;
  char v120 = v12;
  uint64_t v141 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v142 = v13;
  char v119 = v13;
  uint64_t v139 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v140 = v14;
  char v118 = v14;
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v137);
  uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)IPC::Decoder::decode<unsigned short>(a1);
  int v117 = (int)result;
  unint64_t v16 = a1[1];
  uint64_t v17 = *a1;
  unint64_t v18 = a1[2] - *a1;
  if (v16 <= v18) {
    goto LABEL_88;
  }
  char v19 = (unsigned __int8 *)(v17 + v18);
  uint64_t v20 = v17 + v18 + 1;
  a1[2] = v20;
  if (!v17)
  {
    uint64_t v63 = v16;
    uint64_t v64 = 0;
    goto LABEL_89;
  }
  unsigned int v21 = *v19;
  if (v21 >= 2) {
    goto LABEL_91;
  }
  int v116 = 0;
LABEL_5:
  unint64_t v22 = v20 - v17;
  if (v16 <= v22)
  {
    uint64_t i = 0;
    uint64_t v103 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v103 && v16)
    {
      (*(void (**)(uint64_t))(*(void *)v103 + 16))(v103);
      uint64_t v17 = *a1;
      uint64_t i = a1[1];
    }
    else
    {
      uint64_t v17 = 0;
    }
    goto LABEL_93;
  }
  uint64_t v23 = (unsigned __int8 *)(v17 + v22);
  uint64_t v24 = v17 + v22 + 1;
  a1[2] = v24;
  if (v17)
  {
    unsigned int v25 = *v23;
    if (v25 >= 2) {
      goto LABEL_95;
    }
    int v115 = 0;
LABEL_9:
    unint64_t v26 = v24 - v17;
    if (v16 <= v26)
    {
      uint64_t v71 = 0;
      uint64_t v104 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v104 && v16)
      {
        (*(void (**)(uint64_t))(*(void *)v104 + 16))(v104);
        uint64_t v17 = *a1;
        uint64_t v71 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      goto LABEL_97;
    }
    uint64_t v27 = (unsigned __int8 *)(v17 + v26);
    uint64_t v28 = v17 + v26 + 1;
    a1[2] = v28;
    if (!v17)
    {
      uint64_t v71 = v16;
      goto LABEL_97;
    }
    unsigned int v29 = *v27;
    if (v29 >= 2) {
      goto LABEL_99;
    }
    int v114 = 0;
LABEL_13:
    unint64_t v30 = v28 - v17;
    if (v16 <= v30)
    {
      uint64_t v74 = 0;
      uint64_t v105 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v105 && v16)
      {
        (*(void (**)(uint64_t))(*(void *)v105 + 16))(v105);
        uint64_t v17 = *a1;
        uint64_t v74 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      goto LABEL_101;
    }
    char v31 = (unsigned __int8 *)(v17 + v30);
    uint64_t v32 = v17 + v30 + 1;
    a1[2] = v32;
    if (!v17)
    {
      uint64_t v74 = v16;
      goto LABEL_101;
    }
    unsigned int v33 = *v31;
    if (v33 >= 2) {
      goto LABEL_103;
    }
    int v113 = 0;
LABEL_17:
    unint64_t v34 = v32 - v17;
    if (v16 <= v34)
    {
      uint64_t v77 = 0;
      uint64_t v106 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v106 && v16)
      {
        (*(void (**)(uint64_t))(*(void *)v106 + 16))(v106);
        uint64_t v17 = *a1;
        uint64_t v77 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      goto LABEL_105;
    }
    uint64_t v35 = (unsigned __int8 *)(v17 + v34);
    uint64_t v36 = v17 + v34 + 1;
    a1[2] = v36;
    if (!v17)
    {
      uint64_t v77 = v16;
      goto LABEL_105;
    }
    unsigned int v37 = *v35;
    if (v37 >= 2) {
      goto LABEL_107;
    }
    int v112 = 0;
LABEL_21:
    unint64_t v38 = v36 - v17;
    if (v16 <= v38)
    {
      uint64_t v80 = 0;
      uint64_t v107 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v107 && v16)
      {
        (*(void (**)(uint64_t))(*(void *)v107 + 16))(v107);
        uint64_t v17 = *a1;
        uint64_t v80 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      goto LABEL_109;
    }
    uint64_t v39 = (unsigned __int8 *)(v17 + v38);
    uint64_t v40 = v17 + v38 + 1;
    a1[2] = v40;
    if (!v17)
    {
      uint64_t v80 = v16;
      goto LABEL_109;
    }
    unsigned int v41 = *v39;
    if (v41 >= 2) {
      goto LABEL_111;
    }
    int v111 = 0;
LABEL_25:
    unint64_t v42 = v40 - v17;
    if (v16 <= v42)
    {
      uint64_t v83 = 0;
      uint64_t v108 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v108 && v16)
      {
        (*(void (**)(uint64_t))(*(void *)v108 + 16))(v108);
        uint64_t v17 = *a1;
        uint64_t v83 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      goto LABEL_113;
    }
    uint64_t v43 = (unsigned __int8 *)(v17 + v42);
    uint64_t v44 = v17 + v42 + 1;
    a1[2] = v44;
    if (!v17)
    {
      uint64_t v83 = v16;
      goto LABEL_113;
    }
    unsigned int v45 = *v43;
    if (v45 >= 2) {
      goto LABEL_115;
    }
    int v110 = 0;
LABEL_29:
    unint64_t v46 = v44 - v17;
    if (v16 <= v46)
    {
      uint64_t v86 = 0;
      uint64_t v109 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v109 && v16)
      {
        (*(void (**)(uint64_t))(*(void *)v109 + 16))(v109);
        uint64_t v17 = *a1;
        uint64_t v86 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
      }
      goto LABEL_117;
    }
    uint64_t v47 = (unsigned __int8 *)(v17 + v46);
    a1[2] = (uint64_t)(v47 + 1);
    if (!v17)
    {
      uint64_t v86 = v16;
      goto LABEL_117;
    }
    if (*v47 >= 2u) {
      goto LABEL_119;
    }
    int v48 = 0;
LABEL_33:
    if (v16 > a1[2] - v17)
    {
      uint64_t v49 = (unsigned __int8 *)a1[2];
      a1[2] = (uint64_t)(v49 + 1);
      if (v17)
      {
        if (*v49 < 6u)
        {
          int v50 = 0;
          goto LABEL_37;
        }
        goto LABEL_125;
      }
      uint64_t v90 = 0;
      goto LABEL_124;
    }
    goto LABEL_122;
  }
  for (uint64_t i = v16; ; uint64_t i = 0)
  {
LABEL_93:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v69 = a1[3];
    if (v69 && i)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69 + 16))(v69, v17, i);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_95:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v70 = a1[3];
    if (v70 && v16)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v70 + 16))(v70, v17);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
      int v115 = 1;
      uint64_t v24 = a1[2];
      goto LABEL_9;
    }
    uint64_t v71 = 0;
    uint64_t v17 = 0;
    int v115 = 1;
LABEL_97:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v72 = a1[3];
    if (v72 && v71)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v72 + 16))(v72, v17, v71);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_99:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v73 = a1[3];
    if (v73 && v16)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v17);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
      int v114 = 1;
      uint64_t v28 = a1[2];
      goto LABEL_13;
    }
    uint64_t v74 = 0;
    uint64_t v17 = 0;
    int v114 = 1;
LABEL_101:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v75 = a1[3];
    if (v75 && v74)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v75 + 16))(v75, v17, v74);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_103:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v76 = a1[3];
    if (v76 && v16)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v76 + 16))(v76, v17);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
      int v113 = 1;
      uint64_t v32 = a1[2];
      goto LABEL_17;
    }
    uint64_t v77 = 0;
    uint64_t v17 = 0;
    int v113 = 1;
LABEL_105:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v78 = a1[3];
    if (v78 && v77)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v78 + 16))(v78, v17, v77);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_107:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v79 = a1[3];
    if (v79 && v16)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v79 + 16))(v79, v17);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
      int v112 = 1;
      uint64_t v36 = a1[2];
      goto LABEL_21;
    }
    uint64_t v80 = 0;
    uint64_t v17 = 0;
    int v112 = 1;
LABEL_109:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v81 = a1[3];
    if (v81 && v80)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, v17, v80);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_111:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v82 = a1[3];
    if (v82 && v16)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v17);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
      int v111 = 1;
      uint64_t v40 = a1[2];
      goto LABEL_25;
    }
    uint64_t v83 = 0;
    uint64_t v17 = 0;
    int v111 = 1;
LABEL_113:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v84 = a1[3];
    if (v84 && v83)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v84 + 16))(v84, v17, v83);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_115:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v85 = a1[3];
    if (v85 && v16)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v85 + 16))(v85, v17);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
      int v110 = 1;
      uint64_t v44 = a1[2];
      goto LABEL_29;
    }
    uint64_t v86 = 0;
    uint64_t v17 = 0;
    int v110 = 1;
LABEL_117:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v87 = a1[3];
    if (v87 && v86)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v17, v86);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_119:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v88 = a1[3];
    if (v88)
    {
      if (v16)
      {
        uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v88 + 16))(v88, v17);
        uint64_t v17 = *a1;
        unint64_t v16 = a1[1];
        int v48 = 1;
        goto LABEL_33;
      }
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v16 = 0;
    }
    int v48 = 1;
LABEL_122:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v89 = a1[3];
    if (v89)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v89 + 16))(v89, v17);
        uint64_t v90 = *a1;
        unint64_t v16 = a1[1];
      }
      else
      {
        uint64_t v90 = 0;
      }
    }
    else
    {
      uint64_t v90 = 0;
      unint64_t v16 = 0;
    }
LABEL_124:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v91 = a1[3];
    if (v91 && v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 16))(v91, v90);
    }
LABEL_125:
    uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
    int v50 = 1;
LABEL_37:
    unint64_t v16 = a1[1];
    uint64_t v51 = (WTF::StringImpl *)*a1;
    unint64_t v52 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v16 < v52 || v16 - v52 <= 7)
    {
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v94 = a1[3];
      if (v94)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
          uint64_t v93 = *a1;
          uint64_t v92 = a1[1];
        }
        else
        {
          uint64_t v92 = 0;
          uint64_t v93 = 0;
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)v51 + v52 + 8;
      if (v51)
      {
        int v53 = 0;
        goto LABEL_41;
      }
      uint64_t v92 = v16;
      uint64_t v93 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[3];
    if (result && v92)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(WebCore::AdditionalNetworkLoadMetricsForWebInspector *, uint64_t, uint64_t))(*(void *)result + 16))(result, v93, v92);
      uint64_t v51 = (WTF::StringImpl *)*a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v51 = 0;
    }
    int v53 = 1;
LABEL_41:
    unint64_t v54 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v51;
    if (v16 < v54 || v16 - v54 <= 7)
    {
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v97 = a1[3];
      if (v97)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v97 + 16))(v97);
          uint64_t v96 = *a1;
          uint64_t v95 = a1[1];
        }
        else
        {
          uint64_t v95 = 0;
          uint64_t v96 = 0;
        }
      }
    }
    else
    {
      a1[2] = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v51)
      {
        int v55 = 0;
        goto LABEL_45;
      }
      uint64_t v95 = v16;
      uint64_t v96 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v98 = a1[3];
    if (!v98 || !v95)
    {
      uint64_t v51 = 0;
      unint64_t v16 = 0;
      int v55 = 1;
LABEL_134:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v99 = a1[3];
      if (v99)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v99 + 16))(v99, v51);
          uint64_t v100 = *a1;
          unint64_t v16 = a1[1];
        }
        else
        {
          uint64_t v100 = 0;
        }
      }
      else
      {
        uint64_t v100 = 0;
        unint64_t v16 = 0;
      }
      goto LABEL_136;
    }
    uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v98 + 16))(v98, v96, v95);
    uint64_t v51 = (WTF::StringImpl *)*a1;
    unint64_t v16 = a1[1];
    int v55 = 1;
LABEL_45:
    if (v16 <= a1[2] - (uint64_t)v51) {
      goto LABEL_134;
    }
    unint64_t v56 = (unsigned __int8 *)a1[2];
    a1[2] = (uint64_t)(v56 + 1);
    if (!v51)
    {
      uint64_t v100 = 0;
LABEL_136:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v101 = a1[3];
      if (v101)
      {
        if (v16)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v101 + 16))(v101, v100);
          uint64_t v51 = (WTF::StringImpl *)*a1;
          unint64_t v16 = a1[1];
        }
        else
        {
          uint64_t v51 = 0;
        }
      }
      else
      {
        uint64_t v51 = 0;
        unint64_t v16 = 0;
      }
LABEL_138:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v102 = a1[3];
      if (v102 && v16) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v102 + 16))(v102, v51);
      }
      LOBYTE(v135) = 0;
      unsigned __int8 v136 = 0;
      goto LABEL_140;
    }
    unsigned int v57 = *v56;
    if (v57 >= 2) {
      goto LABEL_138;
    }
    if (!v57)
    {
      uint64_t v135 = 0;
LABEL_50:
      int v58 = 1;
      unsigned __int8 v136 = 1;
      goto LABEL_51;
    }
    uint64_t result = IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::decode((uint64_t)v129, (IPC::Decoder *)a1);
    LOBYTE(v135) = 0;
    unsigned __int8 v136 = 0;
    if (BYTE8(v129[0]))
    {
      unsigned int v57 = 0;
      uint64_t v135 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)&v129[0];
      goto LABEL_50;
    }
LABEL_140:
    uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
    int v58 = 0;
    unsigned int v57 = 1;
LABEL_51:
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 128) = 0;
      goto LABEL_78;
    }
    if (v128
      && v127
      && v126
      && v125
      && v124
      && v123
      && v122
      && v121
      && v120
      && v119
      && v118
      && v138
      && (v117 & 0xFF0000) != 0
      && !v116
      && !v115
      && !v114
      && !v113
      && !v112
      && !v111
      && !v110
      && !v48
      && !v50
      && !v53
      && !v55
      && !v57)
    {
      break;
    }
    __break(1u);
LABEL_88:
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v65 = a1[3];
    if (v65)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
        uint64_t v64 = *a1;
        uint64_t v63 = a1[1];
      }
      else
      {
        uint64_t v63 = 0;
        uint64_t v64 = 0;
      }
    }
LABEL_89:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v66 = a1[3];
    if (v66 && v63)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66 + 16))(v66, v64, v63);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = 0;
    }
LABEL_91:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v67 = a1[3];
    if (v67 && v16)
    {
      uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v67 + 16))(v67, v17);
      uint64_t v17 = *a1;
      unint64_t v16 = a1[1];
      int v116 = 1;
      uint64_t v20 = a1[2];
      goto LABEL_5;
    }
    uint64_t v17 = 0;
    int v116 = 1;
  }
  uint64_t result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)WebCore::NetworkLoadMetrics::NetworkLoadMetrics();
  long long v59 = v129[3];
  *(_OWORD *)(a2 + 32) = v129[2];
  *(_OWORD *)(a2 + 48) = v59;
  *(_OWORD *)(a2 + 64) = v129[4];
  long long v60 = v129[1];
  *(_OWORD *)a2 = v129[0];
  *(_OWORD *)(a2 + 16) = v60;
  uint64_t v61 = v131;
  *(void *)(a2 + 80) = v130;
  *(void *)(a2 + 88) = v61;
  *(_OWORD *)(a2 + 96) = v132;
  uint64_t v62 = v134;
  *(void *)(a2 + 112) = v133;
  *(void *)(a2 + 120) = v62;
  *(unsigned char *)(a2 + 128) = 1;
  int v58 = v136;
LABEL_78:
  if (v58)
  {
    uint64_t result = v135;
    uint64_t v135 = 0;
    if (result) {
      uint64_t result = WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(result);
    }
  }
  if (v138)
  {
    uint64_t result = v137;
    uint64_t v137 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)WTF::StringImpl::destroy(result, v51);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A7884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

unint64_t IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v7 = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, a2 + 40);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, a2 + 56);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 72));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 80));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 88));
  char v4 = *(unsigned char *)(a2 + 96);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::AdditionalNetworkLoadMetricsForWebInspector,void>::decode(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_54;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v25 = v6;
    uint64_t v26 = 0;
    goto LABEL_55;
  }
  unsigned int v9 = *v8;
  if (v9 >= 4) {
    goto LABEL_56;
  }
  for (__int16 i = v9 | 0x100; ; __int16 i = 0)
  {
    __int16 v67 = i;
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v65);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v63);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v61);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v59);
    IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)v58, (uint64_t *)a2);
    unint64_t v6 = *((void *)a2 + 1);
    unint64_t v11 = *(void *)a2;
    unint64_t v12 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
    if (v6 < v12 || v6 - v12 <= 7)
    {
      unint64_t v14 = 0;
      uint64_t v30 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v31 = *((void *)a2 + 3);
      if (v31)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
          uint64_t v30 = *(void *)a2;
          unint64_t v14 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v30 = 0;
        }
      }
    }
    else
    {
      *((void *)a2 + 2) = v11 + v12 + 8;
      if (v11)
      {
        int v13 = 0;
        unint64_t v14 = v11;
        goto LABEL_9;
      }
      unint64_t v14 = v6;
      uint64_t v30 = 0;
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v32 = *((void *)a2 + 3);
    if (v32)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v32 + 16))(v32, v30, v14);
        unint64_t v14 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
        int v13 = 1;
        unint64_t v11 = *(void *)a2;
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v6 = 0;
    unint64_t v11 = 0;
    int v13 = 1;
LABEL_9:
    unint64_t v15 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v11;
    if (v6 < v15 || v6 - v15 <= 7)
    {
      unint64_t v14 = 0;
      uint64_t v33 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v34 = *((void *)a2 + 3);
      if (v34)
      {
        int v54 = v13;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
          uint64_t v33 = *(void *)a2;
          unint64_t v14 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v33 = 0;
        }
        int v13 = v54;
      }
    }
    else
    {
      *((void *)a2 + 2) = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v11)
      {
        int v16 = 0;
        goto LABEL_13;
      }
      unint64_t v14 = v6;
      uint64_t v33 = 0;
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v35 = *((void *)a2 + 3);
    if (v35)
    {
      int v51 = v13;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v14);
        unint64_t v14 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
        int v16 = 1;
        unint64_t v11 = *(void *)a2;
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v11 = 0;
        int v16 = 1;
      }
      int v13 = v51;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v6 = 0;
      unint64_t v11 = 0;
      int v16 = 1;
    }
LABEL_13:
    unint64_t v17 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - v11;
    if (v6 < v17 || v6 - v17 <= 7)
    {
      unint64_t v14 = 0;
      uint64_t v36 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v37 = *((void *)a2 + 3);
      if (v37)
      {
        int v48 = v16;
        int v55 = v13;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          uint64_t v36 = *(void *)a2;
          unint64_t v14 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v14 = 0;
          uint64_t v36 = 0;
        }
        int v13 = v55;
        int v16 = v48;
      }
    }
    else
    {
      unint64_t v18 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      *((void *)a2 + 2) = v18;
      if (v11)
      {
        int v19 = 0;
        goto LABEL_17;
      }
      unint64_t v14 = v6;
      uint64_t v36 = 0;
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v38 = *((void *)a2 + 3);
    if (!v38)
    {
      unint64_t v14 = 0;
      unint64_t v11 = 0;
      int v19 = 1;
      goto LABEL_68;
    }
    int v46 = v16;
    int v52 = v13;
    if (!v14)
    {
      unint64_t v11 = 0;
      int v19 = 1;
      goto LABEL_68;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v14);
    unint64_t v11 = *(void *)a2;
    unint64_t v6 = *((void *)a2 + 1);
    unint64_t v18 = *((void *)a2 + 2);
    int v19 = 1;
    unint64_t v14 = *(void *)a2;
    int v13 = v52;
    int v16 = v46;
LABEL_17:
    unint64_t v20 = v18 - v11;
    if (v6 <= v20) {
      break;
    }
    unsigned int v21 = (unsigned __int8 *)(v11 + v20);
    *((void *)a2 + 2) = v21 + 1;
    if (!v11)
    {
      unint64_t v14 = v6;
      goto LABEL_68;
    }
    if (*v21 > 1u) {
      goto LABEL_70;
    }
    int v22 = 0;
LABEL_21:
    if (HIBYTE(v67) && v66 && v64 && v62 && v60 && v58[32] && !v13 && !v16 && !v19 && !v22)
    {
      WebCore::AdditionalNetworkLoadMetricsForWebInspector::create();
      *(void *)a1 = v57;
      *(unsigned char *)(a1 + 8) = 1;
      goto LABEL_32;
    }
    __break(1u);
LABEL_54:
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v27 = *((void *)a2 + 3);
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v26 = *(void *)a2;
        unint64_t v25 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
LABEL_55:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v28 = *((void *)a2 + 3);
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_56:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v29 = *((void *)a2 + 3);
    if (v29 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v5);
    }
  }
  int v44 = v19;
  int v49 = v16;
  int v56 = v13;
  unint64_t v14 = 0;
  uint64_t v41 = *((void *)a2 + 3);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (v41 && v6)
  {
    (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
    unint64_t v11 = *(void *)a2;
    unint64_t v14 = *((void *)a2 + 1);
  }
  else
  {
    unint64_t v11 = 0;
  }
  int v13 = v56;
  int v16 = v49;
  int v19 = v44;
LABEL_68:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v39 = *((void *)a2 + 3);
  if (v39)
  {
    int v43 = v19;
    int v47 = v16;
    int v53 = v13;
    if (v14)
    {
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v11, v14);
      unint64_t v14 = *(void *)a2;
      unint64_t v6 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v6 = 0;
    }
    int v13 = v53;
    int v16 = v47;
    int v19 = v43;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v14 = 0;
  }
LABEL_70:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v40 = *((void *)a2 + 3);
  if (v40)
  {
    if (v6)
    {
      int v42 = v19;
      int v45 = v16;
      int v50 = v13;
      (*(void (**)(uint64_t, unint64_t))(*(void *)v40 + 16))(v40, v14);
      int v13 = v50;
      int v16 = v45;
      int v19 = v42;
      if (*(void *)a2)
      {
        int v22 = 1;
        goto LABEL_21;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
LABEL_32:
  unint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](v58);
  if (v60)
  {
    unint64_t result = v59;
    long long v59 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v62)
  {
    unint64_t result = v61;
    uint64_t v61 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v64)
  {
    unint64_t result = v63;
    uint64_t v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v66)
  {
    unint64_t result = v65;
    uint64_t v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A81E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](va);
  if (*(unsigned char *)(v11 - 80))
  {
    unint64_t v14 = *(WTF::StringImpl **)(v11 - 88);
    *(void *)(v11 - 88) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v11 - 64))
  {
    unint64_t v15 = *(WTF::StringImpl **)(v11 - 72);
    *(void *)(v11 - 72) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v11 - 48))
  {
    int v16 = *(WTF::StringImpl **)(v11 - 56);
    *(void *)(v11 - 56) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v13);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v11 - 32))
  {
    unint64_t v17 = *(WTF::StringImpl **)(v11 - 40);
    *(void *)(v11 - 40) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

WTF *IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 3);

  return IPC::ArgumentCoder<std::optional<WebCore::NowPlayingInfoArtwork>,void>::encode<IPC::Encoder,std::optional<WebCore::NowPlayingInfoArtwork> const&>(a1, (uint64_t)(a2 + 4));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v56);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v54);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v52);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v50);
  unint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = *(WTF::StringImpl **)a1;
  unint64_t v9 = *((void *)a1 + 2) - *(void *)a1;
  if (v7 <= v9)
  {
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v34 = *((void *)a1 + 3);
    if (v34)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
        uint64_t v33 = *(WTF::StringImpl **)a1;
        unint64_t v32 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
      }
    }
    goto LABEL_80;
  }
  uint64_t v10 = (unsigned __int8 *)v8 + v9;
  *((void *)a1 + 2) = v10 + 1;
  if (!v8)
  {
    unint64_t v32 = v7;
    uint64_t v33 = 0;
LABEL_80:
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v35 = *((void *)a1 + 3);
    if (v35)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
        uint64_t v8 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_81;
  }
  unsigned int v11 = *v10;
  if (v11 >= 2)
  {
LABEL_81:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v36 = *((void *)a1 + 3);
    if (v36 && v7) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v36 + 16))(v36, v8);
    }
    LOBYTE(v45) = 0;
    char v49 = 0;
LABEL_26:
    int v13 = *(WTF::StringImpl **)a1;
    uint64_t v14 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_77;
    }
    goto LABEL_27;
  }
  if (!v11)
  {
    LOBYTE(v40[0]) = 0;
    LOBYTE(v41[1]) = 0;
    LOBYTE(v45) = 0;
    char v48 = 0;
    LOBYTE(v2) = 1;
    char v49 = 1;
    unint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v8);
    int v18 = 0;
    goto LABEL_28;
  }
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v62);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v60);
  unint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::RefPtr<WebCore::Image,WTF::RawPtrTraits<WebCore::Image>,WTF::DefaultRefDerefTraits<WebCore::Image>>>((uint64_t *)a1, &v58);
  uint64_t v2 = *(WTF::StringImpl **)a1;
  if (!*(void *)a1)
  {
    LOBYTE(v40[0]) = 0;
    LOBYTE(v41[1]) = 0;
    if (v59)
    {
      uint64_t v37 = v58;
      int v58 = 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 2) != 1)
        {
          uint64_t v3 = 0;
          --*((_DWORD *)v37 + 2);
          goto LABEL_10;
        }
        (*(void (**)(WTF::StringImpl *))(*(void *)v37 + 8))(v37);
      }
    }
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  if (!v63) {
    goto LABEL_76;
  }
  unint64_t v15 = v62;
  char v62 = 0;
  if (!v61) {
    goto LABEL_76;
  }
  int v16 = v60;
  char v60 = 0;
  if (!v59) {
    goto LABEL_76;
  }
  v40[0] = v15;
  v40[1] = v16;
  v41[0] = v58;
  uint64_t v3 = 1;
  LOBYTE(v41[1]) = 1;
LABEL_10:
  if (v61)
  {
    unint64_t v17 = v60;
    char v60 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  if (v63)
  {
    int v19 = v62;
    char v62 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v13);
        if (v2) {
          goto LABEL_23;
        }
        goto LABEL_89;
      }
      *(_DWORD *)v19 -= 2;
    }
  }
  if (v2) {
    goto LABEL_23;
  }
LABEL_89:
  int v13 = *(WTF::StringImpl **)a1;
  uint64_t v38 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v39 = *((void *)a1 + 3);
  if (v39 && v38)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v13);
    uint64_t v3 = LOBYTE(v41[1]);
  }
LABEL_23:
  if (!v3)
  {
    LOBYTE(v45) = 0;
    char v49 = 0;
    std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v13);
    goto LABEL_26;
  }
  unint64_t v20 = v40[0];
  uint64_t v4 = v40[1];
  v40[0] = 0;
  v40[1] = 0;
  int v45 = v20;
  int v46 = v4;
  uint64_t v3 = (uint64_t)v41[0];
  v41[0] = 0;
  uint64_t v47 = v3;
  char v48 = 1;
  char v49 = 1;
  unint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v13);
  int v18 = 0;
  LOBYTE(v2) = 0;
LABEL_28:
  while (*(void *)a1)
  {
    if (v57)
    {
      unsigned int v21 = v56;
      int v56 = 0;
      v40[0] = v21;
      if (v55)
      {
        int v22 = v54;
        int v54 = 0;
        v40[1] = v22;
        if (v53)
        {
          uint64_t v23 = v52;
          int v52 = 0;
          v41[0] = v23;
          if (v51)
          {
            uint64_t v24 = v50;
            int v50 = 0;
            v41[1] = v24;
            if (!v18)
            {
              LOBYTE(v42) = 0;
              char v44 = 0;
              if ((v2 & 1) == 0)
              {
                unint64_t v25 = v45;
                int v45 = 0;
                int v46 = 0;
                *(void *)&long long v42 = v25;
                *((void *)&v42 + 1) = v4;
                uint64_t v47 = 0;
                uint64_t v43 = v3;
                char v44 = 1;
              }
              *(void *)a2 = v21;
              *(void *)(a2 + 8) = v22;
              *(_OWORD *)uint64_t v40 = 0u;
              *(_OWORD *)uint64_t v41 = 0u;
              *(void *)(a2 + 16) = v23;
              *(void *)(a2 + 24) = v24;
              *(unsigned char *)(a2 + 32) = 0;
              *(unsigned char *)(a2 + 56) = 0;
              if ((v2 & 1) == 0)
              {
                long long v26 = v42;
                long long v42 = 0uLL;
                *(_OWORD *)(a2 + 32) = v26;
                uint64_t v27 = v43;
                uint64_t v43 = 0;
                *(void *)(a2 + 48) = v27;
                *(unsigned char *)(a2 + 56) = 1;
              }
              *(unsigned char *)(a2 + 64) = 1;
              std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v13);
              uint64_t v28 = v41[1];
              v41[1] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2) {
                  WTF::StringImpl::destroy(v28, v13);
                }
                else {
                  *(_DWORD *)v28 -= 2;
                }
              }
              uint64_t v29 = v41[0];
              v41[0] = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2) {
                  WTF::StringImpl::destroy(v29, v13);
                }
                else {
                  *(_DWORD *)v29 -= 2;
                }
              }
              uint64_t v30 = v40[1];
              v40[1] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2) {
                  WTF::StringImpl::destroy(v30, v13);
                }
                else {
                  *(_DWORD *)v30 -= 2;
                }
              }
              uint64_t v31 = v40[0];
              v40[0] = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2) {
                  WTF::StringImpl::destroy(v31, v13);
                }
                else {
                  *(_DWORD *)v31 -= 2;
                }
              }
              goto LABEL_54;
            }
          }
        }
      }
    }
LABEL_76:
    __break(1u);
LABEL_77:
    if (v14) {
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v13);
LABEL_27:
    int v18 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
  if ((v18 & 1) == 0) {
LABEL_54:
  }
    unint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45, v13);
  if (v51)
  {
    unint64_t result = v50;
    int v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v53)
  {
    unint64_t result = v52;
    int v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v55)
  {
    unint64_t result = v54;
    int v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v57)
  {
    unint64_t result = v56;
    int v56 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988A8918(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26)
{
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  if (a24)
  {
    uint64_t v29 = a23;
    a23 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v28);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  if (a26)
  {
    uint64_t v30 = a25;
    a25 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v26 - 120))
  {
    uint64_t v31 = *(WTF::StringImpl **)(v26 - 128);
    *(void *)(v26 - 128) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v28);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v26 - 104))
  {
    unint64_t v32 = *(WTF::StringImpl **)(v26 - 112);
    *(void *)(v26 - 112) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v28);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 64));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 72));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 80));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 88));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 96));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 104));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 105));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 106));
}

uint64_t IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::NowPlayingMetadata>(a1, (uint64_t)&v99);
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (uint64_t *)((char *)v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v92 = 0;
      uint64_t v91 = *v8;
      unint64_t v9 = (unint64_t)v5;
      goto LABEL_8;
    }
    unint64_t v9 = v4;
    int v56 = 0;
    goto LABEL_62;
  }
  while (1)
  {
    unint64_t v9 = 0;
    int v56 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v57 = *((void *)a1 + 3);
    if (v57)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
        int v56 = *(WTF::StringImpl **)a1;
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        int v56 = 0;
      }
    }
LABEL_62:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v58 = *((void *)a1 + 3);
    if (!v58)
    {
      unint64_t v9 = 0;
LABEL_64:
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v91 = 0;
      int v92 = 1;
      goto LABEL_8;
    }
    if (!v9) {
      goto LABEL_64;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v58 + 16))(v58, v56, v9);
    uint64_t v91 = 0;
    unint64_t v9 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v92 = 1;
    uint64_t v5 = *(WTF::StringImpl **)a1;
LABEL_8:
    unint64_t v10 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v4 >= v10 && v4 - v10 > 7)
    {
      unint64_t v12 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)a1 + 2) = v12 + 1;
      if (v5)
      {
        int v90 = 0;
        uint64_t v89 = *v12;
        goto LABEL_15;
      }
      unint64_t v9 = v4;
      char v59 = 0;
    }
    else
    {
      unint64_t v9 = 0;
      char v59 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v60 = *((void *)a1 + 3);
      if (v60)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v60 + 16))(v60);
          char v59 = *(WTF::StringImpl **)a1;
          unint64_t v9 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v9 = 0;
          char v59 = 0;
        }
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v61 = *((void *)a1 + 3);
    if (v61)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v61 + 16))(v61, v59, v9);
        uint64_t v89 = 0;
        unint64_t v9 = *(void *)a1;
        unint64_t v4 = *((void *)a1 + 1);
        int v90 = 1;
        uint64_t v5 = *(WTF::StringImpl **)a1;
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v89 = 0;
    int v90 = 1;
LABEL_15:
    unint64_t v13 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v4 < v13 || v4 - v13 <= 7)
    {
      unint64_t v9 = 0;
      uint64_t v72 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v73 = *((void *)a1 + 3);
      if (v73)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v73 + 16))(v73);
          uint64_t v72 = *(WTF::StringImpl **)a1;
          unint64_t v9 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v9 = 0;
          uint64_t v72 = 0;
        }
      }
    }
    else
    {
      uint64_t v14 = (void *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v15 = (char *)(v14 + 1);
      *((void *)a1 + 2) = v14 + 1;
      if (v5)
      {
        int v16 = 0;
        uint64_t v17 = *v14;
        goto LABEL_19;
      }
      unint64_t v9 = v4;
      uint64_t v72 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v74 = *((void *)a1 + 3);
    if (!v74)
    {
      uint64_t v17 = 0;
      unint64_t v9 = 0;
LABEL_88:
      uint64_t v5 = 0;
      int v88 = 1;
      goto LABEL_89;
    }
    if (!v9)
    {
      uint64_t v17 = 0;
      goto LABEL_88;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v74 + 16))(v74, v72, v9);
    uint64_t v17 = 0;
    uint64_t v5 = *(WTF::StringImpl **)a1;
    unint64_t v4 = *((void *)a1 + 1);
    unint64_t v15 = (char *)*((void *)a1 + 2);
    int v16 = 1;
    unint64_t v9 = *(void *)a1;
LABEL_19:
    int v18 = (char *)(v15 - (char *)v5);
    int v88 = v16;
    if (v4 <= (unint64_t)v18)
    {
      unint64_t v9 = 0;
      uint64_t v82 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v82 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v82 + 16))(v82);
        uint64_t v5 = *(WTF::StringImpl **)a1;
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v5 = 0;
      }
LABEL_89:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v75 = *((void *)a1 + 3);
      if (v75)
      {
        if (v9)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v75 + 16))(v75, v5, v9);
          unsigned int v20 = 0;
          unint64_t v9 = *(void *)a1;
          unint64_t v4 = *((void *)a1 + 1);
          goto LABEL_92;
        }
        unint64_t v4 = 0;
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v9 = 0;
      }
      unsigned int v20 = 0;
      goto LABEL_92;
    }
    int v19 = &v18[(void)v5];
    *((void *)a1 + 2) = v19 + 1;
    if (!v5)
    {
      unint64_t v9 = v4;
      goto LABEL_89;
    }
    unsigned int v20 = *v19;
    if (v20 < 2)
    {
      int v21 = 0;
      char v22 = 1;
      goto LABEL_23;
    }
LABEL_92:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v76 = *((void *)a1 + 3);
    if (v76 && v4) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v76 + 16))(v76, v9);
    }
    char v22 = 0;
    int v21 = 1;
LABEL_23:
    if (v20) {
      char v23 = v22;
    }
    else {
      char v23 = 0;
    }
    uint64_t v24 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(a1);
    unint64_t v4 = *((void *)a1 + 1);
    uint64_t v27 = v26;
    if (!v26)
    {
      char v62 = *(WTF::StringImpl **)a1;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v63 = *((void *)a1 + 3);
      if (!v63 || !v4)
      {
        unint64_t v4 = 0;
        uint64_t v28 = *(WTF::StringImpl **)a1;
LABEL_71:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v64 = *((void *)a1 + 3);
        if (v64)
        {
          uint64_t v81 = v24;
          if (v4)
          {
            (*(void (**)(void, WTF::StringImpl *))(*(void *)v64 + 16))(*((void *)a1 + 3), v28);
            uint64_t v65 = *(WTF::StringImpl **)a1;
            unint64_t v4 = *((void *)a1 + 1);
          }
          else
          {
            uint64_t v65 = 0;
          }
          uint64_t v24 = v81;
        }
        else
        {
          uint64_t v65 = 0;
          unint64_t v4 = 0;
        }
LABEL_73:
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v66 = *((void *)a1 + 3);
        if (v66)
        {
          uint64_t v79 = v24;
          if (v4)
          {
            (*(void (**)(void, WTF::StringImpl *))(*(void *)v66 + 16))(*((void *)a1 + 3), v65);
            unsigned int v32 = 0;
            uint64_t v28 = *(WTF::StringImpl **)a1;
            unint64_t v4 = *((void *)a1 + 1);
          }
          else
          {
            uint64_t v28 = 0;
            unsigned int v32 = 0;
          }
          uint64_t v24 = v79;
        }
        else
        {
          unint64_t v4 = 0;
          uint64_t v28 = 0;
          unsigned int v32 = 0;
        }
        goto LABEL_75;
      }
      uint64_t v80 = v24;
      (*(void (**)(void, WTF::StringImpl *))(*(void *)v63 + 16))(*((void *)a1 + 3), v62);
      uint64_t v24 = v80;
      unint64_t v4 = *((void *)a1 + 1);
    }
    uint64_t v28 = *(WTF::StringImpl **)a1;
    unint64_t v29 = *((void *)a1 + 2) - *(void *)a1;
    if (v4 <= v29) {
      goto LABEL_71;
    }
    uint64_t v30 = (unsigned __int8 *)v28 + v29;
    uint64_t v31 = (uint64_t)v28 + v29 + 1;
    *((void *)a1 + 2) = v31;
    if (!v28)
    {
      uint64_t v65 = 0;
      goto LABEL_73;
    }
    unsigned int v32 = *v30;
    if (v32 < 2)
    {
      int v33 = 0;
      char v34 = 1;
      goto LABEL_31;
    }
LABEL_75:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t v67 = *((void *)a1 + 3);
    if (!v67)
    {
      char v35 = 0;
      uint64_t v28 = 0;
      int v33 = 1;
      goto LABEL_77;
    }
    uint64_t v77 = v24;
    if (!v4)
    {
      char v35 = 0;
      unint64_t v67 = 0;
      uint64_t v28 = 0;
      int v33 = 1;
      goto LABEL_137;
    }
    (*(void (**)(void, WTF::StringImpl *))(*(void *)v67 + 16))(*((void *)a1 + 3), v28);
    char v34 = 0;
    uint64_t v28 = *(WTF::StringImpl **)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v33 = 1;
    uint64_t v31 = *((void *)a1 + 2);
    uint64_t v24 = v77;
LABEL_31:
    if (v32) {
      char v35 = v34;
    }
    else {
      char v35 = 0;
    }
    unint64_t v36 = v31 - (void)v28;
    if (v4 <= v36)
    {
      uint64_t v77 = v24;
      unint64_t v67 = 0;
      uint64_t v83 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v83 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v83 + 16))(v83);
        uint64_t v28 = *(WTF::StringImpl **)a1;
        unint64_t v67 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v28 = 0;
      }
LABEL_137:
      uint64_t v24 = v77;
LABEL_77:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v68 = *((void *)a1 + 3);
      if (v68)
      {
        uint64_t v78 = v24;
        if (v67)
        {
          (*(void (**)(void, WTF::StringImpl *, unint64_t))(*(void *)v68 + 16))(*((void *)a1 + 3), v28, v67);
          unsigned int v39 = 0;
          uint64_t v28 = *(WTF::StringImpl **)a1;
          unint64_t v4 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v4 = 0;
          uint64_t v28 = 0;
          unsigned int v39 = 0;
        }
        uint64_t v24 = v78;
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v28 = 0;
        unsigned int v39 = 0;
      }
      goto LABEL_79;
    }
    uint64_t v37 = (unsigned __int8 *)v28 + v36;
    uint64_t v38 = (uint64_t)v28 + v36 + 1;
    *((void *)a1 + 2) = v38;
    if (!v28)
    {
      unint64_t v67 = v4;
      goto LABEL_77;
    }
    unsigned int v39 = *v37;
    if (v39 < 2)
    {
      int v40 = 0;
      char v41 = 1;
      goto LABEL_38;
    }
LABEL_79:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t v69 = *((void *)a1 + 3);
    if (!v69)
    {
      char v42 = 0;
      uint64_t v28 = 0;
      int v40 = 1;
      goto LABEL_81;
    }
    uint64_t v86 = v24;
    if (!v4)
    {
      char v42 = 0;
      unint64_t v69 = 0;
      uint64_t v28 = 0;
      int v40 = 1;
      goto LABEL_141;
    }
    (*(void (**)(unint64_t, WTF::StringImpl *))(*(void *)v69 + 16))(v69, v28);
    char v41 = 0;
    uint64_t v28 = *(WTF::StringImpl **)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v40 = 1;
    uint64_t v38 = *((void *)a1 + 2);
    uint64_t v24 = v86;
LABEL_38:
    if (v39) {
      char v42 = v41;
    }
    else {
      char v42 = 0;
    }
    unint64_t v43 = v38 - (void)v28;
    if (v4 <= v43)
    {
      uint64_t v86 = v24;
      unint64_t v69 = 0;
      uint64_t v84 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v84 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
        uint64_t v28 = *(WTF::StringImpl **)a1;
        unint64_t v69 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v28 = 0;
      }
LABEL_141:
      uint64_t v24 = v86;
LABEL_81:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v70 = *((void *)a1 + 3);
      if (v70)
      {
        uint64_t v87 = v24;
        if (v69)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v70 + 16))(v70, v28, v69);
          uint64_t v28 = *(WTF::StringImpl **)a1;
          unint64_t v4 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v4 = 0;
          uint64_t v28 = 0;
        }
        uint64_t v24 = v87;
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v28 = 0;
      }
      goto LABEL_83;
    }
    char v44 = (unsigned __int8 *)v28 + v43;
    *((void *)a1 + 2) = v44 + 1;
    if (!v28)
    {
      unint64_t v69 = v4;
      goto LABEL_81;
    }
    unsigned int v45 = *v44;
    if (v45 <= 1)
    {
      int v46 = 0;
      BOOL v47 = v45 != 0;
      goto LABEL_45;
    }
LABEL_83:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v71 = *((void *)a1 + 3);
    if (!v71
      || !v4
      || (uint64_t v85 = v24,
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v71 + 16))(v71, v28),
          uint64_t v24 = v85,
          !*(void *)a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 112) = 0;
      return std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v99, v28);
    }
    BOOL v47 = 0;
    int v46 = 1;
LABEL_45:
    uint64_t v48 = v105;
    if (v105)
    {
      long long v49 = v99;
      long long v50 = v100;
      long long v99 = 0u;
      long long v100 = 0u;
      LOBYTE(v93) = 0;
      char v96 = 0;
      int v51 = v104;
      if (v104)
      {
        uint64_t v52 = v101;
        uint64_t v48 = v102;
        uint64_t v101 = 0;
        uint64_t v102 = 0;
        uint64_t v93 = v52;
        uint64_t v94 = v48;
        uint64_t v25 = v103;
        uint64_t v103 = 0;
        uint64_t v95 = v25;
        char v96 = 1;
      }
      if (!v92)
      {
        *(void *)&long long v97 = v91;
        if (!v90)
        {
          *((void *)&v97 + 1) = v89;
          if (!v88)
          {
            *(void *)uint64_t v98 = v17;
            if (!v21)
            {
              v98[8] = v23;
              if (v27)
              {
                *(void *)&v98[16] = v24;
                if (!v33)
                {
                  v98[24] = v35;
                  if (!v40)
                  {
                    v98[25] = v42;
                    if (!v46) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  v98[26] = v47;
  *(_OWORD *)a2 = v49;
  *(_OWORD *)(a2 + 16) = v50;
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (v51)
  {
    uint64_t v53 = v93;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    *(void *)(a2 + 32) = v53;
    *(void *)(a2 + 40) = v48;
    uint64_t v95 = 0;
    *(void *)(a2 + 48) = v25;
    *(unsigned char *)(a2 + 56) = 1;
  }
  long long v54 = *(_OWORD *)v98;
  *(_OWORD *)(a2 + 64) = v97;
  *(_OWORD *)(a2 + 80) = v54;
  *(_OWORD *)(a2 + 91) = *(_OWORD *)&v98[11];
  *(unsigned char *)(a2 + 112) = 1;
  std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v93, v28);
  return std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v99, v28);
}

void sub_1988A95BC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::NowPlayingMetadata>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::NowPlayingMetadata,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 64))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988A965C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebCore::UserScript,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 48);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 64);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 80));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 81));
  char v4 = *(unsigned char *)(a2 + 82);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

void IPC::ArgumentCoder<WebCore::UserScript,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v28);
  IPC::Decoder::decode<WTF::URL>(a1, v26);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)v24);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5, (uint64_t)v22);
  LOWORD(v21[0]) = 0;
  IPC::Decoder::operator>><BOOL>(a1, v21);
  int v6 = BYTE1(v21[0]);
  if (!BYTE1(v21[0])) {
    goto LABEL_30;
  }
  for (int i = LOBYTE(v21[0]); ; int i = 0)
  {
    unsigned __int16 v8 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
    LOWORD(v21[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a1, v21);
    int v10 = BYTE1(v21[0]);
    if (BYTE1(v21[0]))
    {
      int v11 = LOBYTE(v21[0]);
    }
    else
    {
      unint64_t v9 = *(void **)a1;
      uint64_t v18 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v19 = *((void *)a1 + 3);
      if (v19)
      {
        int v20 = v10;
        if (v18) {
          (*(void (**)(uint64_t, void *))(*(void *)v19 + 16))(v19, v9);
        }
        int v11 = 0;
        int v10 = v20;
      }
      else
      {
        int v11 = 0;
      }
    }
    if (!*(void *)a1) {
      break;
    }
    if (v29 && v27 && v25 && v23 && v6 && v8 > 0xFFu && v10)
    {
      MEMORY[0x19972F8D0](v21, &v28, v26, v24, v22, i != 0, v8 != 0, v11 != 0);
      WebCore::UserScript::UserScript((uint64_t)a2, v21);
      a2[88] = 1;
      WebCore::UserScript::~UserScript((WebCore::UserScript *)v21, v12);
      goto LABEL_14;
    }
    __break(1u);
LABEL_30:
    unint64_t v15 = *(void **)a1;
    uint64_t v16 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17 && v16) {
      (*(void (**)(uint64_t, void *))(*(void *)v17 + 16))(v17, v15);
    }
  }
  *a2 = 0;
  a2[88] = 0;
LABEL_14:
  if (v23) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v9);
  }
  if (v25) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v9);
  }
  if (v27)
  {
    unint64_t v13 = (WTF::StringImpl *)v26[0];
    v26[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  if (v29)
  {
    uint64_t v14 = v28;
    uint64_t v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void sub_1988A993C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  if (a23) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  }
  if (a29) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a25, a2);
  }
  if (*(unsigned char *)(v29 - 72))
  {
    uint64_t v31 = *(WTF::StringImpl **)(v29 - 112);
    *(void *)(v29 - 112) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v29 - 56))
  {
    unsigned int v32 = *(WTF::StringImpl **)(v29 - 64);
    *(void *)(v29 - 64) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::SourceBrush,void>::encode(a1, a2);
  IPC::ArgumentCoder<WebCore::SourceBrush,void>::encode(a1, a2 + 88);
  int v4 = *(_DWORD *)(a2 + 176);
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1988A9BF0);
  }
  *uint64_t v5 = v4;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 180));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 184));
  char v13 = *(unsigned char *)(a2 + 185);
  IPC::Encoder::operator<<<BOOL>(a1, &v13);
  char v14 = *(unsigned char *)(a2 + 186);
  IPC::Encoder::operator<<<BOOL>(a1, &v14);
  char v15 = *(unsigned char *)(a2 + 187);
  IPC::Encoder::operator<<<BOOL>(a1, &v15);
  if (*(unsigned char *)(a2 + 224))
  {
    char v19 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v19);
    if (!*(unsigned char *)(a2 + 224)) {
      goto LABEL_16;
    }
    IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(a1, a2 + 192);
  }
  else
  {
    BOOL v7 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1988A9C10);
    }
    *BOOL v7 = 0;
  }
  if (!*(unsigned char *)(a2 + 320))
  {
    unint64_t v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1988A9C30);
    }
    *unint64_t v9 = 0;
    goto LABEL_8;
  }
  char v20 = 1;
  IPC::Encoder::operator<<<BOOL>(a1, &v20);
  if (*(unsigned char *)(a2 + 320))
  {
    IPC::Encoder::operator<<<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(a1, a2 + 232);
LABEL_8:
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 328));
    char v16 = *(unsigned char *)(a2 + 332);
    IPC::Encoder::operator<<<BOOL>(a1, &v16);
    char v17 = *(unsigned char *)(a2 + 333);
    IPC::Encoder::operator<<<BOOL>(a1, &v17);
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 334));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 335));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 336));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 337));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 338));
    IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 339));
    char v18 = *(unsigned char *)(a2 + 340);
    return IPC::Encoder::operator<<<BOOL>(a1, &v18);
  }
LABEL_16:
  uint64_t v12 = std::__throw_bad_optional_access[abi:sn180100]();
  return std::optional<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>::~optional(v12);
}

uint64_t std::optional<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>::~optional(uint64_t result)
{
  if (*(unsigned char *)(result + 96) && *(unsigned char *)(result + 88))
  {
    uint64_t v2 = result;
    uint64_t v1 = *(unsigned int *)(result + 80);
    if (v1 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9B40F0[v1])(&v3, result);
    }
    unint64_t result = v2;
    *(_DWORD *)(v2 + 80) = -1;
  }
  return result;
}

uint64_t std::optional<std::optional<WebCore::GraphicsDropShadow>>::~optional(uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 40))
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((v2 & 0x8000000000000) != 0)
      {
        char v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v3);
          uint64_t v4 = result;
          WTF::fastFree((WTF *)v3, a2);
          return v4;
        }
      }
    }
  }
  return result;
}

uint64_t *std::optional<WebCore::SourceBrush>::~optional(uint64_t *a1, void *a2)
{
  if (*((unsigned char *)a1 + 88))
  {
    uint64_t v3 = *((unsigned int *)a1 + 20);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9B40C0[v3])(&v7, a1 + 2);
    }
    *((_DWORD *)a1 + 20) = -1;
    uint64_t v4 = *a1;
    if ((*a1 & 0x8000000000000) != 0)
    {
      unint64_t v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  return a1;
}

uint64_t *IPC::ArgumentCoder<WebCore::SourceBrushLogicalGradient,void>::encode(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_27;
    }
    uint64_t v6 = *(void *)a2;
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)a2;
  if (*(unsigned char *)(*(void *)a2 + 40))
  {
    uint64_t v6 = *(void *)(v5 + 32);
LABEL_4:
    uint64_t v18 = v6;
    int v7 = 1;
    goto LABEL_5;
  }
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v18, v5);
  int v7 = 0;
LABEL_5:
  int v19 = v7;
  unint64_t v8 = a1[2];
  if (v8 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v8++) = v7;
    a1[2] = v8;
  }
  if (!v7)
  {
    if (!v19)
    {
      IPC::ArgumentCoder<WebCore::Gradient,void>::encode(a1, v18);
      goto LABEL_16;
    }
    goto LABEL_26;
  }
  if (v19 != 1)
  {
LABEL_26:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_27:
    char v17 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    if (v19 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9B4CA0[v19])(&v20, &v18);
    }
    _Unwind_Resume(v17);
  }
  unint64_t v9 = *a1 + v8;
  unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v11 = v10 >= v9;
  unint64_t v12 = v10 - v9;
  if (v11)
  {
    unint64_t v13 = v12 + v8;
    unint64_t v14 = v13 + 8;
    if (v13 > 0xFFFFFFFFFFFFFFF7 || v14 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v13) = v18;
      a1[2] = v14;
    }
  }
LABEL_16:
  if (v19 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9B4CA0[v19])(&v20, &v18);
  }
  return IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (void *)(a2 + 16));
}

WTF *IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[120])
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988A9F60(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 120))
  {
    if (*((unsigned char *)v2 + 112)) {
      WebCore::TextIndicatorData::~TextIndicatorData(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::DragItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::TextIndicatorData>,void>::encode<IPC::Encoder,std::optional<WebCore::TextIndicatorData> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::Path>,void>::encode<IPC::Encoder,std::optional<WebCore::Path> const&>(a1, (unsigned __int8 *)(a2 + 128));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 208));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 212));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 216);
  int v5 = *(_DWORD *)(a2 + 220);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 224);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 228);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 232);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 236);
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = *(_DWORD *)(a2 + 240);
  IPC::Encoder::operator<<<int>(a1, &v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 248));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 256));
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 296));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 312));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 320));
  return IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 328));
}

void IPC::ArgumentCoder<WebCore::DragItem,void>::decode(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>(a1, &v105);
  uint64_t v4 = IPC::Decoder::decode<std::optional<WebCore::Path>>(&v148, v2);
  if (*v2)
  {
    if (!v116 || !v153) {
      goto LABEL_115;
    }
    uint64_t v117 = 0;
    std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v118, (uint64_t)&v105);
    std::__optional_move_base<WebCore::Path,false>::__optional_move_base[abi:sn180100](v119, (uint64_t)&v148);
    MEMORY[0x19973BA40](v146, &v117);
    char v147 = 1;
    WebCore::DragImage::~DragImage((WebCore::DragImage *)&v117);
  }
  else
  {
    v146[0] = 0;
    char v147 = 0;
  }
  if (v153 && v152 && v151 != -1) {
    ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v151])(&v117, (char *)&v148 + 8);
  }
  if (v116 && v115)
  {
    if ((v114 & 0x8000000000000) != 0)
    {
      uint64_t v94 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v94);
        WTF::fastFree((WTF *)v94, v5);
      }
    }
    BOOL v7 = v113;
    int v113 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    unint64_t v8 = v112;
    int v112 = 0;
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      else {
        --v8[2];
      }
    }
    unint64_t v9 = v111;
    int v111 = 0;
    if (v9)
    {
      if (v9[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    unint64_t v10 = v109;
    if (v109)
    {
      uint64_t v109 = 0;
      int v110 = 0;
      WTF::fastFree(v10, v5);
    }
  }
  if (!v147)
  {
    unint64_t v66 = *v2;
    unint64_t v67 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v68 = v2[3];
    if (v68)
    {
      if (v67) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v68 + 16))(v68, v66);
      }
    }
  }
  long long v99 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(v2);
  uint64_t v100 = v11;
  if (!v11)
  {
    unint64_t v69 = *v2;
    unint64_t v70 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v71 = v2[3];
    if (v71)
    {
      if (v70) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v71 + 16))(v71, v69);
      }
    }
  }
  unint64_t v12 = v2[1];
  unint64_t v13 = *v2;
  unint64_t v14 = v2[2] - *v2;
  if (v12 <= v14)
  {
    unint64_t v72 = 0;
    unint64_t v73 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v74 = v2[3];
    if (v74)
    {
      if (v12)
      {
        (*(void (**)(unint64_t))(*(void *)v74 + 16))(v74);
        unint64_t v73 = *v2;
        unint64_t v72 = v2[1];
      }
      else
      {
        unint64_t v72 = 0;
        unint64_t v73 = 0;
      }
    }
    goto LABEL_126;
  }
  char v15 = (unsigned __int8 *)(v13 + v14);
  v2[2] = (unint64_t)(v15 + 1);
  if (!v13)
  {
    unint64_t v72 = v12;
    unint64_t v73 = 0;
LABEL_126:
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v75 = v2[3];
    if (v75)
    {
      if (v72)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v75 + 16))(v75, v73, v72);
        unint64_t v13 = *v2;
        unint64_t v12 = v2[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
    goto LABEL_127;
  }
  unsigned int v16 = *v15;
  if (v16 >= 2)
  {
LABEL_127:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v76 = v2[3];
    if (v76 && v12) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v76 + 16))(v76, v13);
    }
    unsigned int i = 0;
    int v17 = 0;
    int v19 = 0;
    goto LABEL_40;
  }
  if (v16)
  {
    LOWORD(v117) = 0;
    IPC::Decoder::operator>><unsigned char>(v2, &v117);
    if (!BYTE1(v117)
      || (int v17 = v117, v18 = v117 - 1, v18 > 0x3F)
      || ((1 << v18) & 0x800000008000808BLL) == 0)
    {
      int v5 = (void *)*v2;
      unint64_t v6 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v4 = v2[3];
      if (v4) {
        goto LABEL_116;
      }
      goto LABEL_39;
    }
    int v19 = 256;
  }
  else
  {
    int v17 = 0;
    int v19 = 0;
  }
  for (unsigned int i = 0x10000; ; unsigned int i = 0)
  {
LABEL_40:
    if (!HIWORD(i))
    {
      unint64_t v77 = *v2;
      unint64_t v78 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v79 = v2[3];
      if (v79)
      {
        if (v78) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v79 + 16))(v79, v77);
        }
      }
    }
    int v21 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v2);
    uint64_t v23 = v22;
    if (!v22)
    {
      unint64_t v80 = *v2;
      unint64_t v81 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v82 = v2[3];
      if (v82)
      {
        if (v81) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v82 + 16))(v82, v80);
        }
      }
    }
    uint64_t v24 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v2);
    uint64_t v26 = v25;
    if (!v25)
    {
      unint64_t v83 = *v2;
      unint64_t v84 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v85 = v2[3];
      if (v85)
      {
        if (v84) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v85 + 16))(v85, v83);
        }
      }
    }
    char v27 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v2);
    uint64_t v97 = v28;
    if (!v28)
    {
      unint64_t v86 = *v2;
      unint64_t v87 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v88 = v2[3];
      if (v88)
      {
        if (v87) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v88 + 16))(v88, v86);
        }
      }
    }
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v103);
    IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v2, &v105);
    IPC::Decoder::decode<WebCore::IntRect>(v2, (uint64_t)&v101);
    unint64_t v29 = v2[1];
    unint64_t v30 = *v2;
    unint64_t v31 = v2[2] - *v2;
    uint64_t v95 = v27;
    char v96 = v24;
    uint64_t v98 = v26;
    if (v29 <= v31)
    {
      unint64_t v89 = 0;
      unint64_t v90 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v91 = v2[3];
      if (v91)
      {
        if (v29)
        {
          (*(void (**)(unint64_t))(*(void *)v91 + 16))(v91);
          unint64_t v90 = *v2;
          unint64_t v89 = v2[1];
        }
        else
        {
          unint64_t v89 = 0;
          unint64_t v90 = 0;
        }
      }
    }
    else
    {
      unsigned int v32 = i;
      int v33 = v21;
      int v34 = v19;
      int v35 = v17;
      unint64_t v36 = (unsigned __int8 *)(v30 + v31);
      v2[2] = (unint64_t)(v36 + 1);
      if (v30)
      {
        unsigned int v37 = *v36;
        if (v37 < 2)
        {
          int v38 = 0;
          char v39 = 1;
          goto LABEL_48;
        }
        goto LABEL_145;
      }
      unint64_t v89 = v29;
      unint64_t v90 = 0;
      int v21 = v33;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v92 = v2[3];
    if (!v92)
    {
      unsigned int v32 = i;
      int v33 = v21;
      int v34 = v19;
      int v35 = v17;
LABEL_144:
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unsigned int v37 = 0;
      goto LABEL_145;
    }
    unsigned int v32 = i;
    int v33 = v21;
    int v34 = v19;
    int v35 = v17;
    if (!v89) {
      goto LABEL_144;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v92 + 16))(v92, v90, v89);
    unsigned int v37 = 0;
    unint64_t v30 = *v2;
    unint64_t v29 = v2[1];
LABEL_145:
    *uint64_t v2 = 0;
    v2[1] = 0;
    unint64_t v93 = v2[3];
    if (v93 && v29) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v93 + 16))(v93, v30);
    }
    char v39 = 0;
    int v38 = 1;
LABEL_48:
    if (v37) {
      char v40 = v39;
    }
    else {
      char v40 = 0;
    }
    uint64_t v4 = (uint64_t)IPC::Decoder::decode<WebCore::PromisedAttachmentInfo>((IPC::Decoder *)v2, (uint64_t)&v148);
    if (!*v2)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 512) = 0;
      goto LABEL_102;
    }
    if (v147)
    {
      uint64_t v4 = MEMORY[0x19973BA40](&v117, v146);
      if (v100)
      {
        *(void *)char v120 = v99;
        if ((v35 | v32 | v34) >> 16)
        {
          *(_WORD *)&v120[8] = v35 | v32 | v34;
          if (v23)
          {
            *(void *)&v120[12] = v33;
            if (v98)
            {
              *(void *)&v120[20] = v96;
              if (v97)
              {
                *(void *)&v120[28] = v95;
                if (v104)
                {
                  char v41 = v103;
                  uint64_t v103 = 0;
                  char v121 = v41;
                  if (v108)
                  {
                    char v42 = v105;
                    unsigned __int8 v105 = 0;
                    char v122 = v42;
                    long long v123 = v106;
                    long long v124 = v107;
                    LODWORD(v106) = v106 & 0xFFFFFFFE;
                    if (v102)
                    {
                      uint64_t v2 = (unint64_t *)&v125;
                      long long v125 = v101;
                      if (!v38)
                      {
                        char v126 = v40;
                        if (v150) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_115:
    __break(1u);
LABEL_116:
    if (v6) {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v5);
    }
LABEL_39:
    int v17 = 0;
    int v19 = 256;
  }
  long long v43 = v148;
  long long v148 = 0uLL;
  long long v127 = v43;
  *(void *)&long long v43 = v149;
  uint64_t v149 = 0;
  uint64_t v128 = v43;
  WebCore::PasteboardWriterData::PasteboardWriterData((WebCore::PasteboardWriterData *)v129);
  MEMORY[0x19973BA40](a2, &v117);
  long long v44 = *(_OWORD *)&v120[16];
  *(_OWORD *)(a2 + 208) = *(_OWORD *)v120;
  *(_OWORD *)(a2 + 224) = v44;
  *(_DWORD *)(a2 + 240) = *(_DWORD *)&v120[32];
  unsigned int v45 = v121;
  char v121 = 0;
  *(void *)(a2 + 248) = v45;
  WTF::URL::URL(a2 + 256, (uint64_t *)&v122);
  *(_OWORD *)(a2 + 296) = v125;
  *(unsigned char *)(a2 + 312) = v126;
  long long v46 = v127;
  long long v127 = 0uLL;
  *(_OWORD *)(a2 + 320) = v46;
  *(void *)&long long v46 = v128;
  uint64_t v128 = 0;
  *(void *)(a2 + 336) = v46;
  *(unsigned char *)(a2 + 344) = 0;
  *(unsigned char *)(a2 + 360) = 0;
  if (v131)
  {
    *(unsigned char *)(a2 + 344) = v129[0];
    BOOL v47 = v130;
    if (v130) {
      *v130 += 2;
    }
    *(void *)(a2 + 352) = v47;
    *(unsigned char *)(a2 + 360) = 1;
  }
  *(unsigned char *)(a2 + 368) = 0;
  *(unsigned char *)(a2 + 416) = 0;
  if (v136)
  {
    uint64_t v48 = v132;
    if (v132) {
      *v132 += 2;
    }
    *(void *)(a2 + 368) = v48;
    long long v49 = v134;
    *(_OWORD *)(a2 + 376) = v133;
    *(_OWORD *)(a2 + 392) = v49;
    long long v50 = v135;
    if (v135) {
      *v135 += 2;
    }
    *(void *)(a2 + 408) = v50;
    *(unsigned char *)(a2 + 416) = 1;
  }
  *(unsigned char *)(a2 + 424) = 0;
  *(unsigned char *)(a2 + 504) = 0;
  if (v145[16])
  {
    int v51 = v137;
    if (v137) {
      *v137 += 2;
    }
    *(void *)(a2 + 424) = v51;
    *(unsigned char *)(a2 + 432) = v138;
    uint64_t v52 = v139;
    if (v139) {
      atomic_fetch_add(v139, 1u);
    }
    *(void *)(a2 + 440) = v52;
    uint64_t v53 = v140;
    if (v140) {
      atomic_fetch_add(v140, 1u);
    }
    *(void *)(a2 + 448) = v53;
    long long v54 = v141;
    if (v141) {
      atomic_fetch_add(v141, 1u);
    }
    *(void *)(a2 + 456) = v54;
    char v55 = v142;
    if (v142) {
      atomic_fetch_add(v142, 1u);
    }
    *(void *)(a2 + 464) = v55;
    int v56 = v143;
    if (v143) {
      *v143 += 2;
    }
    *(void *)(a2 + 472) = v56;
    uint64_t v57 = v144;
    if (v144) {
      *v144 += 2;
    }
    *(void *)(a2 + 480) = v57;
    WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2 + 488, (uint64_t)v145);
    *(unsigned char *)(a2 + 504) = 1;
  }
  *(unsigned char *)(a2 + 512) = 1;
  MEMORY[0x199735300](v129);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v127 + 8, v58);
  uint64_t v60 = (WTF::StringImpl *)v127;
  *(void *)&long long v127 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2) {
      WTF::StringImpl::destroy(v60, v59);
    }
    else {
      *(_DWORD *)v60 -= 2;
    }
  }
  uint64_t v61 = v122;
  char v122 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, v59);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
  char v62 = v121;
  char v121 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2) {
      WTF::StringImpl::destroy(v62, v59);
    }
    else {
      *(_DWORD *)v62 -= 2;
    }
  }
  WebCore::DragImage::~DragImage((WebCore::DragImage *)&v117);
LABEL_102:
  std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v148, v5);
  if (v108)
  {
    uint64_t v64 = v105;
    unsigned __int8 v105 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, v63);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
  if (v104)
  {
    uint64_t v65 = v103;
    uint64_t v103 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2) {
        WTF::StringImpl::destroy(v65, v63);
      }
      else {
        *(_DWORD *)v65 -= 2;
      }
    }
  }
  if (v147) {
    WebCore::DragImage::~DragImage((WebCore::DragImage *)v146);
  }
}

void sub_1988AAC1C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x3A8])) {
    WebCore::DragImage::~DragImage((WebCore::DragImage *)&STACK[0x2D8]);
  }
  _Unwind_Resume(a1);
}

void sub_1988AB0C4()
{
}

void sub_1988AB1E8()
{
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::PromisedAttachmentInfo>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::PromisedAttachmentInfo,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988AB260(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::Filter,void>::encode(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(a2 + 48) == 1)
  {
    char v5 = 1;
    IPC::Encoder::operator<<<BOOL>(result, &v5);
    return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(v3, a2);
  }
  else if (!*(unsigned char *)(a2 + 48))
  {
    char v4 = 0;
    IPC::Encoder::operator<<<BOOL>(result, &v4);
    return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(v3, a2);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::Filter,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) == 1)
  {
    unint64_t v2 = *((void *)a1 + 2);
    if (v2 >= *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(unsigned char *)(*(void *)a1 + v2) = 1;
      *((void *)a1 + 2) = v2 + 1;
    }
    JUMPOUT(0x1988AC364);
  }
  if (!*(unsigned char *)(a2 + 48))
  {
    unint64_t v3 = *((void *)a1 + 2);
    if (v3 >= *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(unsigned char *)(*(void *)a1 + v3) = 0;
      *((void *)a1 + 2) = v3 + 1;
    }
    return (WTF::StringImpl *)IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(a1, a2);
  }
  return a1;
}

uint64_t *IPC::ArgumentCoder<WebCore::Filter,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = (uint64_t *)IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(a1);
  unsigned __int16 v6 = (unsigned __int16)result;
  if ((unsigned __int16)result <= 0xFFu) {
    unint64_t result = (uint64_t *)IPC::Decoder::markInvalid(a1);
  }
  if (!*(void *)a1) {
    goto LABEL_13;
  }
  if (v6 >= 0x100u && !(_BYTE)v6)
  {
    unint64_t result = (uint64_t *)IPC::Decoder::decode<WTF::Ref<WebCore::CSSFilter,WTF::RawPtrTraits<WebCore::CSSFilter>,WTF::DefaultRefDerefTraits<WebCore::CSSFilter>>>(a1, v5, (uint64_t)&v10);
    if (*(void *)a1)
    {
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v9 = v10;
      uint64_t v10 = 0;
      *(void *)a2 = v9;
      *(unsigned char *)(a2 + 8) = 1;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      if (!v11) {
        return result;
      }
    }
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v10, v7);
  }
  if (v6 < 0x100u || v6 != 1)
  {
LABEL_13:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    return result;
  }
  unint64_t result = (uint64_t *)IPC::Decoder::decode<WTF::Ref<WebCore::SVGFilter,WTF::RawPtrTraits<WebCore::SVGFilter>,WTF::DefaultRefDerefTraits<WebCore::SVGFilter>>>((unint64_t *)a1, (uint64_t)&v10);
  if (!*(void *)a1) {
    goto LABEL_19;
  }
  if (v11)
  {
    uint64_t v8 = v10;
    uint64_t v10 = 0;
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
    return WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v10, v7);
  }
LABEL_18:
  __break(1u);
LABEL_19:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v11) {
    return WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v10, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::CSSFilter,WTF::RawPtrTraits<WebCore::CSSFilter>,WTF::DefaultRefDerefTraits<WebCore::CSSFilter>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  unsigned __int16 v6 = *(char **)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v37 = 0;
    int v38 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v39 = *((void *)a1 + 3);
    if (v39)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v39 + 16))(v39, v6, v5);
        int v38 = *(char **)a1;
        unint64_t v37 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v37 = 0;
        int v38 = 0;
      }
    }
    goto LABEL_44;
  }
  uint64_t v9 = (unint64_t *)&v6[v7];
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    long long v46 = 0;
    uint64_t v47 = 0;
    if (v10 < 0x20000)
    {
      if (!v10)
      {
        unsigned int v18 = 0;
        uint64_t v19 = 0;
LABEL_19:
        long long v46 = 0;
        uint64_t v47 = 0;
        long long v49 = v18;
        uint64_t v50 = v19;
LABEL_20:
        char v51 = 1;
        WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, a2);
        goto LABEL_30;
      }
      LODWORD(v47) = v10;
      long long v46 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
      while (1)
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>>(&v52, a1);
        if (!(_BYTE)v53) {
          goto LABEL_28;
        }
        int v11 = HIDWORD(v47);
        if (HIDWORD(v47) == v47)
        {
          unint64_t v12 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v46, HIDWORD(v47) + 1, (unint64_t)&v52);
          uint64_t v13 = HIDWORD(v47);
          int v14 = HIDWORD(v47) + 1;
          char v15 = v46;
          uint64_t v16 = *v12;
          *unint64_t v12 = 0;
          *((void *)v15 + v13) = v16;
          HIDWORD(v47) = v14;
          if (!(_BYTE)v53) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v17 = (uint64_t)v52;
          uint64_t v52 = 0;
          *((void *)v46 + HIDWORD(v47)) = v17;
          HIDWORD(v47) = v11 + 1;
        }
        WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v52, a2);
LABEL_16:
        if (!--v10)
        {
          unsigned int v18 = v46;
          uint64_t v19 = v47;
          goto LABEL_19;
        }
      }
    }
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>>(&v52, a1);
      if (!(_BYTE)v53)
      {
LABEL_28:
        LOBYTE(v49) = 0;
        char v51 = 0;
        WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, a2);
        goto LABEL_29;
      }
      int v20 = HIDWORD(v47);
      if (HIDWORD(v47) == v47)
      {
        int v21 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v46, HIDWORD(v47) + 1, (unint64_t)&v52);
        uint64_t v22 = HIDWORD(v47);
        int v23 = HIDWORD(v47) + 1;
        uint64_t v24 = v46;
        uint64_t v25 = *v21;
        *int v21 = 0;
        *((void *)v24 + v22) = v25;
        HIDWORD(v47) = v23;
        if (!(_BYTE)v53) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v26 = (uint64_t)v52;
        uint64_t v52 = 0;
        *((void *)v46 + HIDWORD(v47)) = v26;
        HIDWORD(v47) = v20 + 1;
      }
      WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref((uint64_t *)&v52, a2);
LABEL_26:
      if (!--v10)
      {
        long long v43 = v46;
        if (v47 > HIDWORD(v47))
        {
          if (HIDWORD(v47))
          {
            LODWORD(v47) = HIDWORD(v47);
            long long v43 = (WTF *)WTF::fastRealloc(v46, (void *)(8 * HIDWORD(v47)));
          }
          else if (v46)
          {
            long long v46 = 0;
            LODWORD(v47) = 0;
            WTF::fastFree(v43, a2);
            long long v43 = v46;
          }
        }
        long long v49 = v43;
        uint64_t v44 = v47;
        long long v46 = 0;
        uint64_t v47 = 0;
        uint64_t v50 = v44;
        goto LABEL_20;
      }
    }
  }
  unint64_t v37 = v5;
  int v38 = 0;
LABEL_44:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v40 = *((void *)a1 + 3);
  if (v40 && v37) {
    (*(void (**)(uint64_t, char *))(*(void *)v40 + 16))(v40, v38);
  }
  LOBYTE(v49) = 0;
  char v51 = 0;
LABEL_29:
  char v27 = *(char **)a1;
  uint64_t v28 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result) {
    goto LABEL_41;
  }
LABEL_30:
  while (1)
  {
    unsigned __int16 v30 = IPC::Decoder::decode<WTF::OptionSet<WebCore::FilterRenderingMode>>(a1);
    unint64_t v31 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    char v33 = v32;
    uint64_t v52 = v31;
    int v53 = v32;
    uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a1, (uint64_t)&v46);
    int v34 = *(char **)a1;
    if (!*(void *)a1) {
      break;
    }
    if (v51 && v30 > 0xFFu && v33 && v48)
    {
      WebCore::CSSFilter::create();
      uint64_t v35 = v45;
      uint64_t v45 = 0;
      *(void *)a3 = v35;
      *(unsigned char *)(a3 + 8) = 1;
      uint64_t result = (uint64_t)WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v45, v36);
      goto LABEL_36;
    }
    __break(1u);
LABEL_41:
    if (v28) {
      (*(void (**)(uint64_t, char *))(*(void *)result + 16))(result, v27);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
LABEL_36:
  if (v51) {
    uint64_t result = WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v27);
  }
  if (!v34)
  {
    char v41 = *(char **)a1;
    uint64_t v42 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result)
    {
      if (v42) {
        return (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v41);
      }
    }
  }
  return result;
}

void sub_1988AB870(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18) {
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&a17, a2);
  }
  WTF::Vector<WTF::Ref<WebCore::FilterFunction,WTF::RawPtrTraits<WebCore::FilterFunction>,WTF::DefaultRefDerefTraits<WebCore::FilterFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WTF::Ref<WebCore::SVGFilter,WTF::RawPtrTraits<WebCore::SVGFilter>,WTF::DefaultRefDerefTraits<WebCore::SVGFilter>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SVGFilter,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    return (WTF *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 92));
  uint64_t v4 = *(unsigned int *)(a2 + 92);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    unsigned __int16 v6 = *(uint64_t **)(a2 + 80);
    do
    {
      uint64_t v7 = *v6;
      switch(*(unsigned char *)(*v6 + 48))
      {
        case 1:
          LOBYTE(v10) = 0;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(a1, v7);
          break;
        case 2:
          LOBYTE(v10) = 1;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          LOBYTE(v10) = *(unsigned char *)(v7 + 64);
          goto LABEL_24;
        case 3:
          LOBYTE(v10) = 2;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(a1, v7);
          break;
        case 4:
          LOBYTE(v10) = 3;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(a1, v7);
          break;
        case 5:
          LOBYTE(v10) = 4;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(a1, v7);
          break;
        case 6:
          LOBYTE(v10) = 5;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(a1, v7);
          break;
        case 7:
          LOBYTE(v10) = 6;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(a1, v7);
          break;
        case 8:
          LOBYTE(v10) = 7;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(a1, v7);
          break;
        case 9:
          LOBYTE(v10) = 8;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(a1, v7);
          break;
        case 0xA:
          LOBYTE(v10) = 9;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(a1, v7);
          break;
        case 0xB:
          LOBYTE(v10) = 10;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(a1, v7);
          break;
        case 0xC:
          LOBYTE(v10) = 11;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEImage,void>::encode(a1, v7);
          break;
        case 0xD:
          LOBYTE(v10) = 12;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEMerge,void>::encode(a1, (CFTypeRef *)v7);
          break;
        case 0xE:
          LOBYTE(v10) = 13;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(a1, v7);
          break;
        case 0xF:
          LOBYTE(v10) = 14;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(a1, v7);
          break;
        case 0x10:
          LOBYTE(v10) = 15;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(a1, v7);
          break;
        case 0x11:
          LOBYTE(v10) = 16;
          goto LABEL_24;
        case 0x12:
          LOBYTE(v10) = 17;
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(a1, v7);
          break;
        case 0x13:
          LOBYTE(v10) = 18;
          goto LABEL_24;
        case 0x14:
          LOBYTE(v10) = 19;
LABEL_24:
          IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
          IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(v7 + 56));
          break;
        default:
          break;
      }
      ++v6;
      v5 -= 8;
    }
    while (v5);
  }
  LOBYTE(v10) = *(unsigned char *)(a2 + 49);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v10);
  float v8 = *(float *)(a2 + 56);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 52));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v8);
  long long v10 = *(_OWORD *)(a2 + 60);
  return IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v10);
}

uint64_t *IPC::ArgumentCoder<WebCore::CSSFilter,void>::encode(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 92);
  unint64_t v5 = *((void *)a1 + 2);
  unint64_t v6 = *(void *)a1 + v5;
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 8;
    if (v10 > 0xFFFFFFFFFFFFFFF7 || v11 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
      if (!v4) {
        goto LABEL_90;
      }
      goto LABEL_9;
    }
    *(void *)(*(void *)a1 + v10) = v4;
    *((void *)a1 + 2) = v11;
    uint64_t v4 = *(unsigned int *)(a2 + 92);
    unint64_t v5 = v11;
  }
  if (!v4) {
    goto LABEL_90;
  }
LABEL_9:
  uint64_t v13 = 8 * v4;
  int v14 = *(CFTypeRef ***)(a2 + 80);
  while (2)
  {
    char v15 = *v14;
    switch(*((unsigned char *)*v14 + 48))
    {
      case 1:
        unint64_t v16 = *((void *)a1 + 2);
        if (v16 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v16) = 0;
          *((void *)a1 + 2) = v16 + 1;
        }
        ((void (*)(WTF::StringImpl *))IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode)(a1);
        goto LABEL_70;
      case 2:
        unint64_t v17 = *((void *)a1 + 2);
        if (v17 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v17) = 1;
          *((void *)a1 + 2) = v17 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEBlend,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 3:
        unint64_t v18 = *((void *)a1 + 2);
        if (v18 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v18) = 2;
          *((void *)a1 + 2) = v18 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 4:
        unint64_t v19 = *((void *)a1 + 2);
        if (v19 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v19) = 3;
          *((void *)a1 + 2) = v19 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 5:
        unint64_t v20 = *((void *)a1 + 2);
        if (v20 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v20) = 4;
          *((void *)a1 + 2) = v20 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 6:
        unint64_t v21 = *((void *)a1 + 2);
        if (v21 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v21) = 5;
          *((void *)a1 + 2) = v21 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode((uint64_t *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 7:
        unint64_t v22 = *((void *)a1 + 2);
        if (v22 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v22) = 6;
          *((void *)a1 + 2) = v22 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode((uint64_t *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 8:
        unint64_t v23 = *((void *)a1 + 2);
        if (v23 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v23) = 7;
          *((void *)a1 + 2) = v23 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 9:
        unint64_t v24 = *((void *)a1 + 2);
        if (v24 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v24) = 8;
          *((void *)a1 + 2) = v24 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode((uint64_t *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xA:
        unint64_t v25 = *((void *)a1 + 2);
        if (v25 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v25) = 9;
          *((void *)a1 + 2) = v25 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEFlood,void>::encode((uint64_t *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xB:
        unint64_t v26 = *((void *)a1 + 2);
        if (v26 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v26) = 10;
          *((void *)a1 + 2) = v26 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xC:
        unint64_t v27 = *((void *)a1 + 2);
        if (v27 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v27) = 11;
          *((void *)a1 + 2) = v27 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEImage,void>::encode((uint64_t *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xD:
        unint64_t v28 = *((void *)a1 + 2);
        if (v28 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v28) = 12;
          *((void *)a1 + 2) = v28 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEMerge,void>::encode(a1, v15);
        goto LABEL_70;
      case 0xE:
        unint64_t v29 = *((void *)a1 + 2);
        if (v29 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v29) = 13;
          *((void *)a1 + 2) = v29 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0xF:
        unint64_t v30 = *((void *)a1 + 2);
        if (v30 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v30) = 14;
          *((void *)a1 + 2) = v30 + 1;
        }
        IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(a1, (uint64_t)v15);
        goto LABEL_70;
      case 0x10:
        unint64_t v31 = *((void *)a1 + 2);
        if (v31 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v31) = 15;
          *((void *)a1 + 2) = v31 + 1;
        }
        IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode((uint64_t *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0x11:
        unint64_t v32 = *((void *)a1 + 2);
        if (v32 >= *((void *)a1 + 1)) {
          goto LABEL_72;
        }
        unint64_t v33 = v32 + 1;
        *(unsigned char *)(*(void *)a1 + v32) = 16;
        goto LABEL_68;
      case 0x12:
        unint64_t v34 = *((void *)a1 + 2);
        if (v34 >= *((void *)a1 + 1))
        {
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + v34) = 17;
          *((void *)a1 + 2) = v34 + 1;
        }
        IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode((uint64_t *)a1, (uint64_t)v15);
        goto LABEL_70;
      case 0x13:
        unint64_t v35 = *((void *)a1 + 2);
        if (v35 >= *((void *)a1 + 1)) {
          goto LABEL_72;
        }
        unint64_t v33 = v35 + 1;
        *(unsigned char *)(*(void *)a1 + v35) = 18;
        goto LABEL_68;
      case 0x14:
        unint64_t v36 = *((void *)a1 + 2);
        if (v36 >= *((void *)a1 + 1))
        {
LABEL_72:
          *((void *)a1 + 1) = 0;
        }
        else
        {
          unint64_t v33 = v36 + 1;
          *(unsigned char *)(*(void *)a1 + v36) = 19;
LABEL_68:
          *((void *)a1 + 2) = v33;
        }
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, v15 + 7);
LABEL_70:
        ++v14;
        v13 -= 8;
        if (v13) {
          continue;
        }
        unint64_t v5 = *((void *)a1 + 2);
        break;
      default:
        goto LABEL_70;
    }
    break;
  }
LABEL_90:
  if (v5 >= *((void *)a1 + 1))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v5) = *(unsigned char *)(a2 + 49);
    *((void *)a1 + 2) = v5 + 1;
  }
  *(void *)&long long v39 = *(void *)(a2 + 52);
  unint64_t v37 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)a1, &v39);
  long long v39 = *(_OWORD *)(a2 + 60);
  return IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(v37, &v39);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::FilterRenderingMode>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::ScreenOrientationLockType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

unint64_t IPC::ArgumentCoder<WebCore::SVGFilter,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)(a2 + 76);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v6);
  LOBYTE(v6) = *(unsigned char *)(a2 + 92);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  IPC::VectorArgumentCoder<false,WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 32);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v6);
  LOBYTE(v6) = *(unsigned char *)(a2 + 49);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  float v4 = *(float *)(a2 + 56);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 52));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
  long long v6 = *(_OWORD *)(a2 + 60);
  return IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v6);
}

WTF *IPC::ArgumentCoder<WebCore::SVGFilter,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)v71);
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    unint64_t v40 = 0;
    unint64_t v41 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v42 = a1[3];
    if (v42)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v42 + 16))(v42, v6, v5);
        unint64_t v41 = *a1;
        unint64_t v40 = a1[1];
      }
      else
      {
        unint64_t v40 = 0;
        unint64_t v41 = 0;
      }
    }
    goto LABEL_66;
  }
  BOOL v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = (unint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v40 = v5;
    unint64_t v41 = 0;
LABEL_66:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v43 = a1[3];
    if (v43 && v40) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v43 + 16))(v43, v41);
    }
    goto LABEL_67;
  }
  if (*v8 < 3u)
  {
    int v9 = 0;
    goto LABEL_5;
  }
LABEL_67:
  IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  int v9 = 1;
LABEL_5:
  unint64_t v10 = a1[1];
  unint64_t v11 = *a1;
  unint64_t v12 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v10 >= v12 && v10 - v12 > 7)
  {
    int v14 = (unint64_t *)(v11 + v12);
    a1[2] = (unint64_t)(v14 + 1);
    if (v11)
    {
      unint64_t v15 = *v14;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      if (v15 >= 0x8000)
      {
        while (1)
        {
          IPC::Decoder::decode<WebCore::SVGFilterExpressionTerm>((unint64_t *)&v72, (IPC::Decoder *)a1);
          if (!v74) {
            break;
          }
          if (HIDWORD(v66) == v66)
          {
            WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGFilterExpressionTerm>((uint64_t)&v65, (unint64_t)&v72);
          }
          else
          {
            int v52 = HIDWORD(v66) + 1;
            int v53 = (_OWORD *)((char *)v65 + 32 * HIDWORD(v66));
            long long v54 = v73;
            *int v53 = v72;
            v53[1] = v54;
            HIDWORD(v66) = v52;
          }
          if (!--v15)
          {
            WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v65, HIDWORD(v66));
            int v21 = 0;
            char v55 = v65;
            uint64_t v65 = 0;
            unint64_t v68 = v55;
            uint64_t v69 = v66;
            goto LABEL_20;
          }
        }
LABEL_99:
        int v22 = 0;
        LOBYTE(v68) = 0;
        char v70 = 0;
        int v21 = 1;
      }
      else
      {
        if (v15)
        {
          LODWORD(v66) = v15;
          uint64_t v65 = (WTF *)WTF::fastMalloc((WTF *)(32 * v15));
          do
          {
            IPC::Decoder::decode<WebCore::SVGFilterExpressionTerm>((unint64_t *)&v72, (IPC::Decoder *)a1);
            if (!v74) {
              goto LABEL_99;
            }
            if (HIDWORD(v66) == v66)
            {
              WTF::Vector<WebCore::SVGFilterExpressionTerm,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SVGFilterExpressionTerm>((uint64_t)&v65, (unint64_t)&v72);
            }
            else
            {
              int v16 = HIDWORD(v66) + 1;
              unint64_t v17 = (_OWORD *)((char *)v65 + 32 * HIDWORD(v66));
              long long v18 = v73;
              *unint64_t v17 = v72;
              v17[1] = v18;
              HIDWORD(v66) = v16;
            }
            --v15;
          }
          while (v15);
          unint64_t v19 = v65;
          uint64_t v20 = v66;
        }
        else
        {
          unint64_t v19 = 0;
          uint64_t v20 = 0;
        }
        int v21 = 0;
        uint64_t v65 = 0;
        unint64_t v68 = v19;
        uint64_t v69 = v20;
LABEL_20:
        int v22 = 1;
        char v70 = 1;
      }
      uint64_t result = v65;
      if (v65) {
        goto LABEL_64;
      }
      goto LABEL_22;
    }
    unint64_t v44 = v10;
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v44 = 0;
    unint64_t v45 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v46 = a1[3];
    if (v46)
    {
      if (v10)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v46 + 16))(v46, v11, v10);
        unint64_t v45 = *a1;
        unint64_t v44 = a1[1];
      }
      else
      {
        unint64_t v44 = 0;
        unint64_t v45 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t v47 = a1[3];
  if (v47 && v44) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v47 + 16))(v47, v45);
  }
  int v22 = 0;
  LOBYTE(v68) = 0;
  char v70 = 0;
LABEL_71:
  IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  while (1)
  {
    unint64_t v24 = a1[1];
    unint64_t v25 = *a1;
    unint64_t v26 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v24 >= v26 && v24 - v26 > 7)
    {
      unint64_t v28 = (unint64_t *)(v25 + v26);
      a1[2] = (unint64_t)(v28 + 1);
      if (!v25)
      {
        unint64_t v48 = v24;
        unint64_t v49 = 0;
        goto LABEL_73;
      }
      unint64_t v29 = *v28;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      if (v29 < 0x20000)
      {
        if (!v29)
        {
          unint64_t v33 = 0;
          uint64_t v34 = 0;
LABEL_38:
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          *(void *)&long long v72 = v33;
          *((void *)&v72 + 1) = v34;
LABEL_39:
          LOBYTE(v73) = 1;
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v4);
          goto LABEL_40;
        }
        unint64_t v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v29));
        LODWORD(v66) = v29;
        uint64_t v65 = v30;
        while (1)
        {
          IPC::Decoder::decode<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>((uint64_t)&v60, (IPC::Decoder *)a1);
          if (!v61) {
            goto LABEL_107;
          }
          int v31 = HIDWORD(v66);
          if (HIDWORD(v66) == v66)
          {
            WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>((uint64_t)&v65, (unint64_t)&v60);
            if (!v61) {
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v32 = v60;
            uint64_t v60 = 0;
            *((void *)v65 + HIDWORD(v66)) = v32;
            HIDWORD(v66) = v31 + 1;
          }
          WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v60, v4);
LABEL_36:
          if (!--v29)
          {
            unint64_t v33 = v65;
            uint64_t v34 = v66;
            goto LABEL_38;
          }
        }
      }
      while (1)
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>((uint64_t)&v60, (IPC::Decoder *)a1);
        if (!v61)
        {
LABEL_107:
          LOBYTE(v72) = 0;
          LOBYTE(v73) = 0;
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v4);
          goto LABEL_108;
        }
        int v56 = HIDWORD(v66);
        if (HIDWORD(v66) == v66)
        {
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>>((uint64_t)&v65, (unint64_t)&v60);
          if (!v61) {
            goto LABEL_105;
          }
        }
        else
        {
          uint64_t v57 = v60;
          uint64_t v60 = 0;
          *((void *)v65 + HIDWORD(v66)) = v57;
          HIDWORD(v66) = v56 + 1;
        }
        WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v60, v4);
LABEL_105:
        if (!--v29)
        {
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t *)&v65, HIDWORD(v66));
          *(void *)&long long v72 = v65;
          uint64_t v58 = v66;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          *((void *)&v72 + 1) = v58;
          goto LABEL_39;
        }
      }
    }
    unint64_t v48 = 0;
    unint64_t v49 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v50 = a1[3];
    if (v50)
    {
      if (v24)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v50 + 16))(v50, v25, v24);
        unint64_t v49 = *a1;
        unint64_t v48 = a1[1];
      }
      else
      {
        unint64_t v48 = 0;
        unint64_t v49 = 0;
      }
    }
LABEL_73:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v51 = a1[3];
    if (v51 && v48) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v51 + 16))(v51, v49);
    }
    LOBYTE(v72) = 0;
    LOBYTE(v73) = 0;
LABEL_108:
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
LABEL_40:
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v65);
    int v21 = IPC::ArgumentCoder<WebCore::ScreenOrientationLockType,void>::decode<IPC::Decoder>(a1);
    if ((unsigned __int16)v21 <= 0xFFu) {
      IPC::Decoder::markInvalid((IPC::Decoder *)a1);
    }
    unint64_t v35 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    char v37 = v36;
    uint64_t v63 = v35;
    int v64 = v36;
    uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v60);
    if (!*a1) {
      break;
    }
    if (v71[16] && !v9 && v22 && (_BYTE)v73 && v67 && (unsigned __int16)v21 > 0xFFu && v37 && v62)
    {
      WebCore::SVGFilter::create();
      uint64_t v38 = v59;
      uint64_t v59 = 0;
      *(void *)a2 = v38;
      *(unsigned char *)(a2 + 8) = 1;
      uint64_t result = (WTF *)WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v59, v39);
      goto LABEL_52;
    }
    __break(1u);
LABEL_64:
    WTF::fastFree(result, v4);
LABEL_22:
    if (v21) {
      goto LABEL_71;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
LABEL_52:
  if ((_BYTE)v73) {
    uint64_t result = (WTF *)WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v4);
  }
  if (v70)
  {
    uint64_t result = v68;
    if (v68)
    {
      unint64_t v68 = 0;
      LODWORD(v69) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

void sub_1988AD178()
{
}

unint64_t IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(IPC::Encoder *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(a1, (uint64_t)a2 + 16);
  int v8 = *((_DWORD *)a2 + 8);
  IPC::Encoder::operator<<<int>(a1, &v8);
  int v7 = *((_DWORD *)a2 + 9);
  IPC::Encoder::operator<<<int>(a1, &v7);
  float v4 = (const void *)WebCore::ByteArrayPixelBuffer::span(a2);
  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v4, v5);
}

void *IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::encode(WTF::StringImpl *a1, WebCore::ByteArrayPixelBuffer *a2)
{
  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(a1, (uint64_t)a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *((void *)a1 + 2);
  unint64_t v6 = *(void *)a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *((_DWORD *)a2 + 8);
      *((void *)a1 + 2) = v11;
      uint64_t v4 = *(void *)a1;
      unint64_t v5 = v11;
    }
  }
  uint64_t v13 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v13 >= v4 + v5)
  {
    unint64_t v14 = (unint64_t)v13 - v4 + 4;
    if ((unint64_t)v13 - v4 > 0xFFFFFFFFFFFFFFFBLL || v14 > *((void *)a1 + 1))
    {
      *((void *)a1 + 1) = 0;
    }
    else
    {
      *uint64_t v13 = *((_DWORD *)a2 + 9);
      *((void *)a1 + 2) = v14;
    }
  }
  unint64_t v17 = (const void *)WebCore::ByteArrayPixelBuffer::span(a2);

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v17, v16);
}

void IPC::ArgumentCoder<WebCore::ByteArrayPixelBuffer,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::PixelBufferFormat>(a1, (uint64_t)v17);
  uint64_t v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  uint64_t v6 = v5;
  if (!(_BYTE)v5) {
    goto LABEL_12;
  }
  while (1)
  {
    unint64_t v15 = v4;
    int v16 = v5;
    uint64_t v4 = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v13);
    if (!*a1) {
      break;
    }
    if (v19 && v6 && v14)
    {
      WebCore::ByteArrayPixelBuffer::create();
      goto LABEL_7;
    }
    __break(1u);
LABEL_12:
    uint64_t v9 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v8)
    {
      int v11 = v5;
      unint64_t v12 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v9);
      int v5 = v11;
      uint64_t v4 = v12;
    }
  }
  *a2 = 0;
  a2[8] = 0;
LABEL_7:
  if (v19)
  {
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_1988AD3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a18)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::PixelBufferFormat>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      CFTypeRef v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MarkupExclusionRule,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::AtomString>(a1, &v29);
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
LABEL_20:
    int v16 = *(void **)a1;
    uint64_t v20 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v20) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(void *)result + 16))(result, v16);
    }
    if (!*(void *)a1) {
      goto LABEL_41;
    }
    if (v30)
    {
      unint64_t v29 = 0;
      __break(1u);
      goto LABEL_24;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    goto LABEL_26;
  }
  unint64_t v6 = v4;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v4 >= 0x10000)
  {
    do
    {
      IPC::Decoder::decode<std::pair<WTF::AtomString,WTF::AtomString>>((uint64_t)&v31, a1);
      if (!(_BYTE)v33)
      {
        LOBYTE(v26) = 0;
        char v28 = 0;
        goto LABEL_19;
      }
      if (HIDWORD(v35) == v35)
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v34, (unint64_t)&v31);
      }
      else
      {
        int v21 = HIDWORD(v35) + 1;
        int v22 = (WTF::StringImpl **)((char *)v34 + 16 * HIDWORD(v35));
        unint64_t v23 = v31;
        int v31 = 0;
        *int v22 = v23;
        unint64_t v24 = v32;
        uint64_t v32 = 0;
        v22[1] = v24;
        HIDWORD(v35) = v21;
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v8);
      --v6;
    }
    while (v6);
    unint64_t v25 = v34;
    if (v35 > HIDWORD(v35))
    {
      if (HIDWORD(v35))
      {
        LODWORD(v35) = HIDWORD(v35);
        unint64_t v25 = (WTF *)WTF::fastRealloc(v34, (void *)(16 * HIDWORD(v35)));
      }
      else if (v34)
      {
        uint64_t v34 = 0;
        LODWORD(v35) = 0;
        WTF::fastFree(v25, v5);
        unint64_t v25 = v34;
      }
    }
    uint64_t v34 = 0;
    unint64_t v26 = v25;
    LODWORD(v6) = v35;
    unsigned int v14 = HIDWORD(v35);
  }
  else
  {
    if (v4)
    {
      CFTypeRef v7 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
      LODWORD(v35) = v6;
      uint64_t v34 = v7;
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::AtomString,WTF::AtomString>>((uint64_t)&v31, a1);
        if (!(_BYTE)v33) {
          break;
        }
        if (HIDWORD(v35) == v35)
        {
          WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)&v34, (unint64_t)&v31);
        }
        else
        {
          int v9 = HIDWORD(v35) + 1;
          uint64_t v10 = (WTF::StringImpl **)((char *)v34 + 16 * HIDWORD(v35));
          int v11 = v31;
          int v31 = 0;
          *uint64_t v10 = v11;
          unint64_t v12 = v32;
          uint64_t v32 = 0;
          v10[1] = v12;
          HIDWORD(v35) = v9;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v8);
        if (!--v6)
        {
          uint64_t v13 = v34;
          LODWORD(v6) = v35;
          unsigned int v14 = HIDWORD(v35);
          goto LABEL_12;
        }
      }
      LOBYTE(v26) = 0;
LABEL_19:
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v8);
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v19);
      goto LABEL_20;
    }
    unsigned int v14 = 0;
    uint64_t v13 = 0;
LABEL_12:
    uint64_t v34 = 0;
    unint64_t v26 = v13;
  }
  uint64_t v35 = 0;
  unint64_t v27 = __PAIR64__(v14, v6);
  char v28 = 1;
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v5);
  if (!*(void *)a1)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    goto LABEL_25;
  }
  if (!v30) {
    goto LABEL_40;
  }
  unint64_t v17 = v29;
  unint64_t v29 = 0;
  long long v18 = v26;
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  *(void *)a2 = v17;
  *(void *)(a2 + 8) = v18;
  uint64_t v33 = 0;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v14;
  *(unsigned char *)(a2 + 24) = 1;
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v16);
  uint64_t result = v31;
  int v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
LABEL_24:
      WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      goto LABEL_25;
    }
    *(_DWORD *)result -= 2;
  }
LABEL_25:
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v16);
LABEL_26:
  if (v30)
  {
    uint64_t result = v29;
    unint64_t v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988AD784(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, a2);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18 - 48, v20);
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v21);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::SystemImage,void>::encode(IPC::Encoder *result, WebCore::ARKitBadgeSystemImage *a2)
{
  unint64_t v3 = result;
  if (*((unsigned char *)a2 + 12) == 1)
  {
    char v5 = 1;
    IPC::Encoder::operator<<<BOOL>(result, &v5);
    return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(v3, a2);
  }
  else if (!*((unsigned char *)a2 + 12))
  {
    char v4 = 0;
    IPC::Encoder::operator<<<BOOL>(result, &v4);
    return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v3, *((unsigned char *)a2 + 13));
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::SystemImage,void>::encode(uint64_t *a1, WebCore::ARKitBadgeSystemImage *this)
{
  if (*((unsigned char *)this + 12) == 1)
  {
    unint64_t v3 = a1[2];
    if (v3 >= a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)(*a1 + v3) = 1;
      a1[2] = v3 + 1;
    }
    return IPC::ArgumentCoder<WebCore::ARKitBadgeSystemImage,void>::encode(a1, this);
  }
  else if (!*((unsigned char *)this + 12))
  {
    unint64_t v2 = a1[2];
    if (v2 >= a1[1] || (*(unsigned char *)(*a1 + v2) = 0, a1[2] = v2 + 1, v2 + 1 >= a1[1]))
    {
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)(*a1 + v2 + 1) = *((unsigned char *)this + 13);
      a1[2] = v2 + 2;
    }
  }
  return a1;
}

unint64_t IPC::ArgumentCoder<WebCore::SystemImage,void>::decode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v24 = a1[3];
    if (v24)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v24 + 16))(v24);
        unint64_t v23 = *a1;
        unint64_t v22 = a1[1];
      }
      else
      {
        unint64_t v22 = 0;
        unint64_t v23 = 0;
      }
    }
    goto LABEL_25;
  }
  CFTypeRef v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v22 = v4;
    unint64_t v23 = 0;
LABEL_25:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v25 = a1[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        unint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_26;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_26:
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v4) {
      unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_33;
  }
  if (v8 == 1)
  {
    unint64_t v14 = ((unint64_t)(v7 + 8) & 0xFFFFFFFFFFFFFFF8) - v5;
    unint64_t v13 = a1[1];
    if (v13 < v14 || v13 - v14 <= 7)
    {
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t result = a1[3];
      if (!result) {
        goto LABEL_36;
      }
      goto LABEL_61;
    }
    int v16 = (uint64_t *)(v5 + v14);
    uint64_t v17 = *v16;
    a1[2] = (unint64_t)(v16 + 1);
    if ((unint64_t)(v17 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      unint64_t v30 = v13;
      unint64_t v31 = v5;
      goto LABEL_36;
    }
    int v18 = 0;
    goto LABEL_18;
  }
  unint64_t v9 = a1[1];
  if (v9 <= (unint64_t)&v7[-v5 + 1])
  {
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v28 = a1[3];
    if (v28)
    {
      if (v9)
      {
        (*(void (**)(unint64_t))(*(void *)v28 + 16))(v28);
        unint64_t v26 = 0;
        unint64_t v37 = *a1;
        unint64_t v38 = a1[1];
        unint64_t v39 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        unint64_t v27 = 0;
        if (v39 && v38)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37, v38);
          unint64_t v27 = *a1;
          unint64_t v26 = a1[1];
        }
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = 0;
      }
    }
LABEL_30:
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result
      && v26
      && ((*(void (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v27),
          unint64_t result = a1[3],
          unint64_t v34 = *a1,
          unint64_t v35 = a1[1],
          *a1 = 0,
          a1[1] = 0,
          result)
      && v35)
    {
      unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v34);
      unint64_t v13 = *a1;
      if (*a1) {
        goto LABEL_60;
      }
      unint64_t v36 = a1[1];
      unint64_t result = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (result && v36)
      {
        (*(void (**)(unint64_t, void))(*(void *)result + 16))(result, 0);
        unint64_t result = 0;
        unint64_t v13 = 1;
        goto LABEL_8;
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
LABEL_33:
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  a1[2] = (unint64_t)(v7 + 2);
  unsigned int v10 = v7[1];
  if (v10 >= 2)
  {
    unint64_t v26 = v9;
    unint64_t v27 = v5;
    goto LABEL_30;
  }
  BOOL v11 = v10 != 0;
  unint64_t result = WTF::fastMalloc((WTF *)0x10);
  unint64_t v13 = 0;
  *(_DWORD *)(result + 8) = 1;
  *(unsigned char *)(result + 12) = 0;
  *(void *)unint64_t result = MEMORY[0x1E4FB6B90] + 16;
  *(unsigned char *)(result + 13) = v11;
LABEL_8:
  if (!*a1)
  {
    *a2 = 0;
    a2[8] = 0;
    if (!result) {
      LOBYTE(v13) = 1;
    }
    if ((v13 & 1) == 0)
    {
      if (*(_DWORD *)(result + 8) == 1)
      {
        unint64_t v43 = *(uint64_t (**)(void))(*(void *)result + 8);
        return v43();
      }
      else
      {
        --*(_DWORD *)(result + 8);
      }
    }
    return result;
  }
  if (!v13)
  {
    *(void *)a2 = result;
    goto LABEL_23;
  }
  do
  {
    while (1)
    {
LABEL_60:
      while (1)
      {
        __break(1u);
LABEL_61:
        if (!v13) {
          break;
        }
        (*(void (**)(unint64_t))(*(void *)result + 16))(result);
        unint64_t v30 = 0;
        unint64_t v40 = *a1;
        unint64_t v41 = a1[1];
        unint64_t v42 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        unint64_t v31 = 0;
        if (!v42 || !v41) {
          goto LABEL_36;
        }
        unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, void))(*(void *)v42 + 16))(v42, v40, v41, 0);
        unint64_t v13 = *a1;
        if (!*a1)
        {
          unint64_t v31 = 0;
          unint64_t v30 = a1[1];
          goto LABEL_36;
        }
      }
      unint64_t v30 = 0;
      unint64_t v31 = 0;
LABEL_36:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v32 = a1[3];
      if (v32 && v30) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v32 + 16))(v32, v31);
      }
      uint64_t v17 = 0;
      int v18 = 1;
LABEL_18:
      unint64_t result = (unint64_t)IPC::Decoder::decode<WebCore::FloatPoint>(a1);
      unint64_t v13 = *a1;
      if (*a1) {
        break;
      }
      unint64_t v29 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t result = a1[3];
      if (result)
      {
        if (v29)
        {
          unint64_t result = (*(uint64_t (**)(unint64_t, void))(*(void *)result + 16))(result, 0);
          unint64_t v13 = *a1;
          if (*a1) {
            continue;
          }
        }
      }
      goto LABEL_33;
    }
  }
  while (v18 || !v19);
  int v20 = result;
  unint64_t v21 = HIDWORD(result);
  unint64_t result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(unsigned char *)(result + 12) = 1;
  *(void *)unint64_t result = MEMORY[0x1E4FB6B70] + 16;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v17;
  *(_DWORD *)(result + 32) = v20;
  *(_DWORD *)(result + 36) = v21;
  if (*a1)
  {
    *(void *)a2 = result;
LABEL_23:
    a2[8] = 1;
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
    uint64_t v33 = *(uint64_t (**)(void))(MEMORY[0x1E4FB6B70] + 24);
    return v33();
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(IPC::Encoder *a1, atomic_uint *a2)
{
  atomic_fetch_add(a2, 1u);
  IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(a1, (WebCore::FragmentedSharedBuffer *)a2);

  return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)a2, v3);
}

void sub_1988ADF08(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::SharedBuffer,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>(a1, &v7);
  if (*(void *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    WebCore::SharedBuffer::create();
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  if (v8)
  {
    unint64_t v5 = v7;
    CFTypeRef v7 = 0;
    if (v5) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v4);
    }
  }
}

void sub_1988ADFA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, char a12)
{
  if (a12)
  {
    if (a11) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::FilterOperation,void>::encode(IPC::Encoder *result, uint64_t a2)
{
  unint64_t v3 = result;
  if (*(unsigned __int8 *)(a2 + 12) - 1 <= 3)
  {
    char v5 = 0;
    IPC::Encoder::operator<<<BOOL>(result, &v5);
    return IPC::Encoder::operator<<<WebCore::BasicColorMatrixFilterOperation const&>(v3, a2);
  }
  else
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 5:
      case 7:
      case 8:
      case 9:
        char v6 = 1;
        IPC::Encoder::operator<<<BOOL>(result, &v6);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v3, *(double *)(a2 + 16));
        char v11 = *(unsigned char *)(a2 + 12);
        unint64_t v4 = &v11;
        goto LABEL_4;
      case 0xA:
        char v7 = 2;
        IPC::Encoder::operator<<<BOOL>(result, &v7);
        unint64_t result = (IPC::Encoder *)((uint64_t (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WebCore::Length,void>::encode)(v3, a2 + 16);
        break;
      case 0xB:
        char v8 = 3;
        IPC::Encoder::operator<<<BOOL>(result, &v8);
        unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::DropShadowFilterOperation,void>::encode(v3, a2);
        break;
      case 0xC:
        char v10 = 5;
        unint64_t v4 = &v10;
LABEL_4:
        unint64_t result = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(v3, v4);
        break;
      case 0xD:
        char v9 = 4;
        IPC::Encoder::operator<<<BOOL>(result, &v9);
        unint64_t result = IPC::Encoder::operator<<<WebCore::DefaultFilterOperation const&>(v3, (WebCore::DefaultFilterOperation *)a2);
        break;
      default:
        return result;
    }
  }
  return result;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::BasicColorMatrixFilterOperation const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 16));
  char v5 = *(unsigned char *)(a2 + 12);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return a1;
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::DefaultFilterOperation const&>(IPC::Encoder *a1, WebCore::DefaultFilterOperation *this)
{
  char v4 = WebCore::DefaultFilterOperation::representedType(this);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::FilterOperation::Type>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 0xEu;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

unsigned char *IPC::ArgumentCoder<WebCore::DropShadowFilterOperation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 + 16);
  int v4 = IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)&v7);
  int v6 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<int>(v4, &v6);
  return IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 32));
}

uint64_t WebCore::DropShadowFilterOperation::create@<X0>(WebCore::DropShadowFilterOperation *this@<X0>, const WebCore::IntPoint *a2@<X1>, const Color *a3@<X2>, uint64_t *a4@<X8>)
{
  int v6 = (int)a2;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v9 + 8) = 1;
  *(unsigned char *)(v9 + 12) = 11;
  *(void *)uint64_t v9 = MEMORY[0x1E4FB6BA0] + 16;
  *(void *)(v9 + 16) = *(void *)this;
  *(_DWORD *)(v9 + 24) = v6;
  uint64_t result = WebCore::Color::Color((WebCore::Color *)(v9 + 32), a3);
  *a4 = v9;
  return result;
}

void sub_1988AE348(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::FilterEffect,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 48))
  {
    case 2:
      char v5 = 0;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::Encoder::operator<<<WebCore::FEBlend const&>(a1, a2);
      return;
    case 3:
      char v5 = 1;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEColorMatrix,void>::encode(a1, a2);
      return;
    case 4:
      char v5 = 2;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEComponentTransfer,void>::encode(a1, a2);
      return;
    case 5:
      char v5 = 3;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEComposite,void>::encode(a1, a2);
      return;
    case 6:
      char v5 = 4;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEConvolveMatrix,void>::encode(a1, a2);
      return;
    case 7:
      char v5 = 5;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEDiffuseLighting,void>::encode(a1, a2);
      return;
    case 8:
      char v5 = 6;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEDisplacementMap,void>::encode(a1, a2);
      return;
    case 9:
      char v5 = 7;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEDropShadow,void>::encode(a1, a2);
      return;
    case 0xA:
      char v5 = 8;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEFlood,void>::encode(a1, a2);
      return;
    case 0xB:
      char v5 = 9;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEGaussianBlur,void>::encode(a1, a2);
      return;
    case 0xC:
      char v5 = 10;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEImage,void>::encode(a1, a2);
      return;
    case 0xD:
      char v5 = 11;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEMerge,void>::encode(a1, (CFTypeRef *)a2);
      return;
    case 0xE:
      char v5 = 12;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEMorphology,void>::encode(a1, a2);
      return;
    case 0xF:
      char v5 = 13;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FEOffset,void>::encode(a1, a2);
      return;
    case 0x10:
      char v5 = 15;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FESpecularLighting,void>::encode(a1, a2);
      return;
    case 0x11:
      char v4 = 14;
      goto LABEL_7;
    case 0x12:
      char v5 = 16;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::FETurbulence,void>::encode(a1, a2);
      return;
    case 0x13:
      char v4 = 17;
      goto LABEL_7;
    case 0x14:
      char v4 = 18;
LABEL_7:
      char v5 = v4;
      IPC::Encoder::operator<<<BOOL>(a1, &v5);
      IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
      break;
    default:
      return;
  }
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::FEBlend const&>(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 56));
  return a1;
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEBlend,WTF::RawPtrTraits<WebCore::FEBlend>,WTF::DefaultRefDerefTraits<WebCore::FEBlend>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  char v5 = (char *)*a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *a2;
        uint64_t v14 = a2[1];
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_15;
  }
  uint64_t v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v14 = v6;
    uint64_t v15 = 0;
LABEL_15:
    unint64_t v6 = 0;
    char v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        char v5 = (char *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
    }
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v18 + 16))(v18, v5);
    }
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v5, (uint64_t)&v24);
    if (!*a2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*v8 - 1 >= 0x12) {
    goto LABEL_16;
  }
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v5, (uint64_t)&v24);
  if (!*a2)
  {
LABEL_19:
    *a1 = 0;
    a1[8] = 0;
    int v12 = 1;
    goto LABEL_9;
  }
  if (!v25)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  CFTypeRef v9 = v24;
  CFTypeRef v24 = 0;
  CFTypeRef cf = v9;
  WebCore::FEBlend::create();
  uint64_t v10 = v23;
  uint64_t v23 = 0;
  *(void *)a1 = v10;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v23, v11);
  if (cf) {
    CFRelease(cf);
  }
  int v12 = 0;
LABEL_9:
  if (v25)
  {
    CFTypeRef v13 = v24;
    CFTypeRef v24 = 0;
    if (v13) {
      CFRelease(v13);
    }
  }
  if (v12)
  {
    uint64_t v19 = *a2;
    uint64_t v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = a2[3];
    if (v21)
    {
      if (v20) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
      }
    }
  }
}

void sub_1988AE8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>>(unsigned char *a1, IPC::Decoder *this)
{
  unint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *((void *)this + 2) - *(void *)this;
  if (v4 <= v6) {
    goto LABEL_21;
  }
  unint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)this + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v17 = v4;
    uint64_t v18 = 0;
    goto LABEL_22;
  }
  if (*v7 >= 5u) {
    goto LABEL_23;
  }
  for (int i = 0; ; int i = 1)
  {
    IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v25, this);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)this, v9, (uint64_t)&v23);
    uint64_t v11 = *(void *)this;
    if (!*(void *)this)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_11;
    }
    if (!i)
    {
      uint64_t v5 = v27;
      if (v27)
      {
        uint64_t v5 = v24;
        if (v24) {
          break;
        }
      }
    }
    __break(1u);
LABEL_21:
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v19 = *((void *)this + 3);
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v5, v4);
        uint64_t v18 = *(void *)this;
        unint64_t v17 = *((void *)this + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
LABEL_22:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v20 = *((void *)this + 3);
    if (v20 && v17) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
    }
LABEL_23:
    IPC::Decoder::markInvalid(this);
  }
  CFTypeRef v12 = v23;
  CFTypeRef v23 = 0;
  CFTypeRef cf = v12;
  WebCore::FEColorMatrix::create();
  uint64_t v13 = v22;
  uint64_t v22 = 0;
  *(void *)a1 = v13;
  a1[8] = 1;
  WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v22, v14);
  if (cf) {
    CFRelease(cf);
  }
LABEL_11:
  if (v24)
  {
    CFTypeRef v15 = v23;
    CFTypeRef v23 = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  if (v27)
  {
    uint64_t v16 = v25;
    if (v25)
    {
      char v25 = 0;
      int v26 = 0;
      WTF::fastFree(v16, v10);
    }
  }
  if (!v11) {
    IPC::Decoder::markInvalid(this);
  }
}

void sub_1988AEB28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12, char a13, WTF *a14, int a15, int a16, char a17)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a13 && a12) {
    CFRelease(a12);
  }
  if (a17)
  {
    if (a14) {
      WTF::fastFree(a14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEComponentTransfer,WTF::RawPtrTraits<WebCore::FEComponentTransfer>,WTF::DefaultRefDerefTraits<WebCore::FEComponentTransfer>>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v34, a2);
  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v30, a2);
  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v26, a2);
  IPC::Decoder::decode<WebCore::ComponentTransferFunction>((uint64_t)v22, a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a2, v4, (uint64_t)&v20);
  uint64_t v6 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_30;
  }
  if (!v37 || !v33 || !v29 || !v25 || !v21)
  {
    __break(1u);
LABEL_30:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_9;
  }
  CFTypeRef v7 = v20;
  CFTypeRef v20 = 0;
  CFTypeRef cf = v7;
  WebCore::FEComponentTransfer::create();
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  *(void *)a1 = v8;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v19, v9);
  if (cf) {
    CFRelease(cf);
  }
LABEL_9:
  if (v21)
  {
    CFTypeRef v10 = v20;
    CFTypeRef v20 = 0;
    if (v10) {
      CFRelease(v10);
    }
  }
  if (v25)
  {
    uint64_t v11 = v23;
    if (v23)
    {
      CFTypeRef v23 = 0;
      int v24 = 0;
      WTF::fastFree(v11, v5);
    }
  }
  if (v29)
  {
    CFTypeRef v12 = v27;
    if (v27)
    {
      unsigned __int8 v27 = 0;
      int v28 = 0;
      WTF::fastFree(v12, v5);
    }
  }
  if (v33)
  {
    uint64_t v13 = v31;
    if (v31)
    {
      unint64_t v31 = 0;
      int v32 = 0;
      WTF::fastFree(v13, v5);
    }
  }
  if (v37 && (uint64_t v14 = v35) != 0)
  {
    unint64_t v35 = 0;
    int v36 = 0;
    WTF::fastFree(v14, v5);
    if (v6) {
      return;
    }
  }
  else if (v6)
  {
    return;
  }
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v17 = *((void *)a2 + 3);
  if (v17)
  {
    if (v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
  }
}

void sub_1988AED5C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF *a30,int a31,int a32,char a33)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12 && a11) {
    CFRelease(a11);
  }
  if (a19 && a16) {
    WTF::fastFree(a16, a2);
  }
  if (a26 && a23) {
    WTF::fastFree(a23, a2);
  }
  if (a33 && a30) {
    WTF::fastFree(a30, a2);
  }
  if (*(unsigned char *)(v33 - 40))
  {
    unint64_t v35 = *(WTF **)(v33 - 56);
    if (v35)
    {
      *(void *)(v33 - 56) = 0;
      *(_DWORD *)(v33 - 48) = 0;
      WTF::fastFree(v35, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEComposite,WTF::RawPtrTraits<WebCore::FEComposite>,WTF::DefaultRefDerefTraits<WebCore::FEComposite>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_20;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v21 = v6;
    uint64_t v22 = 0;
    goto LABEL_21;
  }
  unsigned int v9 = *v8;
  if (v9 >= 8) {
    goto LABEL_22;
  }
  for (unsigned int i = v9 | 0x100; ; unsigned int i = 0)
  {
    __int16 v33 = i;
    uint64_t v11 = IPC::Decoder::decode<float>(a2);
    uint64_t v12 = IPC::Decoder::decode<float>(a2);
    uint64_t v13 = IPC::Decoder::decode<float>(a2);
    uint64_t v14 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v15, (uint64_t)&v31);
    uint64_t v16 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_14;
    }
    if (i > 0xFF
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && v32)
    {
      break;
    }
    __break(1u);
LABEL_20:
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        uint64_t v22 = *a2;
        uint64_t v21 = a2[1];
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
LABEL_21:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v21);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v5);
    }
  }
  CFTypeRef v17 = v31;
  CFTypeRef v31 = 0;
  CFTypeRef cf = v17;
  WebCore::FEComposite::create();
  uint64_t v18 = v30;
  uint64_t v30 = 0;
  *(void *)a1 = v18;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v30, v19);
  if (cf) {
    CFRelease(cf);
  }
LABEL_14:
  if (v32)
  {
    CFTypeRef v20 = v31;
    CFTypeRef v31 = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  if (!v16)
  {
    uint64_t v26 = *a2;
    uint64_t v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v28 = a2[3];
    if (v28)
    {
      if (v27) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
      }
    }
  }
}

void sub_1988AF0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12, char a13)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a13)
  {
    if (a12) {
      CFRelease(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEConvolveMatrix,WTF::RawPtrTraits<WebCore::FEConvolveMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEConvolveMatrix>>>(unsigned char *a1, unint64_t *a2)
{
  uint64_t v4 = (uint64_t)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  LODWORD(v6) = v5;
  uint64_t v51 = v5;
  if (!(_BYTE)v5) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v63 = v4;
    int v64 = v6;
    uint64_t v4 = IPC::Decoder::decode<float>(a2);
    uint64_t v6 = IPC::Decoder::decode<float>(a2);
    unint64_t v7 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
    int v9 = v8;
    uint64_t v10 = v8;
    if (!(_BYTE)v8)
    {
      unint64_t v36 = *a2;
      unint64_t v37 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v38 = a2[3];
      if (v38)
      {
        if (v37) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36);
        }
      }
    }
    char v61 = v7;
    int v62 = v9;
    unsigned __int16 v11 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a2);
    if (v11 <= 0xFFu)
    {
      unint64_t v39 = *a2;
      unint64_t v40 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v41 = a2[3];
      if (v41)
      {
        if (v40) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v41 + 16))(v41, v39);
        }
      }
    }
    uint64_t v12 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
    int v14 = v13;
    uint64_t v15 = v13;
    if (!(_BYTE)v13)
    {
      unint64_t v42 = *a2;
      unint64_t v43 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v44 = a2[3];
      if (v44)
      {
        if (v43)
        {
          unint64_t v45 = v12;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v44 + 16))(a2[3], v42);
          uint64_t v12 = v45;
        }
      }
    }
    uint64_t v59 = v12;
    int v60 = v14;
    unint64_t v16 = a2[1];
    unint64_t v17 = *a2;
    unint64_t v18 = a2[2] - *a2;
    if (v16 <= v18)
    {
      unint64_t v46 = 0;
      unint64_t v47 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v48 = a2[3];
      if (v48)
      {
        if (v16)
        {
          (*(void (**)(unint64_t))(*(void *)v48 + 16))(v48);
          unint64_t v47 = *a2;
          unint64_t v46 = a2[1];
        }
        else
        {
          unint64_t v46 = 0;
          unint64_t v47 = 0;
        }
      }
      goto LABEL_48;
    }
    uint64_t v19 = (unsigned __int8 *)(v17 + v18);
    a2[2] = (unint64_t)(v19 + 1);
    if (!v17)
    {
      unint64_t v46 = v16;
      unint64_t v47 = 0;
LABEL_48:
      *a2 = 0;
      a2[1] = 0;
      unint64_t v49 = a2[3];
      if (v49 && v46)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v49 + 16))(v49, v47, v46);
        unint64_t v17 = *a2;
        unint64_t v16 = a2[1];
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0;
      }
      goto LABEL_50;
    }
    if (*v19 < 2u)
    {
      int v20 = 0;
      goto LABEL_9;
    }
LABEL_50:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v50 = a2[3];
    if (v50 && v16) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v50 + 16))(v50, v17);
    }
    int v20 = 1;
LABEL_9:
    IPC::Decoder::decode<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v56, (IPC::Decoder *)a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a2, v21, (uint64_t)&v54);
    unint64_t v23 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_21;
    }
    if (v51
      && (v4 & 0xFF00000000) != 0
      && (v6 & 0xFF00000000) != 0
      && v10
      && v11 > 0xFFu
      && v15
      && !v20
      && v58
      && v55)
    {
      break;
    }
    __break(1u);
LABEL_33:
    unint64_t v32 = *a2;
    unint64_t v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v34 = a2[3];
    if (v34) {
      BOOL v35 = v33 == 0;
    }
    else {
      BOOL v35 = 1;
    }
    if (!v35) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32);
    }
  }
  CFTypeRef v24 = v54;
  CFTypeRef v54 = 0;
  CFTypeRef cf = v24;
  WebCore::FEConvolveMatrix::create();
  uint64_t v25 = v53;
  uint64_t v53 = 0;
  *(void *)a1 = v25;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v53, v26);
  if (cf) {
    CFRelease(cf);
  }
LABEL_21:
  if (v55)
  {
    CFTypeRef v27 = v54;
    CFTypeRef v54 = 0;
    if (v27) {
      CFRelease(v27);
    }
  }
  if (v58 && (uint64_t v28 = v56) != 0)
  {
    int v56 = 0;
    int v57 = 0;
    WTF::fastFree(v28, v22);
    if (!v23) {
      goto LABEL_29;
    }
  }
  else
  {
    if (v23) {
      return;
    }
LABEL_29:
    unint64_t v29 = *a2;
    unint64_t v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v31 = a2[3];
    if (v31)
    {
      if (v30) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29);
      }
    }
  }
}

void sub_1988AF55C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12, char a13, WTF *a14, int a15, int a16, char a17)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a13 && a12) {
    CFRelease(a12);
  }
  if (a17)
  {
    if (a14) {
      WTF::fastFree(a14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEDiffuseLighting,WTF::RawPtrTraits<WebCore::FEDiffuseLighting>,WTF::DefaultRefDerefTraits<WebCore::FEDiffuseLighting>>>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v30);
  if (!v31)
  {
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = a2[3];
    if (v19 && v18 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
    }
  }
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  uint64_t v5 = IPC::Decoder::decode<float>(a2);
  uint64_t v6 = IPC::Decoder::decode<float>(a2);
  uint64_t v7 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WTF::Ref<WebCore::LightSource,WTF::RawPtrTraits<WebCore::LightSource>,WTF::DefaultRefDerefTraits<WebCore::LightSource>>>(&v28, a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v8, (uint64_t)&v26);
  if (*a2)
  {
    uint64_t v10 = v31;
    if (!v31
      || (v4 & 0xFF00000000) == 0
      || (v5 & 0xFF00000000) == 0
      || (v6 & 0xFF00000000) == 0
      || (v7 & 0xFF00000000) == 0
      || (uint64_t v10 = v29) == 0
      || (uint64_t v10 = v27) == 0)
    {
      __break(1u);
LABEL_25:
      unint64_t v16 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v9);
      }
      goto LABEL_22;
    }
    CFTypeRef v11 = v26;
    CFTypeRef v26 = 0;
    CFTypeRef cf = v11;
    WebCore::FEDiffuseLighting::create();
    uint64_t v12 = v25;
    uint64_t v25 = 0;
    *(void *)a1 = v12;
    *(unsigned char *)(a1 + 8) = 1;
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v25, v13);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v27)
  {
    CFTypeRef v14 = v26;
    CFTypeRef v26 = 0;
    if (v14) {
      CFRelease(v14);
    }
  }
  if (v29)
  {
    uint64_t v15 = v28;
    uint64_t v28 = 0;
    if (v15)
    {
      if (v15[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
      }
      else {
        --v15[2];
      }
    }
  }
  if (v31)
  {
    uint64_t v10 = v30;
    if ((v30 & 0x8000000000000) != 0) {
      goto LABEL_25;
    }
  }
LABEL_22:
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v21 = *a2;
    uint64_t v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23)
    {
      if (v22) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
      }
    }
  }
}

void sub_1988AF814(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  if (a16 && (a15 & 0x8000000000000) != 0)
  {
    uint64_t v17 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEDisplacementMap,WTF::RawPtrTraits<WebCore::FEDisplacementMap>,WTF::DefaultRefDerefTraits<WebCore::FEDisplacementMap>>>(unsigned char *a1, uint64_t *a2)
{
  unsigned __int16 Headers = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
  unsigned __int16 v5 = IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
  uint64_t v6 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v7, (uint64_t)&v18);
  uint64_t v8 = *a2;
  if (!*a2) {
    goto LABEL_14;
  }
  if (Headers <= 0xFFu || v5 <= 0xFFu || (v6 & 0xFF00000000) == 0 || !v19)
  {
    __break(1u);
LABEL_14:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_8;
  }
  CFTypeRef v9 = v18;
  CFTypeRef v18 = 0;
  CFTypeRef cf = v9;
  WebCore::FEDisplacementMap::create();
  uint64_t v10 = v17;
  uint64_t v17 = 0;
  *(void *)a1 = v10;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v17, v11);
  if (cf) {
    CFRelease(cf);
  }
LABEL_8:
  if (v19)
  {
    CFTypeRef v12 = v18;
    CFTypeRef v18 = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  if (!v8)
  {
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v14) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
      }
    }
  }
}

void sub_1988AFA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEDropShadow,WTF::RawPtrTraits<WebCore::FEDropShadow>,WTF::DefaultRefDerefTraits<WebCore::FEDropShadow>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  uint64_t v5 = IPC::Decoder::decode<float>(a2);
  uint64_t v6 = IPC::Decoder::decode<float>(a2);
  uint64_t v7 = IPC::Decoder::decode<float>(a2);
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v27);
  if (!v28)
  {
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = a2[3];
    if (v19)
    {
      if (v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
    }
  }
  uint64_t v8 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v9, (uint64_t)&v25);
  uint64_t v11 = *a2;
  if (*a2)
  {
    if ((v4 & 0xFF00000000) == 0
      || (v5 & 0xFF00000000) == 0
      || (v6 & 0xFF00000000) == 0
      || (v7 & 0xFF00000000) == 0
      || (uint64_t v11 = v28) == 0
      || (v8 & 0xFF00000000) == 0
      || (uint64_t v11 = v26) == 0)
    {
      __break(1u);
LABEL_20:
      unint64_t v16 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v10);
      }
      goto LABEL_17;
    }
    CFTypeRef v12 = v25;
    CFTypeRef v25 = 0;
    CFTypeRef cf = v12;
    WebCore::FEDropShadow::create();
    uint64_t v13 = v24;
    uint64_t v24 = 0;
    *(void *)a1 = v13;
    *(unsigned char *)(a1 + 8) = 1;
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v24, v14);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v26)
  {
    CFTypeRef v15 = v25;
    CFTypeRef v25 = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  if (v28)
  {
    uint64_t v11 = v27;
    if ((v27 & 0x8000000000000) != 0) {
      goto LABEL_20;
    }
  }
LABEL_17:
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v20 = *a2;
    uint64_t v21 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v22 = a2[3];
    if (v22)
    {
      if (v21) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
      }
    }
  }
}

void sub_1988AFC84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, char a14)
{
  if (a14 && (a13 & 0x8000000000000) != 0)
  {
    CFTypeRef v15 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEFlood,WTF::RawPtrTraits<WebCore::FEFlood>,WTF::DefaultRefDerefTraits<WebCore::FEFlood>>>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v24);
  if (!v25)
  {
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v14 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    }
  }
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v5, (uint64_t)&v22);
  if (*a2)
  {
    uint64_t v7 = v25;
    if (!v25 || (v4 & 0xFF00000000) == 0 || (uint64_t v7 = v23) == 0)
    {
      __break(1u);
LABEL_16:
      CFTypeRef v12 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v6);
      }
      goto LABEL_13;
    }
    CFTypeRef v8 = v22;
    CFTypeRef v22 = 0;
    CFTypeRef cf = v8;
    WebCore::FEFlood::create();
    uint64_t v9 = v21;
    uint64_t v21 = 0;
    *(void *)a1 = v9;
    *(unsigned char *)(a1 + 8) = 1;
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v21, v10);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v23)
  {
    CFTypeRef v11 = v22;
    CFTypeRef v22 = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  if (v25)
  {
    uint64_t v7 = v24;
    if ((v24 & 0x8000000000000) != 0) {
      goto LABEL_16;
    }
  }
LABEL_13:
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = a2[3];
    if (v19)
    {
      if (v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
    }
  }
}

void sub_1988AFEA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, char a14)
{
  if (a14 && (a13 & 0x8000000000000) != 0)
  {
    uint64_t v15 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEGaussianBlur,WTF::RawPtrTraits<WebCore::FEGaussianBlur>,WTF::DefaultRefDerefTraits<WebCore::FEGaussianBlur>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  uint64_t v5 = IPC::Decoder::decode<float>(a2);
  unsigned __int16 v7 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a2);
  if (v7 <= 0xFFu) {
    goto LABEL_16;
  }
  while (1)
  {
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v6, (uint64_t)&v15);
    uint64_t v8 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_9;
    }
    if ((v4 & 0xFF00000000) != 0 && (v5 & 0xFF00000000) != 0 && v7 > 0xFFu && v16) {
      break;
    }
    __break(1u);
LABEL_16:
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  CFTypeRef v9 = v15;
  CFTypeRef v15 = 0;
  CFTypeRef cf = v9;
  WebCore::FEGaussianBlur::create();
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  *(void *)a1 = v10;
  a1[8] = 1;
  WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v14, v11);
  if (cf) {
    CFRelease(cf);
  }
LABEL_9:
  if (v16)
  {
    CFTypeRef v12 = v15;
    CFTypeRef v15 = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  if (!v8) {
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
}

void sub_1988B004C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Ref<WebCore::FEImage,WTF::RawPtrTraits<WebCore::FEImage>,WTF::DefaultRefDerefTraits<WebCore::FEImage>>>(unsigned char *a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::SourceImage>(v40, a2);
  uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)v39);
  unint64_t v5 = a2[1];
  uint64_t v6 = *a2;
  unint64_t v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v23 = *a2;
        uint64_t v22 = a2[1];
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_26;
  }
  uint64_t v8 = (unsigned __int8 *)(v6 + v7);
  uint64_t v9 = v6 + v7 + 1;
  a2[2] = v9;
  if (!v6)
  {
    uint64_t v22 = v5;
    uint64_t v23 = 0;
LABEL_26:
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        uint64_t v6 = *a2;
        unint64_t v5 = a2[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    goto LABEL_27;
  }
  unsigned int v10 = *v8;
  if (v10 < 0xB)
  {
    unsigned int v11 = v10 | 0x100;
    goto LABEL_5;
  }
LABEL_27:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v26 = a2[3];
  if (!v26 || !v5)
  {
    uint64_t v27 = 0;
    uint64_t v6 = 0;
    goto LABEL_29;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v6);
  unsigned int v11 = 0;
  uint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v9 = a2[2];
LABEL_5:
  unint64_t v12 = v9 - v6;
  if (v5 <= v12)
  {
    uint64_t v27 = 0;
    uint64_t v33 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v5 && v33)
    {
      (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
      uint64_t v6 = *a2;
      uint64_t v27 = a2[1];
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_29;
  }
  uint64_t v13 = (unsigned __int8 *)(v6 + v12);
  a2[2] = (uint64_t)(v13 + 1);
  if (!v6)
  {
    uint64_t v27 = v5;
LABEL_29:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v28 = a2[3];
    if (v28)
    {
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v6, v27);
        uint64_t v6 = *a2;
        unint64_t v5 = a2[1];
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    goto LABEL_31;
  }
  if (*v13 >= 3u)
  {
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
      uint64_t v14 = *a2;
      if (*a2) {
        goto LABEL_61;
      }
      __int16 v16 = 0;
    }
    else
    {
      __int16 v16 = 0;
      LODWORD(v14) = 0;
    }
    int v15 = 0;
    goto LABEL_10;
  }
  if (v11 < 0x100) {
    goto LABEL_61;
  }
  uint64_t result = WebCore::SVGPreserveAspectRatioValue::SVGPreserveAspectRatioValue();
  LODWORD(v14) = v36;
  int v15 = BYTE1(v36);
  __int16 v16 = 1;
LABEL_10:
  if (!v16)
  {
    uint64_t v29 = *a2;
    uint64_t v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v30)
      {
        int v34 = v15;
        int v35 = v14;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v29);
        int v15 = v34;
        LODWORD(v14) = v35;
      }
    }
  }
  unsigned int v17 = (v14 | (v15 << 8)) & 0xFFFEFFFF | ((v16 & 1) << 16);
  __int16 v37 = v17;
  unsigned int v18 = HIWORD(v17);
  char v38 = v18;
  uint64_t v19 = *a2;
  if (!*a2)
  {
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_16;
  }
  if (!v45 || !v39[16] || !v18)
  {
LABEL_61:
    __break(1u);
    return result;
  }
  WebCore::FEImage::create();
  uint64_t v20 = v36;
  uint64_t v36 = 0;
  *(void *)a1 = v20;
  a1[8] = 1;
  uint64_t result = (uint64_t)WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v36, v21);
LABEL_16:
  if (v45)
  {
    if (v44)
    {
      if (v43 != -1) {
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9B4B40[v43])(v39, &v42);
      }
      int v43 = -1;
    }
    if (v41 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9B4B40[v41])(v39, v40);
    }
  }
  if (!v19)
  {
    uint64_t v31 = *a2;
    uint64_t v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v32) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v31);
      }
    }
  }
  return result;
}

void sub_1988B04C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, int a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if ((_BYTE)a24)
  {
    if (a22)
    {
      if (a20 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9B4B40[a20])(&a13, &a19);
      }
      a20 = -1;
    }
    if (a18 != -1) {
      ((void (*)(char *, char *))off_1EE9B4B40[a18])(&a13, &a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEMerge,WTF::RawPtrTraits<WebCore::FEMerge>,WTF::DefaultRefDerefTraits<WebCore::FEMerge>>>(unsigned char *a1, uint64_t *a2)
{
  int v2 = a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    a2[2] = v5 + v6 + 4;
    if (v5)
    {
      int v8 = 0;
      goto LABEL_8;
    }
    uint64_t v14 = v4;
    a2 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    a2 = 0;
    *int v2 = 0;
    v2[1] = 0;
    uint64_t v15 = v2[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v5, v4);
        a2 = (uint64_t *)*v2;
        uint64_t v14 = v2[1];
      }
      else
      {
        uint64_t v14 = 0;
        a2 = 0;
      }
    }
  }
  *int v2 = 0;
  v2[1] = 0;
  uint64_t v16 = v2[3];
  if (v16 && v14) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 16))(v16, a2);
  }
  int v8 = 1;
LABEL_8:
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(v2, a2, (uint64_t)&v22);
  uint64_t v9 = *v2;
  if (!*v2)
  {
LABEL_19:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_13;
  }
  if (v8 || !v23)
  {
    __break(1u);
    goto LABEL_19;
  }
  CFTypeRef v10 = v22;
  CFTypeRef v22 = 0;
  CFTypeRef cf = v10;
  WebCore::FEMerge::create();
  uint64_t v11 = v21;
  uint64_t v21 = 0;
  *(void *)a1 = v11;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v21, v12);
  if (cf) {
    CFRelease(cf);
  }
LABEL_13:
  if (v23)
  {
    CFTypeRef v13 = v22;
    CFTypeRef v22 = 0;
    if (v13) {
      CFRelease(v13);
    }
  }
  if (!v9)
  {
    uint64_t v17 = *v2;
    uint64_t v18 = v2[1];
    *int v2 = 0;
    v2[1] = 0;
    uint64_t v19 = v2[3];
    if (v19)
    {
      if (v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
    }
  }
}

void sub_1988B0738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEMorphology,WTF::RawPtrTraits<WebCore::FEMorphology>,WTF::DefaultRefDerefTraits<WebCore::FEMorphology>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_18;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v19 = v6;
    uint64_t v20 = 0;
    goto LABEL_19;
  }
  unsigned int v9 = *v8;
  if (v9 >= 3) {
    goto LABEL_20;
  }
  for (unsigned int i = v9 | 0x100; ; unsigned int i = 0)
  {
    uint64_t v11 = IPC::Decoder::decode<float>(a2);
    uint64_t v12 = IPC::Decoder::decode<float>(a2);
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v13, (uint64_t)&v29);
    uint64_t v14 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_12;
    }
    if (i > 0xFF && (v11 & 0xFF00000000) != 0 && (v12 & 0xFF00000000) != 0 && v30) {
      break;
    }
    __break(1u);
LABEL_18:
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = a2[3];
    if (v21)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        uint64_t v20 = *a2;
        uint64_t v19 = a2[1];
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
LABEL_19:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v22 = a2[3];
    if (v22)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v5);
    }
  }
  CFTypeRef v15 = v29;
  CFTypeRef v29 = 0;
  CFTypeRef cf = v15;
  WebCore::FEMorphology::create();
  uint64_t v16 = v28;
  uint64_t v28 = 0;
  *(void *)a1 = v16;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v28, v17);
  if (cf) {
    CFRelease(cf);
  }
LABEL_12:
  if (v30)
  {
    CFTypeRef v18 = v29;
    CFTypeRef v29 = 0;
    if (v18) {
      CFRelease(v18);
    }
  }
  if (!v14)
  {
    uint64_t v24 = *a2;
    uint64_t v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26)
    {
      if (v25) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
      }
    }
  }
}

void sub_1988B09D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FEOffset,WTF::RawPtrTraits<WebCore::FEOffset>,WTF::DefaultRefDerefTraits<WebCore::FEOffset>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  uint64_t v5 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v6, (uint64_t)&v14);
  uint64_t v7 = *a2;
  if (!*a2) {
    goto LABEL_14;
  }
  if ((v4 & 0xFF00000000) == 0 || (v5 & 0xFF00000000) == 0 || !v15)
  {
    __break(1u);
LABEL_14:
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_7;
  }
  CFTypeRef v8 = v14;
  CFTypeRef v14 = 0;
  CFTypeRef cf = v8;
  WebCore::FEOffset::create();
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  *(void *)a1 = v9;
  a1[8] = 1;
  WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v13, v10);
  if (cf) {
    CFRelease(cf);
  }
LABEL_7:
  if (v15)
  {
    CFTypeRef v11 = v14;
    CFTypeRef v14 = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  if (!v7) {
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
}

void sub_1988B0B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FETile,WTF::RawPtrTraits<WebCore::FETile>,WTF::DefaultRefDerefTraits<WebCore::FETile>>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, a2, (uint64_t)&v14);
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (!v15)
    {
      __break(1u);
LABEL_12:
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v11 = a2[3];
      if (v11)
      {
        if (v10) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
        }
      }
      return;
    }
    CFTypeRef v5 = v14;
    CFTypeRef v14 = 0;
    CFTypeRef cf = v5;
    WebCore::FETile::create();
    uint64_t v6 = v13;
    uint64_t v13 = 0;
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = 1;
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v13, v7);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v15)
  {
    CFTypeRef v8 = v14;
    CFTypeRef v14 = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  if (!v4) {
    goto LABEL_12;
  }
}

void sub_1988B0C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FESpecularLighting,WTF::RawPtrTraits<WebCore::FESpecularLighting>,WTF::DefaultRefDerefTraits<WebCore::FESpecularLighting>>>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v31);
  if (!v32)
  {
    uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (v20 && v19 != 0) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
    }
  }
  uint64_t v4 = IPC::Decoder::decode<float>(a2);
  uint64_t v5 = IPC::Decoder::decode<float>(a2);
  uint64_t v6 = IPC::Decoder::decode<float>(a2);
  uint64_t v7 = IPC::Decoder::decode<float>(a2);
  uint64_t v8 = IPC::Decoder::decode<float>(a2);
  IPC::Decoder::decode<WTF::Ref<WebCore::LightSource,WTF::RawPtrTraits<WebCore::LightSource>,WTF::DefaultRefDerefTraits<WebCore::LightSource>>>(&v29, a2);
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v9, (uint64_t)&v27);
  if (*a2)
  {
    uint64_t v11 = v32;
    if (!v32
      || (v4 & 0xFF00000000) == 0
      || (v5 & 0xFF00000000) == 0
      || (v6 & 0xFF00000000) == 0
      || (v7 & 0xFF00000000) == 0
      || (v8 & 0xFF00000000) == 0
      || (uint64_t v11 = v30) == 0
      || (uint64_t v11 = v28) == 0)
    {
      __break(1u);
LABEL_26:
      uint64_t v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v10);
      }
      goto LABEL_23;
    }
    CFTypeRef v12 = v27;
    CFTypeRef v27 = 0;
    CFTypeRef cf = v12;
    WebCore::FESpecularLighting::create();
    uint64_t v13 = v26;
    uint64_t v26 = 0;
    *(void *)a1 = v13;
    *(unsigned char *)(a1 + 8) = 1;
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v26, v14);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v28)
  {
    CFTypeRef v15 = v27;
    CFTypeRef v27 = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  if (v30)
  {
    uint64_t v16 = v29;
    CFTypeRef v29 = 0;
    if (v16)
    {
      if (v16[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
      }
      else {
        --v16[2];
      }
    }
  }
  if (v32)
  {
    uint64_t v11 = v31;
    if ((v31 & 0x8000000000000) != 0) {
      goto LABEL_26;
    }
  }
LABEL_23:
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v22 = *a2;
    uint64_t v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24)
    {
      if (v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
      }
    }
  }
}

void sub_1988B0EF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  if (a16 && (a15 & 0x8000000000000) != 0)
  {
    uint64_t v17 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::FETurbulence,WTF::RawPtrTraits<WebCore::FETurbulence>,WTF::DefaultRefDerefTraits<WebCore::FETurbulence>>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = (char *)*a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7) {
    goto LABEL_25;
  }
  uint64_t v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v25 = v6;
    uint64_t v26 = 0;
    goto LABEL_26;
  }
  unsigned int v9 = *v8;
  if (v9 >= 3) {
    goto LABEL_27;
  }
  for (unsigned int i = v9 | 0x100; ; unsigned int i = 0)
  {
    uint64_t v11 = IPC::Decoder::decode<float>(a2);
    uint64_t v12 = IPC::Decoder::decode<float>(a2);
    uint64_t v13 = IPC::Decoder::decode<unsigned int>(a2);
    uint64_t v14 = IPC::Decoder::decode<float>(a2);
    unint64_t v15 = a2[1];
    uint64_t v16 = (char *)*a2;
    unint64_t v17 = a2[2] - *a2;
    if (v15 <= v17)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v32 = a2[3];
      if (v32)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
          uint64_t v31 = *a2;
          uint64_t v30 = a2[1];
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
        }
      }
      goto LABEL_30;
    }
    uint64_t v18 = &v16[v17];
    a2[2] = (uint64_t)(v18 + 1);
    if (!v16)
    {
      uint64_t v30 = v15;
      uint64_t v31 = 0;
LABEL_30:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v33 = a2[3];
      if (v33 && v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31, v30);
        uint64_t v16 = (char *)*a2;
        unint64_t v15 = a2[1];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
      goto LABEL_32;
    }
    if (*v18 < 2u)
    {
      int v19 = 0;
      goto LABEL_9;
    }
LABEL_32:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34 && v15) {
      (*(void (**)(uint64_t, char *))(*(void *)v34 + 16))(v34, v16);
    }
    int v19 = 1;
LABEL_9:
    IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, v16, (uint64_t)&v40);
    uint64_t v20 = *a2;
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      goto LABEL_19;
    }
    if (i > 0xFF
      && (v11 & 0xFF00000000) != 0
      && (v12 & 0xFF00000000) != 0
      && (v13 & 0xFF00000000) != 0
      && (v14 & 0xFF00000000) != 0
      && !v19
      && v41)
    {
      break;
    }
    __break(1u);
LABEL_25:
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v26 = *a2;
        uint64_t v25 = a2[1];
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
LABEL_26:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v28 = a2[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        uint64_t v5 = (char *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_27:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v29 = a2[3];
    if (v29 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v29 + 16))(v29, v5);
    }
  }
  CFTypeRef v21 = v40;
  CFTypeRef v40 = 0;
  CFTypeRef cf = v21;
  WebCore::FETurbulence::create();
  uint64_t v22 = v39;
  uint64_t v39 = 0;
  *(void *)a1 = v22;
  a1[8] = 1;
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v39, v23);
  if (cf) {
    CFRelease(cf);
  }
LABEL_19:
  if (v41)
  {
    CFTypeRef v24 = v40;
    CFTypeRef v40 = 0;
    if (v24) {
      CFRelease(v24);
    }
  }
  if (!v20)
  {
    uint64_t v35 = *a2;
    uint64_t v36 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v37 = a2[3];
    if (v37)
    {
      if (v36) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
      }
    }
  }
}

void sub_1988B13B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::SourceAlpha,WTF::RawPtrTraits<WebCore::SourceAlpha>,WTF::DefaultRefDerefTraits<WebCore::SourceAlpha>>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, a2, (uint64_t)&cf);
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (!v10)
    {
      __break(1u);
LABEL_11:
      IPC::Decoder::markInvalid((IPC::Decoder *)a2);
      return;
    }
    WebCore::SourceAlpha::create();
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
    WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v8, v6);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v10)
  {
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  if (!v4) {
    goto LABEL_11;
  }
}

void sub_1988B1494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<WebCore::SourceGraphic,WTF::RawPtrTraits<WebCore::SourceGraphic>,WTF::DefaultRefDerefTraits<WebCore::SourceGraphic>>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a2, a2, (uint64_t)&v11);
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (!v12)
    {
      __break(1u);
LABEL_12:
      IPC::Decoder::markInvalid((IPC::Decoder *)a2);
      return;
    }
    CFTypeRef v5 = v11;
    CFTypeRef v11 = 0;
    CFTypeRef cf = v5;
    WebCore::SourceGraphic::create();
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = 1;
    WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v10, v7);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v12)
  {
    CFTypeRef v8 = v11;
    CFTypeRef v11 = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  if (!v4) {
    goto LABEL_12;
  }
}

void sub_1988B1584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 2);
  uint64_t v4 = a2[3];

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    CFTypeRef v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v24 = v4;
    uint64_t v25 = 0;
  }
  else
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v5, v4);
        uint64_t v25 = *(void *)a1;
        unint64_t v24 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v27 = *((void *)a1 + 3);
  if (v27 && v24) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
  }
  uint64_t v10 = 0;
  int v9 = 1;
LABEL_8:
  unint64_t v11 = IPC::Decoder::decode<long long>(a1);
  char v13 = v12;
  unint64_t v14 = *((void *)a1 + 1);
  uint64_t v15 = *(void *)a1;
  unint64_t v16 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v14 >= v16 && v14 - v16 > 7)
  {
    uint64_t v18 = (uint64_t *)(v15 + v16);
    *((void *)a1 + 2) = v18 + 1;
    if (v15)
    {
      int v19 = 0;
      uint64_t v20 = *v18;
      goto LABEL_15;
    }
    unint64_t v28 = v14;
    uint64_t v29 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v30 = *((void *)a1 + 3);
    if (v30)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v15, v14);
        uint64_t v29 = *(void *)a1;
        unint64_t v28 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v28 = 0;
        uint64_t v29 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v31 = *((void *)a1 + 3);
  if (v31 && v28) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
  }
  uint64_t v20 = 0;
  int v19 = 1;
LABEL_15:
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  uint64_t v23 = *(void *)a1;
  if (!*(void *)a1)
  {
LABEL_23:
    *(unsigned char *)a2 = 0;
    goto LABEL_21;
  }
  if (v9 || !v13 || v19 || !v22)
  {
    __break(1u);
    goto LABEL_23;
  }
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  LOBYTE(v23) = 1;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = result;
LABEL_21:
  *(unsigned char *)(a2 + 32) = v23;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 16) & 1);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, (*(unsigned char *)(a2 + 16) & 2) != 0);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, (*(unsigned char *)(a2 + 16) & 4) != 0);
  int v4 = (*(unsigned __int8 *)(a2 + 16) >> 3) & 1;

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v10);
  unsigned __int16 v4 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a1);
  if (v4 <= 0xFFu) {
    goto LABEL_16;
  }
  while (1)
  {
    unsigned __int16 v5 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a1);
    if (v5 <= 0xFFu) {
      IPC::Decoder::markInvalid(a1);
    }
    unsigned __int16 v6 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a1);
    if (v6 <= 0xFFu) {
      IPC::Decoder::markInvalid(a1);
    }
    uint64_t result = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(a1);
    unsigned __int16 v8 = result;
    if ((unsigned __int16)result <= 0xFFu) {
      uint64_t result = IPC::Decoder::markInvalid(a1);
    }
    if (!*(void *)a1) {
      break;
    }
    if (v12)
    {
      *(void *)&long long v9 = v10;
      BYTE8(v9) = v11;
      if (v4 > 0xFFu && v5 > 0xFFu && v6 > 0xFFu && v8 > 0xFFu)
      {
        *(_OWORD *)a2 = v9;
        *(unsigned char *)(a2 + 16) = (2 * v5) & 0x72 | v4 & 0xF1 | (4 * v6) & 0x77 | (8 * v8);
        *(unsigned char *)(a2 + 24) = 1;
        return result;
      }
    }
    __break(1u);
LABEL_16:
    IPC::Decoder::markInvalid(a1);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::Cursor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a2 == 44)
  {
    if ((*(float (**)(void, void))(**(void **)(a2 + 8) + 168))(*(void *)(a2 + 8), 0) <= 0.0
      || v4 <= 0.0)
    {
      LOBYTE(v12[0]) = 0;
      char v13 = 0;
      int v7 = 1;
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
      uint64_t v6 = *(void *)(a2 + 16);
      v12[0] = v5;
      v12[1] = v6;
      int v7 = 1;
      char v13 = 1;
    }
  }
  else
  {
    int v7 = 0;
    LOBYTE(v12[0]) = *(unsigned char *)a2;
  }
  int v14 = v7;
  unsigned __int8 v9 = v7;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v9);
  uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::encode<IPC::Encoder,std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>>(a1, (uint64_t)v11, v9);
  if (v14 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v14])(&v10, v12);
  }
  return result;
}

void sub_1988B1B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a18 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a18])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::Cursor,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>>(a1, (uint64_t)v6);
  if (*a1)
  {
    if (!v9) {
      goto LABEL_13;
    }
    if (v8 != 1)
    {
      if (!v8)
      {
        std::invoke[abi:sn180100]<WTF::Visitor<WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &&)::{lambda(WebCore::PlatformCursorType&&)#1},WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &)::{lambda(std::optional<WebCore::Cursor::CustomCursorIPCData>&&)#1}>,WebCore::PlatformCursorType>(v7, (uint64_t)a2);
        goto LABEL_7;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_13:
      __break(1u);
      return;
    }
    v4.n128_f64[0] = std::invoke[abi:sn180100]<WTF::Visitor<WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &&)::{lambda(WebCore::PlatformCursorType&&)#1},WebCore::Cursor::fromIPCData(std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>> &)::{lambda(std::optional<WebCore::Cursor::CustomCursorIPCData>&&)#1}>,std::optional<WebCore::Cursor::CustomCursorIPCData>>((WebCore::Image *)&v5, (uint64_t)v7, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
LABEL_7:
  if (v9)
  {
    if (v8 != -1) {
      ((void (*)(char *, unsigned __int8 *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v8])(&v5, v7, v4);
    }
  }
}

void sub_1988B1C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19)
{
}

uint64_t *IPC::Decoder::decode<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::PlatformCursorType,std::optional<WebCore::Cursor::CustomCursorIPCData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988B1D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 40))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 32);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18PlatformCursorTypeENS_8optionalINS6_6Cursor19CustomCursorIPCDataEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v15])(&a13, v13 + 8);
    }
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::LightSource,void>::encode(IPC::Encoder *result, uint64_t a2)
{
  BOOL v3 = result;
  int v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 == 2)
  {
    char v8 = 2;
    IPC::Encoder::operator<<<BOOL>(result, &v8);
    IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (float *)(a2 + 16));
    IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (float *)(a2 + 28));
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v3, *(float *)(a2 + 52));
    float v5 = *(float *)(a2 + 56);
    return (IPC::Encoder *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v3, v5);
  }
  if (v4 != 1)
  {
    if (*(unsigned char *)(a2 + 12)) {
      return result;
    }
    char v6 = 0;
    IPC::Encoder::operator<<<BOOL>(result, &v6);
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v3, *(float *)(a2 + 16));
    float v5 = *(float *)(a2 + 20);
    return (IPC::Encoder *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v3, v5);
  }
  char v7 = 1;
  IPC::Encoder::operator<<<BOOL>(result, &v7);
  return (IPC::Encoder *)IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (float *)(a2 + 16));
}

uint64_t *IPC::ArgumentCoder<WebCore::LightSource,void>::encode(uint64_t *result, uint64_t a2)
{
  BOOL v3 = result;
  int v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 == 2)
  {
    unint64_t v17 = result[2];
    if (v17 >= result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v17) = 2;
      result[2] = v17 + 1;
    }
    IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(result, (_DWORD *)(a2 + 16));
    uint64_t result = IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(v3, (_DWORD *)(a2 + 28));
    uint64_t v18 = *v3;
    unint64_t v19 = v3[2];
    unint64_t v20 = *v3 + v19;
    unint64_t v21 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v9 = v21 >= v20;
    unint64_t v22 = v21 - v20;
    if (v9)
    {
      unint64_t v23 = v22 + v19;
      unint64_t v24 = v22 + v19 + 4;
      if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > v3[1])
      {
        v3[1] = 0;
      }
      else
      {
        *(_DWORD *)(v18 + v23) = *(_DWORD *)(a2 + 52);
        v3[2] = v24;
        uint64_t v18 = *v3;
        unint64_t v19 = v24;
      }
    }
    uint64_t v26 = (_DWORD *)((v18 + v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v26 >= v18 + v19)
    {
      unint64_t v15 = (unint64_t)v26 - v18 + 4;
      if ((unint64_t)v26 - v18 <= 0xFFFFFFFFFFFFFFFBLL && v15 <= v3[1])
      {
        *uint64_t v26 = *(_DWORD *)(a2 + 56);
        goto LABEL_34;
      }
LABEL_41:
      v3[1] = 0;
    }
  }
  else if (v4 == 1)
  {
    unint64_t v28 = result[2];
    if (v28 >= result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v28) = 1;
      result[2] = v28 + 1;
    }
    uint64_t v29 = (_DWORD *)(a2 + 16);
    return IPC::ArgumentCoder<WebCore::FloatPoint3D,void>::encode(result, v29);
  }
  else if (!*(unsigned char *)(a2 + 12))
  {
    unint64_t v5 = result[2];
    if (v5 >= result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v5++) = 0;
      result[2] = v5;
    }
    uint64_t v6 = *result;
    unint64_t v7 = *result + v5;
    unint64_t v8 = (v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v9 = v8 >= v7;
    unint64_t v10 = v8 - v7;
    if (v9)
    {
      unint64_t v11 = v10 + v5;
      unint64_t v12 = v10 + v5 + 4;
      if (v11 > 0xFFFFFFFFFFFFFFFBLL || v12 > result[1])
      {
        result[1] = 0;
      }
      else
      {
        *(_DWORD *)(v6 + v11) = *(_DWORD *)(a2 + 16);
        result[2] = v12;
        uint64_t v6 = *result;
        unint64_t v5 = v12;
      }
    }
    int v14 = (_DWORD *)((v6 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v14 >= v6 + v5)
    {
      unint64_t v15 = (unint64_t)v14 - v6 + 4;
      if ((unint64_t)v14 - v6 <= 0xFFFFFFFFFFFFFFFBLL && v15 <= result[1])
      {
        *int v14 = *(_DWORD *)(a2 + 20);
LABEL_34:
        v3[2] = v15;
        return result;
      }
      goto LABEL_41;
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::Image,void>::encode(IPC::Encoder *a1, WebCore::Image *this)
{
  WebCore::Image::toShareableBitmap((uint64_t *)&v5, this);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>,void>::encode<IPC::Encoder,WebCore::ShareableBitmap>(a1, &v5);
  uint64_t result = v5;
  unint64_t v5 = 0;
  if (result) {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v3);
  }
  return result;
}

void sub_1988B209C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::Image,void>::decode(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>((WTF::MachSendRight *)&v6, a2);
  if (*a2)
  {
    if (!v7)
    {
      __break(1u);
      return result;
    }
    uint64_t result = WebCore::Image::create();
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
  if (v7)
  {
    uint64_t result = (uint64_t)v6;
    uint64_t v6 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v5);
    }
  }
  return result;
}

void sub_1988B2130(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, char a10)
{
  if (a10)
  {
    if (a9) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::Length::RelativeData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<float,int>,void>::encode<IPC::Encoder,std::variant<float,int> const&>(a1, (int *)a2, v5);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
}

IPC::Encoder *IPC::Encoder::operator<<<std::variant<float,int> const&>(IPC::Encoder *a1, int *a2)
{
  unsigned __int8 v5 = a2[1];
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<float,int>,void>::encode<IPC::Encoder,std::variant<float,int> const&>(a1, a2, v5);
  return a1;
}

uint64_t IPC::Decoder::decode<std::variant<float,int>>(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v3, v2);
        uint64_t v14 = *a1;
        unint64_t v13 = a1[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_19;
  }
  unsigned __int8 v5 = (unsigned char *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    unint64_t v13 = v2;
    uint64_t v14 = 0;
LABEL_19:
    uint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (!v16) {
      goto LABEL_5;
    }
    if (v13) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
    }
LABEL_4:
    uint64_t v6 = 0;
LABEL_5:
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
    }
    return v6;
  }
  if (*v5 > 1u) {
    goto LABEL_4;
  }
  if (!*v5)
  {
    uint64_t v11 = IPC::Decoder::decode<float>(a1);
    if ((v11 & 0xFF00000000) != 0) {
      return v11;
    }
    goto LABEL_4;
  }
  uint64_t v10 = IPC::Decoder::decode<unsigned int>(a1);
  if ((v10 & 0xFF00000000) != 0) {
    uint64_t v6 = v10 | 0x100000000;
  }
  else {
    uint64_t v6 = 0;
  }
  if ((v10 & 0xFF00000000) == 0) {
    goto LABEL_5;
  }
  return v6;
}

_DWORD *IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));
  int v4 = *(_DWORD *)(a2 + 16);
  unsigned __int8 v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3 || (*unsigned __int8 v5 = v4, v7 = *(_DWORD *)(a2 + 20), result = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4), v9 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1988B2554);
  }
  *uint64_t result = v7;
  return result;
}

void IPC::ArgumentCoder<WebCore::ShareableResourceHandle,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v24);
  unint64_t v5 = *((void *)a1 + 1);
  unint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    unint64_t v9 = (int *)(v6 + v7);
    *((void *)a1 + 2) = v9 + 1;
    if (v6)
    {
      int v10 = 0;
      int v11 = *v9;
      unsigned int v12 = v11 & 0xFFFFFF00;
      int v13 = v11;
      unint64_t v14 = v6;
      goto LABEL_8;
    }
    unint64_t v14 = v5;
    uint64_t v19 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v4 = *((void *)a1 + 3);
    if (v4) {
      goto LABEL_34;
    }
  }
  while (1)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v4 = *((void *)a1 + 3);
    if (!v4)
    {
      unint64_t v14 = 0;
LABEL_25:
      unint64_t v5 = 0;
      unint64_t v6 = 0;
      unsigned int v12 = 0;
      int v13 = 0;
      int v10 = 1;
      goto LABEL_8;
    }
    if (!v14) {
      goto LABEL_25;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v4 + 16))(v4, v19, v14);
    unsigned int v12 = 0;
    int v13 = 0;
    unint64_t v14 = *(void *)a1;
    unint64_t v5 = *((void *)a1 + 1);
    int v10 = 1;
    unint64_t v6 = *(void *)a1;
LABEL_8:
    unint64_t v15 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
    if (v5 >= v15 && v5 - v15 > 3) {
      break;
    }
    unint64_t v18 = 0;
    unint64_t v14 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        unint64_t v14 = *(void *)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v14 = 0;
      }
    }
LABEL_27:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v21 = *((void *)a1 + 3);
    if (!v21) {
      goto LABEL_28;
    }
    if (!v18) {
      goto LABEL_28;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v21 + 16))(v21, v14, v18);
    if (!*(void *)a1) {
      goto LABEL_28;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t v19 = *(void *)a1;
      unint64_t v14 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v19 = 0;
    }
  }
  unint64_t v17 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *((void *)a1 + 2) = v17 + 1;
  unint64_t v18 = v5;
  if (!v6) {
    goto LABEL_27;
  }
  if (v10) {
    goto LABEL_33;
  }
  unint64_t v5 = v13 | v12;
  if (__CFADD__(v5, *v17))
  {
    __break(0xC471u);
    JUMPOUT(0x1988B27F8);
  }
  if (!v26) {
    goto LABEL_33;
  }
  if (v25 >= (*v17 + v5))
  {
    WebCore::ShareableResourceHandle::ShareableResourceHandle();
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a2 + 8) = v23;
    *(unsigned char *)(a2 + 24) = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v22);
    goto LABEL_19;
  }
LABEL_28:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
LABEL_19:
  if (v26) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v24);
  }
}

void sub_1988B2814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  if (a16) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<DDScannerResult>,void>::decode<DDScannerResult,DDScannerResult*>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1988B28B8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v3 = *(const void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::ShareableBitmapConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v17 = *(_DWORD *)a2;
  IPC::Encoder::operator<<<int>(a1, &v17);
  int v16 = *(_DWORD *)(a2 + 4);
  IPC::Encoder::operator<<<int>(a1, &v16);
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v5) {
      goto LABEL_18;
    }
    *uint64_t v4 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_18;
    }
    IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(a1, (CFTypeRef *)(a2 + 8));
  }
  else
  {
    char v18 = 0;
    IPC::Encoder::operator<<<BOOL>(a1, &v18);
  }
  char v6 = *(unsigned char *)(a2 + 24);
  BOOL v7 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B2A38);
  }
  *BOOL v7 = v6;
  if (*(unsigned char *)(a2 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x1988B2A80);
  }
  int v9 = *(_DWORD *)(a2 + 32);
  int v10 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v11 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B2A58);
  }
  *int v10 = v9;
  if (*(unsigned char *)(a2 + 36))
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1988B2A18);
  }
  int v12 = *(_DWORD *)(a2 + 40);
  int v13 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v14 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B2A78);
  }
  *int v13 = v12;
  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 44));
}

unint64_t IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));

  return IPC::ArgumentCoder<WebCore::ShareableBitmapConfiguration,void>::encode(a1, a2 + 16);
}

void IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v82);
  BOOL v7 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  if (!(_BYTE)v8)
  {
    uint64_t v39 = *(void *)a1;
    uint64_t v40 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v41 = *((void *)a1 + 3);
    if (v41)
    {
      if (v40)
      {
        int v9 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39);
        if (*(void *)a1) {
          goto LABEL_87;
        }
      }
    }
    goto LABEL_66;
  }
  unint64_t v90 = v7;
  int v91 = v8;
  if (!*(void *)a1 || ((unint64_t)v7 & 0x8000000080000000) != 0)
  {
LABEL_66:
    int v32 = 0;
    unsigned int v2 = 0;
    int v35 = 0;
    LOBYTE(v73) = 0;
    unsigned __int8 v81 = 0;
    goto LABEL_67;
  }
  IPC::Decoder::decode<std::optional<WebCore::DestinationColorSpace>>((uint64_t *)a1, (uint64_t)&v87);
  unint64_t v10 = *((void *)a1 + 1);
  unint64_t v11 = *(void *)a1;
  unint64_t v12 = *((void *)a1 + 2) - *(void *)a1;
  if (v10 <= v12)
  {
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
        uint64_t v43 = *(void *)a1;
        unint64_t v42 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v42 = 0;
        uint64_t v43 = 0;
      }
    }
    goto LABEL_70;
  }
  int v13 = (unsigned __int8 *)(v11 + v12);
  *((void *)a1 + 2) = v13 + 1;
  if (!v11)
  {
    unint64_t v42 = v10;
    uint64_t v43 = 0;
LABEL_70:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v45 = *((void *)a1 + 3);
    if (v45 && v42)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v45 + 16))(v45, v43, v42);
      unsigned int v2 = 0;
      unint64_t v11 = *(void *)a1;
      unint64_t v10 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      unsigned int v2 = 0;
    }
    goto LABEL_72;
  }
  unsigned int v2 = *v13;
  if (v2 >= 2)
  {
LABEL_72:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int v9 = (const void *)*((void *)a1 + 3);
    if (v9) {
      goto LABEL_88;
    }
    unint64_t v11 = 0;
    unint64_t v10 = 0;
    goto LABEL_74;
  }
  int v14 = 0;
  int v15 = 1;
  while (1)
  {
    int v16 = v2 ? v15 : 0;
    unint64_t v17 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v11;
    if (v10 < v17 || v10 - v17 <= 3)
    {
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v48 = *((void *)a1 + 3);
      if (v48)
      {
        int v57 = v14;
        int v58 = v16;
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
          uint64_t v47 = *(void *)a1;
          unint64_t v46 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v46 = 0;
          uint64_t v47 = 0;
        }
        int v16 = v58;
        int v14 = v57;
      }
    }
    else
    {
      char v18 = (int *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *((void *)a1 + 2) = v18 + 1;
      if (v11)
      {
        int v19 = 0;
        int v20 = *v18;
        unsigned int v21 = v20 & 0xFFFFFF00;
        unsigned int v22 = v20;
        goto LABEL_15;
      }
      unint64_t v46 = v10;
      uint64_t v47 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int v9 = (const void *)*((void *)a1 + 3);
    if (v9)
    {
      int v52 = v14;
      int v53 = v16;
      if (v46)
      {
        int v9 = (const void *)(*(uint64_t (**)(const void *, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v47, v46);
        unsigned int v21 = 0;
        unsigned int v22 = 0;
        unint64_t v11 = *(void *)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v10 = 0;
        unsigned int v21 = 0;
        unsigned int v22 = 0;
      }
      int v19 = 1;
      int v16 = v53;
      int v14 = v52;
    }
    else
    {
      unint64_t v11 = 0;
      unint64_t v10 = 0;
      unsigned int v21 = 0;
      unsigned int v22 = 0;
      int v19 = 1;
    }
LABEL_15:
    unint64_t v23 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v11;
    if (v10 < v23 || v10 - v23 <= 3)
    {
      unint64_t v26 = 0;
      uint64_t v49 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v50 = *((void *)a1 + 3);
      if (v50)
      {
        int v59 = v19;
        unsigned int v60 = v22;
        unsigned int v61 = v21;
        LODWORD(v3) = v14;
        unsigned int v4 = v16;
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
          uint64_t v49 = *(void *)a1;
          unint64_t v26 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v26 = 0;
          uint64_t v49 = 0;
        }
        int v14 = v3;
        unsigned int v21 = v61;
        unsigned int v22 = v60;
        int v19 = v59;
      }
    }
    else
    {
      unint64_t v24 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *((void *)a1 + 2) = v24 + 1;
      if (v11)
      {
        int v25 = 0;
        unsigned int v2 = *v24 & 0xFFFFFF00;
        unint64_t v26 = v11;
        goto LABEL_19;
      }
      unint64_t v26 = v10;
      uint64_t v49 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int v9 = (const void *)*((void *)a1 + 3);
    if (v9)
    {
      int v54 = v19;
      unsigned int v55 = v22;
      LODWORD(v3) = v21;
      unsigned int v4 = v14;
      if (v26)
      {
        int v9 = (const void *)(*(uint64_t (**)(const void *, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v49, v26);
        unsigned int v2 = 0;
        unint64_t v11 = *(void *)a1;
        unint64_t v10 = *((void *)a1 + 1);
        int v25 = 1;
        unint64_t v26 = *(void *)a1;
      }
      else
      {
        unint64_t v11 = 0;
        unint64_t v10 = 0;
        unsigned int v2 = 0;
        int v25 = 1;
      }
      int v14 = v4;
      unsigned int v22 = v55;
      int v19 = v54;
    }
    else
    {
      unint64_t v11 = 0;
      unint64_t v10 = 0;
      unint64_t v26 = 0;
      unsigned int v2 = 0;
      int v25 = 1;
    }
LABEL_19:
    unint64_t v27 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v26;
    if (v10 < v27 || v10 - v27 <= 3)
    {
      unint64_t v28 = 0;
      unint64_t v11 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v51 = *((void *)a1 + 3);
      if (v51)
      {
        int v65 = v25;
        unsigned int v4 = v19;
        LODWORD(v3) = v22;
        int v62 = v14;
        if (v10)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v51 + 16))(v51, v26);
          unint64_t v11 = *(void *)a1;
          unint64_t v28 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v28 = 0;
          unint64_t v11 = 0;
        }
        int v14 = v62;
        unsigned int v22 = v3;
        int v19 = v4;
        int v25 = v65;
      }
    }
    else
    {
      *((void *)a1 + 2) = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      unint64_t v28 = v10;
      if (v26)
      {
        int v29 = 0;
        goto LABEL_23;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int v9 = (const void *)*((void *)a1 + 3);
    if (!v9
      || !v28
      || (int v64 = v25,
          LODWORD(v3) = v19,
          unsigned int v4 = v22,
          int v56 = v14,
          int v9 = (const void *)(*(uint64_t (**)(const void *))(*(void *)v9 + 16))(v9),
          int v25 = v64,
          !*(void *)a1))
    {
      int v32 = 0;
      unsigned int v2 = 0;
      int v35 = 0;
      LOBYTE(v73) = 0;
      unsigned __int8 v81 = 0;
      int v34 = 1;
      goto LABEL_41;
    }
    int v14 = v56;
    int v19 = v3;
    int v29 = 1;
LABEL_23:
    if (!v89) {
      goto LABEL_87;
    }
    LOBYTE(v85) = 0;
    char v86 = 0;
    if (v88)
    {
      uint64_t v30 = v87;
      unint64_t v87 = 0;
      unint64_t v85 = v30;
      char v86 = 1;
    }
    if (v14 || v19 || v25 || v29) {
      goto LABEL_87;
    }
    int v9 = (const void *)WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration();
    unint64_t v73 = v66;
    LOBYTE(v74) = 0;
    unsigned __int8 v75 = 0;
    if (v68)
    {
      CFTypeRef v31 = cf;
      CFTypeRef cf = 0;
      CFTypeRef v74 = v31;
      unsigned int v2 = 1;
      unsigned __int8 v75 = 1;
    }
    else
    {
      unsigned int v2 = 0;
    }
    char v76 = (char)v69;
    BOOL v77 = BYTE4(v69) != 0;
    int v32 = 0;
    int v78 = v70;
    char v79 = 0;
    if (v71)
    {
      int v32 = 1;
      char v79 = 1;
    }
    unsigned int v33 = v72;
    uint64_t v80 = v72;
    unsigned __int8 v81 = 1;
    if (v68)
    {
      int v9 = cf;
      CFTypeRef cf = 0;
      if (v9)
      {
        CFRelease(v9);
        unsigned int v33 = v72;
      }
    }
    unint64_t v3 = HIDWORD(v66);
    if (v86)
    {
      int v9 = v85;
      unint64_t v85 = 0;
      if (v9)
      {
        unsigned int v63 = v33;
        CFRelease(v9);
        unsigned int v33 = v63;
      }
    }
    int v34 = 0;
    unsigned int v4 = v33;
    int v35 = 1;
LABEL_41:
    if (v89)
    {
      if (v88)
      {
        int v9 = v87;
        unint64_t v87 = 0;
        if (v9) {
          CFRelease(v9);
        }
      }
    }
    if (v34) {
LABEL_67:
    }
      int v9 = (const void *)IPC::Decoder::markInvalid(a1);
    if (!*(void *)a1)
    {
      *a2 = 0;
      a2[64] = 0;
      goto LABEL_56;
    }
    if (v35)
    {
      if (v32) {
        goto LABEL_63;
      }
      unint64_t v36 = (int)v3 * (unint64_t)v4;
      if (HIDWORD(v36)) {
        goto LABEL_63;
      }
      if (v84) {
        break;
      }
    }
LABEL_87:
    __break(1u);
LABEL_88:
    if (v10)
    {
      int v9 = (const void *)(*(uint64_t (**)(const void *, unint64_t))(*(void *)v9 + 16))(v9, v11);
      int v15 = 0;
      unint64_t v11 = *(void *)a1;
      unint64_t v10 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v11 = 0;
LABEL_74:
      int v15 = 0;
    }
    int v14 = 1;
  }
  if (v83 < v36)
  {
LABEL_63:
    *a2 = 0;
    a2[64] = 0;
    int v35 = 1;
    goto LABEL_56;
  }
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle();
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a2, (uint64_t)&v66);
  a2[64] = 1;
  if ((_BYTE)v70)
  {
    CFTypeRef v37 = v69;
    CFTypeRef v69 = 0;
    if (v37) {
      CFRelease(v37);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v66);
  int v35 = v81;
  unsigned int v2 = v75;
LABEL_56:
  if (v35)
  {
    if (v2)
    {
      CFTypeRef v38 = v74;
      CFTypeRef v74 = 0;
      if (v38) {
        CFRelease(v38);
      }
    }
  }
  if (v84) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v82);
  }
}

void sub_1988B332C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  if (*(unsigned char *)(v34 - 104))
  {
    if (*(unsigned char *)(v34 - 112))
    {
      unint64_t v36 = *(const void **)(v34 - 120);
      *(void *)(v34 - 120) = 0;
      if (v36) {
        CFRelease(v36);
      }
    }
  }
  if (a34) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a30);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::ShareableBitmapHandle::~ShareableBitmapHandle(WebCore::ShareableBitmapHandle *this)
{
  if (*((unsigned char *)this + 32))
  {
    unsigned int v2 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v2) {
      CFRelease(v2);
    }
  }

  WTF::MachSendRight::~MachSendRight(this);
}

WTF::MachSendRight *IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::encode(IPC::Encoder *a1, WebCore::ShareableBitmap *this)
{
  WebCore::ShareableBitmap::createReadOnlyHandle(v4, this);
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(a1, (unint64_t)v4);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v4);
}

void sub_1988B347C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

WTF::MachSendRight *IPC::ArgumentCoder<WebCore::ShareableBitmap,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>(a1, v5);
  if (*a1)
  {
    if (!v6)
    {
      __break(1u);
      return result;
    }
    uint64_t result = (WTF::MachSendRight *)WebCore::ShareableBitmap::createReadOnly();
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v6) {
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
  }
  return result;
}

void sub_1988B3500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18) {
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&a9);
  }
  _Unwind_Resume(exception_object);
}

WTF::MachSendRight *IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::MachSendRight *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::MachSendRight *)(*(uint64_t (**)(WTF::MachSendRight *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988B358C(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 72)) {
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::DataDetectorElementInfo,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(a1, (uint64_t)&cf);
  IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a1, (uint64_t)&v6);
  if (*a1)
  {
    if (v9)
    {
      CFTypeRef v4 = cf;
      CFTypeRef cf = 0;
      if (v7)
      {
        *(_OWORD *)(a2 + 8) = v6;
        *(void *)a2 = v4;
        *(unsigned char *)(a2 + 24) = 1;
        return;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v9)
  {
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
}

void sub_1988B3644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, char a14)
{
  if (a14)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::SerializedPlatformDataCueValue,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::SerializedPlatformDataCueValue::Data>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v9)
    {
      __break(1u);
      return result;
    }
    std::__optional_move_base<WebCore::SerializedPlatformDataCueValue::Data,false>::__optional_move_base[abi:sn180100]((uint64_t)v7, (uint64_t)v8);
    std::__optional_move_base<WebCore::SerializedPlatformDataCueValue::Data,false>::__optional_move_base[abi:sn180100]((uint64_t)a2, (uint64_t)v7);
    a2[56] = 1;
    uint64_t result = std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
  }
  else
  {
    *a2 = 0;
    a2[56] = 0;
  }
  if (v9) {
    return std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v5);
  }
  return result;
}

void sub_1988B36F4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
  if (a24) {
    std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17, v25);
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::SerializedPlatformDataCueValue::Data>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::SerializedPlatformDataCueValue::Data>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988B3790(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 56)) {
    std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1988B37E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::encode(IPC::Encoder *a1, WebCore::FragmentedSharedBuffer *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  WebCore::FragmentedSharedBuffer::toIPCData(&v6, this);
  unsigned __int8 v4 = v8;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v4);
  uint64_t result = IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v6, v4);
  if (v8 != -1) {
    return (IPC::Encoder *)(*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
  }
                            + v8))((int)&v5, (WTF::MachSendRight *)&v7);
  return result;
}

void sub_1988B38B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18)
{
}

void IPC::ArgumentCoder<WebCore::FragmentedSharedBuffer,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)v5);
  if (*(void *)a1)
  {
    if (!v8) {
      __break(1u);
    }
    WebCore::FragmentedSharedBuffer::fromIPCData();
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v8)
  {
    if (v7 != -1) {
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
    }
       + v7))((int)&v4, (WTF::MachSendRight *)&v6);
  }
}

void sub_1988B39B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18, char a19)
{
  if (a19)
  {
    if (a17 != -1) {
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
    }
       + a17))((int)&a12, (WTF::MachSendRight *)&a14);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1988B3A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 40))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 32);
    if (v15 != -1) {
      (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore18SharedMemoryHandleEEEN3WTF6VectorINS_4spanIKhLm18446744073709551615EEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
    }
       + v15))((int)&a13, (WTF::MachSendRight *)(v13 + 8));
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<WebCore::PublicSuffix,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v6);
  uint64_t v5 = *(void *)a2;
  if (!*(void *)a2)
  {
    *a1 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    *(void *)a1 = v5;
    LOBYTE(v5) = 1;
LABEL_4:
    a1[8] = v5;
    return (IPC::Decoder *)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6);
  }
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 24; ++i)
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + i));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 36));
  uint64_t v5 = 0;
  uint64_t v6 = a2 + 40;
  do
    unint64_t result = IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(v6 + v5++));
  while (v5 != 16);
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::array<unsigned char,24ul>>(a1, &v13);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v8);
  unint64_t result = (WTF *)IPC::Decoder::decode<std::array<unsigned char,16ul>>(a1, &v11);
  if (*(void *)a1)
  {
    if (v15)
    {
      if (v10)
      {
        uint64_t v6 = v8;
        uint64_t v7 = v9;
        char v8 = 0;
        uint64_t v9 = 0;
        if (v12)
        {
          *(_OWORD *)(a2 + 40) = v11;
          *(_OWORD *)a2 = v13;
          *(void *)(a2 + 16) = v14;
          *(void *)(a2 + 24) = v6;
          *(void *)(a2 + 32) = v7;
          *(unsigned char *)(a2 + 56) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (v10)
  {
    unint64_t result = v8;
    if (v8)
    {
      char v8 = 0;
      LODWORD(v9) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_1988B3C88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a9) {
      WTF::fastFree(a9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::array<unsigned char,24ul>>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::array<unsigned char,24ul>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::array<unsigned char,16ul>>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::array<unsigned char,16ul>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::OwnerPermissionsPolicyData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v24 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v24);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2, v24);
  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)&v25, (unsigned __int8 **)(a2 + 32));
  if (v25) {
    int v4 = *((_DWORD *)v25 - 3);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if ((unint64_t)v6 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B3FC4);
  }
  *uint64_t v5 = v4;
  uint64_t v7 = (uint64_t)v25;
  if (!v25)
  {
    char v10 = 0;
    uint64_t v8 = 0;
LABEL_33:
    uint64_t v9 = &v25[v8];
    goto LABEL_11;
  }
  uint64_t v8 = *((unsigned int *)v25 - 1);
  uint64_t v9 = &v25[v8];
  if (!*((_DWORD *)v25 - 3))
  {
    char v10 = &v25[v8];
    goto LABEL_33;
  }
  char v10 = v25;
  if (v8)
  {
    char v10 = v25;
    while (*v10 >= 0xFEu)
    {
      ++v10;
      if (!--v8)
      {
        char v10 = v9;
        break;
      }
    }
  }
LABEL_11:
  if (v25) {
    long long v11 = &v25[*((unsigned int *)v25 - 1)];
  }
  else {
    long long v11 = 0;
  }
  if (v11 != v10)
  {
    do
    {
      char v26 = *v10;
      IPC::Encoder::operator<<<BOOL>(a1, &v26);
      char v12 = v10 + 1;
      char v10 = v9;
      if (v12 != v9)
      {
        char v10 = v12;
        while (*v10 >= 0xFEu)
        {
          if (++v10 == v9)
          {
            char v10 = v9;
            break;
          }
        }
      }
    }
    while (v10 != v11);
    uint64_t v7 = (uint64_t)v25;
  }
  if (v7) {
    WTF::fastFree((WTF *)(v7 - 16), v6);
  }
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = (unsigned __int8 **)(a2 + 40);
  uint64_t v13 = v15;
  if (v15) {
    int v16 = *(_DWORD *)(v13 - 12);
  }
  else {
    int v16 = 0;
  }
  unint64_t v17 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v18 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B3FE4);
  }
  *unint64_t v17 = v16;
  uint64_t result = (uint64_t)WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::begin(v14);
  int v20 = (unsigned __int8 *)result;
  unsigned int v22 = v21;
  if (*v14) {
    uint64_t v23 = (uint64_t)&(*v14)[24 * *((unsigned int *)*v14 - 1)];
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23 != result)
  {
    do
    {
      uint64_t result = IPC::ArgumentCoder<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,void>::encode<IPC::Encoder,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist> const&>(a1, (uint64_t)v20);
      while (1)
      {
        v20 += 24;
        if (v20 == v22) {
          break;
        }
        if (*v20 < 0xFEu) {
          goto LABEL_39;
        }
      }
      int v20 = v22;
LABEL_39:
      ;
    }
    while (v20 != (unsigned __int8 *)v23);
  }
  return result;
}

void sub_1988B4008(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    WTF::fastFree((WTF *)(a11 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::OwnerPermissionsPolicyData::~OwnerPermissionsPolicyData(WebCore::OwnerPermissionsPolicyData *this, void *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = *((unsigned int *)this + 6);
  if (v5 != -1) {
    ((void (*)(char *, WebCore::OwnerPermissionsPolicyData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v5])(&v6, this);
  }
  *((_DWORD *)this + 6) = -1;
}

unint64_t IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[5]);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[6]);
  uint64_t v4 = a2[7];

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = IPC::Decoder::decode<unsigned long long>(a1);
  char v5 = v4;
  uint64_t v26 = IPC::Decoder::decode<unsigned long long>(a1);
  char v7 = v6;
  uint64_t v25 = IPC::Decoder::decode<unsigned long long>(a1);
  char v9 = v8;
  uint64_t v24 = IPC::Decoder::decode<unsigned long long>(a1);
  char v11 = v10;
  uint64_t v23 = IPC::Decoder::decode<unsigned long long>(a1);
  char v13 = v12;
  uint64_t v22 = IPC::Decoder::decode<unsigned long long>(a1);
  char v15 = v14;
  uint64_t v16 = IPC::Decoder::decode<unsigned long long>(a1);
  char v18 = v17;
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  uint64_t v21 = *a1;
  if (!*a1) {
    goto LABEL_13;
  }
  if (!v5 || !v7 || !v9 || !v11 || !v13 || !v15 || !v18 || !v20)
  {
    __break(1u);
LABEL_13:
    *(unsigned char *)a2 = 0;
    goto LABEL_11;
  }
  *(void *)a2 = v27;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v25;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v23;
  *(void *)(a2 + 40) = v22;
  LOBYTE(v21) = 1;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = result;
LABEL_11:
  *(unsigned char *)(a2 + 64) = v21;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 4));
  char v5 = *(unsigned char *)(a2 + 5);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 6);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 7));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *(const __CFDictionary **)(a2 + 16));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 24));
  IPC::ArgumentCoder<__CFString const*,void>::encode(a1);
  return IPC::ArgumentCoder<__CFString const*,void>::encode(a1);
}

void IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v48 = IPC::Decoder::decode<float>(a1);
  unsigned __int16 v4 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v2);
  if (v4 <= 0xFFu) {
    goto LABEL_57;
  }
  while (1)
  {
    unsigned __int16 v5 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(v2);
    if (v5 <= 0xFFu) {
      IPC::Decoder::markInvalid(v2);
    }
    unsigned __int16 v6 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(v2);
    if (v6 <= 0xFFu) {
      IPC::Decoder::markInvalid(v2);
    }
    unint64_t v7 = *((void *)v2 + 1);
    uint64_t v8 = *(void *)v2;
    unint64_t v9 = *((void *)v2 + 2) - *(void *)v2;
    if (v7 <= v9)
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v35 = *((void *)v2 + 3);
      if (v35)
      {
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
          uint64_t v34 = *(void *)v2;
          unint64_t v33 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v33 = 0;
          uint64_t v34 = 0;
        }
      }
      goto LABEL_59;
    }
    char v10 = (unsigned __int8 *)(v8 + v9);
    uint64_t v11 = v8 + v9 + 1;
    *((void *)v2 + 2) = v11;
    if (!v8)
    {
      unint64_t v33 = v7;
      uint64_t v34 = 0;
LABEL_59:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v36 = *((void *)v2 + 3);
      if (v36 && v33)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v34, v33);
        unsigned int v12 = 0;
        uint64_t v8 = *(void *)v2;
        unint64_t v7 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
        unsigned int v12 = 0;
      }
      goto LABEL_61;
    }
    unsigned int v12 = *v10;
    if (v12 < 2)
    {
      int v47 = 0;
      char v13 = 1;
      goto LABEL_10;
    }
LABEL_61:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v37 = *((void *)v2 + 3);
    if (!v37 || !v7)
    {
      unint64_t v38 = 0;
      uint64_t v8 = 0;
      char v46 = 0;
      int v47 = 1;
LABEL_63:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v39 = *((void *)v2 + 3);
      if (v39 && v38)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v8, v38);
        unsigned int v16 = 0;
        uint64_t v8 = *(void *)v2;
        unint64_t v7 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_65;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v8);
    char v13 = 0;
    uint64_t v8 = *(void *)v2;
    unint64_t v7 = *((void *)v2 + 1);
    int v47 = 1;
    uint64_t v11 = *((void *)v2 + 2);
LABEL_10:
    if (!v12) {
      char v13 = 0;
    }
    char v46 = v13;
    unint64_t v14 = v11 - v8;
    if (v7 <= v14)
    {
      unint64_t v38 = 0;
      uint64_t v45 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v45 && v7)
      {
        (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
        uint64_t v8 = *(void *)v2;
        unint64_t v38 = *((void *)v2 + 1);
      }
      else
      {
        uint64_t v8 = 0;
      }
      goto LABEL_63;
    }
    char v15 = (unsigned __int8 *)(v8 + v14);
    *((void *)v2 + 2) = v15 + 1;
    if (!v8)
    {
      unint64_t v38 = v7;
      goto LABEL_63;
    }
    unsigned int v16 = *v15;
    if (v16 < 2)
    {
      int v17 = 0;
      char v18 = 1;
      goto LABEL_16;
    }
LABEL_65:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v40 = *((void *)v2 + 3);
    if (v40 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v8);
    }
    char v18 = 0;
    int v17 = 1;
LABEL_16:
    char v19 = v16 ? v18 : 0;
    IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>((uint64_t *)v2, (uint64_t)&cf);
    uint64_t v20 = *(void *)v2;
    unint64_t v21 = *((void *)v2 + 1);
    unint64_t v22 = ((*((void *)v2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v2;
    if (v21 < v22 || v21 - v22 <= 3)
    {
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v43 = *((void *)v2 + 3);
      if (v43)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
          uint64_t v42 = *(void *)v2;
          unint64_t v41 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v41 = 0;
          uint64_t v42 = 0;
        }
      }
    }
    else
    {
      uint64_t v23 = (_DWORD *)(v20 + v22);
      *((void *)v2 + 2) = v23 + 1;
      if (v20)
      {
        int v24 = 0;
        unsigned int v25 = *v23 & 0xFFFFFF00;
        int v26 = *v23;
        goto LABEL_23;
      }
      unint64_t v41 = v21;
      uint64_t v42 = 0;
    }
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v44 = *((void *)v2 + 3);
    if (v44 && v41) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v42);
    }
    unsigned int v25 = 0;
    int v26 = 0;
    int v24 = 1;
LABEL_23:
    IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(v2, (uint64_t)&v51);
    IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(v2, (uint64_t)&v49);
    if (!*(void *)v2)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 48) = 0;
      goto LABEL_46;
    }
    if ((v48 & 0xFF00000000) != 0 && v4 > 0xFFu && v5 > 0xFFu && v6 > 0xFFu && !v47 && !v17)
    {
      if (v54)
      {
        uint64_t v2 = (IPC::Decoder *)cf;
        CFTypeRef cf = 0;
        if (!v24)
        {
          if (v52)
          {
            CFTypeRef v27 = v51;
            CFTypeRef v51 = 0;
            if (v50) {
              break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_57:
    IPC::Decoder::markInvalid(v2);
  }
  BOOL v28 = v4 != 0;
  CFTypeRef v29 = v49;
  CFTypeRef v49 = 0;
  if (v2) {
    CFRetain(v2);
  }
  if (v27) {
    CFRetain(v27);
  }
  if (v29) {
    CFRetain(v29);
  }
  *(_DWORD *)a2 = v48;
  *(unsigned char *)(a2 + 4) = v28;
  *(unsigned char *)(a2 + 5) = v5;
  *(unsigned char *)(a2 + 6) = v6;
  *(unsigned char *)(a2 + 7) = v46;
  *(unsigned char *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 24) = v26 | v25;
  *(void *)(a2 + 32) = v27;
  *(void *)(a2 + 40) = v29;
  *(unsigned char *)(a2 + 48) = 1;
  if (v29) {
    CFRelease(v29);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v2) {
    CFRelease(v2);
  }
LABEL_46:
  if (v50)
  {
    CFTypeRef v30 = v49;
    CFTypeRef v49 = 0;
    if (v30) {
      CFRelease(v30);
    }
  }
  if (v52)
  {
    CFTypeRef v31 = v51;
    CFTypeRef v51 = 0;
    if (v31) {
      CFRelease(v31);
    }
  }
  if (v54)
  {
    CFTypeRef v32 = cf;
    CFTypeRef cf = 0;
    if (v32) {
      CFRelease(v32);
    }
  }
}

void sub_1988B48B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, char a12, CFTypeRef a13, char a14, CFTypeRef cf, char a16)
{
  if (a16)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  LOBYTE(v17[0]) = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)v17);
  LOBYTE(v17[0]) = *(unsigned char *)(a2 + 5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)v17);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 24);
  v17[0] = *(void *)(a2 + 16);
  v17[1] = v4;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, v17);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  LODWORD(v17[0]) = *(_DWORD *)(a2 + 72);
  IPC::Encoder::operator<<<int>(a1, (int *)v17);
  LODWORD(v17[0]) = *(_DWORD *)(a2 + 76);
  IPC::Encoder::operator<<<int>(a1, (int *)v17);
  LODWORD(v17[0]) = *(_DWORD *)(a2 + 80);
  IPC::Encoder::operator<<<int>(a1, (int *)v17);
  char v5 = *(unsigned char *)(a2 + 84);
  unsigned __int16 v6 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v7) {
    goto LABEL_9;
  }
  *unsigned __int16 v6 = v5;
  char v8 = *(unsigned char *)(a2 + 85);
  unint64_t v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B4B04);
  }
  *unint64_t v9 = v8;
  char v11 = *(unsigned char *)(a2 + 86);
  unsigned int v12 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B4B24);
  }
  *unsigned int v12 = v11;
  char v14 = *(unsigned char *)(a2 + 87);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v16)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1988B4AE4);
  }
  *uint64_t result = v14;
  return result;
}

void IPC::ArgumentCoder<WebKit::WebKeyboardEvent,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  unsigned __int16 v5 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>((IPC::Decoder *)a1);
  uint64_t v6 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  char v8 = v7;
  IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)a1, (uint64_t)v118);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v115);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v113);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v111);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v109);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v107);
  uint64_t v9 = IPC::Decoder::decode<unsigned int>(a1);
  uint64_t v10 = IPC::Decoder::decode<unsigned int>(a1);
  uint64_t v11 = IPC::Decoder::decode<unsigned int>(a1);
  unsigned int v12 = (unsigned __int8 *)a1[1];
  uint64_t v13 = (WTF::StringImpl *)*a1;
  unint64_t v14 = a1[2] - *a1;
  if ((unint64_t)v12 <= v14) {
    goto LABEL_67;
  }
  char v15 = (unsigned __int8 *)v13 + v14;
  uint64_t v16 = v15 + 1;
  a1[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    char v15 = v12;
    uint64_t v36 = 0;
    goto LABEL_68;
  }
  LODWORD(v15) = *v15;
  if (v15 < 2)
  {
    int v17 = 0;
    char v18 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v39 = a1[3];
    if (!v39)
    {
      char v18 = 0;
      uint64_t v20 = 0;
      uint64_t v13 = 0;
      int v17 = 1;
      goto LABEL_72;
    }
    int v82 = (int)v15;
    uint64_t v92 = v11;
    if (!v12)
    {
      char v18 = 0;
      uint64_t v20 = 0;
      uint64_t v13 = 0;
      int v17 = 1;
LABEL_72:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v40 = a1[3];
      if (v40)
      {
        char v75 = v18;
        int v85 = v17;
        uint64_t v95 = v11;
        if (v20)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v40 + 16))(v40, v13, v20);
          LODWORD(v20) = 0;
          uint64_t v13 = (WTF::StringImpl *)*a1;
          unsigned int v12 = (unsigned __int8 *)a1[1];
        }
        else
        {
          unsigned int v12 = 0;
          uint64_t v13 = 0;
        }
        uint64_t v11 = v95;
        char v18 = v75;
        int v17 = v85;
      }
      else
      {
        unsigned int v12 = 0;
        uint64_t v13 = 0;
        LODWORD(v20) = 0;
      }
      goto LABEL_74;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v13);
    char v18 = 0;
    uint64_t v13 = (WTF::StringImpl *)*a1;
    unsigned int v12 = (unsigned __int8 *)a1[1];
    int v17 = 1;
    uint64_t v16 = (unsigned __int8 *)a1[2];
    uint64_t v11 = v92;
    LODWORD(v15) = v82;
LABEL_5:
    if (!v15) {
      char v18 = 0;
    }
    if ((unint64_t)v12 <= v16 - (unsigned __int8 *)v13)
    {
      char v76 = v18;
      int v86 = v17;
      uint64_t v98 = v11;
      uint64_t v20 = 0;
      uint64_t v47 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v47 && v12)
      {
        (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
        uint64_t v13 = (WTF::StringImpl *)*a1;
        uint64_t v20 = a1[1];
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v11 = v98;
      char v18 = v76;
      int v17 = v86;
      goto LABEL_72;
    }
    char v19 = v16 + 1;
    a1[2] = (uint64_t)(v16 + 1);
    if (!v13)
    {
      uint64_t v20 = (uint64_t)v12;
      goto LABEL_72;
    }
    LODWORD(v20) = *v16;
    if (v20 < 2)
    {
      int v21 = 0;
      char v22 = 1;
      goto LABEL_11;
    }
LABEL_74:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v41 = a1[3];
    if (!v41)
    {
      char v22 = 0;
      uint64_t v24 = 0;
      uint64_t v13 = 0;
      int v21 = 1;
      goto LABEL_76;
    }
    int v65 = v20;
    char v72 = v18;
    int v81 = v17;
    uint64_t v91 = v11;
    if (!v12)
    {
      char v22 = 0;
      uint64_t v24 = 0;
      uint64_t v13 = 0;
      int v21 = 1;
LABEL_76:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v42 = a1[3];
      if (v42)
      {
        char v60 = v22;
        int v67 = v21;
        char v74 = v18;
        int v84 = v17;
        uint64_t v94 = v11;
        if (v24)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v42 + 16))(v42, v13, v24);
          LODWORD(v24) = 0;
          uint64_t v13 = (WTF::StringImpl *)*a1;
          unsigned int v12 = (unsigned __int8 *)a1[1];
        }
        else
        {
          unsigned int v12 = 0;
          uint64_t v13 = 0;
        }
        uint64_t v11 = v94;
        char v18 = v74;
        int v17 = v84;
        char v22 = v60;
        int v21 = v67;
      }
      else
      {
        unsigned int v12 = 0;
        uint64_t v13 = 0;
        LODWORD(v24) = 0;
      }
      goto LABEL_78;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v41 + 16))(v41, v13);
    char v22 = 0;
    uint64_t v13 = (WTF::StringImpl *)*a1;
    unsigned int v12 = (unsigned __int8 *)a1[1];
    int v21 = 1;
    char v19 = (unsigned __int8 *)a1[2];
    uint64_t v11 = v91;
    char v18 = v72;
    int v17 = v81;
    LODWORD(v20) = v65;
LABEL_11:
    if (!v20) {
      char v22 = 0;
    }
    if ((unint64_t)v12 <= v19 - (unsigned __int8 *)v13)
    {
      char v61 = v22;
      int v68 = v21;
      char v77 = v18;
      int v87 = v17;
      uint64_t v99 = v11;
      uint64_t v24 = 0;
      uint64_t v48 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v48 && v12)
      {
        (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
        uint64_t v13 = (WTF::StringImpl *)*a1;
        uint64_t v24 = a1[1];
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v11 = v99;
      char v18 = v77;
      int v17 = v87;
      char v22 = v61;
      int v21 = v68;
      goto LABEL_76;
    }
    uint64_t v23 = v19 + 1;
    a1[2] = (uint64_t)(v19 + 1);
    if (!v13)
    {
      uint64_t v24 = (uint64_t)v12;
      goto LABEL_76;
    }
    LODWORD(v24) = *v19;
    if (v24 < 2)
    {
      int v25 = 0;
      char v26 = 1;
      goto LABEL_17;
    }
LABEL_78:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v43 = a1[3];
    if (!v43)
    {
      char v26 = 0;
      uint64_t v44 = 0;
      uint64_t v13 = 0;
      int v25 = 1;
      goto LABEL_80;
    }
    int v54 = v24;
    char v58 = v22;
    int v64 = v21;
    char v71 = v18;
    int v80 = v17;
    uint64_t v90 = v11;
    if (!v12)
    {
      char v26 = 0;
      uint64_t v44 = 0;
      uint64_t v13 = 0;
      int v25 = 1;
      goto LABEL_80;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v43 + 16))(v43, v13);
    char v26 = 0;
    uint64_t v13 = (WTF::StringImpl *)*a1;
    unsigned int v12 = (unsigned __int8 *)a1[1];
    int v25 = 1;
    uint64_t v23 = (unsigned __int8 *)a1[2];
    uint64_t v11 = v90;
    char v18 = v71;
    int v17 = v80;
    char v22 = v58;
    int v21 = v64;
    LODWORD(v24) = v54;
LABEL_17:
    if (!v24) {
      char v26 = 0;
    }
    if ((unint64_t)v12 <= v23 - (unsigned __int8 *)v13) {
      break;
    }
    a1[2] = (uint64_t)(v23 + 1);
    if (!v13)
    {
      uint64_t v44 = (uint64_t)v12;
      goto LABEL_80;
    }
    unsigned int v27 = *v23;
    if (v27 > 1) {
      goto LABEL_82;
    }
    int v28 = 0;
    char v29 = v27 != 0;
LABEL_23:
    if (v4 > 0xFFu && v5 > 0xFFu)
    {
      if (v8)
      {
        if (v119)
        {
          int v101 = 0;
          char v102 = v4;
          char v103 = v5;
          uint64_t v105 = v118[0];
          uint64_t v106 = v118[1];
          uint64_t v104 = v6;
          if (v116)
          {
            if (v114
              && v112
              && v110
              && v108
              && (v9 & 0xFF00000000) != 0
              && (v10 & 0xFF00000000) != 0
              && (v11 & 0xFF00000000) != 0
              && !v17
              && !v21
              && !v25
              && !v28)
            {
              WebKit::WebKeyboardEvent::WebKeyboardEvent((uint64_t)v117, (uint64_t)&v101, (_DWORD **)&v115, (_DWORD **)&v113, (_DWORD **)&v111, (_DWORD **)&v109, (_DWORD **)&v107, v9, v10, v11, v18, v22, v26, v29);
              std::__optional_destruct_base<WebKit::WebKeyboardEvent,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebKeyboardEvent>((uint64_t)a2, (uint64_t)v117);
              WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v117, v30);
              goto LABEL_40;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_67:
    char v15 = 0;
    uint64_t v36 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v37 = a1[3];
    if (v37)
    {
      uint64_t v97 = v11;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
        uint64_t v36 = *a1;
        char v15 = (unsigned __int8 *)a1[1];
      }
      else
      {
        char v15 = 0;
        uint64_t v36 = 0;
      }
      uint64_t v11 = v97;
    }
LABEL_68:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v38 = a1[3];
    if (v38)
    {
      uint64_t v96 = v11;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v38 + 16))(v38, v36, v15);
        LODWORD(v15) = 0;
        uint64_t v13 = (WTF::StringImpl *)*a1;
        unsigned int v12 = (unsigned __int8 *)a1[1];
      }
      else
      {
        unsigned int v12 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v11 = v96;
    }
    else
    {
      unsigned int v12 = 0;
      uint64_t v13 = 0;
      LODWORD(v15) = 0;
    }
  }
  int v52 = v25;
  char v56 = v26;
  char v62 = v22;
  int v69 = v21;
  char v78 = v18;
  int v88 = v17;
  uint64_t v100 = v11;
  uint64_t v44 = 0;
  uint64_t v49 = a1[3];
  *a1 = 0;
  a1[1] = 0;
  if (v49 && v12)
  {
    (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
    uint64_t v13 = (WTF::StringImpl *)*a1;
    uint64_t v44 = a1[1];
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v11 = v100;
  char v18 = v78;
  int v17 = v88;
  char v22 = v62;
  int v21 = v69;
  int v25 = v52;
  char v26 = v56;
LABEL_80:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v45 = a1[3];
  if (v45)
  {
    int v51 = v25;
    char v55 = v26;
    char v59 = v22;
    int v66 = v21;
    char v73 = v18;
    int v83 = v17;
    uint64_t v93 = v11;
    if (v44)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v45 + 16))(v45, v13, v44);
      uint64_t v13 = (WTF::StringImpl *)*a1;
      unsigned int v12 = (unsigned __int8 *)a1[1];
    }
    else
    {
      unsigned int v12 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v11 = v93;
    char v18 = v73;
    int v17 = v83;
    char v22 = v59;
    int v21 = v66;
    int v25 = v51;
    char v26 = v55;
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t v13 = 0;
  }
LABEL_82:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v46 = a1[3];
  if (v46)
  {
    if (v12)
    {
      int v50 = v25;
      char v53 = v26;
      char v57 = v22;
      int v63 = v21;
      char v70 = v18;
      int v79 = v17;
      uint64_t v89 = v11;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v46 + 16))(v46, v13);
      uint64_t v11 = v89;
      char v18 = v70;
      int v17 = v79;
      char v22 = v57;
      int v21 = v63;
      int v25 = v50;
      char v26 = v53;
      if (*a1)
      {
        char v29 = 0;
        int v28 = 1;
        goto LABEL_23;
      }
    }
  }
  *a2 = 0;
  a2[96] = 0;
LABEL_40:
  if (v108)
  {
    CFTypeRef v31 = v107;
    long long v107 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v13);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  if (v110)
  {
    CFTypeRef v32 = v109;
    uint64_t v109 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v13);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  if (v112)
  {
    unint64_t v33 = v111;
    int v111 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v13);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  if (v114)
  {
    uint64_t v34 = v113;
    int v113 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v13);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  if (v116)
  {
    uint64_t v35 = v115;
    char v115 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v13);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
}

void sub_1988B5460(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26,WTF::StringImpl *a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a24 && a23)
  {
    if (*(_DWORD *)a23 == 2) {
      WTF::StringImpl::destroy(a23, a2);
    }
    else {
      *(_DWORD *)a23 -= 2;
    }
  }
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a28 && a27)
  {
    if (*(_DWORD *)a27 == 2) {
      WTF::StringImpl::destroy(a27, a2);
    }
    else {
      *(_DWORD *)a27 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  LOBYTE(v25[0]) = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
  LOBYTE(v25[0]) = *(unsigned char *)(a2 + 5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)v25);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 24);
  v25[0] = *(void *)(a2 + 16);
  v25[1] = v4;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, v25);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 44));
  unsigned int v5 = *(_DWORD *)(a2 + 44);
  if (v5)
  {
    uint64_t v6 = *(int **)(a2 + 32);
    char v7 = &v6[18 * v5];
    while (1)
    {
      int v8 = *v6;
      uint64_t v9 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
      if (v10 <= 3) {
        break;
      }
      *uint64_t v9 = v8;
      v25[0] = *(void *)(v6 + 1);
      uint64_t v11 = IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)v25);
      LOBYTE(v25[0]) = *((unsigned char *)v6 + 12);
      IPC::Encoder::operator<<<BOOL>(v11, (char *)v25);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)v6 + 2));
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)v6 + 3));
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)v6 + 4));
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)v6 + 5));
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)v6 + 6));
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *((double *)v6 + 7));
      char v12 = *((unsigned char *)v6 + 64);
      uint64_t v13 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1988B57BCLL);
      }
      *uint64_t v13 = v12;
      v6 += 18;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1988B579CLL);
  }
LABEL_6:
  IPC::VectorArgumentCoder<false,WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 48));
  IPC::VectorArgumentCoder<false,WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)(a2 + 64));
  v25[0] = *(void *)(a2 + 80);
  char v15 = IPC::Encoder::operator<<<WebCore::IntSize const&>(a1, (int *)v25);
  char v16 = *(unsigned char *)(a2 + 89);
  int v17 = (unsigned char *)IPC::Encoder::grow(v15, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B57DCLL);
  }
  *int v17 = v16;
  char v19 = *(unsigned char *)(a2 + 90);
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B57FCLL);
  }
  *uint64_t v20 = v19;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 92));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 96));
  char v22 = *(unsigned char *)(a2 + 88);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24) {
    goto LABEL_14;
  }
  *uint64_t result = v22;
  return result;
}

WTF *IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v94 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  unsigned __int16 v93 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>((IPC::Decoder *)a1);
  uint64_t v4 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)a1, (uint64_t)v113);
  unint64_t v7 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v8)
  {
    LODWORD(v23) = 0;
    LOBYTE(v103) = 0;
    char v105 = 0;
LABEL_12:
    uint64_t v24 = *a1;
    uint64_t v25 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26 && v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
    }
    goto LABEL_28;
  }
  unint64_t v9 = v7;
  uint64_t v95 = 0;
  unint64_t v96 = 0;
  if (v7 >= 0x38E3)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebPlatformTouchPoint>((uint64_t)v106, (unint64_t *)a1);
      if (!(_BYTE)v110) {
        goto LABEL_24;
      }
      int v28 = HIDWORD(v96);
      if (HIDWORD(v96) == v96)
      {
        unint64_t v29 = WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v95, HIDWORD(v96) + 1, (unint64_t)v106);
        int v28 = HIDWORD(v96);
        CFTypeRef v30 = (char *)v95 + 72 * HIDWORD(v96);
        long long v32 = *(_OWORD *)(v29 + 32);
        long long v31 = *(_OWORD *)(v29 + 48);
        long long v33 = *(_OWORD *)(v29 + 16);
        *((void *)v30 + 8) = *(void *)(v29 + 64);
        *((_OWORD *)v30 + 2) = v32;
        *((_OWORD *)v30 + 3) = v31;
        *((_OWORD *)v30 + 1) = v33;
        *(_OWORD *)CFTypeRef v30 = *(_OWORD *)v29;
      }
      else
      {
        uint64_t v34 = (char *)v95 + 72 * HIDWORD(v96);
        long long v36 = *(_OWORD *)v107;
        long long v35 = v108;
        long long v37 = *(_OWORD *)&v106[16];
        *((void *)v34 + 8) = v109;
        *((_OWORD *)v34 + 2) = v36;
        *((_OWORD *)v34 + 3) = v35;
        *((_OWORD *)v34 + 1) = v37;
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v106;
      }
      HIDWORD(v96) = v28 + 1;
      if (!--v9)
      {
        WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v95, (v28 + 1));
        int v27 = 0;
        char v103 = v95;
        unint64_t v38 = v96;
        uint64_t v95 = 0;
        unint64_t v96 = 0;
        unint64_t v104 = v38;
        goto LABEL_17;
      }
    }
  }
  if (v7)
  {
    LODWORD(v96) = 72 * (int)v7 / 0x48u;
    uint64_t v95 = (WTF *)WTF::fastMalloc((WTF *)(72 * v7));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebPlatformTouchPoint>((uint64_t)v106, (unint64_t *)a1);
      if (!(_BYTE)v110) {
        break;
      }
      int v10 = HIDWORD(v96);
      if (HIDWORD(v96) == v96)
      {
        unint64_t v11 = WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v95, HIDWORD(v96) + 1, (unint64_t)v106);
        int v10 = HIDWORD(v96);
        char v12 = v95;
        uint64_t v13 = (char *)v95 + 72 * HIDWORD(v96);
        long long v15 = *(_OWORD *)(v11 + 32);
        long long v14 = *(_OWORD *)(v11 + 48);
        long long v16 = *(_OWORD *)(v11 + 16);
        *((void *)v13 + 8) = *(void *)(v11 + 64);
        *((_OWORD *)v13 + 2) = v15;
        *((_OWORD *)v13 + 3) = v14;
        *((_OWORD *)v13 + 1) = v16;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v11;
      }
      else
      {
        char v12 = v95;
        int v17 = (char *)v95 + 72 * HIDWORD(v96);
        long long v19 = *(_OWORD *)v107;
        long long v18 = v108;
        long long v20 = *(_OWORD *)&v106[16];
        *((void *)v17 + 8) = v109;
        *((_OWORD *)v17 + 2) = v19;
        *((_OWORD *)v17 + 3) = v18;
        *((_OWORD *)v17 + 1) = v20;
        *(_OWORD *)int v17 = *(_OWORD *)v106;
      }
      unsigned int v21 = v10 + 1;
      HIDWORD(v96) = v21;
      if (!--v9)
      {
        unsigned int v22 = v96;
        goto LABEL_16;
      }
    }
LABEL_24:
    LODWORD(v23) = 0;
    LOBYTE(v103) = 0;
    char v105 = 0;
    int v27 = 1;
    goto LABEL_25;
  }
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  char v12 = 0;
LABEL_16:
  int v27 = 0;
  uint64_t v95 = 0;
  char v103 = v12;
  HIDWORD(v96) = 0;
  unint64_t v104 = __PAIR64__(v21, v22);
LABEL_17:
  LODWORD(v23) = 1;
  char v105 = 1;
LABEL_25:
  uint64_t v39 = v95;
  if (v95)
  {
    uint64_t v95 = 0;
    LODWORD(v96) = 0;
    WTF::fastFree(v39, v8);
  }
  if (v27) {
    goto LABEL_12;
  }
LABEL_28:
  IPC::Decoder::decode<WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v101, a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v99, a1);
  uint64_t v40 = (uint64_t)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  uint64_t v42 = v41;
  if (!v41) {
    goto LABEL_71;
  }
  while (1)
  {
    unint64_t v43 = a1[1];
    uint64_t v44 = *a1;
    unint64_t v45 = a1[2] - *a1;
    int v92 = v23;
    uint64_t v90 = v40;
    uint64_t v91 = v42;
    if (v43 <= v45)
    {
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v79 = a1[3];
      if (v79)
      {
        if (v43)
        {
          (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
          uint64_t v78 = *a1;
          uint64_t v77 = a1[1];
        }
        else
        {
          uint64_t v77 = 0;
          uint64_t v78 = 0;
        }
      }
      goto LABEL_75;
    }
    uint64_t v42 = v4;
    uint64_t v46 = (unsigned __int8 *)(v44 + v45);
    uint64_t v47 = v44 + v45 + 1;
    a1[2] = v47;
    if (!v44)
    {
      uint64_t v77 = v43;
      uint64_t v78 = 0;
LABEL_75:
      uint64_t v42 = v4;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v80 = a1[3];
      if (v80 && v77)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v80 + 16))(v80, v78, v77);
        unsigned int v48 = 0;
        uint64_t v44 = *a1;
        unint64_t v43 = a1[1];
      }
      else
      {
        unint64_t v43 = 0;
        uint64_t v44 = 0;
        unsigned int v48 = 0;
      }
      goto LABEL_77;
    }
    unsigned int v48 = *v46;
    if (v48 < 2)
    {
      uint64_t v40 = 0;
      char v49 = 1;
      goto LABEL_33;
    }
LABEL_77:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v81 = a1[3];
    if (!v81 || !v43)
    {
      char v50 = 0;
      uint64_t v82 = 0;
      uint64_t v44 = 0;
      uint64_t v40 = 1;
LABEL_79:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v83 = a1[3];
      if (v83 && v82)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v44, v82);
        unsigned int v53 = 0;
        uint64_t v44 = *a1;
        unint64_t v43 = a1[1];
      }
      else
      {
        unint64_t v43 = 0;
        uint64_t v44 = 0;
        unsigned int v53 = 0;
      }
      goto LABEL_81;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 16))(v81, v44);
    char v49 = 0;
    uint64_t v44 = *a1;
    unint64_t v43 = a1[1];
    uint64_t v40 = 1;
    uint64_t v47 = a1[2];
LABEL_33:
    if (v48) {
      char v50 = v49;
    }
    else {
      char v50 = 0;
    }
    unint64_t v51 = v47 - v44;
    if (v43 <= v51)
    {
      uint64_t v82 = 0;
      uint64_t v89 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v89 && v43)
      {
        (*(void (**)(uint64_t))(*(void *)v89 + 16))(v89);
        uint64_t v44 = *a1;
        uint64_t v82 = a1[1];
      }
      else
      {
        uint64_t v44 = 0;
      }
      goto LABEL_79;
    }
    int v52 = (unsigned __int8 *)(v44 + v51);
    a1[2] = (uint64_t)(v52 + 1);
    if (!v44)
    {
      uint64_t v82 = v43;
      goto LABEL_79;
    }
    unsigned int v53 = *v52;
    if (v53 < 2)
    {
      uint64_t v4 = 0;
      char v54 = 1;
      goto LABEL_40;
    }
LABEL_81:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v84 = a1[3];
    if (v84 && v43) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 16))(v84, v44);
    }
    char v54 = 0;
    uint64_t v4 = 1;
LABEL_40:
    if (v53) {
      char v55 = v54;
    }
    else {
      char v55 = 0;
    }
    uint64_t v56 = IPC::Decoder::decode<float>(a1);
    uint64_t v23 = IPC::Decoder::decode<float>(a1);
    unint64_t v57 = a1[1];
    char v58 = (char *)*a1;
    unint64_t v59 = a1[2] - *a1;
    if (v57 <= v59)
    {
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v87 = a1[3];
      if (v87)
      {
        if (v57)
        {
          (*(void (**)(uint64_t))(*(void *)v87 + 16))(v87);
          uint64_t v86 = *a1;
          uint64_t v85 = a1[1];
        }
        else
        {
          uint64_t v85 = 0;
          uint64_t v86 = 0;
        }
      }
      goto LABEL_84;
    }
    char v60 = &v58[v59];
    a1[2] = (uint64_t)(v60 + 1);
    if (!v58)
    {
      uint64_t v85 = v57;
      uint64_t v86 = 0;
LABEL_84:
      unint64_t v57 = 0;
      char v58 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v88 = a1[3];
      if (v88)
      {
        if (v85)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v88 + 16))(v88, v86, v85);
          char v58 = (char *)*a1;
          unint64_t v57 = a1[1];
        }
        else
        {
          unint64_t v57 = 0;
          char v58 = 0;
        }
      }
      goto LABEL_85;
    }
    unsigned int v61 = *v60;
    if (v61 <= 1)
    {
      int v62 = 0;
      char v63 = v61 != 0;
      goto LABEL_47;
    }
LABEL_85:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (!result
      || !v57
      || (uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v58), !*a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 112) = 0;
      goto LABEL_62;
    }
    char v63 = 0;
    int v62 = 1;
LABEL_47:
    if (v94 > 0xFFu && v93 > 0xFFu)
    {
      if (v6)
      {
        if (v114)
        {
          LODWORD(v95) = 0;
          BYTE4(v95) = v94;
          BYTE5(v95) = v93;
          uint64_t v97 = v113[0];
          uint64_t v98 = v113[1];
          unint64_t v96 = v42;
          if (v92)
          {
            if (v102
              && v100
              && v91
              && !v40
              && !v4
              && (v56 & 0xFF00000000) != 0
              && (v23 & 0xFF00000000) != 0
              && !v62)
            {
              break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_71:
    uint64_t v74 = *a1;
    uint64_t v75 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v76 = a1[3];
    if (v76 && v75) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v76 + 16))(v76, v74);
    }
  }
  WebKit::WebTouchEvent::WebTouchEvent((uint64_t)v106, (uint64_t)&v95, (uint64_t *)&v103, v101, v99, v90, v50, v55, *(float *)&v56, *(float *)&v23, v63);
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)&v106[4];
  *(_OWORD *)(a2 + 16) = *(_OWORD *)&v106[16];
  int v64 = v107[0];
  v107[0] = 0;
  *(void *)(a2 + 32) = v64;
  int v65 = v107[1];
  v107[1] = 0;
  *(void *)(a2 + 40) = v65;
  uint64_t v66 = v108;
  *(void *)&long long v108 = 0;
  *(void *)(a2 + 48) = v66;
  uint64_t v67 = *((void *)&v108 + 1);
  *((void *)&v108 + 1) = 0;
  *(void *)(a2 + 56) = v67;
  uint64_t v68 = v109;
  uint64_t v109 = 0;
  *(void *)(a2 + 64) = v68;
  uint64_t v69 = v110;
  uint64_t v110 = 0;
  *(void *)(a2 + 72) = v69;
  long long v70 = v111;
  *(_DWORD *)(a2 + 96) = v112;
  *(_OWORD *)(a2 + 80) = v70;
  *(unsigned char *)(a2 + 112) = 1;
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v109, v71);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v72);
  uint64_t result = v107[0];
  if (v107[0])
  {
    v107[0] = 0;
    LODWORD(v107[1]) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v58);
  }
LABEL_62:
  if (v100) {
    uint64_t result = (WTF *)WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v99, v58);
  }
  if (v102) {
    uint64_t result = (WTF *)WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v101, v58);
  }
  if (v105)
  {
    uint64_t result = v103;
    if (v103)
    {
      char v103 = 0;
      LODWORD(v104) = 0;
      return (WTF *)WTF::fastFree(result, v58);
    }
  }
  return result;
}

void sub_1988B60EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,WTF *a29,int a30,int a31,char a32)
{
  if (a22) {
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, a2);
  }
  if (a28) {
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a24, a2);
  }
  if (a32)
  {
    long long v33 = a29;
    if (a29)
    {
      a29 = 0;
      a30 = 0;
      WTF::fastFree(v33, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    goto LABEL_22;
  }
  unint64_t v6 = v4;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (v4 >= 0x2492)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebTouchEvent>(v29, a2);
      if (!v42) {
        goto LABEL_21;
      }
      if (HIDWORD(v28) == v28)
      {
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebTouchEvent>((uint64_t)&v27, (unint64_t)v29);
      }
      else
      {
        uint64_t v17 = v27 + 112 * HIDWORD(v28);
        *(_DWORD *)uint64_t v17 = 0;
        long long v18 = *(_OWORD *)v30;
        *(_OWORD *)(v17 + 16) = *(_OWORD *)&v30[12];
        *(_OWORD *)(v17 + 4) = v18;
        *(void *)(v17 + 32) = 0;
        *(void *)(v17 + 40) = 0;
        uint64_t v19 = v31;
        uint64_t v31 = 0;
        *(void *)(v17 + 32) = v19;
        LODWORD(v19) = v32;
        int v32 = 0;
        *(_DWORD *)(v17 + 40) = v19;
        LODWORD(v19) = v33;
        int v33 = 0;
        *(_DWORD *)(v17 + 44) = v19;
        *(void *)(v17 + 48) = 0;
        *(void *)(v17 + 56) = 0;
        uint64_t v20 = v34;
        uint64_t v34 = 0;
        *(void *)(v17 + 48) = v20;
        LODWORD(v20) = v35;
        int v35 = 0;
        *(_DWORD *)(v17 + 56) = v20;
        LODWORD(v20) = v36;
        int v36 = 0;
        *(_DWORD *)(v17 + 60) = v20;
        *(void *)(v17 + 64) = 0;
        *(void *)(v17 + 72) = 0;
        uint64_t v21 = v37;
        uint64_t v37 = 0;
        *(void *)(v17 + 64) = v21;
        LODWORD(v21) = v38;
        int v38 = 0;
        *(_DWORD *)(v17 + 72) = v21;
        LODWORD(v21) = v39;
        int v39 = 0;
        *(_DWORD *)(v17 + 76) = v21;
        LODWORD(v21) = v41;
        *(_OWORD *)(v17 + 80) = v40;
        *(_DWORD *)(v17 + 96) = v21;
        ++HIDWORD(v28);
      }
      std::__optional_destruct_base<WebKit::WebTouchEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v7);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v27, HIDWORD(v28));
        uint64_t v22 = v27;
        uint64_t v27 = 0;
        *(void *)a1 = v22;
        int v15 = v28;
        int v14 = HIDWORD(v28);
        goto LABEL_14;
      }
    }
  }
  if (v4)
  {
    LODWORD(v28) = (613566757 * (unint64_t)((7 * v4) & 0xFFFFFFF)) >> 32;
    uint64_t v27 = WTF::fastMalloc((WTF *)(112 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebTouchEvent>(v29, a2);
      if (!v42) {
        break;
      }
      if (HIDWORD(v28) == v28)
      {
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebTouchEvent>((uint64_t)&v27, (unint64_t)v29);
      }
      else
      {
        uint64_t v8 = v27 + 112 * HIDWORD(v28);
        *(_DWORD *)uint64_t v8 = 0;
        long long v9 = *(_OWORD *)v30;
        *(_OWORD *)(v8 + 16) = *(_OWORD *)&v30[12];
        *(_OWORD *)(v8 + 4) = v9;
        *(void *)(v8 + 32) = 0;
        *(void *)(v8 + 40) = 0;
        uint64_t v10 = v31;
        uint64_t v31 = 0;
        *(void *)(v8 + 32) = v10;
        LODWORD(v10) = v32;
        int v32 = 0;
        *(_DWORD *)(v8 + 40) = v10;
        LODWORD(v10) = v33;
        int v33 = 0;
        *(_DWORD *)(v8 + 44) = v10;
        *(void *)(v8 + 48) = 0;
        *(void *)(v8 + 56) = 0;
        uint64_t v11 = v34;
        uint64_t v34 = 0;
        *(void *)(v8 + 48) = v11;
        LODWORD(v11) = v35;
        int v35 = 0;
        *(_DWORD *)(v8 + 56) = v11;
        LODWORD(v11) = v36;
        int v36 = 0;
        *(_DWORD *)(v8 + 60) = v11;
        *(void *)(v8 + 64) = 0;
        *(void *)(v8 + 72) = 0;
        uint64_t v12 = v37;
        uint64_t v37 = 0;
        *(void *)(v8 + 64) = v12;
        LODWORD(v12) = v38;
        int v38 = 0;
        *(_DWORD *)(v8 + 72) = v12;
        LODWORD(v12) = v39;
        int v39 = 0;
        *(_DWORD *)(v8 + 76) = v12;
        LODWORD(v12) = v41;
        *(_OWORD *)(v8 + 80) = v40;
        *(_DWORD *)(v8 + 96) = v12;
        ++HIDWORD(v28);
      }
      std::__optional_destruct_base<WebKit::WebTouchEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v7);
      if (!--v6)
      {
        uint64_t v13 = v27;
        int v15 = v28;
        int v14 = HIDWORD(v28);
        goto LABEL_13;
      }
    }
LABEL_21:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebKit::WebTouchEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v7);
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v23);
LABEL_22:
    uint64_t v24 = *a2;
    uint64_t v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v26 = v25 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    if (!v26) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v24);
    }
    return result;
  }
  int v14 = 0;
  int v15 = 0;
  uint64_t v13 = 0;
LABEL_13:
  uint64_t v27 = 0;
  *(void *)a1 = v13;
LABEL_14:
  uint64_t v28 = 0;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v5);
}

void sub_1988B6500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  LOBYTE(v15) = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15);
  LOBYTE(v15) = *(unsigned char *)(a2 + 5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = v4;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, &v15);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 32));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 34));
  LODWORD(v15) = *(_DWORD *)(a2 + 36);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  LODWORD(v15) = *(_DWORD *)(a2 + 40);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  LODWORD(v15) = *(_DWORD *)(a2 + 44);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  LODWORD(v15) = *(_DWORD *)(a2 + 48);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 52));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 56));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 60));
  LODWORD(v15) = *(_DWORD *)(a2 + 72);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 80));
  LOBYTE(v15) = *(unsigned char *)(a2 + 88);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15);
  int v5 = *(_DWORD *)(a2 + 92);
  unint64_t v6 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v7 <= 3
    || (*unint64_t v6 = v5,
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 96)),
        char v8 = *(unsigned char *)(a2 + 104),
        long long v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1),
        !v10))
  {
    __break(0xC471u);
    JUMPOUT(0x1988B6748);
  }
  *long long v9 = v8;
  LODWORD(v15) = *(_DWORD *)(a2 + 64);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  LODWORD(v15) = *(_DWORD *)(a2 + 68);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v15, (uint64_t *)(a2 + 112));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, HIDWORD(v16));
  if (HIDWORD(v16))
  {
    uint64_t v12 = v15;
    uint64_t v13 = 144 * HIDWORD(v16);
    do
    {
      IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::encode(a1, v12);
      v12 += 144;
      v13 -= 144;
    }
    while (v13);
  }
  return WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v11);
}

void sub_1988B676C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebMouseEvent,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  int v5 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>((IPC::Decoder *)a1);
  unint64_t v6 = (WTF *)IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  LOBYTE(v8) = v7;
  IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)a1, (uint64_t)v115);
  unsigned __int16 v9 = IPC::Decoder::decode<WebKit::WebMouseEventButton>((IPC::Decoder *)a1);
  uint64_t v10 = IPC::Decoder::decode<unsigned short>(a1);
  uint64_t v11 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  LODWORD(v13) = v12;
  uint64_t v96 = v12;
  if (!(_BYTE)v12) {
    goto LABEL_67;
  }
  while (1)
  {
    int v113 = v11;
    int v114 = v13;
    int v14 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    int v16 = v15;
    uint64_t v95 = v15;
    if (!(_BYTE)v15)
    {
      uint64_t v58 = *a1;
      uint64_t v59 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v60 = a1[3];
      if (v60)
      {
        if (v59) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v58);
        }
      }
    }
    long long v111 = v14;
    int v112 = v16;
    uint64_t v94 = IPC::Decoder::decode<float>(a1);
    uint64_t v93 = IPC::Decoder::decode<float>(a1);
    uint64_t v92 = IPC::Decoder::decode<float>(a1);
    uint64_t v13 = IPC::Decoder::decode<unsigned int>(a1);
    unint64_t v17 = a1[1];
    uint64_t v18 = *a1;
    unint64_t v19 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v17 < v19 || v17 - v19 <= 7)
    {
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v63 = a1[3];
      if (v63)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(void *)v63 + 16))(v63);
          uint64_t v62 = *a1;
          uint64_t v61 = a1[1];
        }
        else
        {
          uint64_t v61 = 0;
          uint64_t v62 = 0;
        }
      }
    }
    else
    {
      uint64_t v20 = (double *)(v18 + v19);
      a1[2] = (uint64_t)(v20 + 1);
      if (v18)
      {
        int v91 = 0;
        double v21 = *v20;
        goto LABEL_7;
      }
      uint64_t v61 = v17;
      uint64_t v62 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    double v21 = 0.0;
    uint64_t v64 = a1[3];
    if (v64 && v61) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 16))(v64, v62);
    }
    int v91 = 1;
LABEL_7:
    unsigned __int16 ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>((IPC::Decoder *)a1);
    uint64_t v22 = *a1;
    unint64_t v23 = a1[1];
    unint64_t v24 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v23 < v24 || v23 - v24 <= 3)
    {
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v67 = a1[3];
      if (v67)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
          uint64_t v66 = *a1;
          uint64_t v65 = a1[1];
        }
        else
        {
          uint64_t v65 = 0;
          uint64_t v66 = 0;
        }
      }
    }
    else
    {
      uint64_t v25 = (_DWORD *)(v22 + v24);
      a1[2] = (uint64_t)(v25 + 1);
      if (v22)
      {
        int v89 = 0;
        LODWORD(v87) = *v25;
        HIDWORD(v87) = *v25 & 0xFFFFFF00;
        goto LABEL_11;
      }
      uint64_t v65 = v23;
      uint64_t v66 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v68 = a1[3];
    if (v68 && v65) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 16))(v68, v66);
    }
    uint64_t v87 = 0;
    int v89 = 1;
LABEL_11:
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v109);
    uint64_t v97 = v6;
    char v98 = v8;
    v117[0] = 0;
    IPC::Decoder::operator>><BOOL>(a1, v117);
    int v8 = HIBYTE(v117[0]);
    if (HIBYTE(v117[0]))
    {
      int v86 = LOBYTE(v117[0]);
    }
    else
    {
      uint64_t v69 = *a1;
      uint64_t v70 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v71 = a1[3];
      if (v71 && v70) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v71 + 16))(v71, v69);
      }
      int v86 = 0;
    }
    unint64_t v6 = (WTF *)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    uint64_t v11 = v26;
    uint64_t v88 = v26;
    if (!(_BYTE)v26)
    {
      uint64_t v72 = *a1;
      uint64_t v73 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v74 = a1[3];
      if (v74)
      {
        if (v73) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v74 + 16))(v74, v72);
        }
      }
    }
    long long v107 = v6;
    int v108 = (int)v11;
    unint64_t v27 = IPC::Decoder::decode<unsigned long long>(a1);
    if ((_BYTE)v28)
    {
      uint64_t v11 = (unint64_t *)v27;
      uint64_t v100 = 0;
      int v101 = 0;
      if (v27 >= 0x1C71)
      {
        uint64_t v84 = v13;
        int v85 = v5;
        unint64_t v6 = (WTF *)&v119;
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebMouseEvent>(v117, a1);
          if (!v129) {
            break;
          }
          if (HIDWORD(v101) == v101)
          {
            WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebMouseEvent>((uint64_t)&v100, (unint64_t)v117);
          }
          else
          {
            uint64_t v75 = v100 + 144 * HIDWORD(v101);
            *(_DWORD *)uint64_t v75 = 0;
            long long v76 = *(_OWORD *)v118;
            *(_OWORD *)(v75 + 16) = *(_OWORD *)&v118[12];
            *(_OWORD *)(v75 + 4) = v76;
            long long v77 = v119;
            long long v78 = v120;
            long long v79 = v122;
            *(_OWORD *)(v75 + 64) = v121;
            *(_OWORD *)(v75 + 80) = v79;
            *(_OWORD *)(v75 + 32) = v77;
            *(_OWORD *)(v75 + 48) = v78;
            uint64_t v80 = v123;
            long long v123 = 0;
            *(void *)(v75 + 96) = v80;
            *(unsigned char *)(v75 + 104) = v124;
            *(void *)(v75 + 112) = 0;
            *(void *)(v75 + 120) = 0;
            uint64_t v81 = v125;
            uint64_t v125 = 0;
            *(void *)(v75 + 112) = v81;
            LODWORD(v81) = v126;
            LODWORD(v126) = 0;
            *(_DWORD *)(v75 + 120) = v81;
            LODWORD(v81) = HIDWORD(v126);
            HIDWORD(v126) = 0;
            *(_DWORD *)(v75 + 124) = v81;
            *(void *)(v75 + 128) = 0;
            *(void *)(v75 + 136) = 0;
            uint64_t v82 = v127;
            uint64_t v127 = 0;
            *(void *)(v75 + 128) = v82;
            LODWORD(v82) = v128;
            LODWORD(v128) = 0;
            *(_DWORD *)(v75 + 136) = v82;
            LODWORD(v82) = HIDWORD(v128);
            HIDWORD(v128) = 0;
            *(_DWORD *)(v75 + 140) = v82;
            ++HIDWORD(v101);
          }
          std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117, v31);
          uint64_t v11 = (unint64_t *)((char *)v11 - 1);
          if (!v11)
          {
            WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v100, HIDWORD(v101));
            uint64_t v104 = v100;
            uint64_t v83 = v101;
            uint64_t v100 = 0;
            int v101 = 0;
            char v105 = v83;
            char v106 = 1;
            goto LABEL_31;
          }
        }
      }
      else
      {
        if (!v27)
        {
          uint64_t v40 = 0;
          int v41 = 0;
LABEL_29:
          uint64_t v100 = 0;
          int v101 = 0;
          uint64_t v104 = v40;
          char v105 = v41;
          char v106 = 1;
          goto LABEL_32;
        }
        uint64_t v84 = v13;
        int v85 = v5;
        unsigned int v29 = 144 * v27;
        uint64_t v30 = WTF::fastMalloc((WTF *)(144 * v27));
        LODWORD(v101) = v29 / 0x90;
        uint64_t v100 = v30;
        unint64_t v6 = (WTF *)v118;
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebMouseEvent>(v117, a1);
          if (!v129) {
            break;
          }
          if (HIDWORD(v101) == v101)
          {
            WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebMouseEvent>((uint64_t)&v100, (unint64_t)v117);
          }
          else
          {
            uint64_t v32 = v100 + 144 * HIDWORD(v101);
            *(_DWORD *)uint64_t v32 = 0;
            long long v33 = *(_OWORD *)v118;
            *(_OWORD *)(v32 + 16) = *(_OWORD *)&v118[12];
            *(_OWORD *)(v32 + 4) = v33;
            long long v34 = v119;
            long long v35 = v120;
            long long v36 = v122;
            *(_OWORD *)(v32 + 64) = v121;
            *(_OWORD *)(v32 + 80) = v36;
            *(_OWORD *)(v32 + 32) = v34;
            *(_OWORD *)(v32 + 48) = v35;
            uint64_t v37 = v123;
            long long v123 = 0;
            *(void *)(v32 + 96) = v37;
            *(unsigned char *)(v32 + 104) = v124;
            *(void *)(v32 + 112) = 0;
            *(void *)(v32 + 120) = 0;
            uint64_t v38 = v125;
            uint64_t v125 = 0;
            *(void *)(v32 + 112) = v38;
            LODWORD(v38) = v126;
            LODWORD(v126) = 0;
            *(_DWORD *)(v32 + 120) = v38;
            LODWORD(v38) = HIDWORD(v126);
            HIDWORD(v126) = 0;
            *(_DWORD *)(v32 + 124) = v38;
            *(void *)(v32 + 128) = 0;
            *(void *)(v32 + 136) = 0;
            uint64_t v39 = v127;
            uint64_t v127 = 0;
            *(void *)(v32 + 128) = v39;
            LODWORD(v39) = v128;
            LODWORD(v128) = 0;
            *(_DWORD *)(v32 + 136) = v39;
            LODWORD(v39) = HIDWORD(v128);
            HIDWORD(v128) = 0;
            *(_DWORD *)(v32 + 140) = v39;
            ++HIDWORD(v101);
          }
          std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117, v31);
          uint64_t v11 = (unint64_t *)((char *)v11 - 1);
          if (!v11)
          {
            uint64_t v40 = v100;
            int v41 = v101;
            goto LABEL_29;
          }
        }
      }
      LOBYTE(v104) = 0;
      char v106 = 0;
      std::__optional_destruct_base<WebKit::WebMouseEvent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117, v31);
LABEL_31:
      int v5 = v85;
      uint64_t v13 = v84;
LABEL_32:
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v100, v28);
      if (v106) {
        goto LABEL_33;
      }
      goto LABEL_25;
    }
    LOBYTE(v104) = 0;
    char v106 = 0;
LABEL_25:
    char v42 = (WTF::StringImpl *)*a1;
    uint64_t v43 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v43) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v42);
LABEL_33:
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 144) = 0;
      goto LABEL_58;
    }
    if (v4 > 0xFFu && (unsigned __int16)v5 > 0xFFu)
    {
      if (v98)
      {
        if (v116)
        {
          LODWORD(v100) = 0;
          BYTE4(v100) = v4;
          BYTE5(v100) = v5;
          uint64_t v102 = v115[0];
          uint64_t v103 = v115[1];
          int v101 = v97;
          if (v9 > 0xFFu
            && (v10 & 0xFF0000) != 0
            && v96
            && v95
            && (v94 & 0xFF00000000) != 0
            && (v93 & 0xFF00000000) != 0
            && (v92 & 0xFF00000000) != 0
            && (v13 & 0xFF00000000) != 0
            && !v91
            && ShouldOpenExternalURLs > 0xFFu
            && !v89
            && v110
            && v8
            && v88
            && v106)
          {
            break;
          }
        }
      }
    }
    __break(1u);
LABEL_67:
    uint64_t v55 = *a1;
    uint64_t v56 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v57 = a1[3];
    if (v57 && v56) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v57 + 16))(v57, v55);
    }
  }
  v99[0] = 0;
  v99[1] = 0;
  WebKit::WebMouseEvent::WebMouseEvent((uint64_t)v117, (uint64_t)&v100, v9, v10, &v113, &v111, v13, ShouldOpenExternalURLs, *(float *)&v94, *(float *)&v93, *(float *)&v92, v21, v87 | HIDWORD(v87), (_DWORD **)&v109, v86 != 0, &v107, &v104, v99);
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)v118;
  long long v45 = v119;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)&v118[12];
  *(_OWORD *)(a2 + 32) = v45;
  long long v46 = v121;
  *(_OWORD *)(a2 + 48) = v120;
  *(_OWORD *)(a2 + 64) = v46;
  *(_OWORD *)(a2 + 80) = v122;
  *(void *)(a2 + 96) = v123;
  *(unsigned char *)(a2 + 104) = v124;
  uint64_t v47 = v125;
  long long v123 = 0;
  uint64_t v125 = 0;
  *(void *)(a2 + 112) = v47;
  uint64_t v48 = v126;
  uint64_t v126 = 0;
  *(void *)(a2 + 120) = v48;
  uint64_t v49 = v127;
  uint64_t v127 = 0;
  *(void *)(a2 + 128) = v49;
  uint64_t v50 = v128;
  uint64_t v128 = 0;
  *(void *)(a2 + 136) = v50;
  *(unsigned char *)(a2 + 144) = 1;
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v127, v51);
  WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v125, v52);
  char v54 = v123;
  long long v123 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, v53);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v99, v53);
LABEL_58:
  if (v106) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v104, v42);
  }
  if (v110)
  {
    uint64_t result = v109;
    uint64_t v109 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988B7190(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a38) {
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a36, a2);
  }
  if (a42)
  {
    int v52 = a41;
    a41 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, a2);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  LOBYTE(v18) = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v18);
  LOBYTE(v18) = *(unsigned char *)(a2 + 5);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v18);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v19 = v4;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, &v18);
  uint64_t v18 = *(void *)(a2 + 32);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, (int *)&v18);
  uint64_t v18 = *(void *)(a2 + 40);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, (int *)&v18);
  float v5 = *(float *)(a2 + 52);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 48));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v5);
  float v6 = *(float *)(a2 + 60);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 56));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v6);
  LOBYTE(v18) = *(_DWORD *)(a2 + 64);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v18);
  char v7 = *(unsigned char *)(a2 + 77);
  int v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9) {
    goto LABEL_7;
  }
  *int v8 = v7;
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 68));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 72));
  char v10 = *(unsigned char *)(a2 + 78);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B73F8);
  }
  *uint64_t v11 = v10;
  int v13 = *(_DWORD *)(a2 + 100);
  int v14 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v15 <= 3)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x1988B73D8);
  }
  *int v14 = v13;
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 104));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 80));
  int v16 = *(_DWORD *)(a2 + 96);
  uint64_t v18 = *(void *)(a2 + 88);
  LODWORD(v19) = v16;
  IPC::ArgumentCoder<std::optional<WebCore::FloatSize>,void>::encode<IPC::Encoder,std::optional<WebCore::FloatSize>>(a1, (uint64_t)&v18);
  LOBYTE(v18) = *(unsigned char *)(a2 + 76);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)&v18);
}

void *IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v89 = IPC::Decoder::decode<WebCore::FilterOperation::Type>(a1);
  unsigned __int16 v88 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>((IPC::Decoder *)a1);
  uint64_t v77 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  char v87 = v4;
  IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)a1, (uint64_t)v91);
  long long v76 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
  uint64_t v86 = v5;
  if (!v5) {
    goto LABEL_56;
  }
  while (1)
  {
    uint64_t v75 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    uint64_t v85 = v6;
    if (!v6)
    {
      uint64_t v48 = *a1;
      uint64_t v49 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v50 = a1[3];
      if (v50)
      {
        if (v49) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48);
        }
      }
    }
    uint64_t v74 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    char v84 = v7;
    uint64_t v73 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    char v83 = v8;
    __int16 v90 = 0;
    IPC::Decoder::operator>><unsigned char>(a1, &v90);
    int v9 = v90;
    if (HIBYTE(v90)) {
      BOOL v10 = v90 > 1u;
    }
    else {
      BOOL v10 = 1;
    }
    int v11 = v10;
    int v82 = v11;
    if (v11 == 1)
    {
      uint64_t v51 = *a1;
      uint64_t v52 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v53 = a1[3];
      if (v53 && v52) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v51);
      }
      int v9 = 0;
    }
    int v72 = v9;
    unint64_t v12 = a1[1];
    uint64_t v13 = *a1;
    unint64_t v14 = a1[2] - *a1;
    if (v12 <= v14)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v56 = a1[3];
      if (v56)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
          uint64_t v55 = *a1;
          uint64_t v54 = a1[1];
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
      }
      goto LABEL_65;
    }
    unint64_t v15 = (unsigned __int8 *)(v13 + v14);
    a1[2] = (uint64_t)(v15 + 1);
    if (!v13)
    {
      uint64_t v54 = v12;
      uint64_t v55 = 0;
LABEL_65:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v57 = a1[3];
      if (v57 && v54)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 16))(v57, v55, v54);
        unsigned int v16 = 0;
        uint64_t v13 = *a1;
        unint64_t v12 = a1[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_67;
    }
    unsigned int v16 = *v15;
    if (v16 < 2)
    {
      int v81 = 0;
      char v17 = 1;
      goto LABEL_14;
    }
LABEL_67:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v58 = a1[3];
    if (v58 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v13);
    }
    char v17 = 0;
    int v81 = 1;
LABEL_14:
    if (!v16) {
      char v17 = 0;
    }
    char v71 = v17;
    unint64_t v80 = IPC::Decoder::decode<WebKit::WebWheelEvent::Phase>(a1);
    unint64_t v79 = IPC::Decoder::decode<WebKit::WebWheelEvent::Phase>(a1);
    unint64_t v18 = a1[1];
    uint64_t v19 = *a1;
    unint64_t v20 = a1[2] - *a1;
    if (v18 <= v20)
    {
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v61 = a1[3];
      if (v61)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
          uint64_t v60 = *a1;
          uint64_t v59 = a1[1];
        }
        else
        {
          uint64_t v59 = 0;
          uint64_t v60 = 0;
        }
      }
      goto LABEL_70;
    }
    double v21 = (unsigned __int8 *)(v19 + v20);
    a1[2] = (uint64_t)(v21 + 1);
    if (!v19)
    {
      uint64_t v59 = v18;
      uint64_t v60 = 0;
LABEL_70:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v62 = a1[3];
      if (v62 && v59)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 16))(v62, v60, v59);
        unsigned int v22 = 0;
        uint64_t v19 = *a1;
        unint64_t v18 = a1[1];
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        unsigned int v22 = 0;
      }
      goto LABEL_72;
    }
    unsigned int v22 = *v21;
    if (v22 < 2)
    {
      int v78 = 0;
      char v23 = 1;
LABEL_20:
      uint64_t v24 = v19;
      goto LABEL_21;
    }
LABEL_72:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v63 = a1[3];
    if (v63)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 16))(v63, v19);
        char v23 = 0;
        uint64_t v19 = *a1;
        unint64_t v18 = a1[1];
        int v78 = 1;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    uint64_t v24 = 0;
    char v23 = 0;
    int v78 = 1;
LABEL_21:
    if (!v22) {
      char v23 = 0;
    }
    char v70 = v23;
    unint64_t v25 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v24;
    if (v18 < v25 || v18 - v25 <= 3)
    {
      uint64_t v27 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v64 = a1[3];
      if (v64)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v64 + 16))(v64, v24);
          uint64_t v27 = a1[1];
        }
        else
        {
          uint64_t v27 = 0;
        }
      }
    }
    else
    {
      BOOL v26 = (_DWORD *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (uint64_t)(v26 + 1);
      uint64_t v27 = v18;
      if (v24)
      {
        int v28 = 0;
        int v68 = *v26;
        unsigned int v69 = *v26 & 0xFFFFFF00;
        goto LABEL_27;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v65 = a1[3];
    if (v65 && v27) {
      (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
    }
    int v68 = 0;
    unsigned int v69 = 0;
    int v28 = 1;
LABEL_27:
    unsigned int v29 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)a1);
    char v31 = v30;
    uint64_t v32 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
    char v34 = v33;
    unint64_t v35 = IPC::Decoder::decode<std::optional<WebCore::FloatSize>>((unint64_t *)a1);
    uint64_t v37 = v36;
    __int16 v90 = 0;
    uint64_t result = IPC::Decoder::operator>><unsigned char>(a1, &v90);
    char v39 = v90;
    if (HIBYTE(v90)) {
      BOOL v40 = v90 > 2u;
    }
    else {
      BOOL v40 = 1;
    }
    int v41 = v40;
    if (v41 == 1)
    {
      uint64_t v66 = *a1;
      uint64_t v67 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = (void *)a1[3];
      if (result && v67) {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v66);
      }
      char v39 = 0;
    }
    if (!*a1) {
      break;
    }
    if (v89 > 0xFFu
      && v88 > 0xFFu
      && v87
      && v92
      && v86
      && v85
      && v84
      && v83
      && !v82
      && !v81
      && HIDWORD(v80)
      && HIDWORD(v79)
      && !v78
      && !v28
      && v31
      && v34
      && (v37 & 0xFF00000000) != 0
      && !v41)
    {
      uint64_t v43 = v91[0];
      uint64_t v42 = v91[1];
      *(_DWORD *)a2 = 0;
      *(unsigned char *)(a2 + 4) = v89;
      *(unsigned char *)(a2 + 5) = v88;
      *(void *)(a2 + 8) = v77;
      *(void *)(a2 + 16) = v43;
      *(void *)(a2 + 24) = v42;
      *(void *)(a2 + 32) = v76;
      *(void *)(a2 + 40) = v75;
      *(void *)(a2 + 48) = v74;
      *(void *)(a2 + 56) = v73;
      *(_DWORD *)(a2 + 64) = v72;
      *(_DWORD *)(a2 + 68) = v80;
      *(_DWORD *)(a2 + 72) = v79;
      *(unsigned char *)(a2 + 76) = v39;
      *(unsigned char *)(a2 + 77) = v71;
      *(unsigned char *)(a2 + 78) = v70;
      *(void *)(a2 + 80) = v32;
      *(void *)(a2 + 88) = v35;
      *(_DWORD *)(a2 + 96) = v37;
      *(_DWORD *)(a2 + 100) = v68 | v69;
      char v44 = 1;
      *(void *)(a2 + 104) = v29;
      goto LABEL_54;
    }
    __break(1u);
LABEL_56:
    uint64_t v45 = *a1;
    uint64_t v46 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v47 = a1[3];
    if (v47 && v46) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v45);
    }
  }
  char v44 = 0;
  *(unsigned char *)a2 = 0;
LABEL_54:
  *(unsigned char *)(a2 + 112) = v44;
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::WebWheelEvent::Phase>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    unsigned __int8 v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v6 = *v5;
      if (v6 > 0x20 || ((1 << v6) & 0x100010117) == 0)
      {
        uint64_t v6 = 0;
        unint64_t v8 = 0;
      }
      else
      {
        unint64_t v8 = 0x100000000;
      }
      goto LABEL_12;
    }
    unint64_t v14 = v1;
    uint64_t v15 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      unint64_t v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v2, v1);
        a1 = v20;
        uint64_t v15 = *v20;
        unint64_t v14 = v20[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
  }
  uint64_t v6 = 0;
  unint64_t v8 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v17 = a1[3];
  if (v17)
  {
    uint64_t v19 = a1;
    if (v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
    uint64_t v6 = 0;
    unint64_t v8 = 0;
    a1 = v19;
  }
LABEL_12:
  unint64_t v9 = v8 | v6;
  if (!HIDWORD(v8))
  {
    uint64_t v11 = *a1;
    uint64_t v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      if (v12)
      {
        unint64_t v18 = v8 | v6;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
        return v18;
      }
    }
  }
  return v9;
}

uint64_t IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, a2 + 3);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebFoundTextRange,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  unsigned __int8 v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (uint64_t *)((char *)v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v24 = v4;
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_46;
    }
  }
  while (1)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26 && v24)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v26 + 16))(v26, v25, v24);
      uint64_t v10 = 0;
      unsigned __int8 v5 = *(WTF::StringImpl **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      unsigned __int8 v5 = 0;
      uint64_t v10 = 0;
    }
    int v9 = 1;
LABEL_8:
    unint64_t v11 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
    if (v4 >= v11 && v4 - v11 > 7)
    {
      uint64_t v13 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)a1 + 2) = v13 + 1;
      if (v5)
      {
        int v14 = 0;
        uint64_t v15 = *v13;
        goto LABEL_15;
      }
      unint64_t v27 = v4;
      int v28 = 0;
    }
    else
    {
      unint64_t v27 = 0;
      int v28 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v29 = *((void *)a1 + 3);
      if (v29)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
          int v28 = *(WTF::StringImpl **)a1;
          unint64_t v27 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v27 = 0;
          int v28 = 0;
        }
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v30 = *((void *)a1 + 3);
    if (v30 && v27) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
    }
    uint64_t v15 = 0;
    int v14 = 1;
LABEL_15:
    uint64_t result = IPC::Decoder::decode<WTF::AtomString>(a1, &v34);
    unint64_t v17 = *((void *)a1 + 1);
    unint64_t v18 = *(WTF::StringImpl **)a1;
    unint64_t v19 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
    if (v17 < v19 || v17 - v19 <= 7)
    {
      unint64_t v31 = 0;
      uint64_t v32 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v33 = *((void *)a1 + 3);
      if (v33)
      {
        if (v17)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v33 + 16))(v33, v18, v17);
          uint64_t v32 = *(WTF::StringImpl **)a1;
          unint64_t v31 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v31 = 0;
          uint64_t v32 = 0;
        }
      }
    }
    else
    {
      unint64_t v20 = (uint64_t *)((char *)v18 + v19);
      *((void *)a1 + 2) = v20 + 1;
      if (v18)
      {
        int v21 = 0;
        uint64_t v22 = *v20;
        if (v9) {
          goto LABEL_45;
        }
        goto LABEL_19;
      }
      unint64_t v31 = v17;
      uint64_t v32 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result) {
      break;
    }
    if (!v31) {
      break;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v32);
    if (!*(void *)a1) {
      break;
    }
    uint64_t v22 = 0;
    int v21 = 1;
    if (v9) {
      goto LABEL_45;
    }
LABEL_19:
    if (!v14)
    {
      if (v35)
      {
        char v23 = v34;
        char v34 = 0;
        if (!v21)
        {
          *(void *)a2 = v10;
          *(void *)(a2 + 8) = v15;
          *(void *)(a2 + 16) = v23;
          *(void *)(a2 + 24) = v22;
          *(unsigned char *)(a2 + 32) = 1;
          return result;
        }
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    if (v4)
    {
      (*(void (**)(WTF::StringImpl *))(*(void *)result + 16))(result);
      unint64_t v25 = *(WTF::StringImpl **)a1;
      unint64_t v24 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v24 = 0;
      unint64_t v25 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v35)
  {
    uint64_t result = v34;
    char v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988B80EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  char v4 = *(unsigned char *)(a2 + 64);
  unsigned __int8 v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B851CLL);
  }
  *unsigned __int8 v5 = v4;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(a1, (void *)(a2 + 68));
  v49[0] = *(unsigned char *)(a2 + 84);
  IPC::Encoder::operator<<<BOOL>(a1, v49);
  char v7 = *(unsigned char *)(a2 + 85);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B853CLL);
  }
  *unint64_t v8 = v7;
  char v10 = *(unsigned char *)(a2 + 86);
  unint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B855CLL);
  }
  *unint64_t v11 = v10;
  char v13 = *(unsigned char *)(a2 + 87);
  int v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B857CLL);
  }
  *int v14 = v13;
  char v16 = *(unsigned char *)(a2 + 88);
  unint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B859CLL);
  }
  *unint64_t v17 = v16;
  char v19 = *(unsigned char *)(a2 + 89);
  unint64_t v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B85BCLL);
  }
  *unint64_t v20 = v19;
  char v22 = *(unsigned char *)(a2 + 90);
  char v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B85DCLL);
  }
  *char v23 = v22;
  v49[0] = *(unsigned char *)(a2 + 91);
  IPC::Encoder::operator<<<BOOL>(a1, v49);
  int v25 = *(unsigned __int8 *)(a2 + 392);
  uint64_t v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v25)
  {
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1988B863CLL);
    }
    *uint64_t v26 = 1;
    if (!*(unsigned char *)(a2 + 392))
    {
      uint64_t v43 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if ((v55 & 0x8000000000000) != 0)
      {
        uint64_t v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v42);
        }
      }
      char v44 = v54;
      uint64_t v54 = 0;
      if (v44)
      {
        if (v44[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v44 + 8))(v44);
        }
        else {
          --v44[2];
        }
      }
      uint64_t v45 = v53;
      uint64_t v53 = 0;
      if (v45)
      {
        if (v45[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
        }
        else {
          --v45[2];
        }
      }
      uint64_t v46 = v52;
      uint64_t v52 = 0;
      if (v46)
      {
        if (v46[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v46 + 8))(v46);
        }
        else {
          --v46[2];
        }
      }
      uint64_t v47 = v50;
      if (v50)
      {
        uint64_t v50 = 0;
        int v51 = 0;
        WTF::fastFree(v47, v42);
      }
      _Unwind_Resume(v43);
    }
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, (char *)(a2 + 96));
  }
  else
  {
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1988B867CLL);
    }
    *uint64_t v26 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(a1, a2 + 400);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 432));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 440));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 448));
  WebKit::WebHitTestResultData::getImageSharedMemoryHandle((WebKit::WebHitTestResultData *)a2, v49);
  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(a1, (unint64_t)v49);
  if (v49[16]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v49);
  }
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>,void>::encode<IPC::Encoder,WebCore::ShareableBitmap>(a1, (WebCore::ShareableBitmap **)(a2 + 464));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 472));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 480));
  char v28 = *(unsigned char *)(a2 + 488);
  uint64_t v29 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B85FCLL);
  }
  *uint64_t v29 = v28;
  char v31 = *(unsigned char *)(a2 + 489);
  uint64_t v32 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x1988B861CLL);
  }
  *uint64_t v32 = v31;
  IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode(a1, a2 + 496);
  uint64_t v34 = *(void *)(a2 + 656);
  uint64_t result = (WTF *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v34)
  {
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x1988B865CLL);
    }
    *(unsigned char *)uint64_t result = 1;
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v49, (const WebCore::TextIndicatorData *)(*(void *)(a2 + 656) + 8));
    IPC::ArgumentCoder<WebCore::TextIndicatorData,void>::encode(a1, (uint64_t)v49);
    if ((v55 & 0x8000000000000) != 0)
    {
      int v41 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, v37);
      }
    }
    uint64_t v38 = v54;
    uint64_t v54 = 0;
    if (v38)
    {
      if (v38[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v38 + 8))(v38);
      }
      else {
        --v38[2];
      }
    }
    char v39 = v53;
    uint64_t v53 = 0;
    if (v39)
    {
      if (v39[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
      }
      else {
        --v39[2];
      }
    }
    BOOL v40 = v52;
    uint64_t v52 = 0;
    if (v40)
    {
      if (v40[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v40 + 8))(v40);
      }
      else {
        --v40[2];
      }
    }
    uint64_t result = v50;
    if (v50)
    {
      uint64_t v50 = 0;
      int v51 = 0;
      return (WTF *)WTF::fastFree(result, v37);
    }
  }
  else
  {
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x1988B869CLL);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v195);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v193);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v191);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v189);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v187);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v185);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v183);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v181);
  unint64_t v4 = *((void *)a1 + 1);
  unsigned __int8 v5 = *(TextIndicatorData **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v77 = 0;
    int v78 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v79 = *((void *)a1 + 3);
    if (v79)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
        int v78 = *(TextIndicatorData **)a1;
        unint64_t v77 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v77 = 0;
        int v78 = 0;
      }
    }
    goto LABEL_96;
  }
  char v7 = (unsigned __int8 *)v5 + v6;
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v77 = v4;
    int v78 = 0;
LABEL_96:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v80 = *((void *)a1 + 3);
    if (v80 && v77)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v80 + 16))(v80, v78, v77);
      unsigned int v8 = 0;
      unsigned __int8 v5 = *(TextIndicatorData **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      unsigned __int8 v5 = 0;
      unsigned int v8 = 0;
    }
    goto LABEL_98;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    int v9 = 0;
    char v10 = 1;
    goto LABEL_5;
  }
LABEL_98:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v81 = *((void *)a1 + 3);
  if (v81 && v4) {
    (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v81 + 16))(v81, v5);
  }
  char v10 = 0;
  int v9 = 1;
LABEL_5:
  if (v8) {
    char v11 = v10;
  }
  else {
    char v11 = 0;
  }
  IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a1, (uint64_t)&v179);
  unint64_t v12 = *((void *)a1 + 1);
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v14 = *((void *)a1 + 2) - *(void *)a1;
  if (v12 <= v14)
  {
    unint64_t v82 = 0;
    char v83 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v84 = *((void *)a1 + 3);
    if (v84)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
        char v83 = *(TextIndicatorData **)a1;
        unint64_t v82 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v82 = 0;
        char v83 = 0;
      }
    }
    goto LABEL_101;
  }
  uint64_t v15 = (unsigned __int8 *)v13 + v14;
  *((void *)a1 + 2) = v15 + 1;
  if (!v13)
  {
    unint64_t v82 = v12;
    char v83 = 0;
LABEL_101:
    unint64_t v12 = 0;
    char v13 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v85 = *((void *)a1 + 3);
    if (v85)
    {
      if (v82)
      {
        (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v85 + 16))(v85, v83, v82);
        char v13 = *(TextIndicatorData **)a1;
        unint64_t v12 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        char v13 = 0;
      }
    }
    goto LABEL_102;
  }
  unsigned int v16 = *v15;
  if (v16 < 3)
  {
    __int16 v17 = v16 | 0x100;
    goto LABEL_12;
  }
LABEL_102:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v86 = *((void *)a1 + 3);
  if (!v86 || !v12)
  {
    char v13 = 0;
    unint64_t v12 = 0;
    __int16 v178 = 0;
LABEL_104:
    unint64_t v87 = 0;
    unsigned __int16 v88 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v89 = *((void *)a1 + 3);
    if (v89)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v89 + 16))(v89, v13);
        unsigned __int16 v88 = *(TextIndicatorData **)a1;
        unint64_t v87 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v87 = 0;
        unsigned __int16 v88 = 0;
      }
    }
    goto LABEL_105;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v86 + 16))(v86, v13);
  __int16 v17 = 0;
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v12 = *((void *)a1 + 1);
LABEL_12:
  __int16 v178 = v17;
  if (v12 <= *((void *)a1 + 2) - (void)v13) {
    goto LABEL_104;
  }
  uint64_t v18 = (unsigned __int8 *)*((void *)a1 + 2);
  char v19 = v18 + 1;
  *((void *)a1 + 2) = v18 + 1;
  if (!v13)
  {
    unint64_t v87 = v12;
    unsigned __int16 v88 = 0;
LABEL_105:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v90 = *((void *)a1 + 3);
    if (v90 && v87)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v90 + 16))(v90, v88, v87);
      unsigned int v20 = 0;
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v12 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v12 = 0;
      char v13 = 0;
      unsigned int v20 = 0;
    }
    goto LABEL_107;
  }
  unsigned int v20 = *v18;
  if (v20 < 2)
  {
    int v21 = 0;
    char v22 = 1;
    goto LABEL_16;
  }
LABEL_107:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v91 = *((void *)a1 + 3);
  if (!v91 || !v12)
  {
    char v23 = 0;
    unint64_t v92 = 0;
    char v13 = 0;
    int v21 = 1;
LABEL_109:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v93 = *((void *)a1 + 3);
    if (v93 && v92)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v93 + 16))(v93, v13, v92);
      unsigned int v27 = 0;
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v12 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v12 = 0;
      char v13 = 0;
      unsigned int v27 = 0;
    }
    goto LABEL_111;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v91 + 16))(v91, v13);
  char v22 = 0;
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v12 = *((void *)a1 + 1);
  int v21 = 1;
  char v19 = (unsigned __int8 *)*((void *)a1 + 2);
LABEL_16:
  if (v20) {
    char v23 = v22;
  }
  else {
    char v23 = 0;
  }
  uint64_t v24 = (unsigned __int8 *)(v19 - (unsigned __int8 *)v13);
  if (v12 <= (unint64_t)v24)
  {
    unint64_t v92 = 0;
    uint64_t v144 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v144 && v12)
    {
      (*(void (**)(uint64_t))(*(void *)v144 + 16))(v144);
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v92 = *((void *)a1 + 1);
    }
    else
    {
      char v13 = 0;
    }
    goto LABEL_109;
  }
  int v25 = &v24[(void)v13];
  uint64_t v26 = (uint64_t)&v24[(void)v13 + 1];
  *((void *)a1 + 2) = v26;
  if (!v13)
  {
    unint64_t v92 = v12;
    goto LABEL_109;
  }
  unsigned int v27 = *v25;
  if (v27 < 2)
  {
    int v156 = 0;
    char v28 = 1;
    goto LABEL_23;
  }
LABEL_111:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v94 = *((void *)a1 + 3);
  if (!v94 || !v12)
  {
    char v29 = 0;
    unint64_t v95 = 0;
    char v13 = 0;
    int v156 = 1;
LABEL_113:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v96 = *((void *)a1 + 3);
    if (v96 && v95)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v96 + 16))(v96, v13, v95);
      unsigned int v33 = 0;
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v12 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v12 = 0;
      char v13 = 0;
      unsigned int v33 = 0;
    }
    goto LABEL_115;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v94 + 16))(v94, v13);
  char v28 = 0;
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v12 = *((void *)a1 + 1);
  int v156 = 1;
  uint64_t v26 = *((void *)a1 + 2);
LABEL_23:
  if (v27) {
    char v29 = v28;
  }
  else {
    char v29 = 0;
  }
  unint64_t v30 = v26 - (void)v13;
  if (v12 <= v30)
  {
    unint64_t v95 = 0;
    uint64_t v143 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v143 && v12)
    {
      (*(void (**)(uint64_t))(*(void *)v143 + 16))(v143);
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v95 = *((void *)a1 + 1);
    }
    else
    {
      char v13 = 0;
    }
    goto LABEL_113;
  }
  char v31 = (unsigned __int8 *)v13 + v30;
  uint64_t v32 = (uint64_t)&v13->selectionRectInRootViewCoordinates.m_location + v30 + 1;
  *((void *)a1 + 2) = v32;
  if (!v13)
  {
    unint64_t v95 = v12;
    goto LABEL_113;
  }
  unsigned int v33 = *v31;
  if (v33 < 2)
  {
    int v155 = 0;
    char v34 = 1;
    goto LABEL_30;
  }
LABEL_115:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v97 = *((void *)a1 + 3);
  if (!v97 || !v12)
  {
    char v150 = 0;
    unint64_t v98 = 0;
    char v13 = 0;
    int v155 = 1;
LABEL_117:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v99 = *((void *)a1 + 3);
    if (v99 && v98)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v99 + 16))(v99, v13, v98);
      unsigned int v38 = 0;
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v12 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v12 = 0;
      char v13 = 0;
      unsigned int v38 = 0;
    }
    goto LABEL_119;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v97 + 16))(v97, v13);
  char v34 = 0;
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v12 = *((void *)a1 + 1);
  int v155 = 1;
  uint64_t v32 = *((void *)a1 + 2);
LABEL_30:
  if (!v33) {
    char v34 = 0;
  }
  char v150 = v34;
  unint64_t v35 = v32 - (void)v13;
  if (v12 <= v35)
  {
    unint64_t v98 = 0;
    uint64_t v142 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v142 && v12)
    {
      (*(void (**)(uint64_t))(*(void *)v142 + 16))(v142);
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v98 = *((void *)a1 + 1);
    }
    else
    {
      char v13 = 0;
    }
    goto LABEL_117;
  }
  uint64_t v36 = (unsigned __int8 *)v13 + v35;
  uint64_t v37 = (uint64_t)&v13->selectionRectInRootViewCoordinates.m_location + v35 + 1;
  *((void *)a1 + 2) = v37;
  if (!v13)
  {
    unint64_t v98 = v12;
    goto LABEL_117;
  }
  unsigned int v38 = *v36;
  if (v38 < 2)
  {
    int v154 = 0;
    char v39 = 1;
    goto LABEL_36;
  }
LABEL_119:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v100 = *((void *)a1 + 3);
  if (!v100 || !v12)
  {
    char v149 = 0;
    unint64_t v101 = 0;
    char v13 = 0;
    int v154 = 1;
LABEL_121:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v102 = *((void *)a1 + 3);
    if (v102 && v101)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v102 + 16))(v102, v13, v101);
      unsigned int v43 = 0;
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v12 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v12 = 0;
      char v13 = 0;
      unsigned int v43 = 0;
    }
    goto LABEL_123;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v100 + 16))(v100, v13);
  char v39 = 0;
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v12 = *((void *)a1 + 1);
  int v154 = 1;
  uint64_t v37 = *((void *)a1 + 2);
LABEL_36:
  if (!v38) {
    char v39 = 0;
  }
  char v149 = v39;
  unint64_t v40 = v37 - (void)v13;
  if (v12 <= v40)
  {
    unint64_t v101 = 0;
    uint64_t v141 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v141 && v12)
    {
      (*(void (**)(uint64_t))(*(void *)v141 + 16))(v141);
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v101 = *((void *)a1 + 1);
    }
    else
    {
      char v13 = 0;
    }
    goto LABEL_121;
  }
  int v41 = (unsigned __int8 *)v13 + v40;
  uint64_t v42 = (uint64_t)&v13->selectionRectInRootViewCoordinates.m_location + v40 + 1;
  *((void *)a1 + 2) = v42;
  if (!v13)
  {
    unint64_t v101 = v12;
    goto LABEL_121;
  }
  unsigned int v43 = *v41;
  if (v43 < 2)
  {
    int v153 = 0;
    char v44 = 1;
    goto LABEL_42;
  }
LABEL_123:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v103 = *((void *)a1 + 3);
  if (!v103 || !v12)
  {
    char v148 = 0;
    unint64_t v104 = 0;
    char v13 = 0;
    int v153 = 1;
LABEL_125:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v105 = *((void *)a1 + 3);
    if (v105 && v104)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v105 + 16))(v105, v13, v104);
      unsigned int v47 = 0;
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v12 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v12 = 0;
      char v13 = 0;
      unsigned int v47 = 0;
    }
    goto LABEL_127;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v103 + 16))(v103, v13);
  char v44 = 0;
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v12 = *((void *)a1 + 1);
  int v153 = 1;
  uint64_t v42 = *((void *)a1 + 2);
LABEL_42:
  if (!v43) {
    char v44 = 0;
  }
  char v148 = v44;
  unint64_t v45 = v42 - (void)v13;
  if (v12 <= v45)
  {
    unint64_t v104 = 0;
    uint64_t v140 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v140 && v12)
    {
      (*(void (**)(uint64_t))(*(void *)v140 + 16))(v140);
      char v13 = *(TextIndicatorData **)a1;
      unint64_t v104 = *((void *)a1 + 1);
    }
    else
    {
      char v13 = 0;
    }
    goto LABEL_125;
  }
  uint64_t v46 = (unsigned __int8 *)v13 + v45;
  *((void *)a1 + 2) = v46 + 1;
  if (!v13)
  {
    unint64_t v104 = v12;
    goto LABEL_125;
  }
  unsigned int v47 = *v46;
  if (v47 < 2)
  {
    int v152 = 0;
    char v48 = 1;
    goto LABEL_48;
  }
LABEL_127:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v106 = *((void *)a1 + 3);
  if (!v106 || !v12)
  {
    char v13 = 0;
    char v147 = 0;
    unint64_t v12 = 0;
    int v152 = 1;
LABEL_129:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v107 = *((void *)a1 + 3);
    if (v107)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v107 + 16))(v107, v13);
        int v108 = *(TextIndicatorData **)a1;
        unint64_t v12 = *((void *)a1 + 1);
      }
      else
      {
        int v108 = 0;
      }
    }
    else
    {
      int v108 = 0;
      unint64_t v12 = 0;
    }
    goto LABEL_131;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v106 + 16))(v106, v13);
  char v48 = 0;
  char v13 = *(TextIndicatorData **)a1;
  unint64_t v12 = *((void *)a1 + 1);
  int v152 = 1;
LABEL_48:
  if (!v47) {
    char v48 = 0;
  }
  char v147 = v48;
  if (v12 <= *((void *)a1 + 2) - (void)v13) {
    goto LABEL_129;
  }
  uint64_t v49 = (unsigned __int8 *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v49 + 1;
  if (!v13)
  {
    int v108 = 0;
LABEL_131:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v109 = *((void *)a1 + 3);
    if (v109)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v109 + 16))(v109, v108);
        char v13 = *(TextIndicatorData **)a1;
        unint64_t v12 = *((void *)a1 + 1);
      }
      else
      {
        char v13 = 0;
      }
    }
    else
    {
      char v13 = 0;
      unint64_t v12 = 0;
    }
    goto LABEL_133;
  }
  unsigned int v50 = *v49;
  if (v50 < 3)
  {
    __int16 v51 = v50 | 0x100;
    goto LABEL_54;
  }
LABEL_133:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v110 = *((void *)a1 + 3);
  if (v110 && v12) {
    (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v110 + 16))(v110, v13);
  }
  __int16 v51 = 0;
LABEL_54:
  __int16 v177 = v51;
  IPC::Decoder::decode<std::optional<WebKit::FrameInfoData>>((uint64_t *)a1, v206);
  IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>((unint64_t *)a1, (uint64_t)v175);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v173);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v171);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v169);
  IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v167);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>>((WTF::MachSendRight *)&v165, (uint64_t *)a1);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v163);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v161);
  unint64_t v52 = *((void *)a1 + 1);
  uint64_t v53 = *(TextIndicatorData **)a1;
  unint64_t v54 = *((void *)a1 + 2) - *(void *)a1;
  if (v52 <= v54)
  {
    unint64_t v111 = 0;
    int v112 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v113 = *((void *)a1 + 3);
    if (v113)
    {
      if (v52)
      {
        (*(void (**)(uint64_t))(*(void *)v113 + 16))(v113);
        int v112 = *(TextIndicatorData **)a1;
        unint64_t v111 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v111 = 0;
        int v112 = 0;
      }
    }
    goto LABEL_136;
  }
  uint64_t v55 = (unsigned __int8 *)v53 + v54;
  uint64_t v56 = (uint64_t)&v53->selectionRectInRootViewCoordinates.m_location + v54 + 1;
  *((void *)a1 + 2) = v56;
  if (!v53)
  {
    unint64_t v111 = v52;
    int v112 = 0;
LABEL_136:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v114 = *((void *)a1 + 3);
    if (v114 && v111)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v114 + 16))(v114, v112, v111);
      unsigned int v57 = 0;
      uint64_t v53 = *(TextIndicatorData **)a1;
      unint64_t v52 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      unsigned int v57 = 0;
    }
    goto LABEL_138;
  }
  unsigned int v57 = *v55;
  if (v57 < 2)
  {
    int v151 = 0;
    char v58 = 1;
    goto LABEL_58;
  }
LABEL_138:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v115 = *((void *)a1 + 3);
  if (!v115 || !v52)
  {
    char v59 = 0;
    unint64_t v116 = 0;
    uint64_t v53 = 0;
    int v151 = 1;
LABEL_140:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v117 = *((void *)a1 + 3);
    if (v117 && v116)
    {
      (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v117 + 16))(v117, v53, v116);
      unsigned int v62 = 0;
      uint64_t v53 = *(TextIndicatorData **)a1;
      unint64_t v52 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      unsigned int v62 = 0;
    }
    goto LABEL_142;
  }
  (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v115 + 16))(v115, v53);
  char v58 = 0;
  uint64_t v53 = *(TextIndicatorData **)a1;
  unint64_t v52 = *((void *)a1 + 1);
  int v151 = 1;
  uint64_t v56 = *((void *)a1 + 2);
LABEL_58:
  if (v57) {
    char v59 = v58;
  }
  else {
    char v59 = 0;
  }
  unint64_t v60 = v56 - (void)v53;
  if (v52 <= v60)
  {
    unint64_t v116 = 0;
    uint64_t v139 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v139 && v52)
    {
      (*(void (**)(uint64_t))(*(void *)v139 + 16))(v139);
      uint64_t v53 = *(TextIndicatorData **)a1;
      unint64_t v116 = *((void *)a1 + 1);
    }
    else
    {
      uint64_t v53 = 0;
    }
    goto LABEL_140;
  }
  uint64_t v61 = (unsigned __int8 *)v53 + v60;
  *((void *)a1 + 2) = v61 + 1;
  if (!v53)
  {
    unint64_t v116 = v52;
    goto LABEL_140;
  }
  unsigned int v62 = *v61;
  if (v62 < 2)
  {
    int v63 = 0;
    char v64 = 1;
    goto LABEL_65;
  }
LABEL_142:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v118 = *((void *)a1 + 3);
  if (v118 && v52) {
    (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v118 + 16))(v118, v53);
  }
  char v64 = 0;
  int v63 = 1;
LABEL_65:
  if (v62) {
    char v65 = v64;
  }
  else {
    char v65 = 0;
  }
  IPC::Decoder::decode<WebCore::DictionaryPopupInfo>((unint64_t *)a1, v160);
  unint64_t v67 = *((void *)a1 + 1);
  int v68 = *(TextIndicatorData **)a1;
  unint64_t v69 = *((void *)a1 + 2) - *(void *)a1;
  if (v67 <= v69)
  {
    char v146 = v29;
    unint64_t v119 = 0;
    long long v120 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v121 = *((void *)a1 + 3);
    if (v121)
    {
      if (v67)
      {
        (*(void (**)(uint64_t))(*(void *)v121 + 16))(v121);
        long long v120 = *(TextIndicatorData **)a1;
        unint64_t v119 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v119 = 0;
        long long v120 = 0;
      }
    }
    goto LABEL_145;
  }
  char v70 = (unsigned __int8 *)v68 + v69;
  *((void *)a1 + 2) = v70 + 1;
  if (!v68)
  {
    char v146 = v29;
    unint64_t v119 = v67;
    long long v120 = 0;
LABEL_145:
    unint64_t v67 = 0;
    int v68 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v122 = *((void *)a1 + 3);
    if (v122)
    {
      if (v119)
      {
        (*(void (**)(uint64_t, TextIndicatorData *, unint64_t))(*(void *)v122 + 16))(v122, v120, v119);
        int v68 = *(TextIndicatorData **)a1;
        unint64_t v67 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v67 = 0;
        int v68 = 0;
      }
    }
    goto LABEL_146;
  }
  unsigned int v71 = *v70;
  if (v71 >= 2)
  {
    char v146 = v29;
LABEL_146:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v123 = *((void *)a1 + 3);
    if (v123 && v67) {
      (*(void (**)(uint64_t, TextIndicatorData *))(*(void *)v123 + 16))(v123, v68);
    }
    LOBYTE(v158) = 0;
    char v159 = 0;
    goto LABEL_148;
  }
  if (v71)
  {
    char v146 = v29;
    uint64_t v66 = (WTF *)IPC::Decoder::decode<WebCore::TextIndicatorData>((unint64_t *)a1, v198);
    int v72 = *(TextIndicatorData **)a1;
    if (*(void *)a1)
    {
      if (!v205) {
        goto LABEL_259;
      }
      uint64_t v66 = (WTF *)WebCore::TextIndicator::create((uint64_t *)&v197, (WebCore::TextIndicator *)v198, v68);
      uint64_t v145 = v197;
    }
    else
    {
      uint64_t v145 = 0;
    }
    if (v205)
    {
      if ((v204 & 0x8000000000000) != 0)
      {
        char v138 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v204 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v138);
          WTF::fastFree((WTF *)v138, v68);
        }
      }
      uint64_t v73 = v203;
      unint64_t v203 = 0;
      if (v73)
      {
        if (v73[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v73 + 8))(v73);
        }
        else {
          --v73[2];
        }
      }
      uint64_t v74 = v202;
      unint64_t v202 = 0;
      if (v74)
      {
        if (v74[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v74 + 8))(v74);
        }
        else {
          --v74[2];
        }
      }
      uint64_t v75 = v201;
      unint64_t v201 = 0;
      if (v75)
      {
        if (v75[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v75 + 8))(v75);
        }
        else {
          --v75[2];
        }
      }
      uint64_t v66 = v199;
      if (v199)
      {
        unint64_t v199 = 0;
        int v200 = 0;
        uint64_t v66 = (WTF *)WTF::fastFree(v66, v68);
      }
    }
    LOBYTE(v158) = 0;
    char v159 = 0;
    if (v72)
    {
      uint64_t v158 = v145;
      char v29 = v146;
      goto LABEL_94;
    }
LABEL_148:
    int v68 = *(TextIndicatorData **)a1;
    unint64_t v67 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v66 = (WTF *)*((void *)a1 + 3);
    if (v66) {
      goto LABEL_260;
    }
    goto LABEL_149;
  }
  uint64_t v158 = 0;
LABEL_94:
  int v76 = 0;
  char v159 = 1;
  while (*(void *)a1)
  {
    if (v196)
    {
      if (v194)
      {
        if (v192)
        {
          if (v190)
          {
            if (v188)
            {
              if (v186)
              {
                if (v184)
                {
                  if (v182)
                  {
                    if (!v9)
                    {
                      if (v180)
                      {
                        if (HIBYTE(v178))
                        {
                          if (!v21 && !v156 && !v155 && !v154 && !v153 && !v152)
                          {
                            if (HIBYTE(v177))
                            {
                              if (v207)
                              {
                                if (v176)
                                {
                                  v157[0] = v175[0];
                                  v157[1] = v175[1];
                                  if (v174)
                                  {
                                    if (v172
                                      && v170
                                      && v168
                                      && v166
                                      && v164
                                      && v162
                                      && !v151
                                      && !v63
                                      && v160[160]
                                      && !v76)
                                    {
                                      WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v198, (_DWORD **)&v195, (_DWORD **)&v193, (_DWORD **)&v191, (_DWORD **)&v189, (_DWORD **)&v187, (_DWORD **)&v185, (_DWORD **)&v183, (_DWORD **)&v181, v11, &v179, (char *)&v178, v23, v29, v150, v149, v148, v147, (char *)&v177,
                                        (uint64_t)v206,
                                        v157,
                                        (_DWORD **)&v173,
                                        (_DWORD **)&v171,
                                        (_DWORD **)&v169,
                                        (uint64_t)v167,
                                        (atomic_uint **)&v165,
                                        (_DWORD **)&v163,
                                        (_DWORD **)&v161,
                                        v59,
                                        v65,
                                        (uint64_t)v160,
                                        (_DWORD **)&v158);
                                      WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)a2, v198);
                                      a2[664] = 1;
                                      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v198);
                                      goto LABEL_183;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_259:
    __break(1u);
LABEL_260:
    if (v67) {
      uint64_t v66 = (WTF *)(*(uint64_t (**)(WTF *, TextIndicatorData *))(*(void *)v66 + 16))(v66, v68);
    }
LABEL_149:
    int v76 = 1;
    char v29 = v146;
  }
  *a2 = 0;
  a2[664] = 0;
  if (v76) {
    goto LABEL_185;
  }
LABEL_183:
  if (v158) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v158);
  }
LABEL_185:
  std::__optional_destruct_base<WebCore::DictionaryPopupInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v160);
  if (v162)
  {
    uint64_t v125 = v161;
    __int16 v161 = 0;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2) {
        WTF::StringImpl::destroy(v125, v124);
      }
      else {
        *(_DWORD *)v125 -= 2;
      }
    }
  }
  if (v164)
  {
    uint64_t v126 = v163;
    char v163 = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2) {
        WTF::StringImpl::destroy(v126, v124);
      }
      else {
        *(_DWORD *)v126 -= 2;
      }
    }
  }
  if (v166 && v165) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v165, v124);
  }
  if (v168 && v167[16]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v167);
  }
  if (v170)
  {
    uint64_t v127 = v169;
    uint64_t v169 = 0;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2) {
        WTF::StringImpl::destroy(v127, v124);
      }
      else {
        *(_DWORD *)v127 -= 2;
      }
    }
  }
  if (v172)
  {
    uint64_t v128 = v171;
    long long v171 = 0;
    if (v128)
    {
      if (*(_DWORD *)v128 == 2) {
        WTF::StringImpl::destroy(v128, v124);
      }
      else {
        *(_DWORD *)v128 -= 2;
      }
    }
  }
  if (v174)
  {
    char v129 = v173;
    uint64_t v173 = 0;
    if (v129)
    {
      if (*(_DWORD *)v129 == 2) {
        WTF::StringImpl::destroy(v129, v124);
      }
      else {
        *(_DWORD *)v129 -= 2;
      }
    }
  }
  if (v207) {
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v206, v124);
  }
  if (v182)
  {
    uint64_t v130 = v181;
    char v181 = 0;
    if (v130)
    {
      if (*(_DWORD *)v130 == 2) {
        WTF::StringImpl::destroy(v130, v124);
      }
      else {
        *(_DWORD *)v130 -= 2;
      }
    }
  }
  if (v184)
  {
    char v131 = v183;
    unint64_t v183 = 0;
    if (v131)
    {
      if (*(_DWORD *)v131 == 2) {
        WTF::StringImpl::destroy(v131, v124);
      }
      else {
        *(_DWORD *)v131 -= 2;
      }
    }
  }
  if (v186)
  {
    long long v132 = v185;
    unint64_t v185 = 0;
    if (v132)
    {
      if (*(_DWORD *)v132 == 2) {
        WTF::StringImpl::destroy(v132, v124);
      }
      else {
        *(_DWORD *)v132 -= 2;
      }
    }
  }
  if (v188)
  {
    long long v133 = v187;
    unint64_t v187 = 0;
    if (v133)
    {
      if (*(_DWORD *)v133 == 2) {
        WTF::StringImpl::destroy(v133, v124);
      }
      else {
        *(_DWORD *)v133 -= 2;
      }
    }
  }
  if (v190)
  {
    long long v134 = v189;
    unint64_t v189 = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2) {
        WTF::StringImpl::destroy(v134, v124);
      }
      else {
        *(_DWORD *)v134 -= 2;
      }
    }
  }
  if (v192)
  {
    uint64_t v135 = v191;
    unint64_t v191 = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2) {
        WTF::StringImpl::destroy(v135, v124);
      }
      else {
        *(_DWORD *)v135 -= 2;
      }
    }
  }
  if (v194)
  {
    char v136 = v193;
    unint64_t v193 = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2) {
        WTF::StringImpl::destroy(v136, v124);
      }
      else {
        *(_DWORD *)v136 -= 2;
      }
    }
  }
  if (v196)
  {
    uint64_t v137 = v195;
    unint64_t v195 = 0;
    if (v137)
    {
      if (*(_DWORD *)v137 == 2) {
        WTF::StringImpl::destroy(v137, v124);
      }
      else {
        *(_DWORD *)v137 -= 2;
      }
    }
  }
}

void sub_1988B9DEC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (LOBYTE(STACK[0x270]))
  {
    unint64_t v3 = (WTF::StringImpl *)STACK[0x268];
    STACK[0x268] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x280]))
  {
    unint64_t v4 = (WTF::StringImpl *)STACK[0x278];
    STACK[0x278] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x290]))
  {
    unsigned __int8 v5 = (WTF::StringImpl *)STACK[0x288];
    STACK[0x288] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2A0]))
  {
    unint64_t v6 = (WTF::StringImpl *)STACK[0x298];
    STACK[0x298] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2B0]))
  {
    char v7 = (WTF::StringImpl *)STACK[0x2A8];
    STACK[0x2A8] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2C0]))
  {
    unsigned int v8 = (WTF::StringImpl *)STACK[0x2B8];
    STACK[0x2B8] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, a2);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2D0]))
  {
    int v9 = (WTF::StringImpl *)STACK[0x2C8];
    STACK[0x2C8] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, a2);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2E0]))
  {
    char v10 = (WTF::StringImpl *)STACK[0x2D8];
    STACK[0x2D8] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, a2);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

void sub_1988BA238()
{
}

void sub_1988BA240()
{
}

void sub_1988BA248()
{
}

void sub_1988BA250()
{
}

void sub_1988BA258()
{
}

void sub_1988BA260()
{
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::FrameInfoData>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::FrameInfoData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[304])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988BA2D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 304)) {
    std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

void IPC::Decoder::decode<WebCore::DictionaryPopupInfo>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::decode(a1, a2);
  if (!a2[160])
  {
    unint64_t v4 = *a1;
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1988BA3E8(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebCore::DictionaryPopupInfo,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::WebImage,void>::encode(IPC::Encoder *a1, WebKit::WebImage *this)
{
  WebKit::WebImage::parametersAndHandle(this, (uint64_t)v7);
  int v3 = v9;
  unint64_t v4 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v3)
  {
    if (v5)
    {
      *unint64_t v4 = 1;
      if (v9)
      {
        IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::encode(a1, (uint64_t)v7);
        IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(a1, (unint64_t)&v8);
        return std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7);
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1988BA4A8);
  }
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1988BA4C8);
  }
  *unint64_t v4 = 0;
  return std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7);
}

void sub_1988BA4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 2));

  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)(a2 + 27));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v74);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v72);
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v69);
  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, &v47);
  if (!*(void *)a1) {
    goto LABEL_32;
  }
  if (!v75) {
    goto LABEL_31;
  }
  uint64_t v5 = v74;
  uint64_t v74 = 0;
  char v22 = v5;
  if (!v73
    || (unint64_t v6 = v72, v72 = 0, v23 = v6, !v71)
    || (WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v24, (uint64_t)v69),
        BOOL v7 = v70,
        char v70 = 0,
        CFTypeRef v25 = v7,
        !v68))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    *a2 = 0;
    a2[472] = 0;
    goto LABEL_20;
  }
  long long v27 = v48;
  long long v28 = v49;
  long long v8 = v52;
  long long v52 = 0u;
  long long v9 = v53;
  long long v53 = 0u;
  uint64_t v10 = v50;
  uint64_t v26 = v47;
  uint64_t v47 = 0;
  LODWORD(v48) = v48 & 0xFFFFFFFE;
  uint64_t v50 = 0;
  uint64_t v29 = v10;
  uint64_t v30 = v51;
  long long v31 = v8;
  long long v32 = v9;
  *(void *)&long long v8 = v54;
  uint64_t v54 = 0;
  uint64_t v33 = v8;
  uint64_t v11 = v55;
  uint64_t v55 = 0;
  uint64_t v34 = v11;
  *(void *)&long long v8 = v56;
  uint64_t v56 = 0;
  uint64_t v35 = v8;
  uint64_t v12 = v57;
  uint64_t v57 = 0;
  uint64_t v36 = v12;
  LOBYTE(v37) = 0;
  char v38 = 0;
  if (v59)
  {
    uint64_t v21 = v58;
    uint64_t v58 = 0;
    uint64_t v37 = v21;
    char v38 = 1;
  }
  *(_DWORD *)&v44[15] = *(_DWORD *)&v65[15];
  long long v43 = v64;
  *(_OWORD *)char v44 = *(_OWORD *)v65;
  long long v39 = v60;
  long long v40 = v61;
  long long v41 = v62;
  long long v42 = v63;
  char v13 = v66;
  uint64_t v66 = 0;
  CFTypeRef cf = v13;
  char v46 = v67;
  WebKit::WebNavigationDataStore::WebNavigationDataStore((uint64_t)a2, (uint64_t *)&v22);
  a2[472] = 1;
  CFTypeRef v15 = cf;
  CFTypeRef cf = 0;
  if (v15) {
    CFRelease(v15);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v26, v14);
  CFTypeRef v16 = v25;
  CFTypeRef v25 = 0;
  if (v16) {
    CFRelease(v16);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v24);
  __int16 v17 = v23;
  char v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v4);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = v22;
  char v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v4);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
LABEL_20:
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v47, v4);
  uint64_t result = std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v69);
  if (v73)
  {
    uint64_t result = v72;
    int v72 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v75)
  {
    uint64_t result = v74;
    uint64_t v74 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988BA804(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (cf) {
    CFRelease(cf);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v69, a2);
  if (a35) {
    CFRelease(a35);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v68);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v72);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v72);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&a68, v72);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&STACK[0x2E0]);
  if (*(unsigned char *)(v70 - 56))
  {
    uint64_t v74 = *(WTF::StringImpl **)(v70 - 64);
    *(void *)(v70 - 64) = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, v73);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v70 - 40))
  {
    char v75 = *(WTF::StringImpl **)(v70 - 48);
    *(void *)(v70 - 48) = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, v73);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::optional<WebKit::RemotePageParameters>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 216) && *(unsigned char *)(a1 + 208))
  {
    if (*(unsigned char *)(a1 + 200)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 80), a2);
    }
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    unint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::optional<WebKit::UserContentControllerParameters>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v4);
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(a1 + 24), v5);
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v6);
  }
  return a1;
}

uint64_t std::optional<WebKit::WebPageGroupData>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    int v3 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::optional<WebKit::WebPreferencesStore>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(WTF **)(a1 + 24);
    if (v2) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v2, (WTF::StringImpl *)*(unsigned int *)(a1 + 32));
    }
    if (*(void *)a1) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)a1, (WTF::StringImpl *)*(unsigned int *)(a1 + 8));
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::FrameTreeCreationParameters>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v37);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v35);
  unint64_t v6 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v7)
  {
    LOBYTE(v32) = 0;
    char v34 = 0;
    goto LABEL_32;
  }
  uint64_t v2 = (WTF::StringImpl *)v6;
  char v44 = 0;
  uint64_t v45 = 0;
  if (v6 < 0x6666)
  {
    if (v6)
    {
      unsigned int v8 = 40 * v6;
      uint64_t v9 = WTF::fastMalloc((WTF *)(40 * v6));
      LODWORD(v45) = v8 / 0x28;
      char v44 = (WTF::StringImpl *)v9;
      int v3 = 40;
      do
      {
        IPC::Decoder::decode<WebKit::FrameTreeCreationParameters>(&v39, a2);
        if (!v43) {
          goto LABEL_31;
        }
        if (HIDWORD(v45) == v45)
        {
          WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeCreationParameters>((unsigned int *)&v44, (unint64_t)&v39);
        }
        else
        {
          uint64_t v11 = (char *)v44 + 40 * HIDWORD(v45);
          *(_OWORD *)uint64_t v11 = v39;
          uint64_t v12 = v40;
          long long v40 = 0;
          *((void *)v11 + 3) = 0;
          *((void *)v11 + 4) = 0;
          *((void *)v11 + 2) = v12;
          uint64_t v13 = v41;
          uint64_t v41 = 0;
          *((void *)v11 + 3) = v13;
          LODWORD(v13) = v42;
          LODWORD(v42) = 0;
          *((_DWORD *)v11 + 8) = v13;
          LODWORD(v13) = HIDWORD(v42);
          HIDWORD(v42) = 0;
          *((_DWORD *)v11 + 9) = v13;
          ++HIDWORD(v45);
        }
        std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v10);
        uint64_t v2 = (WTF::StringImpl *)((char *)v2 - 1);
      }
      while (v2);
      unint64_t v14 = v44;
      LODWORD(v2) = v45;
      int v3 = HIDWORD(v45);
    }
    else
    {
      int v3 = 0;
      unint64_t v14 = 0;
    }
    char v44 = 0;
    long long v32 = v14;
    goto LABEL_14;
  }
  int v3 = 40;
  do
  {
    IPC::Decoder::decode<WebKit::FrameTreeCreationParameters>(&v39, a2);
    if (!v43)
    {
LABEL_31:
      LOBYTE(v32) = 0;
      char v34 = 0;
      std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v10);
      WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v25);
LABEL_32:
      CFTypeRef v16 = *(void **)a2;
      uint64_t v17 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
      if (result) {
        goto LABEL_53;
      }
      goto LABEL_33;
    }
    if (HIDWORD(v45) == v45)
    {
      WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeCreationParameters>((unsigned int *)&v44, (unint64_t)&v39);
    }
    else
    {
      unsigned int v20 = (char *)v44 + 40 * HIDWORD(v45);
      *(_OWORD *)unsigned int v20 = v39;
      uint64_t v21 = v40;
      long long v40 = 0;
      *((void *)v20 + 3) = 0;
      *((void *)v20 + 4) = 0;
      *((void *)v20 + 2) = v21;
      uint64_t v22 = v41;
      uint64_t v41 = 0;
      *((void *)v20 + 3) = v22;
      LODWORD(v22) = v42;
      LODWORD(v42) = 0;
      *((_DWORD *)v20 + 8) = v22;
      LODWORD(v22) = HIDWORD(v42);
      HIDWORD(v42) = 0;
      *((_DWORD *)v20 + 9) = v22;
      ++HIDWORD(v45);
    }
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v39, v10);
    uint64_t v2 = (WTF::StringImpl *)((char *)v2 - 1);
  }
  while (v2);
  uint64_t v2 = v44;
  if (v45 <= HIDWORD(v45)) {
    goto LABEL_60;
  }
  char v23 = v44;
  if (!HIDWORD(v45)) {
    goto LABEL_27;
  }
  unsigned int v31 = HIDWORD(v45);
  if (HIDWORD(v45) >= 0x6666667)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v24 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v45)));
  LODWORD(v45) = 40 * v31 / 0x28;
  char v44 = (WTF::StringImpl *)v24;
  char v23 = v2;
  if ((WTF::StringImpl *)v24 != v2)
  {
    WTF::VectorMover<false,WebKit::FrameTreeCreationParameters>::move(v2, (WTF::StringImpl *)((char *)v2 + 40 * v31), v24);
    char v23 = v44;
  }
LABEL_27:
  if (v2)
  {
    if (v23 == v2)
    {
      char v44 = 0;
      LODWORD(v45) = 0;
    }
    WTF::fastFree(v2, v7);
    uint64_t v2 = v44;
  }
  else
  {
    uint64_t v2 = v23;
  }
LABEL_60:
  char v44 = 0;
  long long v32 = v2;
  LODWORD(v2) = v45;
  int v3 = HIDWORD(v45);
LABEL_14:
  uint64_t v45 = 0;
  unint64_t v33 = __PAIR64__(v3, v2);
  char v34 = 1;
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v7);
  int v18 = 0;
  if (*(void *)a2)
  {
    while (1)
    {
      if (v38)
      {
        long long v39 = v37;
        if (v36)
        {
          uint64_t v26 = v35;
          uint64_t v35 = 0;
          if (!v18) {
            break;
          }
        }
      }
      __break(1u);
LABEL_53:
      if (v17) {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(void *)result + 16))(result, v16);
      }
LABEL_33:
      if (!*(void *)a2)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 40) = 0;
        int v19 = 1;
        goto LABEL_44;
      }
      int v18 = 1;
    }
    long long v27 = v32;
    long long v32 = 0;
    unint64_t v33 = 0;
    *(_OWORD *)a1 = v37;
    long long v40 = 0;
    uint64_t v41 = 0;
    *(void *)(a1 + 16) = v26;
    *(void *)(a1 + 24) = v27;
    uint64_t v42 = 0;
    *(_DWORD *)(a1 + 32) = v2;
    *(_DWORD *)(a1 + 36) = v3;
    *(unsigned char *)(a1 + 40) = 1;
    WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v16);
    long long v28 = v40;
    long long v40 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    int v19 = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
    int v19 = 1;
  }
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v16);
LABEL_44:
  if (!v36 || (result = v35, uint64_t v35 = 0, !result))
  {
LABEL_48:
    if (!v19) {
      return result;
    }
    goto LABEL_55;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_48;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
  if (v19)
  {
LABEL_55:
    uint64_t v29 = *(void **)a2;
    uint64_t v30 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v30) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(void *)result + 16))(result, v29);
      }
    }
  }
  return result;
}

void sub_1988BAEFC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__optional_destruct_base<WebKit::FrameTreeCreationParameters,false>::~__optional_destruct_base[abi:sn180100](v19, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPageNetworkParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (*(void *)a1)
  {
    if (!v7)
    {
      __break(1u);
      return result;
    }
    uint64_t result = v6;
    if (v6) {
      *(_DWORD *)v6 += 2;
    }
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    if (!v7) {
      return result;
    }
    uint64_t result = v6;
  }
  unint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebPopupItem,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 16));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 17));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 40));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 41));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 42));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPopupItem,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  LOWORD(v75) = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v75);
  int v4 = BYTE1(v75);
  if (BYTE1(v75))
  {
    char v5 = (char)v75;
  }
  else
  {
    char v34 = *(WTF::StringImpl **)a1;
    uint64_t v35 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v36 = *((void *)a1 + 3);
    if (v36 && v35) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v36 + 16))(v36, v34);
    }
    char v5 = 0;
  }
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v75);
  unsigned __int16 v6 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)a1);
  unint64_t v7 = *((void *)a1 + 1);
  unsigned int v8 = *(WTF::StringImpl **)a1;
  unint64_t v9 = *((void *)a1 + 2) - *(void *)a1;
  if (v7 <= v9)
  {
    unint64_t v37 = 0;
    char v38 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v39 = *((void *)a1 + 3);
    if (v39)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
        char v38 = *(WTF::StringImpl **)a1;
        unint64_t v37 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v37 = 0;
        char v38 = 0;
      }
    }
    goto LABEL_62;
  }
  uint64_t v10 = (unsigned __int8 *)v8 + v9;
  *((void *)a1 + 2) = v10 + 1;
  if (!v8)
  {
    unint64_t v37 = v7;
    char v38 = 0;
LABEL_62:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40 && v37)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v40 + 16))(v40, v38, v37);
      unsigned int v11 = 0;
      unsigned int v8 = *(WTF::StringImpl **)a1;
      unint64_t v7 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v7 = 0;
      unsigned int v8 = 0;
      unsigned int v11 = 0;
    }
    goto LABEL_64;
  }
  unsigned int v11 = *v10;
  if (v11 < 2)
  {
    int v12 = 0;
    int v13 = 1;
    goto LABEL_7;
  }
LABEL_64:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v41 = *((void *)a1 + 3);
  if (v41 && v7) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v41 + 16))(v41, v8);
  }
  int v13 = 0;
  int v12 = 1;
LABEL_7:
  if (v11) {
    int v14 = v13;
  }
  else {
    int v14 = 0;
  }
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v73);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v71);
  CFTypeRef v16 = (unsigned __int8 *)*((void *)a1 + 1);
  uint64_t v17 = *(WTF::StringImpl **)a1;
  unint64_t v18 = *((void *)a1 + 2) - *(void *)a1;
  if ((unint64_t)v16 <= v18)
  {
    uint64_t v19 = 0;
    uint64_t v42 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v43 = *((void *)a1 + 3);
    if (v43)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
        uint64_t v42 = *(WTF::StringImpl **)a1;
        uint64_t v19 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v42 = 0;
      }
    }
    goto LABEL_67;
  }
  uint64_t v19 = (unsigned __int8 *)v17 + v18;
  unsigned int v20 = v19 + 1;
  *((void *)a1 + 2) = v19 + 1;
  if (!v17)
  {
    uint64_t v19 = v16;
    uint64_t v42 = 0;
LABEL_67:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v44 = *((void *)a1 + 3);
    if (v44)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v44 + 16))(v44, v42, v19);
        LODWORD(v19) = 0;
        uint64_t v17 = *(WTF::StringImpl **)a1;
        CFTypeRef v16 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        CFTypeRef v16 = 0;
        uint64_t v17 = 0;
      }
    }
    else
    {
      CFTypeRef v16 = 0;
      uint64_t v17 = 0;
      LODWORD(v19) = 0;
    }
    goto LABEL_69;
  }
  LODWORD(v19) = *v19;
  if (v19 < 2)
  {
    int v21 = 0;
    int v22 = 1;
    goto LABEL_14;
  }
LABEL_69:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v45 = *((void *)a1 + 3);
  if (!v45 || (int v66 = (int)v19, !v16))
  {
    int v22 = 0;
    uint64_t v24 = 0;
    uint64_t v17 = 0;
    int v21 = 1;
    goto LABEL_71;
  }
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v45 + 16))(v45, v17);
  int v22 = 0;
  uint64_t v17 = *(WTF::StringImpl **)a1;
  CFTypeRef v16 = (unsigned __int8 *)*((void *)a1 + 1);
  int v21 = 1;
  unsigned int v20 = (unsigned __int8 *)*((void *)a1 + 2);
  LODWORD(v19) = v66;
LABEL_14:
  if (!v19) {
    int v22 = 0;
  }
  if ((unint64_t)v16 <= v20 - (unsigned __int8 *)v17)
  {
    int v62 = v22;
    int v69 = v21;
    uint64_t v24 = 0;
    uint64_t v49 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v49 && v16)
    {
      (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
      uint64_t v17 = *(WTF::StringImpl **)a1;
      uint64_t v24 = (unsigned __int8 *)*((void *)a1 + 1);
    }
    else
    {
      uint64_t v17 = 0;
    }
    int v22 = v62;
    int v21 = v69;
    goto LABEL_71;
  }
  char v23 = v20 + 1;
  *((void *)a1 + 2) = v20 + 1;
  if (!v17)
  {
    uint64_t v24 = v16;
LABEL_71:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v46 = *((void *)a1 + 3);
    if (v46)
    {
      int v61 = v22;
      int v68 = v21;
      if (v24)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v46 + 16))(v46, v17, v24);
        LODWORD(v24) = 0;
        uint64_t v17 = *(WTF::StringImpl **)a1;
        CFTypeRef v16 = (unsigned __int8 *)*((void *)a1 + 1);
      }
      else
      {
        CFTypeRef v16 = 0;
        uint64_t v17 = 0;
      }
      int v22 = v61;
      int v21 = v68;
    }
    else
    {
      CFTypeRef v16 = 0;
      uint64_t v17 = 0;
      LODWORD(v24) = 0;
    }
    goto LABEL_73;
  }
  LODWORD(v24) = *v20;
  if (v24 < 2)
  {
    int v25 = 0;
    char v26 = 1;
    goto LABEL_20;
  }
LABEL_73:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (!result)
  {
    char v26 = 0;
    uint64_t v47 = 0;
    uint64_t v17 = 0;
    int v25 = 1;
    goto LABEL_75;
  }
  while (1)
  {
    int v55 = (int)v24;
    int v59 = v22;
    int v65 = v21;
    if (!v16)
    {
      char v26 = 0;
      uint64_t v47 = 0;
      uint64_t v17 = 0;
      int v25 = 1;
      goto LABEL_75;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v17);
    char v26 = 0;
    uint64_t v17 = *(WTF::StringImpl **)a1;
    CFTypeRef v16 = (unsigned __int8 *)*((void *)a1 + 1);
    int v25 = 1;
    char v23 = (unsigned __int8 *)*((void *)a1 + 2);
    int v22 = v59;
    int v21 = v65;
    LODWORD(v24) = v55;
LABEL_20:
    if (!v24) {
      char v26 = 0;
    }
    if ((unint64_t)v16 <= v23 - (unsigned __int8 *)v17) {
      break;
    }
    *((void *)a1 + 2) = v23 + 1;
    if (!v17)
    {
      uint64_t v47 = v16;
      goto LABEL_75;
    }
    unsigned int v27 = *v23;
    if (v27 > 1) {
      goto LABEL_77;
    }
    int v28 = 0;
    LODWORD(v24) = v27 != 0;
    if (!v4) {
      goto LABEL_89;
    }
LABEL_26:
    if (v76 && v6 > 0xFFu && !v12 && v74 && v72 && !v21 && !v25 && !v28)
    {
      uint64_t v29 = v75;
      if (v75) {
        *(_DWORD *)v75 += 2;
      }
      if (v14) {
        __int16 v30 = 256;
      }
      else {
        __int16 v30 = 0;
      }
      unsigned int v31 = v73;
      if (v73) {
        *(_DWORD *)v73 += 2;
      }
      __int16 v32 = v30 | (v6 != 0);
      unint64_t v33 = v71;
      if (v71) {
        *(_DWORD *)v71 += 2;
      }
      *(unsigned char *)a2 = v5;
      *(void *)(a2 + 8) = v29;
      *(_WORD *)(a2 + 16) = v32;
      *(void *)(a2 + 24) = v31;
      *(void *)(a2 + 32) = v33;
      *(unsigned char *)(a2 + 40) = v22;
      *(unsigned char *)(a2 + 41) = v26;
      *(unsigned char *)(a2 + 42) = (_BYTE)v24;
      *(unsigned char *)(a2 + 48) = 1;
      goto LABEL_44;
    }
LABEL_89:
    __break(1u);
  }
  char v53 = v26;
  int v57 = v25;
  int v63 = v22;
  int v70 = v21;
  uint64_t v47 = 0;
  uint64_t v50 = *((void *)a1 + 3);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if (v50 && v16)
  {
    (*(void (**)(uint64_t))(*(void *)v50 + 16))(v50);
    uint64_t v17 = *(WTF::StringImpl **)a1;
    uint64_t v47 = (unsigned __int8 *)*((void *)a1 + 1);
  }
  else
  {
    uint64_t v17 = 0;
  }
  int v22 = v63;
  int v21 = v70;
  char v26 = v53;
  int v25 = v57;
LABEL_75:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v48 = *((void *)a1 + 3);
  if (v48)
  {
    char v52 = v26;
    int v56 = v25;
    int v60 = v22;
    int v67 = v21;
    if (v47)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v48 + 16))(v48, v17, v47);
      uint64_t v17 = *(WTF::StringImpl **)a1;
      CFTypeRef v16 = (unsigned __int8 *)*((void *)a1 + 1);
    }
    else
    {
      CFTypeRef v16 = 0;
      uint64_t v17 = 0;
    }
    int v22 = v60;
    int v21 = v67;
    char v26 = v52;
    int v25 = v56;
  }
  else
  {
    CFTypeRef v16 = 0;
    uint64_t v17 = 0;
  }
LABEL_77:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v16)
    {
      char v51 = v26;
      int v54 = v25;
      int v58 = v22;
      int v64 = v21;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v17);
      int v22 = v58;
      int v21 = v64;
      char v26 = v51;
      int v25 = v54;
      if (*(void *)a1)
      {
        LODWORD(v24) = 0;
        int v28 = 1;
        if (!v4) {
          goto LABEL_89;
        }
        goto LABEL_26;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (!v72) {
    goto LABEL_48;
  }
LABEL_44:
  uint64_t result = v71;
  char v71 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_48:
  if (v74)
  {
    uint64_t result = v73;
    char v73 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v76)
  {
    uint64_t result = v75;
    char v75 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988BB814(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::encode(IPC::Encoder *this, uint64_t a2)
{
  if (*(void *)a2) {
    int v4 = *(_DWORD *)(*(void *)a2 - 12);
  }
  else {
    int v4 = 0;
  }
  char v5 = (_DWORD *)IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    __break(0xC471u);
    goto LABEL_32;
  }
  *char v5 = v4;
  unint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)a2);
  unsigned int v8 = v7;
  uint64_t v10 = v9;
  if (*(void *)a2) {
    uint64_t v11 = *(void *)a2 + 24 * *(unsigned int *)(*(void *)a2 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if ((uint64_t *)v11 != v7)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v8);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)(v8 + 1));
      while (1)
      {
        v8 += 3;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)(*v8 + 1) > 1) {
          goto LABEL_14;
        }
      }
      unsigned int v8 = v10;
LABEL_14:
      ;
    }
    while (v8 != (uint64_t *)v11);
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(unsigned int *)(a2 + 20));
  uint64_t v12 = *(unsigned int *)(a2 + 20);
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = v13 + 32 * v12;
    do
    {
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(unsigned int *)(v13 + 12));
      uint64_t v15 = *(unsigned int *)(v13 + 12);
      if (v15)
      {
        CFTypeRef v16 = *(uint64_t **)v13;
        uint64_t v17 = *(void *)v13 + 16 * v15;
        do
        {
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v16);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v16 + 1);
          v16 += 2;
        }
        while (v16 != (uint64_t *)v17);
      }
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, v13 + 16);
      v13 += 32;
    }
    while (v13 != v14);
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(unsigned int *)(a2 + 36));
  uint64_t v18 = *(unsigned int *)(a2 + 36);
  if (v18)
  {
    uint64_t v19 = *(void *)(a2 + 24);
    uint64_t v20 = 16 * v18;
    do
    {
      IPC::VectorArgumentCoder<false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, v19);
      v19 += 16;
      v20 -= 16;
    }
    while (v20);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(this, *(_WORD *)(a2 + 72));
  char v31 = *(unsigned char *)(a2 + 74);
  IPC::Encoder::operator<<<BOOL>(this, &v31);
  char v21 = *(unsigned char *)(a2 + 80);
  int v22 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1988BBC50);
  }
  *int v22 = v21;
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(this, (void **)(a2 + 88));
  char v32 = *(unsigned char *)(a2 + 96);
  IPC::Encoder::operator<<<BOOL>(this, &v32);
  char v33 = *(unsigned char *)(a2 + 97);
  IPC::Encoder::operator<<<BOOL>(this, &v33);
  char v34 = *(unsigned char *)(a2 + 98);
  IPC::Encoder::operator<<<BOOL>(this, &v34);
  char v35 = *(unsigned char *)(a2 + 99);
  IPC::Encoder::operator<<<BOOL>(this, &v35);
  char v36 = *(unsigned char *)(a2 + 100);
  IPC::Encoder::operator<<<BOOL>(this, &v36);
  char v37 = *(unsigned char *)(a2 + 101);
  IPC::Encoder::operator<<<BOOL>(this, &v37);
  char v24 = *(unsigned char *)(a2 + 102);
  int v25 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1988BBC70);
  }
  *int v25 = v24;
  char v38 = *(unsigned char *)(a2 + 103);
  IPC::Encoder::operator<<<BOOL>(this, &v38);
  char v27 = *(unsigned char *)(a2 + 104);
  int v28 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v29)
  {
    __break(0xC471u);
LABEL_32:
    JUMPOUT(0x1988BBC30);
  }
  *int v28 = v27;
  char v39 = *(unsigned char *)(a2 + 105);
  IPC::Encoder::operator<<<BOOL>(this, &v39);
  char v40 = *(unsigned char *)(a2 + 106);
  IPC::Encoder::operator<<<BOOL>(this, &v40);
  char v41 = *(unsigned char *)(a2 + 107);
  IPC::Encoder::operator<<<BOOL>(this, &v41);
  char v42 = *(unsigned char *)(a2 + 108);
  IPC::Encoder::operator<<<BOOL>(this, &v42);
  IPC::Encoder::operator<<<BOOL>(this, (char *)(a2 + 109));
  IPC::Encoder::operator<<<BOOL>(this, (char *)(a2 + 110));
  IPC::Encoder::operator<<<BOOL>(this, (char *)(a2 + 111));
  char v43 = *(unsigned char *)(a2 + 112);
  return IPC::Encoder::operator<<<BOOL>(this, &v43);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::decode@<X0>(IPC::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)this;
  unint64_t v6 = ((*((void *)this + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)this;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v121 = 0;
    uint64_t v122 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v123 = *((void *)this + 3);
    if (v123)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v123 + 16))(v123, v5, v4);
        uint64_t v122 = *(void *)this;
        unint64_t v121 = *((void *)this + 1);
      }
      else
      {
        unint64_t v121 = 0;
        uint64_t v122 = 0;
      }
    }
    goto LABEL_199;
  }
  unsigned int v8 = (int *)(v5 + v6);
  *((void *)this + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v121 = v4;
    uint64_t v122 = 0;
LABEL_199:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v124 = *((void *)this + 3);
    if (v124 && v121) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v124 + 16))(v124, v122);
    }
LABEL_200:
    IPC::Decoder::markInvalid(this);
    unint64_t v213 = 0;
    int v212 = 1;
    goto LABEL_9;
  }
  unint64_t v213 = 0;
  int v9 = *v8;
  unint64_t v238 = 0;
  if (v9)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::String>(this, (uint64_t)&v232);
      if (!(_BYTE)v233) {
        break;
      }
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, v112, (uint64_t)&v214);
      if (!(_BYTE)v215) {
        break;
      }
      if (!(_BYTE)v233) {
        goto LABEL_177;
      }
      if ((unint64_t)v232 + 1 < 2) {
        goto LABEL_327;
      }
      WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)&v238, &v232, (uint64_t *)&v214, (uint64_t)&v235);
      if (!v237)
      {
        if (!(_BYTE)v215) {
          break;
        }
LABEL_327:
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v214, v113);
        break;
      }
      if ((_BYTE)v215) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v214, v113);
      }
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v232);
      if (!--v9)
      {
        unint64_t v213 = v238;
        goto LABEL_8;
      }
    }
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v232);
    if (v238) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v238, v183);
    }
    goto LABEL_200;
  }
LABEL_8:
  int v212 = 0;
LABEL_9:
  unint64_t v10 = IPC::Decoder::decode<unsigned long long>(this);
  if (!(_BYTE)v11) {
    goto LABEL_178;
  }
  unint64_t v12 = v10;
  unint64_t v232 = 0;
  uint64_t v233 = 0;
  if (v10 >= 0x8000)
  {
    do
    {
      IPC::Decoder::decode<WebCore::CustomHeaderFields>((uint64_t)&v214, this);
      if (!(_BYTE)v217)
      {
LABEL_159:
        LOBYTE(v235) = 0;
        char v237 = 0;
        std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214, v105);
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v232, v109);
        goto LABEL_179;
      }
      if (HIDWORD(v233) == v233)
      {
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomHeaderFields>((uint64_t)&v232, (unint64_t)&v214);
      }
      else
      {
        uint64_t v106 = (char *)v232 + 32 * HIDWORD(v233);
        *(void *)uint64_t v106 = 0;
        *((void *)v106 + 1) = 0;
        uint64_t v107 = v214;
        *(void *)&long long v214 = 0;
        *(void *)uint64_t v106 = v107;
        LODWORD(v107) = DWORD2(v214);
        DWORD2(v214) = 0;
        *((_DWORD *)v106 + 2) = v107;
        LODWORD(v107) = HIDWORD(v214);
        HIDWORD(v214) = 0;
        *((_DWORD *)v106 + 3) = v107;
        *((void *)v106 + 2) = 0;
        *((void *)v106 + 3) = 0;
        unint64_t v108 = v215;
        unint64_t v215 = 0;
        *((void *)v106 + 2) = v108;
        LODWORD(v108) = v216;
        LODWORD(v216) = 0;
        *((_DWORD *)v106 + 6) = v108;
        LODWORD(v108) = HIDWORD(v216);
        HIDWORD(v216) = 0;
        *((_DWORD *)v106 + 7) = v108;
        ++HIDWORD(v233);
      }
      std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214, v105);
      --v12;
    }
    while (v12);
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v232, HIDWORD(v233));
    long long v179 = v232;
    unint64_t v232 = 0;
    unint64_t v235 = v179;
    unsigned int v14 = v233;
    unsigned int v13 = HIDWORD(v233);
  }
  else
  {
    if (v10)
    {
      uint64_t v114 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(32 * v10));
      LODWORD(v233) = v12;
      unint64_t v232 = v114;
      do
      {
        IPC::Decoder::decode<WebCore::CustomHeaderFields>((uint64_t)&v214, this);
        if (!(_BYTE)v217) {
          goto LABEL_159;
        }
        if (HIDWORD(v233) == v233)
        {
          WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomHeaderFields>((uint64_t)&v232, (unint64_t)&v214);
        }
        else
        {
          uint64_t v115 = (char *)v232 + 32 * HIDWORD(v233);
          *(void *)uint64_t v115 = 0;
          *((void *)v115 + 1) = 0;
          uint64_t v116 = v214;
          *(void *)&long long v214 = 0;
          *(void *)uint64_t v115 = v116;
          LODWORD(v116) = DWORD2(v214);
          DWORD2(v214) = 0;
          *((_DWORD *)v115 + 2) = v116;
          LODWORD(v116) = HIDWORD(v214);
          HIDWORD(v214) = 0;
          *((_DWORD *)v115 + 3) = v116;
          *((void *)v115 + 2) = 0;
          *((void *)v115 + 3) = 0;
          unint64_t v117 = v215;
          unint64_t v215 = 0;
          *((void *)v115 + 2) = v117;
          LODWORD(v117) = v216;
          LODWORD(v216) = 0;
          *((_DWORD *)v115 + 6) = v117;
          LODWORD(v117) = HIDWORD(v216);
          HIDWORD(v216) = 0;
          *((_DWORD *)v115 + 7) = v117;
          ++HIDWORD(v233);
        }
        std::__optional_destruct_base<WebCore::CustomHeaderFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v214, v105);
        --v12;
      }
      while (v12);
      uint64_t v15 = v232;
      unsigned int v14 = v233;
      unsigned int v13 = HIDWORD(v233);
    }
    else
    {
      unsigned int v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
    }
    unint64_t v232 = 0;
    unint64_t v235 = v15;
  }
  uint64_t v233 = 0;
  unint64_t v236 = __PAIR64__(v13, v14);
  char v237 = 1;
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v232, v11);
  while (1)
  {
    unint64_t v16 = IPC::Decoder::decode<unsigned long long>(this);
    if (!(_BYTE)v17)
    {
      LOBYTE(v232) = 0;
      char v234 = 0;
      goto LABEL_181;
    }
    unint64_t v18 = v16;
    unint64_t v238 = 0;
    uint64_t v239 = 0;
    if (v16 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)&v214);
        if (!(_BYTE)v215) {
          goto LABEL_167;
        }
        if (HIDWORD(v239) == v239)
        {
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v238, (unint64_t)&v214);
        }
        else
        {
          uint64_t v110 = (char *)v238 + 16 * HIDWORD(v239);
          *(void *)uint64_t v110 = 0;
          *((void *)v110 + 1) = 0;
          uint64_t v111 = v214;
          *(void *)&long long v214 = 0;
          *(void *)uint64_t v110 = v111;
          LODWORD(v111) = DWORD2(v214);
          DWORD2(v214) = 0;
          *((_DWORD *)v110 + 2) = v111;
          LODWORD(v111) = HIDWORD(v214);
          HIDWORD(v214) = 0;
          *((_DWORD *)v110 + 3) = v111;
          ++HIDWORD(v239);
        }
        if ((_BYTE)v215) {
          WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v214, v17);
        }
        if (!--v18)
        {
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v238, (WTF::StringImpl *)HIDWORD(v239));
          unint64_t v232 = v238;
          uint64_t v180 = v239;
          unint64_t v238 = 0;
          uint64_t v239 = 0;
          uint64_t v233 = v180;
          goto LABEL_20;
        }
      }
    }
    if (v16)
    {
      uint64_t v118 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v16));
      LODWORD(v239) = v18;
      unint64_t v238 = v118;
      while (1)
      {
        IPC::Decoder::decode<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)&v214);
        if (!(_BYTE)v215) {
          break;
        }
        if (HIDWORD(v239) == v239)
        {
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v238, (unint64_t)&v214);
        }
        else
        {
          unint64_t v119 = (char *)v238 + 16 * HIDWORD(v239);
          *(void *)unint64_t v119 = 0;
          *((void *)v119 + 1) = 0;
          uint64_t v120 = v214;
          *(void *)&long long v214 = 0;
          *(void *)unint64_t v119 = v120;
          LODWORD(v120) = DWORD2(v214);
          DWORD2(v214) = 0;
          *((_DWORD *)v119 + 2) = v120;
          LODWORD(v120) = HIDWORD(v214);
          HIDWORD(v214) = 0;
          *((_DWORD *)v119 + 3) = v120;
          ++HIDWORD(v239);
        }
        if ((_BYTE)v215) {
          WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v214, v17);
        }
        if (!--v18)
        {
          uint64_t v19 = v238;
          uint64_t v20 = v239;
          goto LABEL_19;
        }
      }
LABEL_167:
      LOBYTE(v232) = 0;
      char v234 = 0;
      WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v238, v17);
LABEL_181:
      IPC::Decoder::markInvalid(this);
      goto LABEL_21;
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0;
LABEL_19:
    unint64_t v238 = 0;
    uint64_t v239 = 0;
    unint64_t v232 = v19;
    uint64_t v233 = v20;
LABEL_20:
    char v234 = 1;
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v238, v17);
LABEL_21:
    IPC::Decoder::decode<WTF::String>(this, (uint64_t)&v238);
    IPC::Decoder::decode<WTF::String>(this, (uint64_t)&v230);
    IPC::Decoder::decode<WTF::String>(this, (uint64_t)&v228);
    IPC::Decoder::decode<WTF::String>(this, (uint64_t)&v226);
    int v209 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(this);
    unint64_t v21 = *((void *)this + 1);
    uint64_t v22 = *(void *)this;
    unint64_t v23 = *((void *)this + 2) - *(void *)this;
    if (v21 <= v23)
    {
      unint64_t v125 = 0;
      uint64_t v126 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v127 = *((void *)this + 3);
      if (v127)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v127 + 16))(v127, v22, v21);
          uint64_t v126 = *(void *)this;
          unint64_t v125 = *((void *)this + 1);
        }
        else
        {
          unint64_t v125 = 0;
          uint64_t v126 = 0;
        }
      }
      goto LABEL_202;
    }
    char v24 = (unsigned __int8 *)(v22 + v23);
    *((void *)this + 2) = v24 + 1;
    if (!v22)
    {
      unint64_t v125 = v21;
      uint64_t v126 = 0;
LABEL_202:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v128 = *((void *)this + 3);
      if (v128 && v125) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v128 + 16))(v128, v126);
      }
      goto LABEL_203;
    }
    unsigned int v204 = *v24;
    if (v204 < 0x10)
    {
      int v206 = 0;
      goto LABEL_25;
    }
LABEL_203:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v204) = 0;
    int v206 = 1;
LABEL_25:
    LOWORD(v214) = 0;
    IPC::Decoder::operator>><BOOL>(this, &v214);
    if (BYTE1(v214))
    {
      char v211 = v214;
      IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(this, &v214);
      if (BYTE8(v214))
      {
        int v207 = 0;
        unint64_t v210 = (WTF::StringImpl **)v214;
        goto LABEL_28;
      }
    }
    else
    {
      IPC::Decoder::markInvalid(this);
    }
    IPC::Decoder::markInvalid(this);
    char v211 = 0;
    int v207 = 1;
LABEL_28:
    unint64_t v25 = *((void *)this + 1);
    uint64_t v26 = *(void *)this;
    unint64_t v27 = *((void *)this + 2) - *(void *)this;
    if (v25 <= v27)
    {
      unint64_t v129 = 0;
      uint64_t v130 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v131 = *((void *)this + 3);
      if (v131)
      {
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v131 + 16))(v131, v26, v25);
          uint64_t v130 = *(void *)this;
          unint64_t v129 = *((void *)this + 1);
        }
        else
        {
          unint64_t v129 = 0;
          uint64_t v130 = 0;
        }
      }
      goto LABEL_207;
    }
    int v28 = (unsigned __int8 *)(v26 + v27);
    *((void *)this + 2) = v28 + 1;
    if (!v26)
    {
      unint64_t v129 = v25;
      uint64_t v130 = 0;
LABEL_207:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v132 = *((void *)this + 3);
      if (v132 && v129) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v132 + 16))(v132, v130);
      }
      goto LABEL_208;
    }
    unsigned int v208 = *v28;
    if (v208 < 4)
    {
      int v202 = 0;
      goto LABEL_32;
    }
LABEL_208:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v208) = 0;
    int v202 = 1;
LABEL_32:
    unint64_t v29 = *((void *)this + 1);
    uint64_t v30 = *(void *)this;
    unint64_t v31 = *((void *)this + 2) - *(void *)this;
    if (v29 <= v31)
    {
      unint64_t v133 = 0;
      uint64_t v134 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v135 = *((void *)this + 3);
      if (v135)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v135 + 16))(v135, v30, v29);
          uint64_t v134 = *(void *)this;
          unint64_t v133 = *((void *)this + 1);
        }
        else
        {
          unint64_t v133 = 0;
          uint64_t v134 = 0;
        }
      }
      goto LABEL_210;
    }
    char v32 = (unsigned __int8 *)(v30 + v31);
    *((void *)this + 2) = v32 + 1;
    if (!v30)
    {
      unint64_t v133 = v29;
      uint64_t v134 = 0;
LABEL_210:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v136 = *((void *)this + 3);
      if (v136 && v133) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v136 + 16))(v136, v134);
      }
      goto LABEL_211;
    }
    unsigned int v205 = *v32;
    if (v205 < 3)
    {
      int v200 = 0;
      goto LABEL_36;
    }
LABEL_211:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v205) = 0;
    int v200 = 1;
LABEL_36:
    unint64_t v33 = *((void *)this + 1);
    uint64_t v34 = *(void *)this;
    unint64_t v35 = *((void *)this + 2) - *(void *)this;
    if (v33 <= v35)
    {
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v139 = *((void *)this + 3);
      if (v139)
      {
        if (v33)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v139 + 16))(v139, v34, v33);
          uint64_t v138 = *(void *)this;
          unint64_t v137 = *((void *)this + 1);
        }
        else
        {
          unint64_t v137 = 0;
          uint64_t v138 = 0;
        }
      }
      goto LABEL_213;
    }
    char v36 = (unsigned __int8 *)(v34 + v35);
    *((void *)this + 2) = v36 + 1;
    if (!v34)
    {
      unint64_t v137 = v33;
      uint64_t v138 = 0;
LABEL_213:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v140 = *((void *)this + 3);
      if (v140 && v137) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v140 + 16))(v140, v138);
      }
      goto LABEL_214;
    }
    unsigned int v203 = *v36;
    if (v203 < 3)
    {
      int v198 = 0;
      goto LABEL_40;
    }
LABEL_214:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v203) = 0;
    int v198 = 1;
LABEL_40:
    unint64_t v37 = *((void *)this + 1);
    uint64_t v38 = *(void *)this;
    unint64_t v39 = *((void *)this + 2) - *(void *)this;
    if (v37 <= v39)
    {
      unint64_t v141 = 0;
      uint64_t v142 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v143 = *((void *)this + 3);
      if (v143)
      {
        if (v37)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v143 + 16))(v143, v38, v37);
          uint64_t v142 = *(void *)this;
          unint64_t v141 = *((void *)this + 1);
        }
        else
        {
          unint64_t v141 = 0;
          uint64_t v142 = 0;
        }
      }
      goto LABEL_216;
    }
    char v40 = (unsigned __int8 *)(v38 + v39);
    *((void *)this + 2) = v40 + 1;
    if (!v38)
    {
      unint64_t v141 = v37;
      uint64_t v142 = 0;
LABEL_216:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v144 = *((void *)this + 3);
      if (v144 && v141) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v144 + 16))(v144, v142);
      }
      goto LABEL_217;
    }
    unsigned int v201 = *v40;
    if (v201 < 3)
    {
      int v196 = 0;
      goto LABEL_44;
    }
LABEL_217:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v201) = 0;
    int v196 = 1;
LABEL_44:
    unint64_t v41 = *((void *)this + 1);
    uint64_t v42 = *(void *)this;
    unint64_t v43 = *((void *)this + 2) - *(void *)this;
    if (v41 <= v43)
    {
      unint64_t v145 = 0;
      uint64_t v146 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v147 = *((void *)this + 3);
      if (v147)
      {
        if (v41)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v147 + 16))(v147, v42, v41);
          uint64_t v146 = *(void *)this;
          unint64_t v145 = *((void *)this + 1);
        }
        else
        {
          unint64_t v145 = 0;
          uint64_t v146 = 0;
        }
      }
      goto LABEL_219;
    }
    uint64_t v44 = (unsigned __int8 *)(v42 + v43);
    *((void *)this + 2) = v44 + 1;
    if (!v42)
    {
      unint64_t v145 = v41;
      uint64_t v146 = 0;
LABEL_219:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v148 = *((void *)this + 3);
      if (v148 && v145) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v148 + 16))(v148, v146);
      }
      goto LABEL_220;
    }
    unsigned int v199 = *v44;
    if (v199 < 3)
    {
      int v195 = 0;
      goto LABEL_48;
    }
LABEL_220:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v199) = 0;
    int v195 = 1;
LABEL_48:
    unint64_t v45 = *((void *)this + 1);
    uint64_t v46 = *(void *)this;
    unint64_t v47 = *((void *)this + 2) - *(void *)this;
    if (v45 <= v47)
    {
      unint64_t v149 = 0;
      uint64_t v150 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v151 = *((void *)this + 3);
      if (v151)
      {
        if (v45)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v151 + 16))(v151, v46, v45);
          uint64_t v150 = *(void *)this;
          unint64_t v149 = *((void *)this + 1);
        }
        else
        {
          unint64_t v149 = 0;
          uint64_t v150 = 0;
        }
      }
      goto LABEL_222;
    }
    uint64_t v48 = (unsigned __int8 *)(v46 + v47);
    *((void *)this + 2) = v48 + 1;
    if (!v46)
    {
      unint64_t v149 = v45;
      uint64_t v150 = 0;
LABEL_222:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v152 = *((void *)this + 3);
      if (v152 && v149) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v152 + 16))(v152, v150);
      }
      goto LABEL_223;
    }
    unsigned int v197 = *v48;
    if (v197 < 3)
    {
      int v194 = 0;
      goto LABEL_52;
    }
LABEL_223:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v197) = 0;
    int v194 = 1;
LABEL_52:
    LOWORD(v214) = 0;
    IPC::Decoder::operator>><BOOL>(this, &v214);
    int v193 = BYTE1(v214);
    if (BYTE1(v214))
    {
      char v191 = v214;
    }
    else
    {
      IPC::Decoder::markInvalid(this);
      char v191 = 0;
    }
    unsigned __int16 v49 = IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(this);
    if (v49 <= 0xFFu) {
      IPC::Decoder::markInvalid(this);
    }
    LOWORD(v214) = 0;
    IPC::Decoder::operator>><BOOL>(this, &v214);
    int v190 = BYTE1(v214);
    if (BYTE1(v214))
    {
      char v189 = v214;
    }
    else
    {
      IPC::Decoder::markInvalid(this);
      char v189 = 0;
    }
    unint64_t v50 = *((void *)this + 1);
    uint64_t v51 = *(void *)this;
    unint64_t v52 = *((void *)this + 2) - *(void *)this;
    if (v50 <= v52)
    {
      unint64_t v153 = 0;
      uint64_t v154 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v155 = *((void *)this + 3);
      if (v155)
      {
        if (v50)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v155 + 16))(v155, v51, v50);
          uint64_t v154 = *(void *)this;
          unint64_t v153 = *((void *)this + 1);
        }
        else
        {
          unint64_t v153 = 0;
          uint64_t v154 = 0;
        }
      }
      goto LABEL_227;
    }
    char v53 = (unsigned __int8 *)(v51 + v52);
    *((void *)this + 2) = v53 + 1;
    if (!v51)
    {
      unint64_t v153 = v50;
      uint64_t v154 = 0;
LABEL_227:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v156 = *((void *)this + 3);
      if (v156 && v153) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v156 + 16))(v156, v154);
      }
      goto LABEL_228;
    }
    unsigned int v192 = *v53;
    if (v192 < 3)
    {
      int v188 = 0;
      goto LABEL_62;
    }
LABEL_228:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v192) = 0;
    int v188 = 1;
LABEL_62:
    unint64_t v54 = *((void *)this + 1);
    uint64_t v55 = *(void *)this;
    unint64_t v56 = *((void *)this + 2) - *(void *)this;
    if (v54 <= v56)
    {
      unint64_t v157 = 0;
      uint64_t v158 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v159 = *((void *)this + 3);
      if (v159)
      {
        if (v54)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v159 + 16))(v159, v55, v54);
          uint64_t v158 = *(void *)this;
          unint64_t v157 = *((void *)this + 1);
        }
        else
        {
          unint64_t v157 = 0;
          uint64_t v158 = 0;
        }
      }
      goto LABEL_230;
    }
    int v57 = (unsigned __int8 *)(v55 + v56);
    *((void *)this + 2) = v57 + 1;
    if (!v55)
    {
      unint64_t v157 = v54;
      uint64_t v158 = 0;
LABEL_230:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v160 = *((void *)this + 3);
      if (v160 && v157) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v160 + 16))(v160, v158);
      }
      goto LABEL_231;
    }
    unsigned int v58 = *v57;
    if (v58 < 3)
    {
      int v187 = 0;
      goto LABEL_66;
    }
LABEL_231:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v58) = 0;
    int v187 = 1;
LABEL_66:
    unsigned __int16 v59 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(this);
    if (v59 <= 0xFFu) {
      IPC::Decoder::markInvalid(this);
    }
    unint64_t v60 = *((void *)this + 1);
    uint64_t v61 = *(void *)this;
    unint64_t v62 = *((void *)this + 2) - *(void *)this;
    if (v60 <= v62)
    {
      unint64_t v161 = 0;
      uint64_t v162 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v163 = *((void *)this + 3);
      if (v163)
      {
        if (v60)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v163 + 16))(v163, v61, v60);
          uint64_t v162 = *(void *)this;
          unint64_t v161 = *((void *)this + 1);
        }
        else
        {
          unint64_t v161 = 0;
          uint64_t v162 = 0;
        }
      }
      goto LABEL_233;
    }
    int v63 = (unsigned __int8 *)(v61 + v62);
    *((void *)this + 2) = v63 + 1;
    if (!v61)
    {
      unint64_t v161 = v60;
      uint64_t v162 = 0;
LABEL_233:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v164 = *((void *)this + 3);
      if (v164 && v161) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v164 + 16))(v164, v162);
      }
      goto LABEL_234;
    }
    unsigned int v64 = *v63;
    if (v64 < 4)
    {
      int v186 = 0;
      goto LABEL_72;
    }
LABEL_234:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v64) = 0;
    int v186 = 1;
LABEL_72:
    unint64_t v65 = *((void *)this + 1);
    int v66 = *(WTF::StringImpl **)this;
    unint64_t v67 = *((void *)this + 2) - *(void *)this;
    if (v65 <= v67)
    {
      unint64_t v165 = 0;
      uint64_t v166 = 0;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v167 = *((void *)this + 3);
      if (v167)
      {
        if (v65)
        {
          (*(void (**)(uint64_t))(*(void *)v167 + 16))(v167);
          uint64_t v166 = *(void *)this;
          unint64_t v165 = *((void *)this + 1);
        }
        else
        {
          unint64_t v165 = 0;
          uint64_t v166 = 0;
        }
      }
      goto LABEL_236;
    }
    int v68 = (unsigned __int8 *)v66 + v67;
    uint64_t v69 = (uint64_t)v66 + v67 + 1;
    *((void *)this + 2) = v69;
    if (!v66)
    {
      unint64_t v165 = v65;
      uint64_t v166 = 0;
LABEL_236:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v168 = *((void *)this + 3);
      if (v168 && v165)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v168 + 16))(v168, v166, v165);
        unsigned int v70 = 0;
        int v66 = *(WTF::StringImpl **)this;
        unint64_t v65 = *((void *)this + 1);
      }
      else
      {
        unint64_t v65 = 0;
        int v66 = 0;
        unsigned int v70 = 0;
      }
      goto LABEL_238;
    }
    unsigned int v70 = *v68;
    if (v70 < 2)
    {
      int v185 = 0;
      char v71 = 1;
      goto LABEL_76;
    }
LABEL_238:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v169 = *((void *)this + 3);
    if (!v169 || !v65)
    {
      unint64_t v170 = 0;
      int v66 = 0;
      char v184 = 0;
      int v185 = 1;
LABEL_240:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v171 = *((void *)this + 3);
      if (v171 && v170)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v171 + 16))(v171, v66, v170);
        unsigned int v75 = 0;
        int v66 = *(WTF::StringImpl **)this;
        unint64_t v65 = *((void *)this + 1);
      }
      else
      {
        unint64_t v65 = 0;
        int v66 = 0;
        unsigned int v75 = 0;
      }
      goto LABEL_242;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v169 + 16))(v169, v66);
    char v71 = 0;
    int v66 = *(WTF::StringImpl **)this;
    unint64_t v65 = *((void *)this + 1);
    int v185 = 1;
    uint64_t v69 = *((void *)this + 2);
LABEL_76:
    if (!v70) {
      char v71 = 0;
    }
    char v184 = v71;
    unint64_t v72 = v69 - (void)v66;
    if (v65 <= v72)
    {
      unint64_t v170 = 0;
      uint64_t v181 = *((void *)this + 3);
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      if (v181 && v65)
      {
        (*(void (**)(uint64_t))(*(void *)v181 + 16))(v181);
        int v66 = *(WTF::StringImpl **)this;
        unint64_t v170 = *((void *)this + 1);
      }
      else
      {
        int v66 = 0;
      }
      goto LABEL_240;
    }
    char v73 = (unsigned __int8 *)v66 + v72;
    uint64_t v74 = (uint64_t)v66 + v72 + 1;
    *((void *)this + 2) = v74;
    if (!v66)
    {
      unint64_t v170 = v65;
      goto LABEL_240;
    }
    unsigned int v75 = *v73;
    if (v75 < 2)
    {
      int v76 = 0;
      char v77 = 1;
      goto LABEL_82;
    }
LABEL_242:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v172 = *((void *)this + 3);
    if (!v172 || !v65)
    {
      char v78 = 0;
      unint64_t v173 = 0;
      int v66 = 0;
      int v76 = 1;
LABEL_244:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v174 = *((void *)this + 3);
      if (v174 && v173)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v174 + 16))(v174, v66, v173);
        unsigned int v81 = 0;
        int v66 = *(WTF::StringImpl **)this;
        unint64_t v65 = *((void *)this + 1);
      }
      else
      {
        unint64_t v65 = 0;
        int v66 = 0;
        unsigned int v81 = 0;
      }
      goto LABEL_246;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v172 + 16))(v172, v66);
    char v77 = 0;
    int v66 = *(WTF::StringImpl **)this;
    unint64_t v65 = *((void *)this + 1);
    int v76 = 1;
    uint64_t v74 = *((void *)this + 2);
LABEL_82:
    if (v75) {
      char v78 = v77;
    }
    else {
      char v78 = 0;
    }
    unint64_t v79 = v74 - (void)v66;
    if (v65 <= v79)
    {
      unint64_t v173 = 0;
      uint64_t v182 = *((void *)this + 3);
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      if (v182 && v65)
      {
        (*(void (**)(uint64_t))(*(void *)v182 + 16))(v182);
        int v66 = *(WTF::StringImpl **)this;
        unint64_t v173 = *((void *)this + 1);
      }
      else
      {
        int v66 = 0;
      }
      goto LABEL_244;
    }
    uint64_t v80 = (unsigned __int8 *)v66 + v79;
    *((void *)this + 2) = v80 + 1;
    if (!v66)
    {
      unint64_t v173 = v65;
      goto LABEL_244;
    }
    unsigned int v81 = *v80;
    if (v81 < 2)
    {
      int v82 = 0;
      char v83 = 1;
      goto LABEL_89;
    }
LABEL_246:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v175 = *((void *)this + 3);
    if (!v175)
    {
      int v66 = 0;
      char v84 = 0;
      unint64_t v65 = 0;
      goto LABEL_248;
    }
    if (!v65)
    {
      int v66 = 0;
      char v84 = 0;
LABEL_248:
      int v82 = 1;
LABEL_249:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v176 = *((void *)this + 3);
      if (v176)
      {
        if (v65)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v176 + 16))(v176, v66);
          uint64_t v177 = *(void *)this;
          unint64_t v65 = *((void *)this + 1);
        }
        else
        {
          uint64_t v177 = 0;
        }
      }
      else
      {
        uint64_t v177 = 0;
        unint64_t v65 = 0;
      }
LABEL_251:
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      uint64_t v178 = *((void *)this + 3);
      if (v178 && v65) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v178 + 16))(v178, v177);
      }
      goto LABEL_252;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v175 + 16))(v175, v66);
    char v83 = 0;
    int v66 = *(WTF::StringImpl **)this;
    unint64_t v65 = *((void *)this + 1);
    int v82 = 1;
LABEL_89:
    if (v81) {
      char v84 = v83;
    }
    else {
      char v84 = 0;
    }
    if (v65 <= *((void *)this + 2) - (void)v66) {
      goto LABEL_249;
    }
    uint64_t v85 = (unsigned __int8 *)*((void *)this + 2);
    *((void *)this + 2) = v85 + 1;
    if (!v66)
    {
      uint64_t v177 = 0;
      goto LABEL_251;
    }
    unsigned int v86 = *v85;
    if (v86 < 3)
    {
      int v87 = 0;
      goto LABEL_96;
    }
LABEL_252:
    IPC::Decoder::markInvalid(this);
    LOBYTE(v86) = 0;
    int v87 = 1;
LABEL_96:
    if (!*(void *)this) {
      break;
    }
    if (!v212)
    {
      *(void *)&long long v214 = v213;
      if (v237)
      {
        unsigned __int16 v88 = v235;
        *((void *)&v214 + 1) = v235;
        unsigned int v89 = v236;
        unsigned int v90 = HIDWORD(v236);
        unint64_t v235 = 0;
        unint64_t v236 = 0;
        unint64_t v215 = __PAIR64__(v90, v89);
        if (v234)
        {
          uint64_t v91 = v232;
          unint64_t v216 = v232;
          unsigned int v92 = v233;
          unsigned int v93 = HIDWORD(v233);
          unint64_t v232 = 0;
          uint64_t v233 = 0;
          unint64_t v217 = __PAIR64__(v93, v92);
          if ((_BYTE)v239)
          {
            uint64_t v94 = v238;
            unint64_t v238 = 0;
            *(void *)&long long v218 = v94;
            if (v231)
            {
              unint64_t v95 = v230;
              unint64_t v230 = 0;
              *((void *)&v218 + 1) = v95;
              if (v229)
              {
                uint64_t v96 = v228;
                uint64_t v228 = 0;
                *(void *)&long long v219 = v96;
                if (v227)
                {
                  uint64_t v97 = v226;
                  unint64_t v226 = 0;
                  *((void *)&v219 + 1) = v97;
                  if ((v209 & 0xFF0000) != 0)
                  {
                    __int16 v220 = v209;
                    if (!v206)
                    {
                      char v221 = v204;
                      if (!v207)
                      {
                        char v222 = v211;
                        unint64_t v223 = v210;
                        if (!v202)
                        {
                          LOBYTE(v224) = v208;
                          if (!v200)
                          {
                            BYTE1(v224) = v205;
                            if (!v198)
                            {
                              BYTE2(v224) = v203;
                              if (!v196)
                              {
                                BYTE3(v224) = v201;
                                if (!v195)
                                {
                                  BYTE4(v224) = v199;
                                  if (!v194)
                                  {
                                    BYTE5(v224) = v197;
                                    if (v193)
                                    {
                                      BYTE6(v224) = v191;
                                      if (v49 > 0xFFu)
                                      {
                                        BYTE7(v224) = v49;
                                        if (v190)
                                        {
                                          BYTE8(v224) = v189;
                                          if (!v188)
                                          {
                                            BYTE9(v224) = v192;
                                            if (!v187)
                                            {
                                              BYTE10(v224) = v58;
                                              if (v59 > 0xFFu)
                                              {
                                                BYTE11(v224) = v59;
                                                if (!v186)
                                                {
                                                  BYTE12(v224) = v64;
                                                  if (!v185)
                                                  {
                                                    BYTE13(v224) = v184;
                                                    if (!v76)
                                                    {
                                                      BYTE14(v224) = v78;
                                                      if (!v82)
                                                      {
                                                        HIBYTE(v224) = v84;
                                                        if (!v87)
                                                        {
                                                          char v225 = v86;
                                                          long long v214 = 0u;
                                                          *(void *)a2 = v213;
                                                          *(void *)(a2 + 8) = v88;
                                                          unint64_t v215 = 0;
                                                          *(_DWORD *)(a2 + 16) = v89;
                                                          *(_DWORD *)(a2 + 20) = v90;
                                                          unint64_t v216 = 0;
                                                          *(void *)(a2 + 24) = v91;
                                                          unint64_t v217 = 0;
                                                          *(_DWORD *)(a2 + 32) = v92;
                                                          *(_DWORD *)(a2 + 36) = v93;
                                                          long long v218 = 0u;
                                                          *(void *)(a2 + 40) = v94;
                                                          *(void *)(a2 + 48) = v95;
                                                          long long v219 = 0u;
                                                          *(void *)(a2 + 56) = v96;
                                                          *(void *)(a2 + 64) = v97;
                                                          __int16 v98 = v220;
                                                          *(unsigned char *)(a2 + 74) = v221;
                                                          *(_WORD *)(a2 + 72) = v98;
                                                          *(unsigned char *)(a2 + 80) = v211;
                                                          unint64_t v223 = 0;
                                                          *(void *)(a2 + 88) = v210;
                                                          *(_OWORD *)(a2 + 96) = v224;
                                                          *(unsigned char *)(a2 + 112) = v225;
                                                          *(unsigned char *)(a2 + 120) = 1;
                                                          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v214, v97);
                                                          unint64_t v213 = 0;
                                                          goto LABEL_125;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_177:
    __break(1u);
LABEL_178:
    LOBYTE(v235) = 0;
    char v237 = 0;
LABEL_179:
    IPC::Decoder::markInvalid(this);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 120) = 0;
  if ((v207 & 1) == 0 && v210) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v210, v66);
  }
LABEL_125:
  if (v227)
  {
    uint64_t v99 = v226;
    unint64_t v226 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2) {
        WTF::StringImpl::destroy(v99, v66);
      }
      else {
        *(_DWORD *)v99 -= 2;
      }
    }
  }
  if (v229)
  {
    uint64_t v100 = v228;
    uint64_t v228 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2) {
        WTF::StringImpl::destroy(v100, v66);
      }
      else {
        *(_DWORD *)v100 -= 2;
      }
    }
  }
  if (v231)
  {
    unint64_t v101 = v230;
    unint64_t v230 = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 == 2) {
        WTF::StringImpl::destroy(v101, v66);
      }
      else {
        *(_DWORD *)v101 -= 2;
      }
    }
  }
  if ((_BYTE)v239)
  {
    uint64_t v102 = v238;
    unint64_t v238 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2) {
        WTF::StringImpl::destroy(v102, v66);
      }
      else {
        *(_DWORD *)v102 -= 2;
      }
    }
  }
  if (v234) {
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v232, v66);
  }
  if (v237) {
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v235, v66);
  }
  uint64_t result = v213;
  char v104 = v212;
  if (!v213) {
    char v104 = 1;
  }
  if ((v104 & 1) == 0) {
    return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v213, v66);
  }
  return result;
}

void sub_1988BD4B4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21,uint64_t a22,WTF::StringImpl **a23,int a24,char a25,uint64_t a26)
{
  if (!a23) {
    a21 = 1;
  }
  if ((a21 & 1) == 0) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a23, a2);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v26 - 200);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v26 - 184);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v26 - 168);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v26 - 104);
  if (*(unsigned char *)(v26 - 136)) {
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26 - 152, v29);
  }
  if (*(unsigned char *)(v26 - 112)) {
    WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26 - 128, v29);
  }
  if (!a26) {
    a25 = 1;
  }
  if ((a25 & 1) == 0) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a26, v29);
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::PaymentSetupFeatures,void>::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v12[2] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unint64_t v4 = (const void *)objc_opt_class();
  v12[0] = v4;
  if (v4) {
    unint64_t v4 = CFRetain(v4);
  }
  uint64_t v5 = (const void *)((uint64_t (*)(const void *))*MEMORY[0x1E4FB6390])(v4);
  v12[1] = v5;
  if (v5) {
    CFRetain(v5);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v9, v12, 2);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v9);
  IPC::decodeRequiringAllowedClasses<NSArray,NSArray*>((uint64_t)&cf, (uint64_t *)a1);
  unint64_t v7 = v9;
  if (v9) {
    goto LABEL_18;
  }
  while (1)
  {
    for (uint64_t i = 1; i != -1; --i)
    {
      unint64_t v7 = v12[i];
      v12[i] = 0;
      if (v7) {
        CFRelease(v7);
      }
    }
    if (!*(void *)a1) {
      break;
    }
    if (v11)
    {
      *(void *)a2 = cf;
      *(unsigned char *)(a2 + 8) = 1;
      return;
    }
    __break(1u);
LABEL_18:
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v7, v6);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v11)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1988BD790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v13 = 8;
  while (1)
  {
    unsigned int v14 = *(const void **)(&a12 + v13);
    *(void *)(&a12 + v13) = 0;
    if (v14) {
      CFRelease(v14);
    }
    v13 -= 8;
    if (v13 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t IPC::ArgumentCoder<WebKit::PaymentSetupConfiguration,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v43);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v41);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v35);
  uint64_t v6 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_54;
  }
  if (!v46) {
    goto LABEL_53;
  }
  unint64_t v7 = v45;
  unint64_t v45 = 0;
  if (!v44) {
    goto LABEL_53;
  }
  unsigned int v8 = v43;
  unint64_t v43 = 0;
  if (!v42) {
    goto LABEL_53;
  }
  int v9 = v41;
  unint64_t v41 = 0;
  if (!BYTE8(v36)) {
    goto LABEL_53;
  }
  unint64_t v10 = v35;
  unint64_t v35 = 0;
  v39[0] = v7;
  v39[1] = v8;
  *(_OWORD *)uint64_t v30 = 0u;
  _OWORD v39[2] = v9;
  v39[3] = v10;
  uint64_t v31 = 0;
  uint64_t v11 = v36;
  *(void *)&long long v36 = 0;
  v39[4] = v11;
  char v40 = 1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30[1], v5);
  v30[0] = 0;
  v29[1] = 0;
  v29[0] = 0;
  while (1)
  {
    if (BYTE8(v36)) {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
    }
    if (v42)
    {
      unint64_t v12 = v41;
      unint64_t v41 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v5);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    if (v44)
    {
      uint64_t v13 = v43;
      unint64_t v43 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v5);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    if (v46)
    {
      unsigned int v14 = v45;
      unint64_t v45 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v5);
          if (v6) {
            goto LABEL_26;
          }
          goto LABEL_55;
        }
        *(_DWORD *)v14 -= 2;
      }
    }
    if (v6) {
      goto LABEL_26;
    }
LABEL_55:
    uint64_t v26 = *(void *)a1;
    uint64_t v27 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v28 = *((void *)a1 + 3);
    if (v28 && v27) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
    }
LABEL_26:
    IPC::Decoder::decode<WTF::URL>(a1, &v35);
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 80) = 0;
      goto LABEL_47;
    }
    if (v40 && v38) {
      break;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    LOBYTE(v39[0]) = 0;
    char v40 = 0;
  }
  WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(v29, (uint64_t)v39);
  uint64_t v15 = v35;
  if (v35) {
    *(_DWORD *)v35 += 2;
  }
  long long v33 = v36;
  long long v34 = v37;
  long long v16 = *(_OWORD *)v29;
  long long v17 = *(_OWORD *)v30;
  *(_OWORD *)unint64_t v29 = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  *(_OWORD *)a2 = v16;
  *(_OWORD *)(a2 + 16) = v17;
  uint64_t v18 = v31;
  uint64_t v31 = 0;
  char v32 = v15;
  *(void *)(a2 + 32) = v18;
  WTF::URL::URL(a2 + 40, (uint64_t *)&v32);
  *(unsigned char *)(a2 + 80) = 1;
  uint64_t v20 = v32;
  char v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30[1], v19);
  unint64_t v21 = v30[0];
  v30[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = v29[1];
  v29[1] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  unint64_t v23 = v29[0];
  v29[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
LABEL_47:
  if (v38)
  {
    char v24 = v35;
    unint64_t v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  return std::__optional_destruct_base<WebCore::ApplePaySetupConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v5);
}

void sub_1988BDB84(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28)
{
}

void IPC::ArgumentCoder<WebKit::WebIDBResult,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::IDBResultData>(a1, (uint64_t)v26);
  IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, v4, (uint64_t)&v23);
  if (*a1)
  {
    if (v27 && v25)
    {
      MEMORY[0x199731420](&v13, v26);
      uint64_t v6 = v23;
      uint64_t v23 = 0;
      *(_OWORD *)a2 = v13;
      *(void *)(a2 + 16) = v14;
      *(_WORD *)(a2 + 24) = v15;
      uint64_t v7 = v16;
      uint64_t v16 = 0;
      *(void *)(a2 + 32) = v7;
      *(_OWORD *)(a2 + 40) = v17;
      long long v8 = v18;
      long long v18 = 0u;
      *(_OWORD *)(a2 + 56) = v8;
      long long v9 = v19;
      long long v19 = 0u;
      *(_OWORD *)(a2 + 72) = v9;
      uint64_t v10 = v21;
      *(void *)(a2 + 88) = v20;
      *(void *)(a2 + 96) = v10;
      uint64_t v20 = 0;
      v22[0] = 0;
      *(void *)(a2 + 104) = v6;
      v22[1] = 0;
      uint64_t v11 = v24;
      uint64_t v24 = 0;
      *(void *)(a2 + 112) = v11;
      *(unsigned char *)(a2 + 120) = 1;
      WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v12);
      WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&v13);
      goto LABEL_5;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 120) = 0;
LABEL_5:
  if (v25) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v5);
  }
  if (v27) {
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v26);
  }
}

void sub_1988BDEB4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a26) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a24, a2);
  }
  if (a43) {
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)&a28);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::IDBResultData>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::IDBResultData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 104))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t std::optional<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80) && *(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v2]((int)&v4, (WTF::MachSendRight *)a1);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

IPC::Encoder *IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::VideoElementData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 8));

  return IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 16));
}

unint64_t IPC::ArgumentCoder<WebKit::LayerProperties::AnimationChanges,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 16));
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 24);

  return IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::encode(a1, a2 + 40);
}

unint64_t IPC::Decoder::decode<WebCore::ScrollableAreaParameters>(uint64_t *a1)
{
  unsigned __int16 v55 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  unsigned __int16 v56 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  unsigned __int16 v54 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  unsigned __int16 v53 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  unsigned __int16 v52 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  unsigned __int16 v51 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4) {
    goto LABEL_32;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  uint64_t v6 = v3 + v4 + 1;
  a1[2] = v6;
  if (!v3)
  {
    unint64_t v33 = v2;
    uint64_t v34 = 0;
    goto LABEL_33;
  }
  unsigned int v7 = *v5;
  if (v7 >= 2) {
    goto LABEL_35;
  }
  int v8 = 0;
  char v9 = 1;
LABEL_5:
  unint64_t v10 = v6 - v3;
  char v49 = v9;
  int v50 = v8;
  if (v2 <= v10)
  {
    unint64_t v38 = 0;
    uint64_t v48 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v2 && v48)
    {
      (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
      uint64_t v3 = *a1;
      unint64_t v38 = a1[1];
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)(v3 + v10);
    a1[2] = (uint64_t)(v11 + 1);
    if (v3)
    {
      unsigned int v12 = *v11;
      if (v12 < 2)
      {
        int v13 = 0;
        char v14 = 1;
        goto LABEL_9;
      }
      goto LABEL_39;
    }
    unint64_t v38 = v2;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v39 = a1[3];
    if (v39 && v38)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v3, v38);
      unsigned int v12 = 0;
      uint64_t v3 = *a1;
      unint64_t v2 = a1[1];
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      unsigned int v12 = 0;
    }
LABEL_39:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v40 = a1[3];
    if (v40 && v2) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v3);
    }
    char v14 = 0;
    int v13 = 1;
LABEL_9:
    unsigned __int16 v15 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    unsigned __int16 v16 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    unint64_t v17 = a1[1];
    uint64_t v18 = *a1;
    unint64_t v19 = a1[2] - *a1;
    if (v17 <= v19)
    {
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v43 = a1[3];
      if (v43)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
          uint64_t v42 = *a1;
          unint64_t v41 = a1[1];
        }
        else
        {
          unint64_t v41 = 0;
          uint64_t v42 = 0;
        }
      }
      goto LABEL_42;
    }
    uint64_t v20 = (unsigned __int8 *)(v18 + v19);
    a1[2] = (uint64_t)(v20 + 1);
    if (!v18)
    {
      unint64_t v41 = v17;
      uint64_t v42 = 0;
LABEL_42:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v44 = a1[3];
      if (v44 && v41)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v42, v41);
        uint64_t v18 = *a1;
        unint64_t v17 = a1[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
      goto LABEL_44;
    }
    if (*v20 < 2u)
    {
      int v21 = 0;
      goto LABEL_13;
    }
LABEL_44:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v45 = a1[3];
    if (v45 && v17) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v18);
    }
    int v21 = 1;
LABEL_13:
    unsigned __int16 v22 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    if (!*a1) {
      break;
    }
    unsigned __int8 v23 = v55;
    if (v55 > 0xFFu)
    {
      unsigned __int8 v24 = v56;
      if (v56 > 0xFFu)
      {
        unsigned __int8 v25 = v54;
        if (v54 > 0xFFu)
        {
          unsigned __int8 v26 = v53;
          if (v53 > 0xFFu)
          {
            unsigned __int8 v27 = v52;
            if (v52 > 0xFFu)
            {
              unsigned __int8 v28 = v51;
              if (v51 > 0xFFu && !v50 && !v13 && v15 > 0xFFu && v16 > 0xFFu && !v21 && v22 > 0xFFu) {
                goto LABEL_26;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_32:
    unint64_t v33 = 0;
    uint64_t v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v35 = a1[3];
    if (v35)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
        uint64_t v34 = *a1;
        unint64_t v33 = a1[1];
      }
      else
      {
        unint64_t v33 = 0;
        uint64_t v34 = 0;
      }
    }
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v36 = a1[3];
    if (v36 && v33)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v34, v33);
      unsigned int v7 = 0;
      uint64_t v3 = *a1;
      unint64_t v2 = a1[1];
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      unsigned int v7 = 0;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v37 = a1[3];
    if (v37 && v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v3);
      char v9 = 0;
      uint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      int v8 = 1;
      uint64_t v6 = a1[2];
      goto LABEL_5;
    }
    unint64_t v38 = 0;
    uint64_t v3 = 0;
    char v49 = 0;
    int v50 = 1;
  }
  unsigned __int8 v23 = 0;
  uint64_t v46 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v47 = a1[3];
  unsigned __int8 v24 = v56;
  unsigned __int8 v26 = v53;
  unsigned __int8 v25 = v54;
  unsigned __int8 v28 = v51;
  unsigned __int8 v27 = v52;
  if (v47)
  {
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v47 + 16))(a1[3]);
    }
    unsigned __int8 v23 = 0;
    unsigned __int8 v24 = v56;
    unsigned __int8 v26 = v53;
    unsigned __int8 v25 = v54;
    unsigned __int8 v28 = v51;
    unsigned __int8 v27 = v52;
  }
LABEL_26:
  uint64_t v29 = v23;
  uint64_t v30 = 0x1000000000000;
  if ((v49 & (v7 != 0)) == 0) {
    uint64_t v30 = 0;
  }
  uint64_t v31 = 0x100000000000000;
  if ((v14 & (v12 != 0)) == 0) {
    uint64_t v31 = 0;
  }
  return v29 | (v30 | v31) & 0xFFFFFFFF000000FFLL | ((unint64_t)v28 << 40) | ((unint64_t)v27 << 32) | ((unint64_t)v26 << 24) | ((unint64_t)v25 << 16) | ((unint64_t)v24 << 8);
}

uint64_t IPC::Decoder::decode<WebCore::RequestedScrollData>(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v38 = IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
  unint64_t v36 = IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>((unint64_t *)a2);
  uint64_t v37 = v7;
  unsigned __int16 v8 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a2);
  unsigned __int16 v9 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a2);
  __int16 v39 = 0;
  uint64_t result = (uint64_t)IPC::Decoder::operator>><BOOL>(a2, &v39);
  int v11 = HIBYTE(v39);
  if (HIBYTE(v39))
  {
    unint64_t v12 = v39;
  }
  else
  {
    uint64_t v28 = *a2;
    uint64_t v29 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v29) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28);
    }
    unint64_t v12 = 0;
  }
  int v13 = (unsigned __int8 *)a2[1];
  uint64_t v14 = *a2;
  unint64_t v15 = a2[2] - *a2;
  if ((unint64_t)v13 <= v15)
  {
    unsigned __int16 v16 = 0;
    uint64_t v30 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v31 = a2[3];
    if (v31)
    {
      unint64_t v2 = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
        uint64_t v30 = *a2;
        unsigned __int16 v16 = (unsigned __int8 *)a2[1];
      }
      else
      {
        unsigned __int16 v16 = 0;
        uint64_t v30 = 0;
      }
      unint64_t v12 = v2;
    }
    goto LABEL_35;
  }
  unsigned __int16 v16 = (unsigned __int8 *)(v14 + v15);
  a2[2] = (uint64_t)(v16 + 1);
  if (!v14)
  {
    unsigned __int16 v16 = v13;
    uint64_t v30 = 0;
LABEL_35:
    int v13 = 0;
    uint64_t v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v32 = a2[3];
    if (v32)
    {
      unint64_t v2 = v12;
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v32 + 16))(v32, v30, v16);
        uint64_t v14 = *a2;
        int v13 = (unsigned __int8 *)a2[1];
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = 0;
      }
      unint64_t v12 = v2;
    }
    goto LABEL_36;
  }
  LODWORD(v16) = *v16;
  if (v16 < 2)
  {
    if (!v16)
    {
      int v27 = 0;
      char v19 = 0;
      goto LABEL_15;
    }
    unint64_t v17 = v12;
    unsigned __int16 v18 = IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
    LOBYTE(v16) = v18;
    if (v18 >= 0x100u)
    {
      char v19 = v18;
      unint64_t v20 = IPC::Decoder::decode<std::variant<WebCore::FloatPoint,WebCore::FloatSize>>((unint64_t *)a2);
      if ((v21 & 0xFF00000000) != 0)
      {
        unint64_t v2 = v20;
        int v3 = v21;
        unsigned __int16 v22 = IPC::Decoder::decode<WebCore::UserStyleLevel>(a2);
        LOBYTE(v16) = v22;
        if (v22 >= 0x100u)
        {
          char v4 = v22;
          uint64_t result = IPC::Decoder::decode<WebCore::UserStyleLevel>(a2);
          LOBYTE(v16) = result;
          if ((unsigned __int16)result > 0xFFu)
          {
            int v27 = 0;
            LOBYTE(v16) = 1;
            goto LABEL_25;
          }
        }
      }
    }
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    unint64_t v12 = v17;
    if (v25 && v24)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
      unint64_t v12 = v17;
    }
    goto LABEL_12;
  }
LABEL_36:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v33 = a2[3];
  if (v33 && v13)
  {
    unint64_t v2 = v12;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v14);
    unint64_t v12 = v2;
  }
LABEL_12:
  uint64_t v26 = *a2;
  int v13 = (unsigned __int8 *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    goto LABEL_27;
  }
  char v19 = 0;
  int v27 = 1;
LABEL_15:
  while (1)
  {
    uint64_t v26 = *a2;
    if (!*a2) {
      break;
    }
    if (v38 > 0xFFu && (v37 & 0xFF00000000) != 0 && v8 > 0xFFu && v9 > 0xFFu && v11 && !v27)
    {
      *(unsigned char *)a1 = v38;
      *(void *)(a1 + 4) = v36;
      *(_DWORD *)(a1 + 12) = v37;
      *(unsigned char *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 17) = v9;
      *(unsigned char *)(a1 + 18) = v12;
      *(unsigned char *)(a1 + 20) = v19;
      *(void *)(a1 + 24) = v2;
      *(_DWORD *)(a1 + 32) = v3;
      *(unsigned char *)(a1 + 36) = v4;
      *(unsigned char *)(a1 + 37) = result;
      *(unsigned char *)(a1 + 40) = (_BYTE)v16;
      *(unsigned char *)(a1 + 44) = 1;
      return result;
    }
    __break(1u);
LABEL_27:
    unint64_t v17 = v12;
    if (v13) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v26);
    }
    char v19 = 0;
    int v27 = 1;
LABEL_25:
    unint64_t v12 = v17;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 44) = 0;
  uint64_t v34 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v34)
  {
    uint64_t v35 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v35();
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>(uint64_t a1, uint64_t *a2)
{
  LOWORD(v32) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v32);
  char v5 = (char)v32;
  if (BYTE1(v32)) {
    BOOL v6 = v32 > 2u;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = v6;
  if (v7 == 1)
  {
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25 && v24) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
    }
    char v5 = 0;
  }
  IPC::Decoder::decode<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v41, a2);
  IPC::Decoder::decode<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v38, a2);
  IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, v8, (uint64_t)&v35);
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v10) {
    goto LABEL_47;
  }
  unint64_t v11 = result;
  uint64_t v32 = 0;
  v33[0] = 0;
  if (result >= 0x20000)
  {
    uint64_t v26 = 0;
    LODWORD(v2) = 0;
    do
    {
      unint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
      unint64_t v44 = result;
      uint64_t v45 = v10;
      if (!(_BYTE)v10)
      {
        unint64_t v12 = v32;
        if (!v32) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
      if (v2 == LODWORD(v33[0]))
      {
        unint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, v2 + 1, (unint64_t)&v44);
        int v27 = HIDWORD(v33[0]);
        uint64_t v26 = v32;
        *((void *)v32 + HIDWORD(v33[0])) = *(void *)result;
      }
      else
      {
        *((void *)v26 + v2) = result;
        int v27 = HIDWORD(v33[0]);
      }
      uint64_t v2 = (v27 + 1);
      HIDWORD(v33[0]) = v27 + 1;
      --v11;
    }
    while (v11);
    LODWORD(v14) = v33[0];
    if (LODWORD(v33[0]) <= v2) {
      goto LABEL_67;
    }
    if (!v2) {
      goto LABEL_65;
    }
    if (v2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    unint64_t result = WTF::fastMalloc((WTF *)(8 * v2));
    LODWORD(v33[0]) = v2;
    uint64_t v32 = (WTF *)result;
    if ((WTF *)result == v26)
    {
LABEL_65:
      uint64_t v32 = 0;
      LODWORD(v33[0]) = 0;
    }
    else
    {
      uint64_t v28 = 0;
      do
      {
        *(void *)(result + v28) = *(void *)((char *)v26 + v28);
        v28 += 8;
      }
      while (8 * v2 != v28);
      LODWORD(v14) = v2;
      if (!v26) {
        goto LABEL_67;
      }
    }
    unint64_t result = WTF::fastFree(v26, v10);
    LODWORD(v14) = v33[0];
    LODWORD(v2) = HIDWORD(v33[0]);
LABEL_67:
    unint64_t v12 = v32;
LABEL_18:
    if (!*a2)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 72) = 0;
      if (v12) {
        unint64_t result = WTF::fastFree(v12, v10);
      }
      goto LABEL_49;
    }
    goto LABEL_23;
  }
  if (!result)
  {
    if (!*a2)
    {
LABEL_48:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 72) = 0;
      goto LABEL_49;
    }
    unint64_t v12 = 0;
    LODWORD(v14) = 0;
    LODWORD(v2) = 0;
LABEL_23:
    int v15 = 0;
    if (v7)
    {
LABEL_61:
      __break(1u);
LABEL_62:
      uint64_t v30 = *a2;
      uint64_t v31 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t result = a2[3];
      if (result)
      {
        if (v31) {
          return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v30);
        }
      }
      return result;
    }
    goto LABEL_24;
  }
  unint64_t v12 = (WTF *)WTF::fastMalloc((WTF *)(8 * result));
  LODWORD(v2) = 0;
  LODWORD(v33[0]) = v11;
  uint64_t v32 = v12;
  while (1)
  {
    unint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
    unint64_t v44 = result;
    uint64_t v45 = v10;
    if (!(_BYTE)v10) {
      break;
    }
    if (v2 == LODWORD(v33[0]))
    {
      unint64_t result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, v2 + 1, (unint64_t)&v44);
      int v13 = HIDWORD(v33[0]);
      unint64_t v12 = v32;
      *((void *)v32 + HIDWORD(v33[0])) = *(void *)result;
    }
    else
    {
      *((void *)v12 + v2) = result;
      int v13 = HIDWORD(v33[0]);
    }
    LODWORD(v2) = v13 + 1;
    HIDWORD(v33[0]) = v13 + 1;
    if (!--v11)
    {
      LODWORD(v14) = v33[0];
      goto LABEL_18;
    }
  }
LABEL_46:
  uint64_t v32 = 0;
  LODWORD(v33[0]) = 0;
  WTF::fastFree(v12, v10);
LABEL_47:
  unint64_t v10 = (void *)*a2;
  uint64_t v29 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (!result) {
    goto LABEL_48;
  }
  if (!v29) {
    goto LABEL_48;
  }
  unint64_t result = (*(uint64_t (**)(unint64_t, void *))(*(void *)result + 16))(result, v10);
  uint64_t v14 = *a2;
  if (!*a2) {
    goto LABEL_48;
  }
  unint64_t v12 = 0;
  int v15 = 1;
  if (v7) {
    goto LABEL_61;
  }
LABEL_24:
  LOBYTE(v32) = v5;
  if (!v43) {
    goto LABEL_61;
  }
  v33[1] = 0;
  uint64_t v16 = v41;
  uint64_t v17 = v42;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  if (!v40) {
    goto LABEL_61;
  }
  uint64_t v18 = v38;
  uint64_t v19 = v39;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (!v37) {
    goto LABEL_61;
  }
  unint64_t v20 = v35;
  uint64_t v21 = v36;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (v15) {
    goto LABEL_61;
  }
  *(unsigned char *)a1 = v5;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v17;
  v33[0] = 0;
  v34[0] = 0;
  *(void *)(a1 + 24) = v18;
  v34[1] = 0;
  *(void *)(a1 + 32) = v19;
  v34[2] = 0;
  *(void *)(a1 + 40) = v20;
  v34[3] = 0;
  *(void *)(a1 + 48) = v21;
  v34[4] = 0;
  *(void *)(a1 + 56) = v12;
  v34[5] = 0;
  *(_DWORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 68) = v2;
  *(unsigned char *)(a1 + 72) = 1;
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v10);
  unint64_t result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v22);
LABEL_49:
  if (v37)
  {
    unint64_t result = (unint64_t)v35;
    if (v35)
    {
      uint64_t v35 = 0;
      LODWORD(v36) = 0;
      unint64_t result = WTF::fastFree((WTF *)result, v10);
    }
  }
  if (v40) {
    unint64_t result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v10);
  }
  if (v43) {
    unint64_t result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v10);
  }
  if (!*(unsigned char *)(a1 + 72)) {
    goto LABEL_62;
  }
  return result;
}

void sub_1988BEE84(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100](v27, a2);
  _Unwind_Resume(a1);
}

unint64_t *IPC::Decoder::decode<WebCore::MouseLocationState>(uint64_t a1, unint64_t *a2)
{
  char v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_9;
  }
  while (1)
  {
    unint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
    uint64_t v9 = v8;
    if (!v8)
    {
      unint64_t v14 = *a2;
      unint64_t v15 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v16 = a2[3];
      if (v16)
      {
        if (v15)
        {
          uint64_t v19 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14);
          uint64_t v9 = 0;
          unint64_t result = v19;
        }
      }
    }
    if (!*a2) {
      break;
    }
    if (v6 && v9)
    {
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = result;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
LABEL_9:
    unint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v12 = a2[3];
    if (v12) {
      BOOL v13 = v11 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  unint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (unint64_t *)a2[3];
  if (result && v17)
  {
    uint64_t v18 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v18();
  }
  return result;
}

void *IPC::Decoder::decode<WebCore::ScrollbarHoverState>(void *result)
{
  unint64_t v1 = result[1];
  uint64_t v2 = *result;
  unint64_t v3 = result[2] - *result;
  if (v1 <= v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v19 = result[3];
    if (v19)
    {
      uint64_t v35 = result;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        unint64_t result = v35;
        uint64_t v18 = *v35;
        unint64_t v17 = v35[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_16;
  }
  char v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    unint64_t v17 = v1;
    uint64_t v18 = 0;
LABEL_16:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v20 = result[3];
    if (v20)
    {
      uint64_t v34 = result;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        unsigned int v6 = 0;
        unint64_t result = v34;
        uint64_t v2 = *v34;
        unint64_t v1 = v34[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_18;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    __int16 v7 = 0;
    __int16 v8 = 1;
    goto LABEL_5;
  }
LABEL_18:
  *unint64_t result = 0;
  result[1] = 0;
  unint64_t v21 = result[3];
  if (!v21)
  {
    uint64_t v2 = 0;
    __int16 v7 = 1;
    goto LABEL_20;
  }
  unsigned int v28 = v6;
  uint64_t v33 = result;
  if (!v1)
  {
    unint64_t v21 = 0;
    uint64_t v2 = 0;
    __int16 v7 = 1;
LABEL_20:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v22 = result[3];
    if (v22)
    {
      __int16 v27 = v7;
      uint64_t v32 = result;
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v2, v21);
        unint64_t result = v32;
        uint64_t v2 = *v32;
        unint64_t v1 = v32[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
      __int16 v7 = v27;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
    goto LABEL_22;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v21 + 16))(v21, v2);
  __int16 v8 = 0;
  unint64_t result = v33;
  uint64_t v2 = *v33;
  unint64_t v1 = v33[1];
  __int16 v7 = 1;
  uint64_t v5 = v33[2];
  unsigned int v6 = v28;
LABEL_5:
  if (v6) {
    __int16 v9 = v8;
  }
  else {
    __int16 v9 = 0;
  }
  unint64_t v10 = v5 - v2;
  if (v1 <= v10)
  {
    __int16 v26 = v7;
    unint64_t v21 = 0;
    uint64_t v25 = result[3];
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v30 = result;
    if (v1 && v25)
    {
      (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
      unint64_t result = v30;
      uint64_t v2 = *v30;
      unint64_t v21 = v30[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    __int16 v7 = v26;
    goto LABEL_20;
  }
  unint64_t v11 = (unsigned __int8 *)(v2 + v10);
  result[2] = v11 + 1;
  if (!v2)
  {
    unint64_t v21 = v1;
    goto LABEL_20;
  }
  unsigned int v12 = *v11;
  if (v12 <= 1)
  {
    if ((v7 & 1) == 0)
    {
      __int16 v7 = v12 != 0;
      LODWORD(v13) = 1;
      goto LABEL_13;
    }
LABEL_51:
    __break(1u);
    return result;
  }
LABEL_22:
  *unint64_t result = 0;
  result[1] = 0;
  uint64_t v13 = result[3];
  if (v13)
  {
    uint64_t v31 = result;
    if (v1)
    {
      unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v2);
      uint64_t v2 = *v31;
      if (*v31) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v2 = 0;
    }
    LODWORD(v13) = 0;
    __int16 v9 = 0;
    unint64_t result = v31;
  }
  else
  {
    uint64_t v2 = 0;
    __int16 v9 = 0;
  }
LABEL_13:
  unsigned __int16 v14 = v9 | (v7 << 8);
  int v15 = v13 << 16;
  uint64_t v16 = v14 | (v13 << 16);
  if (!v15)
  {
    uint64_t v23 = result[1];
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v24 = result[3];
    if (v24)
    {
      if (v23)
      {
        unsigned int v29 = v16;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v2);
        return (void *)v29;
      }
    }
  }
  return (void *)v16;
}

uint64_t IPC::Decoder::decode<WebCore::RequestedKeyboardScrollData>(uint64_t result, unint64_t *a2)
{
  uint64_t v6 = result;
  unint64_t v7 = a2[2];
  unint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  unint64_t v10 = v7 - v8;
  if (v9 <= v10)
  {
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v29 = a2[3];
    if (v29)
    {
      if (v9)
      {
        (*(void (**)(unint64_t))(*(void *)v29 + 16))(v29);
        unint64_t v28 = *a2;
        unint64_t v27 = a2[1];
      }
      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = 0;
      }
    }
    goto LABEL_21;
  }
  unint64_t v11 = (unsigned __int8 *)(v8 + v10);
  uint64_t v12 = v8 + v10 + 1;
  a2[2] = v12;
  if (!v8)
  {
    unint64_t v27 = v9;
    unint64_t v28 = 0;
LABEL_21:
    unint64_t v9 = 0;
    unint64_t v8 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v30 = a2[3];
    if (v30)
    {
      if (v27)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
        unint64_t v8 = *a2;
        unint64_t v9 = a2[1];
      }
      else
      {
        unint64_t v9 = 0;
        unint64_t v8 = 0;
      }
    }
    goto LABEL_22;
  }
  unsigned int v13 = *v11;
  if (v13 < 3)
  {
    unsigned int v14 = v13 | 0x100;
    goto LABEL_5;
  }
LABEL_22:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v31 = a2[3];
  if (!v31 || !v9)
  {
    unint64_t v32 = 0;
    unint64_t v8 = 0;
    goto LABEL_24;
  }
  unint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v31 + 16))(v31, v8);
  unsigned int v14 = 0;
  unint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  uint64_t v12 = a2[2];
LABEL_5:
  unint64_t v15 = v12 - v8;
  if (v9 <= v15) {
    goto LABEL_39;
  }
  uint64_t v16 = (unsigned __int8 *)(v8 + v15);
  a2[2] = (unint64_t)(v16 + 1);
  if (!v8)
  {
    unint64_t v32 = v9;
    goto LABEL_24;
  }
  unsigned int v17 = *v16;
  if (v17 >= 2) {
    goto LABEL_26;
  }
  if (v17)
  {
    uint64_t v18 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
    char v20 = v19;
    uint64_t v2 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
    char v22 = v21;
    unint64_t v3 = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
    char v24 = v23;
    unsigned __int16 v4 = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a2);
    unint64_t result = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>((uint64_t *)a2);
    if (!*a2)
    {
      unint64_t v36 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v37 = a2[3];
      if (!v37 || !v36) {
        goto LABEL_30;
      }
      uint64_t v35 = *(void (**)(void))(*(void *)v37 + 16);
      goto LABEL_52;
    }
    if (!v20 || !v22 || !v24 || v4 <= 0xFFu || (unsigned __int16)result <= 0xFFu) {
      goto LABEL_38;
    }
    unint64_t v25 = (unint64_t)v18 & 0xFFFFFFFFFFFFFF00;
    uint64_t v26 = v18;
    LOBYTE(v17) = 1;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v25 = 0;
  }
  if (v14 > 0xFF)
  {
    *(unsigned char *)uint64_t v6 = v14;
    *(void *)(v6 + 4) = v25 | v26;
    *(void *)(v6 + 12) = v2;
    *(void *)(v6 + 20) = v3;
    *(unsigned char *)(v6 + 28) = v4;
    *(unsigned char *)(v6 + 29) = result;
    *(unsigned char *)(v6 + 32) = v17;
    *(unsigned char *)(v6 + 36) = 1;
    return result;
  }
  do
  {
LABEL_38:
    __break(1u);
LABEL_39:
    unint64_t v32 = 0;
    unint64_t v43 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (v43 && v9)
    {
      (*(void (**)(unint64_t))(*(void *)v43 + 16))(v43);
      unint64_t v8 = *a2;
      unint64_t v32 = a2[1];
    }
    else
    {
      unint64_t v8 = 0;
    }
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v33 = a2[3];
    if (v33 && v32)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v8, v32);
      unint64_t v9 = a2[1];
    }
    else
    {
      unint64_t v9 = 0;
    }
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v34 = a2[3];
    if (v34 && v9)
    {
      uint64_t v35 = *(void (**)(void))(*(void *)v34 + 16);
LABEL_52:
      v35();
    }
LABEL_30:
    unint64_t v39 = *a2;
    unint64_t v38 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v40 = a2[3];
    if (!v40) {
      break;
    }
    if (!v38) {
      break;
    }
    (*(void (**)(unint64_t, unint64_t))(*(void *)v40 + 16))(v40, v39);
  }
  while (*a2);
  *(unsigned char *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 36) = 0;
  unint64_t v41 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v41)
  {
    uint64_t v42 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v42();
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::ScrollingStatePluginHostingNode,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v8 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v8);
  uint64_t v10 = *((void *)&v8 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v10);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 40));
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 104);
    uint64_t v6 = (long long *)(a2 + 104);
    char v5 = v7;
    if (v7)
    {
      long long v8 = *v6;
      char v5 = 1;
    }
    else
    {
      LOBYTE(v8) = 0;
    }
    char v9 = v5;
    return IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v8);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebCore::ScrollingStatePluginScrollingNode,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v15 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v15);
  uint64_t v17 = *((void *)&v15 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v17);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 40));
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    if (*(void *)(a2 + 104))
    {
      long long v15 = *(_OWORD *)(a2 + 104);
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      LOBYTE(v15) = 0;
    }
    char v16 = v6;
    unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v15);
    uint64_t v5 = *(void *)(a2 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 128));
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  unint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 136));
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  unint64_t result = IPC::Encoder::operator<<<WebCore::FloatPoint const&>(a1, (float *)(a2 + 144));
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 152));
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 156));
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v15) = *(_DWORD *)(a2 + 160);
  IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  LODWORD(v15) = *(_DWORD *)(a2 + 164);
  unint64_t result = (unsigned char *)IPC::Encoder::operator<<<int>(a1, (int *)&v15);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollableAreaParameters,void>::encode(a1, (char *)(a2 + 438));
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  unint64_t result = IPC::ArgumentCoder<WebCore::RequestedScrollData,void>::encode(a1, a2 + 452);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,void>::encode(a1, a2 + 168);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  *(void *)&long long v15 = *(void *)(a2 + 240);
  unint64_t result = IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v15);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  *(void *)&long long v15 = *(void *)(a2 + 248);
  unint64_t result = IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, (uint64_t)&v15);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_40:
  char v7 = *(unsigned char *)(a2 + 534);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v8)
  {
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x1988BFCDCLL);
  }
  *unint64_t result = v7;
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_42:
  uint64_t v9 = *(void *)(a2 + 272);
  if (v9)
  {
    long long v15 = *(_OWORD *)(a2 + 272);
    LOBYTE(v9) = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  char v16 = v9;
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v15);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_46:
  uint64_t v10 = *(void *)(a2 + 312);
  if (v10)
  {
    long long v15 = *(_OWORD *)(a2 + 312);
    LOBYTE(v10) = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  char v16 = v10;
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v15);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_50:
  uint64_t v11 = *(void *)(a2 + 352);
  if (v11)
  {
    long long v15 = *(_OWORD *)(a2 + 352);
    LOBYTE(v11) = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  char v16 = v11;
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v15);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_54:
  uint64_t v12 = *(void *)(a2 + 392);
  if (v12)
  {
    long long v15 = *(_OWORD *)(a2 + 392);
    LOBYTE(v12) = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  char v16 = v12;
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v15);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }
LABEL_58:
  char v13 = *(unsigned char *)(a2 + 535);
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v14) {
    goto LABEL_66;
  }
  *unint64_t result = v13;
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_60:
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<WebCore::MouseLocationState,void>::encode(a1, (int *)(a2 + 420));
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
LABEL_61:
  LOWORD(v15) = *(_WORD *)(a2 + 416);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15);
  unint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15 + 1);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }
LABEL_62:
  LOWORD(v15) = *(_WORD *)(a2 + 436);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15);
  unint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15 + 1);
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_64;
  }
LABEL_63:
  unint64_t result = (unsigned char *)IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 532));
  uint64_t v5 = *(void *)(a2 + 40);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      return result;
    }
    goto LABEL_24;
  }
LABEL_64:
  LOBYTE(v15) = *(unsigned char *)(a2 + 533);
  unint64_t result = (unsigned char *)IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15);
  if ((*(void *)(a2 + 40) & 0x400000) != 0)
  {
LABEL_24:
    LOBYTE(v15) = *(unsigned char *)(a2 + 496);
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v15);
    return IPC::ArgumentCoder<std::optional<WebCore::KeyboardScroll>,void>::encode<IPC::Encoder,std::optional<WebCore::KeyboardScroll> const&>(a1, a2 + 500);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::MouseLocationState,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v5 = *a2;
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = a2[1];
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = a2[2];
  IPC::Encoder::operator<<<int>(a1, &v5);
  int v5 = a2[3];
  return IPC::Encoder::operator<<<int>(a1, &v5);
}

unint64_t IPC::ArgumentCoder<WebCore::ScrollingStatePositionedNode,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  long long v12 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v12);
  uint64_t v14 = *((void *)&v12 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v14);
  IPC::VectorArgumentCoder<false,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 40));
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    if (*(void *)(a2 + 104))
    {
      long long v12 = *(_OWORD *)(a2 + 104);
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      LOBYTE(v12) = 0;
    }
    char v13 = v8;
    unint64_t result = (unint64_t)IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, (uint64_t)&v12);
    uint64_t v5 = *(void *)(a2 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return result;
      }
      goto LABEL_4;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 140));
  uint64_t v9 = *(unsigned int *)(a2 + 140);
  if (v9)
  {
    uint64_t v10 = *(uint64_t **)(a2 + 128);
    uint64_t v11 = 16 * v9;
    do
    {
      unint64_t result = (unint64_t)IPC::Encoder::operator<<<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, v10);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  if ((*(void *)(a2 + 40) & 4) != 0)
  {
LABEL_4:
    float v6 = *(float *)(a2 + 148);
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 144));
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v6);
    float v7 = *(float *)(a2 + 156);
    IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 152));
    return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v6 = *(unsigned char *)a2;
  uint64_t result = IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v5 = *(unsigned char *)a2;
  if (*(unsigned char *)a2)
  {
    uint64_t result = IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
    char v5 = *(unsigned char *)a2;
    if ((*(unsigned char *)a2 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return result;
      }
      return IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
    }
  }
  else if ((*(unsigned char *)a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  if ((*(unsigned char *)a2 & 4) == 0) {
    return result;
  }
  return IPC::ArgumentCoder<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
}

IPC::Decoder *IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::decode@<X0>(IPC::Decoder *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  unint64_t v4 = *((void *)result + 1);
  char v5 = *(char **)result;
  unint64_t v6 = *((void *)result + 2) - *(void *)result;
  if (v4 <= v6)
  {
    unint64_t v12 = 0;
    char v13 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v14 = *((void *)result + 3);
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        char v13 = *(char **)v2;
        unint64_t v12 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        char v13 = 0;
      }
    }
    goto LABEL_25;
  }
  float v7 = &v5[v6];
  *((void *)result + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v12 = v4;
    char v13 = 0;
LABEL_25:
    unint64_t v4 = 0;
    char v5 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v15 = *((void *)v2 + 3);
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        char v5 = *(char **)v2;
        unint64_t v4 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_26;
  }
  unsigned int v8 = *v7;
  if (v8 >= 8)
  {
LABEL_26:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)v2 + 3);
    if (result && v4) {
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, char *))(*(void *)result + 16))(result, v5);
    }
    goto LABEL_27;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = 0;
    if ((v8 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>((uint64_t)&v16, result);
  if (!v17)
  {
LABEL_27:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    return result;
  }
  uint64_t v9 = v16;
  if ((v8 & 2) == 0)
  {
LABEL_6:
    uint64_t v10 = 0;
    if ((v8 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>((uint64_t)&v16, v2);
  if (v17)
  {
    uint64_t v10 = v16;
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if (*(void *)v2)
      {
        uint64_t v11 = 0;
LABEL_15:
        *(unsigned char *)a2 = v8;
        *(void *)(a2 + 8) = v9;
        *(void *)(a2 + 16) = v10;
        *(void *)(a2 + 24) = v11;
        *(unsigned char *)(a2 + 32) = 1;
        return result;
      }
      goto LABEL_17;
    }
LABEL_13:
    uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>((uint64_t)&v16, v2);
    if (v17)
    {
      uint64_t v11 = v16;
      if (*(void *)v2) {
        goto LABEL_15;
      }
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
      if (v11) {
        uint64_t result = (IPC::Decoder *)WTF::fastFree((WTF *)(v11 - 16), v5);
      }
      goto LABEL_18;
    }
LABEL_17:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
LABEL_18:
    if (v10) {
      uint64_t result = (IPC::Decoder *)WTF::fastFree((WTF *)(v10 - 16), v5);
    }
    goto LABEL_20;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
LABEL_20:
  if (v9)
  {
    return (IPC::Decoder *)WTF::fastFree((WTF *)(v9 - 16), v5);
  }
  return result;
}

void sub_1988C018C(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (v2) {
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>>(uint64_t result, IPC::Decoder *a2)
{
  uint64_t v3 = (unsigned char *)result;
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v32 = *((void *)a2 + 3);
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v32 + 16))(v32, v5, v4);
        uint64_t v31 = *(void *)a2;
        unint64_t v30 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_48;
  }
  unsigned int v8 = (int *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v30 = v4;
    uint64_t v31 = 0;
LABEL_48:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v33 = *((void *)a2 + 3);
    if (v33 && v30) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
    }
    unsigned char *v3 = 0;
    v3[8] = 0;
    goto LABEL_41;
  }
  int v9 = *v8;
  uint64_t v36 = 0;
  if (!v9)
  {
    uint64_t v29 = 0;
LABEL_45:
    *(void *)uint64_t v3 = v29;
    v3[8] = 1;
    return result;
  }
  int v10 = 0;
  while (1)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v34);
    if (!v35) {
      break;
    }
    if (*((void *)&v34 + 1) == -1 || v34 == 0) {
      break;
    }
    uint64_t v13 = v36;
    if (v36
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(&v36, 0), (uint64_t v13 = v36) != 0))
    {
      int v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      int v14 = 0;
    }
    unsigned int v37 = -1640531527;
    __int16 v38 = 0;
    char v39 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v37, &v34);
    uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37);
    unsigned int v15 = result & v14;
    uint64_t v11 = (unint64_t *)(v13 + 16 * (result & v14));
    unint64_t v17 = *v11;
    unint64_t v16 = v11[1];
    unint64_t v19 = *((void *)&v34 + 1);
    unint64_t v18 = v34;
    if (*(_OWORD *)v11 != 0)
    {
      char v20 = 0;
      int v21 = 1;
      while (__PAIR128__(v16, v17) != v34)
      {
        if (v16 == -1) {
          char v20 = v11;
        }
        unsigned int v15 = (v15 + v21) & v14;
        uint64_t v11 = (unint64_t *)(v13 + 16 * v15);
        unint64_t v17 = *v11;
        unint64_t v16 = v11[1];
        ++v21;
        if (*(_OWORD *)v11 == 0)
        {
          if (v20)
          {
            *char v20 = 0;
            v20[1] = 0;
            --*(_DWORD *)(v36 - 16);
            unint64_t v19 = *((void *)&v34 + 1);
            unint64_t v18 = v34;
            uint64_t v11 = v20;
          }
          goto LABEL_25;
        }
      }
      break;
    }
LABEL_25:
    *uint64_t v11 = v18;
    v11[1] = v19;
    if (v36) {
      int v22 = *(_DWORD *)(v36 - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(v36 - 12) = v22;
    if (v36) {
      int v23 = *(_DWORD *)(v36 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v36 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v36 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_34;
      }
LABEL_33:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(&v36, v11);
      goto LABEL_34;
    }
    if (3 * v25 <= 4 * v24) {
      goto LABEL_33;
    }
LABEL_34:
    if (++v10 == v9)
    {
      uint64_t v29 = v36;
      goto LABEL_45;
    }
  }
  uint64_t v26 = v36;
  unsigned char *v3 = 0;
  v3[8] = 0;
  if (v26) {
    WTF::fastFree((WTF *)(v26 - 16), v11);
  }
LABEL_41:
  uint64_t v27 = *(void *)a2;
  uint64_t v28 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v28) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v27);
    }
  }
  return result;
}

void sub_1988C04B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    WTF::fastFree((WTF *)(a13 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *(const __CFDictionary **)(a2 + 8));
  return IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *(const __CFDictionary **)(a2 + 16));
}

void IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::MediaSelectionOption::MediaType>(a1);
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a1, (uint64_t)&v11);
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a1, (uint64_t)&cf);
  if (!*a1)
  {
LABEL_13:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 <= 0xFFu || !v12 || !v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  CFTypeRef v5 = v11;
  CFTypeRef v11 = 0;
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = 1;
LABEL_6:
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
LABEL_8:
  if (v12)
  {
    CFTypeRef v8 = v11;
    CFTypeRef v11 = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
}

void sub_1988C0600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::encode(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  IPC::Encoder::operator<<<int>(a1, &v4);
  unsigned __int8 v5 = a2[6];
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>> const&>(a1, (uint64_t)(a2 + 2), v5);
}

void IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = IPC::Decoder::decode<unsigned int>(a1);
  IPC::Decoder::decode<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>(a1, v5, (uint64_t)v9);
  if (!*a1) {
    goto LABEL_11;
  }
  if ((v4 & 0xFF00000000) == 0 || !v11)
  {
    __break(1u);
LABEL_11:
    *a2 = 0;
    a2[32] = 0;
    goto LABEL_6;
  }
  int v6 = v4;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v9);
  *(_DWORD *)a2 = v4;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v7);
  a2[32] = 1;
  if (v8 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v8])(&v12, v7);
  }
LABEL_6:
  if (v11)
  {
    if (v10 != -1) {
      ((void (*)(int *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v10])(&v6, v9);
    }
  }
}

void sub_1988C0784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, char a15, uint64_t a16, int a17, int a18, char a19)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a13])(v20 - 33, v19);
  }
  if (a19)
  {
    if (a17 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[a17])(&a10, &a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 24))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void sub_1988C0860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF6VectorINS6_9RetainPtrIP16__SecCertificateEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS8_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebsiteData::Entry,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v6 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2, v6);
  int v5 = *(_DWORD *)(a2 + 32);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(a1, &v5);
  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 40));
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebsiteDataType>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebsiteData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 16));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (void **)(a2 + 24));

  return IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
}

WTF::StringImpl **IPC::ArgumentCoder<WebKit::WebsiteData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    LOBYTE(v35) = 0;
    char v37 = 0;
LABEL_36:
    uint64_t v20 = *a1;
    uint64_t v21 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22) {
      BOOL v23 = v21 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
    }
    goto LABEL_41;
  }
  unint64_t v6 = v4;
  __int16 v38 = 0;
  uint64_t v39 = 0;
  if (v4 >= 0x5555)
  {
    do
    {
      IPC::Decoder::decode<WebKit::WebsiteData::Entry>((uint64_t)v40, a1);
      if (!v43) {
        goto LABEL_35;
      }
      unsigned int v12 = HIDWORD(v39);
      if (HIDWORD(v39) == v39)
      {
        uint64_t result = (WTF::StringImpl **)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)&v38, (unint64_t)v40);
      }
      else
      {
        int v14 = v38;
        uint64_t result = (WTF::StringImpl **)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v38 + 48 * HIDWORD(v39), (uint64_t)v40);
        *((_OWORD *)v14 + 3 * v12 + 2) = v42;
        ++HIDWORD(v39);
      }
      if (v43 && v41 != -1) {
        uint64_t result = (WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl ***, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v41])(&v33, v40);
      }
      --v6;
    }
    while (v6);
    unsigned int v15 = HIDWORD(v39);
    unint64_t v16 = v38;
    if (v39 > HIDWORD(v39))
    {
      unint64_t v17 = v38;
      if (HIDWORD(v39))
      {
        if (HIDWORD(v39) >= 0x5555556)
        {
          __break(0xC471u);
          goto LABEL_63;
        }
        unsigned int v18 = 48 * HIDWORD(v39);
        uint64_t v19 = (WTF *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v39)));
        LODWORD(v39) = v18 / 0x30;
        __int16 v38 = v19;
        unint64_t v17 = v16;
        if (v19 != v16)
        {
          WTF::VectorMover<false,WebKit::WebsiteData::Entry>::move((uint64_t)v16, (uint64_t)v16 + 48 * v15, (uint64_t)v19);
          unint64_t v17 = v38;
        }
      }
      if (v16)
      {
        if (v17 == v16)
        {
          __int16 v38 = 0;
          LODWORD(v39) = 0;
        }
        WTF::fastFree(v16, v5);
        unint64_t v16 = v38;
      }
      else
      {
        unint64_t v16 = v17;
      }
    }
    char v35 = v16;
    uint64_t v30 = v39;
    __int16 v38 = 0;
    uint64_t v39 = 0;
    uint64_t v36 = v30;
    goto LABEL_17;
  }
  if (v4)
  {
    LODWORD(v39) = 48 * (int)v4 / 0x30u;
    __int16 v38 = (WTF *)WTF::fastMalloc((WTF *)(48 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebsiteData::Entry>((uint64_t)v40, a1);
      if (!v43) {
        break;
      }
      unsigned int v8 = HIDWORD(v39);
      if (HIDWORD(v39) == v39)
      {
        WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>((uint64_t)&v38, (unint64_t)v40);
      }
      else
      {
        int v9 = v38;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v38 + 48 * HIDWORD(v39), (uint64_t)v40);
        *((_OWORD *)v9 + 3 * v8 + 2) = v42;
        ++HIDWORD(v39);
      }
      if (v43 && v41 != -1) {
        ((void (*)(WTF::StringImpl ***, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v41])(&v33, v40);
      }
      if (!--v6)
      {
        int v10 = v38;
        uint64_t v11 = v39;
        goto LABEL_16;
      }
    }
LABEL_35:
    LOBYTE(v35) = 0;
    char v37 = 0;
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v7);
    goto LABEL_36;
  }
  int v10 = 0;
  uint64_t v11 = 0;
LABEL_16:
  __int16 v38 = 0;
  uint64_t v39 = 0;
  char v35 = v10;
  uint64_t v36 = v11;
LABEL_17:
  char v37 = 1;
  WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v5);
LABEL_41:
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v38);
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((WTF::StringImpl *)a1, &v33);
  uint64_t result = (WTF::StringImpl **)IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>((IPC::Decoder *)a1, &v31);
  if (*a1)
  {
    if (v37)
    {
      unint64_t v25 = v35;
      uint64_t v26 = v36;
      char v35 = 0;
      uint64_t v36 = 0;
      if ((_BYTE)v39)
      {
        uint64_t v27 = v38;
        __int16 v38 = 0;
        if (v34)
        {
          uint64_t v28 = v33;
          uint64_t v33 = 0;
          if (v32)
          {
            uint64_t v29 = v31;
            uint64_t v31 = 0;
            v40[0] = 0;
            v40[1] = 0;
            *(void *)a2 = v25;
            *(void *)(a2 + 8) = v26;
            _OWORD v40[2] = 0;
            uint64_t v41 = 0;
            *(void *)(a2 + 16) = v27;
            *(void *)(a2 + 24) = v28;
            *(void *)&long long v42 = 0;
            *(void *)(a2 + 32) = v29;
            *(unsigned char *)(a2 + 40) = 1;
            uint64_t result = (WTF::StringImpl **)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v24);
            goto LABEL_47;
          }
        }
      }
    }
LABEL_63:
    __break(1u);
    return result;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_47:
  if (v32)
  {
    uint64_t result = v31;
    if (v31) {
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, (WTF::StringImpl *)v24);
    }
  }
  if (v34)
  {
    uint64_t result = v33;
    if (v33) {
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v24);
    }
  }
  if ((_BYTE)v39)
  {
    uint64_t result = (WTF::StringImpl **)v38;
    if (v38) {
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v38, (WTF::StringImpl *)v24);
    }
  }
  if (v37) {
    return (WTF::StringImpl **)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v24);
  }
  return result;
}

void sub_1988C0E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,uint64_t a30,char a31)
{
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2 + 1);

  return IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::encode(void *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, a2 + 1);

  return IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 2));
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v43);
  uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v7 = v6;
  unint64_t v8 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v9)
  {
    uint64_t v2 = v8;
    int v50 = 0;
    uint64_t v51 = 0;
    if (v8 >= 0x4924) {
      goto LABEL_19;
    }
    if (!v8)
    {
      LODWORD(v24) = 0;
      unsigned int v25 = 0;
      uint64_t result = 0;
LABEL_12:
      if (!*(void *)a1)
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 32) = 0;
        if (result) {
          uint64_t result = WTF::fastFree((WTF *)result, v9);
        }
        goto LABEL_36;
      }
      int v26 = 0;
      goto LABEL_14;
    }
    unsigned int v10 = 56 * v8;
    uint64_t v11 = WTF::fastMalloc((WTF *)(56 * v8));
    LODWORD(v51) = v10 / 0x38;
    int v50 = (WTF *)v11;
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebGPU::BindGroupEntry>((uint64_t)&v45, (uint64_t *)a1);
      if (!v49) {
        break;
      }
      int v12 = HIDWORD(v51);
      if (HIDWORD(v51) == v51)
      {
        unint64_t v13 = WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, HIDWORD(v51) + 1, (unint64_t)&v45);
        int v14 = HIDWORD(v51);
        uint64_t result = (uint64_t)v50;
        unint64_t v16 = (char *)v50 + 56 * HIDWORD(v51);
        long long v17 = *(_OWORD *)v13;
        long long v18 = *(_OWORD *)(v13 + 16);
        long long v19 = *(_OWORD *)(v13 + 32);
        *((void *)v16 + 6) = *(void *)(v13 + 48);
        *((_OWORD *)v16 + 1) = v18;
        *((_OWORD *)v16 + 2) = v19;
        *(_OWORD *)unint64_t v16 = v17;
        int v12 = v14;
      }
      else
      {
        uint64_t result = (uint64_t)v50;
        uint64_t v20 = (char *)v50 + 56 * HIDWORD(v51);
        long long v21 = v45;
        long long v22 = v46;
        long long v23 = v47;
        *((void *)v20 + 6) = v48;
        *((_OWORD *)v20 + 1) = v22;
        *((_OWORD *)v20 + 2) = v23;
        *(_OWORD *)uint64_t v20 = v21;
      }
      LODWORD(v24) = v12 + 1;
      HIDWORD(v51) = v24;
      if (!--v2)
      {
        unsigned int v25 = v51;
        goto LABEL_12;
      }
    }
LABEL_32:
    uint64_t v41 = v50;
    if (v50)
    {
      int v50 = 0;
      LODWORD(v51) = 0;
      WTF::fastFree(v41, v9);
    }
  }
  int v9 = *(void **)a1;
  uint64_t v42 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (!result
    || !v42
    || (uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v9),
        (uint64_t v24 = *(void **)a1) == 0))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    goto LABEL_36;
  }
  uint64_t result = 0;
  int v26 = 1;
LABEL_14:
  if (!v44 || (uint64_t v27 = v43, v43 = 0, !v7) || v26)
  {
    __break(1u);
    do
    {
LABEL_19:
      uint64_t result = (uint64_t)IPC::Decoder::decode<WebKit::WebGPU::BindGroupEntry>((uint64_t)&v45, (uint64_t *)a1);
      if (!v49) {
        goto LABEL_32;
      }
      int v28 = HIDWORD(v51);
      if (HIDWORD(v51) == v51)
      {
        uint64_t result = WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, HIDWORD(v51) + 1, (unint64_t)&v45);
        int v28 = HIDWORD(v51);
        uint64_t v29 = v50;
        uint64_t v30 = (char *)v50 + 56 * HIDWORD(v51);
        long long v31 = *(_OWORD *)result;
        long long v32 = *(_OWORD *)(result + 16);
        long long v33 = *(_OWORD *)(result + 32);
        *((void *)v30 + 6) = *(void *)(result + 48);
      }
      else
      {
        uint64_t v29 = v50;
        uint64_t v30 = (char *)v50 + 56 * HIDWORD(v51);
        long long v31 = v45;
        long long v32 = v46;
        long long v33 = v47;
        *((void *)v30 + 6) = v48;
      }
      *((_OWORD *)v30 + 1) = v32;
      *((_OWORD *)v30 + 2) = v33;
      *(_OWORD *)uint64_t v30 = v31;
      uint64_t v34 = (v28 + 1);
      HIDWORD(v51) = v28 + 1;
      --v2;
    }
    while (v2);
    unsigned int v25 = v51;
    if (v51 <= v34)
    {
      uint64_t result = (uint64_t)v29;
    }
    else
    {
      if (!v34) {
        goto LABEL_48;
      }
      char v35 = v29;
      if (v34 >= 0x4924925)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v2 = 56 * v34;
      uint64_t result = WTF::fastMalloc((WTF *)(56 * v34));
      unsigned int v25 = v2 / 0x38;
      LODWORD(v51) = v2 / 0x38;
      int v50 = (WTF *)result;
      uint64_t v29 = v35;
      if ((WTF *)result == v35)
      {
LABEL_48:
        int v50 = 0;
        LODWORD(v51) = 0;
      }
      else
      {
        uint64_t v36 = 0;
        do
        {
          uint64_t v37 = result + v36;
          long long v38 = *(_OWORD *)((char *)v35 + v36);
          long long v39 = *(_OWORD *)((char *)v35 + v36 + 16);
          long long v40 = *(_OWORD *)((char *)v35 + v36 + 32);
          *(void *)(v37 + 48) = *(void *)((char *)v35 + v36 + 48);
          *(_OWORD *)(v37 + 16) = v39;
          *(_OWORD *)(v37 + 32) = v40;
          *(_OWORD *)uint64_t v37 = v38;
          v36 += 56;
        }
        while (v2 != v36);
        if (!v35) {
          goto LABEL_50;
        }
      }
      WTF::fastFree(v29, v9);
      uint64_t result = (uint64_t)v50;
      unsigned int v25 = v51;
    }
LABEL_50:
    LODWORD(v24) = HIDWORD(v51);
    goto LABEL_12;
  }
  *(void *)a2 = v27;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 24) = v25;
  *(_DWORD *)(a2 + 28) = v24;
  *(unsigned char *)(a2 + 32) = 1;
LABEL_36:
  if (v44)
  {
    uint64_t result = (uint64_t)v43;
    char v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C12DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  int v12 = *(WTF **)(v10 - 64);
  if (v12)
  {
    *(void *)(v10 - 64) = 0;
    *(_DWORD *)(v10 - 56) = 0;
    WTF::fastFree(v12, a2);
  }
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
  uint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)&v8);
  if (*(void *)a1)
  {
    if (v12)
    {
      char v6 = v11;
      uint64_t v11 = 0;
      if (v10)
      {
        char v7 = v8;
        *(void *)a2 = v6;
        *(void *)(a2 + 8) = v7;
        *(void *)(a2 + 16) = v9;
        *(unsigned char *)(a2 + 24) = 1;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v10)
  {
    uint64_t result = v8;
    if (v8)
    {
      unint64_t v8 = 0;
      LODWORD(v9) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v5);
    }
  }
LABEL_5:
  if (v12)
  {
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C140C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1988C14B4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    unint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutEntry,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)a2);
  char v5 = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::BufferBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::BufferBindingLayout> const&>(a1, (char *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(a1, (char *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::TextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::TextureBindingLayout> const&>(a1, (char *)(a2 + 34));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::StorageTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::StorageTextureBindingLayout> const&>(a1, (char *)(a2 + 38));
  return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ExternalTextureBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ExternalTextureBindingLayout> const&>(a1, a2 + 42);
}

void *IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutEntry,void>::encode(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v20 = v6 >= v5;
  unint64_t v7 = v6 - v5;
  if (v20)
  {
    unint64_t v8 = v7 + v4;
    unint64_t v9 = v7 + v4 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v8) = *(_DWORD *)a2;
      result[2] = v9;
      unint64_t v4 = v9;
    }
  }
  if (v4 >= result[1])
  {
    unint64_t v11 = 0;
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v4++) = *(unsigned char *)(a2 + 4);
    result[2] = v4;
    unint64_t v11 = result[1];
  }
  if (*(unsigned char *)(a2 + 24))
  {
    if (v4 >= v11) {
      goto LABEL_57;
    }
    unint64_t v12 = v4 + 1;
    *(unsigned char *)(*result + v4) = 1;
    result[2] = v4 + 1;
    if (!*(unsigned char *)(a2 + 24)) {
      goto LABEL_50;
    }
    if (v12 >= result[1] || (*(unsigned char *)(*result + v12) = *(unsigned char *)(a2 + 8), result[2] = v4 + 2, v4 + 2 >= result[1]))
    {
LABEL_57:
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v4 + 2) = *(unsigned char *)(a2 + 9);
      result[2] = v4 + 3;
    }
    unint64_t result = IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(result, (void *)(a2 + 16));
    unint64_t v4 = v3[2];
  }
  else if (v4 >= v11)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v4++) = 0;
    result[2] = v4;
  }
  unint64_t v13 = v3[1];
  if (*(unsigned char *)(a2 + 33))
  {
    if (v4 < v13)
    {
      unint64_t v14 = v4 + 1;
      *(unsigned char *)(*v3 + v4) = 1;
      v3[2] = v4 + 1;
      if (!*(unsigned char *)(a2 + 33)) {
        goto LABEL_50;
      }
      if (v14 < v3[1])
      {
        v4 += 2;
        *(unsigned char *)(*v3 + v14) = *(unsigned char *)(a2 + 32);
LABEL_26:
        v3[2] = v4;
        goto LABEL_27;
      }
      ++v4;
    }
  }
  else if (v4 < v13)
  {
    *(unsigned char *)(*v3 + v4++) = 0;
    goto LABEL_26;
  }
  v3[1] = 0;
LABEL_27:
  unint64_t v15 = v3[1];
  if (*(unsigned char *)(a2 + 37))
  {
    if (v4 < v15)
    {
      unint64_t v16 = v4 + 1;
      *(unsigned char *)(*v3 + v4) = 1;
      v3[2] = v4 + 1;
      if (!*(unsigned char *)(a2 + 37)) {
        goto LABEL_50;
      }
      if (v16 < v3[1])
      {
        *(unsigned char *)(*v3 + v16) = *(unsigned char *)(a2 + 34);
        v3[2] = v4 + 2;
        if (v4 + 2 >= v3[1])
        {
          v4 += 2;
          goto LABEL_64;
        }
        unint64_t v16 = v4 + 3;
        *(unsigned char *)(*v3 + v4 + 2) = *(unsigned char *)(a2 + 35);
        v3[2] = v4 + 3;
        if (v4 + 3 < v3[1])
        {
          v4 += 4;
          *(unsigned char *)(*v3 + v16) = *(unsigned char *)(a2 + 36);
LABEL_36:
          v3[2] = v4;
          goto LABEL_37;
        }
      }
      unint64_t v4 = v16;
    }
  }
  else if (v4 < v15)
  {
    *(unsigned char *)(*v3 + v4++) = 0;
    goto LABEL_36;
  }
LABEL_64:
  v3[1] = 0;
LABEL_37:
  unint64_t v17 = v3[1];
  if (!*(unsigned char *)(a2 + 41))
  {
    if (v4 < v17)
    {
      *(unsigned char *)(*v3 + v4++) = 0;
      goto LABEL_46;
    }
LABEL_66:
    v3[1] = 0;
    goto LABEL_47;
  }
  if (v4 >= v17) {
    goto LABEL_66;
  }
  unint64_t v18 = v4 + 1;
  *(unsigned char *)(*v3 + v4) = 1;
  v3[2] = v4 + 1;
  if (!*(unsigned char *)(a2 + 41)) {
    goto LABEL_50;
  }
  if (v18 >= v3[1]) {
    goto LABEL_60;
  }
  *(unsigned char *)(*v3 + v18) = *(unsigned char *)(a2 + 38);
  v3[2] = v4 + 2;
  if (v4 + 2 >= v3[1])
  {
    v4 += 2;
    goto LABEL_66;
  }
  unint64_t v18 = v4 + 3;
  *(unsigned char *)(*v3 + v4 + 2) = *(unsigned char *)(a2 + 39);
  v3[2] = v4 + 3;
  if (v4 + 3 >= v3[1])
  {
LABEL_60:
    unint64_t v4 = v18;
    goto LABEL_66;
  }
  v4 += 4;
  *(unsigned char *)(*v3 + v18) = *(unsigned char *)(a2 + 40);
LABEL_46:
  v3[2] = v4;
LABEL_47:
  unint64_t v19 = v3[1];
  BOOL v20 = v4 >= v19;
  if (!*(unsigned char *)(a2 + 43)) {
    goto LABEL_51;
  }
  if (v4 >= v19)
  {
LABEL_56:
    v3[1] = 0;
    return result;
  }
  *(unsigned char *)(*v3 + v4) = 1;
  v3[2] = v4 + 1;
  if (*(unsigned char *)(a2 + 43)) {
    return result;
  }
LABEL_50:
  unint64_t result = (void *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_51:
  if (v20) {
    goto LABEL_56;
  }
  *(unsigned char *)(*v3 + v4) = 0;
  v3[2] = v4 + 1;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 16));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 18));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::encode(void *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, (void *)(a2 + 8));
  unint64_t result = IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(a1, (_WORD *)(a2 + 16));
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 18);
    a1[2] = v5 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v30);
  unint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (uint64_t *)((char *)v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (!v5)
    {
      unint64_t v18 = v4;
      unint64_t v19 = 0;
      goto LABEL_20;
    }
    int v9 = 0;
    uint64_t v10 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v20 + 16))(v20, v5, v4);
        unint64_t v19 = *(WTF::StringImpl **)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
      }
    }
LABEL_20:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v21 = *((void *)a1 + 3);
    if (v21 && v18) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v21 + 16))(v21, v19);
    }
    uint64_t v10 = 0;
    int v9 = 1;
LABEL_8:
    uint64_t result = IPC::Decoder::decode<unsigned short>(a1);
    unint64_t v12 = *((void *)a1 + 1);
    unint64_t v13 = *(WTF::StringImpl **)a1;
    unint64_t v14 = *((void *)a1 + 2) - *(void *)a1;
    if (v12 <= v14) {
      break;
    }
    unint64_t v15 = (unsigned __int8 *)v13 + v14;
    *((void *)a1 + 2) = v15 + 1;
    if (!v13)
    {
      unint64_t v22 = v12;
      long long v23 = 0;
      goto LABEL_23;
    }
    unsigned int v16 = *v15;
    if (v16 > 1) {
      goto LABEL_24;
    }
    unint64_t v4 = 0;
    unint64_t v5 = (WTF::StringImpl *)(v16 != 0);
LABEL_12:
    if (v31)
    {
      unint64_t v17 = v30;
      uint64_t v30 = 0;
      if (!v9 && (result & 0xFF0000) != 0 && !v4)
      {
        *(void *)a2 = v17;
        *(void *)(a2 + 8) = v10;
        *(_WORD *)(a2 + 16) = result;
        *(unsigned char *)(a2 + 18) = (_BYTE)v5;
        *(unsigned char *)(a2 + 24) = 1;
        return result;
      }
    }
    __break(1u);
  }
  unint64_t v22 = 0;
  long long v23 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v24 = *((void *)a1 + 3);
  if (v24)
  {
    unsigned int v29 = result;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      long long v23 = *(WTF::StringImpl **)a1;
      unint64_t v22 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v22 = 0;
      long long v23 = 0;
    }
    uint64_t result = v29;
  }
LABEL_23:
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v25 = *((void *)a1 + 3);
  if (v25)
  {
    unsigned int v28 = result;
    if (v22)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
      unint64_t v13 = *(WTF::StringImpl **)a1;
      unint64_t v12 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v12 = 0;
      unint64_t v13 = 0;
    }
    uint64_t result = v28;
  }
LABEL_24:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v26 = *((void *)a1 + 3);
  if (v26)
  {
    if (v12)
    {
      unsigned int v27 = result;
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v13);
      uint64_t result = v27;
      if (*(void *)a1)
      {
        unint64_t v5 = 0;
        unint64_t v4 = 1;
        goto LABEL_12;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v31)
  {
    uint64_t result = (uint64_t)v30;
    uint64_t v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C1C88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 16));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 24));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 32));
  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 40));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v87);
  __int16 v89 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v89);
  char v4 = v89;
  if (HIBYTE(v89)) {
    BOOL v5 = v89 > 2u;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  if (v6 == 1) {
    goto LABEL_39;
  }
  while (1)
  {
    unint64_t v7 = *((void *)a1 + 1);
    unint64_t v8 = *(WTF::StringImpl **)a1;
    unint64_t v9 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
    if (v7 >= v9 && v7 - v9 > 7)
    {
      unint64_t v11 = (uint64_t *)((char *)v8 + v9);
      *((void *)a1 + 2) = v11 + 1;
      if (v8)
      {
        int v12 = 0;
        uint64_t v13 = *v11;
        goto LABEL_15;
      }
      unint64_t v31 = v7;
      long long v32 = 0;
    }
    else
    {
      unint64_t v31 = 0;
      long long v32 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v33 = *((void *)a1 + 3);
      if (v33)
      {
        char v74 = v4;
        int v83 = v6;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
          long long v32 = *(WTF::StringImpl **)a1;
          unint64_t v31 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v31 = 0;
          long long v32 = 0;
        }
        int v6 = v83;
        char v4 = v74;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v34 = *((void *)a1 + 3);
    if (v34)
    {
      char v70 = v4;
      int v79 = v6;
      if (v31)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
        uint64_t v13 = 0;
        unint64_t v8 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        uint64_t v13 = 0;
      }
      int v12 = 1;
      int v6 = v79;
      char v4 = v70;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v13 = 0;
      int v12 = 1;
    }
LABEL_15:
    unint64_t v14 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v8;
    if (v7 >= v14 && v7 - v14 > 7)
    {
      unsigned int v16 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)a1 + 2) = v16 + 1;
      if (v8)
      {
        int v17 = 0;
        uint64_t v18 = *v16;
        goto LABEL_22;
      }
      unint64_t v35 = v7;
      uint64_t v36 = 0;
    }
    else
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v37 = *((void *)a1 + 3);
      if (v37)
      {
        int v67 = v12;
        char v75 = v4;
        uint64_t v61 = v13;
        int v84 = v6;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          uint64_t v36 = *(WTF::StringImpl **)a1;
          unint64_t v35 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v35 = 0;
          uint64_t v36 = 0;
        }
        int v6 = v84;
        int v12 = v67;
        char v4 = v75;
        uint64_t v13 = v61;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v38 = *((void *)a1 + 3);
    if (v38)
    {
      int v64 = v12;
      char v71 = v4;
      uint64_t v58 = v13;
      int v80 = v6;
      if (v35)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
        uint64_t v18 = 0;
        unint64_t v8 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        uint64_t v18 = 0;
      }
      int v17 = 1;
      int v6 = v80;
      int v12 = v64;
      char v4 = v71;
      uint64_t v13 = v58;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v18 = 0;
      int v17 = 1;
    }
LABEL_22:
    unint64_t v19 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v8;
    if (v7 < v19 || v7 - v19 <= 7)
    {
      unint64_t v39 = 0;
      long long v40 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v41 = *((void *)a1 + 3);
      if (v41)
      {
        int v56 = v17;
        uint64_t v52 = v18;
        int v68 = v12;
        char v76 = v4;
        uint64_t v62 = v13;
        int v85 = v6;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
          long long v40 = *(WTF::StringImpl **)a1;
          unint64_t v39 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v39 = 0;
          long long v40 = 0;
        }
        int v6 = v85;
        int v12 = v68;
        char v4 = v76;
        uint64_t v13 = v62;
        uint64_t v18 = v52;
        int v17 = v56;
      }
    }
    else
    {
      uint64_t v20 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
      *((void *)a1 + 2) = v20 + 1;
      if (v8)
      {
        int v21 = 0;
        uint64_t v22 = *v20;
        goto LABEL_26;
      }
      unint64_t v39 = v7;
      long long v40 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v42 = *((void *)a1 + 3);
    if (v42)
    {
      int v54 = v17;
      uint64_t v50 = v18;
      int v65 = v12;
      char v72 = v4;
      uint64_t v59 = v13;
      int v81 = v6;
      if (v39)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v42 + 16))(v42, v40, v39);
        uint64_t v22 = 0;
        unint64_t v8 = *(WTF::StringImpl **)a1;
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0;
        uint64_t v22 = 0;
      }
      int v21 = 1;
      int v6 = v81;
      int v12 = v65;
      char v4 = v72;
      uint64_t v13 = v59;
      uint64_t v18 = v50;
      int v17 = v54;
    }
    else
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v22 = 0;
      int v21 = 1;
    }
LABEL_26:
    unint64_t v23 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v8;
    if (v7 < v23 || v7 - v23 <= 7) {
      break;
    }
    uint64_t v24 = (uint64_t *)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v24 + 1;
    if (!v8)
    {
      unint64_t v43 = v7;
      char v44 = 0;
      goto LABEL_51;
    }
    int v25 = 0;
    uint64_t v26 = *v24;
LABEL_30:
    if (v88)
    {
      uint64_t result = v87;
      int v87 = 0;
      if (!v6 && !v12 && !v17 && !v21 && !v25)
      {
        *(void *)a2 = result;
        *(unsigned char *)(a2 + 8) = v4;
        *(void *)(a2 + 16) = v13;
        *(void *)(a2 + 24) = v18;
        *(void *)(a2 + 32) = v22;
        *(void *)(a2 + 40) = v26;
        *(unsigned char *)(a2 + 48) = 1;
        return result;
      }
    }
    __break(1u);
LABEL_39:
    unsigned int v28 = *(WTF::StringImpl **)a1;
    uint64_t v29 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v30 = *((void *)a1 + 3);
    if (v30)
    {
      int v78 = v6;
      if (v29) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v30 + 16))(v30, v28);
      }
      char v4 = 0;
      int v6 = v78;
    }
    else
    {
      char v4 = 0;
    }
  }
  unint64_t v43 = 0;
  char v44 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v45 = *((void *)a1 + 3);
  if (v45)
  {
    int v49 = v21;
    uint64_t v47 = v22;
    int v57 = v17;
    uint64_t v53 = v18;
    int v69 = v12;
    char v77 = v4;
    uint64_t v63 = v13;
    int v86 = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
      char v44 = *(WTF::StringImpl **)a1;
      unint64_t v43 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v43 = 0;
      char v44 = 0;
    }
    int v6 = v86;
    int v12 = v69;
    char v4 = v77;
    uint64_t v13 = v63;
    uint64_t v18 = v53;
    int v17 = v57;
    uint64_t v22 = v47;
    int v21 = v49;
  }
LABEL_51:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v43)
    {
      int v48 = v21;
      uint64_t v46 = v22;
      int v55 = v17;
      uint64_t v51 = v18;
      int v66 = v12;
      char v73 = v4;
      uint64_t v60 = v13;
      int v82 = v6;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)result + 16))(result, v44, v43);
      int v6 = v82;
      int v12 = v66;
      char v4 = v73;
      uint64_t v13 = v60;
      uint64_t v18 = v51;
      int v17 = v55;
      uint64_t v22 = v46;
      int v21 = v48;
      if (*(void *)a1)
      {
        uint64_t v26 = 0;
        int v25 = 1;
        goto LABEL_30;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (v88)
  {
    uint64_t result = v87;
    int v87 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C2360(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 - 32))
  {
    char v4 = *(WTF::StringImpl **)(v2 - 40);
    *(void *)(v2 - 40) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::ComputePassDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v10);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>>((uint64_t *)a1, (uint64_t)&v7);
  if (*(void *)a1)
  {
    if (v11)
    {
      int v6 = v10;
      uint64_t v10 = 0;
      if (v9)
      {
        *(_OWORD *)(a2 + 8) = v7;
        *(unsigned char *)(a2 + 24) = v8;
        *(void *)a2 = v6;
        *(unsigned char *)(a2 + 32) = 1;
        return result;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v11)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C2460(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2 + 1);

  return IPC::ArgumentCoder<WebKit::WebGPU::ProgrammableStage,void>::encode(a1, a2 + 2);
}

void *IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::encode(void *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, a2 + 1);

  return IPC::ArgumentCoder<WebKit::WebGPU::ProgrammableStage,void>::encode(a1, a2 + 2);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v41);
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v9 = v8;
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v46);
  IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v43, a1);
  if (!*(void *)a1) {
    goto LABEL_46;
  }
  if (!v9 || !v48) {
    goto LABEL_45;
  }
  LOBYTE(v30) = 0;
  char v31 = 0;
  if (v47)
  {
    char v11 = v46;
    uint64_t v46 = 0;
    uint64_t v30 = v11;
    char v31 = 1;
  }
  if (!v45) {
    goto LABEL_45;
  }
  uint64_t v12 = v43;
  uint64_t v13 = v44;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v35 = v7;
  LOBYTE(v36) = 0;
  unsigned __int8 v37 = 0;
  if (v47)
  {
    unint64_t v14 = v30;
    uint64_t v30 = 0;
    uint64_t v36 = v14;
    unsigned __int8 v37 = 1;
  }
  long long v32 = 0;
  uint64_t v33 = 0;
  uint64_t v38 = v12;
  uint64_t v39 = v13;
  char v40 = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v10);
  if (v31 && v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v10);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  int v15 = 1;
LABEL_15:
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v10);
  int v16 = v15;
  while (1)
  {
    if (v48)
    {
      if (v47)
      {
        int v17 = v46;
        uint64_t v46 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
            if (v16) {
              goto LABEL_22;
            }
            goto LABEL_42;
          }
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    if (v16) {
      goto LABEL_22;
    }
LABEL_42:
    uint64_t v10 = *(void **)a1;
    uint64_t v28 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v29 = *((void *)a1 + 3);
    if (v29 && v28) {
      (*(void (**)(uint64_t, void *))(*(void *)v29 + 16))(v29, v10);
    }
LABEL_22:
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 56) = 0;
      goto LABEL_35;
    }
    if (v42)
    {
      uint64_t v18 = v41;
      uint64_t v41 = 0;
      if (v6)
      {
        if (v40) {
          break;
        }
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    int v15 = 0;
    int v16 = 0;
    LOBYTE(v35) = 0;
    char v40 = 0;
    if (v45) {
      goto LABEL_15;
    }
  }
  uint64_t v19 = v35;
  LOBYTE(v32) = 0;
  LOBYTE(v33) = 0;
  int v20 = v37;
  if (v37)
  {
    int v21 = v36;
    uint64_t v36 = 0;
    long long v32 = v21;
    LOBYTE(v33) = 1;
  }
  uint64_t v22 = v38;
  uint64_t v23 = v39;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v19;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v20)
  {
    uint64_t v24 = v32;
    long long v32 = 0;
    *(void *)(a2 + 24) = v24;
    *(unsigned char *)(a2 + 32) = 1;
  }
  v34[0] = 0;
  v34[1] = 0;
  *(void *)(a2 + 40) = v22;
  *(void *)(a2 + 48) = v23;
  *(unsigned char *)(a2 + 56) = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v10);
  if ((_BYTE)v33)
  {
    int v25 = v32;
    long long v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
LABEL_35:
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v10);
  if (v42)
  {
    uint64_t result = v41;
    uint64_t v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C28D8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24)
{
  std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a17, a2);
  if (a24)
  {
    uint64_t v26 = a23;
    a23 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(a1, (char *)(a2 + 3));
  IPC::ArgumentCoder<WebKit::WebGPU::StencilFaceState,void>::encode(a1, (char *)(a2 + 5));
  IPC::ArgumentCoder<WebKit::WebGPU::StencilFaceState,void>::encode(a1, (char *)(a2 + 9));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, a2 + 24);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 32));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 36));
  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 40));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::DepthStencilState,void>::encode(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  if (v4 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v4) = *(unsigned char *)a2;
    a1[2] = v4 + 1;
  }
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (unsigned char *)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (unsigned char *)(a2 + 3));
  IPC::ArgumentCoder<WebKit::WebGPU::StencilFaceState,void>::encode(a1, (unsigned char *)(a2 + 5));
  IPC::ArgumentCoder<WebKit::WebGPU::StencilFaceState,void>::encode(a1, (unsigned char *)(a2 + 9));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, a2 + 16);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, a2 + 24);
  IPC::StreamConnectionEncoder::operator<<<int const&>(a1, (_DWORD *)(a2 + 32));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 36));

  return IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 40));
}

uint64_t IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>(uint64_t *a1)
{
  __int16 v13 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v13);
  int v2 = v13;
  if (HIBYTE(v13)) {
    BOOL v3 = v13 > 0x5Eu;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  if (v4 == 1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9 && v8 != 0)
    {
      int v12 = v2;
      int v11 = v4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      int v4 = v11;
      int v2 = v12;
    }
  }
  unsigned int v5 = v2 | 0x100;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::WebGPU::CompareFunction>>(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a1;
        uint64_t v12 = a1[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    uint64_t v12 = v2;
    uint64_t v13 = 0;
LABEL_12:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v3 = *a1;
        unint64_t v2 = a1[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      unsigned __int16 v7 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
      int v8 = v7;
      unsigned int v9 = (v7 > 0xFFu) << 16;
      if ((v7 & 0xFF00) == 0) {
        int v8 = 0;
      }
      int v10 = 256;
    }
    else
    {
      int v8 = 0;
      int v10 = 0;
      unsigned int v9 = 0x10000;
    }
    goto LABEL_9;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v16 = a1[3];
  if (v16 && v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v3);
  }
  unsigned int v9 = 0;
  int v8 = 0;
  int v10 = 0;
LABEL_9:
  uint64_t result = v8 | v9 | v10;
  if (!HIWORD(v9))
  {
    uint64_t v17 = *a1;
    uint64_t v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      if (v18)
      {
        uint64_t v20 = result;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
        return v20;
      }
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::WebGPU::StencilFaceState>(uint64_t *a1)
{
  unsigned __int16 v2 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  unsigned __int16 v3 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  int v5 = IPC::Decoder::decode<WebCore::CSSBoxType>(a1);
  if (!*a1) {
    goto LABEL_10;
  }
  if (v2 <= 0xFFu || v3 <= 0xFFu || v4 <= 0xFFu || (unsigned __int16)v5 <= 0xFFu)
  {
    __break(1u);
LABEL_10:
    int v7 = 0;
    unsigned int v6 = 0;
    goto LABEL_7;
  }
  unsigned int v6 = (v4 << 16) | (v5 << 24) | (v3 << 8) | v2;
  int v7 = 1;
LABEL_7:
  unint64_t v8 = v6 | ((unint64_t)(v7 & 1) << 32);
  if (!v7)
  {
    uint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      }
    }
  }
  return v8;
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));

  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(void *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));

  return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v60);
  unsigned int v6 = (WTF *)IPC::Decoder::decode<unsigned long long>(a1);
  if (!v7) {
    goto LABEL_24;
  }
  unint64_t v8 = v6;
  uint64_t v53 = 0;
  int v54 = 0;
  if ((unint64_t)v6 >= 0x100000)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    while (1)
    {
      unsigned __int16 v16 = IPC::Decoder::decode<WebCore::WebGPU::FeatureName>((uint64_t *)a1);
      LOWORD(v57) = v16;
      if (v16 < 0x100u) {
        break;
      }
      if (v15 == v54)
      {
        uint64_t v17 = (unsigned char *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, (WTF *)(v15 + 1), (unint64_t)&v57);
        LODWORD(v15) = HIDWORD(v54);
        uint64_t v14 = v53;
        *((unsigned char *)v53 + HIDWORD(v54)) = *v17;
      }
      else
      {
        *((unsigned char *)v14 + v15) = v16;
      }
      uint64_t v15 = (v15 + 1);
      HIDWORD(v54) = v15;
      unint64_t v8 = (WTF *)((char *)v8 - 1);
      if (!v8)
      {
        if (v54 > v15)
        {
          if (v15)
          {
            LODWORD(v54) = v15;
            uint64_t v53 = (WTF::StringImpl *)WTF::fastRealloc(v14, (void *)v15);
          }
          else
          {
            uint64_t v53 = 0;
            LODWORD(v54) = 0;
            WTF::fastFree(v14, v11);
          }
        }
        unsigned int v9 = v53;
        int v3 = (int)v54;
        unsigned int v2 = HIDWORD(v54);
        goto LABEL_12;
      }
    }
    unsigned int v9 = v53;
    if (v53)
    {
LABEL_23:
      uint64_t v53 = 0;
      LODWORD(v54) = 0;
      WTF::fastFree(v9, v11);
    }
LABEL_24:
    uint64_t v18 = *(void **)a1;
    uint64_t v19 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_83;
    }
    goto LABEL_25;
  }
  if (v6)
  {
    unsigned int v9 = (WTF *)WTF::fastMalloc(v6);
    unsigned int v2 = 0;
    LODWORD(v54) = v8;
    uint64_t v53 = v9;
    do
    {
      unsigned __int16 v10 = IPC::Decoder::decode<WebCore::WebGPU::FeatureName>((uint64_t *)a1);
      LOWORD(v57) = v10;
      if (v10 < 0x100u) {
        goto LABEL_23;
      }
      if (v2 == v54)
      {
        uint64_t v12 = (unsigned char *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, (WTF *)(v2 + 1), (unint64_t)&v57);
        unsigned int v2 = HIDWORD(v54);
        unsigned int v9 = v53;
        *((unsigned char *)v53 + HIDWORD(v54)) = *v12;
      }
      else
      {
        *((unsigned char *)v9 + v2) = v10;
      }
      HIDWORD(v54) = ++v2;
      unint64_t v8 = (WTF *)((char *)v8 - 1);
    }
    while (v8);
    int v3 = (int)v54;
  }
  else
  {
    int v3 = 0;
    unsigned int v9 = 0;
    unsigned int v2 = 0;
  }
LABEL_12:
  int v13 = 0;
  while (2)
  {
    unint64_t v21 = IPC::Decoder::decode<unsigned long long>(a1);
    if (!(_BYTE)v22)
    {
      LOBYTE(v57) = 0;
      char v59 = 0;
      goto LABEL_57;
    }
    unint64_t v23 = v21;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    if (v21 < 0x10000)
    {
      if (!v21)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
LABEL_43:
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        int v57 = v33;
        uint64_t v58 = v34;
        goto LABEL_44;
      }
      uint64_t v24 = WTF::fastMalloc((WTF *)(16 * v21));
      LODWORD(v63) = v23;
      uint64_t v62 = (WTF::StringImpl *)v24;
      while (1)
      {
        IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,unsigned long long>>((uint64_t)&v53, a1);
        if (!(_BYTE)v55) {
          goto LABEL_56;
        }
        if (HIDWORD(v63) != v63) {
          break;
        }
        int v25 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v62, HIDWORD(v63) + 1, (unint64_t)&v53);
        int v26 = HIDWORD(v63) + 1;
        unsigned int v27 = (void *)((char *)v62 + 16 * HIDWORD(v63));
        uint64_t v28 = *v25;
        *int v25 = 0;
        *unsigned int v27 = v28;
        v27[1] = v25[1];
        HIDWORD(v63) = v26;
        if ((_BYTE)v55) {
          goto LABEL_35;
        }
LABEL_39:
        if (!--v23)
        {
          uint64_t v33 = v62;
          uint64_t v34 = v63;
          goto LABEL_43;
        }
      }
      int v29 = HIDWORD(v63) + 1;
      uint64_t v30 = (WTF::StringImpl **)((char *)v62 + 16 * HIDWORD(v63));
      char v31 = v53;
      uint64_t v53 = 0;
      *uint64_t v30 = v31;
      v30[1] = v54;
      HIDWORD(v63) = v29;
LABEL_35:
      long long v32 = v53;
      uint64_t v53 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v22);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      goto LABEL_39;
    }
    do
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,unsigned long long>>((uint64_t)&v53, a1);
      if (!(_BYTE)v55)
      {
LABEL_56:
        LOBYTE(v57) = 0;
        char v59 = 0;
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v22);
LABEL_57:
        uint64_t v18 = *(void **)a1;
        uint64_t v19 = *((void *)a1 + 1);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
        if (result && v19) {
          uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, void *))(*(void *)result + 16))(result, v18);
        }
        if (*(void *)a1)
        {
          int v35 = 1;
          goto LABEL_60;
        }
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 40) = 0;
        goto LABEL_71;
      }
      if (HIDWORD(v63) == v63)
      {
        uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v62, HIDWORD(v63) + 1, (unint64_t)&v53);
        int v36 = HIDWORD(v63) + 1;
        unsigned __int8 v37 = (void *)((char *)v62 + 16 * HIDWORD(v63));
        uint64_t v38 = *(void *)result;
        *(void *)uint64_t result = 0;
        void *v37 = v38;
        v37[1] = *((void *)result + 1);
        HIDWORD(v63) = v36;
        if (!(_BYTE)v55) {
          goto LABEL_54;
        }
      }
      else
      {
        int v39 = HIDWORD(v63) + 1;
        char v40 = (WTF::StringImpl **)((char *)v62 + 16 * HIDWORD(v63));
        uint64_t v41 = v53;
        uint64_t v53 = 0;
        *char v40 = v41;
        v40[1] = v54;
        HIDWORD(v63) = v39;
      }
      uint64_t result = v53;
      uint64_t v53 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
LABEL_54:
      --v23;
    }
    while (v23);
    char v48 = v62;
    if (v63 <= HIDWORD(v63)) {
      goto LABEL_101;
    }
    int v49 = v62;
    if (!HIDWORD(v63)) {
      goto LABEL_94;
    }
    uint64_t v52 = HIDWORD(v63);
    if (HIDWORD(v63) >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v50 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v63)));
    LODWORD(v63) = v52;
    uint64_t v62 = (WTF::StringImpl *)v50;
    int v49 = v48;
    if (v50 != (WTF::StringImpl **)v48)
    {
      WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,unsigned long long>>::move(v48, (WTF::StringImpl *)((char *)v48 + 16 * v52), v50);
      int v49 = v62;
    }
LABEL_94:
    if (v48)
    {
      if (v49 == v48)
      {
        uint64_t v62 = 0;
        LODWORD(v63) = 0;
      }
      WTF::fastFree(v48, v22);
      char v48 = v62;
    }
    else
    {
      char v48 = v49;
    }
LABEL_101:
    int v57 = v48;
    uint64_t v51 = v63;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v58 = v51;
LABEL_44:
    char v59 = 1;
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v22);
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 40) = 0;
      goto LABEL_70;
    }
    int v35 = 0;
LABEL_60:
    if (!v61 || (char v42 = v60, v60 = 0, v13) || v35)
    {
      __break(1u);
LABEL_83:
      if (v19) {
        (*(void (**)(WTF::StringImpl *, void *))(*(void *)result + 16))(result, v18);
      }
LABEL_25:
      unsigned int v9 = 0;
      int v13 = 1;
      continue;
    }
    break;
  }
  uint64_t v43 = v57;
  int v57 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  *(void *)a2 = v42;
  *(void *)(a2 + 8) = v9;
  uint64_t v55 = 0;
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v2;
  v56[0] = 0;
  *(void *)(a2 + 24) = v43;
  v56[1] = 0;
  uint64_t v44 = v58;
  uint64_t v58 = 0;
  *(void *)(a2 + 32) = v44;
  *(unsigned char *)(a2 + 40) = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v18);
  char v45 = v54;
  if (v54)
  {
    int v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree(v45, v18);
  }
  uint64_t v46 = v53;
  uint64_t v53 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  unsigned int v9 = 0;
LABEL_70:
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v18);
LABEL_71:
  if (v9) {
    char v47 = v13;
  }
  else {
    char v47 = 1;
  }
  if ((v47 & 1) == 0) {
    uint64_t result = (WTF::StringImpl *)WTF::fastFree(v9, v18);
  }
  if (v61)
  {
    uint64_t result = v60;
    uint64_t v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C34E0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  if (a13 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 - 80, a2);
  if (v20) {
    char v25 = v21;
  }
  else {
    char v25 = 1;
  }
  if ((v25 & 1) == 0) {
    WTF::fastFree(v20, v24);
  }
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)v24);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(IPC::Encoder *a1, int *a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, a2[1]);
  int v4 = a2[2];

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unsigned __int16 v16 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 >= v2 + v3)
  {
    unint64_t v17 = (unint64_t)v16 - v2 + 4;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFFBLL || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      _DWORD *v16 = a2[2];
      result[2] = v17;
    }
  }
  return result;
}

void *IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::decode(void *result)
{
  unint64_t v1 = result[1];
  uint64_t v2 = *result;
  unint64_t v3 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v24 = result[3];
    if (v24)
    {
      uint64_t v50 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v2);
        uint64_t result = v50;
        uint64_t v23 = *v50;
        unint64_t v22 = v50[1];
      }
      else
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_24;
  }
  unint64_t v5 = (int *)(v2 + v3);
  result[2] = v5 + 1;
  if (!v2)
  {
    unint64_t v22 = v1;
    uint64_t v23 = 0;
LABEL_24:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v2 = result[3];
    if (v2)
    {
      char v47 = result;
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 16))(v2, v23, v22);
        unsigned int v8 = 0;
        int v9 = 0;
        uint64_t result = v47;
        uint64_t v10 = *v47;
        unint64_t v1 = v47[1];
        int v6 = 1;
        uint64_t v2 = *v47;
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v8 = 0;
        int v9 = 0;
        int v6 = 1;
      }
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v1 = 0;
      unsigned int v8 = 0;
      int v9 = 0;
      int v6 = 1;
    }
    goto LABEL_8;
  }
  int v6 = 0;
  int v7 = *v5;
  unsigned int v8 = v7 & 0xFFFFFF00;
  int v9 = v7;
  uint64_t v10 = v2;
LABEL_8:
  unint64_t v11 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v11 && v1 - v11 > 3)
  {
    unint64_t v13 = (int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    result[2] = v13 + 1;
    if (v2)
    {
      int v14 = 0;
      int v15 = *v13;
      unsigned int v16 = v15 & 0xFFFFFF00;
      int v17 = v15;
      goto LABEL_15;
    }
    unint64_t v25 = v1;
  }
  else
  {
    unint64_t v25 = 0;
    uint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v26 = result[3];
    if (v26)
    {
      int v45 = v6;
      unsigned int v37 = v8;
      int v41 = v9;
      uint64_t v51 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v2);
        uint64_t result = v51;
        uint64_t v10 = *v51;
        unint64_t v25 = v51[1];
      }
      else
      {
        unint64_t v25 = 0;
        uint64_t v10 = 0;
      }
      unsigned int v8 = v37;
      int v9 = v41;
      int v6 = v45;
    }
  }
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v2 = result[3];
  if (v2)
  {
    int v43 = v6;
    unsigned int v35 = v8;
    int v39 = v9;
    char v48 = result;
    if (v25)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v2 + 16))(v2, v10, v25);
      unsigned int v16 = 0;
      int v17 = 0;
      uint64_t result = v48;
      uint64_t v10 = *v48;
      unint64_t v1 = v48[1];
      int v14 = 1;
      uint64_t v2 = *v48;
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v16 = 0;
      int v17 = 0;
      int v14 = 1;
    }
    unsigned int v8 = v35;
    int v9 = v39;
    int v6 = v43;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v1 = 0;
    unsigned int v16 = 0;
    int v17 = 0;
    int v14 = 1;
  }
LABEL_15:
  unint64_t v18 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 < v18 || v1 - v18 <= 3)
  {
    unint64_t v19 = 0;
    uint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v27 = result[3];
    if (v27)
    {
      int v30 = v14;
      unsigned int v32 = v16;
      int v34 = v17;
      int v46 = v6;
      unsigned int v38 = v8;
      int v42 = v9;
      uint64_t v52 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v2);
        uint64_t result = v52;
        uint64_t v10 = *v52;
        unint64_t v19 = v52[1];
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v10 = 0;
      }
      unsigned int v8 = v38;
      int v9 = v42;
      int v6 = v46;
      unsigned int v16 = v32;
      int v17 = v34;
      int v14 = v30;
    }
  }
  else
  {
    result[2] = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unint64_t v19 = v1;
    if (v2)
    {
      int v20 = 0;
      if (v6) {
        goto LABEL_58;
      }
      goto LABEL_19;
    }
  }
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v28 = result[3];
  if (!v28)
  {
    uint64_t v21 = 0;
    return (void *)(v21 | ((unint64_t)(v17 | v16) << 32));
  }
  int v29 = v14;
  unsigned int v31 = v16;
  int v33 = v17;
  int v44 = v6;
  unsigned int v36 = v8;
  int v40 = v9;
  int v49 = result;
  if (!v19)
  {
    uint64_t v21 = 0;
    goto LABEL_40;
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v28 + 16))(v28, v10, v19);
  if (!*v49)
  {
    uint64_t v21 = 0;
LABEL_40:
    unsigned int v16 = v31;
    int v17 = v33;
    return (void *)(v21 | ((unint64_t)(v17 | v16) << 32));
  }
  int v20 = 1;
  unsigned int v8 = v36;
  int v9 = v40;
  unsigned int v16 = v31;
  int v17 = v33;
  int v14 = v29;
  if (v44) {
    goto LABEL_58;
  }
LABEL_19:
  if (!v14 && !v20)
  {
    uint64_t v21 = v9 | v8;
    return (void *)(v21 | ((unint64_t)(v17 | v16) << 32));
  }
LABEL_58:
  __break(1u);
  return result;
}

void IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, a2 + 8);
  char v4 = *(unsigned char *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, &v4);
  IPC::ArgumentCoder<std::optional<WebKit::SharedVideoFrame>,void>::encode<IPC::Encoder,std::optional<WebKit::SharedVideoFrame>>(a1, a2 + 32);
}

void IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v38);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a1, &v35);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>((uint64_t *)a1);
  unint64_t v5 = *((void *)a1 + 1);
  int v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if (v5 <= v7)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v12 = *((void *)a1 + 3);
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        unint64_t v11 = *(WTF::StringImpl **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v8 = (unsigned __int8 *)v6 + v7;
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v10 = v5;
    unint64_t v11 = 0;
LABEL_14:
    unint64_t v5 = 0;
    int v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v13 = *((void *)a1 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        int v6 = *(WTF::StringImpl **)a1;
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        int v6 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_15:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v14 = *((void *)a1 + 3);
    if (v14 && v5) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v14 + 16))(v14, v6);
    }
    goto LABEL_16;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebKit::SharedVideoFrame>(a1, (uint64_t)v20);
    if (v25)
    {
      long long v29 = *(_OWORD *)v20;
      int v30 = v21;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v31, (uint64_t)v22);
      char v33 = 1;
      char v34 = 1;
      if (v25 && v24 != -1) {
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v24])(&v40, v22);
      }
      goto LABEL_17;
    }
LABEL_16:
    LOBYTE(v29) = 0;
    char v34 = 0;
    goto LABEL_17;
  }
  LOBYTE(v20[0]) = 0;
  char v25 = 0;
  std::__optional_move_base<WebKit::SharedVideoFrame,false>::__optional_move_base[abi:sn180100]((uint64_t)&v29, (long long *)v20);
  char v34 = 1;
  if (v25 && v24 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v24])(&v40, v22);
  }
LABEL_17:
  if (!v34) {
    goto LABEL_42;
  }
  while (1)
  {
    if (!*(void *)a1)
    {
      *a2 = 0;
      a2[88] = 0;
      goto LABEL_31;
    }
    if (v39)
    {
      int v15 = v38;
      unsigned int v38 = 0;
      v20[0] = v15;
      if (v37)
      {
        v20[1] = v35;
        LOBYTE(v21) = v36;
        if (v4 > 0xFFu)
        {
          v22[0] = v4;
          if (v34) {
            break;
          }
        }
      }
    }
    __break(1u);
LABEL_42:
    int v6 = *(WTF::StringImpl **)a1;
    uint64_t v18 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v19 = *((void *)a1 + 3);
    if (v19 && v18) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v19 + 16))(v19, v6);
    }
  }
  std::__optional_move_base<WebKit::SharedVideoFrame,false>::__optional_move_base[abi:sn180100]((uint64_t)&v23, &v29);
  std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ExternalTextureDescriptor>((uint64_t)a2, (uint64_t *)v20);
  if (v28)
  {
    if (v27 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v27])(&v40, &v26);
    }
    int v27 = -1;
  }
  unsigned int v16 = v20[0];
  v20[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v6);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
LABEL_31:
  if (v34 && v33 && v32 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[v32])(v20, v31);
  }
  if (v39)
  {
    int v17 = v38;
    unsigned int v38 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v6);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
}

void sub_1988C3F48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  if ((_BYTE)a35 && a33 && a31 != -1) {
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix[a31])(&a10, &a29);
  }
  if (*(unsigned char *)(v37 - 64))
  {
    char v39 = *(WTF::StringImpl **)(v37 - 72);
    *(void *)(v37 - 72) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, a2);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 3);

  return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 5));
}

IPC::Decoder *IPC::ArgumentCoder<WebKit::WebGPU::FragmentState,void>::encode(IPC::Decoder *a1, void *a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 1));
  IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 3));

  return IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::ColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 5));
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_31:
    uint64_t v24 = *(void *)a2;
    uint64_t v25 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      BOOL v26 = v25 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    if (!v26) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v24);
    }
    return result;
  }
  unint64_t v6 = v4;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  if (v4 < 0x10000)
  {
    if (!v4)
    {
      int v15 = 0;
      uint64_t v16 = 0;
LABEL_18:
      unsigned int v35 = 0;
      uint64_t v36 = 0;
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      goto LABEL_19;
    }
    LODWORD(v36) = v4;
    unsigned int v35 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>((uint64_t)&v32, a2);
      if (!v34) {
        goto LABEL_30;
      }
      if (HIDWORD(v36) != v36) {
        break;
      }
      unint64_t v7 = (uint64_t *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v35, HIDWORD(v36) + 1, (unint64_t)&v32);
      int v8 = HIDWORD(v36) + 1;
      unsigned int v9 = (void *)((char *)v35 + 16 * HIDWORD(v36));
      uint64_t v10 = *v7;
      *unint64_t v7 = 0;
      *unsigned int v9 = v10;
      v9[1] = v7[1];
      HIDWORD(v36) = v8;
      if (v34) {
        goto LABEL_10;
      }
LABEL_14:
      if (!--v6)
      {
        int v15 = v35;
        uint64_t v16 = v36;
        goto LABEL_18;
      }
    }
    int v11 = HIDWORD(v36) + 1;
    uint64_t v12 = (WTF::StringImpl **)((char *)v35 + 16 * HIDWORD(v36));
    uint64_t v13 = v32;
    int v32 = 0;
    *uint64_t v12 = v13;
    v12[1] = v33;
    HIDWORD(v36) = v11;
LABEL_10:
    uint64_t v14 = v32;
    int v32 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v5);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    goto LABEL_14;
  }
  do
  {
    IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,double>>((uint64_t)&v32, a2);
    if (!v34)
    {
LABEL_30:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 16) = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
      goto LABEL_31;
    }
    if (HIDWORD(v36) == v36)
    {
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v35, HIDWORD(v36) + 1, (unint64_t)&v32);
      int v18 = HIDWORD(v36) + 1;
      uint64_t v19 = (void *)((char *)v35 + 16 * HIDWORD(v36));
      uint64_t v20 = *(void *)result;
      *(void *)uint64_t result = 0;
      *uint64_t v19 = v20;
      v19[1] = *((void *)result + 1);
      HIDWORD(v36) = v18;
      if (!v34) {
        goto LABEL_28;
      }
    }
    else
    {
      int v21 = HIDWORD(v36) + 1;
      unint64_t v22 = (WTF::StringImpl **)((char *)v35 + 16 * HIDWORD(v36));
      uint64_t v23 = v32;
      int v32 = 0;
      *unint64_t v22 = v23;
      v22[1] = v33;
      HIDWORD(v36) = v21;
    }
    uint64_t result = v32;
    int v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
LABEL_28:
    --v6;
  }
  while (v6);
  uint64_t v27 = HIDWORD(v36);
  char v28 = v35;
  if (v36 <= HIDWORD(v36)) {
    goto LABEL_47;
  }
  long long v29 = v35;
  if (!HIDWORD(v36)) {
    goto LABEL_42;
  }
  if (HIDWORD(v36) >> 28)
  {
    __break(0xC471u);
  }
  else
  {
    int v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v36)));
    LODWORD(v36) = v27;
    unsigned int v35 = v30;
    long long v29 = v28;
    if (v30 != v28)
    {
      WTF::VectorMover<false,WebCore::SpeechRecognitionAlternativeData>::move(v28, (WTF::StringImpl *)((char *)v28 + 16 * v27), (WTF::StringImpl **)v30);
      long long v29 = v35;
    }
LABEL_42:
    if (v28)
    {
      if (v29 == v28)
      {
        unsigned int v35 = 0;
        LODWORD(v36) = 0;
      }
      WTF::fastFree(v28, v5);
      char v28 = v35;
    }
    else
    {
      char v28 = v29;
    }
LABEL_47:
    *(void *)a1 = v28;
    uint64_t v31 = v36;
    unsigned int v35 = 0;
    uint64_t v36 = 0;
    *(void *)(a1 + 8) = v31;
LABEL_19:
    *(unsigned char *)(a1 + 16) = 1;
    return (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v5);
  }
  return result;
}

void sub_1988C443C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 2));

  return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, a2 + 3);
}

void *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::encode(void *a1, void *a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 2));

  return IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, a2 + 3);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    int v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v20 = v4;
    uint64_t v21 = 0;
  }
  else
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v5, v4);
        uint64_t v21 = *(void *)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v23 = *((void *)a1 + 3);
  if (v23 && v20) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
  }
  uint64_t v10 = 0;
  int v9 = 1;
LABEL_8:
  uint64_t v11 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  char v13 = v12;
  uint64_t v14 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  char v16 = v15;
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  uint64_t v19 = *(void *)a1;
  if (!*(void *)a1)
  {
LABEL_16:
    *(unsigned char *)a2 = 0;
    goto LABEL_14;
  }
  if (v9 || !v13 || !v16 || !v18)
  {
    __break(1u);
    goto LABEL_16;
  }
  *(void *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 12) = BYTE4(v11);
  *(void *)(a2 + 13) = v14 << 24;
  LOBYTE(v19) = 1;
  *(void *)(a2 + 24) = result;
LABEL_14:
  *(unsigned char *)(a2 + 32) = v19;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>> const&>(a1, a2);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 32);
    a1[2] = v5 + 1;
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::decode@<X0>(IPC::Decoder *result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = result;
  unint64_t v5 = *((void *)result + 1);
  uint64_t v6 = *(void *)result;
  unint64_t v7 = *((void *)result + 2) - *(void *)result;
  if (v5 <= v7)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v24 = *((void *)result + 3);
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v23 = *(void *)v3;
        unint64_t v22 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
  }
  else
  {
    int v8 = (unsigned __int8 *)(v6 + v7);
    *((void *)result + 2) = v8 + 1;
    if (v6)
    {
      uint64_t v2 = *v8;
      if (v2 >= 2) {
        goto LABEL_8;
      }
      if (!*v8)
      {
        LOBYTE(v47[0]) = 0;
        char v49 = 0;
        uint64_t result = (IPC::Decoder *)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__optional_move_base[abi:sn180100](v51, (uint64_t)v47);
        goto LABEL_45;
      }
      if (v5 <= (unint64_t)&v8[-v6 + 1])
      {
        *(void *)uint64_t result = 0;
        *((void *)result + 1) = 0;
        uint64_t v26 = *((void *)result + 3);
        if (v26)
        {
          (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
          uint64_t v27 = *(void *)v3;
          uint64_t v28 = *((void *)v3 + 1);
          uint64_t v29 = *((void *)v3 + 3);
          *(void *)unint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          if (v29)
          {
            if (v28) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
            }
          }
        }
        goto LABEL_7;
      }
      int v9 = v8 + 2;
      *((void *)result + 2) = v8 + 2;
      unsigned int v10 = v8[1];
      if (v10 > 1)
      {
LABEL_7:
        uint64_t v6 = *(void *)v3;
        unint64_t v5 = *((void *)v3 + 1);
        goto LABEL_8;
      }
      if (v10)
      {
        unint64_t v11 = ((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
        uint64_t v2 = v5 < v11 || v5 - v11 < 4;
        if (v2 == 1)
        {
          *(void *)uint64_t result = 0;
          *((void *)result + 1) = 0;
          uint64_t result = (IPC::Decoder *)*((void *)result + 3);
          if (result)
          {
            (*(void (**)(IPC::Decoder *))(*(void *)result + 16))(result);
            unsigned int v15 = 0;
            uint64_t v6 = 0;
            uint64_t v42 = *(void *)v3;
            uint64_t v43 = *((void *)v3 + 1);
            uint64_t result = (IPC::Decoder *)*((void *)v3 + 3);
            *(void *)unint64_t v3 = 0;
            *((void *)v3 + 1) = 0;
            unint64_t v5 = 0;
            int v16 = 0;
            if (result)
            {
              uint64_t v2 = 1;
              if (v43)
              {
                uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t, uint64_t))(*(void *)result + 16))(result, v42, v43);
                uint64_t v2 = 1;
                unsigned int v15 = 0;
                int v16 = 0;
                uint64_t v6 = *(void *)v3;
                unint64_t v5 = *((void *)v3 + 1);
              }
            }
            else
            {
              uint64_t v2 = 1;
            }
          }
          else
          {
            uint64_t v6 = 0;
            unint64_t v5 = 0;
            unsigned int v15 = 0;
            int v16 = 0;
          }
        }
        else
        {
          char v13 = (int *)((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
          int v14 = *v13;
          *((void *)result + 2) = v13 + 1;
          unsigned int v15 = v14 & 0xFFFFFF00;
          int v16 = v14;
        }
        unint64_t v17 = ((*((void *)v3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
        if (v5 < v17 || v5 - v17 <= 3)
        {
          unint64_t v19 = 0;
          uint64_t v20 = 0;
          *(void *)unint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t result = (IPC::Decoder *)*((void *)v3 + 3);
          if (result) {
            goto LABEL_89;
          }
          goto LABEL_40;
        }
        char v18 = (unsigned int *)((*((void *)v3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
        *((void *)v3 + 2) = v18 + 1;
        unint64_t v19 = v5;
        uint64_t v20 = v6;
        if (!v6) {
          goto LABEL_40;
        }
        if (!v2)
        {
          v47[0] = v16 | v15 | ((unint64_t)*v18 << 32);
          int v21 = 1;
          int v48 = 1;
LABEL_43:
          char v49 = v21;
          if (!v21) {
            goto LABEL_7;
          }
          uint64_t result = (IPC::Decoder *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v51, (uint64_t)v47);
          char v53 = 1;
LABEL_45:
          char v54 = 1;
          if (v49 && v48 != -1) {
            uint64_t result = (IPC::Decoder *)((uint64_t (*)(void *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v48])(v55, v47);
          }
          goto LABEL_48;
        }
LABEL_88:
        while (1)
        {
          __break(1u);
LABEL_89:
          uint64_t v46 = v2;
          if (v5)
          {
            (*(void (**)(IPC::Decoder *))(*(void *)result + 16))(result);
            uint64_t v20 = *(void *)v3;
            unint64_t v19 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v19 = 0;
            uint64_t v20 = 0;
          }
          uint64_t v2 = v46;
LABEL_40:
          *(void *)unint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v30 = *((void *)v3 + 3);
          if (!v30 || !v19) {
            break;
          }
          uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v20, v19);
          if (!*(void *)v3)
          {
            uint64_t v44 = *((void *)v3 + 1);
            uint64_t v45 = *((void *)v3 + 3);
            *(void *)unint64_t v3 = 0;
            *((void *)v3 + 1) = 0;
            if (v45 && v44) {
              (*(void (**)(uint64_t, void))(*(void *)v45 + 16))(v45, 0);
            }
            break;
          }
        }
        int v21 = 0;
      }
      else
      {
        IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(result, v55);
        int v21 = v56;
        if (v56)
        {
          v47[0] = v55[0];
          v47[1] = v55[1];
          int v48 = 0;
          int v21 = 1;
          goto LABEL_43;
        }
      }
      LOBYTE(v47[0]) = 0;
      goto LABEL_43;
    }
    unint64_t v22 = v5;
    uint64_t v23 = 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  *(void *)unint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v25 = *((void *)v3 + 3);
  if (v25)
  {
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
      goto LABEL_7;
    }
    unint64_t v5 = 0;
    uint64_t v6 = 0;
  }
LABEL_8:
  *(void *)unint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)v3 + 3);
  if (result && v5) {
    uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v6);
  }
  v51[0] = 0;
  char v54 = 0;
LABEL_48:
  unint64_t v5 = *((void *)v3 + 1);
  if (!v54)
  {
    uint64_t v36 = *(void *)v3;
    *(void *)unint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v37 = *((void *)v3 + 3);
    if (!v37 || !v5)
    {
      unint64_t v5 = 0;
      uint64_t v31 = *(void *)v3;
LABEL_65:
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      *(void *)unint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      uint64_t v40 = *((void *)v3 + 3);
      if (v40)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v31);
          uint64_t v39 = *(void *)v3;
          unint64_t v38 = *((void *)v3 + 1);
        }
        else
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
        }
      }
      goto LABEL_66;
    }
    uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v36);
    unint64_t v5 = *((void *)v3 + 1);
  }
  uint64_t v31 = *(void *)v3;
  unint64_t v32 = *((void *)v3 + 2) - *(void *)v3;
  if (v5 <= v32) {
    goto LABEL_65;
  }
  char v33 = (unsigned __int8 *)(v31 + v32);
  *((void *)v3 + 2) = v33 + 1;
  if (!v31)
  {
    unint64_t v38 = v5;
    uint64_t v39 = 0;
LABEL_66:
    unint64_t v5 = 0;
    uint64_t v31 = 0;
    *(void *)unint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v41 = *((void *)v3 + 3);
    if (v41)
    {
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
        uint64_t v31 = *(void *)v3;
        unint64_t v5 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_67;
  }
  unsigned int v34 = *v33;
  if (v34 <= 1)
  {
    int v35 = 0;
    unint64_t v3 = (IPC::Decoder *)(v34 != 0);
    goto LABEL_53;
  }
LABEL_67:
  *(void *)unint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)v3 + 3);
  if (!result
    || !v5
    || (uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v31), !*(void *)v3))
  {
    *a2 = 0;
    a2[40] = 0;
    goto LABEL_58;
  }
  unint64_t v3 = 0;
  int v35 = 1;
LABEL_53:
  if (!v54) {
    goto LABEL_88;
  }
  uint64_t result = (IPC::Decoder *)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__optional_move_base[abi:sn180100](v47, (uint64_t)v51);
  if (v35) {
    goto LABEL_88;
  }
  char v50 = (char)v3;
  uint64_t result = (IPC::Decoder *)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v47);
  a2[32] = v50;
  a2[40] = 1;
  if (v49 && v48 != -1) {
    uint64_t result = (IPC::Decoder *)((uint64_t (*)(void *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v48])(v55, v47);
  }
LABEL_58:
  if (v54 && v53 && v52 != -1) {
    return (IPC::Decoder *)((uint64_t (*)(void *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v52])(v47, v51);
  }
  return result;
}

void sub_1988C4E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, int a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if ((_BYTE)a22 && a20 && a18 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a18])(&a10, &a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, a2 + 16);
  char v5 = *(unsigned char *)(a2 + 48);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, (void *)a2);
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }
  uint64_t result = IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, a2 + 16);
  unint64_t v13 = a1[2];
  if (v13 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v13) = *(unsigned char *)(a2 + 48);
    a1[2] = v13 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unsigned char *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  char v6 = v5;
  unint64_t v7 = a1[1];
  uint64_t v8 = *a1;
  unint64_t v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v7 >= v9 && v7 - v9 > 3)
  {
    unint64_t v11 = (_DWORD *)(v8 + v9);
    a1[2] = (uint64_t)(v11 + 1);
    if (!v8)
    {
      uint64_t v17 = v7;
      uint64_t v18 = 0;
      goto LABEL_23;
    }
    int v12 = 0;
    unsigned int v13 = *v11 & 0xFFFFFF00;
    int v14 = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v8, v7);
        uint64_t v18 = *a1;
        uint64_t v17 = a1[1];
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20 && v17) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
    }
    unsigned int v13 = 0;
    int v14 = 0;
    int v12 = 1;
LABEL_8:
    IPC::Decoder::decode<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>>(v27, (IPC::Decoder *)a1);
    uint64_t result = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
    uint64_t v8 = *a1;
    if (!*a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 56) = 0;
      goto LABEL_16;
    }
    if (v6)
    {
      int v21 = v4;
      if (!v12)
      {
        int v22 = v14 | v13;
        uint64_t v8 = v30;
        if (v30)
        {
          unsigned __int16 v16 = result;
          uint64_t v4 = v23;
          std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](v23, (uint64_t)v27);
          uint64_t v8 = v16;
          if (v16 > 0xFFu) {
            break;
          }
        }
      }
    }
    __break(1u);
  }
  char v26 = v16;
  *(void *)a2 = v21;
  *(_DWORD *)(a2 + 8) = v22;
  uint64_t result = (uint64_t)std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 16), (uint64_t)v23);
  *(unsigned char *)(a2 + 48) = v26;
  *(unsigned char *)(a2 + 56) = 1;
  if (v25 && v24 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v24])(&v31, v23);
  }
LABEL_16:
  if (v30 && v29 && v28 != -1) {
    return ((uint64_t (*)(unsigned char **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v28])(&v21, v27);
  }
  return result;
}

void sub_1988C51FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 && a14 != -1) {
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a14])(v27 - 65, v26);
  }
  if ((_BYTE)a24 && a22 && a20 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a20])(&a10, &a18);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::Decoder::decode<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>>(unsigned char *result, IPC::Decoder *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v33 = 0;
    uint64_t v34 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v35 = *((void *)a2 + 3);
    if (v35)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
        uint64_t v34 = *(void *)a2;
        unint64_t v33 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v33 = 0;
        uint64_t v34 = 0;
      }
    }
  }
  else
  {
    uint64_t v8 = (unsigned __int8 *)(v5 + v7);
    *((void *)a2 + 2) = v8 + 1;
    if (v5)
    {
      if (*v8 >= 2u) {
        goto LABEL_8;
      }
      if (!*v8)
      {
        LOBYTE(v66) = 0;
        char v69 = 0;
        uint64_t result = std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](result, (uint64_t)&v66);
        goto LABEL_56;
      }
      if (v6 <= (unint64_t)&v8[-v5 + 1])
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v37 = *((void *)a2 + 3);
        if (v37)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          uint64_t v38 = *(void *)a2;
          uint64_t v39 = *((void *)a2 + 1);
          uint64_t v40 = *((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          if (v40)
          {
            if (v39) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v38);
            }
          }
        }
        goto LABEL_7;
      }
      unint64_t v9 = v8 + 2;
      *((void *)a2 + 2) = v8 + 2;
      unsigned int v10 = v8[1];
      if (v10 > 1)
      {
LABEL_7:
        unint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
        goto LABEL_8;
      }
      if (!v10)
      {
        IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v70);
        int v32 = v71;
        if (v71)
        {
          unint64_t v66 = v70[0];
          uint64_t v67 = v70[1];
          int v68 = 0;
          int v32 = 1;
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      unint64_t v11 = ((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
      BOOL v13 = v6 < v11 || v6 - v11 < 4;
      if (v13)
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t result = (unsigned char *)*((void *)a2 + 3);
        if (result)
        {
          (*(void (**)(unsigned char *))(*(void *)result + 16))(result);
          unsigned int v16 = 0;
          unint64_t v5 = 0;
          uint64_t v47 = *(void *)a2;
          uint64_t v48 = *((void *)a2 + 1);
          uint64_t result = (unsigned char *)*((void *)a2 + 3);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          unint64_t v6 = 0;
          int v17 = 0;
          if (result)
          {
            BOOL v13 = 1;
            if (v48)
            {
              uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)result + 16))(result, v47, v48);
              BOOL v13 = 1;
              unsigned int v16 = 0;
              int v17 = 0;
              unint64_t v5 = *(void *)a2;
              unint64_t v6 = *((void *)a2 + 1);
            }
          }
          else
          {
            BOOL v13 = 1;
          }
        }
        else
        {
          unint64_t v5 = 0;
          unint64_t v6 = 0;
          unsigned int v16 = 0;
          int v17 = 0;
        }
      }
      else
      {
        int v14 = (int *)((unint64_t)(v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        int v15 = *v14;
        *((void *)a2 + 2) = v14 + 1;
        unsigned int v16 = v15 & 0xFFFFFF00;
        int v17 = v15;
      }
      unint64_t v18 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v5;
      if (v6 < v18 || v6 - v18 <= 3)
      {
        unsigned int v57 = v16;
        int v60 = v17;
        BOOL v63 = v13;
        unint64_t v24 = 0;
        uint64_t v41 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v42 = *((void *)a2 + 3);
        if (v42)
        {
          if (v6)
          {
            (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
            uint64_t v41 = *(void *)a2;
            unint64_t v24 = *((void *)a2 + 1);
          }
          else
          {
            unint64_t v24 = 0;
            uint64_t v41 = 0;
          }
        }
      }
      else
      {
        uint64_t v19 = (int *)((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
        *((void *)a2 + 2) = v19 + 1;
        if (v5)
        {
          int v20 = 0;
          int v21 = *v19;
          unsigned int v22 = v21 & 0xFFFFFF00;
          int v23 = v21;
          unint64_t v24 = v5;
          goto LABEL_24;
        }
        unsigned int v57 = v16;
        int v60 = v17;
        BOOL v63 = v13;
        unint64_t v24 = v6;
        uint64_t v41 = 0;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t result = (unsigned char *)*((void *)a2 + 3);
      if (result)
      {
        if (v24)
        {
          uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, unint64_t))(*(void *)result + 16))(result, v41, v24);
          unsigned int v22 = 0;
          int v23 = 0;
          unint64_t v6 = *((void *)a2 + 1);
          int v20 = 1;
          unint64_t v24 = *(void *)a2;
          goto LABEL_49;
        }
        unint64_t v6 = 0;
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v24 = 0;
      }
      unsigned int v22 = 0;
      int v23 = 0;
      int v20 = 1;
LABEL_49:
      int v17 = v60;
      BOOL v13 = v63;
      unsigned int v16 = v57;
LABEL_24:
      unint64_t v25 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v24;
      if (v6 < v25 || v6 - v25 <= 3)
      {
        unint64_t v27 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v43 = *((void *)a2 + 3);
        if (v43)
        {
          int v54 = v23;
          int v56 = v20;
          unsigned int v52 = v22;
          unsigned int v59 = v16;
          int v62 = v17;
          BOOL v65 = v13;
          if (v6)
          {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v43 + 16))(v43, v24);
            unint64_t v27 = *((void *)a2 + 1);
          }
          else
          {
            unint64_t v27 = 0;
          }
          int v17 = v62;
          BOOL v13 = v65;
          int v20 = v56;
          unsigned int v16 = v59;
          unsigned int v22 = v52;
          int v23 = v54;
        }
      }
      else
      {
        uint64_t v26 = (_DWORD *)((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
        *((void *)a2 + 2) = v26 + 1;
        unint64_t v27 = v6;
        if (v24)
        {
          int v28 = 0;
          unsigned int v29 = *v26 & 0xFFFFFF00;
          int v30 = *v26;
          if (v13) {
            goto LABEL_90;
          }
          goto LABEL_28;
        }
      }
      int v61 = v17;
      BOOL v64 = v13;
      int v55 = v20;
      unsigned int v58 = v16;
      unsigned int v51 = v22;
      int v53 = v23;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v44 = *((void *)a2 + 3);
      if (v44 && v27)
      {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v44 + 16))(v44);
        if (*(void *)a2)
        {
          int v30 = 0;
          unsigned int v29 = 0;
          int v28 = 1;
          int v17 = v61;
          int v20 = v55;
          unsigned int v16 = v58;
          unsigned int v22 = v51;
          int v23 = v53;
          if (v64) {
            goto LABEL_90;
          }
LABEL_28:
          if (!v20 && !v28)
          {
            int v31 = v29 | v30;
            unint64_t v66 = v17 | v16 | ((unint64_t)(v23 | v22) << 32);
            int v32 = 1;
            LODWORD(v67) = v31;
            int v68 = 1;
LABEL_54:
            char v69 = v32;
            if (!v32) {
              goto LABEL_7;
            }
            uint64_t result = (unsigned char *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v3, (uint64_t)&v66);
            v3[24] = 1;
LABEL_56:
            v3[32] = 1;
            if (v69 && v68 != -1) {
              uint64_t result = (unsigned char *)((uint64_t (*)(void *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v68])(v70, &v66);
            }
            goto LABEL_59;
          }
LABEL_90:
          __break(1u);
          return result;
        }
        uint64_t v49 = *((void *)a2 + 3);
        uint64_t v50 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v49 && v50) {
          (*(void (**)(uint64_t, void))(*(void *)v49 + 16))(v49, 0);
        }
      }
      int v32 = 0;
LABEL_53:
      LOBYTE(v66) = 0;
      goto LABEL_54;
    }
    unint64_t v33 = v6;
    uint64_t v34 = 0;
  }
  unint64_t v6 = 0;
  unint64_t v5 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v36 = *((void *)a2 + 3);
  if (v36)
  {
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v34, v33);
      goto LABEL_7;
    }
    unint64_t v6 = 0;
    unint64_t v5 = 0;
  }
LABEL_8:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (unsigned char *)*((void *)a2 + 3);
  if (result && v6) {
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, unint64_t))(*(void *)result + 16))(result, v5);
  }
  unsigned char *v3 = 0;
  v3[32] = 0;
LABEL_59:
  if (!v3[32])
  {
    unint64_t v45 = *(void *)a2;
    uint64_t v46 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (unsigned char *)*((void *)a2 + 3);
    if (result)
    {
      if (v46) {
        return (unsigned char *)(*(uint64_t (**)(unsigned char *, unint64_t))(*(void *)result + 16))(result, v45);
      }
    }
  }
  return result;
}

void sub_1988C58F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, int a15, char a16)
{
  if (*(unsigned char *)(v16 + 32) && *(unsigned char *)(v16 + 24))
  {
    uint64_t v18 = *(unsigned int *)(v16 + 16);
    if (v18 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v18])(&a12, v16);
    }
    *(_DWORD *)(v16 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 8));
  IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::Encoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, a2 + 16);
  char v5 = *(unsigned char *)(a2 + 48);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 49);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 50));
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, (void *)a2);
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v9) = *(_DWORD *)(a2 + 8);
      a1[2] = v10;
    }
  }
  uint64_t result = IPC::ArgumentCoder<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>> const&>(a1, a2 + 16);
  unint64_t v13 = a1[2];
  if (v13 >= a1[1]
    || (*(unsigned char *)(*a1 + v13) = *(unsigned char *)(a2 + 48), a1[2] = v13 + 1, v13 + 1 >= a1[1])
    || (*(unsigned char *)(*a1 + v13 + 1) = *(unsigned char *)(a2 + 49), a1[2] = v13 + 2, v13 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v13 + 2) = *(unsigned char *)(a2 + 50);
    a1[2] = v13 + 3;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (IPC::Decoder *)a1;
  uint64_t v4 = (unsigned char *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  LOBYTE(v6) = v5;
  BOOL v7 = (unsigned __int8 *)*((void *)v2 + 1);
  uint64_t v8 = *(void *)v2;
  unint64_t v9 = ((*((void *)v2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v2;
  if ((unint64_t)v7 >= v9 && (unint64_t)&v7[-v9] > 3)
  {
    unint64_t v11 = (_DWORD *)(v8 + v9);
    *((void *)v2 + 2) = v11 + 1;
    if (!v8)
    {
      int v23 = v7;
      uint64_t v24 = 0;
      goto LABEL_32;
    }
    int v12 = 0;
    unsigned int v13 = *v11 & 0xFFFFFF00;
    int v14 = *v11;
    goto LABEL_8;
  }
  while (1)
  {
    int v23 = 0;
    uint64_t v24 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v25 = *((void *)v2 + 3);
    if (v25)
    {
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v25 + 16))(v25, v8, v7);
        uint64_t v24 = *(void *)v2;
        int v23 = (unsigned __int8 *)*((void *)v2 + 1);
      }
      else
      {
        int v23 = 0;
        uint64_t v24 = 0;
      }
    }
LABEL_32:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v26 = *((void *)v2 + 3);
    if (v26 && v23) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
    }
    unsigned int v13 = 0;
    int v14 = 0;
    int v12 = 1;
LABEL_8:
    IPC::Decoder::decode<std::optional<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>>(v43, v2);
    unsigned __int16 v15 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)v2);
    unsigned __int16 v16 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>((uint64_t *)v2);
    unint64_t v17 = *((void *)v2 + 1);
    uint64_t v18 = *(void *)v2;
    unint64_t v19 = *((void *)v2 + 2) - *(void *)v2;
    if (v17 <= v19)
    {
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v29 = *((void *)v2 + 3);
      if (v29)
      {
        if (v17)
        {
          (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
          uint64_t v28 = *(void *)v2;
          unint64_t v27 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v27 = 0;
          uint64_t v28 = 0;
        }
      }
      goto LABEL_35;
    }
    int v20 = (unsigned __int8 *)(v18 + v19);
    BOOL v7 = v20 + 1;
    *((void *)v2 + 2) = v20 + 1;
    if (!v18)
    {
      unint64_t v27 = v17;
      uint64_t v28 = 0;
LABEL_35:
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v30 = *((void *)v2 + 3);
      if (v30)
      {
        if (v27)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
          uint64_t v18 = *(void *)v2;
          unint64_t v17 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
        }
      }
      goto LABEL_36;
    }
    uint64_t v8 = *v20;
    if (v8 <= 1)
    {
      int v21 = 0;
      uint64_t v2 = (IPC::Decoder *)(v8 != 0);
      goto LABEL_12;
    }
LABEL_36:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = (unsigned char *)*((void *)v2 + 3);
    if (!result
      || !v17
      || (uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)result + 16))(result, v18),
          (uint64_t v8 = *(void *)v2) == 0))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 56) = 0;
      goto LABEL_25;
    }
    uint64_t v2 = 0;
    int v21 = 1;
LABEL_12:
    if ((_BYTE)v6)
    {
      int v31 = v4;
      if (!v12)
      {
        uint64_t v8 = v46;
        if (v46)
        {
          uint64_t v4 = v32;
          std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](v32, (uint64_t)v43);
          uint64_t v8 = v15;
          if (v15 > 0xFFu)
          {
            char v35 = v15;
            uint64_t v36 = v31;
            int v37 = v14 | v13;
            unint64_t v6 = v38;
            std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100](v38, (uint64_t)v32);
            char v41 = v35;
            uint64_t v8 = v16;
            if (v16 > 0xFFu)
            {
              LOBYTE(v42) = v16;
              if (!v21) {
                break;
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  HIBYTE(v42) = (_BYTE)v2;
  *(void *)a2 = v36;
  *(_DWORD *)(a2 + 8) = v37;
  uint64_t result = std::__optional_move_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 16), (uint64_t)v38);
  *(unsigned char *)(a2 + 48) = v41;
  *(_WORD *)(a2 + 49) = v42;
  *(unsigned char *)(a2 + 56) = 1;
  if (v40)
  {
    if (v39 != -1) {
      uint64_t result = (unsigned char *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v39])(v47, v38);
    }
    int v39 = -1;
  }
  if (v34 && v33 != -1) {
    uint64_t result = (unsigned char *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v33])(v47, v32);
  }
LABEL_25:
  if (v46 && v45 && v44 != -1) {
    return (unsigned char *)((uint64_t (*)(unsigned char **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v44])(&v36, v43);
  }
  return result;
}

void sub_1988C5ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,char a26,uint64_t a27,int a28,int a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  if ((_BYTE)a32 && a30 && a28 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[a28])(&a18, &a26);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 1));

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 2));
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v17 = v4;
    uint64_t v18 = 0;
  }
  else
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v19 = *((void *)a1 + 3);
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v5, v4);
        uint64_t v18 = *(void *)a1;
        unint64_t v17 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v20 = *((void *)a1 + 3);
  if (v20 && v17) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
  }
  uint64_t v10 = 0;
  int v9 = 1;
LABEL_8:
  uint64_t v11 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  char v13 = v12;
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  uint64_t v16 = *(void *)a1;
  if (!*(void *)a1)
  {
LABEL_15:
    *(unsigned char *)a2 = 0;
    goto LABEL_13;
  }
  if (v9 || !v13 || !v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(void *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 12) = BYTE4(v11);
  *(void *)(a2 + 13) = result << 24;
  LOBYTE(v16) = 1;
LABEL_13:
  *(unsigned char *)(a2 + 24) = v16;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 4));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
}

uint64_t *IPC::ArgumentCoder<WebKit::WebGPU::MultisampleState,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      unint64_t v3 = v14;
    }
  }
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v3) = *(unsigned char *)(a2 + 8);
    result[2] = v3 + 1;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::PipelineLayoutDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v17);
  unint64_t v5 = *((void *)a1 + 1);
  BOOL v6 = *(char **)a1;
  unint64_t v7 = *((void *)a1 + 2) - *(void *)a1;
  if (v5 <= v7)
  {
    unint64_t v12 = 0;
    unint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v13 = *((void *)a1 + 3);
    if (v13)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        unint64_t v9 = *(char **)a1;
        unint64_t v12 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v9 = 0;
      }
    }
    goto LABEL_9;
  }
  unint64_t v8 = &v6[v7];
  LODWORD(v9) = v8 + 1;
  *((void *)a1 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v12 = v5;
    unint64_t v9 = 0;
LABEL_9:
    unint64_t v5 = 0;
    BOOL v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v14 = *((void *)a1 + 3);
    if (v14)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v14 + 16))(v14, v9, v12);
        BOOL v6 = *(char **)a1;
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        BOOL v6 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v10 = *v8;
  if (v10 >= 2)
  {
LABEL_10:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v15 = *((void *)a1 + 3);
    if (v15 && v5) {
      (*(void (**)(uint64_t, char *))(*(void *)v15 + 16))(v15, v6);
    }
    goto LABEL_11;
  }
  if (v10)
  {
    IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a1, (uint64_t)v19);
    if (v20)
    {
      unsigned int v10 = 0;
      LODWORD(v9) = 0;
      uint64_t result = (WTF::StringImpl *)v19[0];
      uint64_t v4 = v19[1];
      goto LABEL_13;
    }
LABEL_11:
    BOOL v6 = *(char **)a1;
    unint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_27;
    }
    goto LABEL_12;
  }
  uint64_t result = 0;
  LODWORD(v9) = 1;
LABEL_13:
  while (*(void *)a1)
  {
    if (v18)
    {
      uint64_t v16 = v17;
      unint64_t v17 = 0;
      if (!v10)
      {
        *(void *)a2 = v16;
        if (v9)
        {
          *(unsigned char *)(a2 + 8) = 0;
          *(unsigned char *)(a2 + 24) = 0;
        }
        else
        {
          *(void *)(a2 + 8) = result;
          *(void *)(a2 + 16) = v4;
          *(unsigned char *)(a2 + 24) = 1;
        }
        *(unsigned char *)(a2 + 32) = 1;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_27:
    if (v5) {
      (*(void (**)(WTF::StringImpl *, char *))(*(void *)result + 16))(result, v6);
    }
    uint64_t result = 0;
LABEL_12:
    unsigned int v10 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (((v10 | v9) & 1) == 0 && result) {
    uint64_t result = (WTF::StringImpl *)WTF::fastFree(result, v6);
  }
LABEL_20:
  if (v18)
  {
    uint64_t result = v17;
    unint64_t v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C64C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 12));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::encode(void *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5++) = *(unsigned char *)(a2 + 8);
    a1[2] = v5;
  }
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 12);
      a1[2] = v11;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v27);
  __int16 v29 = 0;
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::operator>><unsigned char>(a1, &v29);
  uint64_t v5 = v29;
  if (HIBYTE(v29)) {
    BOOL v6 = v29 > 1uLL;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = v6;
  if (v7 == 1) {
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v8 = *((void *)a1 + 1);
    unint64_t v9 = *(WTF::StringImpl **)a1;
    unint64_t v10 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
    if (v8 < v10 || v8 - v10 <= 3) {
      break;
    }
    unint64_t v12 = (unsigned int *)((char *)v9 + v10);
    *((void *)a1 + 2) = v12 + 1;
    if (!v9)
    {
      unint64_t v18 = v8;
      uint64_t v19 = 0;
      goto LABEL_25;
    }
    int v13 = 0;
    unint64_t v14 = (unint64_t)*v12 << 32;
LABEL_15:
    if (v28)
    {
      uint64_t v15 = v27;
      unint64_t v27 = 0;
      if (!v7 && !v13)
      {
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v14 | v5;
        *(unsigned char *)(a2 + 16) = 1;
        return result;
      }
    }
    __break(1u);
LABEL_21:
    uint64_t v16 = *(WTF::StringImpl **)a1;
    uint64_t v17 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v17)
    {
      uint64_t v21 = v5;
      int v24 = v7;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v16);
      int v7 = v24;
      uint64_t v5 = v21;
    }
  }
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v20 = *((void *)a1 + 3);
  if (v20)
  {
    int v26 = v7;
    uint64_t v23 = v5;
    if (v8)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v20 + 16))(v20, v9, v8);
      uint64_t v19 = *(WTF::StringImpl **)a1;
      unint64_t v18 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v5 = v23;
    int v7 = v26;
  }
LABEL_25:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v18)
    {
      int v25 = v7;
      uint64_t v22 = v5;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v19);
      uint64_t v5 = v22;
      int v7 = v25;
      if (*(void *)a1)
      {
        unint64_t v14 = 0;
        int v13 = 1;
        goto LABEL_15;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (v28)
  {
    uint64_t result = v27;
    unint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C67F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13)
{
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(a1, (char *)(a2 + 24));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 28));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 32));

  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 33));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::encode(void *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (unsigned char *)(a2 + 24));
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 28);
      a1[2] = v11;
      unint64_t v5 = v11;
    }
  }
  if (v5 >= a1[1] || (*(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 32), a1[2] = v5 + 1, v5 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5 + 1) = *(unsigned char *)(a2 + 33);
    a1[2] = v5 + 2;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v76);
  unint64_t v6 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v7) {
    goto LABEL_29;
  }
  unint64_t v2 = v6;
  int v79 = 0;
  int v80 = 0;
  if (v6 >= 0x80000)
  {
    unint64_t v14 = 0;
    LODWORD(v3) = 0;
    while (1)
    {
      int v15 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>((uint64_t *)a1);
      int v78 = v15;
      if ((v15 & 0xFF0000) == 0) {
        break;
      }
      if (v3 == v80)
      {
        uint64_t v16 = (_WORD *)WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v3 + 1, (unint64_t)&v78);
        int v17 = HIDWORD(v80);
        unint64_t v14 = v79;
        *((_WORD *)v79 + HIDWORD(v80)) = *v16;
      }
      else
      {
        *((_WORD *)v14 + v3) = v15;
        int v17 = HIDWORD(v80);
      }
      uint64_t v3 = (v17 + 1);
      HIDWORD(v80) = v17 + 1;
      if (!--v2)
      {
        LODWORD(v2) = v80;
        if (v80 <= v3) {
          goto LABEL_81;
        }
        if (v17 == -1) {
          goto LABEL_79;
        }
        if ((v3 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1988C705CLL);
        }
        uint64_t v18 = WTF::fastMalloc((WTF *)(2 * v3));
        LODWORD(v80) = v3;
        int v79 = (WTF *)v18;
        if ((WTF *)v18 == v14)
        {
LABEL_79:
          int v79 = 0;
          LODWORD(v80) = 0;
        }
        else
        {
          uint64_t v19 = 0;
          do
          {
            *(_WORD *)(v18 + v19) = *(_WORD *)((char *)v14 + v19);
            v19 += 2;
          }
          while (2 * v3 != v19);
          LODWORD(v2) = v3;
          if (!v14)
          {
LABEL_81:
            BOOL v8 = v79;
            goto LABEL_12;
          }
        }
        WTF::fastFree(v14, v10);
        LODWORD(v2) = v80;
        LODWORD(v3) = HIDWORD(v80);
        goto LABEL_81;
      }
    }
    BOOL v8 = v79;
    if (v79)
    {
LABEL_28:
      int v79 = 0;
      LODWORD(v80) = 0;
      WTF::fastFree(v8, v10);
    }
LABEL_29:
    uint64_t v20 = *(char **)a1;
    unint64_t v21 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      goto LABEL_62;
    }
    goto LABEL_30;
  }
  if (v6)
  {
    BOOL v8 = (WTF *)WTF::fastMalloc((WTF *)(2 * v6));
    LODWORD(v3) = 0;
    LODWORD(v80) = v2;
    int v79 = v8;
    do
    {
      int v9 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>((uint64_t *)a1);
      int v78 = v9;
      if ((v9 & 0xFF0000) == 0) {
        goto LABEL_28;
      }
      if (v3 == v80)
      {
        unint64_t v11 = (_WORD *)WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v3 + 1, (unint64_t)&v78);
        int v12 = HIDWORD(v80);
        BOOL v8 = v79;
        *((_WORD *)v79 + HIDWORD(v80)) = *v11;
      }
      else
      {
        *((_WORD *)v8 + v3) = v9;
        int v12 = HIDWORD(v80);
      }
      LODWORD(v3) = v12 + 1;
      HIDWORD(v80) = v12 + 1;
      --v2;
    }
    while (v2);
    LODWORD(v2) = v80;
  }
  else
  {
    BOOL v8 = 0;
    LODWORD(v3) = 0;
  }
LABEL_12:
  for (int i = 0; ; int i = 1)
  {
    uint64_t result = IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>((uint64_t *)a1);
    unint64_t v21 = *((void *)a1 + 1);
    uint64_t v20 = *(char **)a1;
    unint64_t v23 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
    if (v21 >= v23 && v21 - v23 > 3)
    {
      int v25 = &v20[v23];
      uint64_t v26 = (uint64_t)&v20[v23 + 4];
      *((void *)a1 + 2) = v26;
      if (v20)
      {
        int v27 = 0;
        uint64_t v28 = *(unsigned int *)v25;
        goto LABEL_38;
      }
      unint64_t v40 = v21;
      char v41 = 0;
    }
    else
    {
      unint64_t v40 = 0;
      char v41 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v42 = *((void *)a1 + 3);
      if (v42)
      {
        unsigned int v73 = result;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
          char v41 = *(char **)a1;
          unint64_t v40 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v40 = 0;
          char v41 = 0;
        }
        uint64_t result = v73;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v28 = *((void *)a1 + 3);
    if (!v28)
    {
      unint64_t v40 = 0;
      uint64_t v20 = 0;
      int v27 = 1;
      goto LABEL_67;
    }
    unsigned int v70 = result;
    if (!v40)
    {
      uint64_t v28 = 0;
      uint64_t v20 = 0;
      int v27 = 1;
      uint64_t result = result;
LABEL_67:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v30 = (unsigned __int8 *)*((void *)a1 + 3);
      if (v30)
      {
        int v65 = v27;
        unsigned int v72 = result;
        uint64_t v59 = v28;
        if (v40)
        {
          (*(void (**)(unsigned __int8 *, char *, unint64_t))(*(void *)v30 + 16))(v30, v20, v40);
          LODWORD(v30) = 0;
          uint64_t v20 = *(char **)a1;
          unint64_t v21 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v21 = 0;
          uint64_t v20 = 0;
          LODWORD(v30) = 0;
        }
        int v27 = v65;
        uint64_t result = v72;
        uint64_t v28 = v59;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v20 = 0;
      }
      goto LABEL_69;
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v28 + 16))(v28, v41, v40);
    uint64_t v28 = 0;
    uint64_t v20 = *(char **)a1;
    unint64_t v21 = *((void *)a1 + 1);
    int v27 = 1;
    uint64_t v26 = *((void *)a1 + 2);
    uint64_t result = v70;
LABEL_38:
    unint64_t v29 = v26 - (void)v20;
    if (v21 <= v29)
    {
      int v66 = v27;
      unsigned int v74 = result;
      uint64_t v60 = v28;
      unint64_t v40 = 0;
      uint64_t v47 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v47 && v21)
      {
        (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
        uint64_t v20 = *(char **)a1;
        unint64_t v40 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v20 = 0;
      }
      int v27 = v66;
      uint64_t result = v74;
      uint64_t v28 = v60;
      goto LABEL_67;
    }
    uint64_t v30 = (unsigned __int8 *)&v20[v29];
    uint64_t v31 = (uint64_t)&v20[v29 + 1];
    *((void *)a1 + 2) = v31;
    if (!v20)
    {
      unint64_t v40 = v21;
      goto LABEL_67;
    }
    LODWORD(v30) = *v30;
    if (v30 < 2)
    {
      int v32 = 0;
      __int16 v33 = 1;
      goto LABEL_42;
    }
LABEL_69:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t v43 = *((void *)a1 + 3);
    if (!v43)
    {
      __int16 v33 = 0;
      uint64_t v20 = 0;
      int v32 = 1;
      goto LABEL_71;
    }
    int v53 = (int)v30;
    int v63 = v27;
    unsigned int v69 = result;
    uint64_t v57 = v28;
    if (!v21)
    {
      __int16 v33 = 0;
      unint64_t v43 = 0;
      uint64_t v20 = 0;
      int v32 = 1;
      uint64_t result = result;
      goto LABEL_71;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v43 + 16))(v43, v20);
    __int16 v33 = 0;
    uint64_t v20 = *(char **)a1;
    unint64_t v21 = *((void *)a1 + 1);
    int v32 = 1;
    uint64_t v31 = *((void *)a1 + 2);
    int v27 = v63;
    uint64_t result = v69;
    uint64_t v28 = v57;
    LODWORD(v30) = v53;
LABEL_42:
    if (!v30) {
      __int16 v33 = 0;
    }
    unint64_t v34 = v31 - (void)v20;
    if (v21 <= v34) {
      break;
    }
    char v35 = &v20[v34];
    *((void *)a1 + 2) = v35 + 1;
    if (!v20)
    {
      unint64_t v43 = v21;
      goto LABEL_71;
    }
    unsigned int v36 = *v35;
    if (v36 > 1) {
      goto LABEL_73;
    }
    int v37 = 0;
    __int16 v38 = (v36 != 0) << 8;
LABEL_48:
    if (v77)
    {
      int v39 = v76;
      char v76 = 0;
      if (!i && (result & 0xFF0000) != 0 && !v27 && !v32 && !v37)
      {
        *(void *)a2 = v39;
        *(void *)(a2 + 8) = v8;
        *(_DWORD *)(a2 + 16) = v2;
        *(_DWORD *)(a2 + 20) = v3;
        *(void *)(a2 + 24) = (unsigned __int16)result | (unint64_t)(v28 << 32);
        *(_WORD *)(a2 + 32) = v38 | v33;
        *(unsigned char *)(a2 + 40) = 1;
        goto LABEL_55;
      }
    }
    __break(1u);
LABEL_62:
    if (v21) {
      (*(void (**)(uint64_t, char *))(*(void *)result + 16))(result, v20);
    }
LABEL_30:
    BOOL v8 = 0;
  }
  __int16 v51 = v33;
  int v55 = v32;
  int v67 = v27;
  unsigned int v75 = result;
  uint64_t v61 = v28;
  unint64_t v43 = 0;
  uint64_t v48 = *((void *)a1 + 3);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if (v48 && v21)
  {
    (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
    uint64_t v20 = *(char **)a1;
    unint64_t v43 = *((void *)a1 + 1);
  }
  else
  {
    uint64_t v20 = 0;
  }
  int v27 = v67;
  uint64_t result = v75;
  uint64_t v28 = v61;
  __int16 v33 = v51;
  int v32 = v55;
LABEL_71:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v44 = *((void *)a1 + 3);
  if (v44)
  {
    __int16 v50 = v33;
    int v54 = v32;
    int v64 = v27;
    unsigned int v71 = result;
    uint64_t v58 = v28;
    if (v43)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v44 + 16))(v44, v20, v43);
      uint64_t v20 = *(char **)a1;
      unint64_t v21 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v21 = 0;
      uint64_t v20 = 0;
    }
    int v27 = v64;
    uint64_t result = v71;
    uint64_t v28 = v58;
    __int16 v33 = v50;
    int v32 = v54;
  }
  else
  {
    unint64_t v21 = 0;
    uint64_t v20 = 0;
  }
LABEL_73:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v45 = *((void *)a1 + 3);
  if (v45)
  {
    if (v21)
    {
      __int16 v49 = v33;
      int v52 = v32;
      int v62 = v27;
      unsigned int v68 = result;
      uint64_t v56 = v28;
      (*(void (**)(uint64_t, char *))(*(void *)v45 + 16))(v45, v20);
      int v27 = v62;
      uint64_t result = v68;
      uint64_t v28 = v56;
      __int16 v33 = v49;
      int v32 = v52;
      if (*(void *)a1)
      {
        __int16 v38 = 0;
        int v37 = 1;
        goto LABEL_48;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v8) {
    char v46 = i;
  }
  else {
    char v46 = 1;
  }
  if ((v46 & 1) == 0) {
    uint64_t result = WTF::fastFree(v8, v20);
  }
LABEL_55:
  if (v77)
  {
    uint64_t result = (uint64_t)v76;
    char v76 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C7070(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14, WTF *a15)
{
  if (v15) {
    char v18 = v16;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) == 0) {
    WTF::fastFree(v15, a2);
  }
  if (a13 && a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::WebGPU::TextureFormat>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::WebGPU::TextureFormat>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(a1, (uint64_t)(a2 + 3));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(a1, (uint64_t)(a2 + 10));

  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, (uint64_t)(a2 + 13));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::encode(uint64_t *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, a2);
  IPC::VectorArgumentCoder<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::RenderPassDepthStencilAttachment> const&>(a1, (uint64_t)(a2 + 3));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, (uint64_t)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::ComputePassTimestampWrites>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::ComputePassTimestampWrites> const&>(a1, (uint64_t)(a2 + 10));

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, (uint64_t)(a2 + 13));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v139);
  unint64_t v7 = IPC::Decoder::decode<unsigned long long>(a1);
  if ((_BYTE)v8)
  {
    unint64_t v9 = v7;
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    if (v7 < 0x2AAA)
    {
      if (v7)
      {
        LODWORD(v130) = 96 * (int)v7 / 0x60u;
        uint64_t v129 = WTF::fastMalloc((WTF *)(96 * v7));
        LODWORD(v2) = 96;
        do
        {
          IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)v120, (uint64_t *)a1);
          if (!v125[8]) {
            goto LABEL_30;
          }
          if (HIDWORD(v130) == v130)
          {
            WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)&v129, (unint64_t)v120);
          }
          else
          {
            std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](v129 + 96 * HIDWORD(v130), (long long *)v120);
            ++HIDWORD(v130);
          }
          std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120);
          --v9;
        }
        while (v9);
        uint64_t v10 = v129;
        unsigned int v12 = v130;
        unsigned int v11 = HIDWORD(v130);
      }
      else
      {
        unsigned int v11 = 0;
        unsigned int v12 = 0;
        uint64_t v10 = 0;
      }
      uint64_t v129 = 0;
      uint64_t v136 = (WTF *)v10;
LABEL_14:
      uint64_t v130 = 0;
      unint64_t v137 = __PAIR64__(v11, v12);
      char v138 = 1;
      WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v8);
      goto LABEL_32;
    }
    LODWORD(v2) = 96;
    while (1)
    {
      IPC::Decoder::decode<std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)v120, (uint64_t *)a1);
      if (!v125[8]) {
        break;
      }
      if (HIDWORD(v130) == v130)
      {
        WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>((uint64_t)&v129, (unint64_t)v120);
      }
      else
      {
        std::__optional_move_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_move_base[abi:sn180100](v129 + 96 * HIDWORD(v130), (long long *)v120);
        ++HIDWORD(v130);
      }
      std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120);
      if (!--v9)
      {
        unsigned int v13 = HIDWORD(v130);
        unint64_t v14 = (WTF *)v129;
        if (v130 > HIDWORD(v130))
        {
          int v15 = (WTF *)v129;
          if (HIDWORD(v130))
          {
            if (HIDWORD(v130) >= 0x2AAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x1988C8088);
            }
            LODWORD(v2) = 96 * HIDWORD(v130);
            uint64_t v16 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v130)));
            LODWORD(v130) = 96 * v13 / 0x60;
            uint64_t v129 = v16;
            int v15 = v14;
            if ((WTF *)v16 != v14)
            {
              WTF::VectorMover<false,std::optional<WebKit::WebGPU::RenderPassColorAttachment>>::move((uint64_t)v14, (uint64_t)v14 + 96 * v13, v16);
              int v15 = (WTF *)v129;
            }
          }
          if (v14)
          {
            if (v15 == v14)
            {
              uint64_t v129 = 0;
              LODWORD(v130) = 0;
            }
            WTF::fastFree(v14, v8);
            unint64_t v14 = (WTF *)v129;
          }
          else
          {
            unint64_t v14 = v15;
          }
        }
        uint64_t v129 = 0;
        uint64_t v136 = v14;
        unsigned int v12 = v130;
        unsigned int v11 = HIDWORD(v130);
        goto LABEL_14;
      }
    }
LABEL_30:
    LOBYTE(v136) = 0;
    char v138 = 0;
    std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v120);
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v129, v17);
  }
  else
  {
    LOBYTE(v136) = 0;
    char v138 = 0;
  }
  char v18 = *(char **)a1;
  unint64_t v19 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result) {
    goto LABEL_100;
  }
  while (1)
  {
LABEL_32:
    unint64_t v21 = *((void *)a1 + 1);
    uint64_t v22 = *(char **)a1;
    unint64_t v23 = *((void *)a1 + 2) - *(void *)a1;
    if (v21 <= v23)
    {
      unint64_t v75 = 0;
      char v76 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v77 = *((void *)a1 + 3);
      if (v77)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(void *)v77 + 16))(v77);
          char v76 = *(char **)a1;
          unint64_t v75 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v75 = 0;
          char v76 = 0;
        }
      }
      goto LABEL_103;
    }
    int v24 = &v22[v23];
    *((void *)a1 + 2) = v24 + 1;
    if (!v22)
    {
      unint64_t v75 = v21;
      char v76 = 0;
LABEL_103:
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v78 = *((void *)a1 + 3);
      if (v78)
      {
        if (v75)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v78 + 16))(v78, v76, v75);
          uint64_t v22 = *(char **)a1;
          unint64_t v21 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v21 = 0;
          uint64_t v22 = 0;
        }
      }
LABEL_104:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v79 = *((void *)a1 + 3);
      if (v79 && v21) {
LABEL_159:
      }
        (*(void (**)(uint64_t, char *))(*(void *)v79 + 16))(v79, v22);
LABEL_125:
      uint64_t v97 = *(char **)a1;
      uint64_t v98 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v99 = *((void *)a1 + 3);
      if (v99 && v98) {
        (*(void (**)(uint64_t, char *))(*(void *)v99 + 16))(v99, v97);
      }
      LOBYTE(v26) = 0;
      unint64_t v48 = 0;
      int v116 = 1;
      goto LABEL_63;
    }
    unsigned int v25 = *v24;
    if (v25 >= 2) {
      goto LABEL_104;
    }
    if (!v25)
    {
      int v116 = 0;
      char v113 = 0;
      LOBYTE(v26) = 0;
      unint64_t v48 = 0;
      goto LABEL_63;
    }
    uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
    char v28 = v27;
    uint64_t v3 = IPC::Decoder::decode<float>(a1);
    unsigned int v4 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>((uint64_t *)a1);
    unsigned int v119 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>((uint64_t *)a1);
    unint64_t v29 = *((void *)a1 + 1);
    uint64_t v30 = *(char **)a1;
    unint64_t v31 = *((void *)a1 + 2) - *(void *)a1;
    if (v29 <= v31)
    {
      unint64_t v85 = 0;
      int v86 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v87 = *((void *)a1 + 3);
      if (v87)
      {
        if (v29)
        {
          (*(void (**)(uint64_t))(*(void *)v87 + 16))(v87);
          int v86 = *(char **)a1;
          unint64_t v85 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v85 = 0;
          int v86 = 0;
        }
      }
      goto LABEL_114;
    }
    int v32 = &v30[v31];
    *((void *)a1 + 2) = v32 + 1;
    if (!v30)
    {
      unint64_t v85 = v29;
      int v86 = 0;
LABEL_114:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v88 = *((void *)a1 + 3);
      if (v88 && v85)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v88 + 16))(v88, v86, v85);
        unsigned int v33 = 0;
        uint64_t v30 = *(char **)a1;
        unint64_t v29 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v29 = 0;
        uint64_t v30 = 0;
        unsigned int v33 = 0;
      }
      goto LABEL_116;
    }
    unsigned int v33 = *v32;
    if (v33 < 2)
    {
      int v34 = 0;
      char v35 = 1;
LABEL_40:
      unsigned int v36 = v30;
      goto LABEL_41;
    }
LABEL_116:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v89 = *((void *)a1 + 3);
    if (v89)
    {
      if (v29)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v89 + 16))(v89, v30);
        char v35 = 0;
        uint64_t v30 = *(char **)a1;
        unint64_t v29 = *((void *)a1 + 1);
        int v34 = 1;
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v29 = 0;
    }
    unsigned int v36 = 0;
    char v35 = 0;
    int v34 = 1;
LABEL_41:
    char v37 = v33 ? v35 : 0;
    unint64_t v38 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v36;
    char v112 = v37;
    if (v29 < v38 || v29 - v38 <= 3)
    {
      unint64_t v40 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v90 = *((void *)a1 + 3);
      if (v90)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v90 + 16))(v90, v36);
          unint64_t v40 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v40 = 0;
        }
      }
    }
    else
    {
      int v39 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *((void *)a1 + 2) = v39 + 1;
      unint64_t v40 = v29;
      if (v36)
      {
        LODWORD(v2) = 0;
        unsigned int v41 = *v39 & 0xFFFFFF00;
        int v42 = *v39;
        goto LABEL_48;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v91 = *((void *)a1 + 3);
    if (v91 && v40) {
      (*(void (**)(uint64_t))(*(void *)v91 + 16))(v91);
    }
    unsigned int v41 = 0;
    int v42 = 0;
    LODWORD(v2) = 1;
LABEL_48:
    unsigned int v118 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>((uint64_t *)a1);
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::WebGPU::LoadOp>>((uint64_t *)a1);
    unsigned int v117 = result;
    unint64_t v19 = *((void *)a1 + 1);
    char v18 = *(char **)a1;
    unint64_t v43 = *((void *)a1 + 2) - *(void *)a1;
    if (v19 <= v43)
    {
      unint64_t v92 = 0;
      unsigned int v93 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v94 = *((void *)a1 + 3);
      if (v94)
      {
        if (v19)
        {
          (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
          unsigned int v93 = *(char **)a1;
          unint64_t v92 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v92 = 0;
          unsigned int v93 = 0;
        }
      }
      goto LABEL_123;
    }
    uint64_t v44 = &v18[v43];
    *((void *)a1 + 2) = v44 + 1;
    if (!v18)
    {
      unint64_t v92 = v19;
      unsigned int v93 = 0;
LABEL_123:
      unint64_t v19 = 0;
      char v18 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v95 = *((void *)a1 + 3);
      if (v95)
      {
        if (v92)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v95 + 16))(v95, v93, v92);
          char v18 = *(char **)a1;
          unint64_t v19 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v19 = 0;
          char v18 = 0;
        }
      }
      goto LABEL_124;
    }
    unsigned int v45 = *v44;
    if (v45 <= 1)
    {
      int v46 = 0;
      BOOL v47 = v45 != 0;
      goto LABEL_52;
    }
LABEL_124:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v96 = *((void *)a1 + 3);
    if (!v96 || !v19) {
      goto LABEL_125;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v96 + 16))(v96, v18);
    if (!*(void *)a1)
    {
      uint64_t v107 = *((void *)a1 + 1);
      uint64_t v79 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v79 && v107)
      {
        uint64_t v22 = 0;
        goto LABEL_159;
      }
      goto LABEL_125;
    }
    BOOL v47 = 0;
    int v46 = 1;
LABEL_52:
    if (!v28) {
      goto LABEL_99;
    }
    if ((v3 & 0xFF00000000) == 0) {
      goto LABEL_99;
    }
    BOOL v111 = v47;
    if (!HIWORD(v4) || !HIWORD(v119) || v34 || v2 || !HIWORD(v118) || !HIWORD(v117) || v46) {
      goto LABEL_99;
    }
    int v116 = 0;
    int v110 = v42 | v41;
    unint64_t v48 = v26 & 0xFFFFFFFFFFFFFF00;
    char v113 = 1;
LABEL_63:
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v129, (uint64_t *)a1);
    unint64_t v49 = *((void *)a1 + 1);
    __int16 v50 = *(char **)a1;
    unint64_t v51 = *((void *)a1 + 2) - *(void *)a1;
    __int16 v115 = v4;
    unint64_t v114 = v48;
    if (v49 <= v51)
    {
      unint64_t v80 = 0;
      int v81 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v82 = *((void *)a1 + 3);
      if (v82)
      {
        if (v49)
        {
          (*(void (**)(uint64_t))(*(void *)v82 + 16))(v82);
          int v81 = *(char **)a1;
          unint64_t v80 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v80 = 0;
          int v81 = 0;
        }
      }
      goto LABEL_108;
    }
    int v52 = &v50[v51];
    *((void *)a1 + 2) = v52 + 1;
    if (!v50)
    {
      unint64_t v80 = v49;
      int v81 = 0;
LABEL_108:
      int v54 = v3;
      unsigned __int8 v55 = v26;
      unint64_t v49 = 0;
      __int16 v50 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v83 = *((void *)a1 + 3);
      if (v83)
      {
        if (v80)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v83 + 16))(v83, v81, v80);
          __int16 v50 = *(char **)a1;
          unint64_t v49 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v49 = 0;
          __int16 v50 = 0;
        }
      }
LABEL_109:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v84 = *((void *)a1 + 3);
      if (v84 && v49) {
LABEL_175:
      }
        (*(void (**)(uint64_t, char *))(*(void *)v84 + 16))(v84, v50);
LABEL_132:
      char v104 = *(char **)a1;
      uint64_t v105 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v106 = *((void *)a1 + 3);
      if (v106 && v105) {
        (*(void (**)(uint64_t, char *))(*(void *)v106 + 16))(v106, v104);
      }
      unint64_t v69 = 0;
      LOBYTE(v56) = 0;
      int v68 = 1;
      goto LABEL_80;
    }
    unsigned int v53 = *v52;
    int v54 = v3;
    unsigned __int8 v55 = v26;
    if (v53 >= 2) {
      goto LABEL_109;
    }
    if (!v53)
    {
      unint64_t v69 = 0;
      LOBYTE(v56) = 0;
      int v68 = 0;
      LOWORD(v4) = 0;
      goto LABEL_80;
    }
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
    uint64_t v56 = result;
    unint64_t v19 = *((void *)a1 + 1);
    unint64_t v57 = *(void *)a1;
    unint64_t v58 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
    if (v19 < v58 || v19 - v58 <= 3)
    {
      unint64_t v63 = 0;
      uint64_t v100 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v101 = *((void *)a1 + 3);
      if (v101)
      {
        uint64_t v109 = v18;
        if (v19)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v101 + 16))(v101, v57);
          char v18 = v109;
          uint64_t v100 = *(char **)a1;
          unint64_t v63 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v63 = 0;
          uint64_t v100 = 0;
        }
      }
    }
    else
    {
      uint64_t v59 = (int *)(v57 + v58);
      *((void *)a1 + 2) = v59 + 1;
      if (v57)
      {
        int v60 = 0;
        int v61 = *v59;
        unsigned int v4 = v61 & 0xFFFFFF00;
        int v62 = v61;
        unint64_t v63 = v57;
        goto LABEL_71;
      }
      unint64_t v63 = v19;
      uint64_t v100 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result)
    {
      unint64_t v2 = v18;
      if (v63)
      {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *, unint64_t))(*(void *)result + 16))(result, v100, v63);
        char v18 = v2;
        unsigned int v4 = 0;
        int v62 = 0;
        unint64_t v63 = *(void *)a1;
        unint64_t v19 = *((void *)a1 + 1);
        int v60 = 1;
        unint64_t v57 = *(void *)a1;
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v57 = 0;
        unsigned int v4 = 0;
        int v62 = 0;
        int v60 = 1;
      }
    }
    else
    {
      unint64_t v63 = 0;
      unint64_t v19 = 0;
      unint64_t v57 = 0;
      unsigned int v4 = 0;
      int v62 = 0;
      int v60 = 1;
    }
LABEL_71:
    unint64_t v64 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - v57;
    if (v19 < v64 || v19 - v64 <= 3)
    {
      unint64_t v66 = 0;
      unint64_t v63 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v102 = *((void *)a1 + 3);
      if (v102)
      {
        unint64_t v2 = v18;
        if (v19)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v102 + 16))(v102, v57);
          char v18 = v2;
          unint64_t v63 = *(void *)a1;
          unint64_t v66 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v66 = 0;
          unint64_t v63 = 0;
        }
      }
    }
    else
    {
      int v65 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *((void *)a1 + 2) = v65 + 1;
      unint64_t v66 = v19;
      if (v57)
      {
        int v67 = 0;
        LODWORD(v3) = *v65;
        goto LABEL_75;
      }
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v103 = *((void *)a1 + 3);
    if (!v103 || !v66) {
      goto LABEL_132;
    }
    unint64_t v2 = v18;
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v103 + 16))(v103, v63, v66);
    if (!*(void *)a1)
    {
      uint64_t v108 = *((void *)a1 + 1);
      uint64_t v84 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v84 && v108)
      {
        __int16 v50 = 0;
        goto LABEL_175;
      }
      goto LABEL_132;
    }
    LODWORD(v3) = 0;
    int v67 = 1;
    char v18 = v2;
LABEL_75:
    if (!(_BYTE)v18 || v60 || v67) {
      goto LABEL_99;
    }
    int v68 = 0;
    LODWORD(v2) = v62 | v4;
    unint64_t v69 = (unint64_t)v56 & 0xFFFFFFFFFFFFFF00;
    LOWORD(v4) = 1;
LABEL_80:
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v126);
    if (!*(void *)a1)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 120) = 0;
      goto LABEL_91;
    }
    if (v140)
    {
      unsigned int v70 = v139;
      uint64_t v139 = 0;
      if (v138)
      {
        unsigned int v71 = v136;
        unint64_t v72 = v137;
        uint64_t v136 = 0;
        unint64_t v137 = 0;
        if (!v116)
        {
          *(void *)&long long v121 = v114 | v55;
          DWORD2(v121) = v54;
          WORD6(v121) = v115;
          HIWORD(v121) = v119;
          LOBYTE(v122) = v112;
          *(_WORD *)((char *)&v122 + 1) = v134;
          BYTE3(v122) = v135;
          DWORD1(v122) = v110;
          WORD4(v122) = v118;
          WORD5(v122) = v117;
          BYTE12(v122) = v111;
          *(_WORD *)((char *)&v122 + 13) = v132;
          HIBYTE(v122) = v133;
          LOBYTE(v123) = v113;
          if (v131)
          {
            *((void *)&v123 + 1) = v129;
            LOBYTE(v124) = v130;
            if (!v68)
            {
              *((void *)&v124 + 1) = v56 | v69;
              *(_DWORD *)unint64_t v125 = v2;
              *(_DWORD *)&v125[4] = v3;
              v125[8] = v4;
              if (v128) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_99:
    __break(1u);
LABEL_100:
    if (v19) {
      (*(void (**)(WTF::StringImpl *, char *))(*(void *)result + 16))(result, v18);
    }
  }
  *(void *)(a2 + 16) = v72;
  long long v73 = v124;
  *(_OWORD *)(a2 + 56) = v123;
  *(_OWORD *)(a2 + 72) = v73;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)v125;
  long long v74 = v122;
  *(_OWORD *)(a2 + 24) = v121;
  *(void *)&v125[16] = v126;
  v125[24] = v127;
  v120[0] = 0;
  v120[1] = 0;
  *(void *)a2 = v70;
  *(void *)(a2 + 8) = v71;
  v120[2] = 0;
  *(_OWORD *)(a2 + 40) = v74;
  *(_OWORD *)(a2 + 97) = *(_OWORD *)&v125[9];
  *(unsigned char *)(a2 + 120) = 1;
  WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v120[1], v18);
  uint64_t result = v120[0];
  v120[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_91:
  if (v138) {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v136, v18);
  }
  if (v140)
  {
    uint64_t result = v139;
    uint64_t v139 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988C80A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__optional_destruct_base<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7 - 160, v9);
  if (*(unsigned char *)(v7 - 96))
  {
    unsigned int v11 = *(WTF::StringImpl **)(v7 - 104);
    *(void *)(v7 - 104) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(unsigned char *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *a2;
        uint64_t v11 = a2[1];
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_10;
  }
  BOOL v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
    }
    goto LABEL_12;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    result[8] = 0;
    goto LABEL_8;
  }
  uint64_t result = (unsigned char *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v10)
  {
    *(void *)uint64_t v3 = result;
    v3[8] = 1;
LABEL_8:
    v3[16] = 1;
    return result;
  }
LABEL_12:
  unsigned char *v3 = 0;
  v3[16] = 0;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unsigned char *)a2[3];
  if (result && v16)
  {
    int v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v17();
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::WebGPU::VertexState,void>::encode(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(a1, (char *)(a2 + 72));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::MultisampleState> const&>(a1, a2 + 128);

  return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::FragmentState> const&>(a1, a2 + 144);
}

IPC::Decoder *IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::encode(WTF *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, (void *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::WebGPU::VertexState,void>::encode(a1, (void *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::PrimitiveState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::PrimitiveState> const&>(a1, (unsigned char *)(a2 + 72));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::DepthStencilState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::DepthStencilState> const&>(a1, a2 + 80);
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::MultisampleState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::MultisampleState> const&>((uint64_t *)a1, a2 + 128);

  return IPC::ArgumentCoder<std::optional<WebKit::WebGPU::FragmentState>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::WebGPU::FragmentState> const&>(a1, a2 + 144);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v301);
  uint64_t v263 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v264 = v6;
  unint64_t v7 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v9 = v8;
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v308);
  IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v303, a1);
  unint64_t v10 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v11)
  {
    LOBYTE(v315) = 0;
    char v317 = 0;
    goto LABEL_72;
  }
  unint64_t v12 = v10;
  char v282 = 0;
  char v283 = 0;
  if (v10 < 0x6666)
  {
    if (v10)
    {
      LODWORD(v283) = 40 * (int)v10 / 0x28u;
      char v282 = (WTF *)WTF::fastMalloc((WTF *)(40 * v10));
      int v2 = 40;
      int v3 = 1;
      do
      {
        IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>((WTF *)v272, (unint64_t *)a1);
        int v13 = v275;
        if ((_BYTE)v275)
        {
          if (HIDWORD(v283) == v283)
          {
            WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>((uint64_t)&v282, (unint64_t)v272);
          }
          else
          {
            uint64_t v14 = (char *)v282 + 40 * HIDWORD(v283);
            *uint64_t v14 = 0;
            v14[32] = 0;
            if ((_BYTE)v274)
            {
              uint64_t v15 = *(void *)v272;
              v14[8] = v272[8];
              *(void *)uint64_t v14 = v15;
              *((void *)v14 + 2) = 0;
              *((void *)v14 + 3) = 0;
              uint64_t v16 = *(void *)&v272[16];
              *(void *)&v272[16] = 0;
              *((void *)v14 + 2) = v16;
              *((_DWORD *)v14 + 6) = v273;
              LODWORD(v16) = HIDWORD(v273);
              HIDWORD(v273) = 0;
              *((_DWORD *)v14 + 7) = v16;
              v14[32] = 1;
            }
            ++HIDWORD(v283);
          }
        }
        if ((_BYTE)v275) {
          BOOL v17 = v274 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (!v17)
        {
          char v18 = *(WTF **)&v272[16];
          if (*(void *)&v272[16])
          {
            *(void *)&v272[16] = 0;
            LODWORD(v273) = 0;
            WTF::fastFree(v18, v11);
          }
        }
        if (!v13) {
          goto LABEL_71;
        }
        --v12;
      }
      while (v12);
      char v317 = 0;
      unint64_t v19 = v282;
      int v2 = (int)v283;
      int v3 = HIDWORD(v283);
    }
    else
    {
      int v3 = 0;
      int v2 = 0;
      unint64_t v19 = 0;
    }
    char v282 = 0;
    char v283 = 0;
    char v315 = v19;
    goto LABEL_22;
  }
  int v2 = 40;
  int v3 = 1;
  do
  {
    IPC::Decoder::decode<std::optional<WebKit::WebGPU::VertexBufferLayout>>((WTF *)v272, (unint64_t *)a1);
    int v34 = v275;
    if ((_BYTE)v275)
    {
      if (HIDWORD(v283) == v283)
      {
        WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>((uint64_t)&v282, (unint64_t)v272);
      }
      else
      {
        char v35 = (char *)v282 + 40 * HIDWORD(v283);
        *char v35 = 0;
        v35[32] = 0;
        if ((_BYTE)v274)
        {
          uint64_t v36 = *(void *)v272;
          v35[8] = v272[8];
          *(void *)char v35 = v36;
          *((void *)v35 + 2) = 0;
          *((void *)v35 + 3) = 0;
          uint64_t v37 = *(void *)&v272[16];
          *(void *)&v272[16] = 0;
          *((void *)v35 + 2) = v37;
          *((_DWORD *)v35 + 6) = v273;
          LODWORD(v37) = HIDWORD(v273);
          HIDWORD(v273) = 0;
          *((_DWORD *)v35 + 7) = v37;
          v35[32] = 1;
        }
        ++HIDWORD(v283);
      }
    }
    if ((_BYTE)v275) {
      BOOL v38 = v274 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (!v38)
    {
      int v39 = *(WTF **)&v272[16];
      if (*(void *)&v272[16])
      {
        *(void *)&v272[16] = 0;
        LODWORD(v273) = 0;
        WTF::fastFree(v39, v11);
      }
    }
    if (!v34)
    {
LABEL_71:
      LOBYTE(v315) = 0;
      char v317 = 0;
      WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v282, v11);
LABEL_72:
      uint64_t v20 = *(WTF::StringImpl **)a1;
      uint64_t v45 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v33 = *((void *)a1 + 3);
      if (!v33
        || !v45
        || (LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v20),
            !*(void *)a1))
      {
        LOBYTE(v293) = 0;
        char v300 = 0;
        int v32 = 1;
        goto LABEL_74;
      }
      int v21 = 1;
LABEL_24:
      if (v9)
      {
        char v282 = v7;
        if (v310)
        {
          LOBYTE(v283) = 0;
          char v284 = 0;
          if ((_BYTE)v309)
          {
            uint64_t v22 = v308;
            char v308 = 0;
            char v283 = v22;
            char v284 = 1;
          }
          if (v305)
          {
            uint64_t v23 = v303;
            int v24 = v304;
            uint64_t v303 = 0;
            char v304 = 0;
            *(void *)unint64_t v272 = v7;
            v272[8] = 0;
            v272[16] = 0;
            if ((_BYTE)v309)
            {
              unsigned int v25 = v283;
              char v283 = 0;
              *(void *)&v272[8] = v25;
              v272[16] = 1;
            }
            int v285 = 0;
            uint64_t v286 = 0;
            if (!v21)
            {
              uint64_t v26 = v315;
              char v315 = 0;
              unint64_t v316 = 0;
              unsigned __int8 v293 = v7;
              LOBYTE(v294) = 0;
              char v295 = 0;
              if ((_BYTE)v309)
              {
                char v27 = *(WTF::StringImpl **)&v272[8];
                *(void *)&v272[8] = 0;
                char v294 = v27;
                char v295 = 1;
              }
              unint64_t v273 = 0;
              char v296 = (WTF *)v23;
              uint64_t v274 = 0;
              unint64_t v297 = (unint64_t)v24;
              unint64_t v275 = 0;
              char v298 = v26;
              unint64_t v276 = 0;
              unint64_t v299 = __PAIR64__(v3, v2);
              char v300 = 1;
              WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v275, v20);
              WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v273, v28);
              if (v272[16])
              {
                uint64_t v30 = *(WTF::StringImpl **)&v272[8];
                *(void *)&v272[8] = 0;
                if (v30)
                {
                  if (*(_DWORD *)v30 == 2) {
                    WTF::StringImpl::destroy(v30, v29);
                  }
                  else {
                    *(_DWORD *)v30 -= 2;
                  }
                }
              }
              WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v285, v29);
              if (v284)
              {
                unint64_t v31 = v283;
                char v283 = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, v20);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              int v32 = 0;
              goto LABEL_45;
            }
          }
        }
      }
      goto LABEL_461;
    }
    --v12;
  }
  while (v12);
  char v317 = 0;
  unsigned int v40 = HIDWORD(v283);
  unsigned int v41 = v282;
  if (v283 <= HIDWORD(v283)) {
    goto LABEL_361;
  }
  int v42 = v282;
  if (!HIDWORD(v283)) {
    goto LABEL_67;
  }
  if (HIDWORD(v283) >= 0x6666667)
  {
    __break(0xC471u);
    goto LABEL_462;
  }
  unsigned int v43 = 40 * HIDWORD(v283);
  uint64_t v44 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v283)));
  LODWORD(v283) = v43 / 0x28;
  char v282 = v44;
  int v42 = v41;
  if (v44 != v41)
  {
    WTF::VectorMover<false,std::optional<WebKit::WebGPU::VertexBufferLayout>>::move(v41, (WTF *)((char *)v41 + 40 * v40), (uint64_t)v44);
    int v42 = v282;
  }
LABEL_67:
  if (v41)
  {
    if (v42 == v41)
    {
      char v282 = 0;
      LODWORD(v283) = 0;
    }
    WTF::fastFree(v41, v11);
    unsigned int v41 = v282;
  }
  else
  {
    unsigned int v41 = v42;
  }
LABEL_361:
  char v315 = v41;
  int v2 = (int)v283;
  int v3 = HIDWORD(v283);
  char v282 = 0;
  char v283 = 0;
LABEL_22:
  unint64_t v316 = __PAIR64__(v3, v2);
  char v317 = 1;
  WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v282, v11);
  if (*(void *)a1)
  {
    int v21 = 0;
    goto LABEL_24;
  }
  LOBYTE(v293) = 0;
  char v300 = 0;
  int v32 = 1;
LABEL_45:
  LODWORD(v33) = WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v315, v20);
LABEL_74:
  if (v305) {
    LODWORD(v33) = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v303, v20);
  }
  if (v310 && (_BYTE)v309 && (uint64_t v33 = (uint64_t)v308, v308 = 0, v33))
  {
    if (*(_DWORD *)v33 != 2)
    {
      *(_DWORD *)v33 -= 2;
      goto LABEL_81;
    }
    LODWORD(v33) = WTF::StringImpl::destroy((WTF::StringImpl *)v33, v20);
    if (v32)
    {
LABEL_211:
      uint64_t v146 = *(WTF::StringImpl **)a1;
      uint64_t v147 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v33 = *((void *)a1 + 3);
      if (v33 && v147) {
        LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v146);
      }
    }
  }
  else
  {
LABEL_81:
    if (v32) {
      goto LABEL_211;
    }
  }
  unint64_t v46 = *((void *)a1 + 1);
  BOOL v47 = *(WTF::StringImpl **)a1;
  unint64_t v48 = *((void *)a1 + 2) - *(void *)a1;
  if (v46 <= v48)
  {
    unint64_t v185 = 0;
    int v186 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v187 = *((void *)a1 + 3);
    if (v187)
    {
      if (v46)
      {
        (*(void (**)(uint64_t))(*(void *)v187 + 16))(v187);
        int v186 = *(WTF::StringImpl **)a1;
        unint64_t v185 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v185 = 0;
        int v186 = 0;
      }
    }
    goto LABEL_285;
  }
  unint64_t v49 = (unsigned __int8 *)v47 + v48;
  *((void *)a1 + 2) = v49 + 1;
  if (!v47)
  {
    unint64_t v185 = v46;
    int v186 = 0;
LABEL_285:
    unint64_t v46 = 0;
    BOOL v47 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v188 = *((void *)a1 + 3);
    if (v188)
    {
      if (v185)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v188 + 16))(v188, v186, v185);
        BOOL v47 = *(WTF::StringImpl **)a1;
        unint64_t v46 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v46 = 0;
        BOOL v47 = 0;
      }
    }
    goto LABEL_286;
  }
  unsigned int v50 = *v49;
  if (v50 >= 2)
  {
LABEL_286:
    uint64_t v63 = 0;
    unint64_t v66 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v33 = *((void *)a1 + 3);
    if (v33)
    {
      if (v46) {
        LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v47);
      }
      uint64_t v63 = 0;
      unint64_t v66 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
    }
    goto LABEL_137;
  }
  if (!v50)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    unint64_t v66 = 0x100000000000000;
    goto LABEL_137;
  }
  *(_WORD *)unint64_t v272 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v272);
  char v51 = v272[0];
  if (v272[1]) {
    BOOL v52 = v272[0] > 4u;
  }
  else {
    BOOL v52 = 1;
  }
  int v53 = v52;
  unint64_t v54 = *((void *)a1 + 1);
  if (v53 == 1)
  {
    unsigned int v208 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v209 = *((void *)a1 + 3);
    if (v209)
    {
      if (v54)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v209 + 16))(v209, v208);
        char v51 = 0;
        unint64_t v54 = *((void *)a1 + 1);
        goto LABEL_93;
      }
      char v51 = 0;
    }
    else
    {
      char v51 = 0;
      unint64_t v54 = 0;
    }
    unint64_t v210 = 0;
    goto LABEL_314;
  }
LABEL_93:
  unsigned __int8 v55 = *(WTF::StringImpl **)a1;
  unint64_t v56 = *((void *)a1 + 2) - *(void *)a1;
  if (v54 <= v56)
  {
    unint64_t v210 = 0;
    uint64_t v245 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v54 && v245)
    {
      (*(void (**)(uint64_t))(*(void *)v245 + 16))(v245);
      unint64_t v210 = *(WTF::StringImpl **)a1;
      unint64_t v54 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v54 = 0;
    }
    goto LABEL_314;
  }
  unint64_t v57 = (unsigned __int8 *)v55 + v56;
  *((void *)a1 + 2) = v57 + 1;
  if (!v55)
  {
    unint64_t v210 = 0;
LABEL_314:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v211 = *((void *)a1 + 3);
    if (v211)
    {
      if (v54)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v211 + 16))(v211, v210);
        unsigned __int8 v55 = *(WTF::StringImpl **)a1;
        unint64_t v54 = *((void *)a1 + 1);
      }
      else
      {
        unsigned __int8 v55 = 0;
      }
    }
    else
    {
      unsigned __int8 v55 = 0;
      unint64_t v54 = 0;
    }
    goto LABEL_316;
  }
  unsigned int v58 = *v57;
  if (v58 < 2)
  {
    if (v58)
    {
      unsigned __int16 v59 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>((uint64_t *)a1);
      unsigned int v60 = (v59 > 0xFFu) << 16;
      if ((v59 & 0xFF00) != 0) {
        int v61 = v59;
      }
      else {
        int v61 = 0;
      }
      int v62 = 256;
    }
    else
    {
      int v61 = 0;
      int v62 = 0;
      unsigned int v60 = 0x10000;
    }
    goto LABEL_103;
  }
LABEL_316:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v212 = *((void *)a1 + 3);
  if (v212 && v54) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v212 + 16))(v212, v55);
  }
  unsigned int v60 = 0;
  int v61 = 0;
  int v62 = 0;
LABEL_103:
  if (!HIWORD(v60))
  {
    unint64_t v213 = *(WTF::StringImpl **)a1;
    uint64_t v214 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v215 = *((void *)a1 + 3);
    if (v215)
    {
      if (v214) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v215 + 16))(v215, v213);
      }
    }
  }
  *(_WORD *)unint64_t v272 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, v272);
  uint64_t v67 = v272[0];
  if (v272[1]) {
    BOOL v68 = v272[0] > 1u;
  }
  else {
    BOOL v68 = 1;
  }
  int v69 = v68;
  if (v69 == 1)
  {
    unint64_t v216 = *(WTF::StringImpl **)a1;
    uint64_t v217 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v218 = *((void *)a1 + 3);
    if (v218)
    {
      if (v217) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v218 + 16))(v218, v216);
      }
    }
  }
  *(_WORD *)unint64_t v272 = 0;
  LODWORD(v33) = IPC::Decoder::operator>><unsigned char>(a1, v272);
  unsigned int v70 = v61 | v60 | v62;
  uint64_t v71 = v272[0];
  if (v272[1]) {
    BOOL v72 = v272[0] > 2u;
  }
  else {
    BOOL v72 = 1;
  }
  int v73 = v72;
  unint64_t v74 = *((void *)a1 + 1);
  if (v73 == 1)
  {
    unint64_t v219 = 0;
    __int16 v220 = 0;
    char v221 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v222 = *((void *)a1 + 3);
    if (v222)
    {
      if (v74)
      {
        LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v222 + 16))(v222, v221);
        unint64_t v74 = *((void *)a1 + 1);
        goto LABEL_118;
      }
      unint64_t v219 = 0;
      __int16 v220 = 0;
    }
    goto LABEL_325;
  }
LABEL_118:
  unint64_t v75 = *(WTF::StringImpl **)a1;
  unint64_t v76 = *((void *)a1 + 2) - *(void *)a1;
  if (v74 <= v76)
  {
    unint64_t v219 = 0;
    uint64_t v246 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    __int16 v220 = 0;
    if (v74 && v246)
    {
      (*(void (**)(uint64_t))(*(void *)v246 + 16))(v246);
      __int16 v220 = *(WTF::StringImpl **)a1;
      unint64_t v219 = *((void *)a1 + 1);
    }
    goto LABEL_325;
  }
  uint64_t v77 = (unsigned __int8 *)v75 + v76;
  *((void *)a1 + 2) = v77 + 1;
  if (!v75)
  {
    unint64_t v219 = v74;
    __int16 v220 = 0;
LABEL_325:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v223 = *((void *)a1 + 3);
    if (v223 && v219)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v223 + 16))(v223, v220, v219);
      unsigned int v78 = 0;
      unint64_t v75 = *(WTF::StringImpl **)a1;
      unint64_t v74 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v74 = 0;
      unint64_t v75 = 0;
      unsigned int v78 = 0;
    }
    goto LABEL_327;
  }
  unsigned int v78 = *v77;
  if (v78 < 2)
  {
    int v79 = 0;
    char v80 = 1;
    if (!v53)
    {
LABEL_122:
      if (HIWORD(v70) && !v69 && !v73 && !v79)
      {
        __int16 v81 = 1;
        goto LABEL_127;
      }
    }
LABEL_461:
    __break(1u);
LABEL_462:
    JUMPOUT(0x1988CA15CLL);
  }
LABEL_327:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v33 = *((void *)a1 + 3);
  if (v33 && v74)
  {
    LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v75);
    char v80 = 0;
    unint64_t v75 = *(WTF::StringImpl **)a1;
    if (*(void *)a1)
    {
      int v79 = 1;
      if (!v53) {
        goto LABEL_122;
      }
      goto LABEL_461;
    }
    char v51 = 0;
    __int16 v81 = 0;
  }
  else
  {
    unint64_t v75 = 0;
    char v80 = 0;
    char v51 = 0;
    __int16 v81 = 0;
  }
LABEL_127:
  BOOL v17 = (v80 & (v78 != 0)) == 0;
  uint64_t v82 = 0x10000000000;
  if (v17) {
    uint64_t v82 = 0;
  }
  uint64_t v83 = v71 << 32;
  if (v73) {
    uint64_t v83 = 0;
  }
  uint64_t v84 = v67 << 24;
  if (v69) {
    uint64_t v84 = 0;
  }
  if (v81)
  {
    unint64_t v85 = v82 & 0xFFFEFFFFFFFFFFFFLL | ((unint64_t)(v81 & 1) << 48) | v83 | v84 | ((unsigned __int16)v70 << 8);
    uint64_t v65 = v85 & 0xFFFFFFFFFF00;
    uint64_t v64 = (v85 | v51);
    unint64_t v66 = 0x100000000000000;
  }
  else
  {
    uint64_t v227 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v33 = *((void *)a1 + 3);
    if (v33 && v227) {
      LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v75);
    }
    unint64_t v66 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
  }
  uint64_t v63 = 0x1000000000000;
LABEL_137:
  unint64_t v86 = *((void *)a1 + 1);
  if (!HIBYTE(v66))
  {
    char v189 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v190 = *((void *)a1 + 3);
    if (v190 && v86)
    {
      LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v190 + 16))(v190, v189);
      unint64_t v86 = *((void *)a1 + 1);
      goto LABEL_138;
    }
    unint64_t v86 = 0;
    uint64_t v87 = *(WTF::StringImpl **)a1;
    goto LABEL_292;
  }
LABEL_138:
  uint64_t v87 = *(WTF::StringImpl **)a1;
  unint64_t v88 = *((void *)a1 + 2) - *(void *)a1;
  if (v86 <= v88)
  {
LABEL_292:
    unint64_t v191 = 0;
    unsigned int v192 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v193 = *((void *)a1 + 3);
    if (v193)
    {
      if (v86)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v193 + 16))(v193, v87);
        unsigned int v192 = *(WTF::StringImpl **)a1;
        unint64_t v191 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v191 = 0;
        unsigned int v192 = 0;
      }
    }
    goto LABEL_293;
  }
  uint64_t v89 = (unsigned __int8 *)v87 + v88;
  *((void *)a1 + 2) = v89 + 1;
  if (!v87)
  {
    unint64_t v191 = v86;
    unsigned int v192 = 0;
LABEL_293:
    unint64_t v86 = 0;
    uint64_t v87 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v194 = *((void *)a1 + 3);
    if (v194)
    {
      if (v191)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v194 + 16))(v194, v192, v191);
        uint64_t v87 = *(WTF::StringImpl **)a1;
        unint64_t v86 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v86 = 0;
        uint64_t v87 = 0;
      }
    }
LABEL_294:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v195 = *((void *)a1 + 3);
    if (!v195 || !v86) {
      goto LABEL_330;
    }
    goto LABEL_409;
  }
  unsigned int v90 = *v89;
  if (v90 >= 2) {
    goto LABEL_294;
  }
  if (!v90)
  {
    LOBYTE(v271) = 0;
    char v257 = 0;
    int v259 = 0;
    LODWORD(v267) = 0;
    LODWORD(v268) = 0;
    LODWORD(v269) = 0;
    LODWORD(v270) = 0;
    goto LABEL_155;
  }
  unsigned __int16 v271 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>((uint64_t *)a1);
  int v266 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  unsigned int v265 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::CompareFunction>>((uint64_t *)a1);
  unint64_t v270 = IPC::Decoder::decode<WebKit::WebGPU::StencilFaceState>((uint64_t *)a1);
  unint64_t v269 = IPC::Decoder::decode<WebKit::WebGPU::StencilFaceState>((uint64_t *)a1);
  uint64_t v91 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  char v93 = v92;
  uint64_t v94 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  char v96 = v95;
  uint64_t v268 = IPC::Decoder::decode<unsigned int>(a1);
  uint64_t v267 = IPC::Decoder::decode<float>(a1);
  uint64_t v33 = IPC::Decoder::decode<float>(a1);
  uint64_t v87 = *(WTF::StringImpl **)a1;
  if (!*(void *)a1)
  {
    uint64_t v224 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v195 = *((void *)a1 + 3);
    if (!v195 || !v224) {
      goto LABEL_330;
    }
    uint64_t v87 = 0;
LABEL_409:
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v195 + 16))(v195, v87);
LABEL_330:
    char v225 = *(WTF::StringImpl **)a1;
    uint64_t v226 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v33 = *((void *)a1 + 3);
    if (v33 && v226)
    {
      LODWORD(v33) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v225);
      LOBYTE(v271) = 0;
      uint64_t v87 = *(WTF::StringImpl **)a1;
    }
    else
    {
      uint64_t v87 = 0;
      LOBYTE(v271) = 0;
    }
    int v259 = 1;
    LODWORD(v267) = 1;
    LODWORD(v268) = 1;
    LODWORD(v269) = 1;
    LODWORD(v270) = 1;
    goto LABEL_155;
  }
  if (v271 <= 0xFFu
    || (v266 & 0xFF0000) == 0
    || !HIWORD(v265)
    || !BYTE4(v270)
    || !BYTE4(v269)
    || !v93
    || !v96
    || (v268 & 0xFF00000000) == 0
    || (v267 & 0xFF00000000) == 0
    || (v33 & 0xFF00000000) == 0)
  {
    goto LABEL_461;
  }
  int v259 = 0;
  uint64_t v255 = v91 << 24;
  uint64_t v256 = v94 << 24;
  char v257 = 1;
LABEL_155:
  int v258 = v33;
  unint64_t v97 = *((void *)a1 + 1);
  uint64_t v261 = v65;
  uint64_t v262 = v64;
  uint64_t v260 = v63;
  if (v97 <= *((void *)a1 + 2) - (void)v87)
  {
    unint64_t v196 = 0;
    unsigned int v197 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v198 = *((void *)a1 + 3);
    if (v198)
    {
      if (v97)
      {
        (*(void (**)(uint64_t))(*(void *)v198 + 16))(v198);
        unsigned int v197 = *(WTF::StringImpl **)a1;
        unint64_t v196 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v196 = 0;
        unsigned int v197 = 0;
      }
    }
    goto LABEL_298;
  }
  uint64_t v98 = (unsigned __int8 *)*((void *)a1 + 2);
  uint64_t v99 = v98 + 1;
  *((void *)a1 + 2) = v98 + 1;
  if (!v87)
  {
    unint64_t v196 = v97;
    unsigned int v197 = 0;
LABEL_298:
    unint64_t v97 = 0;
    uint64_t v87 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v199 = *((void *)a1 + 3);
    if (v199)
    {
      if (v196)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v199 + 16))(v199, v197, v196);
        uint64_t v87 = *(WTF::StringImpl **)a1;
        unint64_t v97 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v97 = 0;
        uint64_t v87 = 0;
      }
    }
    goto LABEL_299;
  }
  unsigned int v100 = *v98;
  if (v100 >= 2)
  {
LABEL_299:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v200 = *((void *)a1 + 3);
    if (v200 && v97) {
LABEL_420:
    }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v200 + 16))(v200, v87);
LABEL_344:
    unint64_t v235 = *(WTF::StringImpl **)a1;
    uint64_t v236 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v237 = *((void *)a1 + 3);
    if (v237 && v236)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v237 + 16))(v237, v235);
      unint64_t v122 = 0;
      unsigned __int8 v121 = 0;
      uint64_t v87 = *(WTF::StringImpl **)a1;
    }
    else
    {
      uint64_t v87 = 0;
      unint64_t v122 = 0;
      unsigned __int8 v121 = 0;
    }
    int v119 = 1;
    goto LABEL_181;
  }
  if (!v100)
  {
    unint64_t v122 = 0;
    unsigned __int8 v121 = 0;
    int v119 = 0;
    LOBYTE(v65) = 0;
    goto LABEL_181;
  }
  unint64_t v101 = ((unint64_t)(v99 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v87;
  BOOL v103 = v97 < v101 || v97 - v101 < 4;
  if (v103)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v228 = *((void *)a1 + 3);
    if (v228)
    {
      (*(void (**)(uint64_t))(*(void *)v228 + 16))(v228);
      unsigned int v106 = 0;
      uint64_t v87 = 0;
      unint64_t v249 = *(WTF::StringImpl **)a1;
      uint64_t v250 = *((void *)a1 + 1);
      uint64_t v251 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      unint64_t v97 = 0;
      LODWORD(v65) = 0;
      if (v251 && v250)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v251 + 16))(v251, v249, v250);
        unsigned int v106 = 0;
        LODWORD(v65) = 0;
        uint64_t v87 = *(WTF::StringImpl **)a1;
        unint64_t v97 = *((void *)a1 + 1);
      }
    }
    else
    {
      uint64_t v87 = 0;
      unint64_t v97 = 0;
      unsigned int v106 = 0;
      LODWORD(v65) = 0;
    }
  }
  else
  {
    char v104 = (int *)((char *)v87 + v101);
    int v105 = *v104;
    *((void *)a1 + 2) = v104 + 1;
    unsigned int v106 = v105 & 0xFFFFFF00;
    LODWORD(v65) = v105;
  }
  unint64_t v107 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v87;
  if (v97 < v107 || v97 - v107 <= 3)
  {
    unint64_t v229 = 0;
    unint64_t v230 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v231 = *((void *)a1 + 3);
    if (v231)
    {
      if (v97)
      {
        (*(void (**)(uint64_t))(*(void *)v231 + 16))(v231);
        unint64_t v230 = *(WTF::StringImpl **)a1;
        unint64_t v229 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v229 = 0;
        unint64_t v230 = 0;
      }
    }
  }
  else
  {
    uint64_t v108 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v109 = (char *)(v108 + 1);
    *((void *)a1 + 2) = v108 + 1;
    if (v87)
    {
      int v110 = 0;
      int v111 = *v108;
      unsigned int v112 = v111 & 0xFFFFFF00;
      int v113 = v111;
      goto LABEL_171;
    }
    unint64_t v229 = v97;
    unint64_t v230 = 0;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v232 = *((void *)a1 + 3);
  if (!v232)
  {
    int v113 = 0;
    unsigned int v112 = 0;
    unint64_t v229 = 0;
    goto LABEL_340;
  }
  if (!v229)
  {
    int v113 = 0;
    unsigned int v112 = 0;
LABEL_340:
    uint64_t v87 = 0;
    int v110 = 1;
    goto LABEL_341;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v232 + 16))(v232, v230, v229);
  unsigned int v112 = 0;
  int v113 = 0;
  uint64_t v87 = *(WTF::StringImpl **)a1;
  unint64_t v97 = *((void *)a1 + 1);
  int v110 = 1;
  uint64_t v109 = (char *)*((void *)a1 + 2);
LABEL_171:
  unint64_t v114 = (char *)(v109 - (char *)v87);
  if (v97 <= (unint64_t)v114)
  {
    unint64_t v229 = 0;
    uint64_t v247 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v97 && v247)
    {
      (*(void (**)(uint64_t))(*(void *)v247 + 16))(v247);
      uint64_t v87 = *(WTF::StringImpl **)a1;
      unint64_t v229 = *((void *)a1 + 1);
    }
    else
    {
      uint64_t v87 = 0;
    }
    goto LABEL_341;
  }
  __int16 v115 = &v114[(void)v87];
  *((void *)a1 + 2) = v115 + 1;
  if (!v87)
  {
    unint64_t v229 = v97;
LABEL_341:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v233 = *((void *)a1 + 3);
    if (v233 && v229)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v233 + 16))(v233, v87, v229);
      unsigned int v116 = 0;
      uint64_t v87 = *(WTF::StringImpl **)a1;
      unint64_t v97 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v97 = 0;
      uint64_t v87 = 0;
      unsigned int v116 = 0;
    }
    goto LABEL_343;
  }
  unsigned int v116 = *v115;
  if (v116 < 2)
  {
    int v117 = 0;
    int v118 = 1;
    if (v103) {
      goto LABEL_461;
    }
    goto LABEL_175;
  }
LABEL_343:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v234 = *((void *)a1 + 3);
  if (!v234 || !v97) {
    goto LABEL_344;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v234 + 16))(v234, v87);
  uint64_t v87 = *(WTF::StringImpl **)a1;
  if (!*(void *)a1)
  {
    uint64_t v200 = *((void *)a1 + 3);
    uint64_t v248 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v200 && v248)
    {
      uint64_t v87 = 0;
      goto LABEL_420;
    }
    goto LABEL_344;
  }
  int v118 = 0;
  int v117 = 1;
  if (v103) {
    goto LABEL_461;
  }
LABEL_175:
  if (v110 || v117) {
    goto LABEL_461;
  }
  int v119 = 0;
  uint64_t v120 = v65 | v106;
  if (!v116) {
    int v118 = 0;
  }
  int v254 = v118;
  unsigned __int8 v121 = v65 | v106;
  unint64_t v122 = v120 & 0xFFFFFFFFFFFFFF00 | ((unint64_t)(v113 | v112) << 32);
  LOBYTE(v65) = 1;
LABEL_181:
  unint64_t v123 = *((void *)a1 + 1);
  if (v123 <= *((void *)a1 + 2) - (void)v87)
  {
    unint64_t v201 = 0;
    int v202 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v203 = *((void *)a1 + 3);
    if (v203)
    {
      if (v123)
      {
        (*(void (**)(uint64_t))(*(void *)v203 + 16))(v203);
        int v202 = *(WTF::StringImpl **)a1;
        unint64_t v201 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v201 = 0;
        int v202 = 0;
      }
    }
    goto LABEL_303;
  }
  long long v124 = (unsigned __int8 *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v124 + 1;
  if (!v87)
  {
    unint64_t v201 = v123;
    int v202 = 0;
LABEL_303:
    unint64_t v123 = 0;
    uint64_t v87 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v204 = *((void *)a1 + 3);
    if (v204)
    {
      if (v201)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v204 + 16))(v204, v202, v201);
        uint64_t v87 = *(WTF::StringImpl **)a1;
        unint64_t v123 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v123 = 0;
        uint64_t v87 = 0;
      }
    }
    goto LABEL_304;
  }
  unsigned int v125 = *v124;
  if (v125 >= 2)
  {
LABEL_304:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v205 = *((void *)a1 + 3);
    if (v205 && v123) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v205 + 16))(v205, v87);
    }
    LOBYTE(v282) = 0;
    unsigned __int8 v290 = 0;
LABEL_306:
    char v140 = *(WTF::StringImpl **)a1;
    uint64_t v206 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v207 = *((void *)a1 + 3);
    if (v207 && v206) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v207 + 16))(v207, v140);
    }
    goto LABEL_249;
  }
  if (!v125)
  {
    v272[0] = 0;
    LOBYTE(v277) = 0;
    std::__optional_move_base<WebKit::WebGPU::FragmentState,false>::__optional_move_base[abi:sn180100](&v282, (uint64_t)v272);
    unsigned __int8 v290 = 1;
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v272, v139);
    int v141 = v290;
    goto LABEL_248;
  }
  uint64_t v126 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a1);
  char v128 = v127;
  IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v315);
  IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v312, a1);
  unint64_t v129 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v130) {
    goto LABEL_233;
  }
  unint64_t v131 = v129;
  char v308 = 0;
  int v309 = 0;
  if (v129 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::optional<WebKit::WebGPU::ColorTargetState>>((uint64_t)v272, (uint64_t *)a1);
      if (!v272[16]) {
        break;
      }
      uint64_t v152 = HIDWORD(v309);
      if (HIDWORD(v309) == v309)
      {
        unint64_t v153 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v308, HIDWORD(v309) + 1, (unint64_t)v272);
        uint64_t v152 = HIDWORD(v309);
        uint64_t v154 = v308;
        long long v155 = *v153;
      }
      else
      {
        uint64_t v154 = v308;
        long long v155 = *(_OWORD *)v272;
      }
      *((_OWORD *)v154 + v152) = v155;
      uint64_t v156 = ++HIDWORD(v309);
      if (!--v131)
      {
        unint64_t v137 = v308;
        if (v309 > v156)
        {
          unint64_t v240 = v308;
          int v253 = v156;
          if (v156)
          {
            if (v156 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1988CA164);
            }
            uint64_t v252 = 16 * v156;
            unint64_t v241 = (WTF *)WTF::fastMalloc((WTF *)(16 * v156));
            LODWORD(v309) = v253;
            char v308 = v241;
            unint64_t v240 = v137;
            if (v241 != v137)
            {
              unint64_t v242 = v137;
              uint64_t v243 = v252;
              do
              {
                long long v244 = *(_OWORD *)v242;
                unint64_t v242 = (WTF *)((char *)v242 + 16);
                *(_OWORD *)unint64_t v241 = v244;
                unint64_t v241 = (WTF *)((char *)v241 + 16);
                v243 -= 16;
              }
              while (v243);
              unint64_t v240 = v308;
            }
          }
          if (v137)
          {
            if (v240 == v137)
            {
              char v308 = 0;
              LODWORD(v309) = 0;
            }
            WTF::fastFree(v137, v130);
            unint64_t v137 = v308;
          }
          else
          {
            unint64_t v137 = v240;
          }
        }
        unsigned int v138 = v309;
        LODWORD(v133) = HIDWORD(v309);
        goto LABEL_195;
      }
    }
LABEL_231:
    unint64_t v157 = v308;
    if (v308)
    {
      char v308 = 0;
      LODWORD(v309) = 0;
      WTF::fastFree(v157, v130);
    }
LABEL_233:
    uint64_t v130 = *(WTF::StringImpl **)a1;
    uint64_t v158 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v159 = *((void *)a1 + 3);
    if (v159)
    {
      if (v158)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v159 + 16))(v159, v130);
        char v133 = *(WTF::StringImpl **)a1;
        if (*(void *)a1)
        {
          unint64_t v137 = 0;
          int v142 = 1;
          goto LABEL_202;
        }
      }
    }
LABEL_234:
    v272[0] = 0;
    LOBYTE(v277) = 0;
    goto LABEL_235;
  }
  if (!v129)
  {
    if (*(void *)a1)
    {
      unint64_t v137 = 0;
      unsigned int v138 = 0;
      LODWORD(v133) = 0;
      goto LABEL_201;
    }
    goto LABEL_234;
  }
  uint64_t v132 = WTF::fastMalloc((WTF *)(16 * v129));
  LODWORD(v309) = v131;
  char v308 = (WTF::StringImpl *)v132;
  do
  {
    IPC::Decoder::decode<std::optional<WebKit::WebGPU::ColorTargetState>>((uint64_t)v272, (uint64_t *)a1);
    if (!v272[16]) {
      goto LABEL_231;
    }
    char v133 = (WTF::StringImpl *)HIDWORD(v309);
    if (HIDWORD(v309) == v309)
    {
      __int16 v134 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v308, HIDWORD(v309) + 1, (unint64_t)v272);
      char v133 = (WTF::StringImpl *)HIDWORD(v309);
      char v135 = v308;
      long long v136 = *v134;
    }
    else
    {
      char v135 = v308;
      long long v136 = *(_OWORD *)v272;
    }
    *((_OWORD *)v135 + (unint64_t)v133) = v136;
    LODWORD(v133) = ++HIDWORD(v309);
    --v131;
  }
  while (v131);
  unint64_t v137 = v308;
  unsigned int v138 = v309;
LABEL_195:
  if (!*(void *)a1)
  {
    v272[0] = 0;
    LOBYTE(v277) = 0;
    if (v137) {
      WTF::fastFree(v137, v130);
    }
    goto LABEL_235;
  }
LABEL_201:
  int v142 = 0;
LABEL_202:
  if (!v128) {
    goto LABEL_461;
  }
  uint64_t v303 = v126;
  if (!v317) {
    goto LABEL_461;
  }
  LOBYTE(v304) = 0;
  char v305 = 0;
  if ((_BYTE)v316)
  {
    uint64_t v143 = v315;
    char v315 = 0;
    char v304 = v143;
    char v305 = 1;
  }
  if (!v314) {
    goto LABEL_461;
  }
  uint64_t v144 = v312;
  uint64_t v145 = v313;
  char v312 = 0;
  uint64_t v313 = 0;
  char v308 = (WTF::StringImpl *)v126;
  LOBYTE(v309) = 0;
  char v310 = 0;
  if ((_BYTE)v316)
  {
    uint64_t v148 = v304;
    char v304 = 0;
    char v310 = 1;
    uint64_t v306 = 0;
    uint64_t v307 = 0;
    if (v142) {
      goto LABEL_461;
    }
    int v309 = 0;
    *(void *)unint64_t v272 = v126;
    *(void *)&v272[8] = v148;
    v272[16] = 1;
  }
  else
  {
    uint64_t v306 = 0;
    uint64_t v307 = 0;
    if (v142) {
      goto LABEL_461;
    }
    *(void *)unint64_t v272 = v126;
    v272[8] = 0;
    v272[16] = 0;
  }
  memset(v311, 0, sizeof(v311));
  unint64_t v273 = v144;
  uint64_t v274 = v145;
  unint64_t v275 = v137;
  unint64_t v276 = __PAIR64__(v133, v138);
  LOBYTE(v277) = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v311, v130);
  if (v310)
  {
    uint64_t v150 = v309;
    int v309 = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 2) {
        WTF::StringImpl::destroy(v150, v149);
      }
      else {
        *(_DWORD *)v150 -= 2;
      }
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v306, v149);
  if (v305)
  {
    uint64_t v151 = v304;
    char v304 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 2) {
        WTF::StringImpl::destroy(v151, v130);
      }
      else {
        *(_DWORD *)v151 -= 2;
      }
    }
  }
LABEL_235:
  if (v314) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v312, v130);
  }
  if (v317)
  {
    if ((_BYTE)v316)
    {
      uint64_t v160 = v315;
      char v315 = 0;
      if (v160)
      {
        if (*(_DWORD *)v160 == 2) {
          WTF::StringImpl::destroy(v160, v130);
        }
        else {
          *(_DWORD *)v160 -= 2;
        }
      }
    }
  }
  if ((_BYTE)v277
    || (uint64_t v130 = *(WTF::StringImpl **)a1,
        uint64_t v238 = *((void *)a1 + 1),
        *(void *)a1 = 0,
        *((void *)a1 + 1) = 0,
        (uint64_t v239 = *((void *)a1 + 3)) != 0)
    && v238
    && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v239 + 16))(v239, v130), (_BYTE)v277))
  {
    char v282 = *(WTF **)v272;
    LOBYTE(v283) = 0;
    char v284 = 0;
    if (v272[16])
    {
      unint64_t v161 = *(WTF::StringImpl **)&v272[8];
      *(void *)&v272[8] = 0;
      char v283 = v161;
      char v284 = 1;
    }
    uint64_t v162 = v273;
    unint64_t v273 = 0;
    int v285 = v162;
    uint64_t v163 = v274;
    uint64_t v274 = 0;
    uint64_t v286 = v163;
    uint64_t v164 = v275;
    unint64_t v275 = 0;
    uint64_t v287 = v164;
    unint64_t v165 = v276;
    unint64_t v276 = 0;
    unint64_t v288 = v165;
    int v141 = 1;
    char v289 = 1;
  }
  else
  {
    int v141 = 0;
    LOBYTE(v282) = 0;
  }
  unsigned __int8 v290 = v141;
  std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v272, v130);
LABEL_248:
  if (!v141) {
    goto LABEL_306;
  }
LABEL_249:
  if (*(void *)a1)
  {
    if (!v302) {
      goto LABEL_461;
    }
    uint64_t v166 = v301;
    int v301 = 0;
    if (!v264) {
      goto LABEL_461;
    }
    *(void *)unint64_t v272 = v166;
    *(void *)&v272[8] = v263;
    if (!v300) {
      goto LABEL_461;
    }
    *(void *)&v272[16] = v293;
    LOBYTE(v273) = 0;
    LOBYTE(v274) = 0;
    if (v295)
    {
      uint64_t v167 = v294;
      char v294 = 0;
      unint64_t v273 = v167;
      LOBYTE(v274) = 1;
    }
    uint64_t v168 = v296;
    char v296 = 0;
    unint64_t v275 = v168;
    unint64_t v169 = v297;
    unint64_t v297 = 0;
    unint64_t v276 = v169;
    unint64_t v170 = v298;
    char v298 = 0;
    unint64_t v277 = v170;
    unint64_t v171 = v299;
    unint64_t v299 = 0;
    unint64_t v278 = v171;
    if (!((v66 | v261 | v260 | v262) >> 56)) {
      goto LABEL_461;
    }
    *(_DWORD *)int v279 = v66 | v261 | v260 | v262;
    v279[6] = (v66 | v261 | v260 | v262) >> 48;
    *(_WORD *)&v279[4] = (v66 | v261 | v260 | v262) >> 32;
    if (v259) {
      goto LABEL_461;
    }
    v279[8] = v271;
    *(_WORD *)&v279[9] = v266;
    *(_WORD *)&v279[11] = v265;
    *(_DWORD *)&v279[13] = v270;
    *(_DWORD *)&v279[17] = v269;
    *(void *)&v279[21] = v255;
    *(void *)&v279[29] = v256;
    *(_WORD *)&v279[37] = v291;
    v279[39] = v292;
    *(_DWORD *)&v279[40] = v268;
    *(_DWORD *)&v279[44] = v267;
    *(_DWORD *)BOOL v280 = v258;
    v280[4] = v257;
    if (v119) {
      goto LABEL_461;
    }
    *(void *)&v280[8] = v121 | v122;
    *(_DWORD *)&v280[16] = v254;
    v280[20] = v65;
    if (!v290) {
      goto LABEL_461;
    }
    std::__optional_move_base<WebKit::WebGPU::FragmentState,false>::__optional_move_base[abi:sn180100](v281, (uint64_t)&v282);
    uint64_t v172 = *(void *)v272;
    *(void *)unint64_t v272 = 0;
    *(void *)a2 = v172;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v272[8];
    *(unsigned char *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 0;
    if ((_BYTE)v274)
    {
      unint64_t v173 = v273;
      unint64_t v273 = 0;
      *(void *)(a2 + 24) = v173;
      *(unsigned char *)(a2 + 32) = 1;
    }
    *(void *)(a2 + 56) = v277;
    *(void *)(a2 + 40) = v275;
    unint64_t v275 = 0;
    unint64_t v174 = v276;
    unint64_t v276 = 0;
    *(void *)(a2 + 48) = v174;
    unint64_t v277 = 0;
    unint64_t v175 = v278;
    unint64_t v278 = 0;
    *(void *)(a2 + 64) = v175;
    long long v176 = *(_OWORD *)v280;
    *(_OWORD *)(a2 + 104) = *(_OWORD *)&v279[32];
    *(_OWORD *)(a2 + 120) = v176;
    *(void *)(a2 + 133) = *(void *)&v280[13];
    long long v177 = *(_OWORD *)&v279[16];
    *(_OWORD *)(a2 + 72) = *(_OWORD *)v279;
    *(_OWORD *)(a2 + 88) = v177;
    std::__optional_move_base<WebKit::WebGPU::FragmentState,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a2 + 144), (uint64_t)v281);
    *(unsigned char *)(a2 + 208) = 1;
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v281, v178);
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v277, v179);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v275, v180);
    if ((_BYTE)v274)
    {
      uint64_t v181 = v273;
      unint64_t v273 = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2) {
          WTF::StringImpl::destroy(v181, v140);
        }
        else {
          *(_DWORD *)v181 -= 2;
        }
      }
    }
    uint64_t v182 = *(WTF::StringImpl **)v272;
    *(void *)unint64_t v272 = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2) {
        WTF::StringImpl::destroy(v182, v140);
      }
      else {
        *(_DWORD *)v182 -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 208) = 0;
  }
  if (v290) {
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v282, v140);
  }
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebGPU::VertexState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v293, v140);
  if (v302)
  {
    uint64_t result = v301;
    int v301 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v184);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1988CA18C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,WTF *a30,WTF::StringImpl *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a28, a2);
  std::__optional_destruct_base<WebKit::WebGPU::VertexState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a64, v66);
  if (*(unsigned char *)(v64 - 240))
  {
    BOOL v68 = *(WTF::StringImpl **)(v64 - 248);
    *(void *)(v64 - 248) = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2) {
        WTF::StringImpl::destroy(v68, v67);
      }
      else {
        *(_DWORD *)v68 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::WebGPU::PowerPreference>,void>::encode<IPC::Encoder,std::optional<WebCore::WebGPU::PowerPreference> const&>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);

  return IPC::Encoder::operator<<<BOOL>(a1, a2 + 3);
}

void *IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::encode(void *a1, unsigned char *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, a2);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1] || (*(unsigned char *)(*a1 + v5) = a2[2], a1[2] = v5 + 1, v5 + 1 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5 + 1) = a2[3];
    a1[2] = v5 + 2;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::decode(uint64_t *a1)
{
  int v2 = (unsigned __int8 *)a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if ((unint64_t)v2 <= v4) {
    goto LABEL_29;
  }
  unint64_t v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    uint64_t v23 = v2;
    uint64_t v24 = 0;
    goto LABEL_30;
  }
  unsigned int v6 = *v5;
  if (v6 >= 2) {
    goto LABEL_31;
  }
  if (v6)
  {
    __int16 v69 = 0;
    IPC::Decoder::operator>><BOOL>(a1, &v69);
    if (HIBYTE(v69))
    {
      int v7 = v69;
      unsigned int v8 = 0x10000;
    }
    else
    {
      uint64_t v37 = *a1;
      uint64_t v38 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v39 = a1[3];
      if (v39 && v38) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37);
      }
      int v7 = 0;
      unsigned int v8 = 0;
    }
    int v9 = 256;
  }
  else
  {
    int v7 = 0;
    int v9 = 0;
    unsigned int v8 = 0x10000;
  }
  while (1)
  {
    int v2 = (unsigned __int8 *)a1[1];
    if (!HIWORD(v8))
    {
      uint64_t v28 = *a1;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v29 = a1[3];
      if (!v29 || !v2)
      {
        int v2 = 0;
        uint64_t v10 = *a1;
LABEL_35:
        unint64_t v12 = 0;
        uint64_t v30 = 0;
        *a1 = 0;
        a1[1] = 0;
        uint64_t v31 = a1[3];
        if (v31)
        {
          unsigned int v60 = v8;
          int v67 = v9;
          int v53 = v7;
          if (v2)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v10);
            uint64_t v30 = *a1;
            unint64_t v12 = (unsigned __int8 *)a1[1];
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v30 = 0;
          }
          int v7 = v53;
          unsigned int v8 = v60;
          int v9 = v67;
        }
LABEL_36:
        *a1 = 0;
        a1[1] = 0;
        uint64_t v32 = a1[3];
        if (v32)
        {
          unsigned int v59 = v8;
          int v66 = v9;
          int v52 = v7;
          if (v12)
          {
            (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v32 + 16))(v32, v30, v12);
            LODWORD(v12) = 0;
            uint64_t v10 = *a1;
            int v2 = (unsigned __int8 *)a1[1];
          }
          else
          {
            int v2 = 0;
            uint64_t v10 = 0;
          }
          int v7 = v52;
          unsigned int v8 = v59;
          int v9 = v66;
        }
        else
        {
          int v2 = 0;
          uint64_t v10 = 0;
          LODWORD(v12) = 0;
        }
        goto LABEL_38;
      }
      int v54 = v7;
      unsigned int v61 = v8;
      int v68 = v9;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v28);
      unsigned int v8 = v61;
      int v9 = v68;
      int v7 = v54;
      int v2 = (unsigned __int8 *)a1[1];
    }
    uint64_t v10 = *a1;
    unint64_t v11 = a1[2] - *a1;
    if ((unint64_t)v2 <= v11) {
      goto LABEL_35;
    }
    unint64_t v12 = (unsigned __int8 *)(v10 + v11);
    int v13 = v12 + 1;
    a1[2] = (uint64_t)(v12 + 1);
    if (!v10)
    {
      unint64_t v12 = v2;
      uint64_t v30 = 0;
      goto LABEL_36;
    }
    LODWORD(v12) = *v12;
    if (v12 < 2)
    {
      int v14 = 0;
      int v15 = 1;
      goto LABEL_14;
    }
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (!v33)
    {
      int v15 = 0;
      int v34 = 0;
      uint64_t v10 = 0;
      int v14 = 1;
      goto LABEL_40;
    }
    int v47 = (int)v12;
    int v51 = v7;
    unsigned int v58 = v8;
    int v65 = v9;
    if (!v2)
    {
      int v15 = 0;
      int v34 = 0;
      uint64_t v10 = 0;
      int v14 = 1;
LABEL_40:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v35 = a1[3];
      if (v35)
      {
        int v43 = v15;
        int v46 = v14;
        unsigned int v57 = v8;
        int v64 = v9;
        int v50 = v7;
        if (v34)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v35 + 16))(v35, v10, v34);
          uint64_t v10 = *a1;
          int v2 = (unsigned __int8 *)a1[1];
        }
        else
        {
          int v2 = 0;
          uint64_t v10 = 0;
        }
        int v7 = v50;
        unsigned int v8 = v57;
        int v9 = v64;
        int v15 = v43;
        int v14 = v46;
      }
      else
      {
        int v2 = 0;
        uint64_t v10 = 0;
      }
      goto LABEL_42;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v10);
    int v15 = 0;
    uint64_t v10 = *a1;
    int v2 = (unsigned __int8 *)a1[1];
    int v14 = 1;
    int v13 = (unsigned __int8 *)a1[2];
    int v7 = v51;
    unsigned int v8 = v58;
    int v9 = v65;
    LODWORD(v12) = v47;
LABEL_14:
    if (!v12) {
      int v15 = 0;
    }
    if (v2 <= &v13[-v10])
    {
      int v41 = v15;
      int v44 = v14;
      unsigned int v55 = v8;
      int v62 = v9;
      int v48 = v7;
      int v34 = 0;
      uint64_t v40 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v40 && v2)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        uint64_t v10 = *a1;
        int v34 = (unsigned __int8 *)a1[1];
      }
      else
      {
        uint64_t v10 = 0;
      }
      int v7 = v48;
      unsigned int v8 = v55;
      int v9 = v62;
      int v15 = v41;
      int v14 = v44;
      goto LABEL_40;
    }
    a1[2] = (uint64_t)(v13 + 1);
    if (!v10)
    {
      int v34 = v2;
      goto LABEL_40;
    }
    unsigned int v16 = *v13;
    if (v16 <= 1)
    {
      int v17 = 0;
      LODWORD(v18) = (v16 != 0) << 24;
      goto LABEL_20;
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v36 = a1[3];
    if (!v36 || (int v42 = v15, v45 = v14, v56 = v8, v63 = v9, v49 = v7, !v2))
    {
      uint64_t v18 = 0;
      unsigned int v21 = 0;
      return v21 | (unint64_t)(v18 << 32);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v10);
    uint64_t v18 = 0;
    if (!*a1)
    {
      unsigned int v21 = 0;
      return v21 | (unint64_t)(v18 << 32);
    }
    int v17 = 1;
    int v7 = v49;
    unsigned int v8 = v56;
    int v9 = v63;
    int v15 = v42;
    int v14 = v45;
LABEL_20:
    unsigned int v19 = v7 | v8 | v9;
    if (HIWORD(v19))
    {
      if (!v14 && !v17) {
        break;
      }
    }
    __break(1u);
LABEL_29:
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (v25)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *a1;
        uint64_t v23 = (unsigned __int8 *)a1[1];
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
LABEL_30:
    int v2 = 0;
    uint64_t v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v26 + 16))(v26, v24, v23);
        uint64_t v3 = *a1;
        int v2 = (unsigned __int8 *)a1[1];
      }
      else
      {
        int v2 = 0;
        uint64_t v3 = 0;
      }
    }
LABEL_31:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v27 = a1[3];
    if (v27 && v2) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v3);
    }
    unsigned int v8 = 0;
    int v7 = 0;
    int v9 = 0;
  }
  if (v15) {
    int v20 = 0x10000;
  }
  else {
    int v20 = 0;
  }
  unsigned int v21 = v18 | (unsigned __int16)v19 | v20;
  uint64_t v18 = 1;
  return v21 | (unint64_t)(v18 << 32);
}

unint64_t IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  char v6 = *(unsigned char *)(a2 + 9);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = *(unsigned char *)(a2 + 10);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  char v8 = *(unsigned char *)(a2 + 11);
  IPC::Encoder::operator<<<BOOL>(a1, &v8);
  char v9 = *(unsigned char *)(a2 + 12);
  IPC::Encoder::operator<<<BOOL>(a1, &v9);
  char v10 = *(unsigned char *)(a2 + 13);
  IPC::Encoder::operator<<<BOOL>(a1, &v10);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 16));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 20));
  IPC::ArgumentCoder<std::optional<WebKit::WebGPU::SamplerBindingLayout>,void>::encode<IPC::Encoder,std::optional<WebKit::WebGPU::SamplerBindingLayout> const&>(a1, (char *)(a2 + 24));
  return IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 26));
}

void *IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::encode(void *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  unint64_t v4 = a1[2];
  if (v4 >= a1[1]) {
    goto LABEL_11;
  }
  *(unsigned char *)(*a1 + v4) = *(unsigned char *)(a2 + 8);
  a1[2] = v4 + 1;
  if (v4 + 1 >= a1[1]) {
    goto LABEL_11;
  }
  *(unsigned char *)(*a1 + v4 + 1) = *(unsigned char *)(a2 + 9);
  a1[2] = v4 + 2;
  if (v4 + 2 >= a1[1]
    || (*(unsigned char *)(*a1 + v4 + 2) = *(unsigned char *)(a2 + 10), a1[2] = v4 + 3, v4 + 3 >= a1[1])
    || (*(unsigned char *)(*a1 + v4 + 3) = *(unsigned char *)(a2 + 11), a1[2] = v4 + 4, v4 + 4 >= a1[1])
    || (*(unsigned char *)(*a1 + v4 + 4) = *(unsigned char *)(a2 + 12), a1[2] = v4 + 5, v4 + 5 >= a1[1]))
  {
LABEL_11:
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v4 + 5) = *(unsigned char *)(a2 + 13);
    a1[2] = v4 + 6;
  }
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 16));
  IPC::StreamConnectionEncoder::operator<<<float const&>(a1, (_DWORD *)(a2 + 20));
  IPC::ArgumentCoder<std::optional<WebCore::PlatformVideoColorPrimaries>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::PlatformVideoColorPrimaries> const&>(a1, (unsigned char *)(a2 + 24));

  return IPC::StreamConnectionEncoder::operator<<<unsigned short const&>(a1, (_WORD *)(a2 + 26));
}

uint64_t IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v21);
  unsigned __int16 v20 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
  unsigned __int16 v19 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a1);
  unsigned __int16 v5 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>((uint64_t *)a1);
  unsigned __int16 v6 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>((uint64_t *)a1);
  __int16 v23 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v23);
  char v7 = v23;
  if (HIBYTE(v23)) {
    BOOL v8 = v23 > 1u;
  }
  else {
    BOOL v8 = 1;
  }
  int v9 = v8;
  if (v9 == 1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = IPC::Decoder::decode<float>(a1);
    uint64_t v11 = IPC::Decoder::decode<float>(a1);
    unsigned int v12 = IPC::Decoder::decode<std::optional<WebCore::WebGPU::CompareFunction>>((uint64_t *)a1);
    uint64_t result = IPC::Decoder::decode<unsigned short>(a1);
    if (!*(void *)a1) {
      break;
    }
    if (v22)
    {
      int v15 = v21;
      unsigned int v21 = 0;
      if (v20 > 0xFFu
        && v19 > 0xFFu
        && v4 > 0xFFu
        && v5 > 0xFFu
        && v6 > 0xFFu
        && !v9
        && (v10 & 0xFF00000000) != 0
        && (v11 & 0xFF00000000) != 0
        && HIWORD(v12)
        && (result & 0xFF0000) != 0)
      {
        *(void *)a2 = v15;
        *(unsigned char *)(a2 + 8) = v20;
        *(unsigned char *)(a2 + 9) = v19;
        *(unsigned char *)(a2 + 10) = v4;
        *(unsigned char *)(a2 + 11) = v5;
        *(unsigned char *)(a2 + 12) = v6;
        *(unsigned char *)(a2 + 13) = v7;
        *(_DWORD *)(a2 + 16) = v10;
        *(_DWORD *)(a2 + 20) = v11;
        *(_WORD *)(a2 + 24) = v12;
        *(_WORD *)(a2 + 26) = result;
        *(unsigned char *)(a2 + 32) = 1;
        return result;
      }
    }
    __break(1u);
LABEL_23:
    uint64_t v16 = *(void *)a1;
    uint64_t v17 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18)
    {
      if (v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
    }
    char v7 = 0;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v22)
  {
    uint64_t result = (uint64_t)v21;
    unsigned int v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}